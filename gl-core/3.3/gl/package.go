// Glow automatically generated OpenGL binding: http://github.com/errcw/glow
// Copyright (c) 2010 Khronos Group.
// This material may be distributed subject to the terms and conditions
// set forth in the Open Publication License, v 1.0, 8 June 1999.
// http://opencontent.org/openpub/.
// Copyright (c) 1991-2006 Silicon Graphics, Inc.
// This document is licensed under the SGI Free Software B License.
// For details, see http://oss.sgi.com/projects/FreeB.
package gl
// #cgo darwin  LDFLAGS: -framework OpenGL
// #cgo linux   LDFLAGS: -lGL
// #cgo windows LDFLAGS: -lopengl32
// #if defined(_WIN32) && !defined(APIENTRY) && !defined(__CYGWIN__) && !defined(__SCITECH_SNAP__)
// #ifndef WIN32_LEAN_AND_MEAN
// #define WIN32_LEAN_AND_MEAN 1
// #endif
// #include <windows.h>
// #endif
// #ifndef APIENTRY
// #define APIENTRY
// #endif
// #ifndef APIENTRYP
// #define APIENTRYP APIENTRY *
// #endif
// #ifndef GLAPI
// #define GLAPI extern
// #endif
// #include <stddef.h>
// #ifndef GLEXT_64_TYPES_DEFINED
// /* This code block is duplicated in glxext.h, so must be protected */
// #define GLEXT_64_TYPES_DEFINED
// /* Define int32_t, int64_t, and uint64_t types for UST/MSC */
// /* (as used in the GL_EXT_timer_query extension). */
// #if defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
// #include <inttypes.h>
// #elif defined(__sun__) || defined(__digital__)
// #include <inttypes.h>
// #if defined(__STDC__)
// #if defined(__arch64__) || defined(_LP64)
// typedef long int int64_t;
// typedef unsigned long int uint64_t;
// #else
// typedef long long int int64_t;
// typedef unsigned long long int uint64_t;
// #endif /* __arch64__ */
// #endif /* __STDC__ */
// #elif defined( __VMS ) || defined(__sgi)
// #include <inttypes.h>
// #elif defined(__SCO__) || defined(__USLC__)
// #include <stdint.h>
// #elif defined(__UNIXOS2__) || defined(__SOL64__)
// typedef long int int32_t;
// typedef long long int int64_t;
// typedef unsigned long long int uint64_t;
// #elif defined(_WIN32) && defined(__GNUC__)
// #include <stdint.h>
// #elif defined(_WIN32)
// typedef __int32 int32_t;
// typedef __int64 int64_t;
// typedef unsigned __int64 uint64_t;
// #else
// /* Fallback if nothing above works */
// #include <inttypes.h>
// #endif
// #endif
// typedef unsigned int GLenum;
// typedef unsigned char GLboolean;
// typedef unsigned int GLbitfield;
// typedef void GLvoid;
// typedef signed char GLbyte;
// typedef short GLshort;
// typedef int GLint;
// typedef int GLclampx;
// typedef unsigned char GLubyte;
// typedef unsigned short GLushort;
// typedef unsigned int GLuint;
// typedef int GLsizei;
// typedef float GLfloat;
// typedef float GLclampf;
// typedef double GLdouble;
// typedef double GLclampd;
// typedef char GLchar;
// typedef char GLcharARB;
// #ifdef __APPLE__
// typedef void *GLhandleARB;
// #else
// typedef unsigned int GLhandleARB;
// #endif
// typedef GLint GLfixed;
// typedef ptrdiff_t GLintptr;
// typedef ptrdiff_t GLsizeiptr;
// typedef int64_t GLint64;
// typedef uint64_t GLuint64;
// typedef ptrdiff_t GLintptrARB;
// typedef ptrdiff_t GLsizeiptrARB;
// typedef int64_t GLint64EXT;
// typedef uint64_t GLuint64EXT;
// typedef struct __GLsync *GLsync;
// struct _cl_context;
// struct _cl_event;
// typedef void (APIENTRY *GLDEBUGPROC)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
// typedef void (APIENTRY *GLDEBUGPROCARB)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
// typedef void (APIENTRY *GLDEBUGPROCKHR)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
// typedef void (APIENTRY *GLDEBUGPROCAMD)(GLuint id,GLenum category,GLenum severity,GLsizei length,const GLchar *message,void *userParam);
// typedef unsigned short GLhalfNV;
// typedef GLintptr GLvdpauSurfaceNV;
// extern void glowDebugCallback_glcore33(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar* message, const void* userParam);
// static void APIENTRY glowCDebugCallback(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar* message, const void* userParam) {
//   glowDebugCallback_glcore33(source, type, id, severity, length, message, userParam);
// }
// typedef void  (APIENTRYP GPACCUMXOES)(GLenum  op, GLfixed  value);
// typedef void  (APIENTRYP GPACTIVEPROGRAMEXT)(GLuint  program);
// typedef void  (APIENTRYP GPACTIVESHADERPROGRAM)(GLuint  pipeline, GLuint  program);
// typedef void  (APIENTRYP GPACTIVESHADERPROGRAMEXT)(GLuint  pipeline, GLuint  program);
// typedef void  (APIENTRYP GPACTIVESTENCILFACEEXT)(GLenum  face);
// typedef void  (APIENTRYP GPACTIVETEXTURE)(GLenum  texture);
// typedef void  (APIENTRYP GPACTIVETEXTUREARB)(GLenum  texture);
// typedef void  (APIENTRYP GPACTIVEVARYINGNV)(GLuint  program, const GLchar * name);
// typedef void  (APIENTRYP GPALPHAFRAGMENTOP1ATI)(GLenum  op, GLuint  dst, GLuint  dstMod, GLuint  arg1, GLuint  arg1Rep, GLuint  arg1Mod);
// typedef void  (APIENTRYP GPALPHAFRAGMENTOP2ATI)(GLenum  op, GLuint  dst, GLuint  dstMod, GLuint  arg1, GLuint  arg1Rep, GLuint  arg1Mod, GLuint  arg2, GLuint  arg2Rep, GLuint  arg2Mod);
// typedef void  (APIENTRYP GPALPHAFRAGMENTOP3ATI)(GLenum  op, GLuint  dst, GLuint  dstMod, GLuint  arg1, GLuint  arg1Rep, GLuint  arg1Mod, GLuint  arg2, GLuint  arg2Rep, GLuint  arg2Mod, GLuint  arg3, GLuint  arg3Rep, GLuint  arg3Mod);
// typedef void  (APIENTRYP GPALPHAFUNCXOES)(GLenum  func, GLfixed  ref);
// typedef void  (APIENTRYP GPAPPLYTEXTUREEXT)(GLenum  mode);
// typedef GLboolean  (APIENTRYP GPAREPROGRAMSRESIDENTNV)(GLsizei  n, const GLuint * programs, GLboolean * residences);
// typedef GLboolean  (APIENTRYP GPARETEXTURESRESIDENTEXT)(GLsizei  n, const GLuint * textures, GLboolean * residences);
// typedef void  (APIENTRYP GPARRAYELEMENTEXT)(GLint  i);
// typedef void  (APIENTRYP GPARRAYOBJECTATI)(GLenum  array, GLint  size, GLenum  type, GLsizei  stride, GLuint  buffer, GLuint  offset);
// typedef void  (APIENTRYP GPASYNCMARKERSGIX)(GLuint  marker);
// typedef void  (APIENTRYP GPATTACHOBJECTARB)(GLhandleARB  containerObj, GLhandleARB  obj);
// typedef void  (APIENTRYP GPATTACHSHADER)(GLuint  program, GLuint  shader);
// typedef void  (APIENTRYP GPBEGINCONDITIONALRENDER)(GLuint  id, GLenum  mode);
// typedef void  (APIENTRYP GPBEGINCONDITIONALRENDERNV)(GLuint  id, GLenum  mode);
// typedef void  (APIENTRYP GPBEGINCONDITIONALRENDERNVX)(GLuint  id);
// typedef void  (APIENTRYP GPBEGINFRAGMENTSHADERATI)();
// typedef void  (APIENTRYP GPBEGINOCCLUSIONQUERYNV)(GLuint  id);
// typedef void  (APIENTRYP GPBEGINPERFMONITORAMD)(GLuint  monitor);
// typedef void  (APIENTRYP GPBEGINPERFQUERYINTEL)(GLuint  queryHandle);
// typedef void  (APIENTRYP GPBEGINQUERY)(GLenum  target, GLuint  id);
// typedef void  (APIENTRYP GPBEGINQUERYARB)(GLenum  target, GLuint  id);
// typedef void  (APIENTRYP GPBEGINQUERYINDEXED)(GLenum  target, GLuint  index, GLuint  id);
// typedef void  (APIENTRYP GPBEGINTRANSFORMFEEDBACK)(GLenum  primitiveMode);
// typedef void  (APIENTRYP GPBEGINTRANSFORMFEEDBACKEXT)(GLenum  primitiveMode);
// typedef void  (APIENTRYP GPBEGINTRANSFORMFEEDBACKNV)(GLenum  primitiveMode);
// typedef void  (APIENTRYP GPBEGINVERTEXSHADEREXT)();
// typedef void  (APIENTRYP GPBEGINVIDEOCAPTURENV)(GLuint  video_capture_slot);
// typedef void  (APIENTRYP GPBINDATTRIBLOCATION)(GLuint  program, GLuint  index, const GLchar * name);
// typedef void  (APIENTRYP GPBINDATTRIBLOCATIONARB)(GLhandleARB  programObj, GLuint  index, const GLcharARB * name);
// typedef void  (APIENTRYP GPBINDBUFFER)(GLenum  target, GLuint  buffer);
// typedef void  (APIENTRYP GPBINDBUFFERARB)(GLenum  target, GLuint  buffer);
// typedef void  (APIENTRYP GPBINDBUFFERBASE)(GLenum  target, GLuint  index, GLuint  buffer);
// typedef void  (APIENTRYP GPBINDBUFFERBASEEXT)(GLenum  target, GLuint  index, GLuint  buffer);
// typedef void  (APIENTRYP GPBINDBUFFERBASENV)(GLenum  target, GLuint  index, GLuint  buffer);
// typedef void  (APIENTRYP GPBINDBUFFEROFFSETEXT)(GLenum  target, GLuint  index, GLuint  buffer, GLintptr  offset);
// typedef void  (APIENTRYP GPBINDBUFFEROFFSETNV)(GLenum  target, GLuint  index, GLuint  buffer, GLintptr  offset);
// typedef void  (APIENTRYP GPBINDBUFFERRANGE)(GLenum  target, GLuint  index, GLuint  buffer, GLintptr  offset, GLsizeiptr  size);
// typedef void  (APIENTRYP GPBINDBUFFERRANGEEXT)(GLenum  target, GLuint  index, GLuint  buffer, GLintptr  offset, GLsizeiptr  size);
// typedef void  (APIENTRYP GPBINDBUFFERRANGENV)(GLenum  target, GLuint  index, GLuint  buffer, GLintptr  offset, GLsizeiptr  size);
// typedef void  (APIENTRYP GPBINDBUFFERSBASE)(GLenum  target, GLuint  first, GLsizei  count, const GLuint * buffers);
// typedef void  (APIENTRYP GPBINDBUFFERSRANGE)(GLenum  target, GLuint  first, GLsizei  count, const GLuint * buffers, const GLintptr * offsets, const GLsizeiptr * sizes);
// typedef void  (APIENTRYP GPBINDFRAGDATALOCATION)(GLuint  program, GLuint  color, const GLchar * name);
// typedef void  (APIENTRYP GPBINDFRAGDATALOCATIONEXT)(GLuint  program, GLuint  color, const GLchar * name);
// typedef void  (APIENTRYP GPBINDFRAGDATALOCATIONINDEXED)(GLuint  program, GLuint  colorNumber, GLuint  index, const GLchar * name);
// typedef void  (APIENTRYP GPBINDFRAGMENTSHADERATI)(GLuint  id);
// typedef void  (APIENTRYP GPBINDFRAMEBUFFER)(GLenum  target, GLuint  framebuffer);
// typedef void  (APIENTRYP GPBINDFRAMEBUFFEREXT)(GLenum  target, GLuint  framebuffer);
// typedef void  (APIENTRYP GPBINDIMAGETEXTURE)(GLuint  unit, GLuint  texture, GLint  level, GLboolean  layered, GLint  layer, GLenum  access, GLenum  format);
// typedef void  (APIENTRYP GPBINDIMAGETEXTUREEXT)(GLuint  index, GLuint  texture, GLint  level, GLboolean  layered, GLint  layer, GLenum  access, GLint  format);
// typedef void  (APIENTRYP GPBINDIMAGETEXTURES)(GLuint  first, GLsizei  count, const GLuint * textures);
// typedef GLuint  (APIENTRYP GPBINDLIGHTPARAMETEREXT)(GLenum  light, GLenum  value);
// typedef GLuint  (APIENTRYP GPBINDMATERIALPARAMETEREXT)(GLenum  face, GLenum  value);
// typedef void  (APIENTRYP GPBINDMULTITEXTUREEXT)(GLenum  texunit, GLenum  target, GLuint  texture);
// typedef GLuint  (APIENTRYP GPBINDPARAMETEREXT)(GLenum  value);
// typedef void  (APIENTRYP GPBINDPROGRAMARB)(GLenum  target, GLuint  program);
// typedef void  (APIENTRYP GPBINDPROGRAMNV)(GLenum  target, GLuint  id);
// typedef void  (APIENTRYP GPBINDPROGRAMPIPELINE)(GLuint  pipeline);
// typedef void  (APIENTRYP GPBINDPROGRAMPIPELINEEXT)(GLuint  pipeline);
// typedef void  (APIENTRYP GPBINDRENDERBUFFER)(GLenum  target, GLuint  renderbuffer);
// typedef void  (APIENTRYP GPBINDRENDERBUFFEREXT)(GLenum  target, GLuint  renderbuffer);
// typedef void  (APIENTRYP GPBINDSAMPLER)(GLuint  unit, GLuint  sampler);
// typedef void  (APIENTRYP GPBINDSAMPLERS)(GLuint  first, GLsizei  count, const GLuint * samplers);
// typedef GLuint  (APIENTRYP GPBINDTEXGENPARAMETEREXT)(GLenum  unit, GLenum  coord, GLenum  value);
// typedef void  (APIENTRYP GPBINDTEXTURE)(GLenum  target, GLuint  texture);
// typedef void  (APIENTRYP GPBINDTEXTUREEXT)(GLenum  target, GLuint  texture);
// typedef GLuint  (APIENTRYP GPBINDTEXTUREUNITPARAMETEREXT)(GLenum  unit, GLenum  value);
// typedef void  (APIENTRYP GPBINDTEXTURES)(GLuint  first, GLsizei  count, const GLuint * textures);
// typedef void  (APIENTRYP GPBINDTRANSFORMFEEDBACK)(GLenum  target, GLuint  id);
// typedef void  (APIENTRYP GPBINDTRANSFORMFEEDBACKNV)(GLenum  target, GLuint  id);
// typedef void  (APIENTRYP GPBINDVERTEXARRAY)(GLuint  array);
// typedef void  (APIENTRYP GPBINDVERTEXARRAYAPPLE)(GLuint  array);
// typedef void  (APIENTRYP GPBINDVERTEXBUFFER)(GLuint  bindingindex, GLuint  buffer, GLintptr  offset, GLsizei  stride);
// typedef void  (APIENTRYP GPBINDVERTEXBUFFERS)(GLuint  first, GLsizei  count, const GLuint * buffers, const GLintptr * offsets, const GLsizei * strides);
// typedef void  (APIENTRYP GPBINDVERTEXSHADEREXT)(GLuint  id);
// typedef void  (APIENTRYP GPBINDVIDEOCAPTURESTREAMBUFFERNV)(GLuint  video_capture_slot, GLuint  stream, GLenum  frame_region, GLintptrARB  offset);
// typedef void  (APIENTRYP GPBINDVIDEOCAPTURESTREAMTEXTURENV)(GLuint  video_capture_slot, GLuint  stream, GLenum  frame_region, GLenum  target, GLuint  texture);
// typedef void  (APIENTRYP GPBINORMAL3BEXT)(GLbyte  bx, GLbyte  by, GLbyte  bz);
// typedef void  (APIENTRYP GPBINORMAL3BVEXT)(const GLbyte * v);
// typedef void  (APIENTRYP GPBINORMAL3DEXT)(GLdouble  bx, GLdouble  by, GLdouble  bz);
// typedef void  (APIENTRYP GPBINORMAL3DVEXT)(const GLdouble * v);
// typedef void  (APIENTRYP GPBINORMAL3FEXT)(GLfloat  bx, GLfloat  by, GLfloat  bz);
// typedef void  (APIENTRYP GPBINORMAL3FVEXT)(const GLfloat * v);
// typedef void  (APIENTRYP GPBINORMAL3IEXT)(GLint  bx, GLint  by, GLint  bz);
// typedef void  (APIENTRYP GPBINORMAL3IVEXT)(const GLint * v);
// typedef void  (APIENTRYP GPBINORMAL3SEXT)(GLshort  bx, GLshort  by, GLshort  bz);
// typedef void  (APIENTRYP GPBINORMAL3SVEXT)(const GLshort * v);
// typedef void  (APIENTRYP GPBINORMALPOINTEREXT)(GLenum  type, GLsizei  stride, const void * pointer);
// typedef void  (APIENTRYP GPBITMAPXOES)(GLsizei  width, GLsizei  height, GLfixed  xorig, GLfixed  yorig, GLfixed  xmove, GLfixed  ymove, const GLubyte * bitmap);
// typedef void  (APIENTRYP GPBLENDBARRIERNV)();
// typedef void  (APIENTRYP GPBLENDCOLOR)(GLfloat  red, GLfloat  green, GLfloat  blue, GLfloat  alpha);
// typedef void  (APIENTRYP GPBLENDCOLOREXT)(GLfloat  red, GLfloat  green, GLfloat  blue, GLfloat  alpha);
// typedef void  (APIENTRYP GPBLENDCOLORXOES)(GLfixed  red, GLfixed  green, GLfixed  blue, GLfixed  alpha);
// typedef void  (APIENTRYP GPBLENDEQUATION)(GLenum  mode);
// typedef void  (APIENTRYP GPBLENDEQUATIONEXT)(GLenum  mode);
// typedef void  (APIENTRYP GPBLENDEQUATIONINDEXEDAMD)(GLuint  buf, GLenum  mode);
// typedef void  (APIENTRYP GPBLENDEQUATIONSEPARATE)(GLenum  modeRGB, GLenum  modeAlpha);
// typedef void  (APIENTRYP GPBLENDEQUATIONSEPARATEEXT)(GLenum  modeRGB, GLenum  modeAlpha);
// typedef void  (APIENTRYP GPBLENDEQUATIONSEPARATEINDEXEDAMD)(GLuint  buf, GLenum  modeRGB, GLenum  modeAlpha);
// typedef void  (APIENTRYP GPBLENDEQUATIONSEPARATEIARB)(GLuint  buf, GLenum  modeRGB, GLenum  modeAlpha);
// typedef void  (APIENTRYP GPBLENDEQUATIONIARB)(GLuint  buf, GLenum  mode);
// typedef void  (APIENTRYP GPBLENDFUNC)(GLenum  sfactor, GLenum  dfactor);
// typedef void  (APIENTRYP GPBLENDFUNCINDEXEDAMD)(GLuint  buf, GLenum  src, GLenum  dst);
// typedef void  (APIENTRYP GPBLENDFUNCSEPARATE)(GLenum  sfactorRGB, GLenum  dfactorRGB, GLenum  sfactorAlpha, GLenum  dfactorAlpha);
// typedef void  (APIENTRYP GPBLENDFUNCSEPARATEEXT)(GLenum  sfactorRGB, GLenum  dfactorRGB, GLenum  sfactorAlpha, GLenum  dfactorAlpha);
// typedef void  (APIENTRYP GPBLENDFUNCSEPARATEINGR)(GLenum  sfactorRGB, GLenum  dfactorRGB, GLenum  sfactorAlpha, GLenum  dfactorAlpha);
// typedef void  (APIENTRYP GPBLENDFUNCSEPARATEINDEXEDAMD)(GLuint  buf, GLenum  srcRGB, GLenum  dstRGB, GLenum  srcAlpha, GLenum  dstAlpha);
// typedef void  (APIENTRYP GPBLENDFUNCSEPARATEIARB)(GLuint  buf, GLenum  srcRGB, GLenum  dstRGB, GLenum  srcAlpha, GLenum  dstAlpha);
// typedef void  (APIENTRYP GPBLENDFUNCIARB)(GLuint  buf, GLenum  src, GLenum  dst);
// typedef void  (APIENTRYP GPBLENDPARAMETERINV)(GLenum  pname, GLint  value);
// typedef void  (APIENTRYP GPBLITFRAMEBUFFER)(GLint  srcX0, GLint  srcY0, GLint  srcX1, GLint  srcY1, GLint  dstX0, GLint  dstY0, GLint  dstX1, GLint  dstY1, GLbitfield  mask, GLenum  filter);
// typedef void  (APIENTRYP GPBLITFRAMEBUFFEREXT)(GLint  srcX0, GLint  srcY0, GLint  srcX1, GLint  srcY1, GLint  dstX0, GLint  dstY0, GLint  dstX1, GLint  dstY1, GLbitfield  mask, GLenum  filter);
// typedef void  (APIENTRYP GPBUFFERADDRESSRANGENV)(GLenum  pname, GLuint  index, GLuint64EXT  address, GLsizeiptr  length);
// typedef void  (APIENTRYP GPBUFFERDATA)(GLenum  target, GLsizeiptr  size, const void * data, GLenum  usage);
// typedef void  (APIENTRYP GPBUFFERDATAARB)(GLenum  target, GLsizeiptrARB  size, const void * data, GLenum  usage);
// typedef void  (APIENTRYP GPBUFFERPARAMETERIAPPLE)(GLenum  target, GLenum  pname, GLint  param);
// typedef void  (APIENTRYP GPBUFFERSTORAGE)(GLenum  target, GLsizeiptr  size, const void * data, GLbitfield  flags);
// typedef void  (APIENTRYP GPBUFFERSUBDATA)(GLenum  target, GLintptr  offset, GLsizeiptr  size, const void * data);
// typedef void  (APIENTRYP GPBUFFERSUBDATAARB)(GLenum  target, GLintptrARB  offset, GLsizeiptrARB  size, const void * data);
// typedef GLenum  (APIENTRYP GPCHECKFRAMEBUFFERSTATUS)(GLenum  target);
// typedef GLenum  (APIENTRYP GPCHECKFRAMEBUFFERSTATUSEXT)(GLenum  target);
// typedef GLenum  (APIENTRYP GPCHECKNAMEDFRAMEBUFFERSTATUSEXT)(GLuint  framebuffer, GLenum  target);
// typedef void  (APIENTRYP GPCLAMPCOLOR)(GLenum  target, GLenum  clamp);
// typedef void  (APIENTRYP GPCLAMPCOLORARB)(GLenum  target, GLenum  clamp);
// typedef void  (APIENTRYP GPCLEAR)(GLbitfield  mask);
// typedef void  (APIENTRYP GPCLEARACCUMXOES)(GLfixed  red, GLfixed  green, GLfixed  blue, GLfixed  alpha);
// typedef void  (APIENTRYP GPCLEARBUFFERDATA)(GLenum  target, GLenum  internalformat, GLenum  format, GLenum  type, const void * data);
// typedef void  (APIENTRYP GPCLEARBUFFERSUBDATA)(GLenum  target, GLenum  internalformat, GLintptr  offset, GLsizeiptr  size, GLenum  format, GLenum  type, const void * data);
// typedef void  (APIENTRYP GPCLEARBUFFERFI)(GLenum  buffer, GLint  drawbuffer, GLfloat  depth, GLint  stencil);
// typedef void  (APIENTRYP GPCLEARBUFFERFV)(GLenum  buffer, GLint  drawbuffer, const GLfloat * value);
// typedef void  (APIENTRYP GPCLEARBUFFERIV)(GLenum  buffer, GLint  drawbuffer, const GLint * value);
// typedef void  (APIENTRYP GPCLEARBUFFERUIV)(GLenum  buffer, GLint  drawbuffer, const GLuint * value);
// typedef void  (APIENTRYP GPCLEARCOLOR)(GLfloat  red, GLfloat  green, GLfloat  blue, GLfloat  alpha);
// typedef void  (APIENTRYP GPCLEARCOLORIIEXT)(GLint  red, GLint  green, GLint  blue, GLint  alpha);
// typedef void  (APIENTRYP GPCLEARCOLORIUIEXT)(GLuint  red, GLuint  green, GLuint  blue, GLuint  alpha);
// typedef void  (APIENTRYP GPCLEARCOLORXOES)(GLfixed  red, GLfixed  green, GLfixed  blue, GLfixed  alpha);
// typedef void  (APIENTRYP GPCLEARDEPTH)(GLdouble  depth);
// typedef void  (APIENTRYP GPCLEARDEPTHDNV)(GLdouble  depth);
// typedef void  (APIENTRYP GPCLEARDEPTHF)(GLfloat  d);
// typedef void  (APIENTRYP GPCLEARDEPTHFOES)(GLclampf  depth);
// typedef void  (APIENTRYP GPCLEARDEPTHXOES)(GLfixed  depth);
// typedef void  (APIENTRYP GPCLEARNAMEDBUFFERDATAEXT)(GLuint  buffer, GLenum  internalformat, GLenum  format, GLenum  type, const void * data);
// typedef void  (APIENTRYP GPCLEARNAMEDBUFFERSUBDATAEXT)(GLuint  buffer, GLenum  internalformat, GLsizeiptr  offset, GLsizeiptr  size, GLenum  format, GLenum  type, const void * data);
// typedef void  (APIENTRYP GPCLEARSTENCIL)(GLint  s);
// typedef void  (APIENTRYP GPCLEARTEXIMAGE)(GLuint  texture, GLint  level, GLenum  format, GLenum  type, const void * data);
// typedef void  (APIENTRYP GPCLEARTEXSUBIMAGE)(GLuint  texture, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLsizei  width, GLsizei  height, GLsizei  depth, GLenum  format, GLenum  type, const void * data);
// typedef void  (APIENTRYP GPCLIENTACTIVETEXTUREARB)(GLenum  texture);
// typedef void  (APIENTRYP GPCLIENTACTIVEVERTEXSTREAMATI)(GLenum  stream);
// typedef void  (APIENTRYP GPCLIENTATTRIBDEFAULTEXT)(GLbitfield  mask);
// typedef GLenum  (APIENTRYP GPCLIENTWAITSYNC)(GLsync  sync, GLbitfield  flags, GLuint64  timeout);
// typedef void  (APIENTRYP GPCLIPPLANEFOES)(GLenum  plane, const GLfloat * equation);
// typedef void  (APIENTRYP GPCLIPPLANEXOES)(GLenum  plane, const GLfixed * equation);
// typedef void  (APIENTRYP GPCOLOR3FVERTEX3FSUN)(GLfloat  r, GLfloat  g, GLfloat  b, GLfloat  x, GLfloat  y, GLfloat  z);
// typedef void  (APIENTRYP GPCOLOR3FVERTEX3FVSUN)(const GLfloat * c, const GLfloat * v);
// typedef void  (APIENTRYP GPCOLOR3HNV)(GLhalfNV  red, GLhalfNV  green, GLhalfNV  blue);
// typedef void  (APIENTRYP GPCOLOR3HVNV)(const GLhalfNV * v);
// typedef void  (APIENTRYP GPCOLOR3XOES)(GLfixed  red, GLfixed  green, GLfixed  blue);
// typedef void  (APIENTRYP GPCOLOR3XVOES)(const GLfixed * components);
// typedef void  (APIENTRYP GPCOLOR4FNORMAL3FVERTEX3FSUN)(GLfloat  r, GLfloat  g, GLfloat  b, GLfloat  a, GLfloat  nx, GLfloat  ny, GLfloat  nz, GLfloat  x, GLfloat  y, GLfloat  z);
// typedef void  (APIENTRYP GPCOLOR4FNORMAL3FVERTEX3FVSUN)(const GLfloat * c, const GLfloat * n, const GLfloat * v);
// typedef void  (APIENTRYP GPCOLOR4HNV)(GLhalfNV  red, GLhalfNV  green, GLhalfNV  blue, GLhalfNV  alpha);
// typedef void  (APIENTRYP GPCOLOR4HVNV)(const GLhalfNV * v);
// typedef void  (APIENTRYP GPCOLOR4UBVERTEX2FSUN)(GLubyte  r, GLubyte  g, GLubyte  b, GLubyte  a, GLfloat  x, GLfloat  y);
// typedef void  (APIENTRYP GPCOLOR4UBVERTEX2FVSUN)(const GLubyte * c, const GLfloat * v);
// typedef void  (APIENTRYP GPCOLOR4UBVERTEX3FSUN)(GLubyte  r, GLubyte  g, GLubyte  b, GLubyte  a, GLfloat  x, GLfloat  y, GLfloat  z);
// typedef void  (APIENTRYP GPCOLOR4UBVERTEX3FVSUN)(const GLubyte * c, const GLfloat * v);
// typedef void  (APIENTRYP GPCOLOR4XOES)(GLfixed  red, GLfixed  green, GLfixed  blue, GLfixed  alpha);
// typedef void  (APIENTRYP GPCOLOR4XVOES)(const GLfixed * components);
// typedef void  (APIENTRYP GPCOLORFORMATNV)(GLint  size, GLenum  type, GLsizei  stride);
// typedef void  (APIENTRYP GPCOLORFRAGMENTOP1ATI)(GLenum  op, GLuint  dst, GLuint  dstMask, GLuint  dstMod, GLuint  arg1, GLuint  arg1Rep, GLuint  arg1Mod);
// typedef void  (APIENTRYP GPCOLORFRAGMENTOP2ATI)(GLenum  op, GLuint  dst, GLuint  dstMask, GLuint  dstMod, GLuint  arg1, GLuint  arg1Rep, GLuint  arg1Mod, GLuint  arg2, GLuint  arg2Rep, GLuint  arg2Mod);
// typedef void  (APIENTRYP GPCOLORFRAGMENTOP3ATI)(GLenum  op, GLuint  dst, GLuint  dstMask, GLuint  dstMod, GLuint  arg1, GLuint  arg1Rep, GLuint  arg1Mod, GLuint  arg2, GLuint  arg2Rep, GLuint  arg2Mod, GLuint  arg3, GLuint  arg3Rep, GLuint  arg3Mod);
// typedef void  (APIENTRYP GPCOLORMASK)(GLboolean  red, GLboolean  green, GLboolean  blue, GLboolean  alpha);
// typedef void  (APIENTRYP GPCOLORMASKINDEXEDEXT)(GLuint  index, GLboolean  r, GLboolean  g, GLboolean  b, GLboolean  a);
// typedef void  (APIENTRYP GPCOLORMASKI)(GLuint  index, GLboolean  r, GLboolean  g, GLboolean  b, GLboolean  a);
// typedef void  (APIENTRYP GPCOLORPOINTEREXT)(GLint  size, GLenum  type, GLsizei  stride, GLsizei  count, const void * pointer);
// typedef void  (APIENTRYP GPCOLORPOINTERLISTIBM)(GLint  size, GLenum  type, GLint  stride, const void ** pointer, GLint  ptrstride);
// typedef void  (APIENTRYP GPCOLORPOINTERVINTEL)(GLint  size, GLenum  type, const void ** pointer);
// typedef void  (APIENTRYP GPCOLORSUBTABLEEXT)(GLenum  target, GLsizei  start, GLsizei  count, GLenum  format, GLenum  type, const void * data);
// typedef void  (APIENTRYP GPCOLORTABLEEXT)(GLenum  target, GLenum  internalFormat, GLsizei  width, GLenum  format, GLenum  type, const void * table);
// typedef void  (APIENTRYP GPCOLORTABLEPARAMETERFVSGI)(GLenum  target, GLenum  pname, const GLfloat * params);
// typedef void  (APIENTRYP GPCOLORTABLEPARAMETERIVSGI)(GLenum  target, GLenum  pname, const GLint * params);
// typedef void  (APIENTRYP GPCOLORTABLESGI)(GLenum  target, GLenum  internalformat, GLsizei  width, GLenum  format, GLenum  type, const void * table);
// typedef void  (APIENTRYP GPCOMBINERINPUTNV)(GLenum  stage, GLenum  portion, GLenum  variable, GLenum  input, GLenum  mapping, GLenum  componentUsage);
// typedef void  (APIENTRYP GPCOMBINEROUTPUTNV)(GLenum  stage, GLenum  portion, GLenum  abOutput, GLenum  cdOutput, GLenum  sumOutput, GLenum  scale, GLenum  bias, GLboolean  abDotProduct, GLboolean  cdDotProduct, GLboolean  muxSum);
// typedef void  (APIENTRYP GPCOMBINERPARAMETERFNV)(GLenum  pname, GLfloat  param);
// typedef void  (APIENTRYP GPCOMBINERPARAMETERFVNV)(GLenum  pname, const GLfloat * params);
// typedef void  (APIENTRYP GPCOMBINERPARAMETERINV)(GLenum  pname, GLint  param);
// typedef void  (APIENTRYP GPCOMBINERPARAMETERIVNV)(GLenum  pname, const GLint * params);
// typedef void  (APIENTRYP GPCOMBINERSTAGEPARAMETERFVNV)(GLenum  stage, GLenum  pname, const GLfloat * params);
// typedef void  (APIENTRYP GPCOMPILESHADER)(GLuint  shader);
// typedef void  (APIENTRYP GPCOMPILESHADERARB)(GLhandleARB  shaderObj);
// typedef void  (APIENTRYP GPCOMPILESHADERINCLUDEARB)(GLuint  shader, GLsizei  count, const GLchar *const* path, const GLint * length);
// typedef void  (APIENTRYP GPCOMPRESSEDMULTITEXIMAGE1DEXT)(GLenum  texunit, GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLint  border, GLsizei  imageSize, const void * bits);
// typedef void  (APIENTRYP GPCOMPRESSEDMULTITEXIMAGE2DEXT)(GLenum  texunit, GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLsizei  height, GLint  border, GLsizei  imageSize, const void * bits);
// typedef void  (APIENTRYP GPCOMPRESSEDMULTITEXIMAGE3DEXT)(GLenum  texunit, GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth, GLint  border, GLsizei  imageSize, const void * bits);
// typedef void  (APIENTRYP GPCOMPRESSEDMULTITEXSUBIMAGE1DEXT)(GLenum  texunit, GLenum  target, GLint  level, GLint  xoffset, GLsizei  width, GLenum  format, GLsizei  imageSize, const void * bits);
// typedef void  (APIENTRYP GPCOMPRESSEDMULTITEXSUBIMAGE2DEXT)(GLenum  texunit, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLsizei  width, GLsizei  height, GLenum  format, GLsizei  imageSize, const void * bits);
// typedef void  (APIENTRYP GPCOMPRESSEDMULTITEXSUBIMAGE3DEXT)(GLenum  texunit, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLsizei  width, GLsizei  height, GLsizei  depth, GLenum  format, GLsizei  imageSize, const void * bits);
// typedef void  (APIENTRYP GPCOMPRESSEDTEXIMAGE1D)(GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLint  border, GLsizei  imageSize, const void * data);
// typedef void  (APIENTRYP GPCOMPRESSEDTEXIMAGE1DARB)(GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLint  border, GLsizei  imageSize, const void * data);
// typedef void  (APIENTRYP GPCOMPRESSEDTEXIMAGE2D)(GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLsizei  height, GLint  border, GLsizei  imageSize, const void * data);
// typedef void  (APIENTRYP GPCOMPRESSEDTEXIMAGE2DARB)(GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLsizei  height, GLint  border, GLsizei  imageSize, const void * data);
// typedef void  (APIENTRYP GPCOMPRESSEDTEXIMAGE3D)(GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth, GLint  border, GLsizei  imageSize, const void * data);
// typedef void  (APIENTRYP GPCOMPRESSEDTEXIMAGE3DARB)(GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth, GLint  border, GLsizei  imageSize, const void * data);
// typedef void  (APIENTRYP GPCOMPRESSEDTEXSUBIMAGE1D)(GLenum  target, GLint  level, GLint  xoffset, GLsizei  width, GLenum  format, GLsizei  imageSize, const void * data);
// typedef void  (APIENTRYP GPCOMPRESSEDTEXSUBIMAGE1DARB)(GLenum  target, GLint  level, GLint  xoffset, GLsizei  width, GLenum  format, GLsizei  imageSize, const void * data);
// typedef void  (APIENTRYP GPCOMPRESSEDTEXSUBIMAGE2D)(GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLsizei  width, GLsizei  height, GLenum  format, GLsizei  imageSize, const void * data);
// typedef void  (APIENTRYP GPCOMPRESSEDTEXSUBIMAGE2DARB)(GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLsizei  width, GLsizei  height, GLenum  format, GLsizei  imageSize, const void * data);
// typedef void  (APIENTRYP GPCOMPRESSEDTEXSUBIMAGE3D)(GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLsizei  width, GLsizei  height, GLsizei  depth, GLenum  format, GLsizei  imageSize, const void * data);
// typedef void  (APIENTRYP GPCOMPRESSEDTEXSUBIMAGE3DARB)(GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLsizei  width, GLsizei  height, GLsizei  depth, GLenum  format, GLsizei  imageSize, const void * data);
// typedef void  (APIENTRYP GPCOMPRESSEDTEXTUREIMAGE1DEXT)(GLuint  texture, GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLint  border, GLsizei  imageSize, const void * bits);
// typedef void  (APIENTRYP GPCOMPRESSEDTEXTUREIMAGE2DEXT)(GLuint  texture, GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLsizei  height, GLint  border, GLsizei  imageSize, const void * bits);
// typedef void  (APIENTRYP GPCOMPRESSEDTEXTUREIMAGE3DEXT)(GLuint  texture, GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth, GLint  border, GLsizei  imageSize, const void * bits);
// typedef void  (APIENTRYP GPCOMPRESSEDTEXTURESUBIMAGE1DEXT)(GLuint  texture, GLenum  target, GLint  level, GLint  xoffset, GLsizei  width, GLenum  format, GLsizei  imageSize, const void * bits);
// typedef void  (APIENTRYP GPCOMPRESSEDTEXTURESUBIMAGE2DEXT)(GLuint  texture, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLsizei  width, GLsizei  height, GLenum  format, GLsizei  imageSize, const void * bits);
// typedef void  (APIENTRYP GPCOMPRESSEDTEXTURESUBIMAGE3DEXT)(GLuint  texture, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLsizei  width, GLsizei  height, GLsizei  depth, GLenum  format, GLsizei  imageSize, const void * bits);
// typedef void  (APIENTRYP GPCONVOLUTIONFILTER1DEXT)(GLenum  target, GLenum  internalformat, GLsizei  width, GLenum  format, GLenum  type, const void * image);
// typedef void  (APIENTRYP GPCONVOLUTIONFILTER2DEXT)(GLenum  target, GLenum  internalformat, GLsizei  width, GLsizei  height, GLenum  format, GLenum  type, const void * image);
// typedef void  (APIENTRYP GPCONVOLUTIONPARAMETERFEXT)(GLenum  target, GLenum  pname, GLfloat  params);
// typedef void  (APIENTRYP GPCONVOLUTIONPARAMETERFVEXT)(GLenum  target, GLenum  pname, const GLfloat * params);
// typedef void  (APIENTRYP GPCONVOLUTIONPARAMETERIEXT)(GLenum  target, GLenum  pname, GLint  params);
// typedef void  (APIENTRYP GPCONVOLUTIONPARAMETERIVEXT)(GLenum  target, GLenum  pname, const GLint * params);
// typedef void  (APIENTRYP GPCONVOLUTIONPARAMETERXOES)(GLenum  target, GLenum  pname, GLfixed  param);
// typedef void  (APIENTRYP GPCONVOLUTIONPARAMETERXVOES)(GLenum  target, GLenum  pname, const GLfixed * params);
// typedef void  (APIENTRYP GPCOPYBUFFERSUBDATA)(GLenum  readTarget, GLenum  writeTarget, GLintptr  readOffset, GLintptr  writeOffset, GLsizeiptr  size);
// typedef void  (APIENTRYP GPCOPYCOLORSUBTABLEEXT)(GLenum  target, GLsizei  start, GLint  x, GLint  y, GLsizei  width);
// typedef void  (APIENTRYP GPCOPYCOLORTABLESGI)(GLenum  target, GLenum  internalformat, GLint  x, GLint  y, GLsizei  width);
// typedef void  (APIENTRYP GPCOPYCONVOLUTIONFILTER1DEXT)(GLenum  target, GLenum  internalformat, GLint  x, GLint  y, GLsizei  width);
// typedef void  (APIENTRYP GPCOPYCONVOLUTIONFILTER2DEXT)(GLenum  target, GLenum  internalformat, GLint  x, GLint  y, GLsizei  width, GLsizei  height);
// typedef void  (APIENTRYP GPCOPYIMAGESUBDATA)(GLuint  srcName, GLenum  srcTarget, GLint  srcLevel, GLint  srcX, GLint  srcY, GLint  srcZ, GLuint  dstName, GLenum  dstTarget, GLint  dstLevel, GLint  dstX, GLint  dstY, GLint  dstZ, GLsizei  srcWidth, GLsizei  srcHeight, GLsizei  srcDepth);
// typedef void  (APIENTRYP GPCOPYIMAGESUBDATANV)(GLuint  srcName, GLenum  srcTarget, GLint  srcLevel, GLint  srcX, GLint  srcY, GLint  srcZ, GLuint  dstName, GLenum  dstTarget, GLint  dstLevel, GLint  dstX, GLint  dstY, GLint  dstZ, GLsizei  width, GLsizei  height, GLsizei  depth);
// typedef void  (APIENTRYP GPCOPYMULTITEXIMAGE1DEXT)(GLenum  texunit, GLenum  target, GLint  level, GLenum  internalformat, GLint  x, GLint  y, GLsizei  width, GLint  border);
// typedef void  (APIENTRYP GPCOPYMULTITEXIMAGE2DEXT)(GLenum  texunit, GLenum  target, GLint  level, GLenum  internalformat, GLint  x, GLint  y, GLsizei  width, GLsizei  height, GLint  border);
// typedef void  (APIENTRYP GPCOPYMULTITEXSUBIMAGE1DEXT)(GLenum  texunit, GLenum  target, GLint  level, GLint  xoffset, GLint  x, GLint  y, GLsizei  width);
// typedef void  (APIENTRYP GPCOPYMULTITEXSUBIMAGE2DEXT)(GLenum  texunit, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  x, GLint  y, GLsizei  width, GLsizei  height);
// typedef void  (APIENTRYP GPCOPYMULTITEXSUBIMAGE3DEXT)(GLenum  texunit, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLint  x, GLint  y, GLsizei  width, GLsizei  height);
// typedef void  (APIENTRYP GPCOPYPATHNV)(GLuint  resultPath, GLuint  srcPath);
// typedef void  (APIENTRYP GPCOPYTEXIMAGE1D)(GLenum  target, GLint  level, GLenum  internalformat, GLint  x, GLint  y, GLsizei  width, GLint  border);
// typedef void  (APIENTRYP GPCOPYTEXIMAGE1DEXT)(GLenum  target, GLint  level, GLenum  internalformat, GLint  x, GLint  y, GLsizei  width, GLint  border);
// typedef void  (APIENTRYP GPCOPYTEXIMAGE2D)(GLenum  target, GLint  level, GLenum  internalformat, GLint  x, GLint  y, GLsizei  width, GLsizei  height, GLint  border);
// typedef void  (APIENTRYP GPCOPYTEXIMAGE2DEXT)(GLenum  target, GLint  level, GLenum  internalformat, GLint  x, GLint  y, GLsizei  width, GLsizei  height, GLint  border);
// typedef void  (APIENTRYP GPCOPYTEXSUBIMAGE1D)(GLenum  target, GLint  level, GLint  xoffset, GLint  x, GLint  y, GLsizei  width);
// typedef void  (APIENTRYP GPCOPYTEXSUBIMAGE1DEXT)(GLenum  target, GLint  level, GLint  xoffset, GLint  x, GLint  y, GLsizei  width);
// typedef void  (APIENTRYP GPCOPYTEXSUBIMAGE2D)(GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  x, GLint  y, GLsizei  width, GLsizei  height);
// typedef void  (APIENTRYP GPCOPYTEXSUBIMAGE2DEXT)(GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  x, GLint  y, GLsizei  width, GLsizei  height);
// typedef void  (APIENTRYP GPCOPYTEXSUBIMAGE3D)(GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLint  x, GLint  y, GLsizei  width, GLsizei  height);
// typedef void  (APIENTRYP GPCOPYTEXSUBIMAGE3DEXT)(GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLint  x, GLint  y, GLsizei  width, GLsizei  height);
// typedef void  (APIENTRYP GPCOPYTEXTUREIMAGE1DEXT)(GLuint  texture, GLenum  target, GLint  level, GLenum  internalformat, GLint  x, GLint  y, GLsizei  width, GLint  border);
// typedef void  (APIENTRYP GPCOPYTEXTUREIMAGE2DEXT)(GLuint  texture, GLenum  target, GLint  level, GLenum  internalformat, GLint  x, GLint  y, GLsizei  width, GLsizei  height, GLint  border);
// typedef void  (APIENTRYP GPCOPYTEXTURESUBIMAGE1DEXT)(GLuint  texture, GLenum  target, GLint  level, GLint  xoffset, GLint  x, GLint  y, GLsizei  width);
// typedef void  (APIENTRYP GPCOPYTEXTURESUBIMAGE2DEXT)(GLuint  texture, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  x, GLint  y, GLsizei  width, GLsizei  height);
// typedef void  (APIENTRYP GPCOPYTEXTURESUBIMAGE3DEXT)(GLuint  texture, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLint  x, GLint  y, GLsizei  width, GLsizei  height);
// typedef void  (APIENTRYP GPCOVERFILLPATHINSTANCEDNV)(GLsizei  numPaths, GLenum  pathNameType, const void * paths, GLuint  pathBase, GLenum  coverMode, GLenum  transformType, const GLfloat * transformValues);
// typedef void  (APIENTRYP GPCOVERFILLPATHNV)(GLuint  path, GLenum  coverMode);
// typedef void  (APIENTRYP GPCOVERSTROKEPATHINSTANCEDNV)(GLsizei  numPaths, GLenum  pathNameType, const void * paths, GLuint  pathBase, GLenum  coverMode, GLenum  transformType, const GLfloat * transformValues);
// typedef void  (APIENTRYP GPCOVERSTROKEPATHNV)(GLuint  path, GLenum  coverMode);
// typedef void  (APIENTRYP GPCREATEPERFQUERYINTEL)(GLuint  queryId, GLuint * queryHandle);
// typedef GLuint  (APIENTRYP GPCREATEPROGRAM)();
// typedef GLhandleARB  (APIENTRYP GPCREATEPROGRAMOBJECTARB)();
// typedef GLuint  (APIENTRYP GPCREATESHADER)(GLenum  type);
// typedef GLhandleARB  (APIENTRYP GPCREATESHADEROBJECTARB)(GLenum  shaderType);
// typedef GLuint  (APIENTRYP GPCREATESHADERPROGRAMEXT)(GLenum  type, const GLchar * string);
// typedef GLuint  (APIENTRYP GPCREATESHADERPROGRAMV)(GLenum  type, GLsizei  count, const GLchar *const* strings);
// typedef GLuint  (APIENTRYP GPCREATESHADERPROGRAMVEXT)(GLenum  type, GLsizei  count, const GLchar ** strings);
// typedef GLsync  (APIENTRYP GPCREATESYNCFROMCLEVENTARB)(struct _cl_context * context, struct _cl_event * event, GLbitfield  flags);
// typedef void  (APIENTRYP GPCULLFACE)(GLenum  mode);
// typedef void  (APIENTRYP GPCULLPARAMETERDVEXT)(GLenum  pname, GLdouble * params);
// typedef void  (APIENTRYP GPCULLPARAMETERFVEXT)(GLenum  pname, GLfloat * params);
// typedef void  (APIENTRYP GPCURRENTPALETTEMATRIXARB)(GLint  index);
// typedef void  (APIENTRYP GPDEBUGMESSAGECALLBACK)(GLDEBUGPROC  callback, const void * userParam);
// typedef void  (APIENTRYP GPDEBUGMESSAGECALLBACKAMD)(GLDEBUGPROCAMD  callback, void * userParam);
// typedef void  (APIENTRYP GPDEBUGMESSAGECALLBACKARB)(GLDEBUGPROCARB  callback, const void * userParam);
// typedef void  (APIENTRYP GPDEBUGMESSAGECALLBACKKHR)(GLDEBUGPROCKHR  callback, const void * userParam);
// typedef void  (APIENTRYP GPDEBUGMESSAGECONTROL)(GLenum  source, GLenum  type, GLenum  severity, GLsizei  count, const GLuint * ids, GLboolean  enabled);
// typedef void  (APIENTRYP GPDEBUGMESSAGECONTROLARB)(GLenum  source, GLenum  type, GLenum  severity, GLsizei  count, const GLuint * ids, GLboolean  enabled);
// typedef void  (APIENTRYP GPDEBUGMESSAGECONTROLKHR)(GLenum  source, GLenum  type, GLenum  severity, GLsizei  count, const GLuint * ids, GLboolean  enabled);
// typedef void  (APIENTRYP GPDEBUGMESSAGEENABLEAMD)(GLenum  category, GLenum  severity, GLsizei  count, const GLuint * ids, GLboolean  enabled);
// typedef void  (APIENTRYP GPDEBUGMESSAGEINSERT)(GLenum  source, GLenum  type, GLuint  id, GLenum  severity, GLsizei  length, const GLchar * buf);
// typedef void  (APIENTRYP GPDEBUGMESSAGEINSERTAMD)(GLenum  category, GLenum  severity, GLuint  id, GLsizei  length, const GLchar * buf);
// typedef void  (APIENTRYP GPDEBUGMESSAGEINSERTARB)(GLenum  source, GLenum  type, GLuint  id, GLenum  severity, GLsizei  length, const GLchar * buf);
// typedef void  (APIENTRYP GPDEBUGMESSAGEINSERTKHR)(GLenum  source, GLenum  type, GLuint  id, GLenum  severity, GLsizei  length, const GLchar * buf);
// typedef void  (APIENTRYP GPDEFORMSGIX)(GLbitfield  mask);
// typedef void  (APIENTRYP GPDEFORMATIONMAP3DSGIX)(GLenum  target, GLdouble  u1, GLdouble  u2, GLint  ustride, GLint  uorder, GLdouble  v1, GLdouble  v2, GLint  vstride, GLint  vorder, GLdouble  w1, GLdouble  w2, GLint  wstride, GLint  worder, const GLdouble * points);
// typedef void  (APIENTRYP GPDEFORMATIONMAP3FSGIX)(GLenum  target, GLfloat  u1, GLfloat  u2, GLint  ustride, GLint  uorder, GLfloat  v1, GLfloat  v2, GLint  vstride, GLint  vorder, GLfloat  w1, GLfloat  w2, GLint  wstride, GLint  worder, const GLfloat * points);
// typedef void  (APIENTRYP GPDELETEASYNCMARKERSSGIX)(GLuint  marker, GLsizei  range);
// typedef void  (APIENTRYP GPDELETEBUFFERS)(GLsizei  n, const GLuint * buffers);
// typedef void  (APIENTRYP GPDELETEBUFFERSARB)(GLsizei  n, const GLuint * buffers);
// typedef void  (APIENTRYP GPDELETEFENCESAPPLE)(GLsizei  n, const GLuint * fences);
// typedef void  (APIENTRYP GPDELETEFENCESNV)(GLsizei  n, const GLuint * fences);
// typedef void  (APIENTRYP GPDELETEFRAGMENTSHADERATI)(GLuint  id);
// typedef void  (APIENTRYP GPDELETEFRAMEBUFFERS)(GLsizei  n, const GLuint * framebuffers);
// typedef void  (APIENTRYP GPDELETEFRAMEBUFFERSEXT)(GLsizei  n, const GLuint * framebuffers);
// typedef void  (APIENTRYP GPDELETENAMEDSTRINGARB)(GLint  namelen, const GLchar * name);
// typedef void  (APIENTRYP GPDELETENAMESAMD)(GLenum  identifier, GLuint  num, const GLuint * names);
// typedef void  (APIENTRYP GPDELETEOBJECTARB)(GLhandleARB  obj);
// typedef void  (APIENTRYP GPDELETEOCCLUSIONQUERIESNV)(GLsizei  n, const GLuint * ids);
// typedef void  (APIENTRYP GPDELETEPATHSNV)(GLuint  path, GLsizei  range);
// typedef void  (APIENTRYP GPDELETEPERFMONITORSAMD)(GLsizei  n, GLuint * monitors);
// typedef void  (APIENTRYP GPDELETEPERFQUERYINTEL)(GLuint  queryHandle);
// typedef void  (APIENTRYP GPDELETEPROGRAM)(GLuint  program);
// typedef void  (APIENTRYP GPDELETEPROGRAMPIPELINES)(GLsizei  n, const GLuint * pipelines);
// typedef void  (APIENTRYP GPDELETEPROGRAMPIPELINESEXT)(GLsizei  n, const GLuint * pipelines);
// typedef void  (APIENTRYP GPDELETEPROGRAMSARB)(GLsizei  n, const GLuint * programs);
// typedef void  (APIENTRYP GPDELETEPROGRAMSNV)(GLsizei  n, const GLuint * programs);
// typedef void  (APIENTRYP GPDELETEQUERIES)(GLsizei  n, const GLuint * ids);
// typedef void  (APIENTRYP GPDELETEQUERIESARB)(GLsizei  n, const GLuint * ids);
// typedef void  (APIENTRYP GPDELETERENDERBUFFERS)(GLsizei  n, const GLuint * renderbuffers);
// typedef void  (APIENTRYP GPDELETERENDERBUFFERSEXT)(GLsizei  n, const GLuint * renderbuffers);
// typedef void  (APIENTRYP GPDELETESAMPLERS)(GLsizei  count, const GLuint * samplers);
// typedef void  (APIENTRYP GPDELETESHADER)(GLuint  shader);
// typedef void  (APIENTRYP GPDELETESYNC)(GLsync  sync);
// typedef void  (APIENTRYP GPDELETETEXTURES)(GLsizei  n, const GLuint * textures);
// typedef void  (APIENTRYP GPDELETETEXTURESEXT)(GLsizei  n, const GLuint * textures);
// typedef void  (APIENTRYP GPDELETETRANSFORMFEEDBACKS)(GLsizei  n, const GLuint * ids);
// typedef void  (APIENTRYP GPDELETETRANSFORMFEEDBACKSNV)(GLsizei  n, const GLuint * ids);
// typedef void  (APIENTRYP GPDELETEVERTEXARRAYS)(GLsizei  n, const GLuint * arrays);
// typedef void  (APIENTRYP GPDELETEVERTEXARRAYSAPPLE)(GLsizei  n, const GLuint * arrays);
// typedef void  (APIENTRYP GPDELETEVERTEXSHADEREXT)(GLuint  id);
// typedef void  (APIENTRYP GPDEPTHBOUNDSEXT)(GLclampd  zmin, GLclampd  zmax);
// typedef void  (APIENTRYP GPDEPTHBOUNDSDNV)(GLdouble  zmin, GLdouble  zmax);
// typedef void  (APIENTRYP GPDEPTHFUNC)(GLenum  func);
// typedef void  (APIENTRYP GPDEPTHMASK)(GLboolean  flag);
// typedef void  (APIENTRYP GPDEPTHRANGE)(GLdouble  xnear, GLdouble  xfar);
// typedef void  (APIENTRYP GPDEPTHRANGEARRAYV)(GLuint  first, GLsizei  count, const GLdouble * v);
// typedef void  (APIENTRYP GPDEPTHRANGEINDEXED)(GLuint  index, GLdouble  n, GLdouble  f);
// typedef void  (APIENTRYP GPDEPTHRANGEDNV)(GLdouble  zNear, GLdouble  zFar);
// typedef void  (APIENTRYP GPDEPTHRANGEF)(GLfloat  n, GLfloat  f);
// typedef void  (APIENTRYP GPDEPTHRANGEFOES)(GLclampf  n, GLclampf  f);
// typedef void  (APIENTRYP GPDEPTHRANGEXOES)(GLfixed  n, GLfixed  f);
// typedef void  (APIENTRYP GPDETACHOBJECTARB)(GLhandleARB  containerObj, GLhandleARB  attachedObj);
// typedef void  (APIENTRYP GPDETACHSHADER)(GLuint  program, GLuint  shader);
// typedef void  (APIENTRYP GPDETAILTEXFUNCSGIS)(GLenum  target, GLsizei  n, const GLfloat * points);
// typedef void  (APIENTRYP GPDISABLE)(GLenum  cap);
// typedef void  (APIENTRYP GPDISABLECLIENTSTATEINDEXEDEXT)(GLenum  array, GLuint  index);
// typedef void  (APIENTRYP GPDISABLECLIENTSTATEIEXT)(GLenum  array, GLuint  index);
// typedef void  (APIENTRYP GPDISABLEINDEXEDEXT)(GLenum  target, GLuint  index);
// typedef void  (APIENTRYP GPDISABLEVARIANTCLIENTSTATEEXT)(GLuint  id);
// typedef void  (APIENTRYP GPDISABLEVERTEXARRAYATTRIBEXT)(GLuint  vaobj, GLuint  index);
// typedef void  (APIENTRYP GPDISABLEVERTEXARRAYEXT)(GLuint  vaobj, GLenum  array);
// typedef void  (APIENTRYP GPDISABLEVERTEXATTRIBAPPLE)(GLuint  index, GLenum  pname);
// typedef void  (APIENTRYP GPDISABLEVERTEXATTRIBARRAY)(GLuint  index);
// typedef void  (APIENTRYP GPDISABLEVERTEXATTRIBARRAYARB)(GLuint  index);
// typedef void  (APIENTRYP GPDISABLEI)(GLenum  target, GLuint  index);
// typedef void  (APIENTRYP GPDISPATCHCOMPUTE)(GLuint  num_groups_x, GLuint  num_groups_y, GLuint  num_groups_z);
// typedef void  (APIENTRYP GPDISPATCHCOMPUTEGROUPSIZEARB)(GLuint  num_groups_x, GLuint  num_groups_y, GLuint  num_groups_z, GLuint  group_size_x, GLuint  group_size_y, GLuint  group_size_z);
// typedef void  (APIENTRYP GPDISPATCHCOMPUTEINDIRECT)(GLintptr  indirect);
// typedef void  (APIENTRYP GPDRAWARRAYS)(GLenum  mode, GLint  first, GLsizei  count);
// typedef void  (APIENTRYP GPDRAWARRAYSEXT)(GLenum  mode, GLint  first, GLsizei  count);
// typedef void  (APIENTRYP GPDRAWARRAYSINDIRECT)(GLenum  mode, const void * indirect);
// typedef void  (APIENTRYP GPDRAWARRAYSINSTANCED)(GLenum  mode, GLint  first, GLsizei  count, GLsizei  instancecount);
// typedef void  (APIENTRYP GPDRAWARRAYSINSTANCEDARB)(GLenum  mode, GLint  first, GLsizei  count, GLsizei  primcount);
// typedef void  (APIENTRYP GPDRAWARRAYSINSTANCEDBASEINSTANCE)(GLenum  mode, GLint  first, GLsizei  count, GLsizei  instancecount, GLuint  baseinstance);
// typedef void  (APIENTRYP GPDRAWARRAYSINSTANCEDEXT)(GLenum  mode, GLint  start, GLsizei  count, GLsizei  primcount);
// typedef void  (APIENTRYP GPDRAWBUFFER)(GLenum  mode);
// typedef void  (APIENTRYP GPDRAWBUFFERS)(GLsizei  n, const GLenum * bufs);
// typedef void  (APIENTRYP GPDRAWBUFFERSARB)(GLsizei  n, const GLenum * bufs);
// typedef void  (APIENTRYP GPDRAWBUFFERSATI)(GLsizei  n, const GLenum * bufs);
// typedef void  (APIENTRYP GPDRAWELEMENTARRAYAPPLE)(GLenum  mode, GLint  first, GLsizei  count);
// typedef void  (APIENTRYP GPDRAWELEMENTARRAYATI)(GLenum  mode, GLsizei  count);
// typedef void  (APIENTRYP GPDRAWELEMENTS)(GLenum  mode, GLsizei  count, GLenum  type, const void * indices);
// typedef void  (APIENTRYP GPDRAWELEMENTSBASEVERTEX)(GLenum  mode, GLsizei  count, GLenum  type, const void * indices, GLint  basevertex);
// typedef void  (APIENTRYP GPDRAWELEMENTSINDIRECT)(GLenum  mode, GLenum  type, const void * indirect);
// typedef void  (APIENTRYP GPDRAWELEMENTSINSTANCED)(GLenum  mode, GLsizei  count, GLenum  type, const void * indices, GLsizei  instancecount);
// typedef void  (APIENTRYP GPDRAWELEMENTSINSTANCEDARB)(GLenum  mode, GLsizei  count, GLenum  type, const void * indices, GLsizei  primcount);
// typedef void  (APIENTRYP GPDRAWELEMENTSINSTANCEDBASEINSTANCE)(GLenum  mode, GLsizei  count, GLenum  type, const void * indices, GLsizei  instancecount, GLuint  baseinstance);
// typedef void  (APIENTRYP GPDRAWELEMENTSINSTANCEDBASEVERTEX)(GLenum  mode, GLsizei  count, GLenum  type, const void * indices, GLsizei  instancecount, GLint  basevertex);
// typedef void  (APIENTRYP GPDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCE)(GLenum  mode, GLsizei  count, GLenum  type, const void * indices, GLsizei  instancecount, GLint  basevertex, GLuint  baseinstance);
// typedef void  (APIENTRYP GPDRAWELEMENTSINSTANCEDEXT)(GLenum  mode, GLsizei  count, GLenum  type, const void * indices, GLsizei  primcount);
// typedef void  (APIENTRYP GPDRAWMESHARRAYSSUN)(GLenum  mode, GLint  first, GLsizei  count, GLsizei  width);
// typedef void  (APIENTRYP GPDRAWRANGEELEMENTARRAYAPPLE)(GLenum  mode, GLuint  start, GLuint  end, GLint  first, GLsizei  count);
// typedef void  (APIENTRYP GPDRAWRANGEELEMENTARRAYATI)(GLenum  mode, GLuint  start, GLuint  end, GLsizei  count);
// typedef void  (APIENTRYP GPDRAWRANGEELEMENTS)(GLenum  mode, GLuint  start, GLuint  end, GLsizei  count, GLenum  type, const void * indices);
// typedef void  (APIENTRYP GPDRAWRANGEELEMENTSBASEVERTEX)(GLenum  mode, GLuint  start, GLuint  end, GLsizei  count, GLenum  type, const void * indices, GLint  basevertex);
// typedef void  (APIENTRYP GPDRAWRANGEELEMENTSEXT)(GLenum  mode, GLuint  start, GLuint  end, GLsizei  count, GLenum  type, const void * indices);
// typedef void  (APIENTRYP GPDRAWTEXTURENV)(GLuint  texture, GLuint  sampler, GLfloat  x0, GLfloat  y0, GLfloat  x1, GLfloat  y1, GLfloat  z, GLfloat  s0, GLfloat  t0, GLfloat  s1, GLfloat  t1);
// typedef void  (APIENTRYP GPDRAWTRANSFORMFEEDBACK)(GLenum  mode, GLuint  id);
// typedef void  (APIENTRYP GPDRAWTRANSFORMFEEDBACKINSTANCED)(GLenum  mode, GLuint  id, GLsizei  instancecount);
// typedef void  (APIENTRYP GPDRAWTRANSFORMFEEDBACKNV)(GLenum  mode, GLuint  id);
// typedef void  (APIENTRYP GPDRAWTRANSFORMFEEDBACKSTREAM)(GLenum  mode, GLuint  id, GLuint  stream);
// typedef void  (APIENTRYP GPDRAWTRANSFORMFEEDBACKSTREAMINSTANCED)(GLenum  mode, GLuint  id, GLuint  stream, GLsizei  instancecount);
// typedef void  (APIENTRYP GPEDGEFLAGFORMATNV)(GLsizei  stride);
// typedef void  (APIENTRYP GPEDGEFLAGPOINTEREXT)(GLsizei  stride, GLsizei  count, const GLboolean * pointer);
// typedef void  (APIENTRYP GPEDGEFLAGPOINTERLISTIBM)(GLint  stride, const GLboolean ** pointer, GLint  ptrstride);
// typedef void  (APIENTRYP GPELEMENTPOINTERAPPLE)(GLenum  type, const void * pointer);
// typedef void  (APIENTRYP GPELEMENTPOINTERATI)(GLenum  type, const void * pointer);
// typedef void  (APIENTRYP GPENABLE)(GLenum  cap);
// typedef void  (APIENTRYP GPENABLECLIENTSTATEINDEXEDEXT)(GLenum  array, GLuint  index);
// typedef void  (APIENTRYP GPENABLECLIENTSTATEIEXT)(GLenum  array, GLuint  index);
// typedef void  (APIENTRYP GPENABLEINDEXEDEXT)(GLenum  target, GLuint  index);
// typedef void  (APIENTRYP GPENABLEVARIANTCLIENTSTATEEXT)(GLuint  id);
// typedef void  (APIENTRYP GPENABLEVERTEXARRAYATTRIBEXT)(GLuint  vaobj, GLuint  index);
// typedef void  (APIENTRYP GPENABLEVERTEXARRAYEXT)(GLuint  vaobj, GLenum  array);
// typedef void  (APIENTRYP GPENABLEVERTEXATTRIBAPPLE)(GLuint  index, GLenum  pname);
// typedef void  (APIENTRYP GPENABLEVERTEXATTRIBARRAY)(GLuint  index);
// typedef void  (APIENTRYP GPENABLEVERTEXATTRIBARRAYARB)(GLuint  index);
// typedef void  (APIENTRYP GPENABLEI)(GLenum  target, GLuint  index);
// typedef void  (APIENTRYP GPENDCONDITIONALRENDER)();
// typedef void  (APIENTRYP GPENDCONDITIONALRENDERNV)();
// typedef void  (APIENTRYP GPENDCONDITIONALRENDERNVX)();
// typedef void  (APIENTRYP GPENDFRAGMENTSHADERATI)();
// typedef void  (APIENTRYP GPENDOCCLUSIONQUERYNV)();
// typedef void  (APIENTRYP GPENDPERFMONITORAMD)(GLuint  monitor);
// typedef void  (APIENTRYP GPENDPERFQUERYINTEL)(GLuint  queryHandle);
// typedef void  (APIENTRYP GPENDQUERY)(GLenum  target);
// typedef void  (APIENTRYP GPENDQUERYARB)(GLenum  target);
// typedef void  (APIENTRYP GPENDQUERYINDEXED)(GLenum  target, GLuint  index);
// typedef void  (APIENTRYP GPENDTRANSFORMFEEDBACK)();
// typedef void  (APIENTRYP GPENDTRANSFORMFEEDBACKEXT)();
// typedef void  (APIENTRYP GPENDTRANSFORMFEEDBACKNV)();
// typedef void  (APIENTRYP GPENDVERTEXSHADEREXT)();
// typedef void  (APIENTRYP GPENDVIDEOCAPTURENV)(GLuint  video_capture_slot);
// typedef void  (APIENTRYP GPEVALCOORD1XOES)(GLfixed  u);
// typedef void  (APIENTRYP GPEVALCOORD1XVOES)(const GLfixed * coords);
// typedef void  (APIENTRYP GPEVALCOORD2XOES)(GLfixed  u, GLfixed  v);
// typedef void  (APIENTRYP GPEVALCOORD2XVOES)(const GLfixed * coords);
// typedef void  (APIENTRYP GPEVALMAPSNV)(GLenum  target, GLenum  mode);
// typedef void  (APIENTRYP GPEXECUTEPROGRAMNV)(GLenum  target, GLuint  id, const GLfloat * params);
// typedef void  (APIENTRYP GPEXTRACTCOMPONENTEXT)(GLuint  res, GLuint  src, GLuint  num);
// typedef void  (APIENTRYP GPFEEDBACKBUFFERXOES)(GLsizei  n, GLenum  type, const GLfixed * buffer);
// typedef GLsync  (APIENTRYP GPFENCESYNC)(GLenum  condition, GLbitfield  flags);
// typedef void  (APIENTRYP GPFINALCOMBINERINPUTNV)(GLenum  variable, GLenum  input, GLenum  mapping, GLenum  componentUsage);
// typedef void  (APIENTRYP GPFINISH)();
// typedef GLint  (APIENTRYP GPFINISHASYNCSGIX)(GLuint * markerp);
// typedef void  (APIENTRYP GPFINISHFENCEAPPLE)(GLuint  fence);
// typedef void  (APIENTRYP GPFINISHFENCENV)(GLuint  fence);
// typedef void  (APIENTRYP GPFINISHOBJECTAPPLE)(GLenum  object, GLint  name);
// typedef void  (APIENTRYP GPFINISHTEXTURESUNX)();
// typedef void  (APIENTRYP GPFLUSH)();
// typedef void  (APIENTRYP GPFLUSHMAPPEDBUFFERRANGE)(GLenum  target, GLintptr  offset, GLsizeiptr  length);
// typedef void  (APIENTRYP GPFLUSHMAPPEDBUFFERRANGEAPPLE)(GLenum  target, GLintptr  offset, GLsizeiptr  size);
// typedef void  (APIENTRYP GPFLUSHMAPPEDNAMEDBUFFERRANGEEXT)(GLuint  buffer, GLintptr  offset, GLsizeiptr  length);
// typedef void  (APIENTRYP GPFLUSHPIXELDATARANGENV)(GLenum  target);
// typedef void  (APIENTRYP GPFLUSHRASTERSGIX)();
// typedef void  (APIENTRYP GPFLUSHSTATICDATAIBM)(GLenum  target);
// typedef void  (APIENTRYP GPFLUSHVERTEXARRAYRANGEAPPLE)(GLsizei  length, void * pointer);
// typedef void  (APIENTRYP GPFLUSHVERTEXARRAYRANGENV)();
// typedef void  (APIENTRYP GPFOGCOORDFORMATNV)(GLenum  type, GLsizei  stride);
// typedef void  (APIENTRYP GPFOGCOORDPOINTEREXT)(GLenum  type, GLsizei  stride, const void * pointer);
// typedef void  (APIENTRYP GPFOGCOORDPOINTERLISTIBM)(GLenum  type, GLint  stride, const void ** pointer, GLint  ptrstride);
// typedef void  (APIENTRYP GPFOGCOORDDEXT)(GLdouble  coord);
// typedef void  (APIENTRYP GPFOGCOORDDVEXT)(const GLdouble * coord);
// typedef void  (APIENTRYP GPFOGCOORDFEXT)(GLfloat  coord);
// typedef void  (APIENTRYP GPFOGCOORDFVEXT)(const GLfloat * coord);
// typedef void  (APIENTRYP GPFOGCOORDHNV)(GLhalfNV  fog);
// typedef void  (APIENTRYP GPFOGCOORDHVNV)(const GLhalfNV * fog);
// typedef void  (APIENTRYP GPFOGFUNCSGIS)(GLsizei  n, const GLfloat * points);
// typedef void  (APIENTRYP GPFOGXOES)(GLenum  pname, GLfixed  param);
// typedef void  (APIENTRYP GPFOGXVOES)(GLenum  pname, const GLfixed * param);
// typedef void  (APIENTRYP GPFRAGMENTCOLORMATERIALSGIX)(GLenum  face, GLenum  mode);
// typedef void  (APIENTRYP GPFRAGMENTLIGHTMODELFSGIX)(GLenum  pname, GLfloat  param);
// typedef void  (APIENTRYP GPFRAGMENTLIGHTMODELFVSGIX)(GLenum  pname, const GLfloat * params);
// typedef void  (APIENTRYP GPFRAGMENTLIGHTMODELISGIX)(GLenum  pname, GLint  param);
// typedef void  (APIENTRYP GPFRAGMENTLIGHTMODELIVSGIX)(GLenum  pname, const GLint * params);
// typedef void  (APIENTRYP GPFRAGMENTLIGHTFSGIX)(GLenum  light, GLenum  pname, GLfloat  param);
// typedef void  (APIENTRYP GPFRAGMENTLIGHTFVSGIX)(GLenum  light, GLenum  pname, const GLfloat * params);
// typedef void  (APIENTRYP GPFRAGMENTLIGHTISGIX)(GLenum  light, GLenum  pname, GLint  param);
// typedef void  (APIENTRYP GPFRAGMENTLIGHTIVSGIX)(GLenum  light, GLenum  pname, const GLint * params);
// typedef void  (APIENTRYP GPFRAGMENTMATERIALFSGIX)(GLenum  face, GLenum  pname, GLfloat  param);
// typedef void  (APIENTRYP GPFRAGMENTMATERIALFVSGIX)(GLenum  face, GLenum  pname, const GLfloat * params);
// typedef void  (APIENTRYP GPFRAGMENTMATERIALISGIX)(GLenum  face, GLenum  pname, GLint  param);
// typedef void  (APIENTRYP GPFRAGMENTMATERIALIVSGIX)(GLenum  face, GLenum  pname, const GLint * params);
// typedef void  (APIENTRYP GPFRAMETERMINATORGREMEDY)();
// typedef void  (APIENTRYP GPFRAMEZOOMSGIX)(GLint  factor);
// typedef void  (APIENTRYP GPFRAMEBUFFERDRAWBUFFEREXT)(GLuint  framebuffer, GLenum  mode);
// typedef void  (APIENTRYP GPFRAMEBUFFERDRAWBUFFERSEXT)(GLuint  framebuffer, GLsizei  n, const GLenum * bufs);
// typedef void  (APIENTRYP GPFRAMEBUFFERPARAMETERI)(GLenum  target, GLenum  pname, GLint  param);
// typedef void  (APIENTRYP GPFRAMEBUFFERREADBUFFEREXT)(GLuint  framebuffer, GLenum  mode);
// typedef void  (APIENTRYP GPFRAMEBUFFERRENDERBUFFER)(GLenum  target, GLenum  attachment, GLenum  renderbuffertarget, GLuint  renderbuffer);
// typedef void  (APIENTRYP GPFRAMEBUFFERRENDERBUFFEREXT)(GLenum  target, GLenum  attachment, GLenum  renderbuffertarget, GLuint  renderbuffer);
// typedef void  (APIENTRYP GPFRAMEBUFFERTEXTURE)(GLenum  target, GLenum  attachment, GLuint  texture, GLint  level);
// typedef void  (APIENTRYP GPFRAMEBUFFERTEXTURE1D)(GLenum  target, GLenum  attachment, GLenum  textarget, GLuint  texture, GLint  level);
// typedef void  (APIENTRYP GPFRAMEBUFFERTEXTURE1DEXT)(GLenum  target, GLenum  attachment, GLenum  textarget, GLuint  texture, GLint  level);
// typedef void  (APIENTRYP GPFRAMEBUFFERTEXTURE2D)(GLenum  target, GLenum  attachment, GLenum  textarget, GLuint  texture, GLint  level);
// typedef void  (APIENTRYP GPFRAMEBUFFERTEXTURE2DEXT)(GLenum  target, GLenum  attachment, GLenum  textarget, GLuint  texture, GLint  level);
// typedef void  (APIENTRYP GPFRAMEBUFFERTEXTURE3D)(GLenum  target, GLenum  attachment, GLenum  textarget, GLuint  texture, GLint  level, GLint  zoffset);
// typedef void  (APIENTRYP GPFRAMEBUFFERTEXTURE3DEXT)(GLenum  target, GLenum  attachment, GLenum  textarget, GLuint  texture, GLint  level, GLint  zoffset);
// typedef void  (APIENTRYP GPFRAMEBUFFERTEXTUREARB)(GLenum  target, GLenum  attachment, GLuint  texture, GLint  level);
// typedef void  (APIENTRYP GPFRAMEBUFFERTEXTUREEXT)(GLenum  target, GLenum  attachment, GLuint  texture, GLint  level);
// typedef void  (APIENTRYP GPFRAMEBUFFERTEXTUREFACEARB)(GLenum  target, GLenum  attachment, GLuint  texture, GLint  level, GLenum  face);
// typedef void  (APIENTRYP GPFRAMEBUFFERTEXTUREFACEEXT)(GLenum  target, GLenum  attachment, GLuint  texture, GLint  level, GLenum  face);
// typedef void  (APIENTRYP GPFRAMEBUFFERTEXTURELAYER)(GLenum  target, GLenum  attachment, GLuint  texture, GLint  level, GLint  layer);
// typedef void  (APIENTRYP GPFRAMEBUFFERTEXTURELAYERARB)(GLenum  target, GLenum  attachment, GLuint  texture, GLint  level, GLint  layer);
// typedef void  (APIENTRYP GPFRAMEBUFFERTEXTURELAYEREXT)(GLenum  target, GLenum  attachment, GLuint  texture, GLint  level, GLint  layer);
// typedef void  (APIENTRYP GPFREEOBJECTBUFFERATI)(GLuint  buffer);
// typedef void  (APIENTRYP GPFRONTFACE)(GLenum  mode);
// typedef void  (APIENTRYP GPFRUSTUMFOES)(GLfloat  l, GLfloat  r, GLfloat  b, GLfloat  t, GLfloat  n, GLfloat  f);
// typedef void  (APIENTRYP GPFRUSTUMXOES)(GLfixed  l, GLfixed  r, GLfixed  b, GLfixed  t, GLfixed  n, GLfixed  f);
// typedef GLuint  (APIENTRYP GPGENASYNCMARKERSSGIX)(GLsizei  range);
// typedef void  (APIENTRYP GPGENBUFFERS)(GLsizei  n, GLuint * buffers);
// typedef void  (APIENTRYP GPGENBUFFERSARB)(GLsizei  n, GLuint * buffers);
// typedef void  (APIENTRYP GPGENFENCESAPPLE)(GLsizei  n, GLuint * fences);
// typedef void  (APIENTRYP GPGENFENCESNV)(GLsizei  n, GLuint * fences);
// typedef GLuint  (APIENTRYP GPGENFRAGMENTSHADERSATI)(GLuint  range);
// typedef void  (APIENTRYP GPGENFRAMEBUFFERS)(GLsizei  n, GLuint * framebuffers);
// typedef void  (APIENTRYP GPGENFRAMEBUFFERSEXT)(GLsizei  n, GLuint * framebuffers);
// typedef void  (APIENTRYP GPGENNAMESAMD)(GLenum  identifier, GLuint  num, GLuint * names);
// typedef void  (APIENTRYP GPGENOCCLUSIONQUERIESNV)(GLsizei  n, GLuint * ids);
// typedef GLuint  (APIENTRYP GPGENPATHSNV)(GLsizei  range);
// typedef void  (APIENTRYP GPGENPERFMONITORSAMD)(GLsizei  n, GLuint * monitors);
// typedef void  (APIENTRYP GPGENPROGRAMPIPELINES)(GLsizei  n, GLuint * pipelines);
// typedef void  (APIENTRYP GPGENPROGRAMPIPELINESEXT)(GLsizei  n, GLuint * pipelines);
// typedef void  (APIENTRYP GPGENPROGRAMSARB)(GLsizei  n, GLuint * programs);
// typedef void  (APIENTRYP GPGENPROGRAMSNV)(GLsizei  n, GLuint * programs);
// typedef void  (APIENTRYP GPGENQUERIES)(GLsizei  n, GLuint * ids);
// typedef void  (APIENTRYP GPGENQUERIESARB)(GLsizei  n, GLuint * ids);
// typedef void  (APIENTRYP GPGENRENDERBUFFERS)(GLsizei  n, GLuint * renderbuffers);
// typedef void  (APIENTRYP GPGENRENDERBUFFERSEXT)(GLsizei  n, GLuint * renderbuffers);
// typedef void  (APIENTRYP GPGENSAMPLERS)(GLsizei  count, GLuint * samplers);
// typedef GLuint  (APIENTRYP GPGENSYMBOLSEXT)(GLenum  datatype, GLenum  storagetype, GLenum  range, GLuint  components);
// typedef void  (APIENTRYP GPGENTEXTURES)(GLsizei  n, GLuint * textures);
// typedef void  (APIENTRYP GPGENTEXTURESEXT)(GLsizei  n, GLuint * textures);
// typedef void  (APIENTRYP GPGENTRANSFORMFEEDBACKS)(GLsizei  n, GLuint * ids);
// typedef void  (APIENTRYP GPGENTRANSFORMFEEDBACKSNV)(GLsizei  n, GLuint * ids);
// typedef void  (APIENTRYP GPGENVERTEXARRAYS)(GLsizei  n, GLuint * arrays);
// typedef void  (APIENTRYP GPGENVERTEXARRAYSAPPLE)(GLsizei  n, GLuint * arrays);
// typedef GLuint  (APIENTRYP GPGENVERTEXSHADERSEXT)(GLuint  range);
// typedef void  (APIENTRYP GPGENERATEMIPMAP)(GLenum  target);
// typedef void  (APIENTRYP GPGENERATEMIPMAPEXT)(GLenum  target);
// typedef void  (APIENTRYP GPGENERATEMULTITEXMIPMAPEXT)(GLenum  texunit, GLenum  target);
// typedef void  (APIENTRYP GPGENERATETEXTUREMIPMAPEXT)(GLuint  texture, GLenum  target);
// typedef void  (APIENTRYP GPGETACTIVEATOMICCOUNTERBUFFERIV)(GLuint  program, GLuint  bufferIndex, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP GPGETACTIVEATTRIB)(GLuint  program, GLuint  index, GLsizei  bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name);
// typedef void  (APIENTRYP GPGETACTIVEATTRIBARB)(GLhandleARB  programObj, GLuint  index, GLsizei  maxLength, GLsizei * length, GLint * size, GLenum * type, GLcharARB * name);
// typedef void  (APIENTRYP GPGETACTIVESUBROUTINENAME)(GLuint  program, GLenum  shadertype, GLuint  index, GLsizei  bufsize, GLsizei * length, GLchar * name);
// typedef void  (APIENTRYP GPGETACTIVESUBROUTINEUNIFORMNAME)(GLuint  program, GLenum  shadertype, GLuint  index, GLsizei  bufsize, GLsizei * length, GLchar * name);
// typedef void  (APIENTRYP GPGETACTIVESUBROUTINEUNIFORMIV)(GLuint  program, GLenum  shadertype, GLuint  index, GLenum  pname, GLint * values);
// typedef void  (APIENTRYP GPGETACTIVEUNIFORM)(GLuint  program, GLuint  index, GLsizei  bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name);
// typedef void  (APIENTRYP GPGETACTIVEUNIFORMARB)(GLhandleARB  programObj, GLuint  index, GLsizei  maxLength, GLsizei * length, GLint * size, GLenum * type, GLcharARB * name);
// typedef void  (APIENTRYP GPGETACTIVEUNIFORMBLOCKNAME)(GLuint  program, GLuint  uniformBlockIndex, GLsizei  bufSize, GLsizei * length, GLchar * uniformBlockName);
// typedef void  (APIENTRYP GPGETACTIVEUNIFORMBLOCKIV)(GLuint  program, GLuint  uniformBlockIndex, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP GPGETACTIVEUNIFORMNAME)(GLuint  program, GLuint  uniformIndex, GLsizei  bufSize, GLsizei * length, GLchar * uniformName);
// typedef void  (APIENTRYP GPGETACTIVEUNIFORMSIV)(GLuint  program, GLsizei  uniformCount, const GLuint * uniformIndices, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP GPGETACTIVEVARYINGNV)(GLuint  program, GLuint  index, GLsizei  bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name);
// typedef void  (APIENTRYP GPGETARRAYOBJECTFVATI)(GLenum  array, GLenum  pname, GLfloat * params);
// typedef void  (APIENTRYP GPGETARRAYOBJECTIVATI)(GLenum  array, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP GPGETATTACHEDOBJECTSARB)(GLhandleARB  containerObj, GLsizei  maxCount, GLsizei * count, GLhandleARB * obj);
// typedef void  (APIENTRYP GPGETATTACHEDSHADERS)(GLuint  program, GLsizei  maxCount, GLsizei * count, GLuint * shaders);
// typedef GLint  (APIENTRYP GPGETATTRIBLOCATION)(GLuint  program, const GLchar * name);
// typedef GLint  (APIENTRYP GPGETATTRIBLOCATIONARB)(GLhandleARB  programObj, const GLcharARB * name);
// typedef void  (APIENTRYP GPGETBOOLEANINDEXEDVEXT)(GLenum  target, GLuint  index, GLboolean * data);
// typedef void  (APIENTRYP GPGETBOOLEANI_V)(GLenum  target, GLuint  index, GLboolean * data);
// typedef void  (APIENTRYP GPGETBOOLEANV)(GLenum  pname, GLboolean * data);
// typedef void  (APIENTRYP GPGETBUFFERPARAMETERI64V)(GLenum  target, GLenum  pname, GLint64 * params);
// typedef void  (APIENTRYP GPGETBUFFERPARAMETERIV)(GLenum  target, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP GPGETBUFFERPARAMETERIVARB)(GLenum  target, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP GPGETBUFFERPARAMETERUI64VNV)(GLenum  target, GLenum  pname, GLuint64EXT * params);
// typedef void  (APIENTRYP GPGETBUFFERPOINTERV)(GLenum  target, GLenum  pname, void ** params);
// typedef void  (APIENTRYP GPGETBUFFERPOINTERVARB)(GLenum  target, GLenum  pname, void ** params);
// typedef void  (APIENTRYP GPGETBUFFERSUBDATA)(GLenum  target, GLintptr  offset, GLsizeiptr  size, void * data);
// typedef void  (APIENTRYP GPGETBUFFERSUBDATAARB)(GLenum  target, GLintptrARB  offset, GLsizeiptrARB  size, void * data);
// typedef void  (APIENTRYP GPGETCLIPPLANEFOES)(GLenum  plane, GLfloat * equation);
// typedef void  (APIENTRYP GPGETCLIPPLANEXOES)(GLenum  plane, GLfixed * equation);
// typedef void  (APIENTRYP GPGETCOLORTABLEEXT)(GLenum  target, GLenum  format, GLenum  type, void * data);
// typedef void  (APIENTRYP GPGETCOLORTABLEPARAMETERFVEXT)(GLenum  target, GLenum  pname, GLfloat * params);
// typedef void  (APIENTRYP GPGETCOLORTABLEPARAMETERFVSGI)(GLenum  target, GLenum  pname, GLfloat * params);
// typedef void  (APIENTRYP GPGETCOLORTABLEPARAMETERIVEXT)(GLenum  target, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP GPGETCOLORTABLEPARAMETERIVSGI)(GLenum  target, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP GPGETCOLORTABLESGI)(GLenum  target, GLenum  format, GLenum  type, void * table);
// typedef void  (APIENTRYP GPGETCOMBINERINPUTPARAMETERFVNV)(GLenum  stage, GLenum  portion, GLenum  variable, GLenum  pname, GLfloat * params);
// typedef void  (APIENTRYP GPGETCOMBINERINPUTPARAMETERIVNV)(GLenum  stage, GLenum  portion, GLenum  variable, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP GPGETCOMBINEROUTPUTPARAMETERFVNV)(GLenum  stage, GLenum  portion, GLenum  pname, GLfloat * params);
// typedef void  (APIENTRYP GPGETCOMBINEROUTPUTPARAMETERIVNV)(GLenum  stage, GLenum  portion, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP GPGETCOMBINERSTAGEPARAMETERFVNV)(GLenum  stage, GLenum  pname, GLfloat * params);
// typedef void  (APIENTRYP GPGETCOMPRESSEDMULTITEXIMAGEEXT)(GLenum  texunit, GLenum  target, GLint  lod, void * img);
// typedef void  (APIENTRYP GPGETCOMPRESSEDTEXIMAGE)(GLenum  target, GLint  level, void * img);
// typedef void  (APIENTRYP GPGETCOMPRESSEDTEXIMAGEARB)(GLenum  target, GLint  level, void * img);
// typedef void  (APIENTRYP GPGETCOMPRESSEDTEXTUREIMAGEEXT)(GLuint  texture, GLenum  target, GLint  lod, void * img);
// typedef void  (APIENTRYP GPGETCONVOLUTIONFILTEREXT)(GLenum  target, GLenum  format, GLenum  type, void * image);
// typedef void  (APIENTRYP GPGETCONVOLUTIONPARAMETERFVEXT)(GLenum  target, GLenum  pname, GLfloat * params);
// typedef void  (APIENTRYP GPGETCONVOLUTIONPARAMETERIVEXT)(GLenum  target, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP GPGETCONVOLUTIONPARAMETERXVOES)(GLenum  target, GLenum  pname, GLfixed * params);
// typedef GLuint  (APIENTRYP GPGETDEBUGMESSAGELOG)(GLuint  count, GLsizei  bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog);
// typedef GLuint  (APIENTRYP GPGETDEBUGMESSAGELOGAMD)(GLuint  count, GLsizei  bufsize, GLenum * categories, GLuint * severities, GLuint * ids, GLsizei * lengths, GLchar * message);
// typedef GLuint  (APIENTRYP GPGETDEBUGMESSAGELOGARB)(GLuint  count, GLsizei  bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog);
// typedef GLuint  (APIENTRYP GPGETDEBUGMESSAGELOGKHR)(GLuint  count, GLsizei  bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog);
// typedef void  (APIENTRYP GPGETDETAILTEXFUNCSGIS)(GLenum  target, GLfloat * points);
// typedef void  (APIENTRYP GPGETDOUBLEINDEXEDVEXT)(GLenum  target, GLuint  index, GLdouble * data);
// typedef void  (APIENTRYP GPGETDOUBLEI_V)(GLenum  target, GLuint  index, GLdouble * data);
// typedef void  (APIENTRYP GPGETDOUBLEI_VEXT)(GLenum  pname, GLuint  index, GLdouble * params);
// typedef void  (APIENTRYP GPGETDOUBLEV)(GLenum  pname, GLdouble * data);
// typedef GLenum  (APIENTRYP GPGETERROR)();
// typedef void  (APIENTRYP GPGETFENCEIVNV)(GLuint  fence, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP GPGETFINALCOMBINERINPUTPARAMETERFVNV)(GLenum  variable, GLenum  pname, GLfloat * params);
// typedef void  (APIENTRYP GPGETFINALCOMBINERINPUTPARAMETERIVNV)(GLenum  variable, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP GPGETFIRSTPERFQUERYIDINTEL)(GLuint * queryId);
// typedef void  (APIENTRYP GPGETFIXEDVOES)(GLenum  pname, GLfixed * params);
// typedef void  (APIENTRYP GPGETFLOATINDEXEDVEXT)(GLenum  target, GLuint  index, GLfloat * data);
// typedef void  (APIENTRYP GPGETFLOATI_V)(GLenum  target, GLuint  index, GLfloat * data);
// typedef void  (APIENTRYP GPGETFLOATI_VEXT)(GLenum  pname, GLuint  index, GLfloat * params);
// typedef void  (APIENTRYP GPGETFLOATV)(GLenum  pname, GLfloat * data);
// typedef void  (APIENTRYP GPGETFOGFUNCSGIS)(GLfloat * points);
// typedef GLint  (APIENTRYP GPGETFRAGDATAINDEX)(GLuint  program, const GLchar * name);
// typedef GLint  (APIENTRYP GPGETFRAGDATALOCATION)(GLuint  program, const GLchar * name);
// typedef GLint  (APIENTRYP GPGETFRAGDATALOCATIONEXT)(GLuint  program, const GLchar * name);
// typedef void  (APIENTRYP GPGETFRAGMENTLIGHTFVSGIX)(GLenum  light, GLenum  pname, GLfloat * params);
// typedef void  (APIENTRYP GPGETFRAGMENTLIGHTIVSGIX)(GLenum  light, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP GPGETFRAGMENTMATERIALFVSGIX)(GLenum  face, GLenum  pname, GLfloat * params);
// typedef void  (APIENTRYP GPGETFRAGMENTMATERIALIVSGIX)(GLenum  face, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP GPGETFRAMEBUFFERATTACHMENTPARAMETERIV)(GLenum  target, GLenum  attachment, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP GPGETFRAMEBUFFERATTACHMENTPARAMETERIVEXT)(GLenum  target, GLenum  attachment, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP GPGETFRAMEBUFFERPARAMETERIV)(GLenum  target, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP GPGETFRAMEBUFFERPARAMETERIVEXT)(GLuint  framebuffer, GLenum  pname, GLint * params);
// typedef GLenum  (APIENTRYP GPGETGRAPHICSRESETSTATUSARB)();
// typedef GLhandleARB  (APIENTRYP GPGETHANDLEARB)(GLenum  pname);
// typedef void  (APIENTRYP GPGETHISTOGRAMEXT)(GLenum  target, GLboolean  reset, GLenum  format, GLenum  type, void * values);
// typedef void  (APIENTRYP GPGETHISTOGRAMPARAMETERFVEXT)(GLenum  target, GLenum  pname, GLfloat * params);
// typedef void  (APIENTRYP GPGETHISTOGRAMPARAMETERIVEXT)(GLenum  target, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP GPGETHISTOGRAMPARAMETERXVOES)(GLenum  target, GLenum  pname, GLfixed * params);
// typedef GLuint64  (APIENTRYP GPGETIMAGEHANDLEARB)(GLuint  texture, GLint  level, GLboolean  layered, GLint  layer, GLenum  format);
// typedef GLuint64  (APIENTRYP GPGETIMAGEHANDLENV)(GLuint  texture, GLint  level, GLboolean  layered, GLint  layer, GLenum  format);
// typedef void  (APIENTRYP GPGETIMAGETRANSFORMPARAMETERFVHP)(GLenum  target, GLenum  pname, GLfloat * params);
// typedef void  (APIENTRYP GPGETIMAGETRANSFORMPARAMETERIVHP)(GLenum  target, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP GPGETINFOLOGARB)(GLhandleARB  obj, GLsizei  maxLength, GLsizei * length, GLcharARB * infoLog);
// typedef GLint  (APIENTRYP GPGETINSTRUMENTSSGIX)();
// typedef void  (APIENTRYP GPGETINTEGER64I_V)(GLenum  target, GLuint  index, GLint64 * data);
// typedef void  (APIENTRYP GPGETINTEGER64V)(GLenum  pname, GLint64 * data);
// typedef void  (APIENTRYP GPGETINTEGERINDEXEDVEXT)(GLenum  target, GLuint  index, GLint * data);
// typedef void  (APIENTRYP GPGETINTEGERI_V)(GLenum  target, GLuint  index, GLint * data);
// typedef void  (APIENTRYP GPGETINTEGERUI64I_VNV)(GLenum  value, GLuint  index, GLuint64EXT * result);
// typedef void  (APIENTRYP GPGETINTEGERUI64VNV)(GLenum  value, GLuint64EXT * result);
// typedef void  (APIENTRYP GPGETINTEGERV)(GLenum  pname, GLint * data);
// typedef void  (APIENTRYP GPGETINTERNALFORMATI64V)(GLenum  target, GLenum  internalformat, GLenum  pname, GLsizei  bufSize, GLint64 * params);
// typedef void  (APIENTRYP GPGETINTERNALFORMATIV)(GLenum  target, GLenum  internalformat, GLenum  pname, GLsizei  bufSize, GLint * params);
// typedef void  (APIENTRYP GPGETINVARIANTBOOLEANVEXT)(GLuint  id, GLenum  value, GLboolean * data);
// typedef void  (APIENTRYP GPGETINVARIANTFLOATVEXT)(GLuint  id, GLenum  value, GLfloat * data);
// typedef void  (APIENTRYP GPGETINVARIANTINTEGERVEXT)(GLuint  id, GLenum  value, GLint * data);
// typedef void  (APIENTRYP GPGETLIGHTXOES)(GLenum  light, GLenum  pname, GLfixed * params);
// typedef void  (APIENTRYP GPGETLIGHTXVOES)(GLenum  light, GLenum  pname, GLfixed * params);
// typedef void  (APIENTRYP GPGETLISTPARAMETERFVSGIX)(GLuint  list, GLenum  pname, GLfloat * params);
// typedef void  (APIENTRYP GPGETLISTPARAMETERIVSGIX)(GLuint  list, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP GPGETLOCALCONSTANTBOOLEANVEXT)(GLuint  id, GLenum  value, GLboolean * data);
// typedef void  (APIENTRYP GPGETLOCALCONSTANTFLOATVEXT)(GLuint  id, GLenum  value, GLfloat * data);
// typedef void  (APIENTRYP GPGETLOCALCONSTANTINTEGERVEXT)(GLuint  id, GLenum  value, GLint * data);
// typedef void  (APIENTRYP GPGETMAPATTRIBPARAMETERFVNV)(GLenum  target, GLuint  index, GLenum  pname, GLfloat * params);
// typedef void  (APIENTRYP GPGETMAPATTRIBPARAMETERIVNV)(GLenum  target, GLuint  index, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP GPGETMAPCONTROLPOINTSNV)(GLenum  target, GLuint  index, GLenum  type, GLsizei  ustride, GLsizei  vstride, GLboolean  packed, void * points);
// typedef void  (APIENTRYP GPGETMAPPARAMETERFVNV)(GLenum  target, GLenum  pname, GLfloat * params);
// typedef void  (APIENTRYP GPGETMAPPARAMETERIVNV)(GLenum  target, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP GPGETMAPXVOES)(GLenum  target, GLenum  query, GLfixed * v);
// typedef void  (APIENTRYP GPGETMATERIALXOES)(GLenum  face, GLenum  pname, GLfixed  param);
// typedef void  (APIENTRYP GPGETMATERIALXVOES)(GLenum  face, GLenum  pname, GLfixed * params);
// typedef void  (APIENTRYP GPGETMINMAXEXT)(GLenum  target, GLboolean  reset, GLenum  format, GLenum  type, void * values);
// typedef void  (APIENTRYP GPGETMINMAXPARAMETERFVEXT)(GLenum  target, GLenum  pname, GLfloat * params);
// typedef void  (APIENTRYP GPGETMINMAXPARAMETERIVEXT)(GLenum  target, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP GPGETMULTITEXENVFVEXT)(GLenum  texunit, GLenum  target, GLenum  pname, GLfloat * params);
// typedef void  (APIENTRYP GPGETMULTITEXENVIVEXT)(GLenum  texunit, GLenum  target, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP GPGETMULTITEXGENDVEXT)(GLenum  texunit, GLenum  coord, GLenum  pname, GLdouble * params);
// typedef void  (APIENTRYP GPGETMULTITEXGENFVEXT)(GLenum  texunit, GLenum  coord, GLenum  pname, GLfloat * params);
// typedef void  (APIENTRYP GPGETMULTITEXGENIVEXT)(GLenum  texunit, GLenum  coord, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP GPGETMULTITEXIMAGEEXT)(GLenum  texunit, GLenum  target, GLint  level, GLenum  format, GLenum  type, void * pixels);
// typedef void  (APIENTRYP GPGETMULTITEXLEVELPARAMETERFVEXT)(GLenum  texunit, GLenum  target, GLint  level, GLenum  pname, GLfloat * params);
// typedef void  (APIENTRYP GPGETMULTITEXLEVELPARAMETERIVEXT)(GLenum  texunit, GLenum  target, GLint  level, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP GPGETMULTITEXPARAMETERIIVEXT)(GLenum  texunit, GLenum  target, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP GPGETMULTITEXPARAMETERIUIVEXT)(GLenum  texunit, GLenum  target, GLenum  pname, GLuint * params);
// typedef void  (APIENTRYP GPGETMULTITEXPARAMETERFVEXT)(GLenum  texunit, GLenum  target, GLenum  pname, GLfloat * params);
// typedef void  (APIENTRYP GPGETMULTITEXPARAMETERIVEXT)(GLenum  texunit, GLenum  target, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP GPGETMULTISAMPLEFV)(GLenum  pname, GLuint  index, GLfloat * val);
// typedef void  (APIENTRYP GPGETMULTISAMPLEFVNV)(GLenum  pname, GLuint  index, GLfloat * val);
// typedef void  (APIENTRYP GPGETNAMEDBUFFERPARAMETERIVEXT)(GLuint  buffer, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP GPGETNAMEDBUFFERPARAMETERUI64VNV)(GLuint  buffer, GLenum  pname, GLuint64EXT * params);
// typedef void  (APIENTRYP GPGETNAMEDBUFFERPOINTERVEXT)(GLuint  buffer, GLenum  pname, void ** params);
// typedef void  (APIENTRYP GPGETNAMEDBUFFERSUBDATAEXT)(GLuint  buffer, GLintptr  offset, GLsizeiptr  size, void * data);
// typedef void  (APIENTRYP GPGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXT)(GLuint  framebuffer, GLenum  attachment, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP GPGETNAMEDFRAMEBUFFERPARAMETERIVEXT)(GLuint  framebuffer, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP GPGETNAMEDPROGRAMLOCALPARAMETERIIVEXT)(GLuint  program, GLenum  target, GLuint  index, GLint * params);
// typedef void  (APIENTRYP GPGETNAMEDPROGRAMLOCALPARAMETERIUIVEXT)(GLuint  program, GLenum  target, GLuint  index, GLuint * params);
// typedef void  (APIENTRYP GPGETNAMEDPROGRAMLOCALPARAMETERDVEXT)(GLuint  program, GLenum  target, GLuint  index, GLdouble * params);
// typedef void  (APIENTRYP GPGETNAMEDPROGRAMLOCALPARAMETERFVEXT)(GLuint  program, GLenum  target, GLuint  index, GLfloat * params);
// typedef void  (APIENTRYP GPGETNAMEDPROGRAMSTRINGEXT)(GLuint  program, GLenum  target, GLenum  pname, void * string);
// typedef void  (APIENTRYP GPGETNAMEDPROGRAMIVEXT)(GLuint  program, GLenum  target, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP GPGETNAMEDRENDERBUFFERPARAMETERIVEXT)(GLuint  renderbuffer, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP GPGETNAMEDSTRINGARB)(GLint  namelen, const GLchar * name, GLsizei  bufSize, GLint * stringlen, GLchar * string);
// typedef void  (APIENTRYP GPGETNAMEDSTRINGIVARB)(GLint  namelen, const GLchar * name, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP GPGETNEXTPERFQUERYIDINTEL)(GLuint  queryId, GLuint * nextQueryId);
// typedef void  (APIENTRYP GPGETOBJECTBUFFERFVATI)(GLuint  buffer, GLenum  pname, GLfloat * params);
// typedef void  (APIENTRYP GPGETOBJECTBUFFERIVATI)(GLuint  buffer, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP GPGETOBJECTLABEL)(GLenum  identifier, GLuint  name, GLsizei  bufSize, GLsizei * length, GLchar * label);
// typedef void  (APIENTRYP GPGETOBJECTLABELEXT)(GLenum  type, GLuint  object, GLsizei  bufSize, GLsizei * length, GLchar * label);
// typedef void  (APIENTRYP GPGETOBJECTLABELKHR)(GLenum  identifier, GLuint  name, GLsizei  bufSize, GLsizei * length, GLchar * label);
// typedef void  (APIENTRYP GPGETOBJECTPARAMETERFVARB)(GLhandleARB  obj, GLenum  pname, GLfloat * params);
// typedef void  (APIENTRYP GPGETOBJECTPARAMETERIVAPPLE)(GLenum  objectType, GLuint  name, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP GPGETOBJECTPARAMETERIVARB)(GLhandleARB  obj, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP GPGETOBJECTPTRLABEL)(const void * ptr, GLsizei  bufSize, GLsizei * length, GLchar * label);
// typedef void  (APIENTRYP GPGETOBJECTPTRLABELKHR)(const void * ptr, GLsizei  bufSize, GLsizei * length, GLchar * label);
// typedef void  (APIENTRYP GPGETOCCLUSIONQUERYIVNV)(GLuint  id, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP GPGETOCCLUSIONQUERYUIVNV)(GLuint  id, GLenum  pname, GLuint * params);
// typedef void  (APIENTRYP GPGETPATHCOLORGENFVNV)(GLenum  color, GLenum  pname, GLfloat * value);
// typedef void  (APIENTRYP GPGETPATHCOLORGENIVNV)(GLenum  color, GLenum  pname, GLint * value);
// typedef void  (APIENTRYP GPGETPATHCOMMANDSNV)(GLuint  path, GLubyte * commands);
// typedef void  (APIENTRYP GPGETPATHCOORDSNV)(GLuint  path, GLfloat * coords);
// typedef void  (APIENTRYP GPGETPATHDASHARRAYNV)(GLuint  path, GLfloat * dashArray);
// typedef GLfloat  (APIENTRYP GPGETPATHLENGTHNV)(GLuint  path, GLsizei  startSegment, GLsizei  numSegments);
// typedef void  (APIENTRYP GPGETPATHMETRICRANGENV)(GLbitfield  metricQueryMask, GLuint  firstPathName, GLsizei  numPaths, GLsizei  stride, GLfloat * metrics);
// typedef void  (APIENTRYP GPGETPATHMETRICSNV)(GLbitfield  metricQueryMask, GLsizei  numPaths, GLenum  pathNameType, const void * paths, GLuint  pathBase, GLsizei  stride, GLfloat * metrics);
// typedef void  (APIENTRYP GPGETPATHPARAMETERFVNV)(GLuint  path, GLenum  pname, GLfloat * value);
// typedef void  (APIENTRYP GPGETPATHPARAMETERIVNV)(GLuint  path, GLenum  pname, GLint * value);
// typedef void  (APIENTRYP GPGETPATHSPACINGNV)(GLenum  pathListMode, GLsizei  numPaths, GLenum  pathNameType, const void * paths, GLuint  pathBase, GLfloat  advanceScale, GLfloat  kerningScale, GLenum  transformType, GLfloat * returnedSpacing);
// typedef void  (APIENTRYP GPGETPATHTEXGENFVNV)(GLenum  texCoordSet, GLenum  pname, GLfloat * value);
// typedef void  (APIENTRYP GPGETPATHTEXGENIVNV)(GLenum  texCoordSet, GLenum  pname, GLint * value);
// typedef void  (APIENTRYP GPGETPERFCOUNTERINFOINTEL)(GLuint  queryId, GLuint  counterId, GLuint  counterNameLength, GLchar * counterName, GLuint  counterDescLength, GLchar * counterDesc, GLuint * counterOffset, GLuint * counterDataSize, GLuint * counterTypeEnum, GLuint * counterDataTypeEnum, GLuint64 * rawCounterMaxValue);
// typedef void  (APIENTRYP GPGETPERFMONITORCOUNTERDATAAMD)(GLuint  monitor, GLenum  pname, GLsizei  dataSize, GLuint * data, GLint * bytesWritten);
// typedef void  (APIENTRYP GPGETPERFMONITORCOUNTERINFOAMD)(GLuint  group, GLuint  counter, GLenum  pname, void * data);
// typedef void  (APIENTRYP GPGETPERFMONITORCOUNTERSTRINGAMD)(GLuint  group, GLuint  counter, GLsizei  bufSize, GLsizei * length, GLchar * counterString);
// typedef void  (APIENTRYP GPGETPERFMONITORCOUNTERSAMD)(GLuint  group, GLint * numCounters, GLint * maxActiveCounters, GLsizei  counterSize, GLuint * counters);
// typedef void  (APIENTRYP GPGETPERFMONITORGROUPSTRINGAMD)(GLuint  group, GLsizei  bufSize, GLsizei * length, GLchar * groupString);
// typedef void  (APIENTRYP GPGETPERFMONITORGROUPSAMD)(GLint * numGroups, GLsizei  groupsSize, GLuint * groups);
// typedef void  (APIENTRYP GPGETPERFQUERYDATAINTEL)(GLuint  queryHandle, GLuint  flags, GLsizei  dataSize, GLvoid * data, GLuint * bytesWritten);
// typedef void  (APIENTRYP GPGETPERFQUERYIDBYNAMEINTEL)(GLchar * queryName, GLuint * queryId);
// typedef void  (APIENTRYP GPGETPERFQUERYINFOINTEL)(GLuint  queryId, GLuint  queryNameLength, GLchar * queryName, GLuint * dataSize, GLuint * noCounters, GLuint * noInstances, GLuint * capsMask);
// typedef void  (APIENTRYP GPGETPIXELMAPXV)(GLenum  map, GLint  size, GLfixed * values);
// typedef void  (APIENTRYP GPGETPIXELTEXGENPARAMETERFVSGIS)(GLenum  pname, GLfloat * params);
// typedef void  (APIENTRYP GPGETPIXELTEXGENPARAMETERIVSGIS)(GLenum  pname, GLint * params);
// typedef void  (APIENTRYP GPGETPIXELTRANSFORMPARAMETERFVEXT)(GLenum  target, GLenum  pname, GLfloat * params);
// typedef void  (APIENTRYP GPGETPIXELTRANSFORMPARAMETERIVEXT)(GLenum  target, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP GPGETPOINTERINDEXEDVEXT)(GLenum  target, GLuint  index, void ** data);
// typedef void  (APIENTRYP GPGETPOINTERI_VEXT)(GLenum  pname, GLuint  index, void ** params);
// typedef void  (APIENTRYP GPGETPOINTERV)(GLenum  pname, void ** params);
// typedef void  (APIENTRYP GPGETPOINTERVEXT)(GLenum  pname, void ** params);
// typedef void  (APIENTRYP GPGETPOINTERVKHR)(GLenum  pname, void ** params);
// typedef void  (APIENTRYP GPGETPROGRAMBINARY)(GLuint  program, GLsizei  bufSize, GLsizei * length, GLenum * binaryFormat, void * binary);
// typedef void  (APIENTRYP GPGETPROGRAMENVPARAMETERIIVNV)(GLenum  target, GLuint  index, GLint * params);
// typedef void  (APIENTRYP GPGETPROGRAMENVPARAMETERIUIVNV)(GLenum  target, GLuint  index, GLuint * params);
// typedef void  (APIENTRYP GPGETPROGRAMENVPARAMETERDVARB)(GLenum  target, GLuint  index, GLdouble * params);
// typedef void  (APIENTRYP GPGETPROGRAMENVPARAMETERFVARB)(GLenum  target, GLuint  index, GLfloat * params);
// typedef void  (APIENTRYP GPGETPROGRAMINFOLOG)(GLuint  program, GLsizei  bufSize, GLsizei * length, GLchar * infoLog);
// typedef void  (APIENTRYP GPGETPROGRAMINTERFACEIV)(GLuint  program, GLenum  programInterface, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP GPGETPROGRAMLOCALPARAMETERIIVNV)(GLenum  target, GLuint  index, GLint * params);
// typedef void  (APIENTRYP GPGETPROGRAMLOCALPARAMETERIUIVNV)(GLenum  target, GLuint  index, GLuint * params);
// typedef void  (APIENTRYP GPGETPROGRAMLOCALPARAMETERDVARB)(GLenum  target, GLuint  index, GLdouble * params);
// typedef void  (APIENTRYP GPGETPROGRAMLOCALPARAMETERFVARB)(GLenum  target, GLuint  index, GLfloat * params);
// typedef void  (APIENTRYP GPGETPROGRAMNAMEDPARAMETERDVNV)(GLuint  id, GLsizei  len, const GLubyte * name, GLdouble * params);
// typedef void  (APIENTRYP GPGETPROGRAMNAMEDPARAMETERFVNV)(GLuint  id, GLsizei  len, const GLubyte * name, GLfloat * params);
// typedef void  (APIENTRYP GPGETPROGRAMPARAMETERDVNV)(GLenum  target, GLuint  index, GLenum  pname, GLdouble * params);
// typedef void  (APIENTRYP GPGETPROGRAMPARAMETERFVNV)(GLenum  target, GLuint  index, GLenum  pname, GLfloat * params);
// typedef void  (APIENTRYP GPGETPROGRAMPIPELINEINFOLOG)(GLuint  pipeline, GLsizei  bufSize, GLsizei * length, GLchar * infoLog);
// typedef void  (APIENTRYP GPGETPROGRAMPIPELINEINFOLOGEXT)(GLuint  pipeline, GLsizei  bufSize, GLsizei * length, GLchar * infoLog);
// typedef void  (APIENTRYP GPGETPROGRAMPIPELINEIV)(GLuint  pipeline, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP GPGETPROGRAMPIPELINEIVEXT)(GLuint  pipeline, GLenum  pname, GLint * params);
// typedef GLuint  (APIENTRYP GPGETPROGRAMRESOURCEINDEX)(GLuint  program, GLenum  programInterface, const GLchar * name);
// typedef GLint  (APIENTRYP GPGETPROGRAMRESOURCELOCATION)(GLuint  program, GLenum  programInterface, const GLchar * name);
// typedef GLint  (APIENTRYP GPGETPROGRAMRESOURCELOCATIONINDEX)(GLuint  program, GLenum  programInterface, const GLchar * name);
// typedef void  (APIENTRYP GPGETPROGRAMRESOURCENAME)(GLuint  program, GLenum  programInterface, GLuint  index, GLsizei  bufSize, GLsizei * length, GLchar * name);
// typedef void  (APIENTRYP GPGETPROGRAMRESOURCEIV)(GLuint  program, GLenum  programInterface, GLuint  index, GLsizei  propCount, const GLenum * props, GLsizei  bufSize, GLsizei * length, GLint * params);
// typedef void  (APIENTRYP GPGETPROGRAMSTAGEIV)(GLuint  program, GLenum  shadertype, GLenum  pname, GLint * values);
// typedef void  (APIENTRYP GPGETPROGRAMSTRINGARB)(GLenum  target, GLenum  pname, void * string);
// typedef void  (APIENTRYP GPGETPROGRAMSTRINGNV)(GLuint  id, GLenum  pname, GLubyte * program);
// typedef void  (APIENTRYP GPGETPROGRAMSUBROUTINEPARAMETERUIVNV)(GLenum  target, GLuint  index, GLuint * param);
// typedef void  (APIENTRYP GPGETPROGRAMIV)(GLuint  program, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP GPGETPROGRAMIVARB)(GLenum  target, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP GPGETPROGRAMIVNV)(GLuint  id, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP GPGETQUERYINDEXEDIV)(GLenum  target, GLuint  index, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP GPGETQUERYOBJECTI64V)(GLuint  id, GLenum  pname, GLint64 * params);
// typedef void  (APIENTRYP GPGETQUERYOBJECTI64VEXT)(GLuint  id, GLenum  pname, GLint64 * params);
// typedef void  (APIENTRYP GPGETQUERYOBJECTIV)(GLuint  id, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP GPGETQUERYOBJECTIVARB)(GLuint  id, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP GPGETQUERYOBJECTUI64V)(GLuint  id, GLenum  pname, GLuint64 * params);
// typedef void  (APIENTRYP GPGETQUERYOBJECTUI64VEXT)(GLuint  id, GLenum  pname, GLuint64 * params);
// typedef void  (APIENTRYP GPGETQUERYOBJECTUIV)(GLuint  id, GLenum  pname, GLuint * params);
// typedef void  (APIENTRYP GPGETQUERYOBJECTUIVARB)(GLuint  id, GLenum  pname, GLuint * params);
// typedef void  (APIENTRYP GPGETQUERYIV)(GLenum  target, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP GPGETQUERYIVARB)(GLenum  target, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP GPGETRENDERBUFFERPARAMETERIV)(GLenum  target, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP GPGETRENDERBUFFERPARAMETERIVEXT)(GLenum  target, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP GPGETSAMPLERPARAMETERIIV)(GLuint  sampler, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP GPGETSAMPLERPARAMETERIUIV)(GLuint  sampler, GLenum  pname, GLuint * params);
// typedef void  (APIENTRYP GPGETSAMPLERPARAMETERFV)(GLuint  sampler, GLenum  pname, GLfloat * params);
// typedef void  (APIENTRYP GPGETSAMPLERPARAMETERIV)(GLuint  sampler, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP GPGETSEPARABLEFILTEREXT)(GLenum  target, GLenum  format, GLenum  type, void * row, void * column, void * span);
// typedef void  (APIENTRYP GPGETSHADERINFOLOG)(GLuint  shader, GLsizei  bufSize, GLsizei * length, GLchar * infoLog);
// typedef void  (APIENTRYP GPGETSHADERPRECISIONFORMAT)(GLenum  shadertype, GLenum  precisiontype, GLint * range, GLint * precision);
// typedef void  (APIENTRYP GPGETSHADERSOURCE)(GLuint  shader, GLsizei  bufSize, GLsizei * length, GLchar * source);
// typedef void  (APIENTRYP GPGETSHADERSOURCEARB)(GLhandleARB  obj, GLsizei  maxLength, GLsizei * length, GLcharARB * source);
// typedef void  (APIENTRYP GPGETSHADERIV)(GLuint  shader, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP GPGETSHARPENTEXFUNCSGIS)(GLenum  target, GLfloat * points);
// typedef const GLubyte * (APIENTRYP GPGETSTRING)(GLenum  name);
// typedef const GLubyte * (APIENTRYP GPGETSTRINGI)(GLenum  name, GLuint  index);
// typedef GLuint  (APIENTRYP GPGETSUBROUTINEINDEX)(GLuint  program, GLenum  shadertype, const GLchar * name);
// typedef GLint  (APIENTRYP GPGETSUBROUTINEUNIFORMLOCATION)(GLuint  program, GLenum  shadertype, const GLchar * name);
// typedef void  (APIENTRYP GPGETSYNCIV)(GLsync  sync, GLenum  pname, GLsizei  bufSize, GLsizei * length, GLint * values);
// typedef void  (APIENTRYP GPGETTEXBUMPPARAMETERFVATI)(GLenum  pname, GLfloat * param);
// typedef void  (APIENTRYP GPGETTEXBUMPPARAMETERIVATI)(GLenum  pname, GLint * param);
// typedef void  (APIENTRYP GPGETTEXENVXVOES)(GLenum  target, GLenum  pname, GLfixed * params);
// typedef void  (APIENTRYP GPGETTEXFILTERFUNCSGIS)(GLenum  target, GLenum  filter, GLfloat * weights);
// typedef void  (APIENTRYP GPGETTEXGENXVOES)(GLenum  coord, GLenum  pname, GLfixed * params);
// typedef void  (APIENTRYP GPGETTEXIMAGE)(GLenum  target, GLint  level, GLenum  format, GLenum  type, void * pixels);
// typedef void  (APIENTRYP GPGETTEXLEVELPARAMETERFV)(GLenum  target, GLint  level, GLenum  pname, GLfloat * params);
// typedef void  (APIENTRYP GPGETTEXLEVELPARAMETERIV)(GLenum  target, GLint  level, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP GPGETTEXLEVELPARAMETERXVOES)(GLenum  target, GLint  level, GLenum  pname, GLfixed * params);
// typedef void  (APIENTRYP GPGETTEXPARAMETERIIV)(GLenum  target, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP GPGETTEXPARAMETERIIVEXT)(GLenum  target, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP GPGETTEXPARAMETERIUIV)(GLenum  target, GLenum  pname, GLuint * params);
// typedef void  (APIENTRYP GPGETTEXPARAMETERIUIVEXT)(GLenum  target, GLenum  pname, GLuint * params);
// typedef void  (APIENTRYP GPGETTEXPARAMETERPOINTERVAPPLE)(GLenum  target, GLenum  pname, void ** params);
// typedef void  (APIENTRYP GPGETTEXPARAMETERFV)(GLenum  target, GLenum  pname, GLfloat * params);
// typedef void  (APIENTRYP GPGETTEXPARAMETERIV)(GLenum  target, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP GPGETTEXPARAMETERXVOES)(GLenum  target, GLenum  pname, GLfixed * params);
// typedef GLuint64  (APIENTRYP GPGETTEXTUREHANDLEARB)(GLuint  texture);
// typedef GLuint64  (APIENTRYP GPGETTEXTUREHANDLENV)(GLuint  texture);
// typedef void  (APIENTRYP GPGETTEXTUREIMAGEEXT)(GLuint  texture, GLenum  target, GLint  level, GLenum  format, GLenum  type, void * pixels);
// typedef void  (APIENTRYP GPGETTEXTURELEVELPARAMETERFVEXT)(GLuint  texture, GLenum  target, GLint  level, GLenum  pname, GLfloat * params);
// typedef void  (APIENTRYP GPGETTEXTURELEVELPARAMETERIVEXT)(GLuint  texture, GLenum  target, GLint  level, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP GPGETTEXTUREPARAMETERIIVEXT)(GLuint  texture, GLenum  target, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP GPGETTEXTUREPARAMETERIUIVEXT)(GLuint  texture, GLenum  target, GLenum  pname, GLuint * params);
// typedef void  (APIENTRYP GPGETTEXTUREPARAMETERFVEXT)(GLuint  texture, GLenum  target, GLenum  pname, GLfloat * params);
// typedef void  (APIENTRYP GPGETTEXTUREPARAMETERIVEXT)(GLuint  texture, GLenum  target, GLenum  pname, GLint * params);
// typedef GLuint64  (APIENTRYP GPGETTEXTURESAMPLERHANDLEARB)(GLuint  texture, GLuint  sampler);
// typedef GLuint64  (APIENTRYP GPGETTEXTURESAMPLERHANDLENV)(GLuint  texture, GLuint  sampler);
// typedef void  (APIENTRYP GPGETTRACKMATRIXIVNV)(GLenum  target, GLuint  address, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP GPGETTRANSFORMFEEDBACKVARYING)(GLuint  program, GLuint  index, GLsizei  bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name);
// typedef void  (APIENTRYP GPGETTRANSFORMFEEDBACKVARYINGEXT)(GLuint  program, GLuint  index, GLsizei  bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name);
// typedef void  (APIENTRYP GPGETTRANSFORMFEEDBACKVARYINGNV)(GLuint  program, GLuint  index, GLint * location);
// typedef GLuint  (APIENTRYP GPGETUNIFORMBLOCKINDEX)(GLuint  program, const GLchar * uniformBlockName);
// typedef GLint  (APIENTRYP GPGETUNIFORMBUFFERSIZEEXT)(GLuint  program, GLint  location);
// typedef void  (APIENTRYP GPGETUNIFORMINDICES)(GLuint  program, GLsizei  uniformCount, const GLchar *const* uniformNames, GLuint * uniformIndices);
// typedef GLint  (APIENTRYP GPGETUNIFORMLOCATION)(GLuint  program, const GLchar * name);
// typedef GLint  (APIENTRYP GPGETUNIFORMLOCATIONARB)(GLhandleARB  programObj, const GLcharARB * name);
// typedef GLintptr  (APIENTRYP GPGETUNIFORMOFFSETEXT)(GLuint  program, GLint  location);
// typedef void  (APIENTRYP GPGETUNIFORMSUBROUTINEUIV)(GLenum  shadertype, GLint  location, GLuint * params);
// typedef void  (APIENTRYP GPGETUNIFORMDV)(GLuint  program, GLint  location, GLdouble * params);
// typedef void  (APIENTRYP GPGETUNIFORMFV)(GLuint  program, GLint  location, GLfloat * params);
// typedef void  (APIENTRYP GPGETUNIFORMFVARB)(GLhandleARB  programObj, GLint  location, GLfloat * params);
// typedef void  (APIENTRYP GPGETUNIFORMI64VNV)(GLuint  program, GLint  location, GLint64EXT * params);
// typedef void  (APIENTRYP GPGETUNIFORMIV)(GLuint  program, GLint  location, GLint * params);
// typedef void  (APIENTRYP GPGETUNIFORMIVARB)(GLhandleARB  programObj, GLint  location, GLint * params);
// typedef void  (APIENTRYP GPGETUNIFORMUI64VNV)(GLuint  program, GLint  location, GLuint64EXT * params);
// typedef void  (APIENTRYP GPGETUNIFORMUIV)(GLuint  program, GLint  location, GLuint * params);
// typedef void  (APIENTRYP GPGETUNIFORMUIVEXT)(GLuint  program, GLint  location, GLuint * params);
// typedef void  (APIENTRYP GPGETVARIANTARRAYOBJECTFVATI)(GLuint  id, GLenum  pname, GLfloat * params);
// typedef void  (APIENTRYP GPGETVARIANTARRAYOBJECTIVATI)(GLuint  id, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP GPGETVARIANTBOOLEANVEXT)(GLuint  id, GLenum  value, GLboolean * data);
// typedef void  (APIENTRYP GPGETVARIANTFLOATVEXT)(GLuint  id, GLenum  value, GLfloat * data);
// typedef void  (APIENTRYP GPGETVARIANTINTEGERVEXT)(GLuint  id, GLenum  value, GLint * data);
// typedef void  (APIENTRYP GPGETVARIANTPOINTERVEXT)(GLuint  id, GLenum  value, void ** data);
// typedef GLint  (APIENTRYP GPGETVARYINGLOCATIONNV)(GLuint  program, const GLchar * name);
// typedef void  (APIENTRYP GPGETVERTEXARRAYINTEGERI_VEXT)(GLuint  vaobj, GLuint  index, GLenum  pname, GLint * param);
// typedef void  (APIENTRYP GPGETVERTEXARRAYINTEGERVEXT)(GLuint  vaobj, GLenum  pname, GLint * param);
// typedef void  (APIENTRYP GPGETVERTEXARRAYPOINTERI_VEXT)(GLuint  vaobj, GLuint  index, GLenum  pname, void ** param);
// typedef void  (APIENTRYP GPGETVERTEXARRAYPOINTERVEXT)(GLuint  vaobj, GLenum  pname, void ** param);
// typedef void  (APIENTRYP GPGETVERTEXATTRIBARRAYOBJECTFVATI)(GLuint  index, GLenum  pname, GLfloat * params);
// typedef void  (APIENTRYP GPGETVERTEXATTRIBARRAYOBJECTIVATI)(GLuint  index, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP GPGETVERTEXATTRIBIIV)(GLuint  index, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP GPGETVERTEXATTRIBIIVEXT)(GLuint  index, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP GPGETVERTEXATTRIBIUIV)(GLuint  index, GLenum  pname, GLuint * params);
// typedef void  (APIENTRYP GPGETVERTEXATTRIBIUIVEXT)(GLuint  index, GLenum  pname, GLuint * params);
// typedef void  (APIENTRYP GPGETVERTEXATTRIBLDV)(GLuint  index, GLenum  pname, GLdouble * params);
// typedef void  (APIENTRYP GPGETVERTEXATTRIBLDVEXT)(GLuint  index, GLenum  pname, GLdouble * params);
// typedef void  (APIENTRYP GPGETVERTEXATTRIBLI64VNV)(GLuint  index, GLenum  pname, GLint64EXT * params);
// typedef void  (APIENTRYP GPGETVERTEXATTRIBLUI64VARB)(GLuint  index, GLenum  pname, GLuint64EXT * params);
// typedef void  (APIENTRYP GPGETVERTEXATTRIBLUI64VNV)(GLuint  index, GLenum  pname, GLuint64EXT * params);
// typedef void  (APIENTRYP GPGETVERTEXATTRIBPOINTERV)(GLuint  index, GLenum  pname, void ** pointer);
// typedef void  (APIENTRYP GPGETVERTEXATTRIBPOINTERVARB)(GLuint  index, GLenum  pname, void ** pointer);
// typedef void  (APIENTRYP GPGETVERTEXATTRIBPOINTERVNV)(GLuint  index, GLenum  pname, void ** pointer);
// typedef void  (APIENTRYP GPGETVERTEXATTRIBDV)(GLuint  index, GLenum  pname, GLdouble * params);
// typedef void  (APIENTRYP GPGETVERTEXATTRIBDVARB)(GLuint  index, GLenum  pname, GLdouble * params);
// typedef void  (APIENTRYP GPGETVERTEXATTRIBDVNV)(GLuint  index, GLenum  pname, GLdouble * params);
// typedef void  (APIENTRYP GPGETVERTEXATTRIBFV)(GLuint  index, GLenum  pname, GLfloat * params);
// typedef void  (APIENTRYP GPGETVERTEXATTRIBFVARB)(GLuint  index, GLenum  pname, GLfloat * params);
// typedef void  (APIENTRYP GPGETVERTEXATTRIBFVNV)(GLuint  index, GLenum  pname, GLfloat * params);
// typedef void  (APIENTRYP GPGETVERTEXATTRIBIV)(GLuint  index, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP GPGETVERTEXATTRIBIVARB)(GLuint  index, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP GPGETVERTEXATTRIBIVNV)(GLuint  index, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP GPGETVIDEOCAPTURESTREAMDVNV)(GLuint  video_capture_slot, GLuint  stream, GLenum  pname, GLdouble * params);
// typedef void  (APIENTRYP GPGETVIDEOCAPTURESTREAMFVNV)(GLuint  video_capture_slot, GLuint  stream, GLenum  pname, GLfloat * params);
// typedef void  (APIENTRYP GPGETVIDEOCAPTURESTREAMIVNV)(GLuint  video_capture_slot, GLuint  stream, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP GPGETVIDEOCAPTUREIVNV)(GLuint  video_capture_slot, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP GPGETVIDEOI64VNV)(GLuint  video_slot, GLenum  pname, GLint64EXT * params);
// typedef void  (APIENTRYP GPGETVIDEOIVNV)(GLuint  video_slot, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP GPGETVIDEOUI64VNV)(GLuint  video_slot, GLenum  pname, GLuint64EXT * params);
// typedef void  (APIENTRYP GPGETVIDEOUIVNV)(GLuint  video_slot, GLenum  pname, GLuint * params);
// typedef void  (APIENTRYP GPGETNCOMPRESSEDTEXIMAGEARB)(GLenum  target, GLint  lod, GLsizei  bufSize, void * img);
// typedef void  (APIENTRYP GPGETNTEXIMAGEARB)(GLenum  target, GLint  level, GLenum  format, GLenum  type, GLsizei  bufSize, void * img);
// typedef void  (APIENTRYP GPGETNUNIFORMDVARB)(GLuint  program, GLint  location, GLsizei  bufSize, GLdouble * params);
// typedef void  (APIENTRYP GPGETNUNIFORMFVARB)(GLuint  program, GLint  location, GLsizei  bufSize, GLfloat * params);
// typedef void  (APIENTRYP GPGETNUNIFORMIVARB)(GLuint  program, GLint  location, GLsizei  bufSize, GLint * params);
// typedef void  (APIENTRYP GPGETNUNIFORMUIVARB)(GLuint  program, GLint  location, GLsizei  bufSize, GLuint * params);
// typedef void  (APIENTRYP GPGLOBALALPHAFACTORBSUN)(GLbyte  factor);
// typedef void  (APIENTRYP GPGLOBALALPHAFACTORDSUN)(GLdouble  factor);
// typedef void  (APIENTRYP GPGLOBALALPHAFACTORFSUN)(GLfloat  factor);
// typedef void  (APIENTRYP GPGLOBALALPHAFACTORISUN)(GLint  factor);
// typedef void  (APIENTRYP GPGLOBALALPHAFACTORSSUN)(GLshort  factor);
// typedef void  (APIENTRYP GPGLOBALALPHAFACTORUBSUN)(GLubyte  factor);
// typedef void  (APIENTRYP GPGLOBALALPHAFACTORUISUN)(GLuint  factor);
// typedef void  (APIENTRYP GPGLOBALALPHAFACTORUSSUN)(GLushort  factor);
// typedef void  (APIENTRYP GPHINT)(GLenum  target, GLenum  mode);
// typedef void  (APIENTRYP GPHINTPGI)(GLenum  target, GLint  mode);
// typedef void  (APIENTRYP GPHISTOGRAMEXT)(GLenum  target, GLsizei  width, GLenum  internalformat, GLboolean  sink);
// typedef void  (APIENTRYP GPIGLOOINTERFACESGIX)(GLenum  pname, const void * params);
// typedef void  (APIENTRYP GPIMAGETRANSFORMPARAMETERFHP)(GLenum  target, GLenum  pname, GLfloat  param);
// typedef void  (APIENTRYP GPIMAGETRANSFORMPARAMETERFVHP)(GLenum  target, GLenum  pname, const GLfloat * params);
// typedef void  (APIENTRYP GPIMAGETRANSFORMPARAMETERIHP)(GLenum  target, GLenum  pname, GLint  param);
// typedef void  (APIENTRYP GPIMAGETRANSFORMPARAMETERIVHP)(GLenum  target, GLenum  pname, const GLint * params);
// typedef GLsync  (APIENTRYP GPIMPORTSYNCEXT)(GLenum  external_sync_type, GLintptr  external_sync, GLbitfield  flags);
// typedef void  (APIENTRYP GPINDEXFORMATNV)(GLenum  type, GLsizei  stride);
// typedef void  (APIENTRYP GPINDEXFUNCEXT)(GLenum  func, GLclampf  ref);
// typedef void  (APIENTRYP GPINDEXMATERIALEXT)(GLenum  face, GLenum  mode);
// typedef void  (APIENTRYP GPINDEXPOINTEREXT)(GLenum  type, GLsizei  stride, GLsizei  count, const void * pointer);
// typedef void  (APIENTRYP GPINDEXPOINTERLISTIBM)(GLenum  type, GLint  stride, const void ** pointer, GLint  ptrstride);
// typedef void  (APIENTRYP GPINDEXXOES)(GLfixed  component);
// typedef void  (APIENTRYP GPINDEXXVOES)(const GLfixed * component);
// typedef void  (APIENTRYP GPINSERTCOMPONENTEXT)(GLuint  res, GLuint  src, GLuint  num);
// typedef void  (APIENTRYP GPINSERTEVENTMARKEREXT)(GLsizei  length, const GLchar * marker);
// typedef void  (APIENTRYP GPINSTRUMENTSBUFFERSGIX)(GLsizei  size, GLint * buffer);
// typedef void  (APIENTRYP GPINTERPOLATEPATHSNV)(GLuint  resultPath, GLuint  pathA, GLuint  pathB, GLfloat  weight);
// typedef void  (APIENTRYP GPINVALIDATEBUFFERDATA)(GLuint  buffer);
// typedef void  (APIENTRYP GPINVALIDATEBUFFERSUBDATA)(GLuint  buffer, GLintptr  offset, GLsizeiptr  length);
// typedef void  (APIENTRYP GPINVALIDATEFRAMEBUFFER)(GLenum  target, GLsizei  numAttachments, const GLenum * attachments);
// typedef void  (APIENTRYP GPINVALIDATESUBFRAMEBUFFER)(GLenum  target, GLsizei  numAttachments, const GLenum * attachments, GLint  x, GLint  y, GLsizei  width, GLsizei  height);
// typedef void  (APIENTRYP GPINVALIDATETEXIMAGE)(GLuint  texture, GLint  level);
// typedef void  (APIENTRYP GPINVALIDATETEXSUBIMAGE)(GLuint  texture, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLsizei  width, GLsizei  height, GLsizei  depth);
// typedef GLboolean  (APIENTRYP GPISASYNCMARKERSGIX)(GLuint  marker);
// typedef GLboolean  (APIENTRYP GPISBUFFER)(GLuint  buffer);
// typedef GLboolean  (APIENTRYP GPISBUFFERARB)(GLuint  buffer);
// typedef GLboolean  (APIENTRYP GPISBUFFERRESIDENTNV)(GLenum  target);
// typedef GLboolean  (APIENTRYP GPISENABLED)(GLenum  cap);
// typedef GLboolean  (APIENTRYP GPISENABLEDINDEXEDEXT)(GLenum  target, GLuint  index);
// typedef GLboolean  (APIENTRYP GPISENABLEDI)(GLenum  target, GLuint  index);
// typedef GLboolean  (APIENTRYP GPISFENCEAPPLE)(GLuint  fence);
// typedef GLboolean  (APIENTRYP GPISFENCENV)(GLuint  fence);
// typedef GLboolean  (APIENTRYP GPISFRAMEBUFFER)(GLuint  framebuffer);
// typedef GLboolean  (APIENTRYP GPISFRAMEBUFFEREXT)(GLuint  framebuffer);
// typedef GLboolean  (APIENTRYP GPISIMAGEHANDLERESIDENTARB)(GLuint64  handle);
// typedef GLboolean  (APIENTRYP GPISIMAGEHANDLERESIDENTNV)(GLuint64  handle);
// typedef GLboolean  (APIENTRYP GPISNAMEAMD)(GLenum  identifier, GLuint  name);
// typedef GLboolean  (APIENTRYP GPISNAMEDBUFFERRESIDENTNV)(GLuint  buffer);
// typedef GLboolean  (APIENTRYP GPISNAMEDSTRINGARB)(GLint  namelen, const GLchar * name);
// typedef GLboolean  (APIENTRYP GPISOBJECTBUFFERATI)(GLuint  buffer);
// typedef GLboolean  (APIENTRYP GPISOCCLUSIONQUERYNV)(GLuint  id);
// typedef GLboolean  (APIENTRYP GPISPATHNV)(GLuint  path);
// typedef GLboolean  (APIENTRYP GPISPOINTINFILLPATHNV)(GLuint  path, GLuint  mask, GLfloat  x, GLfloat  y);
// typedef GLboolean  (APIENTRYP GPISPOINTINSTROKEPATHNV)(GLuint  path, GLfloat  x, GLfloat  y);
// typedef GLboolean  (APIENTRYP GPISPROGRAM)(GLuint  program);
// typedef GLboolean  (APIENTRYP GPISPROGRAMARB)(GLuint  program);
// typedef GLboolean  (APIENTRYP GPISPROGRAMNV)(GLuint  id);
// typedef GLboolean  (APIENTRYP GPISPROGRAMPIPELINE)(GLuint  pipeline);
// typedef GLboolean  (APIENTRYP GPISPROGRAMPIPELINEEXT)(GLuint  pipeline);
// typedef GLboolean  (APIENTRYP GPISQUERY)(GLuint  id);
// typedef GLboolean  (APIENTRYP GPISQUERYARB)(GLuint  id);
// typedef GLboolean  (APIENTRYP GPISRENDERBUFFER)(GLuint  renderbuffer);
// typedef GLboolean  (APIENTRYP GPISRENDERBUFFEREXT)(GLuint  renderbuffer);
// typedef GLboolean  (APIENTRYP GPISSAMPLER)(GLuint  sampler);
// typedef GLboolean  (APIENTRYP GPISSHADER)(GLuint  shader);
// typedef GLboolean  (APIENTRYP GPISSYNC)(GLsync  sync);
// typedef GLboolean  (APIENTRYP GPISTEXTURE)(GLuint  texture);
// typedef GLboolean  (APIENTRYP GPISTEXTUREEXT)(GLuint  texture);
// typedef GLboolean  (APIENTRYP GPISTEXTUREHANDLERESIDENTARB)(GLuint64  handle);
// typedef GLboolean  (APIENTRYP GPISTEXTUREHANDLERESIDENTNV)(GLuint64  handle);
// typedef GLboolean  (APIENTRYP GPISTRANSFORMFEEDBACK)(GLuint  id);
// typedef GLboolean  (APIENTRYP GPISTRANSFORMFEEDBACKNV)(GLuint  id);
// typedef GLboolean  (APIENTRYP GPISVARIANTENABLEDEXT)(GLuint  id, GLenum  cap);
// typedef GLboolean  (APIENTRYP GPISVERTEXARRAY)(GLuint  array);
// typedef GLboolean  (APIENTRYP GPISVERTEXARRAYAPPLE)(GLuint  array);
// typedef GLboolean  (APIENTRYP GPISVERTEXATTRIBENABLEDAPPLE)(GLuint  index, GLenum  pname);
// typedef void  (APIENTRYP GPLABELOBJECTEXT)(GLenum  type, GLuint  object, GLsizei  length, const GLchar * label);
// typedef void  (APIENTRYP GPLIGHTENVISGIX)(GLenum  pname, GLint  param);
// typedef void  (APIENTRYP GPLIGHTMODELXOES)(GLenum  pname, GLfixed  param);
// typedef void  (APIENTRYP GPLIGHTMODELXVOES)(GLenum  pname, const GLfixed * param);
// typedef void  (APIENTRYP GPLIGHTXOES)(GLenum  light, GLenum  pname, GLfixed  param);
// typedef void  (APIENTRYP GPLIGHTXVOES)(GLenum  light, GLenum  pname, const GLfixed * params);
// typedef void  (APIENTRYP GPLINEWIDTH)(GLfloat  width);
// typedef void  (APIENTRYP GPLINEWIDTHXOES)(GLfixed  width);
// typedef void  (APIENTRYP GPLINKPROGRAM)(GLuint  program);
// typedef void  (APIENTRYP GPLINKPROGRAMARB)(GLhandleARB  programObj);
// typedef void  (APIENTRYP GPLISTPARAMETERFSGIX)(GLuint  list, GLenum  pname, GLfloat  param);
// typedef void  (APIENTRYP GPLISTPARAMETERFVSGIX)(GLuint  list, GLenum  pname, const GLfloat * params);
// typedef void  (APIENTRYP GPLISTPARAMETERISGIX)(GLuint  list, GLenum  pname, GLint  param);
// typedef void  (APIENTRYP GPLISTPARAMETERIVSGIX)(GLuint  list, GLenum  pname, const GLint * params);
// typedef void  (APIENTRYP GPLOADIDENTITYDEFORMATIONMAPSGIX)(GLbitfield  mask);
// typedef void  (APIENTRYP GPLOADMATRIXXOES)(const GLfixed * m);
// typedef void  (APIENTRYP GPLOADPROGRAMNV)(GLenum  target, GLuint  id, GLsizei  len, const GLubyte * program);
// typedef void  (APIENTRYP GPLOADTRANSPOSEMATRIXDARB)(const GLdouble * m);
// typedef void  (APIENTRYP GPLOADTRANSPOSEMATRIXFARB)(const GLfloat * m);
// typedef void  (APIENTRYP GPLOADTRANSPOSEMATRIXXOES)(const GLfixed * m);
// typedef void  (APIENTRYP GPLOCKARRAYSEXT)(GLint  first, GLsizei  count);
// typedef void  (APIENTRYP GPLOGICOP)(GLenum  opcode);
// typedef void  (APIENTRYP GPMAKEBUFFERNONRESIDENTNV)(GLenum  target);
// typedef void  (APIENTRYP GPMAKEBUFFERRESIDENTNV)(GLenum  target, GLenum  access);
// typedef void  (APIENTRYP GPMAKEIMAGEHANDLENONRESIDENTARB)(GLuint64  handle);
// typedef void  (APIENTRYP GPMAKEIMAGEHANDLENONRESIDENTNV)(GLuint64  handle);
// typedef void  (APIENTRYP GPMAKEIMAGEHANDLERESIDENTARB)(GLuint64  handle, GLenum  access);
// typedef void  (APIENTRYP GPMAKEIMAGEHANDLERESIDENTNV)(GLuint64  handle, GLenum  access);
// typedef void  (APIENTRYP GPMAKENAMEDBUFFERNONRESIDENTNV)(GLuint  buffer);
// typedef void  (APIENTRYP GPMAKENAMEDBUFFERRESIDENTNV)(GLuint  buffer, GLenum  access);
// typedef void  (APIENTRYP GPMAKETEXTUREHANDLENONRESIDENTARB)(GLuint64  handle);
// typedef void  (APIENTRYP GPMAKETEXTUREHANDLENONRESIDENTNV)(GLuint64  handle);
// typedef void  (APIENTRYP GPMAKETEXTUREHANDLERESIDENTARB)(GLuint64  handle);
// typedef void  (APIENTRYP GPMAKETEXTUREHANDLERESIDENTNV)(GLuint64  handle);
// typedef void  (APIENTRYP GPMAP1XOES)(GLenum  target, GLfixed  u1, GLfixed  u2, GLint  stride, GLint  order, GLfixed  points);
// typedef void  (APIENTRYP GPMAP2XOES)(GLenum  target, GLfixed  u1, GLfixed  u2, GLint  ustride, GLint  uorder, GLfixed  v1, GLfixed  v2, GLint  vstride, GLint  vorder, GLfixed  points);
// typedef void * (APIENTRYP GPMAPBUFFER)(GLenum  target, GLenum  access);
// typedef void * (APIENTRYP GPMAPBUFFERARB)(GLenum  target, GLenum  access);
// typedef void * (APIENTRYP GPMAPBUFFERRANGE)(GLenum  target, GLintptr  offset, GLsizeiptr  length, GLbitfield  access);
// typedef void  (APIENTRYP GPMAPCONTROLPOINTSNV)(GLenum  target, GLuint  index, GLenum  type, GLsizei  ustride, GLsizei  vstride, GLint  uorder, GLint  vorder, GLboolean  packed, const void * points);
// typedef void  (APIENTRYP GPMAPGRID1XOES)(GLint  n, GLfixed  u1, GLfixed  u2);
// typedef void  (APIENTRYP GPMAPGRID2XOES)(GLint  n, GLfixed  u1, GLfixed  u2, GLfixed  v1, GLfixed  v2);
// typedef void * (APIENTRYP GPMAPNAMEDBUFFEREXT)(GLuint  buffer, GLenum  access);
// typedef void * (APIENTRYP GPMAPNAMEDBUFFERRANGEEXT)(GLuint  buffer, GLintptr  offset, GLsizeiptr  length, GLbitfield  access);
// typedef void * (APIENTRYP GPMAPOBJECTBUFFERATI)(GLuint  buffer);
// typedef void  (APIENTRYP GPMAPPARAMETERFVNV)(GLenum  target, GLenum  pname, const GLfloat * params);
// typedef void  (APIENTRYP GPMAPPARAMETERIVNV)(GLenum  target, GLenum  pname, const GLint * params);
// typedef void * (APIENTRYP GPMAPTEXTURE2DINTEL)(GLuint  texture, GLint  level, GLbitfield  access, GLint * stride, GLenum * layout);
// typedef void  (APIENTRYP GPMAPVERTEXATTRIB1DAPPLE)(GLuint  index, GLuint  size, GLdouble  u1, GLdouble  u2, GLint  stride, GLint  order, const GLdouble * points);
// typedef void  (APIENTRYP GPMAPVERTEXATTRIB1FAPPLE)(GLuint  index, GLuint  size, GLfloat  u1, GLfloat  u2, GLint  stride, GLint  order, const GLfloat * points);
// typedef void  (APIENTRYP GPMAPVERTEXATTRIB2DAPPLE)(GLuint  index, GLuint  size, GLdouble  u1, GLdouble  u2, GLint  ustride, GLint  uorder, GLdouble  v1, GLdouble  v2, GLint  vstride, GLint  vorder, const GLdouble * points);
// typedef void  (APIENTRYP GPMAPVERTEXATTRIB2FAPPLE)(GLuint  index, GLuint  size, GLfloat  u1, GLfloat  u2, GLint  ustride, GLint  uorder, GLfloat  v1, GLfloat  v2, GLint  vstride, GLint  vorder, const GLfloat * points);
// typedef void  (APIENTRYP GPMATERIALXOES)(GLenum  face, GLenum  pname, GLfixed  param);
// typedef void  (APIENTRYP GPMATERIALXVOES)(GLenum  face, GLenum  pname, const GLfixed * param);
// typedef void  (APIENTRYP GPMATRIXFRUSTUMEXT)(GLenum  mode, GLdouble  left, GLdouble  right, GLdouble  bottom, GLdouble  top, GLdouble  zNear, GLdouble  zFar);
// typedef void  (APIENTRYP GPMATRIXINDEXPOINTERARB)(GLint  size, GLenum  type, GLsizei  stride, const void * pointer);
// typedef void  (APIENTRYP GPMATRIXINDEXUBVARB)(GLint  size, const GLubyte * indices);
// typedef void  (APIENTRYP GPMATRIXINDEXUIVARB)(GLint  size, const GLuint * indices);
// typedef void  (APIENTRYP GPMATRIXINDEXUSVARB)(GLint  size, const GLushort * indices);
// typedef void  (APIENTRYP GPMATRIXLOADIDENTITYEXT)(GLenum  mode);
// typedef void  (APIENTRYP GPMATRIXLOADTRANSPOSEDEXT)(GLenum  mode, const GLdouble * m);
// typedef void  (APIENTRYP GPMATRIXLOADTRANSPOSEFEXT)(GLenum  mode, const GLfloat * m);
// typedef void  (APIENTRYP GPMATRIXLOADDEXT)(GLenum  mode, const GLdouble * m);
// typedef void  (APIENTRYP GPMATRIXLOADFEXT)(GLenum  mode, const GLfloat * m);
// typedef void  (APIENTRYP GPMATRIXMULTTRANSPOSEDEXT)(GLenum  mode, const GLdouble * m);
// typedef void  (APIENTRYP GPMATRIXMULTTRANSPOSEFEXT)(GLenum  mode, const GLfloat * m);
// typedef void  (APIENTRYP GPMATRIXMULTDEXT)(GLenum  mode, const GLdouble * m);
// typedef void  (APIENTRYP GPMATRIXMULTFEXT)(GLenum  mode, const GLfloat * m);
// typedef void  (APIENTRYP GPMATRIXORTHOEXT)(GLenum  mode, GLdouble  left, GLdouble  right, GLdouble  bottom, GLdouble  top, GLdouble  zNear, GLdouble  zFar);
// typedef void  (APIENTRYP GPMATRIXPOPEXT)(GLenum  mode);
// typedef void  (APIENTRYP GPMATRIXPUSHEXT)(GLenum  mode);
// typedef void  (APIENTRYP GPMATRIXROTATEDEXT)(GLenum  mode, GLdouble  angle, GLdouble  x, GLdouble  y, GLdouble  z);
// typedef void  (APIENTRYP GPMATRIXROTATEFEXT)(GLenum  mode, GLfloat  angle, GLfloat  x, GLfloat  y, GLfloat  z);
// typedef void  (APIENTRYP GPMATRIXSCALEDEXT)(GLenum  mode, GLdouble  x, GLdouble  y, GLdouble  z);
// typedef void  (APIENTRYP GPMATRIXSCALEFEXT)(GLenum  mode, GLfloat  x, GLfloat  y, GLfloat  z);
// typedef void  (APIENTRYP GPMATRIXTRANSLATEDEXT)(GLenum  mode, GLdouble  x, GLdouble  y, GLdouble  z);
// typedef void  (APIENTRYP GPMATRIXTRANSLATEFEXT)(GLenum  mode, GLfloat  x, GLfloat  y, GLfloat  z);
// typedef void  (APIENTRYP GPMEMORYBARRIER)(GLbitfield  barriers);
// typedef void  (APIENTRYP GPMEMORYBARRIEREXT)(GLbitfield  barriers);
// typedef void  (APIENTRYP GPMINSAMPLESHADINGARB)(GLfloat  value);
// typedef void  (APIENTRYP GPMINMAXEXT)(GLenum  target, GLenum  internalformat, GLboolean  sink);
// typedef void  (APIENTRYP GPMULTMATRIXXOES)(const GLfixed * m);
// typedef void  (APIENTRYP GPMULTTRANSPOSEMATRIXDARB)(const GLdouble * m);
// typedef void  (APIENTRYP GPMULTTRANSPOSEMATRIXFARB)(const GLfloat * m);
// typedef void  (APIENTRYP GPMULTTRANSPOSEMATRIXXOES)(const GLfixed * m);
// typedef void  (APIENTRYP GPMULTIDRAWARRAYS)(GLenum  mode, const GLint * first, const GLsizei * count, GLsizei  drawcount);
// typedef void  (APIENTRYP GPMULTIDRAWARRAYSEXT)(GLenum  mode, const GLint * first, const GLsizei * count, GLsizei  primcount);
// typedef void  (APIENTRYP GPMULTIDRAWARRAYSINDIRECT)(GLenum  mode, const void * indirect, GLsizei  drawcount, GLsizei  stride);
// typedef void  (APIENTRYP GPMULTIDRAWARRAYSINDIRECTAMD)(GLenum  mode, const void * indirect, GLsizei  primcount, GLsizei  stride);
// typedef void  (APIENTRYP GPMULTIDRAWARRAYSINDIRECTBINDLESSNV)(GLenum  mode, const void * indirect, GLsizei  drawCount, GLsizei  stride, GLint  vertexBufferCount);
// typedef void  (APIENTRYP GPMULTIDRAWARRAYSINDIRECTCOUNTARB)(GLenum  mode, GLintptr  indirect, GLintptr  drawcount, GLsizei  maxdrawcount, GLsizei  stride);
// typedef void  (APIENTRYP GPMULTIDRAWELEMENTARRAYAPPLE)(GLenum  mode, const GLint * first, const GLsizei * count, GLsizei  primcount);
// typedef void  (APIENTRYP GPMULTIDRAWELEMENTS)(GLenum  mode, const GLsizei * count, GLenum  type, const void *const* indices, GLsizei  drawcount);
// typedef void  (APIENTRYP GPMULTIDRAWELEMENTSBASEVERTEX)(GLenum  mode, const GLsizei * count, GLenum  type, const void *const* indices, GLsizei  drawcount, const GLint * basevertex);
// typedef void  (APIENTRYP GPMULTIDRAWELEMENTSEXT)(GLenum  mode, const GLsizei * count, GLenum  type, const void *const* indices, GLsizei  primcount);
// typedef void  (APIENTRYP GPMULTIDRAWELEMENTSINDIRECT)(GLenum  mode, GLenum  type, const void * indirect, GLsizei  drawcount, GLsizei  stride);
// typedef void  (APIENTRYP GPMULTIDRAWELEMENTSINDIRECTAMD)(GLenum  mode, GLenum  type, const void * indirect, GLsizei  primcount, GLsizei  stride);
// typedef void  (APIENTRYP GPMULTIDRAWELEMENTSINDIRECTBINDLESSNV)(GLenum  mode, GLenum  type, const void * indirect, GLsizei  drawCount, GLsizei  stride, GLint  vertexBufferCount);
// typedef void  (APIENTRYP GPMULTIDRAWELEMENTSINDIRECTCOUNTARB)(GLenum  mode, GLenum  type, GLintptr  indirect, GLintptr  drawcount, GLsizei  maxdrawcount, GLsizei  stride);
// typedef void  (APIENTRYP GPMULTIDRAWRANGEELEMENTARRAYAPPLE)(GLenum  mode, GLuint  start, GLuint  end, const GLint * first, const GLsizei * count, GLsizei  primcount);
// typedef void  (APIENTRYP GPMULTIMODEDRAWARRAYSIBM)(const GLenum * mode, const GLint * first, const GLsizei * count, GLsizei  primcount, GLint  modestride);
// typedef void  (APIENTRYP GPMULTIMODEDRAWELEMENTSIBM)(const GLenum * mode, const GLsizei * count, GLenum  type, const void *const* indices, GLsizei  primcount, GLint  modestride);
// typedef void  (APIENTRYP GPMULTITEXBUFFEREXT)(GLenum  texunit, GLenum  target, GLenum  internalformat, GLuint  buffer);
// typedef void  (APIENTRYP GPMULTITEXCOORD1BOES)(GLenum  texture, GLbyte  s);
// typedef void  (APIENTRYP GPMULTITEXCOORD1BVOES)(GLenum  texture, const GLbyte * coords);
// typedef void  (APIENTRYP GPMULTITEXCOORD1DARB)(GLenum  target, GLdouble  s);
// typedef void  (APIENTRYP GPMULTITEXCOORD1DVARB)(GLenum  target, const GLdouble * v);
// typedef void  (APIENTRYP GPMULTITEXCOORD1FARB)(GLenum  target, GLfloat  s);
// typedef void  (APIENTRYP GPMULTITEXCOORD1FVARB)(GLenum  target, const GLfloat * v);
// typedef void  (APIENTRYP GPMULTITEXCOORD1HNV)(GLenum  target, GLhalfNV  s);
// typedef void  (APIENTRYP GPMULTITEXCOORD1HVNV)(GLenum  target, const GLhalfNV * v);
// typedef void  (APIENTRYP GPMULTITEXCOORD1IARB)(GLenum  target, GLint  s);
// typedef void  (APIENTRYP GPMULTITEXCOORD1IVARB)(GLenum  target, const GLint * v);
// typedef void  (APIENTRYP GPMULTITEXCOORD1SARB)(GLenum  target, GLshort  s);
// typedef void  (APIENTRYP GPMULTITEXCOORD1SVARB)(GLenum  target, const GLshort * v);
// typedef void  (APIENTRYP GPMULTITEXCOORD1XOES)(GLenum  texture, GLfixed  s);
// typedef void  (APIENTRYP GPMULTITEXCOORD1XVOES)(GLenum  texture, const GLfixed * coords);
// typedef void  (APIENTRYP GPMULTITEXCOORD2BOES)(GLenum  texture, GLbyte  s, GLbyte  t);
// typedef void  (APIENTRYP GPMULTITEXCOORD2BVOES)(GLenum  texture, const GLbyte * coords);
// typedef void  (APIENTRYP GPMULTITEXCOORD2DARB)(GLenum  target, GLdouble  s, GLdouble  t);
// typedef void  (APIENTRYP GPMULTITEXCOORD2DVARB)(GLenum  target, const GLdouble * v);
// typedef void  (APIENTRYP GPMULTITEXCOORD2FARB)(GLenum  target, GLfloat  s, GLfloat  t);
// typedef void  (APIENTRYP GPMULTITEXCOORD2FVARB)(GLenum  target, const GLfloat * v);
// typedef void  (APIENTRYP GPMULTITEXCOORD2HNV)(GLenum  target, GLhalfNV  s, GLhalfNV  t);
// typedef void  (APIENTRYP GPMULTITEXCOORD2HVNV)(GLenum  target, const GLhalfNV * v);
// typedef void  (APIENTRYP GPMULTITEXCOORD2IARB)(GLenum  target, GLint  s, GLint  t);
// typedef void  (APIENTRYP GPMULTITEXCOORD2IVARB)(GLenum  target, const GLint * v);
// typedef void  (APIENTRYP GPMULTITEXCOORD2SARB)(GLenum  target, GLshort  s, GLshort  t);
// typedef void  (APIENTRYP GPMULTITEXCOORD2SVARB)(GLenum  target, const GLshort * v);
// typedef void  (APIENTRYP GPMULTITEXCOORD2XOES)(GLenum  texture, GLfixed  s, GLfixed  t);
// typedef void  (APIENTRYP GPMULTITEXCOORD2XVOES)(GLenum  texture, const GLfixed * coords);
// typedef void  (APIENTRYP GPMULTITEXCOORD3BOES)(GLenum  texture, GLbyte  s, GLbyte  t, GLbyte  r);
// typedef void  (APIENTRYP GPMULTITEXCOORD3BVOES)(GLenum  texture, const GLbyte * coords);
// typedef void  (APIENTRYP GPMULTITEXCOORD3DARB)(GLenum  target, GLdouble  s, GLdouble  t, GLdouble  r);
// typedef void  (APIENTRYP GPMULTITEXCOORD3DVARB)(GLenum  target, const GLdouble * v);
// typedef void  (APIENTRYP GPMULTITEXCOORD3FARB)(GLenum  target, GLfloat  s, GLfloat  t, GLfloat  r);
// typedef void  (APIENTRYP GPMULTITEXCOORD3FVARB)(GLenum  target, const GLfloat * v);
// typedef void  (APIENTRYP GPMULTITEXCOORD3HNV)(GLenum  target, GLhalfNV  s, GLhalfNV  t, GLhalfNV  r);
// typedef void  (APIENTRYP GPMULTITEXCOORD3HVNV)(GLenum  target, const GLhalfNV * v);
// typedef void  (APIENTRYP GPMULTITEXCOORD3IARB)(GLenum  target, GLint  s, GLint  t, GLint  r);
// typedef void  (APIENTRYP GPMULTITEXCOORD3IVARB)(GLenum  target, const GLint * v);
// typedef void  (APIENTRYP GPMULTITEXCOORD3SARB)(GLenum  target, GLshort  s, GLshort  t, GLshort  r);
// typedef void  (APIENTRYP GPMULTITEXCOORD3SVARB)(GLenum  target, const GLshort * v);
// typedef void  (APIENTRYP GPMULTITEXCOORD3XOES)(GLenum  texture, GLfixed  s, GLfixed  t, GLfixed  r);
// typedef void  (APIENTRYP GPMULTITEXCOORD3XVOES)(GLenum  texture, const GLfixed * coords);
// typedef void  (APIENTRYP GPMULTITEXCOORD4BOES)(GLenum  texture, GLbyte  s, GLbyte  t, GLbyte  r, GLbyte  q);
// typedef void  (APIENTRYP GPMULTITEXCOORD4BVOES)(GLenum  texture, const GLbyte * coords);
// typedef void  (APIENTRYP GPMULTITEXCOORD4DARB)(GLenum  target, GLdouble  s, GLdouble  t, GLdouble  r, GLdouble  q);
// typedef void  (APIENTRYP GPMULTITEXCOORD4DVARB)(GLenum  target, const GLdouble * v);
// typedef void  (APIENTRYP GPMULTITEXCOORD4FARB)(GLenum  target, GLfloat  s, GLfloat  t, GLfloat  r, GLfloat  q);
// typedef void  (APIENTRYP GPMULTITEXCOORD4FVARB)(GLenum  target, const GLfloat * v);
// typedef void  (APIENTRYP GPMULTITEXCOORD4HNV)(GLenum  target, GLhalfNV  s, GLhalfNV  t, GLhalfNV  r, GLhalfNV  q);
// typedef void  (APIENTRYP GPMULTITEXCOORD4HVNV)(GLenum  target, const GLhalfNV * v);
// typedef void  (APIENTRYP GPMULTITEXCOORD4IARB)(GLenum  target, GLint  s, GLint  t, GLint  r, GLint  q);
// typedef void  (APIENTRYP GPMULTITEXCOORD4IVARB)(GLenum  target, const GLint * v);
// typedef void  (APIENTRYP GPMULTITEXCOORD4SARB)(GLenum  target, GLshort  s, GLshort  t, GLshort  r, GLshort  q);
// typedef void  (APIENTRYP GPMULTITEXCOORD4SVARB)(GLenum  target, const GLshort * v);
// typedef void  (APIENTRYP GPMULTITEXCOORD4XOES)(GLenum  texture, GLfixed  s, GLfixed  t, GLfixed  r, GLfixed  q);
// typedef void  (APIENTRYP GPMULTITEXCOORD4XVOES)(GLenum  texture, const GLfixed * coords);
// typedef void  (APIENTRYP GPMULTITEXCOORDPOINTEREXT)(GLenum  texunit, GLint  size, GLenum  type, GLsizei  stride, const void * pointer);
// typedef void  (APIENTRYP GPMULTITEXENVFEXT)(GLenum  texunit, GLenum  target, GLenum  pname, GLfloat  param);
// typedef void  (APIENTRYP GPMULTITEXENVFVEXT)(GLenum  texunit, GLenum  target, GLenum  pname, const GLfloat * params);
// typedef void  (APIENTRYP GPMULTITEXENVIEXT)(GLenum  texunit, GLenum  target, GLenum  pname, GLint  param);
// typedef void  (APIENTRYP GPMULTITEXENVIVEXT)(GLenum  texunit, GLenum  target, GLenum  pname, const GLint * params);
// typedef void  (APIENTRYP GPMULTITEXGENDEXT)(GLenum  texunit, GLenum  coord, GLenum  pname, GLdouble  param);
// typedef void  (APIENTRYP GPMULTITEXGENDVEXT)(GLenum  texunit, GLenum  coord, GLenum  pname, const GLdouble * params);
// typedef void  (APIENTRYP GPMULTITEXGENFEXT)(GLenum  texunit, GLenum  coord, GLenum  pname, GLfloat  param);
// typedef void  (APIENTRYP GPMULTITEXGENFVEXT)(GLenum  texunit, GLenum  coord, GLenum  pname, const GLfloat * params);
// typedef void  (APIENTRYP GPMULTITEXGENIEXT)(GLenum  texunit, GLenum  coord, GLenum  pname, GLint  param);
// typedef void  (APIENTRYP GPMULTITEXGENIVEXT)(GLenum  texunit, GLenum  coord, GLenum  pname, const GLint * params);
// typedef void  (APIENTRYP GPMULTITEXIMAGE1DEXT)(GLenum  texunit, GLenum  target, GLint  level, GLint  internalformat, GLsizei  width, GLint  border, GLenum  format, GLenum  type, const void * pixels);
// typedef void  (APIENTRYP GPMULTITEXIMAGE2DEXT)(GLenum  texunit, GLenum  target, GLint  level, GLint  internalformat, GLsizei  width, GLsizei  height, GLint  border, GLenum  format, GLenum  type, const void * pixels);
// typedef void  (APIENTRYP GPMULTITEXIMAGE3DEXT)(GLenum  texunit, GLenum  target, GLint  level, GLint  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth, GLint  border, GLenum  format, GLenum  type, const void * pixels);
// typedef void  (APIENTRYP GPMULTITEXPARAMETERIIVEXT)(GLenum  texunit, GLenum  target, GLenum  pname, const GLint * params);
// typedef void  (APIENTRYP GPMULTITEXPARAMETERIUIVEXT)(GLenum  texunit, GLenum  target, GLenum  pname, const GLuint * params);
// typedef void  (APIENTRYP GPMULTITEXPARAMETERFEXT)(GLenum  texunit, GLenum  target, GLenum  pname, GLfloat  param);
// typedef void  (APIENTRYP GPMULTITEXPARAMETERFVEXT)(GLenum  texunit, GLenum  target, GLenum  pname, const GLfloat * params);
// typedef void  (APIENTRYP GPMULTITEXPARAMETERIEXT)(GLenum  texunit, GLenum  target, GLenum  pname, GLint  param);
// typedef void  (APIENTRYP GPMULTITEXPARAMETERIVEXT)(GLenum  texunit, GLenum  target, GLenum  pname, const GLint * params);
// typedef void  (APIENTRYP GPMULTITEXRENDERBUFFEREXT)(GLenum  texunit, GLenum  target, GLuint  renderbuffer);
// typedef void  (APIENTRYP GPMULTITEXSUBIMAGE1DEXT)(GLenum  texunit, GLenum  target, GLint  level, GLint  xoffset, GLsizei  width, GLenum  format, GLenum  type, const void * pixels);
// typedef void  (APIENTRYP GPMULTITEXSUBIMAGE2DEXT)(GLenum  texunit, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLsizei  width, GLsizei  height, GLenum  format, GLenum  type, const void * pixels);
// typedef void  (APIENTRYP GPMULTITEXSUBIMAGE3DEXT)(GLenum  texunit, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLsizei  width, GLsizei  height, GLsizei  depth, GLenum  format, GLenum  type, const void * pixels);
// typedef void  (APIENTRYP GPNAMEDBUFFERDATAEXT)(GLuint  buffer, GLsizeiptr  size, const void * data, GLenum  usage);
// typedef void  (APIENTRYP GPNAMEDBUFFERSTORAGEEXT)(GLuint  buffer, GLsizeiptr  size, const void * data, GLbitfield  flags);
// typedef void  (APIENTRYP GPNAMEDBUFFERSUBDATAEXT)(GLuint  buffer, GLintptr  offset, GLsizeiptr  size, const void * data);
// typedef void  (APIENTRYP GPNAMEDCOPYBUFFERSUBDATAEXT)(GLuint  readBuffer, GLuint  writeBuffer, GLintptr  readOffset, GLintptr  writeOffset, GLsizeiptr  size);
// typedef void  (APIENTRYP GPNAMEDFRAMEBUFFERPARAMETERIEXT)(GLuint  framebuffer, GLenum  pname, GLint  param);
// typedef void  (APIENTRYP GPNAMEDFRAMEBUFFERRENDERBUFFEREXT)(GLuint  framebuffer, GLenum  attachment, GLenum  renderbuffertarget, GLuint  renderbuffer);
// typedef void  (APIENTRYP GPNAMEDFRAMEBUFFERTEXTURE1DEXT)(GLuint  framebuffer, GLenum  attachment, GLenum  textarget, GLuint  texture, GLint  level);
// typedef void  (APIENTRYP GPNAMEDFRAMEBUFFERTEXTURE2DEXT)(GLuint  framebuffer, GLenum  attachment, GLenum  textarget, GLuint  texture, GLint  level);
// typedef void  (APIENTRYP GPNAMEDFRAMEBUFFERTEXTURE3DEXT)(GLuint  framebuffer, GLenum  attachment, GLenum  textarget, GLuint  texture, GLint  level, GLint  zoffset);
// typedef void  (APIENTRYP GPNAMEDFRAMEBUFFERTEXTUREEXT)(GLuint  framebuffer, GLenum  attachment, GLuint  texture, GLint  level);
// typedef void  (APIENTRYP GPNAMEDFRAMEBUFFERTEXTUREFACEEXT)(GLuint  framebuffer, GLenum  attachment, GLuint  texture, GLint  level, GLenum  face);
// typedef void  (APIENTRYP GPNAMEDFRAMEBUFFERTEXTURELAYEREXT)(GLuint  framebuffer, GLenum  attachment, GLuint  texture, GLint  level, GLint  layer);
// typedef void  (APIENTRYP GPNAMEDPROGRAMLOCALPARAMETER4DEXT)(GLuint  program, GLenum  target, GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w);
// typedef void  (APIENTRYP GPNAMEDPROGRAMLOCALPARAMETER4DVEXT)(GLuint  program, GLenum  target, GLuint  index, const GLdouble * params);
// typedef void  (APIENTRYP GPNAMEDPROGRAMLOCALPARAMETER4FEXT)(GLuint  program, GLenum  target, GLuint  index, GLfloat  x, GLfloat  y, GLfloat  z, GLfloat  w);
// typedef void  (APIENTRYP GPNAMEDPROGRAMLOCALPARAMETER4FVEXT)(GLuint  program, GLenum  target, GLuint  index, const GLfloat * params);
// typedef void  (APIENTRYP GPNAMEDPROGRAMLOCALPARAMETERI4IEXT)(GLuint  program, GLenum  target, GLuint  index, GLint  x, GLint  y, GLint  z, GLint  w);
// typedef void  (APIENTRYP GPNAMEDPROGRAMLOCALPARAMETERI4IVEXT)(GLuint  program, GLenum  target, GLuint  index, const GLint * params);
// typedef void  (APIENTRYP GPNAMEDPROGRAMLOCALPARAMETERI4UIEXT)(GLuint  program, GLenum  target, GLuint  index, GLuint  x, GLuint  y, GLuint  z, GLuint  w);
// typedef void  (APIENTRYP GPNAMEDPROGRAMLOCALPARAMETERI4UIVEXT)(GLuint  program, GLenum  target, GLuint  index, const GLuint * params);
// typedef void  (APIENTRYP GPNAMEDPROGRAMLOCALPARAMETERS4FVEXT)(GLuint  program, GLenum  target, GLuint  index, GLsizei  count, const GLfloat * params);
// typedef void  (APIENTRYP GPNAMEDPROGRAMLOCALPARAMETERSI4IVEXT)(GLuint  program, GLenum  target, GLuint  index, GLsizei  count, const GLint * params);
// typedef void  (APIENTRYP GPNAMEDPROGRAMLOCALPARAMETERSI4UIVEXT)(GLuint  program, GLenum  target, GLuint  index, GLsizei  count, const GLuint * params);
// typedef void  (APIENTRYP GPNAMEDPROGRAMSTRINGEXT)(GLuint  program, GLenum  target, GLenum  format, GLsizei  len, const void * string);
// typedef void  (APIENTRYP GPNAMEDRENDERBUFFERSTORAGEEXT)(GLuint  renderbuffer, GLenum  internalformat, GLsizei  width, GLsizei  height);
// typedef void  (APIENTRYP GPNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXT)(GLuint  renderbuffer, GLsizei  coverageSamples, GLsizei  colorSamples, GLenum  internalformat, GLsizei  width, GLsizei  height);
// typedef void  (APIENTRYP GPNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXT)(GLuint  renderbuffer, GLsizei  samples, GLenum  internalformat, GLsizei  width, GLsizei  height);
// typedef void  (APIENTRYP GPNAMEDSTRINGARB)(GLenum  type, GLint  namelen, const GLchar * name, GLint  stringlen, const GLchar * string);
// typedef GLuint  (APIENTRYP GPNEWOBJECTBUFFERATI)(GLsizei  size, const void * pointer, GLenum  usage);
// typedef void  (APIENTRYP GPNORMAL3FVERTEX3FSUN)(GLfloat  nx, GLfloat  ny, GLfloat  nz, GLfloat  x, GLfloat  y, GLfloat  z);
// typedef void  (APIENTRYP GPNORMAL3FVERTEX3FVSUN)(const GLfloat * n, const GLfloat * v);
// typedef void  (APIENTRYP GPNORMAL3HNV)(GLhalfNV  nx, GLhalfNV  ny, GLhalfNV  nz);
// typedef void  (APIENTRYP GPNORMAL3HVNV)(const GLhalfNV * v);
// typedef void  (APIENTRYP GPNORMAL3XOES)(GLfixed  nx, GLfixed  ny, GLfixed  nz);
// typedef void  (APIENTRYP GPNORMAL3XVOES)(const GLfixed * coords);
// typedef void  (APIENTRYP GPNORMALFORMATNV)(GLenum  type, GLsizei  stride);
// typedef void  (APIENTRYP GPNORMALPOINTEREXT)(GLenum  type, GLsizei  stride, GLsizei  count, const void * pointer);
// typedef void  (APIENTRYP GPNORMALPOINTERLISTIBM)(GLenum  type, GLint  stride, const void ** pointer, GLint  ptrstride);
// typedef void  (APIENTRYP GPNORMALPOINTERVINTEL)(GLenum  type, const void ** pointer);
// typedef void  (APIENTRYP GPNORMALSTREAM3BATI)(GLenum  stream, GLbyte  nx, GLbyte  ny, GLbyte  nz);
// typedef void  (APIENTRYP GPNORMALSTREAM3BVATI)(GLenum  stream, const GLbyte * coords);
// typedef void  (APIENTRYP GPNORMALSTREAM3DATI)(GLenum  stream, GLdouble  nx, GLdouble  ny, GLdouble  nz);
// typedef void  (APIENTRYP GPNORMALSTREAM3DVATI)(GLenum  stream, const GLdouble * coords);
// typedef void  (APIENTRYP GPNORMALSTREAM3FATI)(GLenum  stream, GLfloat  nx, GLfloat  ny, GLfloat  nz);
// typedef void  (APIENTRYP GPNORMALSTREAM3FVATI)(GLenum  stream, const GLfloat * coords);
// typedef void  (APIENTRYP GPNORMALSTREAM3IATI)(GLenum  stream, GLint  nx, GLint  ny, GLint  nz);
// typedef void  (APIENTRYP GPNORMALSTREAM3IVATI)(GLenum  stream, const GLint * coords);
// typedef void  (APIENTRYP GPNORMALSTREAM3SATI)(GLenum  stream, GLshort  nx, GLshort  ny, GLshort  nz);
// typedef void  (APIENTRYP GPNORMALSTREAM3SVATI)(GLenum  stream, const GLshort * coords);
// typedef void  (APIENTRYP GPOBJECTLABEL)(GLenum  identifier, GLuint  name, GLsizei  length, const GLchar * label);
// typedef void  (APIENTRYP GPOBJECTLABELKHR)(GLenum  identifier, GLuint  name, GLsizei  length, const GLchar * label);
// typedef void  (APIENTRYP GPOBJECTPTRLABEL)(const void * ptr, GLsizei  length, const GLchar * label);
// typedef void  (APIENTRYP GPOBJECTPTRLABELKHR)(const void * ptr, GLsizei  length, const GLchar * label);
// typedef GLenum  (APIENTRYP GPOBJECTPURGEABLEAPPLE)(GLenum  objectType, GLuint  name, GLenum  option);
// typedef GLenum  (APIENTRYP GPOBJECTUNPURGEABLEAPPLE)(GLenum  objectType, GLuint  name, GLenum  option);
// typedef void  (APIENTRYP GPORTHOFOES)(GLfloat  l, GLfloat  r, GLfloat  b, GLfloat  t, GLfloat  n, GLfloat  f);
// typedef void  (APIENTRYP GPORTHOXOES)(GLfixed  l, GLfixed  r, GLfixed  b, GLfixed  t, GLfixed  n, GLfixed  f);
// typedef void  (APIENTRYP GPPNTRIANGLESFATI)(GLenum  pname, GLfloat  param);
// typedef void  (APIENTRYP GPPNTRIANGLESIATI)(GLenum  pname, GLint  param);
// typedef void  (APIENTRYP GPPASSTEXCOORDATI)(GLuint  dst, GLuint  coord, GLenum  swizzle);
// typedef void  (APIENTRYP GPPASSTHROUGHXOES)(GLfixed  token);
// typedef void  (APIENTRYP GPPATCHPARAMETERFV)(GLenum  pname, const GLfloat * values);
// typedef void  (APIENTRYP GPPATCHPARAMETERI)(GLenum  pname, GLint  value);
// typedef void  (APIENTRYP GPPATHCOLORGENNV)(GLenum  color, GLenum  genMode, GLenum  colorFormat, const GLfloat * coeffs);
// typedef void  (APIENTRYP GPPATHCOMMANDSNV)(GLuint  path, GLsizei  numCommands, const GLubyte * commands, GLsizei  numCoords, GLenum  coordType, const void * coords);
// typedef void  (APIENTRYP GPPATHCOORDSNV)(GLuint  path, GLsizei  numCoords, GLenum  coordType, const void * coords);
// typedef void  (APIENTRYP GPPATHCOVERDEPTHFUNCNV)(GLenum  func);
// typedef void  (APIENTRYP GPPATHDASHARRAYNV)(GLuint  path, GLsizei  dashCount, const GLfloat * dashArray);
// typedef void  (APIENTRYP GPPATHFOGGENNV)(GLenum  genMode);
// typedef void  (APIENTRYP GPPATHGLYPHRANGENV)(GLuint  firstPathName, GLenum  fontTarget, const void * fontName, GLbitfield  fontStyle, GLuint  firstGlyph, GLsizei  numGlyphs, GLenum  handleMissingGlyphs, GLuint  pathParameterTemplate, GLfloat  emScale);
// typedef void  (APIENTRYP GPPATHGLYPHSNV)(GLuint  firstPathName, GLenum  fontTarget, const void * fontName, GLbitfield  fontStyle, GLsizei  numGlyphs, GLenum  type, const void * charcodes, GLenum  handleMissingGlyphs, GLuint  pathParameterTemplate, GLfloat  emScale);
// typedef void  (APIENTRYP GPPATHPARAMETERFNV)(GLuint  path, GLenum  pname, GLfloat  value);
// typedef void  (APIENTRYP GPPATHPARAMETERFVNV)(GLuint  path, GLenum  pname, const GLfloat * value);
// typedef void  (APIENTRYP GPPATHPARAMETERINV)(GLuint  path, GLenum  pname, GLint  value);
// typedef void  (APIENTRYP GPPATHPARAMETERIVNV)(GLuint  path, GLenum  pname, const GLint * value);
// typedef void  (APIENTRYP GPPATHSTENCILDEPTHOFFSETNV)(GLfloat  factor, GLfloat  units);
// typedef void  (APIENTRYP GPPATHSTENCILFUNCNV)(GLenum  func, GLint  ref, GLuint  mask);
// typedef void  (APIENTRYP GPPATHSTRINGNV)(GLuint  path, GLenum  format, GLsizei  length, const void * pathString);
// typedef void  (APIENTRYP GPPATHSUBCOMMANDSNV)(GLuint  path, GLsizei  commandStart, GLsizei  commandsToDelete, GLsizei  numCommands, const GLubyte * commands, GLsizei  numCoords, GLenum  coordType, const void * coords);
// typedef void  (APIENTRYP GPPATHSUBCOORDSNV)(GLuint  path, GLsizei  coordStart, GLsizei  numCoords, GLenum  coordType, const void * coords);
// typedef void  (APIENTRYP GPPATHTEXGENNV)(GLenum  texCoordSet, GLenum  genMode, GLint  components, const GLfloat * coeffs);
// typedef void  (APIENTRYP GPPAUSETRANSFORMFEEDBACK)();
// typedef void  (APIENTRYP GPPAUSETRANSFORMFEEDBACKNV)();
// typedef void  (APIENTRYP GPPIXELDATARANGENV)(GLenum  target, GLsizei  length, const void * pointer);
// typedef void  (APIENTRYP GPPIXELMAPX)(GLenum  map, GLint  size, const GLfixed * values);
// typedef void  (APIENTRYP GPPIXELSTOREF)(GLenum  pname, GLfloat  param);
// typedef void  (APIENTRYP GPPIXELSTOREI)(GLenum  pname, GLint  param);
// typedef void  (APIENTRYP GPPIXELSTOREX)(GLenum  pname, GLfixed  param);
// typedef void  (APIENTRYP GPPIXELTEXGENPARAMETERFSGIS)(GLenum  pname, GLfloat  param);
// typedef void  (APIENTRYP GPPIXELTEXGENPARAMETERFVSGIS)(GLenum  pname, const GLfloat * params);
// typedef void  (APIENTRYP GPPIXELTEXGENPARAMETERISGIS)(GLenum  pname, GLint  param);
// typedef void  (APIENTRYP GPPIXELTEXGENPARAMETERIVSGIS)(GLenum  pname, const GLint * params);
// typedef void  (APIENTRYP GPPIXELTEXGENSGIX)(GLenum  mode);
// typedef void  (APIENTRYP GPPIXELTRANSFERXOES)(GLenum  pname, GLfixed  param);
// typedef void  (APIENTRYP GPPIXELTRANSFORMPARAMETERFEXT)(GLenum  target, GLenum  pname, GLfloat  param);
// typedef void  (APIENTRYP GPPIXELTRANSFORMPARAMETERFVEXT)(GLenum  target, GLenum  pname, const GLfloat * params);
// typedef void  (APIENTRYP GPPIXELTRANSFORMPARAMETERIEXT)(GLenum  target, GLenum  pname, GLint  param);
// typedef void  (APIENTRYP GPPIXELTRANSFORMPARAMETERIVEXT)(GLenum  target, GLenum  pname, const GLint * params);
// typedef void  (APIENTRYP GPPIXELZOOMXOES)(GLfixed  xfactor, GLfixed  yfactor);
// typedef GLboolean  (APIENTRYP GPPOINTALONGPATHNV)(GLuint  path, GLsizei  startSegment, GLsizei  numSegments, GLfloat  distance, GLfloat * x, GLfloat * y, GLfloat * tangentX, GLfloat * tangentY);
// typedef void  (APIENTRYP GPPOINTPARAMETERF)(GLenum  pname, GLfloat  param);
// typedef void  (APIENTRYP GPPOINTPARAMETERFARB)(GLenum  pname, GLfloat  param);
// typedef void  (APIENTRYP GPPOINTPARAMETERFEXT)(GLenum  pname, GLfloat  param);
// typedef void  (APIENTRYP GPPOINTPARAMETERFSGIS)(GLenum  pname, GLfloat  param);
// typedef void  (APIENTRYP GPPOINTPARAMETERFV)(GLenum  pname, const GLfloat * params);
// typedef void  (APIENTRYP GPPOINTPARAMETERFVARB)(GLenum  pname, const GLfloat * params);
// typedef void  (APIENTRYP GPPOINTPARAMETERFVEXT)(GLenum  pname, const GLfloat * params);
// typedef void  (APIENTRYP GPPOINTPARAMETERFVSGIS)(GLenum  pname, const GLfloat * params);
// typedef void  (APIENTRYP GPPOINTPARAMETERI)(GLenum  pname, GLint  param);
// typedef void  (APIENTRYP GPPOINTPARAMETERINV)(GLenum  pname, GLint  param);
// typedef void  (APIENTRYP GPPOINTPARAMETERIV)(GLenum  pname, const GLint * params);
// typedef void  (APIENTRYP GPPOINTPARAMETERIVNV)(GLenum  pname, const GLint * params);
// typedef void  (APIENTRYP GPPOINTPARAMETERXOES)(GLenum  pname, GLfixed  param);
// typedef void  (APIENTRYP GPPOINTPARAMETERXVOES)(GLenum  pname, const GLfixed * params);
// typedef void  (APIENTRYP GPPOINTSIZE)(GLfloat  size);
// typedef void  (APIENTRYP GPPOINTSIZEXOES)(GLfixed  size);
// typedef GLint  (APIENTRYP GPPOLLASYNCSGIX)(GLuint * markerp);
// typedef GLint  (APIENTRYP GPPOLLINSTRUMENTSSGIX)(GLint * marker_p);
// typedef void  (APIENTRYP GPPOLYGONMODE)(GLenum  face, GLenum  mode);
// typedef void  (APIENTRYP GPPOLYGONOFFSET)(GLfloat  factor, GLfloat  units);
// typedef void  (APIENTRYP GPPOLYGONOFFSETEXT)(GLfloat  factor, GLfloat  bias);
// typedef void  (APIENTRYP GPPOLYGONOFFSETXOES)(GLfixed  factor, GLfixed  units);
// typedef void  (APIENTRYP GPPOPDEBUGGROUP)();
// typedef void  (APIENTRYP GPPOPDEBUGGROUPKHR)();
// typedef void  (APIENTRYP GPPOPGROUPMARKEREXT)();
// typedef void  (APIENTRYP GPPRESENTFRAMEDUALFILLNV)(GLuint  video_slot, GLuint64EXT  minPresentTime, GLuint  beginPresentTimeId, GLuint  presentDurationId, GLenum  type, GLenum  target0, GLuint  fill0, GLenum  target1, GLuint  fill1, GLenum  target2, GLuint  fill2, GLenum  target3, GLuint  fill3);
// typedef void  (APIENTRYP GPPRESENTFRAMEKEYEDNV)(GLuint  video_slot, GLuint64EXT  minPresentTime, GLuint  beginPresentTimeId, GLuint  presentDurationId, GLenum  type, GLenum  target0, GLuint  fill0, GLuint  key0, GLenum  target1, GLuint  fill1, GLuint  key1);
// typedef void  (APIENTRYP GPPRIMITIVERESTARTINDEX)(GLuint  index);
// typedef void  (APIENTRYP GPPRIMITIVERESTARTINDEXNV)(GLuint  index);
// typedef void  (APIENTRYP GPPRIMITIVERESTARTNV)();
// typedef void  (APIENTRYP GPPRIORITIZETEXTURESEXT)(GLsizei  n, const GLuint * textures, const GLclampf * priorities);
// typedef void  (APIENTRYP GPPRIORITIZETEXTURESXOES)(GLsizei  n, const GLuint * textures, const GLfixed * priorities);
// typedef void  (APIENTRYP GPPROGRAMBINARY)(GLuint  program, GLenum  binaryFormat, const void * binary, GLsizei  length);
// typedef void  (APIENTRYP GPPROGRAMBUFFERPARAMETERSIIVNV)(GLenum  target, GLuint  bindingIndex, GLuint  wordIndex, GLsizei  count, const GLint * params);
// typedef void  (APIENTRYP GPPROGRAMBUFFERPARAMETERSIUIVNV)(GLenum  target, GLuint  bindingIndex, GLuint  wordIndex, GLsizei  count, const GLuint * params);
// typedef void  (APIENTRYP GPPROGRAMBUFFERPARAMETERSFVNV)(GLenum  target, GLuint  bindingIndex, GLuint  wordIndex, GLsizei  count, const GLfloat * params);
// typedef void  (APIENTRYP GPPROGRAMENVPARAMETER4DARB)(GLenum  target, GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w);
// typedef void  (APIENTRYP GPPROGRAMENVPARAMETER4DVARB)(GLenum  target, GLuint  index, const GLdouble * params);
// typedef void  (APIENTRYP GPPROGRAMENVPARAMETER4FARB)(GLenum  target, GLuint  index, GLfloat  x, GLfloat  y, GLfloat  z, GLfloat  w);
// typedef void  (APIENTRYP GPPROGRAMENVPARAMETER4FVARB)(GLenum  target, GLuint  index, const GLfloat * params);
// typedef void  (APIENTRYP GPPROGRAMENVPARAMETERI4INV)(GLenum  target, GLuint  index, GLint  x, GLint  y, GLint  z, GLint  w);
// typedef void  (APIENTRYP GPPROGRAMENVPARAMETERI4IVNV)(GLenum  target, GLuint  index, const GLint * params);
// typedef void  (APIENTRYP GPPROGRAMENVPARAMETERI4UINV)(GLenum  target, GLuint  index, GLuint  x, GLuint  y, GLuint  z, GLuint  w);
// typedef void  (APIENTRYP GPPROGRAMENVPARAMETERI4UIVNV)(GLenum  target, GLuint  index, const GLuint * params);
// typedef void  (APIENTRYP GPPROGRAMENVPARAMETERS4FVEXT)(GLenum  target, GLuint  index, GLsizei  count, const GLfloat * params);
// typedef void  (APIENTRYP GPPROGRAMENVPARAMETERSI4IVNV)(GLenum  target, GLuint  index, GLsizei  count, const GLint * params);
// typedef void  (APIENTRYP GPPROGRAMENVPARAMETERSI4UIVNV)(GLenum  target, GLuint  index, GLsizei  count, const GLuint * params);
// typedef void  (APIENTRYP GPPROGRAMLOCALPARAMETER4DARB)(GLenum  target, GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w);
// typedef void  (APIENTRYP GPPROGRAMLOCALPARAMETER4DVARB)(GLenum  target, GLuint  index, const GLdouble * params);
// typedef void  (APIENTRYP GPPROGRAMLOCALPARAMETER4FARB)(GLenum  target, GLuint  index, GLfloat  x, GLfloat  y, GLfloat  z, GLfloat  w);
// typedef void  (APIENTRYP GPPROGRAMLOCALPARAMETER4FVARB)(GLenum  target, GLuint  index, const GLfloat * params);
// typedef void  (APIENTRYP GPPROGRAMLOCALPARAMETERI4INV)(GLenum  target, GLuint  index, GLint  x, GLint  y, GLint  z, GLint  w);
// typedef void  (APIENTRYP GPPROGRAMLOCALPARAMETERI4IVNV)(GLenum  target, GLuint  index, const GLint * params);
// typedef void  (APIENTRYP GPPROGRAMLOCALPARAMETERI4UINV)(GLenum  target, GLuint  index, GLuint  x, GLuint  y, GLuint  z, GLuint  w);
// typedef void  (APIENTRYP GPPROGRAMLOCALPARAMETERI4UIVNV)(GLenum  target, GLuint  index, const GLuint * params);
// typedef void  (APIENTRYP GPPROGRAMLOCALPARAMETERS4FVEXT)(GLenum  target, GLuint  index, GLsizei  count, const GLfloat * params);
// typedef void  (APIENTRYP GPPROGRAMLOCALPARAMETERSI4IVNV)(GLenum  target, GLuint  index, GLsizei  count, const GLint * params);
// typedef void  (APIENTRYP GPPROGRAMLOCALPARAMETERSI4UIVNV)(GLenum  target, GLuint  index, GLsizei  count, const GLuint * params);
// typedef void  (APIENTRYP GPPROGRAMNAMEDPARAMETER4DNV)(GLuint  id, GLsizei  len, const GLubyte * name, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w);
// typedef void  (APIENTRYP GPPROGRAMNAMEDPARAMETER4DVNV)(GLuint  id, GLsizei  len, const GLubyte * name, const GLdouble * v);
// typedef void  (APIENTRYP GPPROGRAMNAMEDPARAMETER4FNV)(GLuint  id, GLsizei  len, const GLubyte * name, GLfloat  x, GLfloat  y, GLfloat  z, GLfloat  w);
// typedef void  (APIENTRYP GPPROGRAMNAMEDPARAMETER4FVNV)(GLuint  id, GLsizei  len, const GLubyte * name, const GLfloat * v);
// typedef void  (APIENTRYP GPPROGRAMPARAMETER4DNV)(GLenum  target, GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w);
// typedef void  (APIENTRYP GPPROGRAMPARAMETER4DVNV)(GLenum  target, GLuint  index, const GLdouble * v);
// typedef void  (APIENTRYP GPPROGRAMPARAMETER4FNV)(GLenum  target, GLuint  index, GLfloat  x, GLfloat  y, GLfloat  z, GLfloat  w);
// typedef void  (APIENTRYP GPPROGRAMPARAMETER4FVNV)(GLenum  target, GLuint  index, const GLfloat * v);
// typedef void  (APIENTRYP GPPROGRAMPARAMETERI)(GLuint  program, GLenum  pname, GLint  value);
// typedef void  (APIENTRYP GPPROGRAMPARAMETERIARB)(GLuint  program, GLenum  pname, GLint  value);
// typedef void  (APIENTRYP GPPROGRAMPARAMETERIEXT)(GLuint  program, GLenum  pname, GLint  value);
// typedef void  (APIENTRYP GPPROGRAMPARAMETERS4DVNV)(GLenum  target, GLuint  index, GLsizei  count, const GLdouble * v);
// typedef void  (APIENTRYP GPPROGRAMPARAMETERS4FVNV)(GLenum  target, GLuint  index, GLsizei  count, const GLfloat * v);
// typedef void  (APIENTRYP GPPROGRAMSTRINGARB)(GLenum  target, GLenum  format, GLsizei  len, const void * string);
// typedef void  (APIENTRYP GPPROGRAMSUBROUTINEPARAMETERSUIVNV)(GLenum  target, GLsizei  count, const GLuint * params);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM1D)(GLuint  program, GLint  location, GLdouble  v0);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM1DEXT)(GLuint  program, GLint  location, GLdouble  x);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM1DV)(GLuint  program, GLint  location, GLsizei  count, const GLdouble * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM1DVEXT)(GLuint  program, GLint  location, GLsizei  count, const GLdouble * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM1F)(GLuint  program, GLint  location, GLfloat  v0);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM1FEXT)(GLuint  program, GLint  location, GLfloat  v0);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM1FV)(GLuint  program, GLint  location, GLsizei  count, const GLfloat * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM1FVEXT)(GLuint  program, GLint  location, GLsizei  count, const GLfloat * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM1I)(GLuint  program, GLint  location, GLint  v0);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM1I64NV)(GLuint  program, GLint  location, GLint64EXT  x);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM1I64VNV)(GLuint  program, GLint  location, GLsizei  count, const GLint64EXT * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM1IEXT)(GLuint  program, GLint  location, GLint  v0);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM1IV)(GLuint  program, GLint  location, GLsizei  count, const GLint * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM1IVEXT)(GLuint  program, GLint  location, GLsizei  count, const GLint * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM1UI)(GLuint  program, GLint  location, GLuint  v0);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM1UI64NV)(GLuint  program, GLint  location, GLuint64EXT  x);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM1UI64VNV)(GLuint  program, GLint  location, GLsizei  count, const GLuint64EXT * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM1UIEXT)(GLuint  program, GLint  location, GLuint  v0);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM1UIV)(GLuint  program, GLint  location, GLsizei  count, const GLuint * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM1UIVEXT)(GLuint  program, GLint  location, GLsizei  count, const GLuint * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM2D)(GLuint  program, GLint  location, GLdouble  v0, GLdouble  v1);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM2DEXT)(GLuint  program, GLint  location, GLdouble  x, GLdouble  y);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM2DV)(GLuint  program, GLint  location, GLsizei  count, const GLdouble * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM2DVEXT)(GLuint  program, GLint  location, GLsizei  count, const GLdouble * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM2F)(GLuint  program, GLint  location, GLfloat  v0, GLfloat  v1);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM2FEXT)(GLuint  program, GLint  location, GLfloat  v0, GLfloat  v1);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM2FV)(GLuint  program, GLint  location, GLsizei  count, const GLfloat * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM2FVEXT)(GLuint  program, GLint  location, GLsizei  count, const GLfloat * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM2I)(GLuint  program, GLint  location, GLint  v0, GLint  v1);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM2I64NV)(GLuint  program, GLint  location, GLint64EXT  x, GLint64EXT  y);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM2I64VNV)(GLuint  program, GLint  location, GLsizei  count, const GLint64EXT * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM2IEXT)(GLuint  program, GLint  location, GLint  v0, GLint  v1);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM2IV)(GLuint  program, GLint  location, GLsizei  count, const GLint * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM2IVEXT)(GLuint  program, GLint  location, GLsizei  count, const GLint * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM2UI)(GLuint  program, GLint  location, GLuint  v0, GLuint  v1);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM2UI64NV)(GLuint  program, GLint  location, GLuint64EXT  x, GLuint64EXT  y);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM2UI64VNV)(GLuint  program, GLint  location, GLsizei  count, const GLuint64EXT * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM2UIEXT)(GLuint  program, GLint  location, GLuint  v0, GLuint  v1);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM2UIV)(GLuint  program, GLint  location, GLsizei  count, const GLuint * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM2UIVEXT)(GLuint  program, GLint  location, GLsizei  count, const GLuint * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM3D)(GLuint  program, GLint  location, GLdouble  v0, GLdouble  v1, GLdouble  v2);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM3DEXT)(GLuint  program, GLint  location, GLdouble  x, GLdouble  y, GLdouble  z);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM3DV)(GLuint  program, GLint  location, GLsizei  count, const GLdouble * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM3DVEXT)(GLuint  program, GLint  location, GLsizei  count, const GLdouble * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM3F)(GLuint  program, GLint  location, GLfloat  v0, GLfloat  v1, GLfloat  v2);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM3FEXT)(GLuint  program, GLint  location, GLfloat  v0, GLfloat  v1, GLfloat  v2);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM3FV)(GLuint  program, GLint  location, GLsizei  count, const GLfloat * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM3FVEXT)(GLuint  program, GLint  location, GLsizei  count, const GLfloat * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM3I)(GLuint  program, GLint  location, GLint  v0, GLint  v1, GLint  v2);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM3I64NV)(GLuint  program, GLint  location, GLint64EXT  x, GLint64EXT  y, GLint64EXT  z);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM3I64VNV)(GLuint  program, GLint  location, GLsizei  count, const GLint64EXT * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM3IEXT)(GLuint  program, GLint  location, GLint  v0, GLint  v1, GLint  v2);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM3IV)(GLuint  program, GLint  location, GLsizei  count, const GLint * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM3IVEXT)(GLuint  program, GLint  location, GLsizei  count, const GLint * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM3UI)(GLuint  program, GLint  location, GLuint  v0, GLuint  v1, GLuint  v2);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM3UI64NV)(GLuint  program, GLint  location, GLuint64EXT  x, GLuint64EXT  y, GLuint64EXT  z);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM3UI64VNV)(GLuint  program, GLint  location, GLsizei  count, const GLuint64EXT * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM3UIEXT)(GLuint  program, GLint  location, GLuint  v0, GLuint  v1, GLuint  v2);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM3UIV)(GLuint  program, GLint  location, GLsizei  count, const GLuint * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM3UIVEXT)(GLuint  program, GLint  location, GLsizei  count, const GLuint * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM4D)(GLuint  program, GLint  location, GLdouble  v0, GLdouble  v1, GLdouble  v2, GLdouble  v3);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM4DEXT)(GLuint  program, GLint  location, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM4DV)(GLuint  program, GLint  location, GLsizei  count, const GLdouble * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM4DVEXT)(GLuint  program, GLint  location, GLsizei  count, const GLdouble * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM4F)(GLuint  program, GLint  location, GLfloat  v0, GLfloat  v1, GLfloat  v2, GLfloat  v3);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM4FEXT)(GLuint  program, GLint  location, GLfloat  v0, GLfloat  v1, GLfloat  v2, GLfloat  v3);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM4FV)(GLuint  program, GLint  location, GLsizei  count, const GLfloat * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM4FVEXT)(GLuint  program, GLint  location, GLsizei  count, const GLfloat * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM4I)(GLuint  program, GLint  location, GLint  v0, GLint  v1, GLint  v2, GLint  v3);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM4I64NV)(GLuint  program, GLint  location, GLint64EXT  x, GLint64EXT  y, GLint64EXT  z, GLint64EXT  w);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM4I64VNV)(GLuint  program, GLint  location, GLsizei  count, const GLint64EXT * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM4IEXT)(GLuint  program, GLint  location, GLint  v0, GLint  v1, GLint  v2, GLint  v3);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM4IV)(GLuint  program, GLint  location, GLsizei  count, const GLint * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM4IVEXT)(GLuint  program, GLint  location, GLsizei  count, const GLint * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM4UI)(GLuint  program, GLint  location, GLuint  v0, GLuint  v1, GLuint  v2, GLuint  v3);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM4UI64NV)(GLuint  program, GLint  location, GLuint64EXT  x, GLuint64EXT  y, GLuint64EXT  z, GLuint64EXT  w);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM4UI64VNV)(GLuint  program, GLint  location, GLsizei  count, const GLuint64EXT * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM4UIEXT)(GLuint  program, GLint  location, GLuint  v0, GLuint  v1, GLuint  v2, GLuint  v3);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM4UIV)(GLuint  program, GLint  location, GLsizei  count, const GLuint * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORM4UIVEXT)(GLuint  program, GLint  location, GLsizei  count, const GLuint * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORMHANDLEUI64ARB)(GLuint  program, GLint  location, GLuint64  value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORMHANDLEUI64NV)(GLuint  program, GLint  location, GLuint64  value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORMHANDLEUI64VARB)(GLuint  program, GLint  location, GLsizei  count, const GLuint64 * values);
// typedef void  (APIENTRYP GPPROGRAMUNIFORMHANDLEUI64VNV)(GLuint  program, GLint  location, GLsizei  count, const GLuint64 * values);
// typedef void  (APIENTRYP GPPROGRAMUNIFORMMATRIX2DV)(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORMMATRIX2DVEXT)(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORMMATRIX2FV)(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORMMATRIX2FVEXT)(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORMMATRIX2X3DV)(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORMMATRIX2X3DVEXT)(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORMMATRIX2X3FV)(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORMMATRIX2X3FVEXT)(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORMMATRIX2X4DV)(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORMMATRIX2X4DVEXT)(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORMMATRIX2X4FV)(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORMMATRIX2X4FVEXT)(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORMMATRIX3DV)(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORMMATRIX3DVEXT)(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORMMATRIX3FV)(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORMMATRIX3FVEXT)(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORMMATRIX3X2DV)(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORMMATRIX3X2DVEXT)(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORMMATRIX3X2FV)(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORMMATRIX3X2FVEXT)(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORMMATRIX3X4DV)(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORMMATRIX3X4DVEXT)(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORMMATRIX3X4FV)(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORMMATRIX3X4FVEXT)(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORMMATRIX4DV)(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORMMATRIX4DVEXT)(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORMMATRIX4FV)(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORMMATRIX4FVEXT)(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORMMATRIX4X2DV)(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORMMATRIX4X2DVEXT)(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORMMATRIX4X2FV)(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORMMATRIX4X2FVEXT)(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORMMATRIX4X3DV)(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORMMATRIX4X3DVEXT)(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORMMATRIX4X3FV)(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORMMATRIX4X3FVEXT)(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORMUI64NV)(GLuint  program, GLint  location, GLuint64EXT  value);
// typedef void  (APIENTRYP GPPROGRAMUNIFORMUI64VNV)(GLuint  program, GLint  location, GLsizei  count, const GLuint64EXT * value);
// typedef void  (APIENTRYP GPPROGRAMVERTEXLIMITNV)(GLenum  target, GLint  limit);
// typedef void  (APIENTRYP GPPROVOKINGVERTEX)(GLenum  mode);
// typedef void  (APIENTRYP GPPROVOKINGVERTEXEXT)(GLenum  mode);
// typedef void  (APIENTRYP GPPUSHCLIENTATTRIBDEFAULTEXT)(GLbitfield  mask);
// typedef void  (APIENTRYP GPPUSHDEBUGGROUP)(GLenum  source, GLuint  id, GLsizei  length, const GLchar * message);
// typedef void  (APIENTRYP GPPUSHDEBUGGROUPKHR)(GLenum  source, GLuint  id, GLsizei  length, const GLchar * message);
// typedef void  (APIENTRYP GPPUSHGROUPMARKEREXT)(GLsizei  length, const GLchar * marker);
// typedef void  (APIENTRYP GPQUERYCOUNTER)(GLuint  id, GLenum  target);
// typedef GLbitfield  (APIENTRYP GPQUERYMATRIXXOES)(GLfixed * mantissa, GLint * exponent);
// typedef void  (APIENTRYP GPQUERYOBJECTPARAMETERUIAMD)(GLenum  target, GLuint  id, GLenum  pname, GLuint  param);
// typedef void  (APIENTRYP GPRASTERPOS2XOES)(GLfixed  x, GLfixed  y);
// typedef void  (APIENTRYP GPRASTERPOS2XVOES)(const GLfixed * coords);
// typedef void  (APIENTRYP GPRASTERPOS3XOES)(GLfixed  x, GLfixed  y, GLfixed  z);
// typedef void  (APIENTRYP GPRASTERPOS3XVOES)(const GLfixed * coords);
// typedef void  (APIENTRYP GPRASTERPOS4XOES)(GLfixed  x, GLfixed  y, GLfixed  z, GLfixed  w);
// typedef void  (APIENTRYP GPRASTERPOS4XVOES)(const GLfixed * coords);
// typedef void  (APIENTRYP GPREADBUFFER)(GLenum  mode);
// typedef void  (APIENTRYP GPREADINSTRUMENTSSGIX)(GLint  marker);
// typedef void  (APIENTRYP GPREADPIXELS)(GLint  x, GLint  y, GLsizei  width, GLsizei  height, GLenum  format, GLenum  type, void * pixels);
// typedef void  (APIENTRYP GPREADNPIXELSARB)(GLint  x, GLint  y, GLsizei  width, GLsizei  height, GLenum  format, GLenum  type, GLsizei  bufSize, void * data);
// typedef void  (APIENTRYP GPRECTXOES)(GLfixed  x1, GLfixed  y1, GLfixed  x2, GLfixed  y2);
// typedef void  (APIENTRYP GPRECTXVOES)(const GLfixed * v1, const GLfixed * v2);
// typedef void  (APIENTRYP GPREFERENCEPLANESGIX)(const GLdouble * equation);
// typedef void  (APIENTRYP GPRELEASESHADERCOMPILER)();
// typedef void  (APIENTRYP GPRENDERBUFFERSTORAGE)(GLenum  target, GLenum  internalformat, GLsizei  width, GLsizei  height);
// typedef void  (APIENTRYP GPRENDERBUFFERSTORAGEEXT)(GLenum  target, GLenum  internalformat, GLsizei  width, GLsizei  height);
// typedef void  (APIENTRYP GPRENDERBUFFERSTORAGEMULTISAMPLE)(GLenum  target, GLsizei  samples, GLenum  internalformat, GLsizei  width, GLsizei  height);
// typedef void  (APIENTRYP GPRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENV)(GLenum  target, GLsizei  coverageSamples, GLsizei  colorSamples, GLenum  internalformat, GLsizei  width, GLsizei  height);
// typedef void  (APIENTRYP GPRENDERBUFFERSTORAGEMULTISAMPLEEXT)(GLenum  target, GLsizei  samples, GLenum  internalformat, GLsizei  width, GLsizei  height);
// typedef void  (APIENTRYP GPREPLACEMENTCODEPOINTERSUN)(GLenum  type, GLsizei  stride, const void ** pointer);
// typedef void  (APIENTRYP GPREPLACEMENTCODEUBSUN)(GLubyte  code);
// typedef void  (APIENTRYP GPREPLACEMENTCODEUBVSUN)(const GLubyte * code);
// typedef void  (APIENTRYP GPREPLACEMENTCODEUICOLOR3FVERTEX3FSUN)(GLuint  rc, GLfloat  r, GLfloat  g, GLfloat  b, GLfloat  x, GLfloat  y, GLfloat  z);
// typedef void  (APIENTRYP GPREPLACEMENTCODEUICOLOR3FVERTEX3FVSUN)(const GLuint * rc, const GLfloat * c, const GLfloat * v);
// typedef void  (APIENTRYP GPREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUN)(GLuint  rc, GLfloat  r, GLfloat  g, GLfloat  b, GLfloat  a, GLfloat  nx, GLfloat  ny, GLfloat  nz, GLfloat  x, GLfloat  y, GLfloat  z);
// typedef void  (APIENTRYP GPREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUN)(const GLuint * rc, const GLfloat * c, const GLfloat * n, const GLfloat * v);
// typedef void  (APIENTRYP GPREPLACEMENTCODEUICOLOR4UBVERTEX3FSUN)(GLuint  rc, GLubyte  r, GLubyte  g, GLubyte  b, GLubyte  a, GLfloat  x, GLfloat  y, GLfloat  z);
// typedef void  (APIENTRYP GPREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUN)(const GLuint * rc, const GLubyte * c, const GLfloat * v);
// typedef void  (APIENTRYP GPREPLACEMENTCODEUINORMAL3FVERTEX3FSUN)(GLuint  rc, GLfloat  nx, GLfloat  ny, GLfloat  nz, GLfloat  x, GLfloat  y, GLfloat  z);
// typedef void  (APIENTRYP GPREPLACEMENTCODEUINORMAL3FVERTEX3FVSUN)(const GLuint * rc, const GLfloat * n, const GLfloat * v);
// typedef void  (APIENTRYP GPREPLACEMENTCODEUISUN)(GLuint  code);
// typedef void  (APIENTRYP GPREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUN)(GLuint  rc, GLfloat  s, GLfloat  t, GLfloat  r, GLfloat  g, GLfloat  b, GLfloat  a, GLfloat  nx, GLfloat  ny, GLfloat  nz, GLfloat  x, GLfloat  y, GLfloat  z);
// typedef void  (APIENTRYP GPREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUN)(const GLuint * rc, const GLfloat * tc, const GLfloat * c, const GLfloat * n, const GLfloat * v);
// typedef void  (APIENTRYP GPREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUN)(GLuint  rc, GLfloat  s, GLfloat  t, GLfloat  nx, GLfloat  ny, GLfloat  nz, GLfloat  x, GLfloat  y, GLfloat  z);
// typedef void  (APIENTRYP GPREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUN)(const GLuint * rc, const GLfloat * tc, const GLfloat * n, const GLfloat * v);
// typedef void  (APIENTRYP GPREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUN)(GLuint  rc, GLfloat  s, GLfloat  t, GLfloat  x, GLfloat  y, GLfloat  z);
// typedef void  (APIENTRYP GPREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUN)(const GLuint * rc, const GLfloat * tc, const GLfloat * v);
// typedef void  (APIENTRYP GPREPLACEMENTCODEUIVERTEX3FSUN)(GLuint  rc, GLfloat  x, GLfloat  y, GLfloat  z);
// typedef void  (APIENTRYP GPREPLACEMENTCODEUIVERTEX3FVSUN)(const GLuint * rc, const GLfloat * v);
// typedef void  (APIENTRYP GPREPLACEMENTCODEUIVSUN)(const GLuint * code);
// typedef void  (APIENTRYP GPREPLACEMENTCODEUSSUN)(GLushort  code);
// typedef void  (APIENTRYP GPREPLACEMENTCODEUSVSUN)(const GLushort * code);
// typedef void  (APIENTRYP GPREQUESTRESIDENTPROGRAMSNV)(GLsizei  n, const GLuint * programs);
// typedef void  (APIENTRYP GPRESETHISTOGRAMEXT)(GLenum  target);
// typedef void  (APIENTRYP GPRESETMINMAXEXT)(GLenum  target);
// typedef void  (APIENTRYP GPRESIZEBUFFERSMESA)();
// typedef void  (APIENTRYP GPRESUMETRANSFORMFEEDBACK)();
// typedef void  (APIENTRYP GPRESUMETRANSFORMFEEDBACKNV)();
// typedef void  (APIENTRYP GPROTATEXOES)(GLfixed  angle, GLfixed  x, GLfixed  y, GLfixed  z);
// typedef void  (APIENTRYP GPSAMPLECOVERAGE)(GLfloat  value, GLboolean  invert);
// typedef void  (APIENTRYP GPSAMPLECOVERAGEARB)(GLfloat  value, GLboolean  invert);
// typedef void  (APIENTRYP GPSAMPLECOVERAGEOES)(GLfixed  value, GLboolean  invert);
// typedef void  (APIENTRYP GPSAMPLECOVERAGEXOES)(GLclampx  value, GLboolean  invert);
// typedef void  (APIENTRYP GPSAMPLEMAPATI)(GLuint  dst, GLuint  interp, GLenum  swizzle);
// typedef void  (APIENTRYP GPSAMPLEMASKEXT)(GLclampf  value, GLboolean  invert);
// typedef void  (APIENTRYP GPSAMPLEMASKINDEXEDNV)(GLuint  index, GLbitfield  mask);
// typedef void  (APIENTRYP GPSAMPLEMASKSGIS)(GLclampf  value, GLboolean  invert);
// typedef void  (APIENTRYP GPSAMPLEMASKI)(GLuint  maskNumber, GLbitfield  mask);
// typedef void  (APIENTRYP GPSAMPLEPATTERNEXT)(GLenum  pattern);
// typedef void  (APIENTRYP GPSAMPLEPATTERNSGIS)(GLenum  pattern);
// typedef void  (APIENTRYP GPSAMPLERPARAMETERIIV)(GLuint  sampler, GLenum  pname, const GLint * param);
// typedef void  (APIENTRYP GPSAMPLERPARAMETERIUIV)(GLuint  sampler, GLenum  pname, const GLuint * param);
// typedef void  (APIENTRYP GPSAMPLERPARAMETERF)(GLuint  sampler, GLenum  pname, GLfloat  param);
// typedef void  (APIENTRYP GPSAMPLERPARAMETERFV)(GLuint  sampler, GLenum  pname, const GLfloat * param);
// typedef void  (APIENTRYP GPSAMPLERPARAMETERI)(GLuint  sampler, GLenum  pname, GLint  param);
// typedef void  (APIENTRYP GPSAMPLERPARAMETERIV)(GLuint  sampler, GLenum  pname, const GLint * param);
// typedef void  (APIENTRYP GPSCALEXOES)(GLfixed  x, GLfixed  y, GLfixed  z);
// typedef void  (APIENTRYP GPSCISSOR)(GLint  x, GLint  y, GLsizei  width, GLsizei  height);
// typedef void  (APIENTRYP GPSCISSORARRAYV)(GLuint  first, GLsizei  count, const GLint * v);
// typedef void  (APIENTRYP GPSCISSORINDEXED)(GLuint  index, GLint  left, GLint  bottom, GLsizei  width, GLsizei  height);
// typedef void  (APIENTRYP GPSCISSORINDEXEDV)(GLuint  index, const GLint * v);
// typedef void  (APIENTRYP GPSECONDARYCOLOR3BEXT)(GLbyte  red, GLbyte  green, GLbyte  blue);
// typedef void  (APIENTRYP GPSECONDARYCOLOR3BVEXT)(const GLbyte * v);
// typedef void  (APIENTRYP GPSECONDARYCOLOR3DEXT)(GLdouble  red, GLdouble  green, GLdouble  blue);
// typedef void  (APIENTRYP GPSECONDARYCOLOR3DVEXT)(const GLdouble * v);
// typedef void  (APIENTRYP GPSECONDARYCOLOR3FEXT)(GLfloat  red, GLfloat  green, GLfloat  blue);
// typedef void  (APIENTRYP GPSECONDARYCOLOR3FVEXT)(const GLfloat * v);
// typedef void  (APIENTRYP GPSECONDARYCOLOR3HNV)(GLhalfNV  red, GLhalfNV  green, GLhalfNV  blue);
// typedef void  (APIENTRYP GPSECONDARYCOLOR3HVNV)(const GLhalfNV * v);
// typedef void  (APIENTRYP GPSECONDARYCOLOR3IEXT)(GLint  red, GLint  green, GLint  blue);
// typedef void  (APIENTRYP GPSECONDARYCOLOR3IVEXT)(const GLint * v);
// typedef void  (APIENTRYP GPSECONDARYCOLOR3SEXT)(GLshort  red, GLshort  green, GLshort  blue);
// typedef void  (APIENTRYP GPSECONDARYCOLOR3SVEXT)(const GLshort * v);
// typedef void  (APIENTRYP GPSECONDARYCOLOR3UBEXT)(GLubyte  red, GLubyte  green, GLubyte  blue);
// typedef void  (APIENTRYP GPSECONDARYCOLOR3UBVEXT)(const GLubyte * v);
// typedef void  (APIENTRYP GPSECONDARYCOLOR3UIEXT)(GLuint  red, GLuint  green, GLuint  blue);
// typedef void  (APIENTRYP GPSECONDARYCOLOR3UIVEXT)(const GLuint * v);
// typedef void  (APIENTRYP GPSECONDARYCOLOR3USEXT)(GLushort  red, GLushort  green, GLushort  blue);
// typedef void  (APIENTRYP GPSECONDARYCOLOR3USVEXT)(const GLushort * v);
// typedef void  (APIENTRYP GPSECONDARYCOLORFORMATNV)(GLint  size, GLenum  type, GLsizei  stride);
// typedef void  (APIENTRYP GPSECONDARYCOLORPOINTEREXT)(GLint  size, GLenum  type, GLsizei  stride, const void * pointer);
// typedef void  (APIENTRYP GPSECONDARYCOLORPOINTERLISTIBM)(GLint  size, GLenum  type, GLint  stride, const void ** pointer, GLint  ptrstride);
// typedef void  (APIENTRYP GPSELECTPERFMONITORCOUNTERSAMD)(GLuint  monitor, GLboolean  enable, GLuint  group, GLint  numCounters, GLuint * counterList);
// typedef void  (APIENTRYP GPSEPARABLEFILTER2DEXT)(GLenum  target, GLenum  internalformat, GLsizei  width, GLsizei  height, GLenum  format, GLenum  type, const void * row, const void * column);
// typedef void  (APIENTRYP GPSETFENCEAPPLE)(GLuint  fence);
// typedef void  (APIENTRYP GPSETFENCENV)(GLuint  fence, GLenum  condition);
// typedef void  (APIENTRYP GPSETFRAGMENTSHADERCONSTANTATI)(GLuint  dst, const GLfloat * value);
// typedef void  (APIENTRYP GPSETINVARIANTEXT)(GLuint  id, GLenum  type, const void * addr);
// typedef void  (APIENTRYP GPSETLOCALCONSTANTEXT)(GLuint  id, GLenum  type, const void * addr);
// typedef void  (APIENTRYP GPSETMULTISAMPLEFVAMD)(GLenum  pname, GLuint  index, const GLfloat * val);
// typedef void  (APIENTRYP GPSHADERBINARY)(GLsizei  count, const GLuint * shaders, GLenum  binaryformat, const void * binary, GLsizei  length);
// typedef void  (APIENTRYP GPSHADEROP1EXT)(GLenum  op, GLuint  res, GLuint  arg1);
// typedef void  (APIENTRYP GPSHADEROP2EXT)(GLenum  op, GLuint  res, GLuint  arg1, GLuint  arg2);
// typedef void  (APIENTRYP GPSHADEROP3EXT)(GLenum  op, GLuint  res, GLuint  arg1, GLuint  arg2, GLuint  arg3);
// typedef void  (APIENTRYP GPSHADERSOURCE)(GLuint  shader, GLsizei  count, const GLchar *const* string, const GLint * length);
// typedef void  (APIENTRYP GPSHADERSOURCEARB)(GLhandleARB  shaderObj, GLsizei  count, const GLcharARB ** string, const GLint * length);
// typedef void  (APIENTRYP GPSHADERSTORAGEBLOCKBINDING)(GLuint  program, GLuint  storageBlockIndex, GLuint  storageBlockBinding);
// typedef void  (APIENTRYP GPSHARPENTEXFUNCSGIS)(GLenum  target, GLsizei  n, const GLfloat * points);
// typedef void  (APIENTRYP GPSPRITEPARAMETERFSGIX)(GLenum  pname, GLfloat  param);
// typedef void  (APIENTRYP GPSPRITEPARAMETERFVSGIX)(GLenum  pname, const GLfloat * params);
// typedef void  (APIENTRYP GPSPRITEPARAMETERISGIX)(GLenum  pname, GLint  param);
// typedef void  (APIENTRYP GPSPRITEPARAMETERIVSGIX)(GLenum  pname, const GLint * params);
// typedef void  (APIENTRYP GPSTARTINSTRUMENTSSGIX)();
// typedef void  (APIENTRYP GPSTENCILCLEARTAGEXT)(GLsizei  stencilTagBits, GLuint  stencilClearTag);
// typedef void  (APIENTRYP GPSTENCILFILLPATHINSTANCEDNV)(GLsizei  numPaths, GLenum  pathNameType, const void * paths, GLuint  pathBase, GLenum  fillMode, GLuint  mask, GLenum  transformType, const GLfloat * transformValues);
// typedef void  (APIENTRYP GPSTENCILFILLPATHNV)(GLuint  path, GLenum  fillMode, GLuint  mask);
// typedef void  (APIENTRYP GPSTENCILFUNC)(GLenum  func, GLint  ref, GLuint  mask);
// typedef void  (APIENTRYP GPSTENCILFUNCSEPARATE)(GLenum  face, GLenum  func, GLint  ref, GLuint  mask);
// typedef void  (APIENTRYP GPSTENCILFUNCSEPARATEATI)(GLenum  frontfunc, GLenum  backfunc, GLint  ref, GLuint  mask);
// typedef void  (APIENTRYP GPSTENCILMASK)(GLuint  mask);
// typedef void  (APIENTRYP GPSTENCILMASKSEPARATE)(GLenum  face, GLuint  mask);
// typedef void  (APIENTRYP GPSTENCILOP)(GLenum  fail, GLenum  zfail, GLenum  zpass);
// typedef void  (APIENTRYP GPSTENCILOPSEPARATE)(GLenum  face, GLenum  sfail, GLenum  dpfail, GLenum  dppass);
// typedef void  (APIENTRYP GPSTENCILOPSEPARATEATI)(GLenum  face, GLenum  sfail, GLenum  dpfail, GLenum  dppass);
// typedef void  (APIENTRYP GPSTENCILOPVALUEAMD)(GLenum  face, GLuint  value);
// typedef void  (APIENTRYP GPSTENCILSTROKEPATHINSTANCEDNV)(GLsizei  numPaths, GLenum  pathNameType, const void * paths, GLuint  pathBase, GLint  reference, GLuint  mask, GLenum  transformType, const GLfloat * transformValues);
// typedef void  (APIENTRYP GPSTENCILSTROKEPATHNV)(GLuint  path, GLint  reference, GLuint  mask);
// typedef void  (APIENTRYP GPSTOPINSTRUMENTSSGIX)(GLint  marker);
// typedef void  (APIENTRYP GPSTRINGMARKERGREMEDY)(GLsizei  len, const void * string);
// typedef void  (APIENTRYP GPSWIZZLEEXT)(GLuint  res, GLuint  in, GLenum  outX, GLenum  outY, GLenum  outZ, GLenum  outW);
// typedef void  (APIENTRYP GPSYNCTEXTUREINTEL)(GLuint  texture);
// typedef void  (APIENTRYP GPTAGSAMPLEBUFFERSGIX)();
// typedef void  (APIENTRYP GPTANGENT3BEXT)(GLbyte  tx, GLbyte  ty, GLbyte  tz);
// typedef void  (APIENTRYP GPTANGENT3BVEXT)(const GLbyte * v);
// typedef void  (APIENTRYP GPTANGENT3DEXT)(GLdouble  tx, GLdouble  ty, GLdouble  tz);
// typedef void  (APIENTRYP GPTANGENT3DVEXT)(const GLdouble * v);
// typedef void  (APIENTRYP GPTANGENT3FEXT)(GLfloat  tx, GLfloat  ty, GLfloat  tz);
// typedef void  (APIENTRYP GPTANGENT3FVEXT)(const GLfloat * v);
// typedef void  (APIENTRYP GPTANGENT3IEXT)(GLint  tx, GLint  ty, GLint  tz);
// typedef void  (APIENTRYP GPTANGENT3IVEXT)(const GLint * v);
// typedef void  (APIENTRYP GPTANGENT3SEXT)(GLshort  tx, GLshort  ty, GLshort  tz);
// typedef void  (APIENTRYP GPTANGENT3SVEXT)(const GLshort * v);
// typedef void  (APIENTRYP GPTANGENTPOINTEREXT)(GLenum  type, GLsizei  stride, const void * pointer);
// typedef void  (APIENTRYP GPTBUFFERMASK3DFX)(GLuint  mask);
// typedef void  (APIENTRYP GPTESSELLATIONFACTORAMD)(GLfloat  factor);
// typedef void  (APIENTRYP GPTESSELLATIONMODEAMD)(GLenum  mode);
// typedef GLboolean  (APIENTRYP GPTESTFENCEAPPLE)(GLuint  fence);
// typedef GLboolean  (APIENTRYP GPTESTFENCENV)(GLuint  fence);
// typedef GLboolean  (APIENTRYP GPTESTOBJECTAPPLE)(GLenum  object, GLuint  name);
// typedef void  (APIENTRYP GPTEXBUFFER)(GLenum  target, GLenum  internalformat, GLuint  buffer);
// typedef void  (APIENTRYP GPTEXBUFFERARB)(GLenum  target, GLenum  internalformat, GLuint  buffer);
// typedef void  (APIENTRYP GPTEXBUFFEREXT)(GLenum  target, GLenum  internalformat, GLuint  buffer);
// typedef void  (APIENTRYP GPTEXBUFFERRANGE)(GLenum  target, GLenum  internalformat, GLuint  buffer, GLintptr  offset, GLsizeiptr  size);
// typedef void  (APIENTRYP GPTEXBUMPPARAMETERFVATI)(GLenum  pname, const GLfloat * param);
// typedef void  (APIENTRYP GPTEXBUMPPARAMETERIVATI)(GLenum  pname, const GLint * param);
// typedef void  (APIENTRYP GPTEXCOORD1BOES)(GLbyte  s);
// typedef void  (APIENTRYP GPTEXCOORD1BVOES)(const GLbyte * coords);
// typedef void  (APIENTRYP GPTEXCOORD1HNV)(GLhalfNV  s);
// typedef void  (APIENTRYP GPTEXCOORD1HVNV)(const GLhalfNV * v);
// typedef void  (APIENTRYP GPTEXCOORD1XOES)(GLfixed  s);
// typedef void  (APIENTRYP GPTEXCOORD1XVOES)(const GLfixed * coords);
// typedef void  (APIENTRYP GPTEXCOORD2BOES)(GLbyte  s, GLbyte  t);
// typedef void  (APIENTRYP GPTEXCOORD2BVOES)(const GLbyte * coords);
// typedef void  (APIENTRYP GPTEXCOORD2FCOLOR3FVERTEX3FSUN)(GLfloat  s, GLfloat  t, GLfloat  r, GLfloat  g, GLfloat  b, GLfloat  x, GLfloat  y, GLfloat  z);
// typedef void  (APIENTRYP GPTEXCOORD2FCOLOR3FVERTEX3FVSUN)(const GLfloat * tc, const GLfloat * c, const GLfloat * v);
// typedef void  (APIENTRYP GPTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUN)(GLfloat  s, GLfloat  t, GLfloat  r, GLfloat  g, GLfloat  b, GLfloat  a, GLfloat  nx, GLfloat  ny, GLfloat  nz, GLfloat  x, GLfloat  y, GLfloat  z);
// typedef void  (APIENTRYP GPTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUN)(const GLfloat * tc, const GLfloat * c, const GLfloat * n, const GLfloat * v);
// typedef void  (APIENTRYP GPTEXCOORD2FCOLOR4UBVERTEX3FSUN)(GLfloat  s, GLfloat  t, GLubyte  r, GLubyte  g, GLubyte  b, GLubyte  a, GLfloat  x, GLfloat  y, GLfloat  z);
// typedef void  (APIENTRYP GPTEXCOORD2FCOLOR4UBVERTEX3FVSUN)(const GLfloat * tc, const GLubyte * c, const GLfloat * v);
// typedef void  (APIENTRYP GPTEXCOORD2FNORMAL3FVERTEX3FSUN)(GLfloat  s, GLfloat  t, GLfloat  nx, GLfloat  ny, GLfloat  nz, GLfloat  x, GLfloat  y, GLfloat  z);
// typedef void  (APIENTRYP GPTEXCOORD2FNORMAL3FVERTEX3FVSUN)(const GLfloat * tc, const GLfloat * n, const GLfloat * v);
// typedef void  (APIENTRYP GPTEXCOORD2FVERTEX3FSUN)(GLfloat  s, GLfloat  t, GLfloat  x, GLfloat  y, GLfloat  z);
// typedef void  (APIENTRYP GPTEXCOORD2FVERTEX3FVSUN)(const GLfloat * tc, const GLfloat * v);
// typedef void  (APIENTRYP GPTEXCOORD2HNV)(GLhalfNV  s, GLhalfNV  t);
// typedef void  (APIENTRYP GPTEXCOORD2HVNV)(const GLhalfNV * v);
// typedef void  (APIENTRYP GPTEXCOORD2XOES)(GLfixed  s, GLfixed  t);
// typedef void  (APIENTRYP GPTEXCOORD2XVOES)(const GLfixed * coords);
// typedef void  (APIENTRYP GPTEXCOORD3BOES)(GLbyte  s, GLbyte  t, GLbyte  r);
// typedef void  (APIENTRYP GPTEXCOORD3BVOES)(const GLbyte * coords);
// typedef void  (APIENTRYP GPTEXCOORD3HNV)(GLhalfNV  s, GLhalfNV  t, GLhalfNV  r);
// typedef void  (APIENTRYP GPTEXCOORD3HVNV)(const GLhalfNV * v);
// typedef void  (APIENTRYP GPTEXCOORD3XOES)(GLfixed  s, GLfixed  t, GLfixed  r);
// typedef void  (APIENTRYP GPTEXCOORD3XVOES)(const GLfixed * coords);
// typedef void  (APIENTRYP GPTEXCOORD4BOES)(GLbyte  s, GLbyte  t, GLbyte  r, GLbyte  q);
// typedef void  (APIENTRYP GPTEXCOORD4BVOES)(const GLbyte * coords);
// typedef void  (APIENTRYP GPTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUN)(GLfloat  s, GLfloat  t, GLfloat  p, GLfloat  q, GLfloat  r, GLfloat  g, GLfloat  b, GLfloat  a, GLfloat  nx, GLfloat  ny, GLfloat  nz, GLfloat  x, GLfloat  y, GLfloat  z, GLfloat  w);
// typedef void  (APIENTRYP GPTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUN)(const GLfloat * tc, const GLfloat * c, const GLfloat * n, const GLfloat * v);
// typedef void  (APIENTRYP GPTEXCOORD4FVERTEX4FSUN)(GLfloat  s, GLfloat  t, GLfloat  p, GLfloat  q, GLfloat  x, GLfloat  y, GLfloat  z, GLfloat  w);
// typedef void  (APIENTRYP GPTEXCOORD4FVERTEX4FVSUN)(const GLfloat * tc, const GLfloat * v);
// typedef void  (APIENTRYP GPTEXCOORD4HNV)(GLhalfNV  s, GLhalfNV  t, GLhalfNV  r, GLhalfNV  q);
// typedef void  (APIENTRYP GPTEXCOORD4HVNV)(const GLhalfNV * v);
// typedef void  (APIENTRYP GPTEXCOORD4XOES)(GLfixed  s, GLfixed  t, GLfixed  r, GLfixed  q);
// typedef void  (APIENTRYP GPTEXCOORD4XVOES)(const GLfixed * coords);
// typedef void  (APIENTRYP GPTEXCOORDFORMATNV)(GLint  size, GLenum  type, GLsizei  stride);
// typedef void  (APIENTRYP GPTEXCOORDPOINTEREXT)(GLint  size, GLenum  type, GLsizei  stride, GLsizei  count, const void * pointer);
// typedef void  (APIENTRYP GPTEXCOORDPOINTERLISTIBM)(GLint  size, GLenum  type, GLint  stride, const void ** pointer, GLint  ptrstride);
// typedef void  (APIENTRYP GPTEXCOORDPOINTERVINTEL)(GLint  size, GLenum  type, const void ** pointer);
// typedef void  (APIENTRYP GPTEXENVXOES)(GLenum  target, GLenum  pname, GLfixed  param);
// typedef void  (APIENTRYP GPTEXENVXVOES)(GLenum  target, GLenum  pname, const GLfixed * params);
// typedef void  (APIENTRYP GPTEXFILTERFUNCSGIS)(GLenum  target, GLenum  filter, GLsizei  n, const GLfloat * weights);
// typedef void  (APIENTRYP GPTEXGENXOES)(GLenum  coord, GLenum  pname, GLfixed  param);
// typedef void  (APIENTRYP GPTEXGENXVOES)(GLenum  coord, GLenum  pname, const GLfixed * params);
// typedef void  (APIENTRYP GPTEXIMAGE1D)(GLenum  target, GLint  level, GLint  internalformat, GLsizei  width, GLint  border, GLenum  format, GLenum  type, const void * pixels);
// typedef void  (APIENTRYP GPTEXIMAGE2D)(GLenum  target, GLint  level, GLint  internalformat, GLsizei  width, GLsizei  height, GLint  border, GLenum  format, GLenum  type, const void * pixels);
// typedef void  (APIENTRYP GPTEXIMAGE2DMULTISAMPLE)(GLenum  target, GLsizei  samples, GLenum  internalformat, GLsizei  width, GLsizei  height, GLboolean  fixedsamplelocations);
// typedef void  (APIENTRYP GPTEXIMAGE2DMULTISAMPLECOVERAGENV)(GLenum  target, GLsizei  coverageSamples, GLsizei  colorSamples, GLint  internalFormat, GLsizei  width, GLsizei  height, GLboolean  fixedSampleLocations);
// typedef void  (APIENTRYP GPTEXIMAGE3D)(GLenum  target, GLint  level, GLint  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth, GLint  border, GLenum  format, GLenum  type, const void * pixels);
// typedef void  (APIENTRYP GPTEXIMAGE3DEXT)(GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth, GLint  border, GLenum  format, GLenum  type, const void * pixels);
// typedef void  (APIENTRYP GPTEXIMAGE3DMULTISAMPLE)(GLenum  target, GLsizei  samples, GLenum  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth, GLboolean  fixedsamplelocations);
// typedef void  (APIENTRYP GPTEXIMAGE3DMULTISAMPLECOVERAGENV)(GLenum  target, GLsizei  coverageSamples, GLsizei  colorSamples, GLint  internalFormat, GLsizei  width, GLsizei  height, GLsizei  depth, GLboolean  fixedSampleLocations);
// typedef void  (APIENTRYP GPTEXIMAGE4DSGIS)(GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth, GLsizei  size4d, GLint  border, GLenum  format, GLenum  type, const void * pixels);
// typedef void  (APIENTRYP GPTEXPAGECOMMITMENTARB)(GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLsizei  width, GLsizei  height, GLsizei  depth, GLboolean  resident);
// typedef void  (APIENTRYP GPTEXPARAMETERIIV)(GLenum  target, GLenum  pname, const GLint * params);
// typedef void  (APIENTRYP GPTEXPARAMETERIIVEXT)(GLenum  target, GLenum  pname, const GLint * params);
// typedef void  (APIENTRYP GPTEXPARAMETERIUIV)(GLenum  target, GLenum  pname, const GLuint * params);
// typedef void  (APIENTRYP GPTEXPARAMETERIUIVEXT)(GLenum  target, GLenum  pname, const GLuint * params);
// typedef void  (APIENTRYP GPTEXPARAMETERF)(GLenum  target, GLenum  pname, GLfloat  param);
// typedef void  (APIENTRYP GPTEXPARAMETERFV)(GLenum  target, GLenum  pname, const GLfloat * params);
// typedef void  (APIENTRYP GPTEXPARAMETERI)(GLenum  target, GLenum  pname, GLint  param);
// typedef void  (APIENTRYP GPTEXPARAMETERIV)(GLenum  target, GLenum  pname, const GLint * params);
// typedef void  (APIENTRYP GPTEXPARAMETERXOES)(GLenum  target, GLenum  pname, GLfixed  param);
// typedef void  (APIENTRYP GPTEXPARAMETERXVOES)(GLenum  target, GLenum  pname, const GLfixed * params);
// typedef void  (APIENTRYP GPTEXRENDERBUFFERNV)(GLenum  target, GLuint  renderbuffer);
// typedef void  (APIENTRYP GPTEXSTORAGE1D)(GLenum  target, GLsizei  levels, GLenum  internalformat, GLsizei  width);
// typedef void  (APIENTRYP GPTEXSTORAGE2D)(GLenum  target, GLsizei  levels, GLenum  internalformat, GLsizei  width, GLsizei  height);
// typedef void  (APIENTRYP GPTEXSTORAGE2DMULTISAMPLE)(GLenum  target, GLsizei  samples, GLenum  internalformat, GLsizei  width, GLsizei  height, GLboolean  fixedsamplelocations);
// typedef void  (APIENTRYP GPTEXSTORAGE3D)(GLenum  target, GLsizei  levels, GLenum  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth);
// typedef void  (APIENTRYP GPTEXSTORAGE3DMULTISAMPLE)(GLenum  target, GLsizei  samples, GLenum  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth, GLboolean  fixedsamplelocations);
// typedef void  (APIENTRYP GPTEXSTORAGESPARSEAMD)(GLenum  target, GLenum  internalFormat, GLsizei  width, GLsizei  height, GLsizei  depth, GLsizei  layers, GLbitfield  flags);
// typedef void  (APIENTRYP GPTEXSUBIMAGE1D)(GLenum  target, GLint  level, GLint  xoffset, GLsizei  width, GLenum  format, GLenum  type, const void * pixels);
// typedef void  (APIENTRYP GPTEXSUBIMAGE1DEXT)(GLenum  target, GLint  level, GLint  xoffset, GLsizei  width, GLenum  format, GLenum  type, const void * pixels);
// typedef void  (APIENTRYP GPTEXSUBIMAGE2D)(GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLsizei  width, GLsizei  height, GLenum  format, GLenum  type, const void * pixels);
// typedef void  (APIENTRYP GPTEXSUBIMAGE2DEXT)(GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLsizei  width, GLsizei  height, GLenum  format, GLenum  type, const void * pixels);
// typedef void  (APIENTRYP GPTEXSUBIMAGE3D)(GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLsizei  width, GLsizei  height, GLsizei  depth, GLenum  format, GLenum  type, const void * pixels);
// typedef void  (APIENTRYP GPTEXSUBIMAGE3DEXT)(GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLsizei  width, GLsizei  height, GLsizei  depth, GLenum  format, GLenum  type, const void * pixels);
// typedef void  (APIENTRYP GPTEXSUBIMAGE4DSGIS)(GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLint  woffset, GLsizei  width, GLsizei  height, GLsizei  depth, GLsizei  size4d, GLenum  format, GLenum  type, const void * pixels);
// typedef void  (APIENTRYP GPTEXTUREBARRIERNV)();
// typedef void  (APIENTRYP GPTEXTUREBUFFEREXT)(GLuint  texture, GLenum  target, GLenum  internalformat, GLuint  buffer);
// typedef void  (APIENTRYP GPTEXTUREBUFFERRANGEEXT)(GLuint  texture, GLenum  target, GLenum  internalformat, GLuint  buffer, GLintptr  offset, GLsizeiptr  size);
// typedef void  (APIENTRYP GPTEXTURECOLORMASKSGIS)(GLboolean  red, GLboolean  green, GLboolean  blue, GLboolean  alpha);
// typedef void  (APIENTRYP GPTEXTUREIMAGE1DEXT)(GLuint  texture, GLenum  target, GLint  level, GLint  internalformat, GLsizei  width, GLint  border, GLenum  format, GLenum  type, const void * pixels);
// typedef void  (APIENTRYP GPTEXTUREIMAGE2DEXT)(GLuint  texture, GLenum  target, GLint  level, GLint  internalformat, GLsizei  width, GLsizei  height, GLint  border, GLenum  format, GLenum  type, const void * pixels);
// typedef void  (APIENTRYP GPTEXTUREIMAGE2DMULTISAMPLECOVERAGENV)(GLuint  texture, GLenum  target, GLsizei  coverageSamples, GLsizei  colorSamples, GLint  internalFormat, GLsizei  width, GLsizei  height, GLboolean  fixedSampleLocations);
// typedef void  (APIENTRYP GPTEXTUREIMAGE2DMULTISAMPLENV)(GLuint  texture, GLenum  target, GLsizei  samples, GLint  internalFormat, GLsizei  width, GLsizei  height, GLboolean  fixedSampleLocations);
// typedef void  (APIENTRYP GPTEXTUREIMAGE3DEXT)(GLuint  texture, GLenum  target, GLint  level, GLint  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth, GLint  border, GLenum  format, GLenum  type, const void * pixels);
// typedef void  (APIENTRYP GPTEXTUREIMAGE3DMULTISAMPLECOVERAGENV)(GLuint  texture, GLenum  target, GLsizei  coverageSamples, GLsizei  colorSamples, GLint  internalFormat, GLsizei  width, GLsizei  height, GLsizei  depth, GLboolean  fixedSampleLocations);
// typedef void  (APIENTRYP GPTEXTUREIMAGE3DMULTISAMPLENV)(GLuint  texture, GLenum  target, GLsizei  samples, GLint  internalFormat, GLsizei  width, GLsizei  height, GLsizei  depth, GLboolean  fixedSampleLocations);
// typedef void  (APIENTRYP GPTEXTURELIGHTEXT)(GLenum  pname);
// typedef void  (APIENTRYP GPTEXTUREMATERIALEXT)(GLenum  face, GLenum  mode);
// typedef void  (APIENTRYP GPTEXTURENORMALEXT)(GLenum  mode);
// typedef void  (APIENTRYP GPTEXTUREPAGECOMMITMENTEXT)(GLuint  texture, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLsizei  width, GLsizei  height, GLsizei  depth, GLboolean  resident);
// typedef void  (APIENTRYP GPTEXTUREPARAMETERIIVEXT)(GLuint  texture, GLenum  target, GLenum  pname, const GLint * params);
// typedef void  (APIENTRYP GPTEXTUREPARAMETERIUIVEXT)(GLuint  texture, GLenum  target, GLenum  pname, const GLuint * params);
// typedef void  (APIENTRYP GPTEXTUREPARAMETERFEXT)(GLuint  texture, GLenum  target, GLenum  pname, GLfloat  param);
// typedef void  (APIENTRYP GPTEXTUREPARAMETERFVEXT)(GLuint  texture, GLenum  target, GLenum  pname, const GLfloat * params);
// typedef void  (APIENTRYP GPTEXTUREPARAMETERIEXT)(GLuint  texture, GLenum  target, GLenum  pname, GLint  param);
// typedef void  (APIENTRYP GPTEXTUREPARAMETERIVEXT)(GLuint  texture, GLenum  target, GLenum  pname, const GLint * params);
// typedef void  (APIENTRYP GPTEXTURERANGEAPPLE)(GLenum  target, GLsizei  length, const void * pointer);
// typedef void  (APIENTRYP GPTEXTURERENDERBUFFEREXT)(GLuint  texture, GLenum  target, GLuint  renderbuffer);
// typedef void  (APIENTRYP GPTEXTURESTORAGE1DEXT)(GLuint  texture, GLenum  target, GLsizei  levels, GLenum  internalformat, GLsizei  width);
// typedef void  (APIENTRYP GPTEXTURESTORAGE2DEXT)(GLuint  texture, GLenum  target, GLsizei  levels, GLenum  internalformat, GLsizei  width, GLsizei  height);
// typedef void  (APIENTRYP GPTEXTURESTORAGE2DMULTISAMPLEEXT)(GLuint  texture, GLenum  target, GLsizei  samples, GLenum  internalformat, GLsizei  width, GLsizei  height, GLboolean  fixedsamplelocations);
// typedef void  (APIENTRYP GPTEXTURESTORAGE3DEXT)(GLuint  texture, GLenum  target, GLsizei  levels, GLenum  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth);
// typedef void  (APIENTRYP GPTEXTURESTORAGE3DMULTISAMPLEEXT)(GLuint  texture, GLenum  target, GLsizei  samples, GLenum  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth, GLboolean  fixedsamplelocations);
// typedef void  (APIENTRYP GPTEXTURESTORAGESPARSEAMD)(GLuint  texture, GLenum  target, GLenum  internalFormat, GLsizei  width, GLsizei  height, GLsizei  depth, GLsizei  layers, GLbitfield  flags);
// typedef void  (APIENTRYP GPTEXTURESUBIMAGE1DEXT)(GLuint  texture, GLenum  target, GLint  level, GLint  xoffset, GLsizei  width, GLenum  format, GLenum  type, const void * pixels);
// typedef void  (APIENTRYP GPTEXTURESUBIMAGE2DEXT)(GLuint  texture, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLsizei  width, GLsizei  height, GLenum  format, GLenum  type, const void * pixels);
// typedef void  (APIENTRYP GPTEXTURESUBIMAGE3DEXT)(GLuint  texture, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLsizei  width, GLsizei  height, GLsizei  depth, GLenum  format, GLenum  type, const void * pixels);
// typedef void  (APIENTRYP GPTEXTUREVIEW)(GLuint  texture, GLenum  target, GLuint  origtexture, GLenum  internalformat, GLuint  minlevel, GLuint  numlevels, GLuint  minlayer, GLuint  numlayers);
// typedef void  (APIENTRYP GPTRACKMATRIXNV)(GLenum  target, GLuint  address, GLenum  matrix, GLenum  transform);
// typedef void  (APIENTRYP GPTRANSFORMFEEDBACKATTRIBSNV)(GLsizei  count, const GLint * attribs, GLenum  bufferMode);
// typedef void  (APIENTRYP GPTRANSFORMFEEDBACKSTREAMATTRIBSNV)(GLsizei  count, const GLint * attribs, GLsizei  nbuffers, const GLint * bufstreams, GLenum  bufferMode);
// typedef void  (APIENTRYP GPTRANSFORMFEEDBACKVARYINGS)(GLuint  program, GLsizei  count, const GLchar *const* varyings, GLenum  bufferMode);
// typedef void  (APIENTRYP GPTRANSFORMFEEDBACKVARYINGSEXT)(GLuint  program, GLsizei  count, const GLchar *const* varyings, GLenum  bufferMode);
// typedef void  (APIENTRYP GPTRANSFORMFEEDBACKVARYINGSNV)(GLuint  program, GLsizei  count, const GLint * locations, GLenum  bufferMode);
// typedef void  (APIENTRYP GPTRANSFORMPATHNV)(GLuint  resultPath, GLuint  srcPath, GLenum  transformType, const GLfloat * transformValues);
// typedef void  (APIENTRYP GPTRANSLATEXOES)(GLfixed  x, GLfixed  y, GLfixed  z);
// typedef void  (APIENTRYP GPUNIFORM1D)(GLint  location, GLdouble  x);
// typedef void  (APIENTRYP GPUNIFORM1DV)(GLint  location, GLsizei  count, const GLdouble * value);
// typedef void  (APIENTRYP GPUNIFORM1F)(GLint  location, GLfloat  v0);
// typedef void  (APIENTRYP GPUNIFORM1FARB)(GLint  location, GLfloat  v0);
// typedef void  (APIENTRYP GPUNIFORM1FV)(GLint  location, GLsizei  count, const GLfloat * value);
// typedef void  (APIENTRYP GPUNIFORM1FVARB)(GLint  location, GLsizei  count, const GLfloat * value);
// typedef void  (APIENTRYP GPUNIFORM1I)(GLint  location, GLint  v0);
// typedef void  (APIENTRYP GPUNIFORM1I64NV)(GLint  location, GLint64EXT  x);
// typedef void  (APIENTRYP GPUNIFORM1I64VNV)(GLint  location, GLsizei  count, const GLint64EXT * value);
// typedef void  (APIENTRYP GPUNIFORM1IARB)(GLint  location, GLint  v0);
// typedef void  (APIENTRYP GPUNIFORM1IV)(GLint  location, GLsizei  count, const GLint * value);
// typedef void  (APIENTRYP GPUNIFORM1IVARB)(GLint  location, GLsizei  count, const GLint * value);
// typedef void  (APIENTRYP GPUNIFORM1UI)(GLint  location, GLuint  v0);
// typedef void  (APIENTRYP GPUNIFORM1UI64NV)(GLint  location, GLuint64EXT  x);
// typedef void  (APIENTRYP GPUNIFORM1UI64VNV)(GLint  location, GLsizei  count, const GLuint64EXT * value);
// typedef void  (APIENTRYP GPUNIFORM1UIEXT)(GLint  location, GLuint  v0);
// typedef void  (APIENTRYP GPUNIFORM1UIV)(GLint  location, GLsizei  count, const GLuint * value);
// typedef void  (APIENTRYP GPUNIFORM1UIVEXT)(GLint  location, GLsizei  count, const GLuint * value);
// typedef void  (APIENTRYP GPUNIFORM2D)(GLint  location, GLdouble  x, GLdouble  y);
// typedef void  (APIENTRYP GPUNIFORM2DV)(GLint  location, GLsizei  count, const GLdouble * value);
// typedef void  (APIENTRYP GPUNIFORM2F)(GLint  location, GLfloat  v0, GLfloat  v1);
// typedef void  (APIENTRYP GPUNIFORM2FARB)(GLint  location, GLfloat  v0, GLfloat  v1);
// typedef void  (APIENTRYP GPUNIFORM2FV)(GLint  location, GLsizei  count, const GLfloat * value);
// typedef void  (APIENTRYP GPUNIFORM2FVARB)(GLint  location, GLsizei  count, const GLfloat * value);
// typedef void  (APIENTRYP GPUNIFORM2I)(GLint  location, GLint  v0, GLint  v1);
// typedef void  (APIENTRYP GPUNIFORM2I64NV)(GLint  location, GLint64EXT  x, GLint64EXT  y);
// typedef void  (APIENTRYP GPUNIFORM2I64VNV)(GLint  location, GLsizei  count, const GLint64EXT * value);
// typedef void  (APIENTRYP GPUNIFORM2IARB)(GLint  location, GLint  v0, GLint  v1);
// typedef void  (APIENTRYP GPUNIFORM2IV)(GLint  location, GLsizei  count, const GLint * value);
// typedef void  (APIENTRYP GPUNIFORM2IVARB)(GLint  location, GLsizei  count, const GLint * value);
// typedef void  (APIENTRYP GPUNIFORM2UI)(GLint  location, GLuint  v0, GLuint  v1);
// typedef void  (APIENTRYP GPUNIFORM2UI64NV)(GLint  location, GLuint64EXT  x, GLuint64EXT  y);
// typedef void  (APIENTRYP GPUNIFORM2UI64VNV)(GLint  location, GLsizei  count, const GLuint64EXT * value);
// typedef void  (APIENTRYP GPUNIFORM2UIEXT)(GLint  location, GLuint  v0, GLuint  v1);
// typedef void  (APIENTRYP GPUNIFORM2UIV)(GLint  location, GLsizei  count, const GLuint * value);
// typedef void  (APIENTRYP GPUNIFORM2UIVEXT)(GLint  location, GLsizei  count, const GLuint * value);
// typedef void  (APIENTRYP GPUNIFORM3D)(GLint  location, GLdouble  x, GLdouble  y, GLdouble  z);
// typedef void  (APIENTRYP GPUNIFORM3DV)(GLint  location, GLsizei  count, const GLdouble * value);
// typedef void  (APIENTRYP GPUNIFORM3F)(GLint  location, GLfloat  v0, GLfloat  v1, GLfloat  v2);
// typedef void  (APIENTRYP GPUNIFORM3FARB)(GLint  location, GLfloat  v0, GLfloat  v1, GLfloat  v2);
// typedef void  (APIENTRYP GPUNIFORM3FV)(GLint  location, GLsizei  count, const GLfloat * value);
// typedef void  (APIENTRYP GPUNIFORM3FVARB)(GLint  location, GLsizei  count, const GLfloat * value);
// typedef void  (APIENTRYP GPUNIFORM3I)(GLint  location, GLint  v0, GLint  v1, GLint  v2);
// typedef void  (APIENTRYP GPUNIFORM3I64NV)(GLint  location, GLint64EXT  x, GLint64EXT  y, GLint64EXT  z);
// typedef void  (APIENTRYP GPUNIFORM3I64VNV)(GLint  location, GLsizei  count, const GLint64EXT * value);
// typedef void  (APIENTRYP GPUNIFORM3IARB)(GLint  location, GLint  v0, GLint  v1, GLint  v2);
// typedef void  (APIENTRYP GPUNIFORM3IV)(GLint  location, GLsizei  count, const GLint * value);
// typedef void  (APIENTRYP GPUNIFORM3IVARB)(GLint  location, GLsizei  count, const GLint * value);
// typedef void  (APIENTRYP GPUNIFORM3UI)(GLint  location, GLuint  v0, GLuint  v1, GLuint  v2);
// typedef void  (APIENTRYP GPUNIFORM3UI64NV)(GLint  location, GLuint64EXT  x, GLuint64EXT  y, GLuint64EXT  z);
// typedef void  (APIENTRYP GPUNIFORM3UI64VNV)(GLint  location, GLsizei  count, const GLuint64EXT * value);
// typedef void  (APIENTRYP GPUNIFORM3UIEXT)(GLint  location, GLuint  v0, GLuint  v1, GLuint  v2);
// typedef void  (APIENTRYP GPUNIFORM3UIV)(GLint  location, GLsizei  count, const GLuint * value);
// typedef void  (APIENTRYP GPUNIFORM3UIVEXT)(GLint  location, GLsizei  count, const GLuint * value);
// typedef void  (APIENTRYP GPUNIFORM4D)(GLint  location, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w);
// typedef void  (APIENTRYP GPUNIFORM4DV)(GLint  location, GLsizei  count, const GLdouble * value);
// typedef void  (APIENTRYP GPUNIFORM4F)(GLint  location, GLfloat  v0, GLfloat  v1, GLfloat  v2, GLfloat  v3);
// typedef void  (APIENTRYP GPUNIFORM4FARB)(GLint  location, GLfloat  v0, GLfloat  v1, GLfloat  v2, GLfloat  v3);
// typedef void  (APIENTRYP GPUNIFORM4FV)(GLint  location, GLsizei  count, const GLfloat * value);
// typedef void  (APIENTRYP GPUNIFORM4FVARB)(GLint  location, GLsizei  count, const GLfloat * value);
// typedef void  (APIENTRYP GPUNIFORM4I)(GLint  location, GLint  v0, GLint  v1, GLint  v2, GLint  v3);
// typedef void  (APIENTRYP GPUNIFORM4I64NV)(GLint  location, GLint64EXT  x, GLint64EXT  y, GLint64EXT  z, GLint64EXT  w);
// typedef void  (APIENTRYP GPUNIFORM4I64VNV)(GLint  location, GLsizei  count, const GLint64EXT * value);
// typedef void  (APIENTRYP GPUNIFORM4IARB)(GLint  location, GLint  v0, GLint  v1, GLint  v2, GLint  v3);
// typedef void  (APIENTRYP GPUNIFORM4IV)(GLint  location, GLsizei  count, const GLint * value);
// typedef void  (APIENTRYP GPUNIFORM4IVARB)(GLint  location, GLsizei  count, const GLint * value);
// typedef void  (APIENTRYP GPUNIFORM4UI)(GLint  location, GLuint  v0, GLuint  v1, GLuint  v2, GLuint  v3);
// typedef void  (APIENTRYP GPUNIFORM4UI64NV)(GLint  location, GLuint64EXT  x, GLuint64EXT  y, GLuint64EXT  z, GLuint64EXT  w);
// typedef void  (APIENTRYP GPUNIFORM4UI64VNV)(GLint  location, GLsizei  count, const GLuint64EXT * value);
// typedef void  (APIENTRYP GPUNIFORM4UIEXT)(GLint  location, GLuint  v0, GLuint  v1, GLuint  v2, GLuint  v3);
// typedef void  (APIENTRYP GPUNIFORM4UIV)(GLint  location, GLsizei  count, const GLuint * value);
// typedef void  (APIENTRYP GPUNIFORM4UIVEXT)(GLint  location, GLsizei  count, const GLuint * value);
// typedef void  (APIENTRYP GPUNIFORMBLOCKBINDING)(GLuint  program, GLuint  uniformBlockIndex, GLuint  uniformBlockBinding);
// typedef void  (APIENTRYP GPUNIFORMBUFFEREXT)(GLuint  program, GLint  location, GLuint  buffer);
// typedef void  (APIENTRYP GPUNIFORMHANDLEUI64ARB)(GLint  location, GLuint64  value);
// typedef void  (APIENTRYP GPUNIFORMHANDLEUI64NV)(GLint  location, GLuint64  value);
// typedef void  (APIENTRYP GPUNIFORMHANDLEUI64VARB)(GLint  location, GLsizei  count, const GLuint64 * value);
// typedef void  (APIENTRYP GPUNIFORMHANDLEUI64VNV)(GLint  location, GLsizei  count, const GLuint64 * value);
// typedef void  (APIENTRYP GPUNIFORMMATRIX2DV)(GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
// typedef void  (APIENTRYP GPUNIFORMMATRIX2FV)(GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
// typedef void  (APIENTRYP GPUNIFORMMATRIX2FVARB)(GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
// typedef void  (APIENTRYP GPUNIFORMMATRIX2X3DV)(GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
// typedef void  (APIENTRYP GPUNIFORMMATRIX2X3FV)(GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
// typedef void  (APIENTRYP GPUNIFORMMATRIX2X4DV)(GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
// typedef void  (APIENTRYP GPUNIFORMMATRIX2X4FV)(GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
// typedef void  (APIENTRYP GPUNIFORMMATRIX3DV)(GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
// typedef void  (APIENTRYP GPUNIFORMMATRIX3FV)(GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
// typedef void  (APIENTRYP GPUNIFORMMATRIX3FVARB)(GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
// typedef void  (APIENTRYP GPUNIFORMMATRIX3X2DV)(GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
// typedef void  (APIENTRYP GPUNIFORMMATRIX3X2FV)(GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
// typedef void  (APIENTRYP GPUNIFORMMATRIX3X4DV)(GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
// typedef void  (APIENTRYP GPUNIFORMMATRIX3X4FV)(GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
// typedef void  (APIENTRYP GPUNIFORMMATRIX4DV)(GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
// typedef void  (APIENTRYP GPUNIFORMMATRIX4FV)(GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
// typedef void  (APIENTRYP GPUNIFORMMATRIX4FVARB)(GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
// typedef void  (APIENTRYP GPUNIFORMMATRIX4X2DV)(GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
// typedef void  (APIENTRYP GPUNIFORMMATRIX4X2FV)(GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
// typedef void  (APIENTRYP GPUNIFORMMATRIX4X3DV)(GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
// typedef void  (APIENTRYP GPUNIFORMMATRIX4X3FV)(GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
// typedef void  (APIENTRYP GPUNIFORMSUBROUTINESUIV)(GLenum  shadertype, GLsizei  count, const GLuint * indices);
// typedef void  (APIENTRYP GPUNIFORMUI64NV)(GLint  location, GLuint64EXT  value);
// typedef void  (APIENTRYP GPUNIFORMUI64VNV)(GLint  location, GLsizei  count, const GLuint64EXT * value);
// typedef void  (APIENTRYP GPUNLOCKARRAYSEXT)();
// typedef GLboolean  (APIENTRYP GPUNMAPBUFFER)(GLenum  target);
// typedef GLboolean  (APIENTRYP GPUNMAPBUFFERARB)(GLenum  target);
// typedef GLboolean  (APIENTRYP GPUNMAPNAMEDBUFFEREXT)(GLuint  buffer);
// typedef void  (APIENTRYP GPUNMAPOBJECTBUFFERATI)(GLuint  buffer);
// typedef void  (APIENTRYP GPUNMAPTEXTURE2DINTEL)(GLuint  texture, GLint  level);
// typedef void  (APIENTRYP GPUPDATEOBJECTBUFFERATI)(GLuint  buffer, GLuint  offset, GLsizei  size, const void * pointer, GLenum  preserve);
// typedef void  (APIENTRYP GPUSEPROGRAM)(GLuint  program);
// typedef void  (APIENTRYP GPUSEPROGRAMOBJECTARB)(GLhandleARB  programObj);
// typedef void  (APIENTRYP GPUSEPROGRAMSTAGES)(GLuint  pipeline, GLbitfield  stages, GLuint  program);
// typedef void  (APIENTRYP GPUSEPROGRAMSTAGESEXT)(GLuint  pipeline, GLbitfield  stages, GLuint  program);
// typedef void  (APIENTRYP GPUSESHADERPROGRAMEXT)(GLenum  type, GLuint  program);
// typedef void  (APIENTRYP GPVDPAUFININV)();
// typedef void  (APIENTRYP GPVDPAUGETSURFACEIVNV)(GLvdpauSurfaceNV  surface, GLenum  pname, GLsizei  bufSize, GLsizei * length, GLint * values);
// typedef void  (APIENTRYP GPVDPAUINITNV)(const void * vdpDevice, const void * getProcAddress);
// typedef GLboolean  (APIENTRYP GPVDPAUISSURFACENV)(GLvdpauSurfaceNV  surface);
// typedef void  (APIENTRYP GPVDPAUMAPSURFACESNV)(GLsizei  numSurfaces, const GLvdpauSurfaceNV * surfaces);
// typedef GLvdpauSurfaceNV  (APIENTRYP GPVDPAUREGISTEROUTPUTSURFACENV)(const void * vdpSurface, GLenum  target, GLsizei  numTextureNames, const GLuint * textureNames);
// typedef GLvdpauSurfaceNV  (APIENTRYP GPVDPAUREGISTERVIDEOSURFACENV)(const void * vdpSurface, GLenum  target, GLsizei  numTextureNames, const GLuint * textureNames);
// typedef void  (APIENTRYP GPVDPAUSURFACEACCESSNV)(GLvdpauSurfaceNV  surface, GLenum  access);
// typedef void  (APIENTRYP GPVDPAUUNMAPSURFACESNV)(GLsizei  numSurface, const GLvdpauSurfaceNV * surfaces);
// typedef void  (APIENTRYP GPVDPAUUNREGISTERSURFACENV)(GLvdpauSurfaceNV  surface);
// typedef void  (APIENTRYP GPVALIDATEPROGRAM)(GLuint  program);
// typedef void  (APIENTRYP GPVALIDATEPROGRAMARB)(GLhandleARB  programObj);
// typedef void  (APIENTRYP GPVALIDATEPROGRAMPIPELINE)(GLuint  pipeline);
// typedef void  (APIENTRYP GPVALIDATEPROGRAMPIPELINEEXT)(GLuint  pipeline);
// typedef void  (APIENTRYP GPVARIANTARRAYOBJECTATI)(GLuint  id, GLenum  type, GLsizei  stride, GLuint  buffer, GLuint  offset);
// typedef void  (APIENTRYP GPVARIANTPOINTEREXT)(GLuint  id, GLenum  type, GLuint  stride, const void * addr);
// typedef void  (APIENTRYP GPVARIANTBVEXT)(GLuint  id, const GLbyte * addr);
// typedef void  (APIENTRYP GPVARIANTDVEXT)(GLuint  id, const GLdouble * addr);
// typedef void  (APIENTRYP GPVARIANTFVEXT)(GLuint  id, const GLfloat * addr);
// typedef void  (APIENTRYP GPVARIANTIVEXT)(GLuint  id, const GLint * addr);
// typedef void  (APIENTRYP GPVARIANTSVEXT)(GLuint  id, const GLshort * addr);
// typedef void  (APIENTRYP GPVARIANTUBVEXT)(GLuint  id, const GLubyte * addr);
// typedef void  (APIENTRYP GPVARIANTUIVEXT)(GLuint  id, const GLuint * addr);
// typedef void  (APIENTRYP GPVARIANTUSVEXT)(GLuint  id, const GLushort * addr);
// typedef void  (APIENTRYP GPVERTEX2BOES)(GLbyte  x, GLbyte  y);
// typedef void  (APIENTRYP GPVERTEX2BVOES)(const GLbyte * coords);
// typedef void  (APIENTRYP GPVERTEX2HNV)(GLhalfNV  x, GLhalfNV  y);
// typedef void  (APIENTRYP GPVERTEX2HVNV)(const GLhalfNV * v);
// typedef void  (APIENTRYP GPVERTEX2XOES)(GLfixed  x);
// typedef void  (APIENTRYP GPVERTEX2XVOES)(const GLfixed * coords);
// typedef void  (APIENTRYP GPVERTEX3BOES)(GLbyte  x, GLbyte  y, GLbyte  z);
// typedef void  (APIENTRYP GPVERTEX3BVOES)(const GLbyte * coords);
// typedef void  (APIENTRYP GPVERTEX3HNV)(GLhalfNV  x, GLhalfNV  y, GLhalfNV  z);
// typedef void  (APIENTRYP GPVERTEX3HVNV)(const GLhalfNV * v);
// typedef void  (APIENTRYP GPVERTEX3XOES)(GLfixed  x, GLfixed  y);
// typedef void  (APIENTRYP GPVERTEX3XVOES)(const GLfixed * coords);
// typedef void  (APIENTRYP GPVERTEX4BOES)(GLbyte  x, GLbyte  y, GLbyte  z, GLbyte  w);
// typedef void  (APIENTRYP GPVERTEX4BVOES)(const GLbyte * coords);
// typedef void  (APIENTRYP GPVERTEX4HNV)(GLhalfNV  x, GLhalfNV  y, GLhalfNV  z, GLhalfNV  w);
// typedef void  (APIENTRYP GPVERTEX4HVNV)(const GLhalfNV * v);
// typedef void  (APIENTRYP GPVERTEX4XOES)(GLfixed  x, GLfixed  y, GLfixed  z);
// typedef void  (APIENTRYP GPVERTEX4XVOES)(const GLfixed * coords);
// typedef void  (APIENTRYP GPVERTEXARRAYBINDVERTEXBUFFEREXT)(GLuint  vaobj, GLuint  bindingindex, GLuint  buffer, GLintptr  offset, GLsizei  stride);
// typedef void  (APIENTRYP GPVERTEXARRAYCOLOROFFSETEXT)(GLuint  vaobj, GLuint  buffer, GLint  size, GLenum  type, GLsizei  stride, GLintptr  offset);
// typedef void  (APIENTRYP GPVERTEXARRAYEDGEFLAGOFFSETEXT)(GLuint  vaobj, GLuint  buffer, GLsizei  stride, GLintptr  offset);
// typedef void  (APIENTRYP GPVERTEXARRAYFOGCOORDOFFSETEXT)(GLuint  vaobj, GLuint  buffer, GLenum  type, GLsizei  stride, GLintptr  offset);
// typedef void  (APIENTRYP GPVERTEXARRAYINDEXOFFSETEXT)(GLuint  vaobj, GLuint  buffer, GLenum  type, GLsizei  stride, GLintptr  offset);
// typedef void  (APIENTRYP GPVERTEXARRAYMULTITEXCOORDOFFSETEXT)(GLuint  vaobj, GLuint  buffer, GLenum  texunit, GLint  size, GLenum  type, GLsizei  stride, GLintptr  offset);
// typedef void  (APIENTRYP GPVERTEXARRAYNORMALOFFSETEXT)(GLuint  vaobj, GLuint  buffer, GLenum  type, GLsizei  stride, GLintptr  offset);
// typedef void  (APIENTRYP GPVERTEXARRAYPARAMETERIAPPLE)(GLenum  pname, GLint  param);
// typedef void  (APIENTRYP GPVERTEXARRAYRANGEAPPLE)(GLsizei  length, void * pointer);
// typedef void  (APIENTRYP GPVERTEXARRAYRANGENV)(GLsizei  length, const void * pointer);
// typedef void  (APIENTRYP GPVERTEXARRAYSECONDARYCOLOROFFSETEXT)(GLuint  vaobj, GLuint  buffer, GLint  size, GLenum  type, GLsizei  stride, GLintptr  offset);
// typedef void  (APIENTRYP GPVERTEXARRAYTEXCOORDOFFSETEXT)(GLuint  vaobj, GLuint  buffer, GLint  size, GLenum  type, GLsizei  stride, GLintptr  offset);
// typedef void  (APIENTRYP GPVERTEXARRAYVERTEXATTRIBBINDINGEXT)(GLuint  vaobj, GLuint  attribindex, GLuint  bindingindex);
// typedef void  (APIENTRYP GPVERTEXARRAYVERTEXATTRIBDIVISOREXT)(GLuint  vaobj, GLuint  index, GLuint  divisor);
// typedef void  (APIENTRYP GPVERTEXARRAYVERTEXATTRIBFORMATEXT)(GLuint  vaobj, GLuint  attribindex, GLint  size, GLenum  type, GLboolean  normalized, GLuint  relativeoffset);
// typedef void  (APIENTRYP GPVERTEXARRAYVERTEXATTRIBIFORMATEXT)(GLuint  vaobj, GLuint  attribindex, GLint  size, GLenum  type, GLuint  relativeoffset);
// typedef void  (APIENTRYP GPVERTEXARRAYVERTEXATTRIBIOFFSETEXT)(GLuint  vaobj, GLuint  buffer, GLuint  index, GLint  size, GLenum  type, GLsizei  stride, GLintptr  offset);
// typedef void  (APIENTRYP GPVERTEXARRAYVERTEXATTRIBLFORMATEXT)(GLuint  vaobj, GLuint  attribindex, GLint  size, GLenum  type, GLuint  relativeoffset);
// typedef void  (APIENTRYP GPVERTEXARRAYVERTEXATTRIBLOFFSETEXT)(GLuint  vaobj, GLuint  buffer, GLuint  index, GLint  size, GLenum  type, GLsizei  stride, GLintptr  offset);
// typedef void  (APIENTRYP GPVERTEXARRAYVERTEXATTRIBOFFSETEXT)(GLuint  vaobj, GLuint  buffer, GLuint  index, GLint  size, GLenum  type, GLboolean  normalized, GLsizei  stride, GLintptr  offset);
// typedef void  (APIENTRYP GPVERTEXARRAYVERTEXBINDINGDIVISOREXT)(GLuint  vaobj, GLuint  bindingindex, GLuint  divisor);
// typedef void  (APIENTRYP GPVERTEXARRAYVERTEXOFFSETEXT)(GLuint  vaobj, GLuint  buffer, GLint  size, GLenum  type, GLsizei  stride, GLintptr  offset);
// typedef void  (APIENTRYP GPVERTEXATTRIB1D)(GLuint  index, GLdouble  x);
// typedef void  (APIENTRYP GPVERTEXATTRIB1DARB)(GLuint  index, GLdouble  x);
// typedef void  (APIENTRYP GPVERTEXATTRIB1DNV)(GLuint  index, GLdouble  x);
// typedef void  (APIENTRYP GPVERTEXATTRIB1DV)(GLuint  index, const GLdouble * v);
// typedef void  (APIENTRYP GPVERTEXATTRIB1DVARB)(GLuint  index, const GLdouble * v);
// typedef void  (APIENTRYP GPVERTEXATTRIB1DVNV)(GLuint  index, const GLdouble * v);
// typedef void  (APIENTRYP GPVERTEXATTRIB1F)(GLuint  index, GLfloat  x);
// typedef void  (APIENTRYP GPVERTEXATTRIB1FARB)(GLuint  index, GLfloat  x);
// typedef void  (APIENTRYP GPVERTEXATTRIB1FNV)(GLuint  index, GLfloat  x);
// typedef void  (APIENTRYP GPVERTEXATTRIB1FV)(GLuint  index, const GLfloat * v);
// typedef void  (APIENTRYP GPVERTEXATTRIB1FVARB)(GLuint  index, const GLfloat * v);
// typedef void  (APIENTRYP GPVERTEXATTRIB1FVNV)(GLuint  index, const GLfloat * v);
// typedef void  (APIENTRYP GPVERTEXATTRIB1HNV)(GLuint  index, GLhalfNV  x);
// typedef void  (APIENTRYP GPVERTEXATTRIB1HVNV)(GLuint  index, const GLhalfNV * v);
// typedef void  (APIENTRYP GPVERTEXATTRIB1S)(GLuint  index, GLshort  x);
// typedef void  (APIENTRYP GPVERTEXATTRIB1SARB)(GLuint  index, GLshort  x);
// typedef void  (APIENTRYP GPVERTEXATTRIB1SNV)(GLuint  index, GLshort  x);
// typedef void  (APIENTRYP GPVERTEXATTRIB1SV)(GLuint  index, const GLshort * v);
// typedef void  (APIENTRYP GPVERTEXATTRIB1SVARB)(GLuint  index, const GLshort * v);
// typedef void  (APIENTRYP GPVERTEXATTRIB1SVNV)(GLuint  index, const GLshort * v);
// typedef void  (APIENTRYP GPVERTEXATTRIB2D)(GLuint  index, GLdouble  x, GLdouble  y);
// typedef void  (APIENTRYP GPVERTEXATTRIB2DARB)(GLuint  index, GLdouble  x, GLdouble  y);
// typedef void  (APIENTRYP GPVERTEXATTRIB2DNV)(GLuint  index, GLdouble  x, GLdouble  y);
// typedef void  (APIENTRYP GPVERTEXATTRIB2DV)(GLuint  index, const GLdouble * v);
// typedef void  (APIENTRYP GPVERTEXATTRIB2DVARB)(GLuint  index, const GLdouble * v);
// typedef void  (APIENTRYP GPVERTEXATTRIB2DVNV)(GLuint  index, const GLdouble * v);
// typedef void  (APIENTRYP GPVERTEXATTRIB2F)(GLuint  index, GLfloat  x, GLfloat  y);
// typedef void  (APIENTRYP GPVERTEXATTRIB2FARB)(GLuint  index, GLfloat  x, GLfloat  y);
// typedef void  (APIENTRYP GPVERTEXATTRIB2FNV)(GLuint  index, GLfloat  x, GLfloat  y);
// typedef void  (APIENTRYP GPVERTEXATTRIB2FV)(GLuint  index, const GLfloat * v);
// typedef void  (APIENTRYP GPVERTEXATTRIB2FVARB)(GLuint  index, const GLfloat * v);
// typedef void  (APIENTRYP GPVERTEXATTRIB2FVNV)(GLuint  index, const GLfloat * v);
// typedef void  (APIENTRYP GPVERTEXATTRIB2HNV)(GLuint  index, GLhalfNV  x, GLhalfNV  y);
// typedef void  (APIENTRYP GPVERTEXATTRIB2HVNV)(GLuint  index, const GLhalfNV * v);
// typedef void  (APIENTRYP GPVERTEXATTRIB2S)(GLuint  index, GLshort  x, GLshort  y);
// typedef void  (APIENTRYP GPVERTEXATTRIB2SARB)(GLuint  index, GLshort  x, GLshort  y);
// typedef void  (APIENTRYP GPVERTEXATTRIB2SNV)(GLuint  index, GLshort  x, GLshort  y);
// typedef void  (APIENTRYP GPVERTEXATTRIB2SV)(GLuint  index, const GLshort * v);
// typedef void  (APIENTRYP GPVERTEXATTRIB2SVARB)(GLuint  index, const GLshort * v);
// typedef void  (APIENTRYP GPVERTEXATTRIB2SVNV)(GLuint  index, const GLshort * v);
// typedef void  (APIENTRYP GPVERTEXATTRIB3D)(GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z);
// typedef void  (APIENTRYP GPVERTEXATTRIB3DARB)(GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z);
// typedef void  (APIENTRYP GPVERTEXATTRIB3DNV)(GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z);
// typedef void  (APIENTRYP GPVERTEXATTRIB3DV)(GLuint  index, const GLdouble * v);
// typedef void  (APIENTRYP GPVERTEXATTRIB3DVARB)(GLuint  index, const GLdouble * v);
// typedef void  (APIENTRYP GPVERTEXATTRIB3DVNV)(GLuint  index, const GLdouble * v);
// typedef void  (APIENTRYP GPVERTEXATTRIB3F)(GLuint  index, GLfloat  x, GLfloat  y, GLfloat  z);
// typedef void  (APIENTRYP GPVERTEXATTRIB3FARB)(GLuint  index, GLfloat  x, GLfloat  y, GLfloat  z);
// typedef void  (APIENTRYP GPVERTEXATTRIB3FNV)(GLuint  index, GLfloat  x, GLfloat  y, GLfloat  z);
// typedef void  (APIENTRYP GPVERTEXATTRIB3FV)(GLuint  index, const GLfloat * v);
// typedef void  (APIENTRYP GPVERTEXATTRIB3FVARB)(GLuint  index, const GLfloat * v);
// typedef void  (APIENTRYP GPVERTEXATTRIB3FVNV)(GLuint  index, const GLfloat * v);
// typedef void  (APIENTRYP GPVERTEXATTRIB3HNV)(GLuint  index, GLhalfNV  x, GLhalfNV  y, GLhalfNV  z);
// typedef void  (APIENTRYP GPVERTEXATTRIB3HVNV)(GLuint  index, const GLhalfNV * v);
// typedef void  (APIENTRYP GPVERTEXATTRIB3S)(GLuint  index, GLshort  x, GLshort  y, GLshort  z);
// typedef void  (APIENTRYP GPVERTEXATTRIB3SARB)(GLuint  index, GLshort  x, GLshort  y, GLshort  z);
// typedef void  (APIENTRYP GPVERTEXATTRIB3SNV)(GLuint  index, GLshort  x, GLshort  y, GLshort  z);
// typedef void  (APIENTRYP GPVERTEXATTRIB3SV)(GLuint  index, const GLshort * v);
// typedef void  (APIENTRYP GPVERTEXATTRIB3SVARB)(GLuint  index, const GLshort * v);
// typedef void  (APIENTRYP GPVERTEXATTRIB3SVNV)(GLuint  index, const GLshort * v);
// typedef void  (APIENTRYP GPVERTEXATTRIB4NBV)(GLuint  index, const GLbyte * v);
// typedef void  (APIENTRYP GPVERTEXATTRIB4NBVARB)(GLuint  index, const GLbyte * v);
// typedef void  (APIENTRYP GPVERTEXATTRIB4NIV)(GLuint  index, const GLint * v);
// typedef void  (APIENTRYP GPVERTEXATTRIB4NIVARB)(GLuint  index, const GLint * v);
// typedef void  (APIENTRYP GPVERTEXATTRIB4NSV)(GLuint  index, const GLshort * v);
// typedef void  (APIENTRYP GPVERTEXATTRIB4NSVARB)(GLuint  index, const GLshort * v);
// typedef void  (APIENTRYP GPVERTEXATTRIB4NUB)(GLuint  index, GLubyte  x, GLubyte  y, GLubyte  z, GLubyte  w);
// typedef void  (APIENTRYP GPVERTEXATTRIB4NUBARB)(GLuint  index, GLubyte  x, GLubyte  y, GLubyte  z, GLubyte  w);
// typedef void  (APIENTRYP GPVERTEXATTRIB4NUBV)(GLuint  index, const GLubyte * v);
// typedef void  (APIENTRYP GPVERTEXATTRIB4NUBVARB)(GLuint  index, const GLubyte * v);
// typedef void  (APIENTRYP GPVERTEXATTRIB4NUIV)(GLuint  index, const GLuint * v);
// typedef void  (APIENTRYP GPVERTEXATTRIB4NUIVARB)(GLuint  index, const GLuint * v);
// typedef void  (APIENTRYP GPVERTEXATTRIB4NUSV)(GLuint  index, const GLushort * v);
// typedef void  (APIENTRYP GPVERTEXATTRIB4NUSVARB)(GLuint  index, const GLushort * v);
// typedef void  (APIENTRYP GPVERTEXATTRIB4BV)(GLuint  index, const GLbyte * v);
// typedef void  (APIENTRYP GPVERTEXATTRIB4BVARB)(GLuint  index, const GLbyte * v);
// typedef void  (APIENTRYP GPVERTEXATTRIB4D)(GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w);
// typedef void  (APIENTRYP GPVERTEXATTRIB4DARB)(GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w);
// typedef void  (APIENTRYP GPVERTEXATTRIB4DNV)(GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w);
// typedef void  (APIENTRYP GPVERTEXATTRIB4DV)(GLuint  index, const GLdouble * v);
// typedef void  (APIENTRYP GPVERTEXATTRIB4DVARB)(GLuint  index, const GLdouble * v);
// typedef void  (APIENTRYP GPVERTEXATTRIB4DVNV)(GLuint  index, const GLdouble * v);
// typedef void  (APIENTRYP GPVERTEXATTRIB4F)(GLuint  index, GLfloat  x, GLfloat  y, GLfloat  z, GLfloat  w);
// typedef void  (APIENTRYP GPVERTEXATTRIB4FARB)(GLuint  index, GLfloat  x, GLfloat  y, GLfloat  z, GLfloat  w);
// typedef void  (APIENTRYP GPVERTEXATTRIB4FNV)(GLuint  index, GLfloat  x, GLfloat  y, GLfloat  z, GLfloat  w);
// typedef void  (APIENTRYP GPVERTEXATTRIB4FV)(GLuint  index, const GLfloat * v);
// typedef void  (APIENTRYP GPVERTEXATTRIB4FVARB)(GLuint  index, const GLfloat * v);
// typedef void  (APIENTRYP GPVERTEXATTRIB4FVNV)(GLuint  index, const GLfloat * v);
// typedef void  (APIENTRYP GPVERTEXATTRIB4HNV)(GLuint  index, GLhalfNV  x, GLhalfNV  y, GLhalfNV  z, GLhalfNV  w);
// typedef void  (APIENTRYP GPVERTEXATTRIB4HVNV)(GLuint  index, const GLhalfNV * v);
// typedef void  (APIENTRYP GPVERTEXATTRIB4IV)(GLuint  index, const GLint * v);
// typedef void  (APIENTRYP GPVERTEXATTRIB4IVARB)(GLuint  index, const GLint * v);
// typedef void  (APIENTRYP GPVERTEXATTRIB4S)(GLuint  index, GLshort  x, GLshort  y, GLshort  z, GLshort  w);
// typedef void  (APIENTRYP GPVERTEXATTRIB4SARB)(GLuint  index, GLshort  x, GLshort  y, GLshort  z, GLshort  w);
// typedef void  (APIENTRYP GPVERTEXATTRIB4SNV)(GLuint  index, GLshort  x, GLshort  y, GLshort  z, GLshort  w);
// typedef void  (APIENTRYP GPVERTEXATTRIB4SV)(GLuint  index, const GLshort * v);
// typedef void  (APIENTRYP GPVERTEXATTRIB4SVARB)(GLuint  index, const GLshort * v);
// typedef void  (APIENTRYP GPVERTEXATTRIB4SVNV)(GLuint  index, const GLshort * v);
// typedef void  (APIENTRYP GPVERTEXATTRIB4UBNV)(GLuint  index, GLubyte  x, GLubyte  y, GLubyte  z, GLubyte  w);
// typedef void  (APIENTRYP GPVERTEXATTRIB4UBV)(GLuint  index, const GLubyte * v);
// typedef void  (APIENTRYP GPVERTEXATTRIB4UBVARB)(GLuint  index, const GLubyte * v);
// typedef void  (APIENTRYP GPVERTEXATTRIB4UBVNV)(GLuint  index, const GLubyte * v);
// typedef void  (APIENTRYP GPVERTEXATTRIB4UIV)(GLuint  index, const GLuint * v);
// typedef void  (APIENTRYP GPVERTEXATTRIB4UIVARB)(GLuint  index, const GLuint * v);
// typedef void  (APIENTRYP GPVERTEXATTRIB4USV)(GLuint  index, const GLushort * v);
// typedef void  (APIENTRYP GPVERTEXATTRIB4USVARB)(GLuint  index, const GLushort * v);
// typedef void  (APIENTRYP GPVERTEXATTRIBARRAYOBJECTATI)(GLuint  index, GLint  size, GLenum  type, GLboolean  normalized, GLsizei  stride, GLuint  buffer, GLuint  offset);
// typedef void  (APIENTRYP GPVERTEXATTRIBBINDING)(GLuint  attribindex, GLuint  bindingindex);
// typedef void  (APIENTRYP GPVERTEXATTRIBDIVISOR)(GLuint  index, GLuint  divisor);
// typedef void  (APIENTRYP GPVERTEXATTRIBDIVISORARB)(GLuint  index, GLuint  divisor);
// typedef void  (APIENTRYP GPVERTEXATTRIBFORMAT)(GLuint  attribindex, GLint  size, GLenum  type, GLboolean  normalized, GLuint  relativeoffset);
// typedef void  (APIENTRYP GPVERTEXATTRIBFORMATNV)(GLuint  index, GLint  size, GLenum  type, GLboolean  normalized, GLsizei  stride);
// typedef void  (APIENTRYP GPVERTEXATTRIBI1I)(GLuint  index, GLint  x);
// typedef void  (APIENTRYP GPVERTEXATTRIBI1IEXT)(GLuint  index, GLint  x);
// typedef void  (APIENTRYP GPVERTEXATTRIBI1IV)(GLuint  index, const GLint * v);
// typedef void  (APIENTRYP GPVERTEXATTRIBI1IVEXT)(GLuint  index, const GLint * v);
// typedef void  (APIENTRYP GPVERTEXATTRIBI1UI)(GLuint  index, GLuint  x);
// typedef void  (APIENTRYP GPVERTEXATTRIBI1UIEXT)(GLuint  index, GLuint  x);
// typedef void  (APIENTRYP GPVERTEXATTRIBI1UIV)(GLuint  index, const GLuint * v);
// typedef void  (APIENTRYP GPVERTEXATTRIBI1UIVEXT)(GLuint  index, const GLuint * v);
// typedef void  (APIENTRYP GPVERTEXATTRIBI2I)(GLuint  index, GLint  x, GLint  y);
// typedef void  (APIENTRYP GPVERTEXATTRIBI2IEXT)(GLuint  index, GLint  x, GLint  y);
// typedef void  (APIENTRYP GPVERTEXATTRIBI2IV)(GLuint  index, const GLint * v);
// typedef void  (APIENTRYP GPVERTEXATTRIBI2IVEXT)(GLuint  index, const GLint * v);
// typedef void  (APIENTRYP GPVERTEXATTRIBI2UI)(GLuint  index, GLuint  x, GLuint  y);
// typedef void  (APIENTRYP GPVERTEXATTRIBI2UIEXT)(GLuint  index, GLuint  x, GLuint  y);
// typedef void  (APIENTRYP GPVERTEXATTRIBI2UIV)(GLuint  index, const GLuint * v);
// typedef void  (APIENTRYP GPVERTEXATTRIBI2UIVEXT)(GLuint  index, const GLuint * v);
// typedef void  (APIENTRYP GPVERTEXATTRIBI3I)(GLuint  index, GLint  x, GLint  y, GLint  z);
// typedef void  (APIENTRYP GPVERTEXATTRIBI3IEXT)(GLuint  index, GLint  x, GLint  y, GLint  z);
// typedef void  (APIENTRYP GPVERTEXATTRIBI3IV)(GLuint  index, const GLint * v);
// typedef void  (APIENTRYP GPVERTEXATTRIBI3IVEXT)(GLuint  index, const GLint * v);
// typedef void  (APIENTRYP GPVERTEXATTRIBI3UI)(GLuint  index, GLuint  x, GLuint  y, GLuint  z);
// typedef void  (APIENTRYP GPVERTEXATTRIBI3UIEXT)(GLuint  index, GLuint  x, GLuint  y, GLuint  z);
// typedef void  (APIENTRYP GPVERTEXATTRIBI3UIV)(GLuint  index, const GLuint * v);
// typedef void  (APIENTRYP GPVERTEXATTRIBI3UIVEXT)(GLuint  index, const GLuint * v);
// typedef void  (APIENTRYP GPVERTEXATTRIBI4BV)(GLuint  index, const GLbyte * v);
// typedef void  (APIENTRYP GPVERTEXATTRIBI4BVEXT)(GLuint  index, const GLbyte * v);
// typedef void  (APIENTRYP GPVERTEXATTRIBI4I)(GLuint  index, GLint  x, GLint  y, GLint  z, GLint  w);
// typedef void  (APIENTRYP GPVERTEXATTRIBI4IEXT)(GLuint  index, GLint  x, GLint  y, GLint  z, GLint  w);
// typedef void  (APIENTRYP GPVERTEXATTRIBI4IV)(GLuint  index, const GLint * v);
// typedef void  (APIENTRYP GPVERTEXATTRIBI4IVEXT)(GLuint  index, const GLint * v);
// typedef void  (APIENTRYP GPVERTEXATTRIBI4SV)(GLuint  index, const GLshort * v);
// typedef void  (APIENTRYP GPVERTEXATTRIBI4SVEXT)(GLuint  index, const GLshort * v);
// typedef void  (APIENTRYP GPVERTEXATTRIBI4UBV)(GLuint  index, const GLubyte * v);
// typedef void  (APIENTRYP GPVERTEXATTRIBI4UBVEXT)(GLuint  index, const GLubyte * v);
// typedef void  (APIENTRYP GPVERTEXATTRIBI4UI)(GLuint  index, GLuint  x, GLuint  y, GLuint  z, GLuint  w);
// typedef void  (APIENTRYP GPVERTEXATTRIBI4UIEXT)(GLuint  index, GLuint  x, GLuint  y, GLuint  z, GLuint  w);
// typedef void  (APIENTRYP GPVERTEXATTRIBI4UIV)(GLuint  index, const GLuint * v);
// typedef void  (APIENTRYP GPVERTEXATTRIBI4UIVEXT)(GLuint  index, const GLuint * v);
// typedef void  (APIENTRYP GPVERTEXATTRIBI4USV)(GLuint  index, const GLushort * v);
// typedef void  (APIENTRYP GPVERTEXATTRIBI4USVEXT)(GLuint  index, const GLushort * v);
// typedef void  (APIENTRYP GPVERTEXATTRIBIFORMAT)(GLuint  attribindex, GLint  size, GLenum  type, GLuint  relativeoffset);
// typedef void  (APIENTRYP GPVERTEXATTRIBIFORMATNV)(GLuint  index, GLint  size, GLenum  type, GLsizei  stride);
// typedef void  (APIENTRYP GPVERTEXATTRIBIPOINTER)(GLuint  index, GLint  size, GLenum  type, GLsizei  stride, const void * pointer);
// typedef void  (APIENTRYP GPVERTEXATTRIBIPOINTEREXT)(GLuint  index, GLint  size, GLenum  type, GLsizei  stride, const void * pointer);
// typedef void  (APIENTRYP GPVERTEXATTRIBL1D)(GLuint  index, GLdouble  x);
// typedef void  (APIENTRYP GPVERTEXATTRIBL1DEXT)(GLuint  index, GLdouble  x);
// typedef void  (APIENTRYP GPVERTEXATTRIBL1DV)(GLuint  index, const GLdouble * v);
// typedef void  (APIENTRYP GPVERTEXATTRIBL1DVEXT)(GLuint  index, const GLdouble * v);
// typedef void  (APIENTRYP GPVERTEXATTRIBL1I64NV)(GLuint  index, GLint64EXT  x);
// typedef void  (APIENTRYP GPVERTEXATTRIBL1I64VNV)(GLuint  index, const GLint64EXT * v);
// typedef void  (APIENTRYP GPVERTEXATTRIBL1UI64ARB)(GLuint  index, GLuint64EXT  x);
// typedef void  (APIENTRYP GPVERTEXATTRIBL1UI64NV)(GLuint  index, GLuint64EXT  x);
// typedef void  (APIENTRYP GPVERTEXATTRIBL1UI64VARB)(GLuint  index, const GLuint64EXT * v);
// typedef void  (APIENTRYP GPVERTEXATTRIBL1UI64VNV)(GLuint  index, const GLuint64EXT * v);
// typedef void  (APIENTRYP GPVERTEXATTRIBL2D)(GLuint  index, GLdouble  x, GLdouble  y);
// typedef void  (APIENTRYP GPVERTEXATTRIBL2DEXT)(GLuint  index, GLdouble  x, GLdouble  y);
// typedef void  (APIENTRYP GPVERTEXATTRIBL2DV)(GLuint  index, const GLdouble * v);
// typedef void  (APIENTRYP GPVERTEXATTRIBL2DVEXT)(GLuint  index, const GLdouble * v);
// typedef void  (APIENTRYP GPVERTEXATTRIBL2I64NV)(GLuint  index, GLint64EXT  x, GLint64EXT  y);
// typedef void  (APIENTRYP GPVERTEXATTRIBL2I64VNV)(GLuint  index, const GLint64EXT * v);
// typedef void  (APIENTRYP GPVERTEXATTRIBL2UI64NV)(GLuint  index, GLuint64EXT  x, GLuint64EXT  y);
// typedef void  (APIENTRYP GPVERTEXATTRIBL2UI64VNV)(GLuint  index, const GLuint64EXT * v);
// typedef void  (APIENTRYP GPVERTEXATTRIBL3D)(GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z);
// typedef void  (APIENTRYP GPVERTEXATTRIBL3DEXT)(GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z);
// typedef void  (APIENTRYP GPVERTEXATTRIBL3DV)(GLuint  index, const GLdouble * v);
// typedef void  (APIENTRYP GPVERTEXATTRIBL3DVEXT)(GLuint  index, const GLdouble * v);
// typedef void  (APIENTRYP GPVERTEXATTRIBL3I64NV)(GLuint  index, GLint64EXT  x, GLint64EXT  y, GLint64EXT  z);
// typedef void  (APIENTRYP GPVERTEXATTRIBL3I64VNV)(GLuint  index, const GLint64EXT * v);
// typedef void  (APIENTRYP GPVERTEXATTRIBL3UI64NV)(GLuint  index, GLuint64EXT  x, GLuint64EXT  y, GLuint64EXT  z);
// typedef void  (APIENTRYP GPVERTEXATTRIBL3UI64VNV)(GLuint  index, const GLuint64EXT * v);
// typedef void  (APIENTRYP GPVERTEXATTRIBL4D)(GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w);
// typedef void  (APIENTRYP GPVERTEXATTRIBL4DEXT)(GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w);
// typedef void  (APIENTRYP GPVERTEXATTRIBL4DV)(GLuint  index, const GLdouble * v);
// typedef void  (APIENTRYP GPVERTEXATTRIBL4DVEXT)(GLuint  index, const GLdouble * v);
// typedef void  (APIENTRYP GPVERTEXATTRIBL4I64NV)(GLuint  index, GLint64EXT  x, GLint64EXT  y, GLint64EXT  z, GLint64EXT  w);
// typedef void  (APIENTRYP GPVERTEXATTRIBL4I64VNV)(GLuint  index, const GLint64EXT * v);
// typedef void  (APIENTRYP GPVERTEXATTRIBL4UI64NV)(GLuint  index, GLuint64EXT  x, GLuint64EXT  y, GLuint64EXT  z, GLuint64EXT  w);
// typedef void  (APIENTRYP GPVERTEXATTRIBL4UI64VNV)(GLuint  index, const GLuint64EXT * v);
// typedef void  (APIENTRYP GPVERTEXATTRIBLFORMAT)(GLuint  attribindex, GLint  size, GLenum  type, GLuint  relativeoffset);
// typedef void  (APIENTRYP GPVERTEXATTRIBLFORMATNV)(GLuint  index, GLint  size, GLenum  type, GLsizei  stride);
// typedef void  (APIENTRYP GPVERTEXATTRIBLPOINTER)(GLuint  index, GLint  size, GLenum  type, GLsizei  stride, const void * pointer);
// typedef void  (APIENTRYP GPVERTEXATTRIBLPOINTEREXT)(GLuint  index, GLint  size, GLenum  type, GLsizei  stride, const void * pointer);
// typedef void  (APIENTRYP GPVERTEXATTRIBP1UI)(GLuint  index, GLenum  type, GLboolean  normalized, GLuint  value);
// typedef void  (APIENTRYP GPVERTEXATTRIBP1UIV)(GLuint  index, GLenum  type, GLboolean  normalized, const GLuint * value);
// typedef void  (APIENTRYP GPVERTEXATTRIBP2UI)(GLuint  index, GLenum  type, GLboolean  normalized, GLuint  value);
// typedef void  (APIENTRYP GPVERTEXATTRIBP2UIV)(GLuint  index, GLenum  type, GLboolean  normalized, const GLuint * value);
// typedef void  (APIENTRYP GPVERTEXATTRIBP3UI)(GLuint  index, GLenum  type, GLboolean  normalized, GLuint  value);
// typedef void  (APIENTRYP GPVERTEXATTRIBP3UIV)(GLuint  index, GLenum  type, GLboolean  normalized, const GLuint * value);
// typedef void  (APIENTRYP GPVERTEXATTRIBP4UI)(GLuint  index, GLenum  type, GLboolean  normalized, GLuint  value);
// typedef void  (APIENTRYP GPVERTEXATTRIBP4UIV)(GLuint  index, GLenum  type, GLboolean  normalized, const GLuint * value);
// typedef void  (APIENTRYP GPVERTEXATTRIBPARAMETERIAMD)(GLuint  index, GLenum  pname, GLint  param);
// typedef void  (APIENTRYP GPVERTEXATTRIBPOINTER)(GLuint  index, GLint  size, GLenum  type, GLboolean  normalized, GLsizei  stride, const void * pointer);
// typedef void  (APIENTRYP GPVERTEXATTRIBPOINTERARB)(GLuint  index, GLint  size, GLenum  type, GLboolean  normalized, GLsizei  stride, const void * pointer);
// typedef void  (APIENTRYP GPVERTEXATTRIBPOINTERNV)(GLuint  index, GLint  fsize, GLenum  type, GLsizei  stride, const void * pointer);
// typedef void  (APIENTRYP GPVERTEXATTRIBS1DVNV)(GLuint  index, GLsizei  count, const GLdouble * v);
// typedef void  (APIENTRYP GPVERTEXATTRIBS1FVNV)(GLuint  index, GLsizei  count, const GLfloat * v);
// typedef void  (APIENTRYP GPVERTEXATTRIBS1HVNV)(GLuint  index, GLsizei  n, const GLhalfNV * v);
// typedef void  (APIENTRYP GPVERTEXATTRIBS1SVNV)(GLuint  index, GLsizei  count, const GLshort * v);
// typedef void  (APIENTRYP GPVERTEXATTRIBS2DVNV)(GLuint  index, GLsizei  count, const GLdouble * v);
// typedef void  (APIENTRYP GPVERTEXATTRIBS2FVNV)(GLuint  index, GLsizei  count, const GLfloat * v);
// typedef void  (APIENTRYP GPVERTEXATTRIBS2HVNV)(GLuint  index, GLsizei  n, const GLhalfNV * v);
// typedef void  (APIENTRYP GPVERTEXATTRIBS2SVNV)(GLuint  index, GLsizei  count, const GLshort * v);
// typedef void  (APIENTRYP GPVERTEXATTRIBS3DVNV)(GLuint  index, GLsizei  count, const GLdouble * v);
// typedef void  (APIENTRYP GPVERTEXATTRIBS3FVNV)(GLuint  index, GLsizei  count, const GLfloat * v);
// typedef void  (APIENTRYP GPVERTEXATTRIBS3HVNV)(GLuint  index, GLsizei  n, const GLhalfNV * v);
// typedef void  (APIENTRYP GPVERTEXATTRIBS3SVNV)(GLuint  index, GLsizei  count, const GLshort * v);
// typedef void  (APIENTRYP GPVERTEXATTRIBS4DVNV)(GLuint  index, GLsizei  count, const GLdouble * v);
// typedef void  (APIENTRYP GPVERTEXATTRIBS4FVNV)(GLuint  index, GLsizei  count, const GLfloat * v);
// typedef void  (APIENTRYP GPVERTEXATTRIBS4HVNV)(GLuint  index, GLsizei  n, const GLhalfNV * v);
// typedef void  (APIENTRYP GPVERTEXATTRIBS4SVNV)(GLuint  index, GLsizei  count, const GLshort * v);
// typedef void  (APIENTRYP GPVERTEXATTRIBS4UBVNV)(GLuint  index, GLsizei  count, const GLubyte * v);
// typedef void  (APIENTRYP GPVERTEXBINDINGDIVISOR)(GLuint  bindingindex, GLuint  divisor);
// typedef void  (APIENTRYP GPVERTEXBLENDARB)(GLint  count);
// typedef void  (APIENTRYP GPVERTEXBLENDENVFATI)(GLenum  pname, GLfloat  param);
// typedef void  (APIENTRYP GPVERTEXBLENDENVIATI)(GLenum  pname, GLint  param);
// typedef void  (APIENTRYP GPVERTEXFORMATNV)(GLint  size, GLenum  type, GLsizei  stride);
// typedef void  (APIENTRYP GPVERTEXPOINTEREXT)(GLint  size, GLenum  type, GLsizei  stride, GLsizei  count, const void * pointer);
// typedef void  (APIENTRYP GPVERTEXPOINTERLISTIBM)(GLint  size, GLenum  type, GLint  stride, const void ** pointer, GLint  ptrstride);
// typedef void  (APIENTRYP GPVERTEXPOINTERVINTEL)(GLint  size, GLenum  type, const void ** pointer);
// typedef void  (APIENTRYP GPVERTEXSTREAM1DATI)(GLenum  stream, GLdouble  x);
// typedef void  (APIENTRYP GPVERTEXSTREAM1DVATI)(GLenum  stream, const GLdouble * coords);
// typedef void  (APIENTRYP GPVERTEXSTREAM1FATI)(GLenum  stream, GLfloat  x);
// typedef void  (APIENTRYP GPVERTEXSTREAM1FVATI)(GLenum  stream, const GLfloat * coords);
// typedef void  (APIENTRYP GPVERTEXSTREAM1IATI)(GLenum  stream, GLint  x);
// typedef void  (APIENTRYP GPVERTEXSTREAM1IVATI)(GLenum  stream, const GLint * coords);
// typedef void  (APIENTRYP GPVERTEXSTREAM1SATI)(GLenum  stream, GLshort  x);
// typedef void  (APIENTRYP GPVERTEXSTREAM1SVATI)(GLenum  stream, const GLshort * coords);
// typedef void  (APIENTRYP GPVERTEXSTREAM2DATI)(GLenum  stream, GLdouble  x, GLdouble  y);
// typedef void  (APIENTRYP GPVERTEXSTREAM2DVATI)(GLenum  stream, const GLdouble * coords);
// typedef void  (APIENTRYP GPVERTEXSTREAM2FATI)(GLenum  stream, GLfloat  x, GLfloat  y);
// typedef void  (APIENTRYP GPVERTEXSTREAM2FVATI)(GLenum  stream, const GLfloat * coords);
// typedef void  (APIENTRYP GPVERTEXSTREAM2IATI)(GLenum  stream, GLint  x, GLint  y);
// typedef void  (APIENTRYP GPVERTEXSTREAM2IVATI)(GLenum  stream, const GLint * coords);
// typedef void  (APIENTRYP GPVERTEXSTREAM2SATI)(GLenum  stream, GLshort  x, GLshort  y);
// typedef void  (APIENTRYP GPVERTEXSTREAM2SVATI)(GLenum  stream, const GLshort * coords);
// typedef void  (APIENTRYP GPVERTEXSTREAM3DATI)(GLenum  stream, GLdouble  x, GLdouble  y, GLdouble  z);
// typedef void  (APIENTRYP GPVERTEXSTREAM3DVATI)(GLenum  stream, const GLdouble * coords);
// typedef void  (APIENTRYP GPVERTEXSTREAM3FATI)(GLenum  stream, GLfloat  x, GLfloat  y, GLfloat  z);
// typedef void  (APIENTRYP GPVERTEXSTREAM3FVATI)(GLenum  stream, const GLfloat * coords);
// typedef void  (APIENTRYP GPVERTEXSTREAM3IATI)(GLenum  stream, GLint  x, GLint  y, GLint  z);
// typedef void  (APIENTRYP GPVERTEXSTREAM3IVATI)(GLenum  stream, const GLint * coords);
// typedef void  (APIENTRYP GPVERTEXSTREAM3SATI)(GLenum  stream, GLshort  x, GLshort  y, GLshort  z);
// typedef void  (APIENTRYP GPVERTEXSTREAM3SVATI)(GLenum  stream, const GLshort * coords);
// typedef void  (APIENTRYP GPVERTEXSTREAM4DATI)(GLenum  stream, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w);
// typedef void  (APIENTRYP GPVERTEXSTREAM4DVATI)(GLenum  stream, const GLdouble * coords);
// typedef void  (APIENTRYP GPVERTEXSTREAM4FATI)(GLenum  stream, GLfloat  x, GLfloat  y, GLfloat  z, GLfloat  w);
// typedef void  (APIENTRYP GPVERTEXSTREAM4FVATI)(GLenum  stream, const GLfloat * coords);
// typedef void  (APIENTRYP GPVERTEXSTREAM4IATI)(GLenum  stream, GLint  x, GLint  y, GLint  z, GLint  w);
// typedef void  (APIENTRYP GPVERTEXSTREAM4IVATI)(GLenum  stream, const GLint * coords);
// typedef void  (APIENTRYP GPVERTEXSTREAM4SATI)(GLenum  stream, GLshort  x, GLshort  y, GLshort  z, GLshort  w);
// typedef void  (APIENTRYP GPVERTEXSTREAM4SVATI)(GLenum  stream, const GLshort * coords);
// typedef void  (APIENTRYP GPVERTEXWEIGHTPOINTEREXT)(GLint  size, GLenum  type, GLsizei  stride, const void * pointer);
// typedef void  (APIENTRYP GPVERTEXWEIGHTFEXT)(GLfloat  weight);
// typedef void  (APIENTRYP GPVERTEXWEIGHTFVEXT)(const GLfloat * weight);
// typedef void  (APIENTRYP GPVERTEXWEIGHTHNV)(GLhalfNV  weight);
// typedef void  (APIENTRYP GPVERTEXWEIGHTHVNV)(const GLhalfNV * weight);
// typedef GLenum  (APIENTRYP GPVIDEOCAPTURENV)(GLuint  video_capture_slot, GLuint * sequence_num, GLuint64EXT * capture_time);
// typedef void  (APIENTRYP GPVIDEOCAPTURESTREAMPARAMETERDVNV)(GLuint  video_capture_slot, GLuint  stream, GLenum  pname, const GLdouble * params);
// typedef void  (APIENTRYP GPVIDEOCAPTURESTREAMPARAMETERFVNV)(GLuint  video_capture_slot, GLuint  stream, GLenum  pname, const GLfloat * params);
// typedef void  (APIENTRYP GPVIDEOCAPTURESTREAMPARAMETERIVNV)(GLuint  video_capture_slot, GLuint  stream, GLenum  pname, const GLint * params);
// typedef void  (APIENTRYP GPVIEWPORT)(GLint  x, GLint  y, GLsizei  width, GLsizei  height);
// typedef void  (APIENTRYP GPVIEWPORTARRAYV)(GLuint  first, GLsizei  count, const GLfloat * v);
// typedef void  (APIENTRYP GPVIEWPORTINDEXEDF)(GLuint  index, GLfloat  x, GLfloat  y, GLfloat  w, GLfloat  h);
// typedef void  (APIENTRYP GPVIEWPORTINDEXEDFV)(GLuint  index, const GLfloat * v);
// typedef void  (APIENTRYP GPWAITSYNC)(GLsync  sync, GLbitfield  flags, GLuint64  timeout);
// typedef void  (APIENTRYP GPWEIGHTPATHSNV)(GLuint  resultPath, GLsizei  numPaths, const GLuint * paths, const GLfloat * weights);
// typedef void  (APIENTRYP GPWEIGHTPOINTERARB)(GLint  size, GLenum  type, GLsizei  stride, const void * pointer);
// typedef void  (APIENTRYP GPWEIGHTBVARB)(GLint  size, const GLbyte * weights);
// typedef void  (APIENTRYP GPWEIGHTDVARB)(GLint  size, const GLdouble * weights);
// typedef void  (APIENTRYP GPWEIGHTFVARB)(GLint  size, const GLfloat * weights);
// typedef void  (APIENTRYP GPWEIGHTIVARB)(GLint  size, const GLint * weights);
// typedef void  (APIENTRYP GPWEIGHTSVARB)(GLint  size, const GLshort * weights);
// typedef void  (APIENTRYP GPWEIGHTUBVARB)(GLint  size, const GLubyte * weights);
// typedef void  (APIENTRYP GPWEIGHTUIVARB)(GLint  size, const GLuint * weights);
// typedef void  (APIENTRYP GPWEIGHTUSVARB)(GLint  size, const GLushort * weights);
// typedef void  (APIENTRYP GPWINDOWPOS2DARB)(GLdouble  x, GLdouble  y);
// typedef void  (APIENTRYP GPWINDOWPOS2DMESA)(GLdouble  x, GLdouble  y);
// typedef void  (APIENTRYP GPWINDOWPOS2DVARB)(const GLdouble * v);
// typedef void  (APIENTRYP GPWINDOWPOS2DVMESA)(const GLdouble * v);
// typedef void  (APIENTRYP GPWINDOWPOS2FARB)(GLfloat  x, GLfloat  y);
// typedef void  (APIENTRYP GPWINDOWPOS2FMESA)(GLfloat  x, GLfloat  y);
// typedef void  (APIENTRYP GPWINDOWPOS2FVARB)(const GLfloat * v);
// typedef void  (APIENTRYP GPWINDOWPOS2FVMESA)(const GLfloat * v);
// typedef void  (APIENTRYP GPWINDOWPOS2IARB)(GLint  x, GLint  y);
// typedef void  (APIENTRYP GPWINDOWPOS2IMESA)(GLint  x, GLint  y);
// typedef void  (APIENTRYP GPWINDOWPOS2IVARB)(const GLint * v);
// typedef void  (APIENTRYP GPWINDOWPOS2IVMESA)(const GLint * v);
// typedef void  (APIENTRYP GPWINDOWPOS2SARB)(GLshort  x, GLshort  y);
// typedef void  (APIENTRYP GPWINDOWPOS2SMESA)(GLshort  x, GLshort  y);
// typedef void  (APIENTRYP GPWINDOWPOS2SVARB)(const GLshort * v);
// typedef void  (APIENTRYP GPWINDOWPOS2SVMESA)(const GLshort * v);
// typedef void  (APIENTRYP GPWINDOWPOS3DARB)(GLdouble  x, GLdouble  y, GLdouble  z);
// typedef void  (APIENTRYP GPWINDOWPOS3DMESA)(GLdouble  x, GLdouble  y, GLdouble  z);
// typedef void  (APIENTRYP GPWINDOWPOS3DVARB)(const GLdouble * v);
// typedef void  (APIENTRYP GPWINDOWPOS3DVMESA)(const GLdouble * v);
// typedef void  (APIENTRYP GPWINDOWPOS3FARB)(GLfloat  x, GLfloat  y, GLfloat  z);
// typedef void  (APIENTRYP GPWINDOWPOS3FMESA)(GLfloat  x, GLfloat  y, GLfloat  z);
// typedef void  (APIENTRYP GPWINDOWPOS3FVARB)(const GLfloat * v);
// typedef void  (APIENTRYP GPWINDOWPOS3FVMESA)(const GLfloat * v);
// typedef void  (APIENTRYP GPWINDOWPOS3IARB)(GLint  x, GLint  y, GLint  z);
// typedef void  (APIENTRYP GPWINDOWPOS3IMESA)(GLint  x, GLint  y, GLint  z);
// typedef void  (APIENTRYP GPWINDOWPOS3IVARB)(const GLint * v);
// typedef void  (APIENTRYP GPWINDOWPOS3IVMESA)(const GLint * v);
// typedef void  (APIENTRYP GPWINDOWPOS3SARB)(GLshort  x, GLshort  y, GLshort  z);
// typedef void  (APIENTRYP GPWINDOWPOS3SMESA)(GLshort  x, GLshort  y, GLshort  z);
// typedef void  (APIENTRYP GPWINDOWPOS3SVARB)(const GLshort * v);
// typedef void  (APIENTRYP GPWINDOWPOS3SVMESA)(const GLshort * v);
// typedef void  (APIENTRYP GPWINDOWPOS4DMESA)(GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w);
// typedef void  (APIENTRYP GPWINDOWPOS4DVMESA)(const GLdouble * v);
// typedef void  (APIENTRYP GPWINDOWPOS4FMESA)(GLfloat  x, GLfloat  y, GLfloat  z, GLfloat  w);
// typedef void  (APIENTRYP GPWINDOWPOS4FVMESA)(const GLfloat * v);
// typedef void  (APIENTRYP GPWINDOWPOS4IMESA)(GLint  x, GLint  y, GLint  z, GLint  w);
// typedef void  (APIENTRYP GPWINDOWPOS4IVMESA)(const GLint * v);
// typedef void  (APIENTRYP GPWINDOWPOS4SMESA)(GLshort  x, GLshort  y, GLshort  z, GLshort  w);
// typedef void  (APIENTRYP GPWINDOWPOS4SVMESA)(const GLshort * v);
// typedef void  (APIENTRYP GPWRITEMASKEXT)(GLuint  res, GLuint  in, GLenum  outX, GLenum  outY, GLenum  outZ, GLenum  outW);
// static void  glowAccumxOES(GPACCUMXOES fnptr, GLenum  op, GLfixed  value) {
//   (*fnptr)(op, value);
// }
// static void  glowActiveProgramEXT(GPACTIVEPROGRAMEXT fnptr, GLuint  program) {
//   (*fnptr)(program);
// }
// static void  glowActiveShaderProgram(GPACTIVESHADERPROGRAM fnptr, GLuint  pipeline, GLuint  program) {
//   (*fnptr)(pipeline, program);
// }
// static void  glowActiveShaderProgramEXT(GPACTIVESHADERPROGRAMEXT fnptr, GLuint  pipeline, GLuint  program) {
//   (*fnptr)(pipeline, program);
// }
// static void  glowActiveStencilFaceEXT(GPACTIVESTENCILFACEEXT fnptr, GLenum  face) {
//   (*fnptr)(face);
// }
// static void  glowActiveTexture(GPACTIVETEXTURE fnptr, GLenum  texture) {
//   (*fnptr)(texture);
// }
// static void  glowActiveTextureARB(GPACTIVETEXTUREARB fnptr, GLenum  texture) {
//   (*fnptr)(texture);
// }
// static void  glowActiveVaryingNV(GPACTIVEVARYINGNV fnptr, GLuint  program, const GLchar * name) {
//   (*fnptr)(program, name);
// }
// static void  glowAlphaFragmentOp1ATI(GPALPHAFRAGMENTOP1ATI fnptr, GLenum  op, GLuint  dst, GLuint  dstMod, GLuint  arg1, GLuint  arg1Rep, GLuint  arg1Mod) {
//   (*fnptr)(op, dst, dstMod, arg1, arg1Rep, arg1Mod);
// }
// static void  glowAlphaFragmentOp2ATI(GPALPHAFRAGMENTOP2ATI fnptr, GLenum  op, GLuint  dst, GLuint  dstMod, GLuint  arg1, GLuint  arg1Rep, GLuint  arg1Mod, GLuint  arg2, GLuint  arg2Rep, GLuint  arg2Mod) {
//   (*fnptr)(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
// }
// static void  glowAlphaFragmentOp3ATI(GPALPHAFRAGMENTOP3ATI fnptr, GLenum  op, GLuint  dst, GLuint  dstMod, GLuint  arg1, GLuint  arg1Rep, GLuint  arg1Mod, GLuint  arg2, GLuint  arg2Rep, GLuint  arg2Mod, GLuint  arg3, GLuint  arg3Rep, GLuint  arg3Mod) {
//   (*fnptr)(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
// }
// static void  glowAlphaFuncxOES(GPALPHAFUNCXOES fnptr, GLenum  func, GLfixed  ref) {
//   (*fnptr)(func, ref);
// }
// static void  glowApplyTextureEXT(GPAPPLYTEXTUREEXT fnptr, GLenum  mode) {
//   (*fnptr)(mode);
// }
// static GLboolean  glowAreProgramsResidentNV(GPAREPROGRAMSRESIDENTNV fnptr, GLsizei  n, const GLuint * programs, GLboolean * residences) {
//   return (*fnptr)(n, programs, residences);
// }
// static GLboolean  glowAreTexturesResidentEXT(GPARETEXTURESRESIDENTEXT fnptr, GLsizei  n, const GLuint * textures, GLboolean * residences) {
//   return (*fnptr)(n, textures, residences);
// }
// static void  glowArrayElementEXT(GPARRAYELEMENTEXT fnptr, GLint  i) {
//   (*fnptr)(i);
// }
// static void  glowArrayObjectATI(GPARRAYOBJECTATI fnptr, GLenum  array, GLint  size, GLenum  type, GLsizei  stride, GLuint  buffer, GLuint  offset) {
//   (*fnptr)(array, size, type, stride, buffer, offset);
// }
// static void  glowAsyncMarkerSGIX(GPASYNCMARKERSGIX fnptr, GLuint  marker) {
//   (*fnptr)(marker);
// }
// static void  glowAttachObjectARB(GPATTACHOBJECTARB fnptr, GLhandleARB  containerObj, GLhandleARB  obj) {
//   (*fnptr)(containerObj, obj);
// }
// static void  glowAttachShader(GPATTACHSHADER fnptr, GLuint  program, GLuint  shader) {
//   (*fnptr)(program, shader);
// }
// static void  glowBeginConditionalRender(GPBEGINCONDITIONALRENDER fnptr, GLuint  id, GLenum  mode) {
//   (*fnptr)(id, mode);
// }
// static void  glowBeginConditionalRenderNV(GPBEGINCONDITIONALRENDERNV fnptr, GLuint  id, GLenum  mode) {
//   (*fnptr)(id, mode);
// }
// static void  glowBeginConditionalRenderNVX(GPBEGINCONDITIONALRENDERNVX fnptr, GLuint  id) {
//   (*fnptr)(id);
// }
// static void  glowBeginFragmentShaderATI(GPBEGINFRAGMENTSHADERATI fnptr) {
//   (*fnptr)();
// }
// static void  glowBeginOcclusionQueryNV(GPBEGINOCCLUSIONQUERYNV fnptr, GLuint  id) {
//   (*fnptr)(id);
// }
// static void  glowBeginPerfMonitorAMD(GPBEGINPERFMONITORAMD fnptr, GLuint  monitor) {
//   (*fnptr)(monitor);
// }
// static void  glowBeginPerfQueryINTEL(GPBEGINPERFQUERYINTEL fnptr, GLuint  queryHandle) {
//   (*fnptr)(queryHandle);
// }
// static void  glowBeginQuery(GPBEGINQUERY fnptr, GLenum  target, GLuint  id) {
//   (*fnptr)(target, id);
// }
// static void  glowBeginQueryARB(GPBEGINQUERYARB fnptr, GLenum  target, GLuint  id) {
//   (*fnptr)(target, id);
// }
// static void  glowBeginQueryIndexed(GPBEGINQUERYINDEXED fnptr, GLenum  target, GLuint  index, GLuint  id) {
//   (*fnptr)(target, index, id);
// }
// static void  glowBeginTransformFeedback(GPBEGINTRANSFORMFEEDBACK fnptr, GLenum  primitiveMode) {
//   (*fnptr)(primitiveMode);
// }
// static void  glowBeginTransformFeedbackEXT(GPBEGINTRANSFORMFEEDBACKEXT fnptr, GLenum  primitiveMode) {
//   (*fnptr)(primitiveMode);
// }
// static void  glowBeginTransformFeedbackNV(GPBEGINTRANSFORMFEEDBACKNV fnptr, GLenum  primitiveMode) {
//   (*fnptr)(primitiveMode);
// }
// static void  glowBeginVertexShaderEXT(GPBEGINVERTEXSHADEREXT fnptr) {
//   (*fnptr)();
// }
// static void  glowBeginVideoCaptureNV(GPBEGINVIDEOCAPTURENV fnptr, GLuint  video_capture_slot) {
//   (*fnptr)(video_capture_slot);
// }
// static void  glowBindAttribLocation(GPBINDATTRIBLOCATION fnptr, GLuint  program, GLuint  index, const GLchar * name) {
//   (*fnptr)(program, index, name);
// }
// static void  glowBindAttribLocationARB(GPBINDATTRIBLOCATIONARB fnptr, GLhandleARB  programObj, GLuint  index, const GLcharARB * name) {
//   (*fnptr)(programObj, index, name);
// }
// static void  glowBindBuffer(GPBINDBUFFER fnptr, GLenum  target, GLuint  buffer) {
//   (*fnptr)(target, buffer);
// }
// static void  glowBindBufferARB(GPBINDBUFFERARB fnptr, GLenum  target, GLuint  buffer) {
//   (*fnptr)(target, buffer);
// }
// static void  glowBindBufferBase(GPBINDBUFFERBASE fnptr, GLenum  target, GLuint  index, GLuint  buffer) {
//   (*fnptr)(target, index, buffer);
// }
// static void  glowBindBufferBaseEXT(GPBINDBUFFERBASEEXT fnptr, GLenum  target, GLuint  index, GLuint  buffer) {
//   (*fnptr)(target, index, buffer);
// }
// static void  glowBindBufferBaseNV(GPBINDBUFFERBASENV fnptr, GLenum  target, GLuint  index, GLuint  buffer) {
//   (*fnptr)(target, index, buffer);
// }
// static void  glowBindBufferOffsetEXT(GPBINDBUFFEROFFSETEXT fnptr, GLenum  target, GLuint  index, GLuint  buffer, GLintptr  offset) {
//   (*fnptr)(target, index, buffer, offset);
// }
// static void  glowBindBufferOffsetNV(GPBINDBUFFEROFFSETNV fnptr, GLenum  target, GLuint  index, GLuint  buffer, GLintptr  offset) {
//   (*fnptr)(target, index, buffer, offset);
// }
// static void  glowBindBufferRange(GPBINDBUFFERRANGE fnptr, GLenum  target, GLuint  index, GLuint  buffer, GLintptr  offset, GLsizeiptr  size) {
//   (*fnptr)(target, index, buffer, offset, size);
// }
// static void  glowBindBufferRangeEXT(GPBINDBUFFERRANGEEXT fnptr, GLenum  target, GLuint  index, GLuint  buffer, GLintptr  offset, GLsizeiptr  size) {
//   (*fnptr)(target, index, buffer, offset, size);
// }
// static void  glowBindBufferRangeNV(GPBINDBUFFERRANGENV fnptr, GLenum  target, GLuint  index, GLuint  buffer, GLintptr  offset, GLsizeiptr  size) {
//   (*fnptr)(target, index, buffer, offset, size);
// }
// static void  glowBindBuffersBase(GPBINDBUFFERSBASE fnptr, GLenum  target, GLuint  first, GLsizei  count, const GLuint * buffers) {
//   (*fnptr)(target, first, count, buffers);
// }
// static void  glowBindBuffersRange(GPBINDBUFFERSRANGE fnptr, GLenum  target, GLuint  first, GLsizei  count, const GLuint * buffers, const GLintptr * offsets, const GLsizeiptr * sizes) {
//   (*fnptr)(target, first, count, buffers, offsets, sizes);
// }
// static void  glowBindFragDataLocation(GPBINDFRAGDATALOCATION fnptr, GLuint  program, GLuint  color, const GLchar * name) {
//   (*fnptr)(program, color, name);
// }
// static void  glowBindFragDataLocationEXT(GPBINDFRAGDATALOCATIONEXT fnptr, GLuint  program, GLuint  color, const GLchar * name) {
//   (*fnptr)(program, color, name);
// }
// static void  glowBindFragDataLocationIndexed(GPBINDFRAGDATALOCATIONINDEXED fnptr, GLuint  program, GLuint  colorNumber, GLuint  index, const GLchar * name) {
//   (*fnptr)(program, colorNumber, index, name);
// }
// static void  glowBindFragmentShaderATI(GPBINDFRAGMENTSHADERATI fnptr, GLuint  id) {
//   (*fnptr)(id);
// }
// static void  glowBindFramebuffer(GPBINDFRAMEBUFFER fnptr, GLenum  target, GLuint  framebuffer) {
//   (*fnptr)(target, framebuffer);
// }
// static void  glowBindFramebufferEXT(GPBINDFRAMEBUFFEREXT fnptr, GLenum  target, GLuint  framebuffer) {
//   (*fnptr)(target, framebuffer);
// }
// static void  glowBindImageTexture(GPBINDIMAGETEXTURE fnptr, GLuint  unit, GLuint  texture, GLint  level, GLboolean  layered, GLint  layer, GLenum  access, GLenum  format) {
//   (*fnptr)(unit, texture, level, layered, layer, access, format);
// }
// static void  glowBindImageTextureEXT(GPBINDIMAGETEXTUREEXT fnptr, GLuint  index, GLuint  texture, GLint  level, GLboolean  layered, GLint  layer, GLenum  access, GLint  format) {
//   (*fnptr)(index, texture, level, layered, layer, access, format);
// }
// static void  glowBindImageTextures(GPBINDIMAGETEXTURES fnptr, GLuint  first, GLsizei  count, const GLuint * textures) {
//   (*fnptr)(first, count, textures);
// }
// static GLuint  glowBindLightParameterEXT(GPBINDLIGHTPARAMETEREXT fnptr, GLenum  light, GLenum  value) {
//   return (*fnptr)(light, value);
// }
// static GLuint  glowBindMaterialParameterEXT(GPBINDMATERIALPARAMETEREXT fnptr, GLenum  face, GLenum  value) {
//   return (*fnptr)(face, value);
// }
// static void  glowBindMultiTextureEXT(GPBINDMULTITEXTUREEXT fnptr, GLenum  texunit, GLenum  target, GLuint  texture) {
//   (*fnptr)(texunit, target, texture);
// }
// static GLuint  glowBindParameterEXT(GPBINDPARAMETEREXT fnptr, GLenum  value) {
//   return (*fnptr)(value);
// }
// static void  glowBindProgramARB(GPBINDPROGRAMARB fnptr, GLenum  target, GLuint  program) {
//   (*fnptr)(target, program);
// }
// static void  glowBindProgramNV(GPBINDPROGRAMNV fnptr, GLenum  target, GLuint  id) {
//   (*fnptr)(target, id);
// }
// static void  glowBindProgramPipeline(GPBINDPROGRAMPIPELINE fnptr, GLuint  pipeline) {
//   (*fnptr)(pipeline);
// }
// static void  glowBindProgramPipelineEXT(GPBINDPROGRAMPIPELINEEXT fnptr, GLuint  pipeline) {
//   (*fnptr)(pipeline);
// }
// static void  glowBindRenderbuffer(GPBINDRENDERBUFFER fnptr, GLenum  target, GLuint  renderbuffer) {
//   (*fnptr)(target, renderbuffer);
// }
// static void  glowBindRenderbufferEXT(GPBINDRENDERBUFFEREXT fnptr, GLenum  target, GLuint  renderbuffer) {
//   (*fnptr)(target, renderbuffer);
// }
// static void  glowBindSampler(GPBINDSAMPLER fnptr, GLuint  unit, GLuint  sampler) {
//   (*fnptr)(unit, sampler);
// }
// static void  glowBindSamplers(GPBINDSAMPLERS fnptr, GLuint  first, GLsizei  count, const GLuint * samplers) {
//   (*fnptr)(first, count, samplers);
// }
// static GLuint  glowBindTexGenParameterEXT(GPBINDTEXGENPARAMETEREXT fnptr, GLenum  unit, GLenum  coord, GLenum  value) {
//   return (*fnptr)(unit, coord, value);
// }
// static void  glowBindTexture(GPBINDTEXTURE fnptr, GLenum  target, GLuint  texture) {
//   (*fnptr)(target, texture);
// }
// static void  glowBindTextureEXT(GPBINDTEXTUREEXT fnptr, GLenum  target, GLuint  texture) {
//   (*fnptr)(target, texture);
// }
// static GLuint  glowBindTextureUnitParameterEXT(GPBINDTEXTUREUNITPARAMETEREXT fnptr, GLenum  unit, GLenum  value) {
//   return (*fnptr)(unit, value);
// }
// static void  glowBindTextures(GPBINDTEXTURES fnptr, GLuint  first, GLsizei  count, const GLuint * textures) {
//   (*fnptr)(first, count, textures);
// }
// static void  glowBindTransformFeedback(GPBINDTRANSFORMFEEDBACK fnptr, GLenum  target, GLuint  id) {
//   (*fnptr)(target, id);
// }
// static void  glowBindTransformFeedbackNV(GPBINDTRANSFORMFEEDBACKNV fnptr, GLenum  target, GLuint  id) {
//   (*fnptr)(target, id);
// }
// static void  glowBindVertexArray(GPBINDVERTEXARRAY fnptr, GLuint  array) {
//   (*fnptr)(array);
// }
// static void  glowBindVertexArrayAPPLE(GPBINDVERTEXARRAYAPPLE fnptr, GLuint  array) {
//   (*fnptr)(array);
// }
// static void  glowBindVertexBuffer(GPBINDVERTEXBUFFER fnptr, GLuint  bindingindex, GLuint  buffer, GLintptr  offset, GLsizei  stride) {
//   (*fnptr)(bindingindex, buffer, offset, stride);
// }
// static void  glowBindVertexBuffers(GPBINDVERTEXBUFFERS fnptr, GLuint  first, GLsizei  count, const GLuint * buffers, const GLintptr * offsets, const GLsizei * strides) {
//   (*fnptr)(first, count, buffers, offsets, strides);
// }
// static void  glowBindVertexShaderEXT(GPBINDVERTEXSHADEREXT fnptr, GLuint  id) {
//   (*fnptr)(id);
// }
// static void  glowBindVideoCaptureStreamBufferNV(GPBINDVIDEOCAPTURESTREAMBUFFERNV fnptr, GLuint  video_capture_slot, GLuint  stream, GLenum  frame_region, GLintptrARB  offset) {
//   (*fnptr)(video_capture_slot, stream, frame_region, offset);
// }
// static void  glowBindVideoCaptureStreamTextureNV(GPBINDVIDEOCAPTURESTREAMTEXTURENV fnptr, GLuint  video_capture_slot, GLuint  stream, GLenum  frame_region, GLenum  target, GLuint  texture) {
//   (*fnptr)(video_capture_slot, stream, frame_region, target, texture);
// }
// static void  glowBinormal3bEXT(GPBINORMAL3BEXT fnptr, GLbyte  bx, GLbyte  by, GLbyte  bz) {
//   (*fnptr)(bx, by, bz);
// }
// static void  glowBinormal3bvEXT(GPBINORMAL3BVEXT fnptr, const GLbyte * v) {
//   (*fnptr)(v);
// }
// static void  glowBinormal3dEXT(GPBINORMAL3DEXT fnptr, GLdouble  bx, GLdouble  by, GLdouble  bz) {
//   (*fnptr)(bx, by, bz);
// }
// static void  glowBinormal3dvEXT(GPBINORMAL3DVEXT fnptr, const GLdouble * v) {
//   (*fnptr)(v);
// }
// static void  glowBinormal3fEXT(GPBINORMAL3FEXT fnptr, GLfloat  bx, GLfloat  by, GLfloat  bz) {
//   (*fnptr)(bx, by, bz);
// }
// static void  glowBinormal3fvEXT(GPBINORMAL3FVEXT fnptr, const GLfloat * v) {
//   (*fnptr)(v);
// }
// static void  glowBinormal3iEXT(GPBINORMAL3IEXT fnptr, GLint  bx, GLint  by, GLint  bz) {
//   (*fnptr)(bx, by, bz);
// }
// static void  glowBinormal3ivEXT(GPBINORMAL3IVEXT fnptr, const GLint * v) {
//   (*fnptr)(v);
// }
// static void  glowBinormal3sEXT(GPBINORMAL3SEXT fnptr, GLshort  bx, GLshort  by, GLshort  bz) {
//   (*fnptr)(bx, by, bz);
// }
// static void  glowBinormal3svEXT(GPBINORMAL3SVEXT fnptr, const GLshort * v) {
//   (*fnptr)(v);
// }
// static void  glowBinormalPointerEXT(GPBINORMALPOINTEREXT fnptr, GLenum  type, GLsizei  stride, const void * pointer) {
//   (*fnptr)(type, stride, pointer);
// }
// static void  glowBitmapxOES(GPBITMAPXOES fnptr, GLsizei  width, GLsizei  height, GLfixed  xorig, GLfixed  yorig, GLfixed  xmove, GLfixed  ymove, const GLubyte * bitmap) {
//   (*fnptr)(width, height, xorig, yorig, xmove, ymove, bitmap);
// }
// static void  glowBlendBarrierNV(GPBLENDBARRIERNV fnptr) {
//   (*fnptr)();
// }
// static void  glowBlendColor(GPBLENDCOLOR fnptr, GLfloat  red, GLfloat  green, GLfloat  blue, GLfloat  alpha) {
//   (*fnptr)(red, green, blue, alpha);
// }
// static void  glowBlendColorEXT(GPBLENDCOLOREXT fnptr, GLfloat  red, GLfloat  green, GLfloat  blue, GLfloat  alpha) {
//   (*fnptr)(red, green, blue, alpha);
// }
// static void  glowBlendColorxOES(GPBLENDCOLORXOES fnptr, GLfixed  red, GLfixed  green, GLfixed  blue, GLfixed  alpha) {
//   (*fnptr)(red, green, blue, alpha);
// }
// static void  glowBlendEquation(GPBLENDEQUATION fnptr, GLenum  mode) {
//   (*fnptr)(mode);
// }
// static void  glowBlendEquationEXT(GPBLENDEQUATIONEXT fnptr, GLenum  mode) {
//   (*fnptr)(mode);
// }
// static void  glowBlendEquationIndexedAMD(GPBLENDEQUATIONINDEXEDAMD fnptr, GLuint  buf, GLenum  mode) {
//   (*fnptr)(buf, mode);
// }
// static void  glowBlendEquationSeparate(GPBLENDEQUATIONSEPARATE fnptr, GLenum  modeRGB, GLenum  modeAlpha) {
//   (*fnptr)(modeRGB, modeAlpha);
// }
// static void  glowBlendEquationSeparateEXT(GPBLENDEQUATIONSEPARATEEXT fnptr, GLenum  modeRGB, GLenum  modeAlpha) {
//   (*fnptr)(modeRGB, modeAlpha);
// }
// static void  glowBlendEquationSeparateIndexedAMD(GPBLENDEQUATIONSEPARATEINDEXEDAMD fnptr, GLuint  buf, GLenum  modeRGB, GLenum  modeAlpha) {
//   (*fnptr)(buf, modeRGB, modeAlpha);
// }
// static void  glowBlendEquationSeparateiARB(GPBLENDEQUATIONSEPARATEIARB fnptr, GLuint  buf, GLenum  modeRGB, GLenum  modeAlpha) {
//   (*fnptr)(buf, modeRGB, modeAlpha);
// }
// static void  glowBlendEquationiARB(GPBLENDEQUATIONIARB fnptr, GLuint  buf, GLenum  mode) {
//   (*fnptr)(buf, mode);
// }
// static void  glowBlendFunc(GPBLENDFUNC fnptr, GLenum  sfactor, GLenum  dfactor) {
//   (*fnptr)(sfactor, dfactor);
// }
// static void  glowBlendFuncIndexedAMD(GPBLENDFUNCINDEXEDAMD fnptr, GLuint  buf, GLenum  src, GLenum  dst) {
//   (*fnptr)(buf, src, dst);
// }
// static void  glowBlendFuncSeparate(GPBLENDFUNCSEPARATE fnptr, GLenum  sfactorRGB, GLenum  dfactorRGB, GLenum  sfactorAlpha, GLenum  dfactorAlpha) {
//   (*fnptr)(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
// }
// static void  glowBlendFuncSeparateEXT(GPBLENDFUNCSEPARATEEXT fnptr, GLenum  sfactorRGB, GLenum  dfactorRGB, GLenum  sfactorAlpha, GLenum  dfactorAlpha) {
//   (*fnptr)(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
// }
// static void  glowBlendFuncSeparateINGR(GPBLENDFUNCSEPARATEINGR fnptr, GLenum  sfactorRGB, GLenum  dfactorRGB, GLenum  sfactorAlpha, GLenum  dfactorAlpha) {
//   (*fnptr)(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
// }
// static void  glowBlendFuncSeparateIndexedAMD(GPBLENDFUNCSEPARATEINDEXEDAMD fnptr, GLuint  buf, GLenum  srcRGB, GLenum  dstRGB, GLenum  srcAlpha, GLenum  dstAlpha) {
//   (*fnptr)(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
// }
// static void  glowBlendFuncSeparateiARB(GPBLENDFUNCSEPARATEIARB fnptr, GLuint  buf, GLenum  srcRGB, GLenum  dstRGB, GLenum  srcAlpha, GLenum  dstAlpha) {
//   (*fnptr)(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
// }
// static void  glowBlendFunciARB(GPBLENDFUNCIARB fnptr, GLuint  buf, GLenum  src, GLenum  dst) {
//   (*fnptr)(buf, src, dst);
// }
// static void  glowBlendParameteriNV(GPBLENDPARAMETERINV fnptr, GLenum  pname, GLint  value) {
//   (*fnptr)(pname, value);
// }
// static void  glowBlitFramebuffer(GPBLITFRAMEBUFFER fnptr, GLint  srcX0, GLint  srcY0, GLint  srcX1, GLint  srcY1, GLint  dstX0, GLint  dstY0, GLint  dstX1, GLint  dstY1, GLbitfield  mask, GLenum  filter) {
//   (*fnptr)(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
// }
// static void  glowBlitFramebufferEXT(GPBLITFRAMEBUFFEREXT fnptr, GLint  srcX0, GLint  srcY0, GLint  srcX1, GLint  srcY1, GLint  dstX0, GLint  dstY0, GLint  dstX1, GLint  dstY1, GLbitfield  mask, GLenum  filter) {
//   (*fnptr)(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
// }
// static void  glowBufferAddressRangeNV(GPBUFFERADDRESSRANGENV fnptr, GLenum  pname, GLuint  index, GLuint64EXT  address, GLsizeiptr  length) {
//   (*fnptr)(pname, index, address, length);
// }
// static void  glowBufferData(GPBUFFERDATA fnptr, GLenum  target, GLsizeiptr  size, const void * data, GLenum  usage) {
//   (*fnptr)(target, size, data, usage);
// }
// static void  glowBufferDataARB(GPBUFFERDATAARB fnptr, GLenum  target, GLsizeiptrARB  size, const void * data, GLenum  usage) {
//   (*fnptr)(target, size, data, usage);
// }
// static void  glowBufferParameteriAPPLE(GPBUFFERPARAMETERIAPPLE fnptr, GLenum  target, GLenum  pname, GLint  param) {
//   (*fnptr)(target, pname, param);
// }
// static void  glowBufferStorage(GPBUFFERSTORAGE fnptr, GLenum  target, GLsizeiptr  size, const void * data, GLbitfield  flags) {
//   (*fnptr)(target, size, data, flags);
// }
// static void  glowBufferSubData(GPBUFFERSUBDATA fnptr, GLenum  target, GLintptr  offset, GLsizeiptr  size, const void * data) {
//   (*fnptr)(target, offset, size, data);
// }
// static void  glowBufferSubDataARB(GPBUFFERSUBDATAARB fnptr, GLenum  target, GLintptrARB  offset, GLsizeiptrARB  size, const void * data) {
//   (*fnptr)(target, offset, size, data);
// }
// static GLenum  glowCheckFramebufferStatus(GPCHECKFRAMEBUFFERSTATUS fnptr, GLenum  target) {
//   return (*fnptr)(target);
// }
// static GLenum  glowCheckFramebufferStatusEXT(GPCHECKFRAMEBUFFERSTATUSEXT fnptr, GLenum  target) {
//   return (*fnptr)(target);
// }
// static GLenum  glowCheckNamedFramebufferStatusEXT(GPCHECKNAMEDFRAMEBUFFERSTATUSEXT fnptr, GLuint  framebuffer, GLenum  target) {
//   return (*fnptr)(framebuffer, target);
// }
// static void  glowClampColor(GPCLAMPCOLOR fnptr, GLenum  target, GLenum  clamp) {
//   (*fnptr)(target, clamp);
// }
// static void  glowClampColorARB(GPCLAMPCOLORARB fnptr, GLenum  target, GLenum  clamp) {
//   (*fnptr)(target, clamp);
// }
// static void  glowClear(GPCLEAR fnptr, GLbitfield  mask) {
//   (*fnptr)(mask);
// }
// static void  glowClearAccumxOES(GPCLEARACCUMXOES fnptr, GLfixed  red, GLfixed  green, GLfixed  blue, GLfixed  alpha) {
//   (*fnptr)(red, green, blue, alpha);
// }
// static void  glowClearBufferData(GPCLEARBUFFERDATA fnptr, GLenum  target, GLenum  internalformat, GLenum  format, GLenum  type, const void * data) {
//   (*fnptr)(target, internalformat, format, type, data);
// }
// static void  glowClearBufferSubData(GPCLEARBUFFERSUBDATA fnptr, GLenum  target, GLenum  internalformat, GLintptr  offset, GLsizeiptr  size, GLenum  format, GLenum  type, const void * data) {
//   (*fnptr)(target, internalformat, offset, size, format, type, data);
// }
// static void  glowClearBufferfi(GPCLEARBUFFERFI fnptr, GLenum  buffer, GLint  drawbuffer, GLfloat  depth, GLint  stencil) {
//   (*fnptr)(buffer, drawbuffer, depth, stencil);
// }
// static void  glowClearBufferfv(GPCLEARBUFFERFV fnptr, GLenum  buffer, GLint  drawbuffer, const GLfloat * value) {
//   (*fnptr)(buffer, drawbuffer, value);
// }
// static void  glowClearBufferiv(GPCLEARBUFFERIV fnptr, GLenum  buffer, GLint  drawbuffer, const GLint * value) {
//   (*fnptr)(buffer, drawbuffer, value);
// }
// static void  glowClearBufferuiv(GPCLEARBUFFERUIV fnptr, GLenum  buffer, GLint  drawbuffer, const GLuint * value) {
//   (*fnptr)(buffer, drawbuffer, value);
// }
// static void  glowClearColor(GPCLEARCOLOR fnptr, GLfloat  red, GLfloat  green, GLfloat  blue, GLfloat  alpha) {
//   (*fnptr)(red, green, blue, alpha);
// }
// static void  glowClearColorIiEXT(GPCLEARCOLORIIEXT fnptr, GLint  red, GLint  green, GLint  blue, GLint  alpha) {
//   (*fnptr)(red, green, blue, alpha);
// }
// static void  glowClearColorIuiEXT(GPCLEARCOLORIUIEXT fnptr, GLuint  red, GLuint  green, GLuint  blue, GLuint  alpha) {
//   (*fnptr)(red, green, blue, alpha);
// }
// static void  glowClearColorxOES(GPCLEARCOLORXOES fnptr, GLfixed  red, GLfixed  green, GLfixed  blue, GLfixed  alpha) {
//   (*fnptr)(red, green, blue, alpha);
// }
// static void  glowClearDepth(GPCLEARDEPTH fnptr, GLdouble  depth) {
//   (*fnptr)(depth);
// }
// static void  glowClearDepthdNV(GPCLEARDEPTHDNV fnptr, GLdouble  depth) {
//   (*fnptr)(depth);
// }
// static void  glowClearDepthf(GPCLEARDEPTHF fnptr, GLfloat  d) {
//   (*fnptr)(d);
// }
// static void  glowClearDepthfOES(GPCLEARDEPTHFOES fnptr, GLclampf  depth) {
//   (*fnptr)(depth);
// }
// static void  glowClearDepthxOES(GPCLEARDEPTHXOES fnptr, GLfixed  depth) {
//   (*fnptr)(depth);
// }
// static void  glowClearNamedBufferDataEXT(GPCLEARNAMEDBUFFERDATAEXT fnptr, GLuint  buffer, GLenum  internalformat, GLenum  format, GLenum  type, const void * data) {
//   (*fnptr)(buffer, internalformat, format, type, data);
// }
// static void  glowClearNamedBufferSubDataEXT(GPCLEARNAMEDBUFFERSUBDATAEXT fnptr, GLuint  buffer, GLenum  internalformat, GLsizeiptr  offset, GLsizeiptr  size, GLenum  format, GLenum  type, const void * data) {
//   (*fnptr)(buffer, internalformat, offset, size, format, type, data);
// }
// static void  glowClearStencil(GPCLEARSTENCIL fnptr, GLint  s) {
//   (*fnptr)(s);
// }
// static void  glowClearTexImage(GPCLEARTEXIMAGE fnptr, GLuint  texture, GLint  level, GLenum  format, GLenum  type, const void * data) {
//   (*fnptr)(texture, level, format, type, data);
// }
// static void  glowClearTexSubImage(GPCLEARTEXSUBIMAGE fnptr, GLuint  texture, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLsizei  width, GLsizei  height, GLsizei  depth, GLenum  format, GLenum  type, const void * data) {
//   (*fnptr)(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);
// }
// static void  glowClientActiveTextureARB(GPCLIENTACTIVETEXTUREARB fnptr, GLenum  texture) {
//   (*fnptr)(texture);
// }
// static void  glowClientActiveVertexStreamATI(GPCLIENTACTIVEVERTEXSTREAMATI fnptr, GLenum  stream) {
//   (*fnptr)(stream);
// }
// static void  glowClientAttribDefaultEXT(GPCLIENTATTRIBDEFAULTEXT fnptr, GLbitfield  mask) {
//   (*fnptr)(mask);
// }
// static GLenum  glowClientWaitSync(GPCLIENTWAITSYNC fnptr, GLsync  sync, GLbitfield  flags, GLuint64  timeout) {
//   return (*fnptr)(sync, flags, timeout);
// }
// static void  glowClipPlanefOES(GPCLIPPLANEFOES fnptr, GLenum  plane, const GLfloat * equation) {
//   (*fnptr)(plane, equation);
// }
// static void  glowClipPlanexOES(GPCLIPPLANEXOES fnptr, GLenum  plane, const GLfixed * equation) {
//   (*fnptr)(plane, equation);
// }
// static void  glowColor3fVertex3fSUN(GPCOLOR3FVERTEX3FSUN fnptr, GLfloat  r, GLfloat  g, GLfloat  b, GLfloat  x, GLfloat  y, GLfloat  z) {
//   (*fnptr)(r, g, b, x, y, z);
// }
// static void  glowColor3fVertex3fvSUN(GPCOLOR3FVERTEX3FVSUN fnptr, const GLfloat * c, const GLfloat * v) {
//   (*fnptr)(c, v);
// }
// static void  glowColor3hNV(GPCOLOR3HNV fnptr, GLhalfNV  red, GLhalfNV  green, GLhalfNV  blue) {
//   (*fnptr)(red, green, blue);
// }
// static void  glowColor3hvNV(GPCOLOR3HVNV fnptr, const GLhalfNV * v) {
//   (*fnptr)(v);
// }
// static void  glowColor3xOES(GPCOLOR3XOES fnptr, GLfixed  red, GLfixed  green, GLfixed  blue) {
//   (*fnptr)(red, green, blue);
// }
// static void  glowColor3xvOES(GPCOLOR3XVOES fnptr, const GLfixed * components) {
//   (*fnptr)(components);
// }
// static void  glowColor4fNormal3fVertex3fSUN(GPCOLOR4FNORMAL3FVERTEX3FSUN fnptr, GLfloat  r, GLfloat  g, GLfloat  b, GLfloat  a, GLfloat  nx, GLfloat  ny, GLfloat  nz, GLfloat  x, GLfloat  y, GLfloat  z) {
//   (*fnptr)(r, g, b, a, nx, ny, nz, x, y, z);
// }
// static void  glowColor4fNormal3fVertex3fvSUN(GPCOLOR4FNORMAL3FVERTEX3FVSUN fnptr, const GLfloat * c, const GLfloat * n, const GLfloat * v) {
//   (*fnptr)(c, n, v);
// }
// static void  glowColor4hNV(GPCOLOR4HNV fnptr, GLhalfNV  red, GLhalfNV  green, GLhalfNV  blue, GLhalfNV  alpha) {
//   (*fnptr)(red, green, blue, alpha);
// }
// static void  glowColor4hvNV(GPCOLOR4HVNV fnptr, const GLhalfNV * v) {
//   (*fnptr)(v);
// }
// static void  glowColor4ubVertex2fSUN(GPCOLOR4UBVERTEX2FSUN fnptr, GLubyte  r, GLubyte  g, GLubyte  b, GLubyte  a, GLfloat  x, GLfloat  y) {
//   (*fnptr)(r, g, b, a, x, y);
// }
// static void  glowColor4ubVertex2fvSUN(GPCOLOR4UBVERTEX2FVSUN fnptr, const GLubyte * c, const GLfloat * v) {
//   (*fnptr)(c, v);
// }
// static void  glowColor4ubVertex3fSUN(GPCOLOR4UBVERTEX3FSUN fnptr, GLubyte  r, GLubyte  g, GLubyte  b, GLubyte  a, GLfloat  x, GLfloat  y, GLfloat  z) {
//   (*fnptr)(r, g, b, a, x, y, z);
// }
// static void  glowColor4ubVertex3fvSUN(GPCOLOR4UBVERTEX3FVSUN fnptr, const GLubyte * c, const GLfloat * v) {
//   (*fnptr)(c, v);
// }
// static void  glowColor4xOES(GPCOLOR4XOES fnptr, GLfixed  red, GLfixed  green, GLfixed  blue, GLfixed  alpha) {
//   (*fnptr)(red, green, blue, alpha);
// }
// static void  glowColor4xvOES(GPCOLOR4XVOES fnptr, const GLfixed * components) {
//   (*fnptr)(components);
// }
// static void  glowColorFormatNV(GPCOLORFORMATNV fnptr, GLint  size, GLenum  type, GLsizei  stride) {
//   (*fnptr)(size, type, stride);
// }
// static void  glowColorFragmentOp1ATI(GPCOLORFRAGMENTOP1ATI fnptr, GLenum  op, GLuint  dst, GLuint  dstMask, GLuint  dstMod, GLuint  arg1, GLuint  arg1Rep, GLuint  arg1Mod) {
//   (*fnptr)(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod);
// }
// static void  glowColorFragmentOp2ATI(GPCOLORFRAGMENTOP2ATI fnptr, GLenum  op, GLuint  dst, GLuint  dstMask, GLuint  dstMod, GLuint  arg1, GLuint  arg1Rep, GLuint  arg1Mod, GLuint  arg2, GLuint  arg2Rep, GLuint  arg2Mod) {
//   (*fnptr)(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
// }
// static void  glowColorFragmentOp3ATI(GPCOLORFRAGMENTOP3ATI fnptr, GLenum  op, GLuint  dst, GLuint  dstMask, GLuint  dstMod, GLuint  arg1, GLuint  arg1Rep, GLuint  arg1Mod, GLuint  arg2, GLuint  arg2Rep, GLuint  arg2Mod, GLuint  arg3, GLuint  arg3Rep, GLuint  arg3Mod) {
//   (*fnptr)(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
// }
// static void  glowColorMask(GPCOLORMASK fnptr, GLboolean  red, GLboolean  green, GLboolean  blue, GLboolean  alpha) {
//   (*fnptr)(red, green, blue, alpha);
// }
// static void  glowColorMaskIndexedEXT(GPCOLORMASKINDEXEDEXT fnptr, GLuint  index, GLboolean  r, GLboolean  g, GLboolean  b, GLboolean  a) {
//   (*fnptr)(index, r, g, b, a);
// }
// static void  glowColorMaski(GPCOLORMASKI fnptr, GLuint  index, GLboolean  r, GLboolean  g, GLboolean  b, GLboolean  a) {
//   (*fnptr)(index, r, g, b, a);
// }
// static void  glowColorPointerEXT(GPCOLORPOINTEREXT fnptr, GLint  size, GLenum  type, GLsizei  stride, GLsizei  count, const void * pointer) {
//   (*fnptr)(size, type, stride, count, pointer);
// }
// static void  glowColorPointerListIBM(GPCOLORPOINTERLISTIBM fnptr, GLint  size, GLenum  type, GLint  stride, const void ** pointer, GLint  ptrstride) {
//   (*fnptr)(size, type, stride, pointer, ptrstride);
// }
// static void  glowColorPointervINTEL(GPCOLORPOINTERVINTEL fnptr, GLint  size, GLenum  type, const void ** pointer) {
//   (*fnptr)(size, type, pointer);
// }
// static void  glowColorSubTableEXT(GPCOLORSUBTABLEEXT fnptr, GLenum  target, GLsizei  start, GLsizei  count, GLenum  format, GLenum  type, const void * data) {
//   (*fnptr)(target, start, count, format, type, data);
// }
// static void  glowColorTableEXT(GPCOLORTABLEEXT fnptr, GLenum  target, GLenum  internalFormat, GLsizei  width, GLenum  format, GLenum  type, const void * table) {
//   (*fnptr)(target, internalFormat, width, format, type, table);
// }
// static void  glowColorTableParameterfvSGI(GPCOLORTABLEPARAMETERFVSGI fnptr, GLenum  target, GLenum  pname, const GLfloat * params) {
//   (*fnptr)(target, pname, params);
// }
// static void  glowColorTableParameterivSGI(GPCOLORTABLEPARAMETERIVSGI fnptr, GLenum  target, GLenum  pname, const GLint * params) {
//   (*fnptr)(target, pname, params);
// }
// static void  glowColorTableSGI(GPCOLORTABLESGI fnptr, GLenum  target, GLenum  internalformat, GLsizei  width, GLenum  format, GLenum  type, const void * table) {
//   (*fnptr)(target, internalformat, width, format, type, table);
// }
// static void  glowCombinerInputNV(GPCOMBINERINPUTNV fnptr, GLenum  stage, GLenum  portion, GLenum  variable, GLenum  input, GLenum  mapping, GLenum  componentUsage) {
//   (*fnptr)(stage, portion, variable, input, mapping, componentUsage);
// }
// static void  glowCombinerOutputNV(GPCOMBINEROUTPUTNV fnptr, GLenum  stage, GLenum  portion, GLenum  abOutput, GLenum  cdOutput, GLenum  sumOutput, GLenum  scale, GLenum  bias, GLboolean  abDotProduct, GLboolean  cdDotProduct, GLboolean  muxSum) {
//   (*fnptr)(stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum);
// }
// static void  glowCombinerParameterfNV(GPCOMBINERPARAMETERFNV fnptr, GLenum  pname, GLfloat  param) {
//   (*fnptr)(pname, param);
// }
// static void  glowCombinerParameterfvNV(GPCOMBINERPARAMETERFVNV fnptr, GLenum  pname, const GLfloat * params) {
//   (*fnptr)(pname, params);
// }
// static void  glowCombinerParameteriNV(GPCOMBINERPARAMETERINV fnptr, GLenum  pname, GLint  param) {
//   (*fnptr)(pname, param);
// }
// static void  glowCombinerParameterivNV(GPCOMBINERPARAMETERIVNV fnptr, GLenum  pname, const GLint * params) {
//   (*fnptr)(pname, params);
// }
// static void  glowCombinerStageParameterfvNV(GPCOMBINERSTAGEPARAMETERFVNV fnptr, GLenum  stage, GLenum  pname, const GLfloat * params) {
//   (*fnptr)(stage, pname, params);
// }
// static void  glowCompileShader(GPCOMPILESHADER fnptr, GLuint  shader) {
//   (*fnptr)(shader);
// }
// static void  glowCompileShaderARB(GPCOMPILESHADERARB fnptr, GLhandleARB  shaderObj) {
//   (*fnptr)(shaderObj);
// }
// static void  glowCompileShaderIncludeARB(GPCOMPILESHADERINCLUDEARB fnptr, GLuint  shader, GLsizei  count, const GLchar *const* path, const GLint * length) {
//   (*fnptr)(shader, count, path, length);
// }
// static void  glowCompressedMultiTexImage1DEXT(GPCOMPRESSEDMULTITEXIMAGE1DEXT fnptr, GLenum  texunit, GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLint  border, GLsizei  imageSize, const void * bits) {
//   (*fnptr)(texunit, target, level, internalformat, width, border, imageSize, bits);
// }
// static void  glowCompressedMultiTexImage2DEXT(GPCOMPRESSEDMULTITEXIMAGE2DEXT fnptr, GLenum  texunit, GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLsizei  height, GLint  border, GLsizei  imageSize, const void * bits) {
//   (*fnptr)(texunit, target, level, internalformat, width, height, border, imageSize, bits);
// }
// static void  glowCompressedMultiTexImage3DEXT(GPCOMPRESSEDMULTITEXIMAGE3DEXT fnptr, GLenum  texunit, GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth, GLint  border, GLsizei  imageSize, const void * bits) {
//   (*fnptr)(texunit, target, level, internalformat, width, height, depth, border, imageSize, bits);
// }
// static void  glowCompressedMultiTexSubImage1DEXT(GPCOMPRESSEDMULTITEXSUBIMAGE1DEXT fnptr, GLenum  texunit, GLenum  target, GLint  level, GLint  xoffset, GLsizei  width, GLenum  format, GLsizei  imageSize, const void * bits) {
//   (*fnptr)(texunit, target, level, xoffset, width, format, imageSize, bits);
// }
// static void  glowCompressedMultiTexSubImage2DEXT(GPCOMPRESSEDMULTITEXSUBIMAGE2DEXT fnptr, GLenum  texunit, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLsizei  width, GLsizei  height, GLenum  format, GLsizei  imageSize, const void * bits) {
//   (*fnptr)(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits);
// }
// static void  glowCompressedMultiTexSubImage3DEXT(GPCOMPRESSEDMULTITEXSUBIMAGE3DEXT fnptr, GLenum  texunit, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLsizei  width, GLsizei  height, GLsizei  depth, GLenum  format, GLsizei  imageSize, const void * bits) {
//   (*fnptr)(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits);
// }
// static void  glowCompressedTexImage1D(GPCOMPRESSEDTEXIMAGE1D fnptr, GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLint  border, GLsizei  imageSize, const void * data) {
//   (*fnptr)(target, level, internalformat, width, border, imageSize, data);
// }
// static void  glowCompressedTexImage1DARB(GPCOMPRESSEDTEXIMAGE1DARB fnptr, GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLint  border, GLsizei  imageSize, const void * data) {
//   (*fnptr)(target, level, internalformat, width, border, imageSize, data);
// }
// static void  glowCompressedTexImage2D(GPCOMPRESSEDTEXIMAGE2D fnptr, GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLsizei  height, GLint  border, GLsizei  imageSize, const void * data) {
//   (*fnptr)(target, level, internalformat, width, height, border, imageSize, data);
// }
// static void  glowCompressedTexImage2DARB(GPCOMPRESSEDTEXIMAGE2DARB fnptr, GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLsizei  height, GLint  border, GLsizei  imageSize, const void * data) {
//   (*fnptr)(target, level, internalformat, width, height, border, imageSize, data);
// }
// static void  glowCompressedTexImage3D(GPCOMPRESSEDTEXIMAGE3D fnptr, GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth, GLint  border, GLsizei  imageSize, const void * data) {
//   (*fnptr)(target, level, internalformat, width, height, depth, border, imageSize, data);
// }
// static void  glowCompressedTexImage3DARB(GPCOMPRESSEDTEXIMAGE3DARB fnptr, GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth, GLint  border, GLsizei  imageSize, const void * data) {
//   (*fnptr)(target, level, internalformat, width, height, depth, border, imageSize, data);
// }
// static void  glowCompressedTexSubImage1D(GPCOMPRESSEDTEXSUBIMAGE1D fnptr, GLenum  target, GLint  level, GLint  xoffset, GLsizei  width, GLenum  format, GLsizei  imageSize, const void * data) {
//   (*fnptr)(target, level, xoffset, width, format, imageSize, data);
// }
// static void  glowCompressedTexSubImage1DARB(GPCOMPRESSEDTEXSUBIMAGE1DARB fnptr, GLenum  target, GLint  level, GLint  xoffset, GLsizei  width, GLenum  format, GLsizei  imageSize, const void * data) {
//   (*fnptr)(target, level, xoffset, width, format, imageSize, data);
// }
// static void  glowCompressedTexSubImage2D(GPCOMPRESSEDTEXSUBIMAGE2D fnptr, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLsizei  width, GLsizei  height, GLenum  format, GLsizei  imageSize, const void * data) {
//   (*fnptr)(target, level, xoffset, yoffset, width, height, format, imageSize, data);
// }
// static void  glowCompressedTexSubImage2DARB(GPCOMPRESSEDTEXSUBIMAGE2DARB fnptr, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLsizei  width, GLsizei  height, GLenum  format, GLsizei  imageSize, const void * data) {
//   (*fnptr)(target, level, xoffset, yoffset, width, height, format, imageSize, data);
// }
// static void  glowCompressedTexSubImage3D(GPCOMPRESSEDTEXSUBIMAGE3D fnptr, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLsizei  width, GLsizei  height, GLsizei  depth, GLenum  format, GLsizei  imageSize, const void * data) {
//   (*fnptr)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
// }
// static void  glowCompressedTexSubImage3DARB(GPCOMPRESSEDTEXSUBIMAGE3DARB fnptr, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLsizei  width, GLsizei  height, GLsizei  depth, GLenum  format, GLsizei  imageSize, const void * data) {
//   (*fnptr)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
// }
// static void  glowCompressedTextureImage1DEXT(GPCOMPRESSEDTEXTUREIMAGE1DEXT fnptr, GLuint  texture, GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLint  border, GLsizei  imageSize, const void * bits) {
//   (*fnptr)(texture, target, level, internalformat, width, border, imageSize, bits);
// }
// static void  glowCompressedTextureImage2DEXT(GPCOMPRESSEDTEXTUREIMAGE2DEXT fnptr, GLuint  texture, GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLsizei  height, GLint  border, GLsizei  imageSize, const void * bits) {
//   (*fnptr)(texture, target, level, internalformat, width, height, border, imageSize, bits);
// }
// static void  glowCompressedTextureImage3DEXT(GPCOMPRESSEDTEXTUREIMAGE3DEXT fnptr, GLuint  texture, GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth, GLint  border, GLsizei  imageSize, const void * bits) {
//   (*fnptr)(texture, target, level, internalformat, width, height, depth, border, imageSize, bits);
// }
// static void  glowCompressedTextureSubImage1DEXT(GPCOMPRESSEDTEXTURESUBIMAGE1DEXT fnptr, GLuint  texture, GLenum  target, GLint  level, GLint  xoffset, GLsizei  width, GLenum  format, GLsizei  imageSize, const void * bits) {
//   (*fnptr)(texture, target, level, xoffset, width, format, imageSize, bits);
// }
// static void  glowCompressedTextureSubImage2DEXT(GPCOMPRESSEDTEXTURESUBIMAGE2DEXT fnptr, GLuint  texture, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLsizei  width, GLsizei  height, GLenum  format, GLsizei  imageSize, const void * bits) {
//   (*fnptr)(texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits);
// }
// static void  glowCompressedTextureSubImage3DEXT(GPCOMPRESSEDTEXTURESUBIMAGE3DEXT fnptr, GLuint  texture, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLsizei  width, GLsizei  height, GLsizei  depth, GLenum  format, GLsizei  imageSize, const void * bits) {
//   (*fnptr)(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits);
// }
// static void  glowConvolutionFilter1DEXT(GPCONVOLUTIONFILTER1DEXT fnptr, GLenum  target, GLenum  internalformat, GLsizei  width, GLenum  format, GLenum  type, const void * image) {
//   (*fnptr)(target, internalformat, width, format, type, image);
// }
// static void  glowConvolutionFilter2DEXT(GPCONVOLUTIONFILTER2DEXT fnptr, GLenum  target, GLenum  internalformat, GLsizei  width, GLsizei  height, GLenum  format, GLenum  type, const void * image) {
//   (*fnptr)(target, internalformat, width, height, format, type, image);
// }
// static void  glowConvolutionParameterfEXT(GPCONVOLUTIONPARAMETERFEXT fnptr, GLenum  target, GLenum  pname, GLfloat  params) {
//   (*fnptr)(target, pname, params);
// }
// static void  glowConvolutionParameterfvEXT(GPCONVOLUTIONPARAMETERFVEXT fnptr, GLenum  target, GLenum  pname, const GLfloat * params) {
//   (*fnptr)(target, pname, params);
// }
// static void  glowConvolutionParameteriEXT(GPCONVOLUTIONPARAMETERIEXT fnptr, GLenum  target, GLenum  pname, GLint  params) {
//   (*fnptr)(target, pname, params);
// }
// static void  glowConvolutionParameterivEXT(GPCONVOLUTIONPARAMETERIVEXT fnptr, GLenum  target, GLenum  pname, const GLint * params) {
//   (*fnptr)(target, pname, params);
// }
// static void  glowConvolutionParameterxOES(GPCONVOLUTIONPARAMETERXOES fnptr, GLenum  target, GLenum  pname, GLfixed  param) {
//   (*fnptr)(target, pname, param);
// }
// static void  glowConvolutionParameterxvOES(GPCONVOLUTIONPARAMETERXVOES fnptr, GLenum  target, GLenum  pname, const GLfixed * params) {
//   (*fnptr)(target, pname, params);
// }
// static void  glowCopyBufferSubData(GPCOPYBUFFERSUBDATA fnptr, GLenum  readTarget, GLenum  writeTarget, GLintptr  readOffset, GLintptr  writeOffset, GLsizeiptr  size) {
//   (*fnptr)(readTarget, writeTarget, readOffset, writeOffset, size);
// }
// static void  glowCopyColorSubTableEXT(GPCOPYCOLORSUBTABLEEXT fnptr, GLenum  target, GLsizei  start, GLint  x, GLint  y, GLsizei  width) {
//   (*fnptr)(target, start, x, y, width);
// }
// static void  glowCopyColorTableSGI(GPCOPYCOLORTABLESGI fnptr, GLenum  target, GLenum  internalformat, GLint  x, GLint  y, GLsizei  width) {
//   (*fnptr)(target, internalformat, x, y, width);
// }
// static void  glowCopyConvolutionFilter1DEXT(GPCOPYCONVOLUTIONFILTER1DEXT fnptr, GLenum  target, GLenum  internalformat, GLint  x, GLint  y, GLsizei  width) {
//   (*fnptr)(target, internalformat, x, y, width);
// }
// static void  glowCopyConvolutionFilter2DEXT(GPCOPYCONVOLUTIONFILTER2DEXT fnptr, GLenum  target, GLenum  internalformat, GLint  x, GLint  y, GLsizei  width, GLsizei  height) {
//   (*fnptr)(target, internalformat, x, y, width, height);
// }
// static void  glowCopyImageSubData(GPCOPYIMAGESUBDATA fnptr, GLuint  srcName, GLenum  srcTarget, GLint  srcLevel, GLint  srcX, GLint  srcY, GLint  srcZ, GLuint  dstName, GLenum  dstTarget, GLint  dstLevel, GLint  dstX, GLint  dstY, GLint  dstZ, GLsizei  srcWidth, GLsizei  srcHeight, GLsizei  srcDepth) {
//   (*fnptr)(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
// }
// static void  glowCopyImageSubDataNV(GPCOPYIMAGESUBDATANV fnptr, GLuint  srcName, GLenum  srcTarget, GLint  srcLevel, GLint  srcX, GLint  srcY, GLint  srcZ, GLuint  dstName, GLenum  dstTarget, GLint  dstLevel, GLint  dstX, GLint  dstY, GLint  dstZ, GLsizei  width, GLsizei  height, GLsizei  depth) {
//   (*fnptr)(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
// }
// static void  glowCopyMultiTexImage1DEXT(GPCOPYMULTITEXIMAGE1DEXT fnptr, GLenum  texunit, GLenum  target, GLint  level, GLenum  internalformat, GLint  x, GLint  y, GLsizei  width, GLint  border) {
//   (*fnptr)(texunit, target, level, internalformat, x, y, width, border);
// }
// static void  glowCopyMultiTexImage2DEXT(GPCOPYMULTITEXIMAGE2DEXT fnptr, GLenum  texunit, GLenum  target, GLint  level, GLenum  internalformat, GLint  x, GLint  y, GLsizei  width, GLsizei  height, GLint  border) {
//   (*fnptr)(texunit, target, level, internalformat, x, y, width, height, border);
// }
// static void  glowCopyMultiTexSubImage1DEXT(GPCOPYMULTITEXSUBIMAGE1DEXT fnptr, GLenum  texunit, GLenum  target, GLint  level, GLint  xoffset, GLint  x, GLint  y, GLsizei  width) {
//   (*fnptr)(texunit, target, level, xoffset, x, y, width);
// }
// static void  glowCopyMultiTexSubImage2DEXT(GPCOPYMULTITEXSUBIMAGE2DEXT fnptr, GLenum  texunit, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  x, GLint  y, GLsizei  width, GLsizei  height) {
//   (*fnptr)(texunit, target, level, xoffset, yoffset, x, y, width, height);
// }
// static void  glowCopyMultiTexSubImage3DEXT(GPCOPYMULTITEXSUBIMAGE3DEXT fnptr, GLenum  texunit, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLint  x, GLint  y, GLsizei  width, GLsizei  height) {
//   (*fnptr)(texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height);
// }
// static void  glowCopyPathNV(GPCOPYPATHNV fnptr, GLuint  resultPath, GLuint  srcPath) {
//   (*fnptr)(resultPath, srcPath);
// }
// static void  glowCopyTexImage1D(GPCOPYTEXIMAGE1D fnptr, GLenum  target, GLint  level, GLenum  internalformat, GLint  x, GLint  y, GLsizei  width, GLint  border) {
//   (*fnptr)(target, level, internalformat, x, y, width, border);
// }
// static void  glowCopyTexImage1DEXT(GPCOPYTEXIMAGE1DEXT fnptr, GLenum  target, GLint  level, GLenum  internalformat, GLint  x, GLint  y, GLsizei  width, GLint  border) {
//   (*fnptr)(target, level, internalformat, x, y, width, border);
// }
// static void  glowCopyTexImage2D(GPCOPYTEXIMAGE2D fnptr, GLenum  target, GLint  level, GLenum  internalformat, GLint  x, GLint  y, GLsizei  width, GLsizei  height, GLint  border) {
//   (*fnptr)(target, level, internalformat, x, y, width, height, border);
// }
// static void  glowCopyTexImage2DEXT(GPCOPYTEXIMAGE2DEXT fnptr, GLenum  target, GLint  level, GLenum  internalformat, GLint  x, GLint  y, GLsizei  width, GLsizei  height, GLint  border) {
//   (*fnptr)(target, level, internalformat, x, y, width, height, border);
// }
// static void  glowCopyTexSubImage1D(GPCOPYTEXSUBIMAGE1D fnptr, GLenum  target, GLint  level, GLint  xoffset, GLint  x, GLint  y, GLsizei  width) {
//   (*fnptr)(target, level, xoffset, x, y, width);
// }
// static void  glowCopyTexSubImage1DEXT(GPCOPYTEXSUBIMAGE1DEXT fnptr, GLenum  target, GLint  level, GLint  xoffset, GLint  x, GLint  y, GLsizei  width) {
//   (*fnptr)(target, level, xoffset, x, y, width);
// }
// static void  glowCopyTexSubImage2D(GPCOPYTEXSUBIMAGE2D fnptr, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  x, GLint  y, GLsizei  width, GLsizei  height) {
//   (*fnptr)(target, level, xoffset, yoffset, x, y, width, height);
// }
// static void  glowCopyTexSubImage2DEXT(GPCOPYTEXSUBIMAGE2DEXT fnptr, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  x, GLint  y, GLsizei  width, GLsizei  height) {
//   (*fnptr)(target, level, xoffset, yoffset, x, y, width, height);
// }
// static void  glowCopyTexSubImage3D(GPCOPYTEXSUBIMAGE3D fnptr, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLint  x, GLint  y, GLsizei  width, GLsizei  height) {
//   (*fnptr)(target, level, xoffset, yoffset, zoffset, x, y, width, height);
// }
// static void  glowCopyTexSubImage3DEXT(GPCOPYTEXSUBIMAGE3DEXT fnptr, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLint  x, GLint  y, GLsizei  width, GLsizei  height) {
//   (*fnptr)(target, level, xoffset, yoffset, zoffset, x, y, width, height);
// }
// static void  glowCopyTextureImage1DEXT(GPCOPYTEXTUREIMAGE1DEXT fnptr, GLuint  texture, GLenum  target, GLint  level, GLenum  internalformat, GLint  x, GLint  y, GLsizei  width, GLint  border) {
//   (*fnptr)(texture, target, level, internalformat, x, y, width, border);
// }
// static void  glowCopyTextureImage2DEXT(GPCOPYTEXTUREIMAGE2DEXT fnptr, GLuint  texture, GLenum  target, GLint  level, GLenum  internalformat, GLint  x, GLint  y, GLsizei  width, GLsizei  height, GLint  border) {
//   (*fnptr)(texture, target, level, internalformat, x, y, width, height, border);
// }
// static void  glowCopyTextureSubImage1DEXT(GPCOPYTEXTURESUBIMAGE1DEXT fnptr, GLuint  texture, GLenum  target, GLint  level, GLint  xoffset, GLint  x, GLint  y, GLsizei  width) {
//   (*fnptr)(texture, target, level, xoffset, x, y, width);
// }
// static void  glowCopyTextureSubImage2DEXT(GPCOPYTEXTURESUBIMAGE2DEXT fnptr, GLuint  texture, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  x, GLint  y, GLsizei  width, GLsizei  height) {
//   (*fnptr)(texture, target, level, xoffset, yoffset, x, y, width, height);
// }
// static void  glowCopyTextureSubImage3DEXT(GPCOPYTEXTURESUBIMAGE3DEXT fnptr, GLuint  texture, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLint  x, GLint  y, GLsizei  width, GLsizei  height) {
//   (*fnptr)(texture, target, level, xoffset, yoffset, zoffset, x, y, width, height);
// }
// static void  glowCoverFillPathInstancedNV(GPCOVERFILLPATHINSTANCEDNV fnptr, GLsizei  numPaths, GLenum  pathNameType, const void * paths, GLuint  pathBase, GLenum  coverMode, GLenum  transformType, const GLfloat * transformValues) {
//   (*fnptr)(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
// }
// static void  glowCoverFillPathNV(GPCOVERFILLPATHNV fnptr, GLuint  path, GLenum  coverMode) {
//   (*fnptr)(path, coverMode);
// }
// static void  glowCoverStrokePathInstancedNV(GPCOVERSTROKEPATHINSTANCEDNV fnptr, GLsizei  numPaths, GLenum  pathNameType, const void * paths, GLuint  pathBase, GLenum  coverMode, GLenum  transformType, const GLfloat * transformValues) {
//   (*fnptr)(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
// }
// static void  glowCoverStrokePathNV(GPCOVERSTROKEPATHNV fnptr, GLuint  path, GLenum  coverMode) {
//   (*fnptr)(path, coverMode);
// }
// static void  glowCreatePerfQueryINTEL(GPCREATEPERFQUERYINTEL fnptr, GLuint  queryId, GLuint * queryHandle) {
//   (*fnptr)(queryId, queryHandle);
// }
// static GLuint  glowCreateProgram(GPCREATEPROGRAM fnptr) {
//   return (*fnptr)();
// }
// static GLhandleARB  glowCreateProgramObjectARB(GPCREATEPROGRAMOBJECTARB fnptr) {
//   return (*fnptr)();
// }
// static GLuint  glowCreateShader(GPCREATESHADER fnptr, GLenum  type) {
//   return (*fnptr)(type);
// }
// static GLhandleARB  glowCreateShaderObjectARB(GPCREATESHADEROBJECTARB fnptr, GLenum  shaderType) {
//   return (*fnptr)(shaderType);
// }
// static GLuint  glowCreateShaderProgramEXT(GPCREATESHADERPROGRAMEXT fnptr, GLenum  type, const GLchar * string) {
//   return (*fnptr)(type, string);
// }
// static GLuint  glowCreateShaderProgramv(GPCREATESHADERPROGRAMV fnptr, GLenum  type, GLsizei  count, const GLchar *const* strings) {
//   return (*fnptr)(type, count, strings);
// }
// static GLuint  glowCreateShaderProgramvEXT(GPCREATESHADERPROGRAMVEXT fnptr, GLenum  type, GLsizei  count, const GLchar ** strings) {
//   return (*fnptr)(type, count, strings);
// }
// static GLsync  glowCreateSyncFromCLeventARB(GPCREATESYNCFROMCLEVENTARB fnptr, struct _cl_context * context, struct _cl_event * event, GLbitfield  flags) {
//   return (*fnptr)(context, event, flags);
// }
// static void  glowCullFace(GPCULLFACE fnptr, GLenum  mode) {
//   (*fnptr)(mode);
// }
// static void  glowCullParameterdvEXT(GPCULLPARAMETERDVEXT fnptr, GLenum  pname, GLdouble * params) {
//   (*fnptr)(pname, params);
// }
// static void  glowCullParameterfvEXT(GPCULLPARAMETERFVEXT fnptr, GLenum  pname, GLfloat * params) {
//   (*fnptr)(pname, params);
// }
// static void  glowCurrentPaletteMatrixARB(GPCURRENTPALETTEMATRIXARB fnptr, GLint  index) {
//   (*fnptr)(index);
// }
// static void  glowDebugMessageCallback(GPDEBUGMESSAGECALLBACK fnptr, GLDEBUGPROC  callback, const void * userParam) {
//   (*fnptr)(glowCDebugCallback, userParam);
// }
// static void  glowDebugMessageCallbackAMD(GPDEBUGMESSAGECALLBACKAMD fnptr, GLDEBUGPROCAMD  callback, void * userParam) {
//   (*fnptr)(callback, userParam);
// }
// static void  glowDebugMessageCallbackARB(GPDEBUGMESSAGECALLBACKARB fnptr, GLDEBUGPROCARB  callback, const void * userParam) {
//   (*fnptr)(glowCDebugCallback, userParam);
// }
// static void  glowDebugMessageCallbackKHR(GPDEBUGMESSAGECALLBACKKHR fnptr, GLDEBUGPROCKHR  callback, const void * userParam) {
//   (*fnptr)(glowCDebugCallback, userParam);
// }
// static void  glowDebugMessageControl(GPDEBUGMESSAGECONTROL fnptr, GLenum  source, GLenum  type, GLenum  severity, GLsizei  count, const GLuint * ids, GLboolean  enabled) {
//   (*fnptr)(source, type, severity, count, ids, enabled);
// }
// static void  glowDebugMessageControlARB(GPDEBUGMESSAGECONTROLARB fnptr, GLenum  source, GLenum  type, GLenum  severity, GLsizei  count, const GLuint * ids, GLboolean  enabled) {
//   (*fnptr)(source, type, severity, count, ids, enabled);
// }
// static void  glowDebugMessageControlKHR(GPDEBUGMESSAGECONTROLKHR fnptr, GLenum  source, GLenum  type, GLenum  severity, GLsizei  count, const GLuint * ids, GLboolean  enabled) {
//   (*fnptr)(source, type, severity, count, ids, enabled);
// }
// static void  glowDebugMessageEnableAMD(GPDEBUGMESSAGEENABLEAMD fnptr, GLenum  category, GLenum  severity, GLsizei  count, const GLuint * ids, GLboolean  enabled) {
//   (*fnptr)(category, severity, count, ids, enabled);
// }
// static void  glowDebugMessageInsert(GPDEBUGMESSAGEINSERT fnptr, GLenum  source, GLenum  type, GLuint  id, GLenum  severity, GLsizei  length, const GLchar * buf) {
//   (*fnptr)(source, type, id, severity, length, buf);
// }
// static void  glowDebugMessageInsertAMD(GPDEBUGMESSAGEINSERTAMD fnptr, GLenum  category, GLenum  severity, GLuint  id, GLsizei  length, const GLchar * buf) {
//   (*fnptr)(category, severity, id, length, buf);
// }
// static void  glowDebugMessageInsertARB(GPDEBUGMESSAGEINSERTARB fnptr, GLenum  source, GLenum  type, GLuint  id, GLenum  severity, GLsizei  length, const GLchar * buf) {
//   (*fnptr)(source, type, id, severity, length, buf);
// }
// static void  glowDebugMessageInsertKHR(GPDEBUGMESSAGEINSERTKHR fnptr, GLenum  source, GLenum  type, GLuint  id, GLenum  severity, GLsizei  length, const GLchar * buf) {
//   (*fnptr)(source, type, id, severity, length, buf);
// }
// static void  glowDeformSGIX(GPDEFORMSGIX fnptr, GLbitfield  mask) {
//   (*fnptr)(mask);
// }
// static void  glowDeformationMap3dSGIX(GPDEFORMATIONMAP3DSGIX fnptr, GLenum  target, GLdouble  u1, GLdouble  u2, GLint  ustride, GLint  uorder, GLdouble  v1, GLdouble  v2, GLint  vstride, GLint  vorder, GLdouble  w1, GLdouble  w2, GLint  wstride, GLint  worder, const GLdouble * points) {
//   (*fnptr)(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
// }
// static void  glowDeformationMap3fSGIX(GPDEFORMATIONMAP3FSGIX fnptr, GLenum  target, GLfloat  u1, GLfloat  u2, GLint  ustride, GLint  uorder, GLfloat  v1, GLfloat  v2, GLint  vstride, GLint  vorder, GLfloat  w1, GLfloat  w2, GLint  wstride, GLint  worder, const GLfloat * points) {
//   (*fnptr)(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
// }
// static void  glowDeleteAsyncMarkersSGIX(GPDELETEASYNCMARKERSSGIX fnptr, GLuint  marker, GLsizei  range) {
//   (*fnptr)(marker, range);
// }
// static void  glowDeleteBuffers(GPDELETEBUFFERS fnptr, GLsizei  n, const GLuint * buffers) {
//   (*fnptr)(n, buffers);
// }
// static void  glowDeleteBuffersARB(GPDELETEBUFFERSARB fnptr, GLsizei  n, const GLuint * buffers) {
//   (*fnptr)(n, buffers);
// }
// static void  glowDeleteFencesAPPLE(GPDELETEFENCESAPPLE fnptr, GLsizei  n, const GLuint * fences) {
//   (*fnptr)(n, fences);
// }
// static void  glowDeleteFencesNV(GPDELETEFENCESNV fnptr, GLsizei  n, const GLuint * fences) {
//   (*fnptr)(n, fences);
// }
// static void  glowDeleteFragmentShaderATI(GPDELETEFRAGMENTSHADERATI fnptr, GLuint  id) {
//   (*fnptr)(id);
// }
// static void  glowDeleteFramebuffers(GPDELETEFRAMEBUFFERS fnptr, GLsizei  n, const GLuint * framebuffers) {
//   (*fnptr)(n, framebuffers);
// }
// static void  glowDeleteFramebuffersEXT(GPDELETEFRAMEBUFFERSEXT fnptr, GLsizei  n, const GLuint * framebuffers) {
//   (*fnptr)(n, framebuffers);
// }
// static void  glowDeleteNamedStringARB(GPDELETENAMEDSTRINGARB fnptr, GLint  namelen, const GLchar * name) {
//   (*fnptr)(namelen, name);
// }
// static void  glowDeleteNamesAMD(GPDELETENAMESAMD fnptr, GLenum  identifier, GLuint  num, const GLuint * names) {
//   (*fnptr)(identifier, num, names);
// }
// static void  glowDeleteObjectARB(GPDELETEOBJECTARB fnptr, GLhandleARB  obj) {
//   (*fnptr)(obj);
// }
// static void  glowDeleteOcclusionQueriesNV(GPDELETEOCCLUSIONQUERIESNV fnptr, GLsizei  n, const GLuint * ids) {
//   (*fnptr)(n, ids);
// }
// static void  glowDeletePathsNV(GPDELETEPATHSNV fnptr, GLuint  path, GLsizei  range) {
//   (*fnptr)(path, range);
// }
// static void  glowDeletePerfMonitorsAMD(GPDELETEPERFMONITORSAMD fnptr, GLsizei  n, GLuint * monitors) {
//   (*fnptr)(n, monitors);
// }
// static void  glowDeletePerfQueryINTEL(GPDELETEPERFQUERYINTEL fnptr, GLuint  queryHandle) {
//   (*fnptr)(queryHandle);
// }
// static void  glowDeleteProgram(GPDELETEPROGRAM fnptr, GLuint  program) {
//   (*fnptr)(program);
// }
// static void  glowDeleteProgramPipelines(GPDELETEPROGRAMPIPELINES fnptr, GLsizei  n, const GLuint * pipelines) {
//   (*fnptr)(n, pipelines);
// }
// static void  glowDeleteProgramPipelinesEXT(GPDELETEPROGRAMPIPELINESEXT fnptr, GLsizei  n, const GLuint * pipelines) {
//   (*fnptr)(n, pipelines);
// }
// static void  glowDeleteProgramsARB(GPDELETEPROGRAMSARB fnptr, GLsizei  n, const GLuint * programs) {
//   (*fnptr)(n, programs);
// }
// static void  glowDeleteProgramsNV(GPDELETEPROGRAMSNV fnptr, GLsizei  n, const GLuint * programs) {
//   (*fnptr)(n, programs);
// }
// static void  glowDeleteQueries(GPDELETEQUERIES fnptr, GLsizei  n, const GLuint * ids) {
//   (*fnptr)(n, ids);
// }
// static void  glowDeleteQueriesARB(GPDELETEQUERIESARB fnptr, GLsizei  n, const GLuint * ids) {
//   (*fnptr)(n, ids);
// }
// static void  glowDeleteRenderbuffers(GPDELETERENDERBUFFERS fnptr, GLsizei  n, const GLuint * renderbuffers) {
//   (*fnptr)(n, renderbuffers);
// }
// static void  glowDeleteRenderbuffersEXT(GPDELETERENDERBUFFERSEXT fnptr, GLsizei  n, const GLuint * renderbuffers) {
//   (*fnptr)(n, renderbuffers);
// }
// static void  glowDeleteSamplers(GPDELETESAMPLERS fnptr, GLsizei  count, const GLuint * samplers) {
//   (*fnptr)(count, samplers);
// }
// static void  glowDeleteShader(GPDELETESHADER fnptr, GLuint  shader) {
//   (*fnptr)(shader);
// }
// static void  glowDeleteSync(GPDELETESYNC fnptr, GLsync  sync) {
//   (*fnptr)(sync);
// }
// static void  glowDeleteTextures(GPDELETETEXTURES fnptr, GLsizei  n, const GLuint * textures) {
//   (*fnptr)(n, textures);
// }
// static void  glowDeleteTexturesEXT(GPDELETETEXTURESEXT fnptr, GLsizei  n, const GLuint * textures) {
//   (*fnptr)(n, textures);
// }
// static void  glowDeleteTransformFeedbacks(GPDELETETRANSFORMFEEDBACKS fnptr, GLsizei  n, const GLuint * ids) {
//   (*fnptr)(n, ids);
// }
// static void  glowDeleteTransformFeedbacksNV(GPDELETETRANSFORMFEEDBACKSNV fnptr, GLsizei  n, const GLuint * ids) {
//   (*fnptr)(n, ids);
// }
// static void  glowDeleteVertexArrays(GPDELETEVERTEXARRAYS fnptr, GLsizei  n, const GLuint * arrays) {
//   (*fnptr)(n, arrays);
// }
// static void  glowDeleteVertexArraysAPPLE(GPDELETEVERTEXARRAYSAPPLE fnptr, GLsizei  n, const GLuint * arrays) {
//   (*fnptr)(n, arrays);
// }
// static void  glowDeleteVertexShaderEXT(GPDELETEVERTEXSHADEREXT fnptr, GLuint  id) {
//   (*fnptr)(id);
// }
// static void  glowDepthBoundsEXT(GPDEPTHBOUNDSEXT fnptr, GLclampd  zmin, GLclampd  zmax) {
//   (*fnptr)(zmin, zmax);
// }
// static void  glowDepthBoundsdNV(GPDEPTHBOUNDSDNV fnptr, GLdouble  zmin, GLdouble  zmax) {
//   (*fnptr)(zmin, zmax);
// }
// static void  glowDepthFunc(GPDEPTHFUNC fnptr, GLenum  func) {
//   (*fnptr)(func);
// }
// static void  glowDepthMask(GPDEPTHMASK fnptr, GLboolean  flag) {
//   (*fnptr)(flag);
// }
// static void  glowDepthRange(GPDEPTHRANGE fnptr, GLdouble  xnear, GLdouble  xfar) {
//   (*fnptr)(xnear, xfar);
// }
// static void  glowDepthRangeArrayv(GPDEPTHRANGEARRAYV fnptr, GLuint  first, GLsizei  count, const GLdouble * v) {
//   (*fnptr)(first, count, v);
// }
// static void  glowDepthRangeIndexed(GPDEPTHRANGEINDEXED fnptr, GLuint  index, GLdouble  n, GLdouble  f) {
//   (*fnptr)(index, n, f);
// }
// static void  glowDepthRangedNV(GPDEPTHRANGEDNV fnptr, GLdouble  zNear, GLdouble  zFar) {
//   (*fnptr)(zNear, zFar);
// }
// static void  glowDepthRangef(GPDEPTHRANGEF fnptr, GLfloat  n, GLfloat  f) {
//   (*fnptr)(n, f);
// }
// static void  glowDepthRangefOES(GPDEPTHRANGEFOES fnptr, GLclampf  n, GLclampf  f) {
//   (*fnptr)(n, f);
// }
// static void  glowDepthRangexOES(GPDEPTHRANGEXOES fnptr, GLfixed  n, GLfixed  f) {
//   (*fnptr)(n, f);
// }
// static void  glowDetachObjectARB(GPDETACHOBJECTARB fnptr, GLhandleARB  containerObj, GLhandleARB  attachedObj) {
//   (*fnptr)(containerObj, attachedObj);
// }
// static void  glowDetachShader(GPDETACHSHADER fnptr, GLuint  program, GLuint  shader) {
//   (*fnptr)(program, shader);
// }
// static void  glowDetailTexFuncSGIS(GPDETAILTEXFUNCSGIS fnptr, GLenum  target, GLsizei  n, const GLfloat * points) {
//   (*fnptr)(target, n, points);
// }
// static void  glowDisable(GPDISABLE fnptr, GLenum  cap) {
//   (*fnptr)(cap);
// }
// static void  glowDisableClientStateIndexedEXT(GPDISABLECLIENTSTATEINDEXEDEXT fnptr, GLenum  array, GLuint  index) {
//   (*fnptr)(array, index);
// }
// static void  glowDisableClientStateiEXT(GPDISABLECLIENTSTATEIEXT fnptr, GLenum  array, GLuint  index) {
//   (*fnptr)(array, index);
// }
// static void  glowDisableIndexedEXT(GPDISABLEINDEXEDEXT fnptr, GLenum  target, GLuint  index) {
//   (*fnptr)(target, index);
// }
// static void  glowDisableVariantClientStateEXT(GPDISABLEVARIANTCLIENTSTATEEXT fnptr, GLuint  id) {
//   (*fnptr)(id);
// }
// static void  glowDisableVertexArrayAttribEXT(GPDISABLEVERTEXARRAYATTRIBEXT fnptr, GLuint  vaobj, GLuint  index) {
//   (*fnptr)(vaobj, index);
// }
// static void  glowDisableVertexArrayEXT(GPDISABLEVERTEXARRAYEXT fnptr, GLuint  vaobj, GLenum  array) {
//   (*fnptr)(vaobj, array);
// }
// static void  glowDisableVertexAttribAPPLE(GPDISABLEVERTEXATTRIBAPPLE fnptr, GLuint  index, GLenum  pname) {
//   (*fnptr)(index, pname);
// }
// static void  glowDisableVertexAttribArray(GPDISABLEVERTEXATTRIBARRAY fnptr, GLuint  index) {
//   (*fnptr)(index);
// }
// static void  glowDisableVertexAttribArrayARB(GPDISABLEVERTEXATTRIBARRAYARB fnptr, GLuint  index) {
//   (*fnptr)(index);
// }
// static void  glowDisablei(GPDISABLEI fnptr, GLenum  target, GLuint  index) {
//   (*fnptr)(target, index);
// }
// static void  glowDispatchCompute(GPDISPATCHCOMPUTE fnptr, GLuint  num_groups_x, GLuint  num_groups_y, GLuint  num_groups_z) {
//   (*fnptr)(num_groups_x, num_groups_y, num_groups_z);
// }
// static void  glowDispatchComputeGroupSizeARB(GPDISPATCHCOMPUTEGROUPSIZEARB fnptr, GLuint  num_groups_x, GLuint  num_groups_y, GLuint  num_groups_z, GLuint  group_size_x, GLuint  group_size_y, GLuint  group_size_z) {
//   (*fnptr)(num_groups_x, num_groups_y, num_groups_z, group_size_x, group_size_y, group_size_z);
// }
// static void  glowDispatchComputeIndirect(GPDISPATCHCOMPUTEINDIRECT fnptr, GLintptr  indirect) {
//   (*fnptr)(indirect);
// }
// static void  glowDrawArrays(GPDRAWARRAYS fnptr, GLenum  mode, GLint  first, GLsizei  count) {
//   (*fnptr)(mode, first, count);
// }
// static void  glowDrawArraysEXT(GPDRAWARRAYSEXT fnptr, GLenum  mode, GLint  first, GLsizei  count) {
//   (*fnptr)(mode, first, count);
// }
// static void  glowDrawArraysIndirect(GPDRAWARRAYSINDIRECT fnptr, GLenum  mode, const void * indirect) {
//   (*fnptr)(mode, indirect);
// }
// static void  glowDrawArraysInstanced(GPDRAWARRAYSINSTANCED fnptr, GLenum  mode, GLint  first, GLsizei  count, GLsizei  instancecount) {
//   (*fnptr)(mode, first, count, instancecount);
// }
// static void  glowDrawArraysInstancedARB(GPDRAWARRAYSINSTANCEDARB fnptr, GLenum  mode, GLint  first, GLsizei  count, GLsizei  primcount) {
//   (*fnptr)(mode, first, count, primcount);
// }
// static void  glowDrawArraysInstancedBaseInstance(GPDRAWARRAYSINSTANCEDBASEINSTANCE fnptr, GLenum  mode, GLint  first, GLsizei  count, GLsizei  instancecount, GLuint  baseinstance) {
//   (*fnptr)(mode, first, count, instancecount, baseinstance);
// }
// static void  glowDrawArraysInstancedEXT(GPDRAWARRAYSINSTANCEDEXT fnptr, GLenum  mode, GLint  start, GLsizei  count, GLsizei  primcount) {
//   (*fnptr)(mode, start, count, primcount);
// }
// static void  glowDrawBuffer(GPDRAWBUFFER fnptr, GLenum  mode) {
//   (*fnptr)(mode);
// }
// static void  glowDrawBuffers(GPDRAWBUFFERS fnptr, GLsizei  n, const GLenum * bufs) {
//   (*fnptr)(n, bufs);
// }
// static void  glowDrawBuffersARB(GPDRAWBUFFERSARB fnptr, GLsizei  n, const GLenum * bufs) {
//   (*fnptr)(n, bufs);
// }
// static void  glowDrawBuffersATI(GPDRAWBUFFERSATI fnptr, GLsizei  n, const GLenum * bufs) {
//   (*fnptr)(n, bufs);
// }
// static void  glowDrawElementArrayAPPLE(GPDRAWELEMENTARRAYAPPLE fnptr, GLenum  mode, GLint  first, GLsizei  count) {
//   (*fnptr)(mode, first, count);
// }
// static void  glowDrawElementArrayATI(GPDRAWELEMENTARRAYATI fnptr, GLenum  mode, GLsizei  count) {
//   (*fnptr)(mode, count);
// }
// static void  glowDrawElements(GPDRAWELEMENTS fnptr, GLenum  mode, GLsizei  count, GLenum  type, const void * indices) {
//   (*fnptr)(mode, count, type, indices);
// }
// static void  glowDrawElementsBaseVertex(GPDRAWELEMENTSBASEVERTEX fnptr, GLenum  mode, GLsizei  count, GLenum  type, const void * indices, GLint  basevertex) {
//   (*fnptr)(mode, count, type, indices, basevertex);
// }
// static void  glowDrawElementsIndirect(GPDRAWELEMENTSINDIRECT fnptr, GLenum  mode, GLenum  type, const void * indirect) {
//   (*fnptr)(mode, type, indirect);
// }
// static void  glowDrawElementsInstanced(GPDRAWELEMENTSINSTANCED fnptr, GLenum  mode, GLsizei  count, GLenum  type, const void * indices, GLsizei  instancecount) {
//   (*fnptr)(mode, count, type, indices, instancecount);
// }
// static void  glowDrawElementsInstancedARB(GPDRAWELEMENTSINSTANCEDARB fnptr, GLenum  mode, GLsizei  count, GLenum  type, const void * indices, GLsizei  primcount) {
//   (*fnptr)(mode, count, type, indices, primcount);
// }
// static void  glowDrawElementsInstancedBaseInstance(GPDRAWELEMENTSINSTANCEDBASEINSTANCE fnptr, GLenum  mode, GLsizei  count, GLenum  type, const void * indices, GLsizei  instancecount, GLuint  baseinstance) {
//   (*fnptr)(mode, count, type, indices, instancecount, baseinstance);
// }
// static void  glowDrawElementsInstancedBaseVertex(GPDRAWELEMENTSINSTANCEDBASEVERTEX fnptr, GLenum  mode, GLsizei  count, GLenum  type, const void * indices, GLsizei  instancecount, GLint  basevertex) {
//   (*fnptr)(mode, count, type, indices, instancecount, basevertex);
// }
// static void  glowDrawElementsInstancedBaseVertexBaseInstance(GPDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCE fnptr, GLenum  mode, GLsizei  count, GLenum  type, const void * indices, GLsizei  instancecount, GLint  basevertex, GLuint  baseinstance) {
//   (*fnptr)(mode, count, type, indices, instancecount, basevertex, baseinstance);
// }
// static void  glowDrawElementsInstancedEXT(GPDRAWELEMENTSINSTANCEDEXT fnptr, GLenum  mode, GLsizei  count, GLenum  type, const void * indices, GLsizei  primcount) {
//   (*fnptr)(mode, count, type, indices, primcount);
// }
// static void  glowDrawMeshArraysSUN(GPDRAWMESHARRAYSSUN fnptr, GLenum  mode, GLint  first, GLsizei  count, GLsizei  width) {
//   (*fnptr)(mode, first, count, width);
// }
// static void  glowDrawRangeElementArrayAPPLE(GPDRAWRANGEELEMENTARRAYAPPLE fnptr, GLenum  mode, GLuint  start, GLuint  end, GLint  first, GLsizei  count) {
//   (*fnptr)(mode, start, end, first, count);
// }
// static void  glowDrawRangeElementArrayATI(GPDRAWRANGEELEMENTARRAYATI fnptr, GLenum  mode, GLuint  start, GLuint  end, GLsizei  count) {
//   (*fnptr)(mode, start, end, count);
// }
// static void  glowDrawRangeElements(GPDRAWRANGEELEMENTS fnptr, GLenum  mode, GLuint  start, GLuint  end, GLsizei  count, GLenum  type, const void * indices) {
//   (*fnptr)(mode, start, end, count, type, indices);
// }
// static void  glowDrawRangeElementsBaseVertex(GPDRAWRANGEELEMENTSBASEVERTEX fnptr, GLenum  mode, GLuint  start, GLuint  end, GLsizei  count, GLenum  type, const void * indices, GLint  basevertex) {
//   (*fnptr)(mode, start, end, count, type, indices, basevertex);
// }
// static void  glowDrawRangeElementsEXT(GPDRAWRANGEELEMENTSEXT fnptr, GLenum  mode, GLuint  start, GLuint  end, GLsizei  count, GLenum  type, const void * indices) {
//   (*fnptr)(mode, start, end, count, type, indices);
// }
// static void  glowDrawTextureNV(GPDRAWTEXTURENV fnptr, GLuint  texture, GLuint  sampler, GLfloat  x0, GLfloat  y0, GLfloat  x1, GLfloat  y1, GLfloat  z, GLfloat  s0, GLfloat  t0, GLfloat  s1, GLfloat  t1) {
//   (*fnptr)(texture, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1);
// }
// static void  glowDrawTransformFeedback(GPDRAWTRANSFORMFEEDBACK fnptr, GLenum  mode, GLuint  id) {
//   (*fnptr)(mode, id);
// }
// static void  glowDrawTransformFeedbackInstanced(GPDRAWTRANSFORMFEEDBACKINSTANCED fnptr, GLenum  mode, GLuint  id, GLsizei  instancecount) {
//   (*fnptr)(mode, id, instancecount);
// }
// static void  glowDrawTransformFeedbackNV(GPDRAWTRANSFORMFEEDBACKNV fnptr, GLenum  mode, GLuint  id) {
//   (*fnptr)(mode, id);
// }
// static void  glowDrawTransformFeedbackStream(GPDRAWTRANSFORMFEEDBACKSTREAM fnptr, GLenum  mode, GLuint  id, GLuint  stream) {
//   (*fnptr)(mode, id, stream);
// }
// static void  glowDrawTransformFeedbackStreamInstanced(GPDRAWTRANSFORMFEEDBACKSTREAMINSTANCED fnptr, GLenum  mode, GLuint  id, GLuint  stream, GLsizei  instancecount) {
//   (*fnptr)(mode, id, stream, instancecount);
// }
// static void  glowEdgeFlagFormatNV(GPEDGEFLAGFORMATNV fnptr, GLsizei  stride) {
//   (*fnptr)(stride);
// }
// static void  glowEdgeFlagPointerEXT(GPEDGEFLAGPOINTEREXT fnptr, GLsizei  stride, GLsizei  count, const GLboolean * pointer) {
//   (*fnptr)(stride, count, pointer);
// }
// static void  glowEdgeFlagPointerListIBM(GPEDGEFLAGPOINTERLISTIBM fnptr, GLint  stride, const GLboolean ** pointer, GLint  ptrstride) {
//   (*fnptr)(stride, pointer, ptrstride);
// }
// static void  glowElementPointerAPPLE(GPELEMENTPOINTERAPPLE fnptr, GLenum  type, const void * pointer) {
//   (*fnptr)(type, pointer);
// }
// static void  glowElementPointerATI(GPELEMENTPOINTERATI fnptr, GLenum  type, const void * pointer) {
//   (*fnptr)(type, pointer);
// }
// static void  glowEnable(GPENABLE fnptr, GLenum  cap) {
//   (*fnptr)(cap);
// }
// static void  glowEnableClientStateIndexedEXT(GPENABLECLIENTSTATEINDEXEDEXT fnptr, GLenum  array, GLuint  index) {
//   (*fnptr)(array, index);
// }
// static void  glowEnableClientStateiEXT(GPENABLECLIENTSTATEIEXT fnptr, GLenum  array, GLuint  index) {
//   (*fnptr)(array, index);
// }
// static void  glowEnableIndexedEXT(GPENABLEINDEXEDEXT fnptr, GLenum  target, GLuint  index) {
//   (*fnptr)(target, index);
// }
// static void  glowEnableVariantClientStateEXT(GPENABLEVARIANTCLIENTSTATEEXT fnptr, GLuint  id) {
//   (*fnptr)(id);
// }
// static void  glowEnableVertexArrayAttribEXT(GPENABLEVERTEXARRAYATTRIBEXT fnptr, GLuint  vaobj, GLuint  index) {
//   (*fnptr)(vaobj, index);
// }
// static void  glowEnableVertexArrayEXT(GPENABLEVERTEXARRAYEXT fnptr, GLuint  vaobj, GLenum  array) {
//   (*fnptr)(vaobj, array);
// }
// static void  glowEnableVertexAttribAPPLE(GPENABLEVERTEXATTRIBAPPLE fnptr, GLuint  index, GLenum  pname) {
//   (*fnptr)(index, pname);
// }
// static void  glowEnableVertexAttribArray(GPENABLEVERTEXATTRIBARRAY fnptr, GLuint  index) {
//   (*fnptr)(index);
// }
// static void  glowEnableVertexAttribArrayARB(GPENABLEVERTEXATTRIBARRAYARB fnptr, GLuint  index) {
//   (*fnptr)(index);
// }
// static void  glowEnablei(GPENABLEI fnptr, GLenum  target, GLuint  index) {
//   (*fnptr)(target, index);
// }
// static void  glowEndConditionalRender(GPENDCONDITIONALRENDER fnptr) {
//   (*fnptr)();
// }
// static void  glowEndConditionalRenderNV(GPENDCONDITIONALRENDERNV fnptr) {
//   (*fnptr)();
// }
// static void  glowEndConditionalRenderNVX(GPENDCONDITIONALRENDERNVX fnptr) {
//   (*fnptr)();
// }
// static void  glowEndFragmentShaderATI(GPENDFRAGMENTSHADERATI fnptr) {
//   (*fnptr)();
// }
// static void  glowEndOcclusionQueryNV(GPENDOCCLUSIONQUERYNV fnptr) {
//   (*fnptr)();
// }
// static void  glowEndPerfMonitorAMD(GPENDPERFMONITORAMD fnptr, GLuint  monitor) {
//   (*fnptr)(monitor);
// }
// static void  glowEndPerfQueryINTEL(GPENDPERFQUERYINTEL fnptr, GLuint  queryHandle) {
//   (*fnptr)(queryHandle);
// }
// static void  glowEndQuery(GPENDQUERY fnptr, GLenum  target) {
//   (*fnptr)(target);
// }
// static void  glowEndQueryARB(GPENDQUERYARB fnptr, GLenum  target) {
//   (*fnptr)(target);
// }
// static void  glowEndQueryIndexed(GPENDQUERYINDEXED fnptr, GLenum  target, GLuint  index) {
//   (*fnptr)(target, index);
// }
// static void  glowEndTransformFeedback(GPENDTRANSFORMFEEDBACK fnptr) {
//   (*fnptr)();
// }
// static void  glowEndTransformFeedbackEXT(GPENDTRANSFORMFEEDBACKEXT fnptr) {
//   (*fnptr)();
// }
// static void  glowEndTransformFeedbackNV(GPENDTRANSFORMFEEDBACKNV fnptr) {
//   (*fnptr)();
// }
// static void  glowEndVertexShaderEXT(GPENDVERTEXSHADEREXT fnptr) {
//   (*fnptr)();
// }
// static void  glowEndVideoCaptureNV(GPENDVIDEOCAPTURENV fnptr, GLuint  video_capture_slot) {
//   (*fnptr)(video_capture_slot);
// }
// static void  glowEvalCoord1xOES(GPEVALCOORD1XOES fnptr, GLfixed  u) {
//   (*fnptr)(u);
// }
// static void  glowEvalCoord1xvOES(GPEVALCOORD1XVOES fnptr, const GLfixed * coords) {
//   (*fnptr)(coords);
// }
// static void  glowEvalCoord2xOES(GPEVALCOORD2XOES fnptr, GLfixed  u, GLfixed  v) {
//   (*fnptr)(u, v);
// }
// static void  glowEvalCoord2xvOES(GPEVALCOORD2XVOES fnptr, const GLfixed * coords) {
//   (*fnptr)(coords);
// }
// static void  glowEvalMapsNV(GPEVALMAPSNV fnptr, GLenum  target, GLenum  mode) {
//   (*fnptr)(target, mode);
// }
// static void  glowExecuteProgramNV(GPEXECUTEPROGRAMNV fnptr, GLenum  target, GLuint  id, const GLfloat * params) {
//   (*fnptr)(target, id, params);
// }
// static void  glowExtractComponentEXT(GPEXTRACTCOMPONENTEXT fnptr, GLuint  res, GLuint  src, GLuint  num) {
//   (*fnptr)(res, src, num);
// }
// static void  glowFeedbackBufferxOES(GPFEEDBACKBUFFERXOES fnptr, GLsizei  n, GLenum  type, const GLfixed * buffer) {
//   (*fnptr)(n, type, buffer);
// }
// static GLsync  glowFenceSync(GPFENCESYNC fnptr, GLenum  condition, GLbitfield  flags) {
//   return (*fnptr)(condition, flags);
// }
// static void  glowFinalCombinerInputNV(GPFINALCOMBINERINPUTNV fnptr, GLenum  variable, GLenum  input, GLenum  mapping, GLenum  componentUsage) {
//   (*fnptr)(variable, input, mapping, componentUsage);
// }
// static void  glowFinish(GPFINISH fnptr) {
//   (*fnptr)();
// }
// static GLint  glowFinishAsyncSGIX(GPFINISHASYNCSGIX fnptr, GLuint * markerp) {
//   return (*fnptr)(markerp);
// }
// static void  glowFinishFenceAPPLE(GPFINISHFENCEAPPLE fnptr, GLuint  fence) {
//   (*fnptr)(fence);
// }
// static void  glowFinishFenceNV(GPFINISHFENCENV fnptr, GLuint  fence) {
//   (*fnptr)(fence);
// }
// static void  glowFinishObjectAPPLE(GPFINISHOBJECTAPPLE fnptr, GLenum  object, GLint  name) {
//   (*fnptr)(object, name);
// }
// static void  glowFinishTextureSUNX(GPFINISHTEXTURESUNX fnptr) {
//   (*fnptr)();
// }
// static void  glowFlush(GPFLUSH fnptr) {
//   (*fnptr)();
// }
// static void  glowFlushMappedBufferRange(GPFLUSHMAPPEDBUFFERRANGE fnptr, GLenum  target, GLintptr  offset, GLsizeiptr  length) {
//   (*fnptr)(target, offset, length);
// }
// static void  glowFlushMappedBufferRangeAPPLE(GPFLUSHMAPPEDBUFFERRANGEAPPLE fnptr, GLenum  target, GLintptr  offset, GLsizeiptr  size) {
//   (*fnptr)(target, offset, size);
// }
// static void  glowFlushMappedNamedBufferRangeEXT(GPFLUSHMAPPEDNAMEDBUFFERRANGEEXT fnptr, GLuint  buffer, GLintptr  offset, GLsizeiptr  length) {
//   (*fnptr)(buffer, offset, length);
// }
// static void  glowFlushPixelDataRangeNV(GPFLUSHPIXELDATARANGENV fnptr, GLenum  target) {
//   (*fnptr)(target);
// }
// static void  glowFlushRasterSGIX(GPFLUSHRASTERSGIX fnptr) {
//   (*fnptr)();
// }
// static void  glowFlushStaticDataIBM(GPFLUSHSTATICDATAIBM fnptr, GLenum  target) {
//   (*fnptr)(target);
// }
// static void  glowFlushVertexArrayRangeAPPLE(GPFLUSHVERTEXARRAYRANGEAPPLE fnptr, GLsizei  length, void * pointer) {
//   (*fnptr)(length, pointer);
// }
// static void  glowFlushVertexArrayRangeNV(GPFLUSHVERTEXARRAYRANGENV fnptr) {
//   (*fnptr)();
// }
// static void  glowFogCoordFormatNV(GPFOGCOORDFORMATNV fnptr, GLenum  type, GLsizei  stride) {
//   (*fnptr)(type, stride);
// }
// static void  glowFogCoordPointerEXT(GPFOGCOORDPOINTEREXT fnptr, GLenum  type, GLsizei  stride, const void * pointer) {
//   (*fnptr)(type, stride, pointer);
// }
// static void  glowFogCoordPointerListIBM(GPFOGCOORDPOINTERLISTIBM fnptr, GLenum  type, GLint  stride, const void ** pointer, GLint  ptrstride) {
//   (*fnptr)(type, stride, pointer, ptrstride);
// }
// static void  glowFogCoorddEXT(GPFOGCOORDDEXT fnptr, GLdouble  coord) {
//   (*fnptr)(coord);
// }
// static void  glowFogCoorddvEXT(GPFOGCOORDDVEXT fnptr, const GLdouble * coord) {
//   (*fnptr)(coord);
// }
// static void  glowFogCoordfEXT(GPFOGCOORDFEXT fnptr, GLfloat  coord) {
//   (*fnptr)(coord);
// }
// static void  glowFogCoordfvEXT(GPFOGCOORDFVEXT fnptr, const GLfloat * coord) {
//   (*fnptr)(coord);
// }
// static void  glowFogCoordhNV(GPFOGCOORDHNV fnptr, GLhalfNV  fog) {
//   (*fnptr)(fog);
// }
// static void  glowFogCoordhvNV(GPFOGCOORDHVNV fnptr, const GLhalfNV * fog) {
//   (*fnptr)(fog);
// }
// static void  glowFogFuncSGIS(GPFOGFUNCSGIS fnptr, GLsizei  n, const GLfloat * points) {
//   (*fnptr)(n, points);
// }
// static void  glowFogxOES(GPFOGXOES fnptr, GLenum  pname, GLfixed  param) {
//   (*fnptr)(pname, param);
// }
// static void  glowFogxvOES(GPFOGXVOES fnptr, GLenum  pname, const GLfixed * param) {
//   (*fnptr)(pname, param);
// }
// static void  glowFragmentColorMaterialSGIX(GPFRAGMENTCOLORMATERIALSGIX fnptr, GLenum  face, GLenum  mode) {
//   (*fnptr)(face, mode);
// }
// static void  glowFragmentLightModelfSGIX(GPFRAGMENTLIGHTMODELFSGIX fnptr, GLenum  pname, GLfloat  param) {
//   (*fnptr)(pname, param);
// }
// static void  glowFragmentLightModelfvSGIX(GPFRAGMENTLIGHTMODELFVSGIX fnptr, GLenum  pname, const GLfloat * params) {
//   (*fnptr)(pname, params);
// }
// static void  glowFragmentLightModeliSGIX(GPFRAGMENTLIGHTMODELISGIX fnptr, GLenum  pname, GLint  param) {
//   (*fnptr)(pname, param);
// }
// static void  glowFragmentLightModelivSGIX(GPFRAGMENTLIGHTMODELIVSGIX fnptr, GLenum  pname, const GLint * params) {
//   (*fnptr)(pname, params);
// }
// static void  glowFragmentLightfSGIX(GPFRAGMENTLIGHTFSGIX fnptr, GLenum  light, GLenum  pname, GLfloat  param) {
//   (*fnptr)(light, pname, param);
// }
// static void  glowFragmentLightfvSGIX(GPFRAGMENTLIGHTFVSGIX fnptr, GLenum  light, GLenum  pname, const GLfloat * params) {
//   (*fnptr)(light, pname, params);
// }
// static void  glowFragmentLightiSGIX(GPFRAGMENTLIGHTISGIX fnptr, GLenum  light, GLenum  pname, GLint  param) {
//   (*fnptr)(light, pname, param);
// }
// static void  glowFragmentLightivSGIX(GPFRAGMENTLIGHTIVSGIX fnptr, GLenum  light, GLenum  pname, const GLint * params) {
//   (*fnptr)(light, pname, params);
// }
// static void  glowFragmentMaterialfSGIX(GPFRAGMENTMATERIALFSGIX fnptr, GLenum  face, GLenum  pname, GLfloat  param) {
//   (*fnptr)(face, pname, param);
// }
// static void  glowFragmentMaterialfvSGIX(GPFRAGMENTMATERIALFVSGIX fnptr, GLenum  face, GLenum  pname, const GLfloat * params) {
//   (*fnptr)(face, pname, params);
// }
// static void  glowFragmentMaterialiSGIX(GPFRAGMENTMATERIALISGIX fnptr, GLenum  face, GLenum  pname, GLint  param) {
//   (*fnptr)(face, pname, param);
// }
// static void  glowFragmentMaterialivSGIX(GPFRAGMENTMATERIALIVSGIX fnptr, GLenum  face, GLenum  pname, const GLint * params) {
//   (*fnptr)(face, pname, params);
// }
// static void  glowFrameTerminatorGREMEDY(GPFRAMETERMINATORGREMEDY fnptr) {
//   (*fnptr)();
// }
// static void  glowFrameZoomSGIX(GPFRAMEZOOMSGIX fnptr, GLint  factor) {
//   (*fnptr)(factor);
// }
// static void  glowFramebufferDrawBufferEXT(GPFRAMEBUFFERDRAWBUFFEREXT fnptr, GLuint  framebuffer, GLenum  mode) {
//   (*fnptr)(framebuffer, mode);
// }
// static void  glowFramebufferDrawBuffersEXT(GPFRAMEBUFFERDRAWBUFFERSEXT fnptr, GLuint  framebuffer, GLsizei  n, const GLenum * bufs) {
//   (*fnptr)(framebuffer, n, bufs);
// }
// static void  glowFramebufferParameteri(GPFRAMEBUFFERPARAMETERI fnptr, GLenum  target, GLenum  pname, GLint  param) {
//   (*fnptr)(target, pname, param);
// }
// static void  glowFramebufferReadBufferEXT(GPFRAMEBUFFERREADBUFFEREXT fnptr, GLuint  framebuffer, GLenum  mode) {
//   (*fnptr)(framebuffer, mode);
// }
// static void  glowFramebufferRenderbuffer(GPFRAMEBUFFERRENDERBUFFER fnptr, GLenum  target, GLenum  attachment, GLenum  renderbuffertarget, GLuint  renderbuffer) {
//   (*fnptr)(target, attachment, renderbuffertarget, renderbuffer);
// }
// static void  glowFramebufferRenderbufferEXT(GPFRAMEBUFFERRENDERBUFFEREXT fnptr, GLenum  target, GLenum  attachment, GLenum  renderbuffertarget, GLuint  renderbuffer) {
//   (*fnptr)(target, attachment, renderbuffertarget, renderbuffer);
// }
// static void  glowFramebufferTexture(GPFRAMEBUFFERTEXTURE fnptr, GLenum  target, GLenum  attachment, GLuint  texture, GLint  level) {
//   (*fnptr)(target, attachment, texture, level);
// }
// static void  glowFramebufferTexture1D(GPFRAMEBUFFERTEXTURE1D fnptr, GLenum  target, GLenum  attachment, GLenum  textarget, GLuint  texture, GLint  level) {
//   (*fnptr)(target, attachment, textarget, texture, level);
// }
// static void  glowFramebufferTexture1DEXT(GPFRAMEBUFFERTEXTURE1DEXT fnptr, GLenum  target, GLenum  attachment, GLenum  textarget, GLuint  texture, GLint  level) {
//   (*fnptr)(target, attachment, textarget, texture, level);
// }
// static void  glowFramebufferTexture2D(GPFRAMEBUFFERTEXTURE2D fnptr, GLenum  target, GLenum  attachment, GLenum  textarget, GLuint  texture, GLint  level) {
//   (*fnptr)(target, attachment, textarget, texture, level);
// }
// static void  glowFramebufferTexture2DEXT(GPFRAMEBUFFERTEXTURE2DEXT fnptr, GLenum  target, GLenum  attachment, GLenum  textarget, GLuint  texture, GLint  level) {
//   (*fnptr)(target, attachment, textarget, texture, level);
// }
// static void  glowFramebufferTexture3D(GPFRAMEBUFFERTEXTURE3D fnptr, GLenum  target, GLenum  attachment, GLenum  textarget, GLuint  texture, GLint  level, GLint  zoffset) {
//   (*fnptr)(target, attachment, textarget, texture, level, zoffset);
// }
// static void  glowFramebufferTexture3DEXT(GPFRAMEBUFFERTEXTURE3DEXT fnptr, GLenum  target, GLenum  attachment, GLenum  textarget, GLuint  texture, GLint  level, GLint  zoffset) {
//   (*fnptr)(target, attachment, textarget, texture, level, zoffset);
// }
// static void  glowFramebufferTextureARB(GPFRAMEBUFFERTEXTUREARB fnptr, GLenum  target, GLenum  attachment, GLuint  texture, GLint  level) {
//   (*fnptr)(target, attachment, texture, level);
// }
// static void  glowFramebufferTextureEXT(GPFRAMEBUFFERTEXTUREEXT fnptr, GLenum  target, GLenum  attachment, GLuint  texture, GLint  level) {
//   (*fnptr)(target, attachment, texture, level);
// }
// static void  glowFramebufferTextureFaceARB(GPFRAMEBUFFERTEXTUREFACEARB fnptr, GLenum  target, GLenum  attachment, GLuint  texture, GLint  level, GLenum  face) {
//   (*fnptr)(target, attachment, texture, level, face);
// }
// static void  glowFramebufferTextureFaceEXT(GPFRAMEBUFFERTEXTUREFACEEXT fnptr, GLenum  target, GLenum  attachment, GLuint  texture, GLint  level, GLenum  face) {
//   (*fnptr)(target, attachment, texture, level, face);
// }
// static void  glowFramebufferTextureLayer(GPFRAMEBUFFERTEXTURELAYER fnptr, GLenum  target, GLenum  attachment, GLuint  texture, GLint  level, GLint  layer) {
//   (*fnptr)(target, attachment, texture, level, layer);
// }
// static void  glowFramebufferTextureLayerARB(GPFRAMEBUFFERTEXTURELAYERARB fnptr, GLenum  target, GLenum  attachment, GLuint  texture, GLint  level, GLint  layer) {
//   (*fnptr)(target, attachment, texture, level, layer);
// }
// static void  glowFramebufferTextureLayerEXT(GPFRAMEBUFFERTEXTURELAYEREXT fnptr, GLenum  target, GLenum  attachment, GLuint  texture, GLint  level, GLint  layer) {
//   (*fnptr)(target, attachment, texture, level, layer);
// }
// static void  glowFreeObjectBufferATI(GPFREEOBJECTBUFFERATI fnptr, GLuint  buffer) {
//   (*fnptr)(buffer);
// }
// static void  glowFrontFace(GPFRONTFACE fnptr, GLenum  mode) {
//   (*fnptr)(mode);
// }
// static void  glowFrustumfOES(GPFRUSTUMFOES fnptr, GLfloat  l, GLfloat  r, GLfloat  b, GLfloat  t, GLfloat  n, GLfloat  f) {
//   (*fnptr)(l, r, b, t, n, f);
// }
// static void  glowFrustumxOES(GPFRUSTUMXOES fnptr, GLfixed  l, GLfixed  r, GLfixed  b, GLfixed  t, GLfixed  n, GLfixed  f) {
//   (*fnptr)(l, r, b, t, n, f);
// }
// static GLuint  glowGenAsyncMarkersSGIX(GPGENASYNCMARKERSSGIX fnptr, GLsizei  range) {
//   return (*fnptr)(range);
// }
// static void  glowGenBuffers(GPGENBUFFERS fnptr, GLsizei  n, GLuint * buffers) {
//   (*fnptr)(n, buffers);
// }
// static void  glowGenBuffersARB(GPGENBUFFERSARB fnptr, GLsizei  n, GLuint * buffers) {
//   (*fnptr)(n, buffers);
// }
// static void  glowGenFencesAPPLE(GPGENFENCESAPPLE fnptr, GLsizei  n, GLuint * fences) {
//   (*fnptr)(n, fences);
// }
// static void  glowGenFencesNV(GPGENFENCESNV fnptr, GLsizei  n, GLuint * fences) {
//   (*fnptr)(n, fences);
// }
// static GLuint  glowGenFragmentShadersATI(GPGENFRAGMENTSHADERSATI fnptr, GLuint  range) {
//   return (*fnptr)(range);
// }
// static void  glowGenFramebuffers(GPGENFRAMEBUFFERS fnptr, GLsizei  n, GLuint * framebuffers) {
//   (*fnptr)(n, framebuffers);
// }
// static void  glowGenFramebuffersEXT(GPGENFRAMEBUFFERSEXT fnptr, GLsizei  n, GLuint * framebuffers) {
//   (*fnptr)(n, framebuffers);
// }
// static void  glowGenNamesAMD(GPGENNAMESAMD fnptr, GLenum  identifier, GLuint  num, GLuint * names) {
//   (*fnptr)(identifier, num, names);
// }
// static void  glowGenOcclusionQueriesNV(GPGENOCCLUSIONQUERIESNV fnptr, GLsizei  n, GLuint * ids) {
//   (*fnptr)(n, ids);
// }
// static GLuint  glowGenPathsNV(GPGENPATHSNV fnptr, GLsizei  range) {
//   return (*fnptr)(range);
// }
// static void  glowGenPerfMonitorsAMD(GPGENPERFMONITORSAMD fnptr, GLsizei  n, GLuint * monitors) {
//   (*fnptr)(n, monitors);
// }
// static void  glowGenProgramPipelines(GPGENPROGRAMPIPELINES fnptr, GLsizei  n, GLuint * pipelines) {
//   (*fnptr)(n, pipelines);
// }
// static void  glowGenProgramPipelinesEXT(GPGENPROGRAMPIPELINESEXT fnptr, GLsizei  n, GLuint * pipelines) {
//   (*fnptr)(n, pipelines);
// }
// static void  glowGenProgramsARB(GPGENPROGRAMSARB fnptr, GLsizei  n, GLuint * programs) {
//   (*fnptr)(n, programs);
// }
// static void  glowGenProgramsNV(GPGENPROGRAMSNV fnptr, GLsizei  n, GLuint * programs) {
//   (*fnptr)(n, programs);
// }
// static void  glowGenQueries(GPGENQUERIES fnptr, GLsizei  n, GLuint * ids) {
//   (*fnptr)(n, ids);
// }
// static void  glowGenQueriesARB(GPGENQUERIESARB fnptr, GLsizei  n, GLuint * ids) {
//   (*fnptr)(n, ids);
// }
// static void  glowGenRenderbuffers(GPGENRENDERBUFFERS fnptr, GLsizei  n, GLuint * renderbuffers) {
//   (*fnptr)(n, renderbuffers);
// }
// static void  glowGenRenderbuffersEXT(GPGENRENDERBUFFERSEXT fnptr, GLsizei  n, GLuint * renderbuffers) {
//   (*fnptr)(n, renderbuffers);
// }
// static void  glowGenSamplers(GPGENSAMPLERS fnptr, GLsizei  count, GLuint * samplers) {
//   (*fnptr)(count, samplers);
// }
// static GLuint  glowGenSymbolsEXT(GPGENSYMBOLSEXT fnptr, GLenum  datatype, GLenum  storagetype, GLenum  range, GLuint  components) {
//   return (*fnptr)(datatype, storagetype, range, components);
// }
// static void  glowGenTextures(GPGENTEXTURES fnptr, GLsizei  n, GLuint * textures) {
//   (*fnptr)(n, textures);
// }
// static void  glowGenTexturesEXT(GPGENTEXTURESEXT fnptr, GLsizei  n, GLuint * textures) {
//   (*fnptr)(n, textures);
// }
// static void  glowGenTransformFeedbacks(GPGENTRANSFORMFEEDBACKS fnptr, GLsizei  n, GLuint * ids) {
//   (*fnptr)(n, ids);
// }
// static void  glowGenTransformFeedbacksNV(GPGENTRANSFORMFEEDBACKSNV fnptr, GLsizei  n, GLuint * ids) {
//   (*fnptr)(n, ids);
// }
// static void  glowGenVertexArrays(GPGENVERTEXARRAYS fnptr, GLsizei  n, GLuint * arrays) {
//   (*fnptr)(n, arrays);
// }
// static void  glowGenVertexArraysAPPLE(GPGENVERTEXARRAYSAPPLE fnptr, GLsizei  n, GLuint * arrays) {
//   (*fnptr)(n, arrays);
// }
// static GLuint  glowGenVertexShadersEXT(GPGENVERTEXSHADERSEXT fnptr, GLuint  range) {
//   return (*fnptr)(range);
// }
// static void  glowGenerateMipmap(GPGENERATEMIPMAP fnptr, GLenum  target) {
//   (*fnptr)(target);
// }
// static void  glowGenerateMipmapEXT(GPGENERATEMIPMAPEXT fnptr, GLenum  target) {
//   (*fnptr)(target);
// }
// static void  glowGenerateMultiTexMipmapEXT(GPGENERATEMULTITEXMIPMAPEXT fnptr, GLenum  texunit, GLenum  target) {
//   (*fnptr)(texunit, target);
// }
// static void  glowGenerateTextureMipmapEXT(GPGENERATETEXTUREMIPMAPEXT fnptr, GLuint  texture, GLenum  target) {
//   (*fnptr)(texture, target);
// }
// static void  glowGetActiveAtomicCounterBufferiv(GPGETACTIVEATOMICCOUNTERBUFFERIV fnptr, GLuint  program, GLuint  bufferIndex, GLenum  pname, GLint * params) {
//   (*fnptr)(program, bufferIndex, pname, params);
// }
// static void  glowGetActiveAttrib(GPGETACTIVEATTRIB fnptr, GLuint  program, GLuint  index, GLsizei  bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name) {
//   (*fnptr)(program, index, bufSize, length, size, type, name);
// }
// static void  glowGetActiveAttribARB(GPGETACTIVEATTRIBARB fnptr, GLhandleARB  programObj, GLuint  index, GLsizei  maxLength, GLsizei * length, GLint * size, GLenum * type, GLcharARB * name) {
//   (*fnptr)(programObj, index, maxLength, length, size, type, name);
// }
// static void  glowGetActiveSubroutineName(GPGETACTIVESUBROUTINENAME fnptr, GLuint  program, GLenum  shadertype, GLuint  index, GLsizei  bufsize, GLsizei * length, GLchar * name) {
//   (*fnptr)(program, shadertype, index, bufsize, length, name);
// }
// static void  glowGetActiveSubroutineUniformName(GPGETACTIVESUBROUTINEUNIFORMNAME fnptr, GLuint  program, GLenum  shadertype, GLuint  index, GLsizei  bufsize, GLsizei * length, GLchar * name) {
//   (*fnptr)(program, shadertype, index, bufsize, length, name);
// }
// static void  glowGetActiveSubroutineUniformiv(GPGETACTIVESUBROUTINEUNIFORMIV fnptr, GLuint  program, GLenum  shadertype, GLuint  index, GLenum  pname, GLint * values) {
//   (*fnptr)(program, shadertype, index, pname, values);
// }
// static void  glowGetActiveUniform(GPGETACTIVEUNIFORM fnptr, GLuint  program, GLuint  index, GLsizei  bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name) {
//   (*fnptr)(program, index, bufSize, length, size, type, name);
// }
// static void  glowGetActiveUniformARB(GPGETACTIVEUNIFORMARB fnptr, GLhandleARB  programObj, GLuint  index, GLsizei  maxLength, GLsizei * length, GLint * size, GLenum * type, GLcharARB * name) {
//   (*fnptr)(programObj, index, maxLength, length, size, type, name);
// }
// static void  glowGetActiveUniformBlockName(GPGETACTIVEUNIFORMBLOCKNAME fnptr, GLuint  program, GLuint  uniformBlockIndex, GLsizei  bufSize, GLsizei * length, GLchar * uniformBlockName) {
//   (*fnptr)(program, uniformBlockIndex, bufSize, length, uniformBlockName);
// }
// static void  glowGetActiveUniformBlockiv(GPGETACTIVEUNIFORMBLOCKIV fnptr, GLuint  program, GLuint  uniformBlockIndex, GLenum  pname, GLint * params) {
//   (*fnptr)(program, uniformBlockIndex, pname, params);
// }
// static void  glowGetActiveUniformName(GPGETACTIVEUNIFORMNAME fnptr, GLuint  program, GLuint  uniformIndex, GLsizei  bufSize, GLsizei * length, GLchar * uniformName) {
//   (*fnptr)(program, uniformIndex, bufSize, length, uniformName);
// }
// static void  glowGetActiveUniformsiv(GPGETACTIVEUNIFORMSIV fnptr, GLuint  program, GLsizei  uniformCount, const GLuint * uniformIndices, GLenum  pname, GLint * params) {
//   (*fnptr)(program, uniformCount, uniformIndices, pname, params);
// }
// static void  glowGetActiveVaryingNV(GPGETACTIVEVARYINGNV fnptr, GLuint  program, GLuint  index, GLsizei  bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name) {
//   (*fnptr)(program, index, bufSize, length, size, type, name);
// }
// static void  glowGetArrayObjectfvATI(GPGETARRAYOBJECTFVATI fnptr, GLenum  array, GLenum  pname, GLfloat * params) {
//   (*fnptr)(array, pname, params);
// }
// static void  glowGetArrayObjectivATI(GPGETARRAYOBJECTIVATI fnptr, GLenum  array, GLenum  pname, GLint * params) {
//   (*fnptr)(array, pname, params);
// }
// static void  glowGetAttachedObjectsARB(GPGETATTACHEDOBJECTSARB fnptr, GLhandleARB  containerObj, GLsizei  maxCount, GLsizei * count, GLhandleARB * obj) {
//   (*fnptr)(containerObj, maxCount, count, obj);
// }
// static void  glowGetAttachedShaders(GPGETATTACHEDSHADERS fnptr, GLuint  program, GLsizei  maxCount, GLsizei * count, GLuint * shaders) {
//   (*fnptr)(program, maxCount, count, shaders);
// }
// static GLint  glowGetAttribLocation(GPGETATTRIBLOCATION fnptr, GLuint  program, const GLchar * name) {
//   return (*fnptr)(program, name);
// }
// static GLint  glowGetAttribLocationARB(GPGETATTRIBLOCATIONARB fnptr, GLhandleARB  programObj, const GLcharARB * name) {
//   return (*fnptr)(programObj, name);
// }
// static void  glowGetBooleanIndexedvEXT(GPGETBOOLEANINDEXEDVEXT fnptr, GLenum  target, GLuint  index, GLboolean * data) {
//   (*fnptr)(target, index, data);
// }
// static void  glowGetBooleani_v(GPGETBOOLEANI_V fnptr, GLenum  target, GLuint  index, GLboolean * data) {
//   (*fnptr)(target, index, data);
// }
// static void  glowGetBooleanv(GPGETBOOLEANV fnptr, GLenum  pname, GLboolean * data) {
//   (*fnptr)(pname, data);
// }
// static void  glowGetBufferParameteri64v(GPGETBUFFERPARAMETERI64V fnptr, GLenum  target, GLenum  pname, GLint64 * params) {
//   (*fnptr)(target, pname, params);
// }
// static void  glowGetBufferParameteriv(GPGETBUFFERPARAMETERIV fnptr, GLenum  target, GLenum  pname, GLint * params) {
//   (*fnptr)(target, pname, params);
// }
// static void  glowGetBufferParameterivARB(GPGETBUFFERPARAMETERIVARB fnptr, GLenum  target, GLenum  pname, GLint * params) {
//   (*fnptr)(target, pname, params);
// }
// static void  glowGetBufferParameterui64vNV(GPGETBUFFERPARAMETERUI64VNV fnptr, GLenum  target, GLenum  pname, GLuint64EXT * params) {
//   (*fnptr)(target, pname, params);
// }
// static void  glowGetBufferPointerv(GPGETBUFFERPOINTERV fnptr, GLenum  target, GLenum  pname, void ** params) {
//   (*fnptr)(target, pname, params);
// }
// static void  glowGetBufferPointervARB(GPGETBUFFERPOINTERVARB fnptr, GLenum  target, GLenum  pname, void ** params) {
//   (*fnptr)(target, pname, params);
// }
// static void  glowGetBufferSubData(GPGETBUFFERSUBDATA fnptr, GLenum  target, GLintptr  offset, GLsizeiptr  size, void * data) {
//   (*fnptr)(target, offset, size, data);
// }
// static void  glowGetBufferSubDataARB(GPGETBUFFERSUBDATAARB fnptr, GLenum  target, GLintptrARB  offset, GLsizeiptrARB  size, void * data) {
//   (*fnptr)(target, offset, size, data);
// }
// static void  glowGetClipPlanefOES(GPGETCLIPPLANEFOES fnptr, GLenum  plane, GLfloat * equation) {
//   (*fnptr)(plane, equation);
// }
// static void  glowGetClipPlanexOES(GPGETCLIPPLANEXOES fnptr, GLenum  plane, GLfixed * equation) {
//   (*fnptr)(plane, equation);
// }
// static void  glowGetColorTableEXT(GPGETCOLORTABLEEXT fnptr, GLenum  target, GLenum  format, GLenum  type, void * data) {
//   (*fnptr)(target, format, type, data);
// }
// static void  glowGetColorTableParameterfvEXT(GPGETCOLORTABLEPARAMETERFVEXT fnptr, GLenum  target, GLenum  pname, GLfloat * params) {
//   (*fnptr)(target, pname, params);
// }
// static void  glowGetColorTableParameterfvSGI(GPGETCOLORTABLEPARAMETERFVSGI fnptr, GLenum  target, GLenum  pname, GLfloat * params) {
//   (*fnptr)(target, pname, params);
// }
// static void  glowGetColorTableParameterivEXT(GPGETCOLORTABLEPARAMETERIVEXT fnptr, GLenum  target, GLenum  pname, GLint * params) {
//   (*fnptr)(target, pname, params);
// }
// static void  glowGetColorTableParameterivSGI(GPGETCOLORTABLEPARAMETERIVSGI fnptr, GLenum  target, GLenum  pname, GLint * params) {
//   (*fnptr)(target, pname, params);
// }
// static void  glowGetColorTableSGI(GPGETCOLORTABLESGI fnptr, GLenum  target, GLenum  format, GLenum  type, void * table) {
//   (*fnptr)(target, format, type, table);
// }
// static void  glowGetCombinerInputParameterfvNV(GPGETCOMBINERINPUTPARAMETERFVNV fnptr, GLenum  stage, GLenum  portion, GLenum  variable, GLenum  pname, GLfloat * params) {
//   (*fnptr)(stage, portion, variable, pname, params);
// }
// static void  glowGetCombinerInputParameterivNV(GPGETCOMBINERINPUTPARAMETERIVNV fnptr, GLenum  stage, GLenum  portion, GLenum  variable, GLenum  pname, GLint * params) {
//   (*fnptr)(stage, portion, variable, pname, params);
// }
// static void  glowGetCombinerOutputParameterfvNV(GPGETCOMBINEROUTPUTPARAMETERFVNV fnptr, GLenum  stage, GLenum  portion, GLenum  pname, GLfloat * params) {
//   (*fnptr)(stage, portion, pname, params);
// }
// static void  glowGetCombinerOutputParameterivNV(GPGETCOMBINEROUTPUTPARAMETERIVNV fnptr, GLenum  stage, GLenum  portion, GLenum  pname, GLint * params) {
//   (*fnptr)(stage, portion, pname, params);
// }
// static void  glowGetCombinerStageParameterfvNV(GPGETCOMBINERSTAGEPARAMETERFVNV fnptr, GLenum  stage, GLenum  pname, GLfloat * params) {
//   (*fnptr)(stage, pname, params);
// }
// static void  glowGetCompressedMultiTexImageEXT(GPGETCOMPRESSEDMULTITEXIMAGEEXT fnptr, GLenum  texunit, GLenum  target, GLint  lod, void * img) {
//   (*fnptr)(texunit, target, lod, img);
// }
// static void  glowGetCompressedTexImage(GPGETCOMPRESSEDTEXIMAGE fnptr, GLenum  target, GLint  level, void * img) {
//   (*fnptr)(target, level, img);
// }
// static void  glowGetCompressedTexImageARB(GPGETCOMPRESSEDTEXIMAGEARB fnptr, GLenum  target, GLint  level, void * img) {
//   (*fnptr)(target, level, img);
// }
// static void  glowGetCompressedTextureImageEXT(GPGETCOMPRESSEDTEXTUREIMAGEEXT fnptr, GLuint  texture, GLenum  target, GLint  lod, void * img) {
//   (*fnptr)(texture, target, lod, img);
// }
// static void  glowGetConvolutionFilterEXT(GPGETCONVOLUTIONFILTEREXT fnptr, GLenum  target, GLenum  format, GLenum  type, void * image) {
//   (*fnptr)(target, format, type, image);
// }
// static void  glowGetConvolutionParameterfvEXT(GPGETCONVOLUTIONPARAMETERFVEXT fnptr, GLenum  target, GLenum  pname, GLfloat * params) {
//   (*fnptr)(target, pname, params);
// }
// static void  glowGetConvolutionParameterivEXT(GPGETCONVOLUTIONPARAMETERIVEXT fnptr, GLenum  target, GLenum  pname, GLint * params) {
//   (*fnptr)(target, pname, params);
// }
// static void  glowGetConvolutionParameterxvOES(GPGETCONVOLUTIONPARAMETERXVOES fnptr, GLenum  target, GLenum  pname, GLfixed * params) {
//   (*fnptr)(target, pname, params);
// }
// static GLuint  glowGetDebugMessageLog(GPGETDEBUGMESSAGELOG fnptr, GLuint  count, GLsizei  bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog) {
//   return (*fnptr)(count, bufSize, sources, types, ids, severities, lengths, messageLog);
// }
// static GLuint  glowGetDebugMessageLogAMD(GPGETDEBUGMESSAGELOGAMD fnptr, GLuint  count, GLsizei  bufsize, GLenum * categories, GLuint * severities, GLuint * ids, GLsizei * lengths, GLchar * message) {
//   return (*fnptr)(count, bufsize, categories, severities, ids, lengths, message);
// }
// static GLuint  glowGetDebugMessageLogARB(GPGETDEBUGMESSAGELOGARB fnptr, GLuint  count, GLsizei  bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog) {
//   return (*fnptr)(count, bufSize, sources, types, ids, severities, lengths, messageLog);
// }
// static GLuint  glowGetDebugMessageLogKHR(GPGETDEBUGMESSAGELOGKHR fnptr, GLuint  count, GLsizei  bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog) {
//   return (*fnptr)(count, bufSize, sources, types, ids, severities, lengths, messageLog);
// }
// static void  glowGetDetailTexFuncSGIS(GPGETDETAILTEXFUNCSGIS fnptr, GLenum  target, GLfloat * points) {
//   (*fnptr)(target, points);
// }
// static void  glowGetDoubleIndexedvEXT(GPGETDOUBLEINDEXEDVEXT fnptr, GLenum  target, GLuint  index, GLdouble * data) {
//   (*fnptr)(target, index, data);
// }
// static void  glowGetDoublei_v(GPGETDOUBLEI_V fnptr, GLenum  target, GLuint  index, GLdouble * data) {
//   (*fnptr)(target, index, data);
// }
// static void  glowGetDoublei_vEXT(GPGETDOUBLEI_VEXT fnptr, GLenum  pname, GLuint  index, GLdouble * params) {
//   (*fnptr)(pname, index, params);
// }
// static void  glowGetDoublev(GPGETDOUBLEV fnptr, GLenum  pname, GLdouble * data) {
//   (*fnptr)(pname, data);
// }
// static GLenum  glowGetError(GPGETERROR fnptr) {
//   return (*fnptr)();
// }
// static void  glowGetFenceivNV(GPGETFENCEIVNV fnptr, GLuint  fence, GLenum  pname, GLint * params) {
//   (*fnptr)(fence, pname, params);
// }
// static void  glowGetFinalCombinerInputParameterfvNV(GPGETFINALCOMBINERINPUTPARAMETERFVNV fnptr, GLenum  variable, GLenum  pname, GLfloat * params) {
//   (*fnptr)(variable, pname, params);
// }
// static void  glowGetFinalCombinerInputParameterivNV(GPGETFINALCOMBINERINPUTPARAMETERIVNV fnptr, GLenum  variable, GLenum  pname, GLint * params) {
//   (*fnptr)(variable, pname, params);
// }
// static void  glowGetFirstPerfQueryIdINTEL(GPGETFIRSTPERFQUERYIDINTEL fnptr, GLuint * queryId) {
//   (*fnptr)(queryId);
// }
// static void  glowGetFixedvOES(GPGETFIXEDVOES fnptr, GLenum  pname, GLfixed * params) {
//   (*fnptr)(pname, params);
// }
// static void  glowGetFloatIndexedvEXT(GPGETFLOATINDEXEDVEXT fnptr, GLenum  target, GLuint  index, GLfloat * data) {
//   (*fnptr)(target, index, data);
// }
// static void  glowGetFloati_v(GPGETFLOATI_V fnptr, GLenum  target, GLuint  index, GLfloat * data) {
//   (*fnptr)(target, index, data);
// }
// static void  glowGetFloati_vEXT(GPGETFLOATI_VEXT fnptr, GLenum  pname, GLuint  index, GLfloat * params) {
//   (*fnptr)(pname, index, params);
// }
// static void  glowGetFloatv(GPGETFLOATV fnptr, GLenum  pname, GLfloat * data) {
//   (*fnptr)(pname, data);
// }
// static void  glowGetFogFuncSGIS(GPGETFOGFUNCSGIS fnptr, GLfloat * points) {
//   (*fnptr)(points);
// }
// static GLint  glowGetFragDataIndex(GPGETFRAGDATAINDEX fnptr, GLuint  program, const GLchar * name) {
//   return (*fnptr)(program, name);
// }
// static GLint  glowGetFragDataLocation(GPGETFRAGDATALOCATION fnptr, GLuint  program, const GLchar * name) {
//   return (*fnptr)(program, name);
// }
// static GLint  glowGetFragDataLocationEXT(GPGETFRAGDATALOCATIONEXT fnptr, GLuint  program, const GLchar * name) {
//   return (*fnptr)(program, name);
// }
// static void  glowGetFragmentLightfvSGIX(GPGETFRAGMENTLIGHTFVSGIX fnptr, GLenum  light, GLenum  pname, GLfloat * params) {
//   (*fnptr)(light, pname, params);
// }
// static void  glowGetFragmentLightivSGIX(GPGETFRAGMENTLIGHTIVSGIX fnptr, GLenum  light, GLenum  pname, GLint * params) {
//   (*fnptr)(light, pname, params);
// }
// static void  glowGetFragmentMaterialfvSGIX(GPGETFRAGMENTMATERIALFVSGIX fnptr, GLenum  face, GLenum  pname, GLfloat * params) {
//   (*fnptr)(face, pname, params);
// }
// static void  glowGetFragmentMaterialivSGIX(GPGETFRAGMENTMATERIALIVSGIX fnptr, GLenum  face, GLenum  pname, GLint * params) {
//   (*fnptr)(face, pname, params);
// }
// static void  glowGetFramebufferAttachmentParameteriv(GPGETFRAMEBUFFERATTACHMENTPARAMETERIV fnptr, GLenum  target, GLenum  attachment, GLenum  pname, GLint * params) {
//   (*fnptr)(target, attachment, pname, params);
// }
// static void  glowGetFramebufferAttachmentParameterivEXT(GPGETFRAMEBUFFERATTACHMENTPARAMETERIVEXT fnptr, GLenum  target, GLenum  attachment, GLenum  pname, GLint * params) {
//   (*fnptr)(target, attachment, pname, params);
// }
// static void  glowGetFramebufferParameteriv(GPGETFRAMEBUFFERPARAMETERIV fnptr, GLenum  target, GLenum  pname, GLint * params) {
//   (*fnptr)(target, pname, params);
// }
// static void  glowGetFramebufferParameterivEXT(GPGETFRAMEBUFFERPARAMETERIVEXT fnptr, GLuint  framebuffer, GLenum  pname, GLint * params) {
//   (*fnptr)(framebuffer, pname, params);
// }
// static GLenum  glowGetGraphicsResetStatusARB(GPGETGRAPHICSRESETSTATUSARB fnptr) {
//   return (*fnptr)();
// }
// static GLhandleARB  glowGetHandleARB(GPGETHANDLEARB fnptr, GLenum  pname) {
//   return (*fnptr)(pname);
// }
// static void  glowGetHistogramEXT(GPGETHISTOGRAMEXT fnptr, GLenum  target, GLboolean  reset, GLenum  format, GLenum  type, void * values) {
//   (*fnptr)(target, reset, format, type, values);
// }
// static void  glowGetHistogramParameterfvEXT(GPGETHISTOGRAMPARAMETERFVEXT fnptr, GLenum  target, GLenum  pname, GLfloat * params) {
//   (*fnptr)(target, pname, params);
// }
// static void  glowGetHistogramParameterivEXT(GPGETHISTOGRAMPARAMETERIVEXT fnptr, GLenum  target, GLenum  pname, GLint * params) {
//   (*fnptr)(target, pname, params);
// }
// static void  glowGetHistogramParameterxvOES(GPGETHISTOGRAMPARAMETERXVOES fnptr, GLenum  target, GLenum  pname, GLfixed * params) {
//   (*fnptr)(target, pname, params);
// }
// static GLuint64  glowGetImageHandleARB(GPGETIMAGEHANDLEARB fnptr, GLuint  texture, GLint  level, GLboolean  layered, GLint  layer, GLenum  format) {
//   return (*fnptr)(texture, level, layered, layer, format);
// }
// static GLuint64  glowGetImageHandleNV(GPGETIMAGEHANDLENV fnptr, GLuint  texture, GLint  level, GLboolean  layered, GLint  layer, GLenum  format) {
//   return (*fnptr)(texture, level, layered, layer, format);
// }
// static void  glowGetImageTransformParameterfvHP(GPGETIMAGETRANSFORMPARAMETERFVHP fnptr, GLenum  target, GLenum  pname, GLfloat * params) {
//   (*fnptr)(target, pname, params);
// }
// static void  glowGetImageTransformParameterivHP(GPGETIMAGETRANSFORMPARAMETERIVHP fnptr, GLenum  target, GLenum  pname, GLint * params) {
//   (*fnptr)(target, pname, params);
// }
// static void  glowGetInfoLogARB(GPGETINFOLOGARB fnptr, GLhandleARB  obj, GLsizei  maxLength, GLsizei * length, GLcharARB * infoLog) {
//   (*fnptr)(obj, maxLength, length, infoLog);
// }
// static GLint  glowGetInstrumentsSGIX(GPGETINSTRUMENTSSGIX fnptr) {
//   return (*fnptr)();
// }
// static void  glowGetInteger64i_v(GPGETINTEGER64I_V fnptr, GLenum  target, GLuint  index, GLint64 * data) {
//   (*fnptr)(target, index, data);
// }
// static void  glowGetInteger64v(GPGETINTEGER64V fnptr, GLenum  pname, GLint64 * data) {
//   (*fnptr)(pname, data);
// }
// static void  glowGetIntegerIndexedvEXT(GPGETINTEGERINDEXEDVEXT fnptr, GLenum  target, GLuint  index, GLint * data) {
//   (*fnptr)(target, index, data);
// }
// static void  glowGetIntegeri_v(GPGETINTEGERI_V fnptr, GLenum  target, GLuint  index, GLint * data) {
//   (*fnptr)(target, index, data);
// }
// static void  glowGetIntegerui64i_vNV(GPGETINTEGERUI64I_VNV fnptr, GLenum  value, GLuint  index, GLuint64EXT * result) {
//   (*fnptr)(value, index, result);
// }
// static void  glowGetIntegerui64vNV(GPGETINTEGERUI64VNV fnptr, GLenum  value, GLuint64EXT * result) {
//   (*fnptr)(value, result);
// }
// static void  glowGetIntegerv(GPGETINTEGERV fnptr, GLenum  pname, GLint * data) {
//   (*fnptr)(pname, data);
// }
// static void  glowGetInternalformati64v(GPGETINTERNALFORMATI64V fnptr, GLenum  target, GLenum  internalformat, GLenum  pname, GLsizei  bufSize, GLint64 * params) {
//   (*fnptr)(target, internalformat, pname, bufSize, params);
// }
// static void  glowGetInternalformativ(GPGETINTERNALFORMATIV fnptr, GLenum  target, GLenum  internalformat, GLenum  pname, GLsizei  bufSize, GLint * params) {
//   (*fnptr)(target, internalformat, pname, bufSize, params);
// }
// static void  glowGetInvariantBooleanvEXT(GPGETINVARIANTBOOLEANVEXT fnptr, GLuint  id, GLenum  value, GLboolean * data) {
//   (*fnptr)(id, value, data);
// }
// static void  glowGetInvariantFloatvEXT(GPGETINVARIANTFLOATVEXT fnptr, GLuint  id, GLenum  value, GLfloat * data) {
//   (*fnptr)(id, value, data);
// }
// static void  glowGetInvariantIntegervEXT(GPGETINVARIANTINTEGERVEXT fnptr, GLuint  id, GLenum  value, GLint * data) {
//   (*fnptr)(id, value, data);
// }
// static void  glowGetLightxOES(GPGETLIGHTXOES fnptr, GLenum  light, GLenum  pname, GLfixed * params) {
//   (*fnptr)(light, pname, params);
// }
// static void  glowGetLightxvOES(GPGETLIGHTXVOES fnptr, GLenum  light, GLenum  pname, GLfixed * params) {
//   (*fnptr)(light, pname, params);
// }
// static void  glowGetListParameterfvSGIX(GPGETLISTPARAMETERFVSGIX fnptr, GLuint  list, GLenum  pname, GLfloat * params) {
//   (*fnptr)(list, pname, params);
// }
// static void  glowGetListParameterivSGIX(GPGETLISTPARAMETERIVSGIX fnptr, GLuint  list, GLenum  pname, GLint * params) {
//   (*fnptr)(list, pname, params);
// }
// static void  glowGetLocalConstantBooleanvEXT(GPGETLOCALCONSTANTBOOLEANVEXT fnptr, GLuint  id, GLenum  value, GLboolean * data) {
//   (*fnptr)(id, value, data);
// }
// static void  glowGetLocalConstantFloatvEXT(GPGETLOCALCONSTANTFLOATVEXT fnptr, GLuint  id, GLenum  value, GLfloat * data) {
//   (*fnptr)(id, value, data);
// }
// static void  glowGetLocalConstantIntegervEXT(GPGETLOCALCONSTANTINTEGERVEXT fnptr, GLuint  id, GLenum  value, GLint * data) {
//   (*fnptr)(id, value, data);
// }
// static void  glowGetMapAttribParameterfvNV(GPGETMAPATTRIBPARAMETERFVNV fnptr, GLenum  target, GLuint  index, GLenum  pname, GLfloat * params) {
//   (*fnptr)(target, index, pname, params);
// }
// static void  glowGetMapAttribParameterivNV(GPGETMAPATTRIBPARAMETERIVNV fnptr, GLenum  target, GLuint  index, GLenum  pname, GLint * params) {
//   (*fnptr)(target, index, pname, params);
// }
// static void  glowGetMapControlPointsNV(GPGETMAPCONTROLPOINTSNV fnptr, GLenum  target, GLuint  index, GLenum  type, GLsizei  ustride, GLsizei  vstride, GLboolean  packed, void * points) {
//   (*fnptr)(target, index, type, ustride, vstride, packed, points);
// }
// static void  glowGetMapParameterfvNV(GPGETMAPPARAMETERFVNV fnptr, GLenum  target, GLenum  pname, GLfloat * params) {
//   (*fnptr)(target, pname, params);
// }
// static void  glowGetMapParameterivNV(GPGETMAPPARAMETERIVNV fnptr, GLenum  target, GLenum  pname, GLint * params) {
//   (*fnptr)(target, pname, params);
// }
// static void  glowGetMapxvOES(GPGETMAPXVOES fnptr, GLenum  target, GLenum  query, GLfixed * v) {
//   (*fnptr)(target, query, v);
// }
// static void  glowGetMaterialxOES(GPGETMATERIALXOES fnptr, GLenum  face, GLenum  pname, GLfixed  param) {
//   (*fnptr)(face, pname, param);
// }
// static void  glowGetMaterialxvOES(GPGETMATERIALXVOES fnptr, GLenum  face, GLenum  pname, GLfixed * params) {
//   (*fnptr)(face, pname, params);
// }
// static void  glowGetMinmaxEXT(GPGETMINMAXEXT fnptr, GLenum  target, GLboolean  reset, GLenum  format, GLenum  type, void * values) {
//   (*fnptr)(target, reset, format, type, values);
// }
// static void  glowGetMinmaxParameterfvEXT(GPGETMINMAXPARAMETERFVEXT fnptr, GLenum  target, GLenum  pname, GLfloat * params) {
//   (*fnptr)(target, pname, params);
// }
// static void  glowGetMinmaxParameterivEXT(GPGETMINMAXPARAMETERIVEXT fnptr, GLenum  target, GLenum  pname, GLint * params) {
//   (*fnptr)(target, pname, params);
// }
// static void  glowGetMultiTexEnvfvEXT(GPGETMULTITEXENVFVEXT fnptr, GLenum  texunit, GLenum  target, GLenum  pname, GLfloat * params) {
//   (*fnptr)(texunit, target, pname, params);
// }
// static void  glowGetMultiTexEnvivEXT(GPGETMULTITEXENVIVEXT fnptr, GLenum  texunit, GLenum  target, GLenum  pname, GLint * params) {
//   (*fnptr)(texunit, target, pname, params);
// }
// static void  glowGetMultiTexGendvEXT(GPGETMULTITEXGENDVEXT fnptr, GLenum  texunit, GLenum  coord, GLenum  pname, GLdouble * params) {
//   (*fnptr)(texunit, coord, pname, params);
// }
// static void  glowGetMultiTexGenfvEXT(GPGETMULTITEXGENFVEXT fnptr, GLenum  texunit, GLenum  coord, GLenum  pname, GLfloat * params) {
//   (*fnptr)(texunit, coord, pname, params);
// }
// static void  glowGetMultiTexGenivEXT(GPGETMULTITEXGENIVEXT fnptr, GLenum  texunit, GLenum  coord, GLenum  pname, GLint * params) {
//   (*fnptr)(texunit, coord, pname, params);
// }
// static void  glowGetMultiTexImageEXT(GPGETMULTITEXIMAGEEXT fnptr, GLenum  texunit, GLenum  target, GLint  level, GLenum  format, GLenum  type, void * pixels) {
//   (*fnptr)(texunit, target, level, format, type, pixels);
// }
// static void  glowGetMultiTexLevelParameterfvEXT(GPGETMULTITEXLEVELPARAMETERFVEXT fnptr, GLenum  texunit, GLenum  target, GLint  level, GLenum  pname, GLfloat * params) {
//   (*fnptr)(texunit, target, level, pname, params);
// }
// static void  glowGetMultiTexLevelParameterivEXT(GPGETMULTITEXLEVELPARAMETERIVEXT fnptr, GLenum  texunit, GLenum  target, GLint  level, GLenum  pname, GLint * params) {
//   (*fnptr)(texunit, target, level, pname, params);
// }
// static void  glowGetMultiTexParameterIivEXT(GPGETMULTITEXPARAMETERIIVEXT fnptr, GLenum  texunit, GLenum  target, GLenum  pname, GLint * params) {
//   (*fnptr)(texunit, target, pname, params);
// }
// static void  glowGetMultiTexParameterIuivEXT(GPGETMULTITEXPARAMETERIUIVEXT fnptr, GLenum  texunit, GLenum  target, GLenum  pname, GLuint * params) {
//   (*fnptr)(texunit, target, pname, params);
// }
// static void  glowGetMultiTexParameterfvEXT(GPGETMULTITEXPARAMETERFVEXT fnptr, GLenum  texunit, GLenum  target, GLenum  pname, GLfloat * params) {
//   (*fnptr)(texunit, target, pname, params);
// }
// static void  glowGetMultiTexParameterivEXT(GPGETMULTITEXPARAMETERIVEXT fnptr, GLenum  texunit, GLenum  target, GLenum  pname, GLint * params) {
//   (*fnptr)(texunit, target, pname, params);
// }
// static void  glowGetMultisamplefv(GPGETMULTISAMPLEFV fnptr, GLenum  pname, GLuint  index, GLfloat * val) {
//   (*fnptr)(pname, index, val);
// }
// static void  glowGetMultisamplefvNV(GPGETMULTISAMPLEFVNV fnptr, GLenum  pname, GLuint  index, GLfloat * val) {
//   (*fnptr)(pname, index, val);
// }
// static void  glowGetNamedBufferParameterivEXT(GPGETNAMEDBUFFERPARAMETERIVEXT fnptr, GLuint  buffer, GLenum  pname, GLint * params) {
//   (*fnptr)(buffer, pname, params);
// }
// static void  glowGetNamedBufferParameterui64vNV(GPGETNAMEDBUFFERPARAMETERUI64VNV fnptr, GLuint  buffer, GLenum  pname, GLuint64EXT * params) {
//   (*fnptr)(buffer, pname, params);
// }
// static void  glowGetNamedBufferPointervEXT(GPGETNAMEDBUFFERPOINTERVEXT fnptr, GLuint  buffer, GLenum  pname, void ** params) {
//   (*fnptr)(buffer, pname, params);
// }
// static void  glowGetNamedBufferSubDataEXT(GPGETNAMEDBUFFERSUBDATAEXT fnptr, GLuint  buffer, GLintptr  offset, GLsizeiptr  size, void * data) {
//   (*fnptr)(buffer, offset, size, data);
// }
// static void  glowGetNamedFramebufferAttachmentParameterivEXT(GPGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXT fnptr, GLuint  framebuffer, GLenum  attachment, GLenum  pname, GLint * params) {
//   (*fnptr)(framebuffer, attachment, pname, params);
// }
// static void  glowGetNamedFramebufferParameterivEXT(GPGETNAMEDFRAMEBUFFERPARAMETERIVEXT fnptr, GLuint  framebuffer, GLenum  pname, GLint * params) {
//   (*fnptr)(framebuffer, pname, params);
// }
// static void  glowGetNamedProgramLocalParameterIivEXT(GPGETNAMEDPROGRAMLOCALPARAMETERIIVEXT fnptr, GLuint  program, GLenum  target, GLuint  index, GLint * params) {
//   (*fnptr)(program, target, index, params);
// }
// static void  glowGetNamedProgramLocalParameterIuivEXT(GPGETNAMEDPROGRAMLOCALPARAMETERIUIVEXT fnptr, GLuint  program, GLenum  target, GLuint  index, GLuint * params) {
//   (*fnptr)(program, target, index, params);
// }
// static void  glowGetNamedProgramLocalParameterdvEXT(GPGETNAMEDPROGRAMLOCALPARAMETERDVEXT fnptr, GLuint  program, GLenum  target, GLuint  index, GLdouble * params) {
//   (*fnptr)(program, target, index, params);
// }
// static void  glowGetNamedProgramLocalParameterfvEXT(GPGETNAMEDPROGRAMLOCALPARAMETERFVEXT fnptr, GLuint  program, GLenum  target, GLuint  index, GLfloat * params) {
//   (*fnptr)(program, target, index, params);
// }
// static void  glowGetNamedProgramStringEXT(GPGETNAMEDPROGRAMSTRINGEXT fnptr, GLuint  program, GLenum  target, GLenum  pname, void * string) {
//   (*fnptr)(program, target, pname, string);
// }
// static void  glowGetNamedProgramivEXT(GPGETNAMEDPROGRAMIVEXT fnptr, GLuint  program, GLenum  target, GLenum  pname, GLint * params) {
//   (*fnptr)(program, target, pname, params);
// }
// static void  glowGetNamedRenderbufferParameterivEXT(GPGETNAMEDRENDERBUFFERPARAMETERIVEXT fnptr, GLuint  renderbuffer, GLenum  pname, GLint * params) {
//   (*fnptr)(renderbuffer, pname, params);
// }
// static void  glowGetNamedStringARB(GPGETNAMEDSTRINGARB fnptr, GLint  namelen, const GLchar * name, GLsizei  bufSize, GLint * stringlen, GLchar * string) {
//   (*fnptr)(namelen, name, bufSize, stringlen, string);
// }
// static void  glowGetNamedStringivARB(GPGETNAMEDSTRINGIVARB fnptr, GLint  namelen, const GLchar * name, GLenum  pname, GLint * params) {
//   (*fnptr)(namelen, name, pname, params);
// }
// static void  glowGetNextPerfQueryIdINTEL(GPGETNEXTPERFQUERYIDINTEL fnptr, GLuint  queryId, GLuint * nextQueryId) {
//   (*fnptr)(queryId, nextQueryId);
// }
// static void  glowGetObjectBufferfvATI(GPGETOBJECTBUFFERFVATI fnptr, GLuint  buffer, GLenum  pname, GLfloat * params) {
//   (*fnptr)(buffer, pname, params);
// }
// static void  glowGetObjectBufferivATI(GPGETOBJECTBUFFERIVATI fnptr, GLuint  buffer, GLenum  pname, GLint * params) {
//   (*fnptr)(buffer, pname, params);
// }
// static void  glowGetObjectLabel(GPGETOBJECTLABEL fnptr, GLenum  identifier, GLuint  name, GLsizei  bufSize, GLsizei * length, GLchar * label) {
//   (*fnptr)(identifier, name, bufSize, length, label);
// }
// static void  glowGetObjectLabelEXT(GPGETOBJECTLABELEXT fnptr, GLenum  type, GLuint  object, GLsizei  bufSize, GLsizei * length, GLchar * label) {
//   (*fnptr)(type, object, bufSize, length, label);
// }
// static void  glowGetObjectLabelKHR(GPGETOBJECTLABELKHR fnptr, GLenum  identifier, GLuint  name, GLsizei  bufSize, GLsizei * length, GLchar * label) {
//   (*fnptr)(identifier, name, bufSize, length, label);
// }
// static void  glowGetObjectParameterfvARB(GPGETOBJECTPARAMETERFVARB fnptr, GLhandleARB  obj, GLenum  pname, GLfloat * params) {
//   (*fnptr)(obj, pname, params);
// }
// static void  glowGetObjectParameterivAPPLE(GPGETOBJECTPARAMETERIVAPPLE fnptr, GLenum  objectType, GLuint  name, GLenum  pname, GLint * params) {
//   (*fnptr)(objectType, name, pname, params);
// }
// static void  glowGetObjectParameterivARB(GPGETOBJECTPARAMETERIVARB fnptr, GLhandleARB  obj, GLenum  pname, GLint * params) {
//   (*fnptr)(obj, pname, params);
// }
// static void  glowGetObjectPtrLabel(GPGETOBJECTPTRLABEL fnptr, const void * ptr, GLsizei  bufSize, GLsizei * length, GLchar * label) {
//   (*fnptr)(ptr, bufSize, length, label);
// }
// static void  glowGetObjectPtrLabelKHR(GPGETOBJECTPTRLABELKHR fnptr, const void * ptr, GLsizei  bufSize, GLsizei * length, GLchar * label) {
//   (*fnptr)(ptr, bufSize, length, label);
// }
// static void  glowGetOcclusionQueryivNV(GPGETOCCLUSIONQUERYIVNV fnptr, GLuint  id, GLenum  pname, GLint * params) {
//   (*fnptr)(id, pname, params);
// }
// static void  glowGetOcclusionQueryuivNV(GPGETOCCLUSIONQUERYUIVNV fnptr, GLuint  id, GLenum  pname, GLuint * params) {
//   (*fnptr)(id, pname, params);
// }
// static void  glowGetPathColorGenfvNV(GPGETPATHCOLORGENFVNV fnptr, GLenum  color, GLenum  pname, GLfloat * value) {
//   (*fnptr)(color, pname, value);
// }
// static void  glowGetPathColorGenivNV(GPGETPATHCOLORGENIVNV fnptr, GLenum  color, GLenum  pname, GLint * value) {
//   (*fnptr)(color, pname, value);
// }
// static void  glowGetPathCommandsNV(GPGETPATHCOMMANDSNV fnptr, GLuint  path, GLubyte * commands) {
//   (*fnptr)(path, commands);
// }
// static void  glowGetPathCoordsNV(GPGETPATHCOORDSNV fnptr, GLuint  path, GLfloat * coords) {
//   (*fnptr)(path, coords);
// }
// static void  glowGetPathDashArrayNV(GPGETPATHDASHARRAYNV fnptr, GLuint  path, GLfloat * dashArray) {
//   (*fnptr)(path, dashArray);
// }
// static GLfloat  glowGetPathLengthNV(GPGETPATHLENGTHNV fnptr, GLuint  path, GLsizei  startSegment, GLsizei  numSegments) {
//   return (*fnptr)(path, startSegment, numSegments);
// }
// static void  glowGetPathMetricRangeNV(GPGETPATHMETRICRANGENV fnptr, GLbitfield  metricQueryMask, GLuint  firstPathName, GLsizei  numPaths, GLsizei  stride, GLfloat * metrics) {
//   (*fnptr)(metricQueryMask, firstPathName, numPaths, stride, metrics);
// }
// static void  glowGetPathMetricsNV(GPGETPATHMETRICSNV fnptr, GLbitfield  metricQueryMask, GLsizei  numPaths, GLenum  pathNameType, const void * paths, GLuint  pathBase, GLsizei  stride, GLfloat * metrics) {
//   (*fnptr)(metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics);
// }
// static void  glowGetPathParameterfvNV(GPGETPATHPARAMETERFVNV fnptr, GLuint  path, GLenum  pname, GLfloat * value) {
//   (*fnptr)(path, pname, value);
// }
// static void  glowGetPathParameterivNV(GPGETPATHPARAMETERIVNV fnptr, GLuint  path, GLenum  pname, GLint * value) {
//   (*fnptr)(path, pname, value);
// }
// static void  glowGetPathSpacingNV(GPGETPATHSPACINGNV fnptr, GLenum  pathListMode, GLsizei  numPaths, GLenum  pathNameType, const void * paths, GLuint  pathBase, GLfloat  advanceScale, GLfloat  kerningScale, GLenum  transformType, GLfloat * returnedSpacing) {
//   (*fnptr)(pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing);
// }
// static void  glowGetPathTexGenfvNV(GPGETPATHTEXGENFVNV fnptr, GLenum  texCoordSet, GLenum  pname, GLfloat * value) {
//   (*fnptr)(texCoordSet, pname, value);
// }
// static void  glowGetPathTexGenivNV(GPGETPATHTEXGENIVNV fnptr, GLenum  texCoordSet, GLenum  pname, GLint * value) {
//   (*fnptr)(texCoordSet, pname, value);
// }
// static void  glowGetPerfCounterInfoINTEL(GPGETPERFCOUNTERINFOINTEL fnptr, GLuint  queryId, GLuint  counterId, GLuint  counterNameLength, GLchar * counterName, GLuint  counterDescLength, GLchar * counterDesc, GLuint * counterOffset, GLuint * counterDataSize, GLuint * counterTypeEnum, GLuint * counterDataTypeEnum, GLuint64 * rawCounterMaxValue) {
//   (*fnptr)(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue);
// }
// static void  glowGetPerfMonitorCounterDataAMD(GPGETPERFMONITORCOUNTERDATAAMD fnptr, GLuint  monitor, GLenum  pname, GLsizei  dataSize, GLuint * data, GLint * bytesWritten) {
//   (*fnptr)(monitor, pname, dataSize, data, bytesWritten);
// }
// static void  glowGetPerfMonitorCounterInfoAMD(GPGETPERFMONITORCOUNTERINFOAMD fnptr, GLuint  group, GLuint  counter, GLenum  pname, void * data) {
//   (*fnptr)(group, counter, pname, data);
// }
// static void  glowGetPerfMonitorCounterStringAMD(GPGETPERFMONITORCOUNTERSTRINGAMD fnptr, GLuint  group, GLuint  counter, GLsizei  bufSize, GLsizei * length, GLchar * counterString) {
//   (*fnptr)(group, counter, bufSize, length, counterString);
// }
// static void  glowGetPerfMonitorCountersAMD(GPGETPERFMONITORCOUNTERSAMD fnptr, GLuint  group, GLint * numCounters, GLint * maxActiveCounters, GLsizei  counterSize, GLuint * counters) {
//   (*fnptr)(group, numCounters, maxActiveCounters, counterSize, counters);
// }
// static void  glowGetPerfMonitorGroupStringAMD(GPGETPERFMONITORGROUPSTRINGAMD fnptr, GLuint  group, GLsizei  bufSize, GLsizei * length, GLchar * groupString) {
//   (*fnptr)(group, bufSize, length, groupString);
// }
// static void  glowGetPerfMonitorGroupsAMD(GPGETPERFMONITORGROUPSAMD fnptr, GLint * numGroups, GLsizei  groupsSize, GLuint * groups) {
//   (*fnptr)(numGroups, groupsSize, groups);
// }
// static void  glowGetPerfQueryDataINTEL(GPGETPERFQUERYDATAINTEL fnptr, GLuint  queryHandle, GLuint  flags, GLsizei  dataSize, GLvoid * data, GLuint * bytesWritten) {
//   (*fnptr)(queryHandle, flags, dataSize, data, bytesWritten);
// }
// static void  glowGetPerfQueryIdByNameINTEL(GPGETPERFQUERYIDBYNAMEINTEL fnptr, GLchar * queryName, GLuint * queryId) {
//   (*fnptr)(queryName, queryId);
// }
// static void  glowGetPerfQueryInfoINTEL(GPGETPERFQUERYINFOINTEL fnptr, GLuint  queryId, GLuint  queryNameLength, GLchar * queryName, GLuint * dataSize, GLuint * noCounters, GLuint * noInstances, GLuint * capsMask) {
//   (*fnptr)(queryId, queryNameLength, queryName, dataSize, noCounters, noInstances, capsMask);
// }
// static void  glowGetPixelMapxv(GPGETPIXELMAPXV fnptr, GLenum  map, GLint  size, GLfixed * values) {
//   (*fnptr)(map, size, values);
// }
// static void  glowGetPixelTexGenParameterfvSGIS(GPGETPIXELTEXGENPARAMETERFVSGIS fnptr, GLenum  pname, GLfloat * params) {
//   (*fnptr)(pname, params);
// }
// static void  glowGetPixelTexGenParameterivSGIS(GPGETPIXELTEXGENPARAMETERIVSGIS fnptr, GLenum  pname, GLint * params) {
//   (*fnptr)(pname, params);
// }
// static void  glowGetPixelTransformParameterfvEXT(GPGETPIXELTRANSFORMPARAMETERFVEXT fnptr, GLenum  target, GLenum  pname, GLfloat * params) {
//   (*fnptr)(target, pname, params);
// }
// static void  glowGetPixelTransformParameterivEXT(GPGETPIXELTRANSFORMPARAMETERIVEXT fnptr, GLenum  target, GLenum  pname, GLint * params) {
//   (*fnptr)(target, pname, params);
// }
// static void  glowGetPointerIndexedvEXT(GPGETPOINTERINDEXEDVEXT fnptr, GLenum  target, GLuint  index, void ** data) {
//   (*fnptr)(target, index, data);
// }
// static void  glowGetPointeri_vEXT(GPGETPOINTERI_VEXT fnptr, GLenum  pname, GLuint  index, void ** params) {
//   (*fnptr)(pname, index, params);
// }
// static void  glowGetPointerv(GPGETPOINTERV fnptr, GLenum  pname, void ** params) {
//   (*fnptr)(pname, params);
// }
// static void  glowGetPointervEXT(GPGETPOINTERVEXT fnptr, GLenum  pname, void ** params) {
//   (*fnptr)(pname, params);
// }
// static void  glowGetPointervKHR(GPGETPOINTERVKHR fnptr, GLenum  pname, void ** params) {
//   (*fnptr)(pname, params);
// }
// static void  glowGetProgramBinary(GPGETPROGRAMBINARY fnptr, GLuint  program, GLsizei  bufSize, GLsizei * length, GLenum * binaryFormat, void * binary) {
//   (*fnptr)(program, bufSize, length, binaryFormat, binary);
// }
// static void  glowGetProgramEnvParameterIivNV(GPGETPROGRAMENVPARAMETERIIVNV fnptr, GLenum  target, GLuint  index, GLint * params) {
//   (*fnptr)(target, index, params);
// }
// static void  glowGetProgramEnvParameterIuivNV(GPGETPROGRAMENVPARAMETERIUIVNV fnptr, GLenum  target, GLuint  index, GLuint * params) {
//   (*fnptr)(target, index, params);
// }
// static void  glowGetProgramEnvParameterdvARB(GPGETPROGRAMENVPARAMETERDVARB fnptr, GLenum  target, GLuint  index, GLdouble * params) {
//   (*fnptr)(target, index, params);
// }
// static void  glowGetProgramEnvParameterfvARB(GPGETPROGRAMENVPARAMETERFVARB fnptr, GLenum  target, GLuint  index, GLfloat * params) {
//   (*fnptr)(target, index, params);
// }
// static void  glowGetProgramInfoLog(GPGETPROGRAMINFOLOG fnptr, GLuint  program, GLsizei  bufSize, GLsizei * length, GLchar * infoLog) {
//   (*fnptr)(program, bufSize, length, infoLog);
// }
// static void  glowGetProgramInterfaceiv(GPGETPROGRAMINTERFACEIV fnptr, GLuint  program, GLenum  programInterface, GLenum  pname, GLint * params) {
//   (*fnptr)(program, programInterface, pname, params);
// }
// static void  glowGetProgramLocalParameterIivNV(GPGETPROGRAMLOCALPARAMETERIIVNV fnptr, GLenum  target, GLuint  index, GLint * params) {
//   (*fnptr)(target, index, params);
// }
// static void  glowGetProgramLocalParameterIuivNV(GPGETPROGRAMLOCALPARAMETERIUIVNV fnptr, GLenum  target, GLuint  index, GLuint * params) {
//   (*fnptr)(target, index, params);
// }
// static void  glowGetProgramLocalParameterdvARB(GPGETPROGRAMLOCALPARAMETERDVARB fnptr, GLenum  target, GLuint  index, GLdouble * params) {
//   (*fnptr)(target, index, params);
// }
// static void  glowGetProgramLocalParameterfvARB(GPGETPROGRAMLOCALPARAMETERFVARB fnptr, GLenum  target, GLuint  index, GLfloat * params) {
//   (*fnptr)(target, index, params);
// }
// static void  glowGetProgramNamedParameterdvNV(GPGETPROGRAMNAMEDPARAMETERDVNV fnptr, GLuint  id, GLsizei  len, const GLubyte * name, GLdouble * params) {
//   (*fnptr)(id, len, name, params);
// }
// static void  glowGetProgramNamedParameterfvNV(GPGETPROGRAMNAMEDPARAMETERFVNV fnptr, GLuint  id, GLsizei  len, const GLubyte * name, GLfloat * params) {
//   (*fnptr)(id, len, name, params);
// }
// static void  glowGetProgramParameterdvNV(GPGETPROGRAMPARAMETERDVNV fnptr, GLenum  target, GLuint  index, GLenum  pname, GLdouble * params) {
//   (*fnptr)(target, index, pname, params);
// }
// static void  glowGetProgramParameterfvNV(GPGETPROGRAMPARAMETERFVNV fnptr, GLenum  target, GLuint  index, GLenum  pname, GLfloat * params) {
//   (*fnptr)(target, index, pname, params);
// }
// static void  glowGetProgramPipelineInfoLog(GPGETPROGRAMPIPELINEINFOLOG fnptr, GLuint  pipeline, GLsizei  bufSize, GLsizei * length, GLchar * infoLog) {
//   (*fnptr)(pipeline, bufSize, length, infoLog);
// }
// static void  glowGetProgramPipelineInfoLogEXT(GPGETPROGRAMPIPELINEINFOLOGEXT fnptr, GLuint  pipeline, GLsizei  bufSize, GLsizei * length, GLchar * infoLog) {
//   (*fnptr)(pipeline, bufSize, length, infoLog);
// }
// static void  glowGetProgramPipelineiv(GPGETPROGRAMPIPELINEIV fnptr, GLuint  pipeline, GLenum  pname, GLint * params) {
//   (*fnptr)(pipeline, pname, params);
// }
// static void  glowGetProgramPipelineivEXT(GPGETPROGRAMPIPELINEIVEXT fnptr, GLuint  pipeline, GLenum  pname, GLint * params) {
//   (*fnptr)(pipeline, pname, params);
// }
// static GLuint  glowGetProgramResourceIndex(GPGETPROGRAMRESOURCEINDEX fnptr, GLuint  program, GLenum  programInterface, const GLchar * name) {
//   return (*fnptr)(program, programInterface, name);
// }
// static GLint  glowGetProgramResourceLocation(GPGETPROGRAMRESOURCELOCATION fnptr, GLuint  program, GLenum  programInterface, const GLchar * name) {
//   return (*fnptr)(program, programInterface, name);
// }
// static GLint  glowGetProgramResourceLocationIndex(GPGETPROGRAMRESOURCELOCATIONINDEX fnptr, GLuint  program, GLenum  programInterface, const GLchar * name) {
//   return (*fnptr)(program, programInterface, name);
// }
// static void  glowGetProgramResourceName(GPGETPROGRAMRESOURCENAME fnptr, GLuint  program, GLenum  programInterface, GLuint  index, GLsizei  bufSize, GLsizei * length, GLchar * name) {
//   (*fnptr)(program, programInterface, index, bufSize, length, name);
// }
// static void  glowGetProgramResourceiv(GPGETPROGRAMRESOURCEIV fnptr, GLuint  program, GLenum  programInterface, GLuint  index, GLsizei  propCount, const GLenum * props, GLsizei  bufSize, GLsizei * length, GLint * params) {
//   (*fnptr)(program, programInterface, index, propCount, props, bufSize, length, params);
// }
// static void  glowGetProgramStageiv(GPGETPROGRAMSTAGEIV fnptr, GLuint  program, GLenum  shadertype, GLenum  pname, GLint * values) {
//   (*fnptr)(program, shadertype, pname, values);
// }
// static void  glowGetProgramStringARB(GPGETPROGRAMSTRINGARB fnptr, GLenum  target, GLenum  pname, void * string) {
//   (*fnptr)(target, pname, string);
// }
// static void  glowGetProgramStringNV(GPGETPROGRAMSTRINGNV fnptr, GLuint  id, GLenum  pname, GLubyte * program) {
//   (*fnptr)(id, pname, program);
// }
// static void  glowGetProgramSubroutineParameteruivNV(GPGETPROGRAMSUBROUTINEPARAMETERUIVNV fnptr, GLenum  target, GLuint  index, GLuint * param) {
//   (*fnptr)(target, index, param);
// }
// static void  glowGetProgramiv(GPGETPROGRAMIV fnptr, GLuint  program, GLenum  pname, GLint * params) {
//   (*fnptr)(program, pname, params);
// }
// static void  glowGetProgramivARB(GPGETPROGRAMIVARB fnptr, GLenum  target, GLenum  pname, GLint * params) {
//   (*fnptr)(target, pname, params);
// }
// static void  glowGetProgramivNV(GPGETPROGRAMIVNV fnptr, GLuint  id, GLenum  pname, GLint * params) {
//   (*fnptr)(id, pname, params);
// }
// static void  glowGetQueryIndexediv(GPGETQUERYINDEXEDIV fnptr, GLenum  target, GLuint  index, GLenum  pname, GLint * params) {
//   (*fnptr)(target, index, pname, params);
// }
// static void  glowGetQueryObjecti64v(GPGETQUERYOBJECTI64V fnptr, GLuint  id, GLenum  pname, GLint64 * params) {
//   (*fnptr)(id, pname, params);
// }
// static void  glowGetQueryObjecti64vEXT(GPGETQUERYOBJECTI64VEXT fnptr, GLuint  id, GLenum  pname, GLint64 * params) {
//   (*fnptr)(id, pname, params);
// }
// static void  glowGetQueryObjectiv(GPGETQUERYOBJECTIV fnptr, GLuint  id, GLenum  pname, GLint * params) {
//   (*fnptr)(id, pname, params);
// }
// static void  glowGetQueryObjectivARB(GPGETQUERYOBJECTIVARB fnptr, GLuint  id, GLenum  pname, GLint * params) {
//   (*fnptr)(id, pname, params);
// }
// static void  glowGetQueryObjectui64v(GPGETQUERYOBJECTUI64V fnptr, GLuint  id, GLenum  pname, GLuint64 * params) {
//   (*fnptr)(id, pname, params);
// }
// static void  glowGetQueryObjectui64vEXT(GPGETQUERYOBJECTUI64VEXT fnptr, GLuint  id, GLenum  pname, GLuint64 * params) {
//   (*fnptr)(id, pname, params);
// }
// static void  glowGetQueryObjectuiv(GPGETQUERYOBJECTUIV fnptr, GLuint  id, GLenum  pname, GLuint * params) {
//   (*fnptr)(id, pname, params);
// }
// static void  glowGetQueryObjectuivARB(GPGETQUERYOBJECTUIVARB fnptr, GLuint  id, GLenum  pname, GLuint * params) {
//   (*fnptr)(id, pname, params);
// }
// static void  glowGetQueryiv(GPGETQUERYIV fnptr, GLenum  target, GLenum  pname, GLint * params) {
//   (*fnptr)(target, pname, params);
// }
// static void  glowGetQueryivARB(GPGETQUERYIVARB fnptr, GLenum  target, GLenum  pname, GLint * params) {
//   (*fnptr)(target, pname, params);
// }
// static void  glowGetRenderbufferParameteriv(GPGETRENDERBUFFERPARAMETERIV fnptr, GLenum  target, GLenum  pname, GLint * params) {
//   (*fnptr)(target, pname, params);
// }
// static void  glowGetRenderbufferParameterivEXT(GPGETRENDERBUFFERPARAMETERIVEXT fnptr, GLenum  target, GLenum  pname, GLint * params) {
//   (*fnptr)(target, pname, params);
// }
// static void  glowGetSamplerParameterIiv(GPGETSAMPLERPARAMETERIIV fnptr, GLuint  sampler, GLenum  pname, GLint * params) {
//   (*fnptr)(sampler, pname, params);
// }
// static void  glowGetSamplerParameterIuiv(GPGETSAMPLERPARAMETERIUIV fnptr, GLuint  sampler, GLenum  pname, GLuint * params) {
//   (*fnptr)(sampler, pname, params);
// }
// static void  glowGetSamplerParameterfv(GPGETSAMPLERPARAMETERFV fnptr, GLuint  sampler, GLenum  pname, GLfloat * params) {
//   (*fnptr)(sampler, pname, params);
// }
// static void  glowGetSamplerParameteriv(GPGETSAMPLERPARAMETERIV fnptr, GLuint  sampler, GLenum  pname, GLint * params) {
//   (*fnptr)(sampler, pname, params);
// }
// static void  glowGetSeparableFilterEXT(GPGETSEPARABLEFILTEREXT fnptr, GLenum  target, GLenum  format, GLenum  type, void * row, void * column, void * span) {
//   (*fnptr)(target, format, type, row, column, span);
// }
// static void  glowGetShaderInfoLog(GPGETSHADERINFOLOG fnptr, GLuint  shader, GLsizei  bufSize, GLsizei * length, GLchar * infoLog) {
//   (*fnptr)(shader, bufSize, length, infoLog);
// }
// static void  glowGetShaderPrecisionFormat(GPGETSHADERPRECISIONFORMAT fnptr, GLenum  shadertype, GLenum  precisiontype, GLint * range, GLint * precision) {
//   (*fnptr)(shadertype, precisiontype, range, precision);
// }
// static void  glowGetShaderSource(GPGETSHADERSOURCE fnptr, GLuint  shader, GLsizei  bufSize, GLsizei * length, GLchar * source) {
//   (*fnptr)(shader, bufSize, length, source);
// }
// static void  glowGetShaderSourceARB(GPGETSHADERSOURCEARB fnptr, GLhandleARB  obj, GLsizei  maxLength, GLsizei * length, GLcharARB * source) {
//   (*fnptr)(obj, maxLength, length, source);
// }
// static void  glowGetShaderiv(GPGETSHADERIV fnptr, GLuint  shader, GLenum  pname, GLint * params) {
//   (*fnptr)(shader, pname, params);
// }
// static void  glowGetSharpenTexFuncSGIS(GPGETSHARPENTEXFUNCSGIS fnptr, GLenum  target, GLfloat * points) {
//   (*fnptr)(target, points);
// }
// static const GLubyte * glowGetString(GPGETSTRING fnptr, GLenum  name) {
//   return (*fnptr)(name);
// }
// static const GLubyte * glowGetStringi(GPGETSTRINGI fnptr, GLenum  name, GLuint  index) {
//   return (*fnptr)(name, index);
// }
// static GLuint  glowGetSubroutineIndex(GPGETSUBROUTINEINDEX fnptr, GLuint  program, GLenum  shadertype, const GLchar * name) {
//   return (*fnptr)(program, shadertype, name);
// }
// static GLint  glowGetSubroutineUniformLocation(GPGETSUBROUTINEUNIFORMLOCATION fnptr, GLuint  program, GLenum  shadertype, const GLchar * name) {
//   return (*fnptr)(program, shadertype, name);
// }
// static void  glowGetSynciv(GPGETSYNCIV fnptr, GLsync  sync, GLenum  pname, GLsizei  bufSize, GLsizei * length, GLint * values) {
//   (*fnptr)(sync, pname, bufSize, length, values);
// }
// static void  glowGetTexBumpParameterfvATI(GPGETTEXBUMPPARAMETERFVATI fnptr, GLenum  pname, GLfloat * param) {
//   (*fnptr)(pname, param);
// }
// static void  glowGetTexBumpParameterivATI(GPGETTEXBUMPPARAMETERIVATI fnptr, GLenum  pname, GLint * param) {
//   (*fnptr)(pname, param);
// }
// static void  glowGetTexEnvxvOES(GPGETTEXENVXVOES fnptr, GLenum  target, GLenum  pname, GLfixed * params) {
//   (*fnptr)(target, pname, params);
// }
// static void  glowGetTexFilterFuncSGIS(GPGETTEXFILTERFUNCSGIS fnptr, GLenum  target, GLenum  filter, GLfloat * weights) {
//   (*fnptr)(target, filter, weights);
// }
// static void  glowGetTexGenxvOES(GPGETTEXGENXVOES fnptr, GLenum  coord, GLenum  pname, GLfixed * params) {
//   (*fnptr)(coord, pname, params);
// }
// static void  glowGetTexImage(GPGETTEXIMAGE fnptr, GLenum  target, GLint  level, GLenum  format, GLenum  type, void * pixels) {
//   (*fnptr)(target, level, format, type, pixels);
// }
// static void  glowGetTexLevelParameterfv(GPGETTEXLEVELPARAMETERFV fnptr, GLenum  target, GLint  level, GLenum  pname, GLfloat * params) {
//   (*fnptr)(target, level, pname, params);
// }
// static void  glowGetTexLevelParameteriv(GPGETTEXLEVELPARAMETERIV fnptr, GLenum  target, GLint  level, GLenum  pname, GLint * params) {
//   (*fnptr)(target, level, pname, params);
// }
// static void  glowGetTexLevelParameterxvOES(GPGETTEXLEVELPARAMETERXVOES fnptr, GLenum  target, GLint  level, GLenum  pname, GLfixed * params) {
//   (*fnptr)(target, level, pname, params);
// }
// static void  glowGetTexParameterIiv(GPGETTEXPARAMETERIIV fnptr, GLenum  target, GLenum  pname, GLint * params) {
//   (*fnptr)(target, pname, params);
// }
// static void  glowGetTexParameterIivEXT(GPGETTEXPARAMETERIIVEXT fnptr, GLenum  target, GLenum  pname, GLint * params) {
//   (*fnptr)(target, pname, params);
// }
// static void  glowGetTexParameterIuiv(GPGETTEXPARAMETERIUIV fnptr, GLenum  target, GLenum  pname, GLuint * params) {
//   (*fnptr)(target, pname, params);
// }
// static void  glowGetTexParameterIuivEXT(GPGETTEXPARAMETERIUIVEXT fnptr, GLenum  target, GLenum  pname, GLuint * params) {
//   (*fnptr)(target, pname, params);
// }
// static void  glowGetTexParameterPointervAPPLE(GPGETTEXPARAMETERPOINTERVAPPLE fnptr, GLenum  target, GLenum  pname, void ** params) {
//   (*fnptr)(target, pname, params);
// }
// static void  glowGetTexParameterfv(GPGETTEXPARAMETERFV fnptr, GLenum  target, GLenum  pname, GLfloat * params) {
//   (*fnptr)(target, pname, params);
// }
// static void  glowGetTexParameteriv(GPGETTEXPARAMETERIV fnptr, GLenum  target, GLenum  pname, GLint * params) {
//   (*fnptr)(target, pname, params);
// }
// static void  glowGetTexParameterxvOES(GPGETTEXPARAMETERXVOES fnptr, GLenum  target, GLenum  pname, GLfixed * params) {
//   (*fnptr)(target, pname, params);
// }
// static GLuint64  glowGetTextureHandleARB(GPGETTEXTUREHANDLEARB fnptr, GLuint  texture) {
//   return (*fnptr)(texture);
// }
// static GLuint64  glowGetTextureHandleNV(GPGETTEXTUREHANDLENV fnptr, GLuint  texture) {
//   return (*fnptr)(texture);
// }
// static void  glowGetTextureImageEXT(GPGETTEXTUREIMAGEEXT fnptr, GLuint  texture, GLenum  target, GLint  level, GLenum  format, GLenum  type, void * pixels) {
//   (*fnptr)(texture, target, level, format, type, pixels);
// }
// static void  glowGetTextureLevelParameterfvEXT(GPGETTEXTURELEVELPARAMETERFVEXT fnptr, GLuint  texture, GLenum  target, GLint  level, GLenum  pname, GLfloat * params) {
//   (*fnptr)(texture, target, level, pname, params);
// }
// static void  glowGetTextureLevelParameterivEXT(GPGETTEXTURELEVELPARAMETERIVEXT fnptr, GLuint  texture, GLenum  target, GLint  level, GLenum  pname, GLint * params) {
//   (*fnptr)(texture, target, level, pname, params);
// }
// static void  glowGetTextureParameterIivEXT(GPGETTEXTUREPARAMETERIIVEXT fnptr, GLuint  texture, GLenum  target, GLenum  pname, GLint * params) {
//   (*fnptr)(texture, target, pname, params);
// }
// static void  glowGetTextureParameterIuivEXT(GPGETTEXTUREPARAMETERIUIVEXT fnptr, GLuint  texture, GLenum  target, GLenum  pname, GLuint * params) {
//   (*fnptr)(texture, target, pname, params);
// }
// static void  glowGetTextureParameterfvEXT(GPGETTEXTUREPARAMETERFVEXT fnptr, GLuint  texture, GLenum  target, GLenum  pname, GLfloat * params) {
//   (*fnptr)(texture, target, pname, params);
// }
// static void  glowGetTextureParameterivEXT(GPGETTEXTUREPARAMETERIVEXT fnptr, GLuint  texture, GLenum  target, GLenum  pname, GLint * params) {
//   (*fnptr)(texture, target, pname, params);
// }
// static GLuint64  glowGetTextureSamplerHandleARB(GPGETTEXTURESAMPLERHANDLEARB fnptr, GLuint  texture, GLuint  sampler) {
//   return (*fnptr)(texture, sampler);
// }
// static GLuint64  glowGetTextureSamplerHandleNV(GPGETTEXTURESAMPLERHANDLENV fnptr, GLuint  texture, GLuint  sampler) {
//   return (*fnptr)(texture, sampler);
// }
// static void  glowGetTrackMatrixivNV(GPGETTRACKMATRIXIVNV fnptr, GLenum  target, GLuint  address, GLenum  pname, GLint * params) {
//   (*fnptr)(target, address, pname, params);
// }
// static void  glowGetTransformFeedbackVarying(GPGETTRANSFORMFEEDBACKVARYING fnptr, GLuint  program, GLuint  index, GLsizei  bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name) {
//   (*fnptr)(program, index, bufSize, length, size, type, name);
// }
// static void  glowGetTransformFeedbackVaryingEXT(GPGETTRANSFORMFEEDBACKVARYINGEXT fnptr, GLuint  program, GLuint  index, GLsizei  bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name) {
//   (*fnptr)(program, index, bufSize, length, size, type, name);
// }
// static void  glowGetTransformFeedbackVaryingNV(GPGETTRANSFORMFEEDBACKVARYINGNV fnptr, GLuint  program, GLuint  index, GLint * location) {
//   (*fnptr)(program, index, location);
// }
// static GLuint  glowGetUniformBlockIndex(GPGETUNIFORMBLOCKINDEX fnptr, GLuint  program, const GLchar * uniformBlockName) {
//   return (*fnptr)(program, uniformBlockName);
// }
// static GLint  glowGetUniformBufferSizeEXT(GPGETUNIFORMBUFFERSIZEEXT fnptr, GLuint  program, GLint  location) {
//   return (*fnptr)(program, location);
// }
// static void  glowGetUniformIndices(GPGETUNIFORMINDICES fnptr, GLuint  program, GLsizei  uniformCount, const GLchar *const* uniformNames, GLuint * uniformIndices) {
//   (*fnptr)(program, uniformCount, uniformNames, uniformIndices);
// }
// static GLint  glowGetUniformLocation(GPGETUNIFORMLOCATION fnptr, GLuint  program, const GLchar * name) {
//   return (*fnptr)(program, name);
// }
// static GLint  glowGetUniformLocationARB(GPGETUNIFORMLOCATIONARB fnptr, GLhandleARB  programObj, const GLcharARB * name) {
//   return (*fnptr)(programObj, name);
// }
// static GLintptr  glowGetUniformOffsetEXT(GPGETUNIFORMOFFSETEXT fnptr, GLuint  program, GLint  location) {
//   return (*fnptr)(program, location);
// }
// static void  glowGetUniformSubroutineuiv(GPGETUNIFORMSUBROUTINEUIV fnptr, GLenum  shadertype, GLint  location, GLuint * params) {
//   (*fnptr)(shadertype, location, params);
// }
// static void  glowGetUniformdv(GPGETUNIFORMDV fnptr, GLuint  program, GLint  location, GLdouble * params) {
//   (*fnptr)(program, location, params);
// }
// static void  glowGetUniformfv(GPGETUNIFORMFV fnptr, GLuint  program, GLint  location, GLfloat * params) {
//   (*fnptr)(program, location, params);
// }
// static void  glowGetUniformfvARB(GPGETUNIFORMFVARB fnptr, GLhandleARB  programObj, GLint  location, GLfloat * params) {
//   (*fnptr)(programObj, location, params);
// }
// static void  glowGetUniformi64vNV(GPGETUNIFORMI64VNV fnptr, GLuint  program, GLint  location, GLint64EXT * params) {
//   (*fnptr)(program, location, params);
// }
// static void  glowGetUniformiv(GPGETUNIFORMIV fnptr, GLuint  program, GLint  location, GLint * params) {
//   (*fnptr)(program, location, params);
// }
// static void  glowGetUniformivARB(GPGETUNIFORMIVARB fnptr, GLhandleARB  programObj, GLint  location, GLint * params) {
//   (*fnptr)(programObj, location, params);
// }
// static void  glowGetUniformui64vNV(GPGETUNIFORMUI64VNV fnptr, GLuint  program, GLint  location, GLuint64EXT * params) {
//   (*fnptr)(program, location, params);
// }
// static void  glowGetUniformuiv(GPGETUNIFORMUIV fnptr, GLuint  program, GLint  location, GLuint * params) {
//   (*fnptr)(program, location, params);
// }
// static void  glowGetUniformuivEXT(GPGETUNIFORMUIVEXT fnptr, GLuint  program, GLint  location, GLuint * params) {
//   (*fnptr)(program, location, params);
// }
// static void  glowGetVariantArrayObjectfvATI(GPGETVARIANTARRAYOBJECTFVATI fnptr, GLuint  id, GLenum  pname, GLfloat * params) {
//   (*fnptr)(id, pname, params);
// }
// static void  glowGetVariantArrayObjectivATI(GPGETVARIANTARRAYOBJECTIVATI fnptr, GLuint  id, GLenum  pname, GLint * params) {
//   (*fnptr)(id, pname, params);
// }
// static void  glowGetVariantBooleanvEXT(GPGETVARIANTBOOLEANVEXT fnptr, GLuint  id, GLenum  value, GLboolean * data) {
//   (*fnptr)(id, value, data);
// }
// static void  glowGetVariantFloatvEXT(GPGETVARIANTFLOATVEXT fnptr, GLuint  id, GLenum  value, GLfloat * data) {
//   (*fnptr)(id, value, data);
// }
// static void  glowGetVariantIntegervEXT(GPGETVARIANTINTEGERVEXT fnptr, GLuint  id, GLenum  value, GLint * data) {
//   (*fnptr)(id, value, data);
// }
// static void  glowGetVariantPointervEXT(GPGETVARIANTPOINTERVEXT fnptr, GLuint  id, GLenum  value, void ** data) {
//   (*fnptr)(id, value, data);
// }
// static GLint  glowGetVaryingLocationNV(GPGETVARYINGLOCATIONNV fnptr, GLuint  program, const GLchar * name) {
//   return (*fnptr)(program, name);
// }
// static void  glowGetVertexArrayIntegeri_vEXT(GPGETVERTEXARRAYINTEGERI_VEXT fnptr, GLuint  vaobj, GLuint  index, GLenum  pname, GLint * param) {
//   (*fnptr)(vaobj, index, pname, param);
// }
// static void  glowGetVertexArrayIntegervEXT(GPGETVERTEXARRAYINTEGERVEXT fnptr, GLuint  vaobj, GLenum  pname, GLint * param) {
//   (*fnptr)(vaobj, pname, param);
// }
// static void  glowGetVertexArrayPointeri_vEXT(GPGETVERTEXARRAYPOINTERI_VEXT fnptr, GLuint  vaobj, GLuint  index, GLenum  pname, void ** param) {
//   (*fnptr)(vaobj, index, pname, param);
// }
// static void  glowGetVertexArrayPointervEXT(GPGETVERTEXARRAYPOINTERVEXT fnptr, GLuint  vaobj, GLenum  pname, void ** param) {
//   (*fnptr)(vaobj, pname, param);
// }
// static void  glowGetVertexAttribArrayObjectfvATI(GPGETVERTEXATTRIBARRAYOBJECTFVATI fnptr, GLuint  index, GLenum  pname, GLfloat * params) {
//   (*fnptr)(index, pname, params);
// }
// static void  glowGetVertexAttribArrayObjectivATI(GPGETVERTEXATTRIBARRAYOBJECTIVATI fnptr, GLuint  index, GLenum  pname, GLint * params) {
//   (*fnptr)(index, pname, params);
// }
// static void  glowGetVertexAttribIiv(GPGETVERTEXATTRIBIIV fnptr, GLuint  index, GLenum  pname, GLint * params) {
//   (*fnptr)(index, pname, params);
// }
// static void  glowGetVertexAttribIivEXT(GPGETVERTEXATTRIBIIVEXT fnptr, GLuint  index, GLenum  pname, GLint * params) {
//   (*fnptr)(index, pname, params);
// }
// static void  glowGetVertexAttribIuiv(GPGETVERTEXATTRIBIUIV fnptr, GLuint  index, GLenum  pname, GLuint * params) {
//   (*fnptr)(index, pname, params);
// }
// static void  glowGetVertexAttribIuivEXT(GPGETVERTEXATTRIBIUIVEXT fnptr, GLuint  index, GLenum  pname, GLuint * params) {
//   (*fnptr)(index, pname, params);
// }
// static void  glowGetVertexAttribLdv(GPGETVERTEXATTRIBLDV fnptr, GLuint  index, GLenum  pname, GLdouble * params) {
//   (*fnptr)(index, pname, params);
// }
// static void  glowGetVertexAttribLdvEXT(GPGETVERTEXATTRIBLDVEXT fnptr, GLuint  index, GLenum  pname, GLdouble * params) {
//   (*fnptr)(index, pname, params);
// }
// static void  glowGetVertexAttribLi64vNV(GPGETVERTEXATTRIBLI64VNV fnptr, GLuint  index, GLenum  pname, GLint64EXT * params) {
//   (*fnptr)(index, pname, params);
// }
// static void  glowGetVertexAttribLui64vARB(GPGETVERTEXATTRIBLUI64VARB fnptr, GLuint  index, GLenum  pname, GLuint64EXT * params) {
//   (*fnptr)(index, pname, params);
// }
// static void  glowGetVertexAttribLui64vNV(GPGETVERTEXATTRIBLUI64VNV fnptr, GLuint  index, GLenum  pname, GLuint64EXT * params) {
//   (*fnptr)(index, pname, params);
// }
// static void  glowGetVertexAttribPointerv(GPGETVERTEXATTRIBPOINTERV fnptr, GLuint  index, GLenum  pname, void ** pointer) {
//   (*fnptr)(index, pname, pointer);
// }
// static void  glowGetVertexAttribPointervARB(GPGETVERTEXATTRIBPOINTERVARB fnptr, GLuint  index, GLenum  pname, void ** pointer) {
//   (*fnptr)(index, pname, pointer);
// }
// static void  glowGetVertexAttribPointervNV(GPGETVERTEXATTRIBPOINTERVNV fnptr, GLuint  index, GLenum  pname, void ** pointer) {
//   (*fnptr)(index, pname, pointer);
// }
// static void  glowGetVertexAttribdv(GPGETVERTEXATTRIBDV fnptr, GLuint  index, GLenum  pname, GLdouble * params) {
//   (*fnptr)(index, pname, params);
// }
// static void  glowGetVertexAttribdvARB(GPGETVERTEXATTRIBDVARB fnptr, GLuint  index, GLenum  pname, GLdouble * params) {
//   (*fnptr)(index, pname, params);
// }
// static void  glowGetVertexAttribdvNV(GPGETVERTEXATTRIBDVNV fnptr, GLuint  index, GLenum  pname, GLdouble * params) {
//   (*fnptr)(index, pname, params);
// }
// static void  glowGetVertexAttribfv(GPGETVERTEXATTRIBFV fnptr, GLuint  index, GLenum  pname, GLfloat * params) {
//   (*fnptr)(index, pname, params);
// }
// static void  glowGetVertexAttribfvARB(GPGETVERTEXATTRIBFVARB fnptr, GLuint  index, GLenum  pname, GLfloat * params) {
//   (*fnptr)(index, pname, params);
// }
// static void  glowGetVertexAttribfvNV(GPGETVERTEXATTRIBFVNV fnptr, GLuint  index, GLenum  pname, GLfloat * params) {
//   (*fnptr)(index, pname, params);
// }
// static void  glowGetVertexAttribiv(GPGETVERTEXATTRIBIV fnptr, GLuint  index, GLenum  pname, GLint * params) {
//   (*fnptr)(index, pname, params);
// }
// static void  glowGetVertexAttribivARB(GPGETVERTEXATTRIBIVARB fnptr, GLuint  index, GLenum  pname, GLint * params) {
//   (*fnptr)(index, pname, params);
// }
// static void  glowGetVertexAttribivNV(GPGETVERTEXATTRIBIVNV fnptr, GLuint  index, GLenum  pname, GLint * params) {
//   (*fnptr)(index, pname, params);
// }
// static void  glowGetVideoCaptureStreamdvNV(GPGETVIDEOCAPTURESTREAMDVNV fnptr, GLuint  video_capture_slot, GLuint  stream, GLenum  pname, GLdouble * params) {
//   (*fnptr)(video_capture_slot, stream, pname, params);
// }
// static void  glowGetVideoCaptureStreamfvNV(GPGETVIDEOCAPTURESTREAMFVNV fnptr, GLuint  video_capture_slot, GLuint  stream, GLenum  pname, GLfloat * params) {
//   (*fnptr)(video_capture_slot, stream, pname, params);
// }
// static void  glowGetVideoCaptureStreamivNV(GPGETVIDEOCAPTURESTREAMIVNV fnptr, GLuint  video_capture_slot, GLuint  stream, GLenum  pname, GLint * params) {
//   (*fnptr)(video_capture_slot, stream, pname, params);
// }
// static void  glowGetVideoCaptureivNV(GPGETVIDEOCAPTUREIVNV fnptr, GLuint  video_capture_slot, GLenum  pname, GLint * params) {
//   (*fnptr)(video_capture_slot, pname, params);
// }
// static void  glowGetVideoi64vNV(GPGETVIDEOI64VNV fnptr, GLuint  video_slot, GLenum  pname, GLint64EXT * params) {
//   (*fnptr)(video_slot, pname, params);
// }
// static void  glowGetVideoivNV(GPGETVIDEOIVNV fnptr, GLuint  video_slot, GLenum  pname, GLint * params) {
//   (*fnptr)(video_slot, pname, params);
// }
// static void  glowGetVideoui64vNV(GPGETVIDEOUI64VNV fnptr, GLuint  video_slot, GLenum  pname, GLuint64EXT * params) {
//   (*fnptr)(video_slot, pname, params);
// }
// static void  glowGetVideouivNV(GPGETVIDEOUIVNV fnptr, GLuint  video_slot, GLenum  pname, GLuint * params) {
//   (*fnptr)(video_slot, pname, params);
// }
// static void  glowGetnCompressedTexImageARB(GPGETNCOMPRESSEDTEXIMAGEARB fnptr, GLenum  target, GLint  lod, GLsizei  bufSize, void * img) {
//   (*fnptr)(target, lod, bufSize, img);
// }
// static void  glowGetnTexImageARB(GPGETNTEXIMAGEARB fnptr, GLenum  target, GLint  level, GLenum  format, GLenum  type, GLsizei  bufSize, void * img) {
//   (*fnptr)(target, level, format, type, bufSize, img);
// }
// static void  glowGetnUniformdvARB(GPGETNUNIFORMDVARB fnptr, GLuint  program, GLint  location, GLsizei  bufSize, GLdouble * params) {
//   (*fnptr)(program, location, bufSize, params);
// }
// static void  glowGetnUniformfvARB(GPGETNUNIFORMFVARB fnptr, GLuint  program, GLint  location, GLsizei  bufSize, GLfloat * params) {
//   (*fnptr)(program, location, bufSize, params);
// }
// static void  glowGetnUniformivARB(GPGETNUNIFORMIVARB fnptr, GLuint  program, GLint  location, GLsizei  bufSize, GLint * params) {
//   (*fnptr)(program, location, bufSize, params);
// }
// static void  glowGetnUniformuivARB(GPGETNUNIFORMUIVARB fnptr, GLuint  program, GLint  location, GLsizei  bufSize, GLuint * params) {
//   (*fnptr)(program, location, bufSize, params);
// }
// static void  glowGlobalAlphaFactorbSUN(GPGLOBALALPHAFACTORBSUN fnptr, GLbyte  factor) {
//   (*fnptr)(factor);
// }
// static void  glowGlobalAlphaFactordSUN(GPGLOBALALPHAFACTORDSUN fnptr, GLdouble  factor) {
//   (*fnptr)(factor);
// }
// static void  glowGlobalAlphaFactorfSUN(GPGLOBALALPHAFACTORFSUN fnptr, GLfloat  factor) {
//   (*fnptr)(factor);
// }
// static void  glowGlobalAlphaFactoriSUN(GPGLOBALALPHAFACTORISUN fnptr, GLint  factor) {
//   (*fnptr)(factor);
// }
// static void  glowGlobalAlphaFactorsSUN(GPGLOBALALPHAFACTORSSUN fnptr, GLshort  factor) {
//   (*fnptr)(factor);
// }
// static void  glowGlobalAlphaFactorubSUN(GPGLOBALALPHAFACTORUBSUN fnptr, GLubyte  factor) {
//   (*fnptr)(factor);
// }
// static void  glowGlobalAlphaFactoruiSUN(GPGLOBALALPHAFACTORUISUN fnptr, GLuint  factor) {
//   (*fnptr)(factor);
// }
// static void  glowGlobalAlphaFactorusSUN(GPGLOBALALPHAFACTORUSSUN fnptr, GLushort  factor) {
//   (*fnptr)(factor);
// }
// static void  glowHint(GPHINT fnptr, GLenum  target, GLenum  mode) {
//   (*fnptr)(target, mode);
// }
// static void  glowHintPGI(GPHINTPGI fnptr, GLenum  target, GLint  mode) {
//   (*fnptr)(target, mode);
// }
// static void  glowHistogramEXT(GPHISTOGRAMEXT fnptr, GLenum  target, GLsizei  width, GLenum  internalformat, GLboolean  sink) {
//   (*fnptr)(target, width, internalformat, sink);
// }
// static void  glowIglooInterfaceSGIX(GPIGLOOINTERFACESGIX fnptr, GLenum  pname, const void * params) {
//   (*fnptr)(pname, params);
// }
// static void  glowImageTransformParameterfHP(GPIMAGETRANSFORMPARAMETERFHP fnptr, GLenum  target, GLenum  pname, GLfloat  param) {
//   (*fnptr)(target, pname, param);
// }
// static void  glowImageTransformParameterfvHP(GPIMAGETRANSFORMPARAMETERFVHP fnptr, GLenum  target, GLenum  pname, const GLfloat * params) {
//   (*fnptr)(target, pname, params);
// }
// static void  glowImageTransformParameteriHP(GPIMAGETRANSFORMPARAMETERIHP fnptr, GLenum  target, GLenum  pname, GLint  param) {
//   (*fnptr)(target, pname, param);
// }
// static void  glowImageTransformParameterivHP(GPIMAGETRANSFORMPARAMETERIVHP fnptr, GLenum  target, GLenum  pname, const GLint * params) {
//   (*fnptr)(target, pname, params);
// }
// static GLsync  glowImportSyncEXT(GPIMPORTSYNCEXT fnptr, GLenum  external_sync_type, GLintptr  external_sync, GLbitfield  flags) {
//   return (*fnptr)(external_sync_type, external_sync, flags);
// }
// static void  glowIndexFormatNV(GPINDEXFORMATNV fnptr, GLenum  type, GLsizei  stride) {
//   (*fnptr)(type, stride);
// }
// static void  glowIndexFuncEXT(GPINDEXFUNCEXT fnptr, GLenum  func, GLclampf  ref) {
//   (*fnptr)(func, ref);
// }
// static void  glowIndexMaterialEXT(GPINDEXMATERIALEXT fnptr, GLenum  face, GLenum  mode) {
//   (*fnptr)(face, mode);
// }
// static void  glowIndexPointerEXT(GPINDEXPOINTEREXT fnptr, GLenum  type, GLsizei  stride, GLsizei  count, const void * pointer) {
//   (*fnptr)(type, stride, count, pointer);
// }
// static void  glowIndexPointerListIBM(GPINDEXPOINTERLISTIBM fnptr, GLenum  type, GLint  stride, const void ** pointer, GLint  ptrstride) {
//   (*fnptr)(type, stride, pointer, ptrstride);
// }
// static void  glowIndexxOES(GPINDEXXOES fnptr, GLfixed  component) {
//   (*fnptr)(component);
// }
// static void  glowIndexxvOES(GPINDEXXVOES fnptr, const GLfixed * component) {
//   (*fnptr)(component);
// }
// static void  glowInsertComponentEXT(GPINSERTCOMPONENTEXT fnptr, GLuint  res, GLuint  src, GLuint  num) {
//   (*fnptr)(res, src, num);
// }
// static void  glowInsertEventMarkerEXT(GPINSERTEVENTMARKEREXT fnptr, GLsizei  length, const GLchar * marker) {
//   (*fnptr)(length, marker);
// }
// static void  glowInstrumentsBufferSGIX(GPINSTRUMENTSBUFFERSGIX fnptr, GLsizei  size, GLint * buffer) {
//   (*fnptr)(size, buffer);
// }
// static void  glowInterpolatePathsNV(GPINTERPOLATEPATHSNV fnptr, GLuint  resultPath, GLuint  pathA, GLuint  pathB, GLfloat  weight) {
//   (*fnptr)(resultPath, pathA, pathB, weight);
// }
// static void  glowInvalidateBufferData(GPINVALIDATEBUFFERDATA fnptr, GLuint  buffer) {
//   (*fnptr)(buffer);
// }
// static void  glowInvalidateBufferSubData(GPINVALIDATEBUFFERSUBDATA fnptr, GLuint  buffer, GLintptr  offset, GLsizeiptr  length) {
//   (*fnptr)(buffer, offset, length);
// }
// static void  glowInvalidateFramebuffer(GPINVALIDATEFRAMEBUFFER fnptr, GLenum  target, GLsizei  numAttachments, const GLenum * attachments) {
//   (*fnptr)(target, numAttachments, attachments);
// }
// static void  glowInvalidateSubFramebuffer(GPINVALIDATESUBFRAMEBUFFER fnptr, GLenum  target, GLsizei  numAttachments, const GLenum * attachments, GLint  x, GLint  y, GLsizei  width, GLsizei  height) {
//   (*fnptr)(target, numAttachments, attachments, x, y, width, height);
// }
// static void  glowInvalidateTexImage(GPINVALIDATETEXIMAGE fnptr, GLuint  texture, GLint  level) {
//   (*fnptr)(texture, level);
// }
// static void  glowInvalidateTexSubImage(GPINVALIDATETEXSUBIMAGE fnptr, GLuint  texture, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLsizei  width, GLsizei  height, GLsizei  depth) {
//   (*fnptr)(texture, level, xoffset, yoffset, zoffset, width, height, depth);
// }
// static GLboolean  glowIsAsyncMarkerSGIX(GPISASYNCMARKERSGIX fnptr, GLuint  marker) {
//   return (*fnptr)(marker);
// }
// static GLboolean  glowIsBuffer(GPISBUFFER fnptr, GLuint  buffer) {
//   return (*fnptr)(buffer);
// }
// static GLboolean  glowIsBufferARB(GPISBUFFERARB fnptr, GLuint  buffer) {
//   return (*fnptr)(buffer);
// }
// static GLboolean  glowIsBufferResidentNV(GPISBUFFERRESIDENTNV fnptr, GLenum  target) {
//   return (*fnptr)(target);
// }
// static GLboolean  glowIsEnabled(GPISENABLED fnptr, GLenum  cap) {
//   return (*fnptr)(cap);
// }
// static GLboolean  glowIsEnabledIndexedEXT(GPISENABLEDINDEXEDEXT fnptr, GLenum  target, GLuint  index) {
//   return (*fnptr)(target, index);
// }
// static GLboolean  glowIsEnabledi(GPISENABLEDI fnptr, GLenum  target, GLuint  index) {
//   return (*fnptr)(target, index);
// }
// static GLboolean  glowIsFenceAPPLE(GPISFENCEAPPLE fnptr, GLuint  fence) {
//   return (*fnptr)(fence);
// }
// static GLboolean  glowIsFenceNV(GPISFENCENV fnptr, GLuint  fence) {
//   return (*fnptr)(fence);
// }
// static GLboolean  glowIsFramebuffer(GPISFRAMEBUFFER fnptr, GLuint  framebuffer) {
//   return (*fnptr)(framebuffer);
// }
// static GLboolean  glowIsFramebufferEXT(GPISFRAMEBUFFEREXT fnptr, GLuint  framebuffer) {
//   return (*fnptr)(framebuffer);
// }
// static GLboolean  glowIsImageHandleResidentARB(GPISIMAGEHANDLERESIDENTARB fnptr, GLuint64  handle) {
//   return (*fnptr)(handle);
// }
// static GLboolean  glowIsImageHandleResidentNV(GPISIMAGEHANDLERESIDENTNV fnptr, GLuint64  handle) {
//   return (*fnptr)(handle);
// }
// static GLboolean  glowIsNameAMD(GPISNAMEAMD fnptr, GLenum  identifier, GLuint  name) {
//   return (*fnptr)(identifier, name);
// }
// static GLboolean  glowIsNamedBufferResidentNV(GPISNAMEDBUFFERRESIDENTNV fnptr, GLuint  buffer) {
//   return (*fnptr)(buffer);
// }
// static GLboolean  glowIsNamedStringARB(GPISNAMEDSTRINGARB fnptr, GLint  namelen, const GLchar * name) {
//   return (*fnptr)(namelen, name);
// }
// static GLboolean  glowIsObjectBufferATI(GPISOBJECTBUFFERATI fnptr, GLuint  buffer) {
//   return (*fnptr)(buffer);
// }
// static GLboolean  glowIsOcclusionQueryNV(GPISOCCLUSIONQUERYNV fnptr, GLuint  id) {
//   return (*fnptr)(id);
// }
// static GLboolean  glowIsPathNV(GPISPATHNV fnptr, GLuint  path) {
//   return (*fnptr)(path);
// }
// static GLboolean  glowIsPointInFillPathNV(GPISPOINTINFILLPATHNV fnptr, GLuint  path, GLuint  mask, GLfloat  x, GLfloat  y) {
//   return (*fnptr)(path, mask, x, y);
// }
// static GLboolean  glowIsPointInStrokePathNV(GPISPOINTINSTROKEPATHNV fnptr, GLuint  path, GLfloat  x, GLfloat  y) {
//   return (*fnptr)(path, x, y);
// }
// static GLboolean  glowIsProgram(GPISPROGRAM fnptr, GLuint  program) {
//   return (*fnptr)(program);
// }
// static GLboolean  glowIsProgramARB(GPISPROGRAMARB fnptr, GLuint  program) {
//   return (*fnptr)(program);
// }
// static GLboolean  glowIsProgramNV(GPISPROGRAMNV fnptr, GLuint  id) {
//   return (*fnptr)(id);
// }
// static GLboolean  glowIsProgramPipeline(GPISPROGRAMPIPELINE fnptr, GLuint  pipeline) {
//   return (*fnptr)(pipeline);
// }
// static GLboolean  glowIsProgramPipelineEXT(GPISPROGRAMPIPELINEEXT fnptr, GLuint  pipeline) {
//   return (*fnptr)(pipeline);
// }
// static GLboolean  glowIsQuery(GPISQUERY fnptr, GLuint  id) {
//   return (*fnptr)(id);
// }
// static GLboolean  glowIsQueryARB(GPISQUERYARB fnptr, GLuint  id) {
//   return (*fnptr)(id);
// }
// static GLboolean  glowIsRenderbuffer(GPISRENDERBUFFER fnptr, GLuint  renderbuffer) {
//   return (*fnptr)(renderbuffer);
// }
// static GLboolean  glowIsRenderbufferEXT(GPISRENDERBUFFEREXT fnptr, GLuint  renderbuffer) {
//   return (*fnptr)(renderbuffer);
// }
// static GLboolean  glowIsSampler(GPISSAMPLER fnptr, GLuint  sampler) {
//   return (*fnptr)(sampler);
// }
// static GLboolean  glowIsShader(GPISSHADER fnptr, GLuint  shader) {
//   return (*fnptr)(shader);
// }
// static GLboolean  glowIsSync(GPISSYNC fnptr, GLsync  sync) {
//   return (*fnptr)(sync);
// }
// static GLboolean  glowIsTexture(GPISTEXTURE fnptr, GLuint  texture) {
//   return (*fnptr)(texture);
// }
// static GLboolean  glowIsTextureEXT(GPISTEXTUREEXT fnptr, GLuint  texture) {
//   return (*fnptr)(texture);
// }
// static GLboolean  glowIsTextureHandleResidentARB(GPISTEXTUREHANDLERESIDENTARB fnptr, GLuint64  handle) {
//   return (*fnptr)(handle);
// }
// static GLboolean  glowIsTextureHandleResidentNV(GPISTEXTUREHANDLERESIDENTNV fnptr, GLuint64  handle) {
//   return (*fnptr)(handle);
// }
// static GLboolean  glowIsTransformFeedback(GPISTRANSFORMFEEDBACK fnptr, GLuint  id) {
//   return (*fnptr)(id);
// }
// static GLboolean  glowIsTransformFeedbackNV(GPISTRANSFORMFEEDBACKNV fnptr, GLuint  id) {
//   return (*fnptr)(id);
// }
// static GLboolean  glowIsVariantEnabledEXT(GPISVARIANTENABLEDEXT fnptr, GLuint  id, GLenum  cap) {
//   return (*fnptr)(id, cap);
// }
// static GLboolean  glowIsVertexArray(GPISVERTEXARRAY fnptr, GLuint  array) {
//   return (*fnptr)(array);
// }
// static GLboolean  glowIsVertexArrayAPPLE(GPISVERTEXARRAYAPPLE fnptr, GLuint  array) {
//   return (*fnptr)(array);
// }
// static GLboolean  glowIsVertexAttribEnabledAPPLE(GPISVERTEXATTRIBENABLEDAPPLE fnptr, GLuint  index, GLenum  pname) {
//   return (*fnptr)(index, pname);
// }
// static void  glowLabelObjectEXT(GPLABELOBJECTEXT fnptr, GLenum  type, GLuint  object, GLsizei  length, const GLchar * label) {
//   (*fnptr)(type, object, length, label);
// }
// static void  glowLightEnviSGIX(GPLIGHTENVISGIX fnptr, GLenum  pname, GLint  param) {
//   (*fnptr)(pname, param);
// }
// static void  glowLightModelxOES(GPLIGHTMODELXOES fnptr, GLenum  pname, GLfixed  param) {
//   (*fnptr)(pname, param);
// }
// static void  glowLightModelxvOES(GPLIGHTMODELXVOES fnptr, GLenum  pname, const GLfixed * param) {
//   (*fnptr)(pname, param);
// }
// static void  glowLightxOES(GPLIGHTXOES fnptr, GLenum  light, GLenum  pname, GLfixed  param) {
//   (*fnptr)(light, pname, param);
// }
// static void  glowLightxvOES(GPLIGHTXVOES fnptr, GLenum  light, GLenum  pname, const GLfixed * params) {
//   (*fnptr)(light, pname, params);
// }
// static void  glowLineWidth(GPLINEWIDTH fnptr, GLfloat  width) {
//   (*fnptr)(width);
// }
// static void  glowLineWidthxOES(GPLINEWIDTHXOES fnptr, GLfixed  width) {
//   (*fnptr)(width);
// }
// static void  glowLinkProgram(GPLINKPROGRAM fnptr, GLuint  program) {
//   (*fnptr)(program);
// }
// static void  glowLinkProgramARB(GPLINKPROGRAMARB fnptr, GLhandleARB  programObj) {
//   (*fnptr)(programObj);
// }
// static void  glowListParameterfSGIX(GPLISTPARAMETERFSGIX fnptr, GLuint  list, GLenum  pname, GLfloat  param) {
//   (*fnptr)(list, pname, param);
// }
// static void  glowListParameterfvSGIX(GPLISTPARAMETERFVSGIX fnptr, GLuint  list, GLenum  pname, const GLfloat * params) {
//   (*fnptr)(list, pname, params);
// }
// static void  glowListParameteriSGIX(GPLISTPARAMETERISGIX fnptr, GLuint  list, GLenum  pname, GLint  param) {
//   (*fnptr)(list, pname, param);
// }
// static void  glowListParameterivSGIX(GPLISTPARAMETERIVSGIX fnptr, GLuint  list, GLenum  pname, const GLint * params) {
//   (*fnptr)(list, pname, params);
// }
// static void  glowLoadIdentityDeformationMapSGIX(GPLOADIDENTITYDEFORMATIONMAPSGIX fnptr, GLbitfield  mask) {
//   (*fnptr)(mask);
// }
// static void  glowLoadMatrixxOES(GPLOADMATRIXXOES fnptr, const GLfixed * m) {
//   (*fnptr)(m);
// }
// static void  glowLoadProgramNV(GPLOADPROGRAMNV fnptr, GLenum  target, GLuint  id, GLsizei  len, const GLubyte * program) {
//   (*fnptr)(target, id, len, program);
// }
// static void  glowLoadTransposeMatrixdARB(GPLOADTRANSPOSEMATRIXDARB fnptr, const GLdouble * m) {
//   (*fnptr)(m);
// }
// static void  glowLoadTransposeMatrixfARB(GPLOADTRANSPOSEMATRIXFARB fnptr, const GLfloat * m) {
//   (*fnptr)(m);
// }
// static void  glowLoadTransposeMatrixxOES(GPLOADTRANSPOSEMATRIXXOES fnptr, const GLfixed * m) {
//   (*fnptr)(m);
// }
// static void  glowLockArraysEXT(GPLOCKARRAYSEXT fnptr, GLint  first, GLsizei  count) {
//   (*fnptr)(first, count);
// }
// static void  glowLogicOp(GPLOGICOP fnptr, GLenum  opcode) {
//   (*fnptr)(opcode);
// }
// static void  glowMakeBufferNonResidentNV(GPMAKEBUFFERNONRESIDENTNV fnptr, GLenum  target) {
//   (*fnptr)(target);
// }
// static void  glowMakeBufferResidentNV(GPMAKEBUFFERRESIDENTNV fnptr, GLenum  target, GLenum  access) {
//   (*fnptr)(target, access);
// }
// static void  glowMakeImageHandleNonResidentARB(GPMAKEIMAGEHANDLENONRESIDENTARB fnptr, GLuint64  handle) {
//   (*fnptr)(handle);
// }
// static void  glowMakeImageHandleNonResidentNV(GPMAKEIMAGEHANDLENONRESIDENTNV fnptr, GLuint64  handle) {
//   (*fnptr)(handle);
// }
// static void  glowMakeImageHandleResidentARB(GPMAKEIMAGEHANDLERESIDENTARB fnptr, GLuint64  handle, GLenum  access) {
//   (*fnptr)(handle, access);
// }
// static void  glowMakeImageHandleResidentNV(GPMAKEIMAGEHANDLERESIDENTNV fnptr, GLuint64  handle, GLenum  access) {
//   (*fnptr)(handle, access);
// }
// static void  glowMakeNamedBufferNonResidentNV(GPMAKENAMEDBUFFERNONRESIDENTNV fnptr, GLuint  buffer) {
//   (*fnptr)(buffer);
// }
// static void  glowMakeNamedBufferResidentNV(GPMAKENAMEDBUFFERRESIDENTNV fnptr, GLuint  buffer, GLenum  access) {
//   (*fnptr)(buffer, access);
// }
// static void  glowMakeTextureHandleNonResidentARB(GPMAKETEXTUREHANDLENONRESIDENTARB fnptr, GLuint64  handle) {
//   (*fnptr)(handle);
// }
// static void  glowMakeTextureHandleNonResidentNV(GPMAKETEXTUREHANDLENONRESIDENTNV fnptr, GLuint64  handle) {
//   (*fnptr)(handle);
// }
// static void  glowMakeTextureHandleResidentARB(GPMAKETEXTUREHANDLERESIDENTARB fnptr, GLuint64  handle) {
//   (*fnptr)(handle);
// }
// static void  glowMakeTextureHandleResidentNV(GPMAKETEXTUREHANDLERESIDENTNV fnptr, GLuint64  handle) {
//   (*fnptr)(handle);
// }
// static void  glowMap1xOES(GPMAP1XOES fnptr, GLenum  target, GLfixed  u1, GLfixed  u2, GLint  stride, GLint  order, GLfixed  points) {
//   (*fnptr)(target, u1, u2, stride, order, points);
// }
// static void  glowMap2xOES(GPMAP2XOES fnptr, GLenum  target, GLfixed  u1, GLfixed  u2, GLint  ustride, GLint  uorder, GLfixed  v1, GLfixed  v2, GLint  vstride, GLint  vorder, GLfixed  points) {
//   (*fnptr)(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
// }
// static void * glowMapBuffer(GPMAPBUFFER fnptr, GLenum  target, GLenum  access) {
//   return (*fnptr)(target, access);
// }
// static void * glowMapBufferARB(GPMAPBUFFERARB fnptr, GLenum  target, GLenum  access) {
//   return (*fnptr)(target, access);
// }
// static void * glowMapBufferRange(GPMAPBUFFERRANGE fnptr, GLenum  target, GLintptr  offset, GLsizeiptr  length, GLbitfield  access) {
//   return (*fnptr)(target, offset, length, access);
// }
// static void  glowMapControlPointsNV(GPMAPCONTROLPOINTSNV fnptr, GLenum  target, GLuint  index, GLenum  type, GLsizei  ustride, GLsizei  vstride, GLint  uorder, GLint  vorder, GLboolean  packed, const void * points) {
//   (*fnptr)(target, index, type, ustride, vstride, uorder, vorder, packed, points);
// }
// static void  glowMapGrid1xOES(GPMAPGRID1XOES fnptr, GLint  n, GLfixed  u1, GLfixed  u2) {
//   (*fnptr)(n, u1, u2);
// }
// static void  glowMapGrid2xOES(GPMAPGRID2XOES fnptr, GLint  n, GLfixed  u1, GLfixed  u2, GLfixed  v1, GLfixed  v2) {
//   (*fnptr)(n, u1, u2, v1, v2);
// }
// static void * glowMapNamedBufferEXT(GPMAPNAMEDBUFFEREXT fnptr, GLuint  buffer, GLenum  access) {
//   return (*fnptr)(buffer, access);
// }
// static void * glowMapNamedBufferRangeEXT(GPMAPNAMEDBUFFERRANGEEXT fnptr, GLuint  buffer, GLintptr  offset, GLsizeiptr  length, GLbitfield  access) {
//   return (*fnptr)(buffer, offset, length, access);
// }
// static void * glowMapObjectBufferATI(GPMAPOBJECTBUFFERATI fnptr, GLuint  buffer) {
//   return (*fnptr)(buffer);
// }
// static void  glowMapParameterfvNV(GPMAPPARAMETERFVNV fnptr, GLenum  target, GLenum  pname, const GLfloat * params) {
//   (*fnptr)(target, pname, params);
// }
// static void  glowMapParameterivNV(GPMAPPARAMETERIVNV fnptr, GLenum  target, GLenum  pname, const GLint * params) {
//   (*fnptr)(target, pname, params);
// }
// static void * glowMapTexture2DINTEL(GPMAPTEXTURE2DINTEL fnptr, GLuint  texture, GLint  level, GLbitfield  access, GLint * stride, GLenum * layout) {
//   return (*fnptr)(texture, level, access, stride, layout);
// }
// static void  glowMapVertexAttrib1dAPPLE(GPMAPVERTEXATTRIB1DAPPLE fnptr, GLuint  index, GLuint  size, GLdouble  u1, GLdouble  u2, GLint  stride, GLint  order, const GLdouble * points) {
//   (*fnptr)(index, size, u1, u2, stride, order, points);
// }
// static void  glowMapVertexAttrib1fAPPLE(GPMAPVERTEXATTRIB1FAPPLE fnptr, GLuint  index, GLuint  size, GLfloat  u1, GLfloat  u2, GLint  stride, GLint  order, const GLfloat * points) {
//   (*fnptr)(index, size, u1, u2, stride, order, points);
// }
// static void  glowMapVertexAttrib2dAPPLE(GPMAPVERTEXATTRIB2DAPPLE fnptr, GLuint  index, GLuint  size, GLdouble  u1, GLdouble  u2, GLint  ustride, GLint  uorder, GLdouble  v1, GLdouble  v2, GLint  vstride, GLint  vorder, const GLdouble * points) {
//   (*fnptr)(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
// }
// static void  glowMapVertexAttrib2fAPPLE(GPMAPVERTEXATTRIB2FAPPLE fnptr, GLuint  index, GLuint  size, GLfloat  u1, GLfloat  u2, GLint  ustride, GLint  uorder, GLfloat  v1, GLfloat  v2, GLint  vstride, GLint  vorder, const GLfloat * points) {
//   (*fnptr)(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
// }
// static void  glowMaterialxOES(GPMATERIALXOES fnptr, GLenum  face, GLenum  pname, GLfixed  param) {
//   (*fnptr)(face, pname, param);
// }
// static void  glowMaterialxvOES(GPMATERIALXVOES fnptr, GLenum  face, GLenum  pname, const GLfixed * param) {
//   (*fnptr)(face, pname, param);
// }
// static void  glowMatrixFrustumEXT(GPMATRIXFRUSTUMEXT fnptr, GLenum  mode, GLdouble  left, GLdouble  right, GLdouble  bottom, GLdouble  top, GLdouble  zNear, GLdouble  zFar) {
//   (*fnptr)(mode, left, right, bottom, top, zNear, zFar);
// }
// static void  glowMatrixIndexPointerARB(GPMATRIXINDEXPOINTERARB fnptr, GLint  size, GLenum  type, GLsizei  stride, const void * pointer) {
//   (*fnptr)(size, type, stride, pointer);
// }
// static void  glowMatrixIndexubvARB(GPMATRIXINDEXUBVARB fnptr, GLint  size, const GLubyte * indices) {
//   (*fnptr)(size, indices);
// }
// static void  glowMatrixIndexuivARB(GPMATRIXINDEXUIVARB fnptr, GLint  size, const GLuint * indices) {
//   (*fnptr)(size, indices);
// }
// static void  glowMatrixIndexusvARB(GPMATRIXINDEXUSVARB fnptr, GLint  size, const GLushort * indices) {
//   (*fnptr)(size, indices);
// }
// static void  glowMatrixLoadIdentityEXT(GPMATRIXLOADIDENTITYEXT fnptr, GLenum  mode) {
//   (*fnptr)(mode);
// }
// static void  glowMatrixLoadTransposedEXT(GPMATRIXLOADTRANSPOSEDEXT fnptr, GLenum  mode, const GLdouble * m) {
//   (*fnptr)(mode, m);
// }
// static void  glowMatrixLoadTransposefEXT(GPMATRIXLOADTRANSPOSEFEXT fnptr, GLenum  mode, const GLfloat * m) {
//   (*fnptr)(mode, m);
// }
// static void  glowMatrixLoaddEXT(GPMATRIXLOADDEXT fnptr, GLenum  mode, const GLdouble * m) {
//   (*fnptr)(mode, m);
// }
// static void  glowMatrixLoadfEXT(GPMATRIXLOADFEXT fnptr, GLenum  mode, const GLfloat * m) {
//   (*fnptr)(mode, m);
// }
// static void  glowMatrixMultTransposedEXT(GPMATRIXMULTTRANSPOSEDEXT fnptr, GLenum  mode, const GLdouble * m) {
//   (*fnptr)(mode, m);
// }
// static void  glowMatrixMultTransposefEXT(GPMATRIXMULTTRANSPOSEFEXT fnptr, GLenum  mode, const GLfloat * m) {
//   (*fnptr)(mode, m);
// }
// static void  glowMatrixMultdEXT(GPMATRIXMULTDEXT fnptr, GLenum  mode, const GLdouble * m) {
//   (*fnptr)(mode, m);
// }
// static void  glowMatrixMultfEXT(GPMATRIXMULTFEXT fnptr, GLenum  mode, const GLfloat * m) {
//   (*fnptr)(mode, m);
// }
// static void  glowMatrixOrthoEXT(GPMATRIXORTHOEXT fnptr, GLenum  mode, GLdouble  left, GLdouble  right, GLdouble  bottom, GLdouble  top, GLdouble  zNear, GLdouble  zFar) {
//   (*fnptr)(mode, left, right, bottom, top, zNear, zFar);
// }
// static void  glowMatrixPopEXT(GPMATRIXPOPEXT fnptr, GLenum  mode) {
//   (*fnptr)(mode);
// }
// static void  glowMatrixPushEXT(GPMATRIXPUSHEXT fnptr, GLenum  mode) {
//   (*fnptr)(mode);
// }
// static void  glowMatrixRotatedEXT(GPMATRIXROTATEDEXT fnptr, GLenum  mode, GLdouble  angle, GLdouble  x, GLdouble  y, GLdouble  z) {
//   (*fnptr)(mode, angle, x, y, z);
// }
// static void  glowMatrixRotatefEXT(GPMATRIXROTATEFEXT fnptr, GLenum  mode, GLfloat  angle, GLfloat  x, GLfloat  y, GLfloat  z) {
//   (*fnptr)(mode, angle, x, y, z);
// }
// static void  glowMatrixScaledEXT(GPMATRIXSCALEDEXT fnptr, GLenum  mode, GLdouble  x, GLdouble  y, GLdouble  z) {
//   (*fnptr)(mode, x, y, z);
// }
// static void  glowMatrixScalefEXT(GPMATRIXSCALEFEXT fnptr, GLenum  mode, GLfloat  x, GLfloat  y, GLfloat  z) {
//   (*fnptr)(mode, x, y, z);
// }
// static void  glowMatrixTranslatedEXT(GPMATRIXTRANSLATEDEXT fnptr, GLenum  mode, GLdouble  x, GLdouble  y, GLdouble  z) {
//   (*fnptr)(mode, x, y, z);
// }
// static void  glowMatrixTranslatefEXT(GPMATRIXTRANSLATEFEXT fnptr, GLenum  mode, GLfloat  x, GLfloat  y, GLfloat  z) {
//   (*fnptr)(mode, x, y, z);
// }
// static void  glowMemoryBarrier(GPMEMORYBARRIER fnptr, GLbitfield  barriers) {
//   (*fnptr)(barriers);
// }
// static void  glowMemoryBarrierEXT(GPMEMORYBARRIEREXT fnptr, GLbitfield  barriers) {
//   (*fnptr)(barriers);
// }
// static void  glowMinSampleShadingARB(GPMINSAMPLESHADINGARB fnptr, GLfloat  value) {
//   (*fnptr)(value);
// }
// static void  glowMinmaxEXT(GPMINMAXEXT fnptr, GLenum  target, GLenum  internalformat, GLboolean  sink) {
//   (*fnptr)(target, internalformat, sink);
// }
// static void  glowMultMatrixxOES(GPMULTMATRIXXOES fnptr, const GLfixed * m) {
//   (*fnptr)(m);
// }
// static void  glowMultTransposeMatrixdARB(GPMULTTRANSPOSEMATRIXDARB fnptr, const GLdouble * m) {
//   (*fnptr)(m);
// }
// static void  glowMultTransposeMatrixfARB(GPMULTTRANSPOSEMATRIXFARB fnptr, const GLfloat * m) {
//   (*fnptr)(m);
// }
// static void  glowMultTransposeMatrixxOES(GPMULTTRANSPOSEMATRIXXOES fnptr, const GLfixed * m) {
//   (*fnptr)(m);
// }
// static void  glowMultiDrawArrays(GPMULTIDRAWARRAYS fnptr, GLenum  mode, const GLint * first, const GLsizei * count, GLsizei  drawcount) {
//   (*fnptr)(mode, first, count, drawcount);
// }
// static void  glowMultiDrawArraysEXT(GPMULTIDRAWARRAYSEXT fnptr, GLenum  mode, const GLint * first, const GLsizei * count, GLsizei  primcount) {
//   (*fnptr)(mode, first, count, primcount);
// }
// static void  glowMultiDrawArraysIndirect(GPMULTIDRAWARRAYSINDIRECT fnptr, GLenum  mode, const void * indirect, GLsizei  drawcount, GLsizei  stride) {
//   (*fnptr)(mode, indirect, drawcount, stride);
// }
// static void  glowMultiDrawArraysIndirectAMD(GPMULTIDRAWARRAYSINDIRECTAMD fnptr, GLenum  mode, const void * indirect, GLsizei  primcount, GLsizei  stride) {
//   (*fnptr)(mode, indirect, primcount, stride);
// }
// static void  glowMultiDrawArraysIndirectBindlessNV(GPMULTIDRAWARRAYSINDIRECTBINDLESSNV fnptr, GLenum  mode, const void * indirect, GLsizei  drawCount, GLsizei  stride, GLint  vertexBufferCount) {
//   (*fnptr)(mode, indirect, drawCount, stride, vertexBufferCount);
// }
// static void  glowMultiDrawArraysIndirectCountARB(GPMULTIDRAWARRAYSINDIRECTCOUNTARB fnptr, GLenum  mode, GLintptr  indirect, GLintptr  drawcount, GLsizei  maxdrawcount, GLsizei  stride) {
//   (*fnptr)(mode, indirect, drawcount, maxdrawcount, stride);
// }
// static void  glowMultiDrawElementArrayAPPLE(GPMULTIDRAWELEMENTARRAYAPPLE fnptr, GLenum  mode, const GLint * first, const GLsizei * count, GLsizei  primcount) {
//   (*fnptr)(mode, first, count, primcount);
// }
// static void  glowMultiDrawElements(GPMULTIDRAWELEMENTS fnptr, GLenum  mode, const GLsizei * count, GLenum  type, const void *const* indices, GLsizei  drawcount) {
//   (*fnptr)(mode, count, type, indices, drawcount);
// }
// static void  glowMultiDrawElementsBaseVertex(GPMULTIDRAWELEMENTSBASEVERTEX fnptr, GLenum  mode, const GLsizei * count, GLenum  type, const void *const* indices, GLsizei  drawcount, const GLint * basevertex) {
//   (*fnptr)(mode, count, type, indices, drawcount, basevertex);
// }
// static void  glowMultiDrawElementsEXT(GPMULTIDRAWELEMENTSEXT fnptr, GLenum  mode, const GLsizei * count, GLenum  type, const void *const* indices, GLsizei  primcount) {
//   (*fnptr)(mode, count, type, indices, primcount);
// }
// static void  glowMultiDrawElementsIndirect(GPMULTIDRAWELEMENTSINDIRECT fnptr, GLenum  mode, GLenum  type, const void * indirect, GLsizei  drawcount, GLsizei  stride) {
//   (*fnptr)(mode, type, indirect, drawcount, stride);
// }
// static void  glowMultiDrawElementsIndirectAMD(GPMULTIDRAWELEMENTSINDIRECTAMD fnptr, GLenum  mode, GLenum  type, const void * indirect, GLsizei  primcount, GLsizei  stride) {
//   (*fnptr)(mode, type, indirect, primcount, stride);
// }
// static void  glowMultiDrawElementsIndirectBindlessNV(GPMULTIDRAWELEMENTSINDIRECTBINDLESSNV fnptr, GLenum  mode, GLenum  type, const void * indirect, GLsizei  drawCount, GLsizei  stride, GLint  vertexBufferCount) {
//   (*fnptr)(mode, type, indirect, drawCount, stride, vertexBufferCount);
// }
// static void  glowMultiDrawElementsIndirectCountARB(GPMULTIDRAWELEMENTSINDIRECTCOUNTARB fnptr, GLenum  mode, GLenum  type, GLintptr  indirect, GLintptr  drawcount, GLsizei  maxdrawcount, GLsizei  stride) {
//   (*fnptr)(mode, type, indirect, drawcount, maxdrawcount, stride);
// }
// static void  glowMultiDrawRangeElementArrayAPPLE(GPMULTIDRAWRANGEELEMENTARRAYAPPLE fnptr, GLenum  mode, GLuint  start, GLuint  end, const GLint * first, const GLsizei * count, GLsizei  primcount) {
//   (*fnptr)(mode, start, end, first, count, primcount);
// }
// static void  glowMultiModeDrawArraysIBM(GPMULTIMODEDRAWARRAYSIBM fnptr, const GLenum * mode, const GLint * first, const GLsizei * count, GLsizei  primcount, GLint  modestride) {
//   (*fnptr)(mode, first, count, primcount, modestride);
// }
// static void  glowMultiModeDrawElementsIBM(GPMULTIMODEDRAWELEMENTSIBM fnptr, const GLenum * mode, const GLsizei * count, GLenum  type, const void *const* indices, GLsizei  primcount, GLint  modestride) {
//   (*fnptr)(mode, count, type, indices, primcount, modestride);
// }
// static void  glowMultiTexBufferEXT(GPMULTITEXBUFFEREXT fnptr, GLenum  texunit, GLenum  target, GLenum  internalformat, GLuint  buffer) {
//   (*fnptr)(texunit, target, internalformat, buffer);
// }
// static void  glowMultiTexCoord1bOES(GPMULTITEXCOORD1BOES fnptr, GLenum  texture, GLbyte  s) {
//   (*fnptr)(texture, s);
// }
// static void  glowMultiTexCoord1bvOES(GPMULTITEXCOORD1BVOES fnptr, GLenum  texture, const GLbyte * coords) {
//   (*fnptr)(texture, coords);
// }
// static void  glowMultiTexCoord1dARB(GPMULTITEXCOORD1DARB fnptr, GLenum  target, GLdouble  s) {
//   (*fnptr)(target, s);
// }
// static void  glowMultiTexCoord1dvARB(GPMULTITEXCOORD1DVARB fnptr, GLenum  target, const GLdouble * v) {
//   (*fnptr)(target, v);
// }
// static void  glowMultiTexCoord1fARB(GPMULTITEXCOORD1FARB fnptr, GLenum  target, GLfloat  s) {
//   (*fnptr)(target, s);
// }
// static void  glowMultiTexCoord1fvARB(GPMULTITEXCOORD1FVARB fnptr, GLenum  target, const GLfloat * v) {
//   (*fnptr)(target, v);
// }
// static void  glowMultiTexCoord1hNV(GPMULTITEXCOORD1HNV fnptr, GLenum  target, GLhalfNV  s) {
//   (*fnptr)(target, s);
// }
// static void  glowMultiTexCoord1hvNV(GPMULTITEXCOORD1HVNV fnptr, GLenum  target, const GLhalfNV * v) {
//   (*fnptr)(target, v);
// }
// static void  glowMultiTexCoord1iARB(GPMULTITEXCOORD1IARB fnptr, GLenum  target, GLint  s) {
//   (*fnptr)(target, s);
// }
// static void  glowMultiTexCoord1ivARB(GPMULTITEXCOORD1IVARB fnptr, GLenum  target, const GLint * v) {
//   (*fnptr)(target, v);
// }
// static void  glowMultiTexCoord1sARB(GPMULTITEXCOORD1SARB fnptr, GLenum  target, GLshort  s) {
//   (*fnptr)(target, s);
// }
// static void  glowMultiTexCoord1svARB(GPMULTITEXCOORD1SVARB fnptr, GLenum  target, const GLshort * v) {
//   (*fnptr)(target, v);
// }
// static void  glowMultiTexCoord1xOES(GPMULTITEXCOORD1XOES fnptr, GLenum  texture, GLfixed  s) {
//   (*fnptr)(texture, s);
// }
// static void  glowMultiTexCoord1xvOES(GPMULTITEXCOORD1XVOES fnptr, GLenum  texture, const GLfixed * coords) {
//   (*fnptr)(texture, coords);
// }
// static void  glowMultiTexCoord2bOES(GPMULTITEXCOORD2BOES fnptr, GLenum  texture, GLbyte  s, GLbyte  t) {
//   (*fnptr)(texture, s, t);
// }
// static void  glowMultiTexCoord2bvOES(GPMULTITEXCOORD2BVOES fnptr, GLenum  texture, const GLbyte * coords) {
//   (*fnptr)(texture, coords);
// }
// static void  glowMultiTexCoord2dARB(GPMULTITEXCOORD2DARB fnptr, GLenum  target, GLdouble  s, GLdouble  t) {
//   (*fnptr)(target, s, t);
// }
// static void  glowMultiTexCoord2dvARB(GPMULTITEXCOORD2DVARB fnptr, GLenum  target, const GLdouble * v) {
//   (*fnptr)(target, v);
// }
// static void  glowMultiTexCoord2fARB(GPMULTITEXCOORD2FARB fnptr, GLenum  target, GLfloat  s, GLfloat  t) {
//   (*fnptr)(target, s, t);
// }
// static void  glowMultiTexCoord2fvARB(GPMULTITEXCOORD2FVARB fnptr, GLenum  target, const GLfloat * v) {
//   (*fnptr)(target, v);
// }
// static void  glowMultiTexCoord2hNV(GPMULTITEXCOORD2HNV fnptr, GLenum  target, GLhalfNV  s, GLhalfNV  t) {
//   (*fnptr)(target, s, t);
// }
// static void  glowMultiTexCoord2hvNV(GPMULTITEXCOORD2HVNV fnptr, GLenum  target, const GLhalfNV * v) {
//   (*fnptr)(target, v);
// }
// static void  glowMultiTexCoord2iARB(GPMULTITEXCOORD2IARB fnptr, GLenum  target, GLint  s, GLint  t) {
//   (*fnptr)(target, s, t);
// }
// static void  glowMultiTexCoord2ivARB(GPMULTITEXCOORD2IVARB fnptr, GLenum  target, const GLint * v) {
//   (*fnptr)(target, v);
// }
// static void  glowMultiTexCoord2sARB(GPMULTITEXCOORD2SARB fnptr, GLenum  target, GLshort  s, GLshort  t) {
//   (*fnptr)(target, s, t);
// }
// static void  glowMultiTexCoord2svARB(GPMULTITEXCOORD2SVARB fnptr, GLenum  target, const GLshort * v) {
//   (*fnptr)(target, v);
// }
// static void  glowMultiTexCoord2xOES(GPMULTITEXCOORD2XOES fnptr, GLenum  texture, GLfixed  s, GLfixed  t) {
//   (*fnptr)(texture, s, t);
// }
// static void  glowMultiTexCoord2xvOES(GPMULTITEXCOORD2XVOES fnptr, GLenum  texture, const GLfixed * coords) {
//   (*fnptr)(texture, coords);
// }
// static void  glowMultiTexCoord3bOES(GPMULTITEXCOORD3BOES fnptr, GLenum  texture, GLbyte  s, GLbyte  t, GLbyte  r) {
//   (*fnptr)(texture, s, t, r);
// }
// static void  glowMultiTexCoord3bvOES(GPMULTITEXCOORD3BVOES fnptr, GLenum  texture, const GLbyte * coords) {
//   (*fnptr)(texture, coords);
// }
// static void  glowMultiTexCoord3dARB(GPMULTITEXCOORD3DARB fnptr, GLenum  target, GLdouble  s, GLdouble  t, GLdouble  r) {
//   (*fnptr)(target, s, t, r);
// }
// static void  glowMultiTexCoord3dvARB(GPMULTITEXCOORD3DVARB fnptr, GLenum  target, const GLdouble * v) {
//   (*fnptr)(target, v);
// }
// static void  glowMultiTexCoord3fARB(GPMULTITEXCOORD3FARB fnptr, GLenum  target, GLfloat  s, GLfloat  t, GLfloat  r) {
//   (*fnptr)(target, s, t, r);
// }
// static void  glowMultiTexCoord3fvARB(GPMULTITEXCOORD3FVARB fnptr, GLenum  target, const GLfloat * v) {
//   (*fnptr)(target, v);
// }
// static void  glowMultiTexCoord3hNV(GPMULTITEXCOORD3HNV fnptr, GLenum  target, GLhalfNV  s, GLhalfNV  t, GLhalfNV  r) {
//   (*fnptr)(target, s, t, r);
// }
// static void  glowMultiTexCoord3hvNV(GPMULTITEXCOORD3HVNV fnptr, GLenum  target, const GLhalfNV * v) {
//   (*fnptr)(target, v);
// }
// static void  glowMultiTexCoord3iARB(GPMULTITEXCOORD3IARB fnptr, GLenum  target, GLint  s, GLint  t, GLint  r) {
//   (*fnptr)(target, s, t, r);
// }
// static void  glowMultiTexCoord3ivARB(GPMULTITEXCOORD3IVARB fnptr, GLenum  target, const GLint * v) {
//   (*fnptr)(target, v);
// }
// static void  glowMultiTexCoord3sARB(GPMULTITEXCOORD3SARB fnptr, GLenum  target, GLshort  s, GLshort  t, GLshort  r) {
//   (*fnptr)(target, s, t, r);
// }
// static void  glowMultiTexCoord3svARB(GPMULTITEXCOORD3SVARB fnptr, GLenum  target, const GLshort * v) {
//   (*fnptr)(target, v);
// }
// static void  glowMultiTexCoord3xOES(GPMULTITEXCOORD3XOES fnptr, GLenum  texture, GLfixed  s, GLfixed  t, GLfixed  r) {
//   (*fnptr)(texture, s, t, r);
// }
// static void  glowMultiTexCoord3xvOES(GPMULTITEXCOORD3XVOES fnptr, GLenum  texture, const GLfixed * coords) {
//   (*fnptr)(texture, coords);
// }
// static void  glowMultiTexCoord4bOES(GPMULTITEXCOORD4BOES fnptr, GLenum  texture, GLbyte  s, GLbyte  t, GLbyte  r, GLbyte  q) {
//   (*fnptr)(texture, s, t, r, q);
// }
// static void  glowMultiTexCoord4bvOES(GPMULTITEXCOORD4BVOES fnptr, GLenum  texture, const GLbyte * coords) {
//   (*fnptr)(texture, coords);
// }
// static void  glowMultiTexCoord4dARB(GPMULTITEXCOORD4DARB fnptr, GLenum  target, GLdouble  s, GLdouble  t, GLdouble  r, GLdouble  q) {
//   (*fnptr)(target, s, t, r, q);
// }
// static void  glowMultiTexCoord4dvARB(GPMULTITEXCOORD4DVARB fnptr, GLenum  target, const GLdouble * v) {
//   (*fnptr)(target, v);
// }
// static void  glowMultiTexCoord4fARB(GPMULTITEXCOORD4FARB fnptr, GLenum  target, GLfloat  s, GLfloat  t, GLfloat  r, GLfloat  q) {
//   (*fnptr)(target, s, t, r, q);
// }
// static void  glowMultiTexCoord4fvARB(GPMULTITEXCOORD4FVARB fnptr, GLenum  target, const GLfloat * v) {
//   (*fnptr)(target, v);
// }
// static void  glowMultiTexCoord4hNV(GPMULTITEXCOORD4HNV fnptr, GLenum  target, GLhalfNV  s, GLhalfNV  t, GLhalfNV  r, GLhalfNV  q) {
//   (*fnptr)(target, s, t, r, q);
// }
// static void  glowMultiTexCoord4hvNV(GPMULTITEXCOORD4HVNV fnptr, GLenum  target, const GLhalfNV * v) {
//   (*fnptr)(target, v);
// }
// static void  glowMultiTexCoord4iARB(GPMULTITEXCOORD4IARB fnptr, GLenum  target, GLint  s, GLint  t, GLint  r, GLint  q) {
//   (*fnptr)(target, s, t, r, q);
// }
// static void  glowMultiTexCoord4ivARB(GPMULTITEXCOORD4IVARB fnptr, GLenum  target, const GLint * v) {
//   (*fnptr)(target, v);
// }
// static void  glowMultiTexCoord4sARB(GPMULTITEXCOORD4SARB fnptr, GLenum  target, GLshort  s, GLshort  t, GLshort  r, GLshort  q) {
//   (*fnptr)(target, s, t, r, q);
// }
// static void  glowMultiTexCoord4svARB(GPMULTITEXCOORD4SVARB fnptr, GLenum  target, const GLshort * v) {
//   (*fnptr)(target, v);
// }
// static void  glowMultiTexCoord4xOES(GPMULTITEXCOORD4XOES fnptr, GLenum  texture, GLfixed  s, GLfixed  t, GLfixed  r, GLfixed  q) {
//   (*fnptr)(texture, s, t, r, q);
// }
// static void  glowMultiTexCoord4xvOES(GPMULTITEXCOORD4XVOES fnptr, GLenum  texture, const GLfixed * coords) {
//   (*fnptr)(texture, coords);
// }
// static void  glowMultiTexCoordPointerEXT(GPMULTITEXCOORDPOINTEREXT fnptr, GLenum  texunit, GLint  size, GLenum  type, GLsizei  stride, const void * pointer) {
//   (*fnptr)(texunit, size, type, stride, pointer);
// }
// static void  glowMultiTexEnvfEXT(GPMULTITEXENVFEXT fnptr, GLenum  texunit, GLenum  target, GLenum  pname, GLfloat  param) {
//   (*fnptr)(texunit, target, pname, param);
// }
// static void  glowMultiTexEnvfvEXT(GPMULTITEXENVFVEXT fnptr, GLenum  texunit, GLenum  target, GLenum  pname, const GLfloat * params) {
//   (*fnptr)(texunit, target, pname, params);
// }
// static void  glowMultiTexEnviEXT(GPMULTITEXENVIEXT fnptr, GLenum  texunit, GLenum  target, GLenum  pname, GLint  param) {
//   (*fnptr)(texunit, target, pname, param);
// }
// static void  glowMultiTexEnvivEXT(GPMULTITEXENVIVEXT fnptr, GLenum  texunit, GLenum  target, GLenum  pname, const GLint * params) {
//   (*fnptr)(texunit, target, pname, params);
// }
// static void  glowMultiTexGendEXT(GPMULTITEXGENDEXT fnptr, GLenum  texunit, GLenum  coord, GLenum  pname, GLdouble  param) {
//   (*fnptr)(texunit, coord, pname, param);
// }
// static void  glowMultiTexGendvEXT(GPMULTITEXGENDVEXT fnptr, GLenum  texunit, GLenum  coord, GLenum  pname, const GLdouble * params) {
//   (*fnptr)(texunit, coord, pname, params);
// }
// static void  glowMultiTexGenfEXT(GPMULTITEXGENFEXT fnptr, GLenum  texunit, GLenum  coord, GLenum  pname, GLfloat  param) {
//   (*fnptr)(texunit, coord, pname, param);
// }
// static void  glowMultiTexGenfvEXT(GPMULTITEXGENFVEXT fnptr, GLenum  texunit, GLenum  coord, GLenum  pname, const GLfloat * params) {
//   (*fnptr)(texunit, coord, pname, params);
// }
// static void  glowMultiTexGeniEXT(GPMULTITEXGENIEXT fnptr, GLenum  texunit, GLenum  coord, GLenum  pname, GLint  param) {
//   (*fnptr)(texunit, coord, pname, param);
// }
// static void  glowMultiTexGenivEXT(GPMULTITEXGENIVEXT fnptr, GLenum  texunit, GLenum  coord, GLenum  pname, const GLint * params) {
//   (*fnptr)(texunit, coord, pname, params);
// }
// static void  glowMultiTexImage1DEXT(GPMULTITEXIMAGE1DEXT fnptr, GLenum  texunit, GLenum  target, GLint  level, GLint  internalformat, GLsizei  width, GLint  border, GLenum  format, GLenum  type, const void * pixels) {
//   (*fnptr)(texunit, target, level, internalformat, width, border, format, type, pixels);
// }
// static void  glowMultiTexImage2DEXT(GPMULTITEXIMAGE2DEXT fnptr, GLenum  texunit, GLenum  target, GLint  level, GLint  internalformat, GLsizei  width, GLsizei  height, GLint  border, GLenum  format, GLenum  type, const void * pixels) {
//   (*fnptr)(texunit, target, level, internalformat, width, height, border, format, type, pixels);
// }
// static void  glowMultiTexImage3DEXT(GPMULTITEXIMAGE3DEXT fnptr, GLenum  texunit, GLenum  target, GLint  level, GLint  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth, GLint  border, GLenum  format, GLenum  type, const void * pixels) {
//   (*fnptr)(texunit, target, level, internalformat, width, height, depth, border, format, type, pixels);
// }
// static void  glowMultiTexParameterIivEXT(GPMULTITEXPARAMETERIIVEXT fnptr, GLenum  texunit, GLenum  target, GLenum  pname, const GLint * params) {
//   (*fnptr)(texunit, target, pname, params);
// }
// static void  glowMultiTexParameterIuivEXT(GPMULTITEXPARAMETERIUIVEXT fnptr, GLenum  texunit, GLenum  target, GLenum  pname, const GLuint * params) {
//   (*fnptr)(texunit, target, pname, params);
// }
// static void  glowMultiTexParameterfEXT(GPMULTITEXPARAMETERFEXT fnptr, GLenum  texunit, GLenum  target, GLenum  pname, GLfloat  param) {
//   (*fnptr)(texunit, target, pname, param);
// }
// static void  glowMultiTexParameterfvEXT(GPMULTITEXPARAMETERFVEXT fnptr, GLenum  texunit, GLenum  target, GLenum  pname, const GLfloat * params) {
//   (*fnptr)(texunit, target, pname, params);
// }
// static void  glowMultiTexParameteriEXT(GPMULTITEXPARAMETERIEXT fnptr, GLenum  texunit, GLenum  target, GLenum  pname, GLint  param) {
//   (*fnptr)(texunit, target, pname, param);
// }
// static void  glowMultiTexParameterivEXT(GPMULTITEXPARAMETERIVEXT fnptr, GLenum  texunit, GLenum  target, GLenum  pname, const GLint * params) {
//   (*fnptr)(texunit, target, pname, params);
// }
// static void  glowMultiTexRenderbufferEXT(GPMULTITEXRENDERBUFFEREXT fnptr, GLenum  texunit, GLenum  target, GLuint  renderbuffer) {
//   (*fnptr)(texunit, target, renderbuffer);
// }
// static void  glowMultiTexSubImage1DEXT(GPMULTITEXSUBIMAGE1DEXT fnptr, GLenum  texunit, GLenum  target, GLint  level, GLint  xoffset, GLsizei  width, GLenum  format, GLenum  type, const void * pixels) {
//   (*fnptr)(texunit, target, level, xoffset, width, format, type, pixels);
// }
// static void  glowMultiTexSubImage2DEXT(GPMULTITEXSUBIMAGE2DEXT fnptr, GLenum  texunit, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLsizei  width, GLsizei  height, GLenum  format, GLenum  type, const void * pixels) {
//   (*fnptr)(texunit, target, level, xoffset, yoffset, width, height, format, type, pixels);
// }
// static void  glowMultiTexSubImage3DEXT(GPMULTITEXSUBIMAGE3DEXT fnptr, GLenum  texunit, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLsizei  width, GLsizei  height, GLsizei  depth, GLenum  format, GLenum  type, const void * pixels) {
//   (*fnptr)(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
// }
// static void  glowNamedBufferDataEXT(GPNAMEDBUFFERDATAEXT fnptr, GLuint  buffer, GLsizeiptr  size, const void * data, GLenum  usage) {
//   (*fnptr)(buffer, size, data, usage);
// }
// static void  glowNamedBufferStorageEXT(GPNAMEDBUFFERSTORAGEEXT fnptr, GLuint  buffer, GLsizeiptr  size, const void * data, GLbitfield  flags) {
//   (*fnptr)(buffer, size, data, flags);
// }
// static void  glowNamedBufferSubDataEXT(GPNAMEDBUFFERSUBDATAEXT fnptr, GLuint  buffer, GLintptr  offset, GLsizeiptr  size, const void * data) {
//   (*fnptr)(buffer, offset, size, data);
// }
// static void  glowNamedCopyBufferSubDataEXT(GPNAMEDCOPYBUFFERSUBDATAEXT fnptr, GLuint  readBuffer, GLuint  writeBuffer, GLintptr  readOffset, GLintptr  writeOffset, GLsizeiptr  size) {
//   (*fnptr)(readBuffer, writeBuffer, readOffset, writeOffset, size);
// }
// static void  glowNamedFramebufferParameteriEXT(GPNAMEDFRAMEBUFFERPARAMETERIEXT fnptr, GLuint  framebuffer, GLenum  pname, GLint  param) {
//   (*fnptr)(framebuffer, pname, param);
// }
// static void  glowNamedFramebufferRenderbufferEXT(GPNAMEDFRAMEBUFFERRENDERBUFFEREXT fnptr, GLuint  framebuffer, GLenum  attachment, GLenum  renderbuffertarget, GLuint  renderbuffer) {
//   (*fnptr)(framebuffer, attachment, renderbuffertarget, renderbuffer);
// }
// static void  glowNamedFramebufferTexture1DEXT(GPNAMEDFRAMEBUFFERTEXTURE1DEXT fnptr, GLuint  framebuffer, GLenum  attachment, GLenum  textarget, GLuint  texture, GLint  level) {
//   (*fnptr)(framebuffer, attachment, textarget, texture, level);
// }
// static void  glowNamedFramebufferTexture2DEXT(GPNAMEDFRAMEBUFFERTEXTURE2DEXT fnptr, GLuint  framebuffer, GLenum  attachment, GLenum  textarget, GLuint  texture, GLint  level) {
//   (*fnptr)(framebuffer, attachment, textarget, texture, level);
// }
// static void  glowNamedFramebufferTexture3DEXT(GPNAMEDFRAMEBUFFERTEXTURE3DEXT fnptr, GLuint  framebuffer, GLenum  attachment, GLenum  textarget, GLuint  texture, GLint  level, GLint  zoffset) {
//   (*fnptr)(framebuffer, attachment, textarget, texture, level, zoffset);
// }
// static void  glowNamedFramebufferTextureEXT(GPNAMEDFRAMEBUFFERTEXTUREEXT fnptr, GLuint  framebuffer, GLenum  attachment, GLuint  texture, GLint  level) {
//   (*fnptr)(framebuffer, attachment, texture, level);
// }
// static void  glowNamedFramebufferTextureFaceEXT(GPNAMEDFRAMEBUFFERTEXTUREFACEEXT fnptr, GLuint  framebuffer, GLenum  attachment, GLuint  texture, GLint  level, GLenum  face) {
//   (*fnptr)(framebuffer, attachment, texture, level, face);
// }
// static void  glowNamedFramebufferTextureLayerEXT(GPNAMEDFRAMEBUFFERTEXTURELAYEREXT fnptr, GLuint  framebuffer, GLenum  attachment, GLuint  texture, GLint  level, GLint  layer) {
//   (*fnptr)(framebuffer, attachment, texture, level, layer);
// }
// static void  glowNamedProgramLocalParameter4dEXT(GPNAMEDPROGRAMLOCALPARAMETER4DEXT fnptr, GLuint  program, GLenum  target, GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w) {
//   (*fnptr)(program, target, index, x, y, z, w);
// }
// static void  glowNamedProgramLocalParameter4dvEXT(GPNAMEDPROGRAMLOCALPARAMETER4DVEXT fnptr, GLuint  program, GLenum  target, GLuint  index, const GLdouble * params) {
//   (*fnptr)(program, target, index, params);
// }
// static void  glowNamedProgramLocalParameter4fEXT(GPNAMEDPROGRAMLOCALPARAMETER4FEXT fnptr, GLuint  program, GLenum  target, GLuint  index, GLfloat  x, GLfloat  y, GLfloat  z, GLfloat  w) {
//   (*fnptr)(program, target, index, x, y, z, w);
// }
// static void  glowNamedProgramLocalParameter4fvEXT(GPNAMEDPROGRAMLOCALPARAMETER4FVEXT fnptr, GLuint  program, GLenum  target, GLuint  index, const GLfloat * params) {
//   (*fnptr)(program, target, index, params);
// }
// static void  glowNamedProgramLocalParameterI4iEXT(GPNAMEDPROGRAMLOCALPARAMETERI4IEXT fnptr, GLuint  program, GLenum  target, GLuint  index, GLint  x, GLint  y, GLint  z, GLint  w) {
//   (*fnptr)(program, target, index, x, y, z, w);
// }
// static void  glowNamedProgramLocalParameterI4ivEXT(GPNAMEDPROGRAMLOCALPARAMETERI4IVEXT fnptr, GLuint  program, GLenum  target, GLuint  index, const GLint * params) {
//   (*fnptr)(program, target, index, params);
// }
// static void  glowNamedProgramLocalParameterI4uiEXT(GPNAMEDPROGRAMLOCALPARAMETERI4UIEXT fnptr, GLuint  program, GLenum  target, GLuint  index, GLuint  x, GLuint  y, GLuint  z, GLuint  w) {
//   (*fnptr)(program, target, index, x, y, z, w);
// }
// static void  glowNamedProgramLocalParameterI4uivEXT(GPNAMEDPROGRAMLOCALPARAMETERI4UIVEXT fnptr, GLuint  program, GLenum  target, GLuint  index, const GLuint * params) {
//   (*fnptr)(program, target, index, params);
// }
// static void  glowNamedProgramLocalParameters4fvEXT(GPNAMEDPROGRAMLOCALPARAMETERS4FVEXT fnptr, GLuint  program, GLenum  target, GLuint  index, GLsizei  count, const GLfloat * params) {
//   (*fnptr)(program, target, index, count, params);
// }
// static void  glowNamedProgramLocalParametersI4ivEXT(GPNAMEDPROGRAMLOCALPARAMETERSI4IVEXT fnptr, GLuint  program, GLenum  target, GLuint  index, GLsizei  count, const GLint * params) {
//   (*fnptr)(program, target, index, count, params);
// }
// static void  glowNamedProgramLocalParametersI4uivEXT(GPNAMEDPROGRAMLOCALPARAMETERSI4UIVEXT fnptr, GLuint  program, GLenum  target, GLuint  index, GLsizei  count, const GLuint * params) {
//   (*fnptr)(program, target, index, count, params);
// }
// static void  glowNamedProgramStringEXT(GPNAMEDPROGRAMSTRINGEXT fnptr, GLuint  program, GLenum  target, GLenum  format, GLsizei  len, const void * string) {
//   (*fnptr)(program, target, format, len, string);
// }
// static void  glowNamedRenderbufferStorageEXT(GPNAMEDRENDERBUFFERSTORAGEEXT fnptr, GLuint  renderbuffer, GLenum  internalformat, GLsizei  width, GLsizei  height) {
//   (*fnptr)(renderbuffer, internalformat, width, height);
// }
// static void  glowNamedRenderbufferStorageMultisampleCoverageEXT(GPNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXT fnptr, GLuint  renderbuffer, GLsizei  coverageSamples, GLsizei  colorSamples, GLenum  internalformat, GLsizei  width, GLsizei  height) {
//   (*fnptr)(renderbuffer, coverageSamples, colorSamples, internalformat, width, height);
// }
// static void  glowNamedRenderbufferStorageMultisampleEXT(GPNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXT fnptr, GLuint  renderbuffer, GLsizei  samples, GLenum  internalformat, GLsizei  width, GLsizei  height) {
//   (*fnptr)(renderbuffer, samples, internalformat, width, height);
// }
// static void  glowNamedStringARB(GPNAMEDSTRINGARB fnptr, GLenum  type, GLint  namelen, const GLchar * name, GLint  stringlen, const GLchar * string) {
//   (*fnptr)(type, namelen, name, stringlen, string);
// }
// static GLuint  glowNewObjectBufferATI(GPNEWOBJECTBUFFERATI fnptr, GLsizei  size, const void * pointer, GLenum  usage) {
//   return (*fnptr)(size, pointer, usage);
// }
// static void  glowNormal3fVertex3fSUN(GPNORMAL3FVERTEX3FSUN fnptr, GLfloat  nx, GLfloat  ny, GLfloat  nz, GLfloat  x, GLfloat  y, GLfloat  z) {
//   (*fnptr)(nx, ny, nz, x, y, z);
// }
// static void  glowNormal3fVertex3fvSUN(GPNORMAL3FVERTEX3FVSUN fnptr, const GLfloat * n, const GLfloat * v) {
//   (*fnptr)(n, v);
// }
// static void  glowNormal3hNV(GPNORMAL3HNV fnptr, GLhalfNV  nx, GLhalfNV  ny, GLhalfNV  nz) {
//   (*fnptr)(nx, ny, nz);
// }
// static void  glowNormal3hvNV(GPNORMAL3HVNV fnptr, const GLhalfNV * v) {
//   (*fnptr)(v);
// }
// static void  glowNormal3xOES(GPNORMAL3XOES fnptr, GLfixed  nx, GLfixed  ny, GLfixed  nz) {
//   (*fnptr)(nx, ny, nz);
// }
// static void  glowNormal3xvOES(GPNORMAL3XVOES fnptr, const GLfixed * coords) {
//   (*fnptr)(coords);
// }
// static void  glowNormalFormatNV(GPNORMALFORMATNV fnptr, GLenum  type, GLsizei  stride) {
//   (*fnptr)(type, stride);
// }
// static void  glowNormalPointerEXT(GPNORMALPOINTEREXT fnptr, GLenum  type, GLsizei  stride, GLsizei  count, const void * pointer) {
//   (*fnptr)(type, stride, count, pointer);
// }
// static void  glowNormalPointerListIBM(GPNORMALPOINTERLISTIBM fnptr, GLenum  type, GLint  stride, const void ** pointer, GLint  ptrstride) {
//   (*fnptr)(type, stride, pointer, ptrstride);
// }
// static void  glowNormalPointervINTEL(GPNORMALPOINTERVINTEL fnptr, GLenum  type, const void ** pointer) {
//   (*fnptr)(type, pointer);
// }
// static void  glowNormalStream3bATI(GPNORMALSTREAM3BATI fnptr, GLenum  stream, GLbyte  nx, GLbyte  ny, GLbyte  nz) {
//   (*fnptr)(stream, nx, ny, nz);
// }
// static void  glowNormalStream3bvATI(GPNORMALSTREAM3BVATI fnptr, GLenum  stream, const GLbyte * coords) {
//   (*fnptr)(stream, coords);
// }
// static void  glowNormalStream3dATI(GPNORMALSTREAM3DATI fnptr, GLenum  stream, GLdouble  nx, GLdouble  ny, GLdouble  nz) {
//   (*fnptr)(stream, nx, ny, nz);
// }
// static void  glowNormalStream3dvATI(GPNORMALSTREAM3DVATI fnptr, GLenum  stream, const GLdouble * coords) {
//   (*fnptr)(stream, coords);
// }
// static void  glowNormalStream3fATI(GPNORMALSTREAM3FATI fnptr, GLenum  stream, GLfloat  nx, GLfloat  ny, GLfloat  nz) {
//   (*fnptr)(stream, nx, ny, nz);
// }
// static void  glowNormalStream3fvATI(GPNORMALSTREAM3FVATI fnptr, GLenum  stream, const GLfloat * coords) {
//   (*fnptr)(stream, coords);
// }
// static void  glowNormalStream3iATI(GPNORMALSTREAM3IATI fnptr, GLenum  stream, GLint  nx, GLint  ny, GLint  nz) {
//   (*fnptr)(stream, nx, ny, nz);
// }
// static void  glowNormalStream3ivATI(GPNORMALSTREAM3IVATI fnptr, GLenum  stream, const GLint * coords) {
//   (*fnptr)(stream, coords);
// }
// static void  glowNormalStream3sATI(GPNORMALSTREAM3SATI fnptr, GLenum  stream, GLshort  nx, GLshort  ny, GLshort  nz) {
//   (*fnptr)(stream, nx, ny, nz);
// }
// static void  glowNormalStream3svATI(GPNORMALSTREAM3SVATI fnptr, GLenum  stream, const GLshort * coords) {
//   (*fnptr)(stream, coords);
// }
// static void  glowObjectLabel(GPOBJECTLABEL fnptr, GLenum  identifier, GLuint  name, GLsizei  length, const GLchar * label) {
//   (*fnptr)(identifier, name, length, label);
// }
// static void  glowObjectLabelKHR(GPOBJECTLABELKHR fnptr, GLenum  identifier, GLuint  name, GLsizei  length, const GLchar * label) {
//   (*fnptr)(identifier, name, length, label);
// }
// static void  glowObjectPtrLabel(GPOBJECTPTRLABEL fnptr, const void * ptr, GLsizei  length, const GLchar * label) {
//   (*fnptr)(ptr, length, label);
// }
// static void  glowObjectPtrLabelKHR(GPOBJECTPTRLABELKHR fnptr, const void * ptr, GLsizei  length, const GLchar * label) {
//   (*fnptr)(ptr, length, label);
// }
// static GLenum  glowObjectPurgeableAPPLE(GPOBJECTPURGEABLEAPPLE fnptr, GLenum  objectType, GLuint  name, GLenum  option) {
//   return (*fnptr)(objectType, name, option);
// }
// static GLenum  glowObjectUnpurgeableAPPLE(GPOBJECTUNPURGEABLEAPPLE fnptr, GLenum  objectType, GLuint  name, GLenum  option) {
//   return (*fnptr)(objectType, name, option);
// }
// static void  glowOrthofOES(GPORTHOFOES fnptr, GLfloat  l, GLfloat  r, GLfloat  b, GLfloat  t, GLfloat  n, GLfloat  f) {
//   (*fnptr)(l, r, b, t, n, f);
// }
// static void  glowOrthoxOES(GPORTHOXOES fnptr, GLfixed  l, GLfixed  r, GLfixed  b, GLfixed  t, GLfixed  n, GLfixed  f) {
//   (*fnptr)(l, r, b, t, n, f);
// }
// static void  glowPNTrianglesfATI(GPPNTRIANGLESFATI fnptr, GLenum  pname, GLfloat  param) {
//   (*fnptr)(pname, param);
// }
// static void  glowPNTrianglesiATI(GPPNTRIANGLESIATI fnptr, GLenum  pname, GLint  param) {
//   (*fnptr)(pname, param);
// }
// static void  glowPassTexCoordATI(GPPASSTEXCOORDATI fnptr, GLuint  dst, GLuint  coord, GLenum  swizzle) {
//   (*fnptr)(dst, coord, swizzle);
// }
// static void  glowPassThroughxOES(GPPASSTHROUGHXOES fnptr, GLfixed  token) {
//   (*fnptr)(token);
// }
// static void  glowPatchParameterfv(GPPATCHPARAMETERFV fnptr, GLenum  pname, const GLfloat * values) {
//   (*fnptr)(pname, values);
// }
// static void  glowPatchParameteri(GPPATCHPARAMETERI fnptr, GLenum  pname, GLint  value) {
//   (*fnptr)(pname, value);
// }
// static void  glowPathColorGenNV(GPPATHCOLORGENNV fnptr, GLenum  color, GLenum  genMode, GLenum  colorFormat, const GLfloat * coeffs) {
//   (*fnptr)(color, genMode, colorFormat, coeffs);
// }
// static void  glowPathCommandsNV(GPPATHCOMMANDSNV fnptr, GLuint  path, GLsizei  numCommands, const GLubyte * commands, GLsizei  numCoords, GLenum  coordType, const void * coords) {
//   (*fnptr)(path, numCommands, commands, numCoords, coordType, coords);
// }
// static void  glowPathCoordsNV(GPPATHCOORDSNV fnptr, GLuint  path, GLsizei  numCoords, GLenum  coordType, const void * coords) {
//   (*fnptr)(path, numCoords, coordType, coords);
// }
// static void  glowPathCoverDepthFuncNV(GPPATHCOVERDEPTHFUNCNV fnptr, GLenum  func) {
//   (*fnptr)(func);
// }
// static void  glowPathDashArrayNV(GPPATHDASHARRAYNV fnptr, GLuint  path, GLsizei  dashCount, const GLfloat * dashArray) {
//   (*fnptr)(path, dashCount, dashArray);
// }
// static void  glowPathFogGenNV(GPPATHFOGGENNV fnptr, GLenum  genMode) {
//   (*fnptr)(genMode);
// }
// static void  glowPathGlyphRangeNV(GPPATHGLYPHRANGENV fnptr, GLuint  firstPathName, GLenum  fontTarget, const void * fontName, GLbitfield  fontStyle, GLuint  firstGlyph, GLsizei  numGlyphs, GLenum  handleMissingGlyphs, GLuint  pathParameterTemplate, GLfloat  emScale) {
//   (*fnptr)(firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale);
// }
// static void  glowPathGlyphsNV(GPPATHGLYPHSNV fnptr, GLuint  firstPathName, GLenum  fontTarget, const void * fontName, GLbitfield  fontStyle, GLsizei  numGlyphs, GLenum  type, const void * charcodes, GLenum  handleMissingGlyphs, GLuint  pathParameterTemplate, GLfloat  emScale) {
//   (*fnptr)(firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale);
// }
// static void  glowPathParameterfNV(GPPATHPARAMETERFNV fnptr, GLuint  path, GLenum  pname, GLfloat  value) {
//   (*fnptr)(path, pname, value);
// }
// static void  glowPathParameterfvNV(GPPATHPARAMETERFVNV fnptr, GLuint  path, GLenum  pname, const GLfloat * value) {
//   (*fnptr)(path, pname, value);
// }
// static void  glowPathParameteriNV(GPPATHPARAMETERINV fnptr, GLuint  path, GLenum  pname, GLint  value) {
//   (*fnptr)(path, pname, value);
// }
// static void  glowPathParameterivNV(GPPATHPARAMETERIVNV fnptr, GLuint  path, GLenum  pname, const GLint * value) {
//   (*fnptr)(path, pname, value);
// }
// static void  glowPathStencilDepthOffsetNV(GPPATHSTENCILDEPTHOFFSETNV fnptr, GLfloat  factor, GLfloat  units) {
//   (*fnptr)(factor, units);
// }
// static void  glowPathStencilFuncNV(GPPATHSTENCILFUNCNV fnptr, GLenum  func, GLint  ref, GLuint  mask) {
//   (*fnptr)(func, ref, mask);
// }
// static void  glowPathStringNV(GPPATHSTRINGNV fnptr, GLuint  path, GLenum  format, GLsizei  length, const void * pathString) {
//   (*fnptr)(path, format, length, pathString);
// }
// static void  glowPathSubCommandsNV(GPPATHSUBCOMMANDSNV fnptr, GLuint  path, GLsizei  commandStart, GLsizei  commandsToDelete, GLsizei  numCommands, const GLubyte * commands, GLsizei  numCoords, GLenum  coordType, const void * coords) {
//   (*fnptr)(path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords);
// }
// static void  glowPathSubCoordsNV(GPPATHSUBCOORDSNV fnptr, GLuint  path, GLsizei  coordStart, GLsizei  numCoords, GLenum  coordType, const void * coords) {
//   (*fnptr)(path, coordStart, numCoords, coordType, coords);
// }
// static void  glowPathTexGenNV(GPPATHTEXGENNV fnptr, GLenum  texCoordSet, GLenum  genMode, GLint  components, const GLfloat * coeffs) {
//   (*fnptr)(texCoordSet, genMode, components, coeffs);
// }
// static void  glowPauseTransformFeedback(GPPAUSETRANSFORMFEEDBACK fnptr) {
//   (*fnptr)();
// }
// static void  glowPauseTransformFeedbackNV(GPPAUSETRANSFORMFEEDBACKNV fnptr) {
//   (*fnptr)();
// }
// static void  glowPixelDataRangeNV(GPPIXELDATARANGENV fnptr, GLenum  target, GLsizei  length, const void * pointer) {
//   (*fnptr)(target, length, pointer);
// }
// static void  glowPixelMapx(GPPIXELMAPX fnptr, GLenum  map, GLint  size, const GLfixed * values) {
//   (*fnptr)(map, size, values);
// }
// static void  glowPixelStoref(GPPIXELSTOREF fnptr, GLenum  pname, GLfloat  param) {
//   (*fnptr)(pname, param);
// }
// static void  glowPixelStorei(GPPIXELSTOREI fnptr, GLenum  pname, GLint  param) {
//   (*fnptr)(pname, param);
// }
// static void  glowPixelStorex(GPPIXELSTOREX fnptr, GLenum  pname, GLfixed  param) {
//   (*fnptr)(pname, param);
// }
// static void  glowPixelTexGenParameterfSGIS(GPPIXELTEXGENPARAMETERFSGIS fnptr, GLenum  pname, GLfloat  param) {
//   (*fnptr)(pname, param);
// }
// static void  glowPixelTexGenParameterfvSGIS(GPPIXELTEXGENPARAMETERFVSGIS fnptr, GLenum  pname, const GLfloat * params) {
//   (*fnptr)(pname, params);
// }
// static void  glowPixelTexGenParameteriSGIS(GPPIXELTEXGENPARAMETERISGIS fnptr, GLenum  pname, GLint  param) {
//   (*fnptr)(pname, param);
// }
// static void  glowPixelTexGenParameterivSGIS(GPPIXELTEXGENPARAMETERIVSGIS fnptr, GLenum  pname, const GLint * params) {
//   (*fnptr)(pname, params);
// }
// static void  glowPixelTexGenSGIX(GPPIXELTEXGENSGIX fnptr, GLenum  mode) {
//   (*fnptr)(mode);
// }
// static void  glowPixelTransferxOES(GPPIXELTRANSFERXOES fnptr, GLenum  pname, GLfixed  param) {
//   (*fnptr)(pname, param);
// }
// static void  glowPixelTransformParameterfEXT(GPPIXELTRANSFORMPARAMETERFEXT fnptr, GLenum  target, GLenum  pname, GLfloat  param) {
//   (*fnptr)(target, pname, param);
// }
// static void  glowPixelTransformParameterfvEXT(GPPIXELTRANSFORMPARAMETERFVEXT fnptr, GLenum  target, GLenum  pname, const GLfloat * params) {
//   (*fnptr)(target, pname, params);
// }
// static void  glowPixelTransformParameteriEXT(GPPIXELTRANSFORMPARAMETERIEXT fnptr, GLenum  target, GLenum  pname, GLint  param) {
//   (*fnptr)(target, pname, param);
// }
// static void  glowPixelTransformParameterivEXT(GPPIXELTRANSFORMPARAMETERIVEXT fnptr, GLenum  target, GLenum  pname, const GLint * params) {
//   (*fnptr)(target, pname, params);
// }
// static void  glowPixelZoomxOES(GPPIXELZOOMXOES fnptr, GLfixed  xfactor, GLfixed  yfactor) {
//   (*fnptr)(xfactor, yfactor);
// }
// static GLboolean  glowPointAlongPathNV(GPPOINTALONGPATHNV fnptr, GLuint  path, GLsizei  startSegment, GLsizei  numSegments, GLfloat  distance, GLfloat * x, GLfloat * y, GLfloat * tangentX, GLfloat * tangentY) {
//   return (*fnptr)(path, startSegment, numSegments, distance, x, y, tangentX, tangentY);
// }
// static void  glowPointParameterf(GPPOINTPARAMETERF fnptr, GLenum  pname, GLfloat  param) {
//   (*fnptr)(pname, param);
// }
// static void  glowPointParameterfARB(GPPOINTPARAMETERFARB fnptr, GLenum  pname, GLfloat  param) {
//   (*fnptr)(pname, param);
// }
// static void  glowPointParameterfEXT(GPPOINTPARAMETERFEXT fnptr, GLenum  pname, GLfloat  param) {
//   (*fnptr)(pname, param);
// }
// static void  glowPointParameterfSGIS(GPPOINTPARAMETERFSGIS fnptr, GLenum  pname, GLfloat  param) {
//   (*fnptr)(pname, param);
// }
// static void  glowPointParameterfv(GPPOINTPARAMETERFV fnptr, GLenum  pname, const GLfloat * params) {
//   (*fnptr)(pname, params);
// }
// static void  glowPointParameterfvARB(GPPOINTPARAMETERFVARB fnptr, GLenum  pname, const GLfloat * params) {
//   (*fnptr)(pname, params);
// }
// static void  glowPointParameterfvEXT(GPPOINTPARAMETERFVEXT fnptr, GLenum  pname, const GLfloat * params) {
//   (*fnptr)(pname, params);
// }
// static void  glowPointParameterfvSGIS(GPPOINTPARAMETERFVSGIS fnptr, GLenum  pname, const GLfloat * params) {
//   (*fnptr)(pname, params);
// }
// static void  glowPointParameteri(GPPOINTPARAMETERI fnptr, GLenum  pname, GLint  param) {
//   (*fnptr)(pname, param);
// }
// static void  glowPointParameteriNV(GPPOINTPARAMETERINV fnptr, GLenum  pname, GLint  param) {
//   (*fnptr)(pname, param);
// }
// static void  glowPointParameteriv(GPPOINTPARAMETERIV fnptr, GLenum  pname, const GLint * params) {
//   (*fnptr)(pname, params);
// }
// static void  glowPointParameterivNV(GPPOINTPARAMETERIVNV fnptr, GLenum  pname, const GLint * params) {
//   (*fnptr)(pname, params);
// }
// static void  glowPointParameterxOES(GPPOINTPARAMETERXOES fnptr, GLenum  pname, GLfixed  param) {
//   (*fnptr)(pname, param);
// }
// static void  glowPointParameterxvOES(GPPOINTPARAMETERXVOES fnptr, GLenum  pname, const GLfixed * params) {
//   (*fnptr)(pname, params);
// }
// static void  glowPointSize(GPPOINTSIZE fnptr, GLfloat  size) {
//   (*fnptr)(size);
// }
// static void  glowPointSizexOES(GPPOINTSIZEXOES fnptr, GLfixed  size) {
//   (*fnptr)(size);
// }
// static GLint  glowPollAsyncSGIX(GPPOLLASYNCSGIX fnptr, GLuint * markerp) {
//   return (*fnptr)(markerp);
// }
// static GLint  glowPollInstrumentsSGIX(GPPOLLINSTRUMENTSSGIX fnptr, GLint * marker_p) {
//   return (*fnptr)(marker_p);
// }
// static void  glowPolygonMode(GPPOLYGONMODE fnptr, GLenum  face, GLenum  mode) {
//   (*fnptr)(face, mode);
// }
// static void  glowPolygonOffset(GPPOLYGONOFFSET fnptr, GLfloat  factor, GLfloat  units) {
//   (*fnptr)(factor, units);
// }
// static void  glowPolygonOffsetEXT(GPPOLYGONOFFSETEXT fnptr, GLfloat  factor, GLfloat  bias) {
//   (*fnptr)(factor, bias);
// }
// static void  glowPolygonOffsetxOES(GPPOLYGONOFFSETXOES fnptr, GLfixed  factor, GLfixed  units) {
//   (*fnptr)(factor, units);
// }
// static void  glowPopDebugGroup(GPPOPDEBUGGROUP fnptr) {
//   (*fnptr)();
// }
// static void  glowPopDebugGroupKHR(GPPOPDEBUGGROUPKHR fnptr) {
//   (*fnptr)();
// }
// static void  glowPopGroupMarkerEXT(GPPOPGROUPMARKEREXT fnptr) {
//   (*fnptr)();
// }
// static void  glowPresentFrameDualFillNV(GPPRESENTFRAMEDUALFILLNV fnptr, GLuint  video_slot, GLuint64EXT  minPresentTime, GLuint  beginPresentTimeId, GLuint  presentDurationId, GLenum  type, GLenum  target0, GLuint  fill0, GLenum  target1, GLuint  fill1, GLenum  target2, GLuint  fill2, GLenum  target3, GLuint  fill3) {
//   (*fnptr)(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, target1, fill1, target2, fill2, target3, fill3);
// }
// static void  glowPresentFrameKeyedNV(GPPRESENTFRAMEKEYEDNV fnptr, GLuint  video_slot, GLuint64EXT  minPresentTime, GLuint  beginPresentTimeId, GLuint  presentDurationId, GLenum  type, GLenum  target0, GLuint  fill0, GLuint  key0, GLenum  target1, GLuint  fill1, GLuint  key1) {
//   (*fnptr)(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, key0, target1, fill1, key1);
// }
// static void  glowPrimitiveRestartIndex(GPPRIMITIVERESTARTINDEX fnptr, GLuint  index) {
//   (*fnptr)(index);
// }
// static void  glowPrimitiveRestartIndexNV(GPPRIMITIVERESTARTINDEXNV fnptr, GLuint  index) {
//   (*fnptr)(index);
// }
// static void  glowPrimitiveRestartNV(GPPRIMITIVERESTARTNV fnptr) {
//   (*fnptr)();
// }
// static void  glowPrioritizeTexturesEXT(GPPRIORITIZETEXTURESEXT fnptr, GLsizei  n, const GLuint * textures, const GLclampf * priorities) {
//   (*fnptr)(n, textures, priorities);
// }
// static void  glowPrioritizeTexturesxOES(GPPRIORITIZETEXTURESXOES fnptr, GLsizei  n, const GLuint * textures, const GLfixed * priorities) {
//   (*fnptr)(n, textures, priorities);
// }
// static void  glowProgramBinary(GPPROGRAMBINARY fnptr, GLuint  program, GLenum  binaryFormat, const void * binary, GLsizei  length) {
//   (*fnptr)(program, binaryFormat, binary, length);
// }
// static void  glowProgramBufferParametersIivNV(GPPROGRAMBUFFERPARAMETERSIIVNV fnptr, GLenum  target, GLuint  bindingIndex, GLuint  wordIndex, GLsizei  count, const GLint * params) {
//   (*fnptr)(target, bindingIndex, wordIndex, count, params);
// }
// static void  glowProgramBufferParametersIuivNV(GPPROGRAMBUFFERPARAMETERSIUIVNV fnptr, GLenum  target, GLuint  bindingIndex, GLuint  wordIndex, GLsizei  count, const GLuint * params) {
//   (*fnptr)(target, bindingIndex, wordIndex, count, params);
// }
// static void  glowProgramBufferParametersfvNV(GPPROGRAMBUFFERPARAMETERSFVNV fnptr, GLenum  target, GLuint  bindingIndex, GLuint  wordIndex, GLsizei  count, const GLfloat * params) {
//   (*fnptr)(target, bindingIndex, wordIndex, count, params);
// }
// static void  glowProgramEnvParameter4dARB(GPPROGRAMENVPARAMETER4DARB fnptr, GLenum  target, GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w) {
//   (*fnptr)(target, index, x, y, z, w);
// }
// static void  glowProgramEnvParameter4dvARB(GPPROGRAMENVPARAMETER4DVARB fnptr, GLenum  target, GLuint  index, const GLdouble * params) {
//   (*fnptr)(target, index, params);
// }
// static void  glowProgramEnvParameter4fARB(GPPROGRAMENVPARAMETER4FARB fnptr, GLenum  target, GLuint  index, GLfloat  x, GLfloat  y, GLfloat  z, GLfloat  w) {
//   (*fnptr)(target, index, x, y, z, w);
// }
// static void  glowProgramEnvParameter4fvARB(GPPROGRAMENVPARAMETER4FVARB fnptr, GLenum  target, GLuint  index, const GLfloat * params) {
//   (*fnptr)(target, index, params);
// }
// static void  glowProgramEnvParameterI4iNV(GPPROGRAMENVPARAMETERI4INV fnptr, GLenum  target, GLuint  index, GLint  x, GLint  y, GLint  z, GLint  w) {
//   (*fnptr)(target, index, x, y, z, w);
// }
// static void  glowProgramEnvParameterI4ivNV(GPPROGRAMENVPARAMETERI4IVNV fnptr, GLenum  target, GLuint  index, const GLint * params) {
//   (*fnptr)(target, index, params);
// }
// static void  glowProgramEnvParameterI4uiNV(GPPROGRAMENVPARAMETERI4UINV fnptr, GLenum  target, GLuint  index, GLuint  x, GLuint  y, GLuint  z, GLuint  w) {
//   (*fnptr)(target, index, x, y, z, w);
// }
// static void  glowProgramEnvParameterI4uivNV(GPPROGRAMENVPARAMETERI4UIVNV fnptr, GLenum  target, GLuint  index, const GLuint * params) {
//   (*fnptr)(target, index, params);
// }
// static void  glowProgramEnvParameters4fvEXT(GPPROGRAMENVPARAMETERS4FVEXT fnptr, GLenum  target, GLuint  index, GLsizei  count, const GLfloat * params) {
//   (*fnptr)(target, index, count, params);
// }
// static void  glowProgramEnvParametersI4ivNV(GPPROGRAMENVPARAMETERSI4IVNV fnptr, GLenum  target, GLuint  index, GLsizei  count, const GLint * params) {
//   (*fnptr)(target, index, count, params);
// }
// static void  glowProgramEnvParametersI4uivNV(GPPROGRAMENVPARAMETERSI4UIVNV fnptr, GLenum  target, GLuint  index, GLsizei  count, const GLuint * params) {
//   (*fnptr)(target, index, count, params);
// }
// static void  glowProgramLocalParameter4dARB(GPPROGRAMLOCALPARAMETER4DARB fnptr, GLenum  target, GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w) {
//   (*fnptr)(target, index, x, y, z, w);
// }
// static void  glowProgramLocalParameter4dvARB(GPPROGRAMLOCALPARAMETER4DVARB fnptr, GLenum  target, GLuint  index, const GLdouble * params) {
//   (*fnptr)(target, index, params);
// }
// static void  glowProgramLocalParameter4fARB(GPPROGRAMLOCALPARAMETER4FARB fnptr, GLenum  target, GLuint  index, GLfloat  x, GLfloat  y, GLfloat  z, GLfloat  w) {
//   (*fnptr)(target, index, x, y, z, w);
// }
// static void  glowProgramLocalParameter4fvARB(GPPROGRAMLOCALPARAMETER4FVARB fnptr, GLenum  target, GLuint  index, const GLfloat * params) {
//   (*fnptr)(target, index, params);
// }
// static void  glowProgramLocalParameterI4iNV(GPPROGRAMLOCALPARAMETERI4INV fnptr, GLenum  target, GLuint  index, GLint  x, GLint  y, GLint  z, GLint  w) {
//   (*fnptr)(target, index, x, y, z, w);
// }
// static void  glowProgramLocalParameterI4ivNV(GPPROGRAMLOCALPARAMETERI4IVNV fnptr, GLenum  target, GLuint  index, const GLint * params) {
//   (*fnptr)(target, index, params);
// }
// static void  glowProgramLocalParameterI4uiNV(GPPROGRAMLOCALPARAMETERI4UINV fnptr, GLenum  target, GLuint  index, GLuint  x, GLuint  y, GLuint  z, GLuint  w) {
//   (*fnptr)(target, index, x, y, z, w);
// }
// static void  glowProgramLocalParameterI4uivNV(GPPROGRAMLOCALPARAMETERI4UIVNV fnptr, GLenum  target, GLuint  index, const GLuint * params) {
//   (*fnptr)(target, index, params);
// }
// static void  glowProgramLocalParameters4fvEXT(GPPROGRAMLOCALPARAMETERS4FVEXT fnptr, GLenum  target, GLuint  index, GLsizei  count, const GLfloat * params) {
//   (*fnptr)(target, index, count, params);
// }
// static void  glowProgramLocalParametersI4ivNV(GPPROGRAMLOCALPARAMETERSI4IVNV fnptr, GLenum  target, GLuint  index, GLsizei  count, const GLint * params) {
//   (*fnptr)(target, index, count, params);
// }
// static void  glowProgramLocalParametersI4uivNV(GPPROGRAMLOCALPARAMETERSI4UIVNV fnptr, GLenum  target, GLuint  index, GLsizei  count, const GLuint * params) {
//   (*fnptr)(target, index, count, params);
// }
// static void  glowProgramNamedParameter4dNV(GPPROGRAMNAMEDPARAMETER4DNV fnptr, GLuint  id, GLsizei  len, const GLubyte * name, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w) {
//   (*fnptr)(id, len, name, x, y, z, w);
// }
// static void  glowProgramNamedParameter4dvNV(GPPROGRAMNAMEDPARAMETER4DVNV fnptr, GLuint  id, GLsizei  len, const GLubyte * name, const GLdouble * v) {
//   (*fnptr)(id, len, name, v);
// }
// static void  glowProgramNamedParameter4fNV(GPPROGRAMNAMEDPARAMETER4FNV fnptr, GLuint  id, GLsizei  len, const GLubyte * name, GLfloat  x, GLfloat  y, GLfloat  z, GLfloat  w) {
//   (*fnptr)(id, len, name, x, y, z, w);
// }
// static void  glowProgramNamedParameter4fvNV(GPPROGRAMNAMEDPARAMETER4FVNV fnptr, GLuint  id, GLsizei  len, const GLubyte * name, const GLfloat * v) {
//   (*fnptr)(id, len, name, v);
// }
// static void  glowProgramParameter4dNV(GPPROGRAMPARAMETER4DNV fnptr, GLenum  target, GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w) {
//   (*fnptr)(target, index, x, y, z, w);
// }
// static void  glowProgramParameter4dvNV(GPPROGRAMPARAMETER4DVNV fnptr, GLenum  target, GLuint  index, const GLdouble * v) {
//   (*fnptr)(target, index, v);
// }
// static void  glowProgramParameter4fNV(GPPROGRAMPARAMETER4FNV fnptr, GLenum  target, GLuint  index, GLfloat  x, GLfloat  y, GLfloat  z, GLfloat  w) {
//   (*fnptr)(target, index, x, y, z, w);
// }
// static void  glowProgramParameter4fvNV(GPPROGRAMPARAMETER4FVNV fnptr, GLenum  target, GLuint  index, const GLfloat * v) {
//   (*fnptr)(target, index, v);
// }
// static void  glowProgramParameteri(GPPROGRAMPARAMETERI fnptr, GLuint  program, GLenum  pname, GLint  value) {
//   (*fnptr)(program, pname, value);
// }
// static void  glowProgramParameteriARB(GPPROGRAMPARAMETERIARB fnptr, GLuint  program, GLenum  pname, GLint  value) {
//   (*fnptr)(program, pname, value);
// }
// static void  glowProgramParameteriEXT(GPPROGRAMPARAMETERIEXT fnptr, GLuint  program, GLenum  pname, GLint  value) {
//   (*fnptr)(program, pname, value);
// }
// static void  glowProgramParameters4dvNV(GPPROGRAMPARAMETERS4DVNV fnptr, GLenum  target, GLuint  index, GLsizei  count, const GLdouble * v) {
//   (*fnptr)(target, index, count, v);
// }
// static void  glowProgramParameters4fvNV(GPPROGRAMPARAMETERS4FVNV fnptr, GLenum  target, GLuint  index, GLsizei  count, const GLfloat * v) {
//   (*fnptr)(target, index, count, v);
// }
// static void  glowProgramStringARB(GPPROGRAMSTRINGARB fnptr, GLenum  target, GLenum  format, GLsizei  len, const void * string) {
//   (*fnptr)(target, format, len, string);
// }
// static void  glowProgramSubroutineParametersuivNV(GPPROGRAMSUBROUTINEPARAMETERSUIVNV fnptr, GLenum  target, GLsizei  count, const GLuint * params) {
//   (*fnptr)(target, count, params);
// }
// static void  glowProgramUniform1d(GPPROGRAMUNIFORM1D fnptr, GLuint  program, GLint  location, GLdouble  v0) {
//   (*fnptr)(program, location, v0);
// }
// static void  glowProgramUniform1dEXT(GPPROGRAMUNIFORM1DEXT fnptr, GLuint  program, GLint  location, GLdouble  x) {
//   (*fnptr)(program, location, x);
// }
// static void  glowProgramUniform1dv(GPPROGRAMUNIFORM1DV fnptr, GLuint  program, GLint  location, GLsizei  count, const GLdouble * value) {
//   (*fnptr)(program, location, count, value);
// }
// static void  glowProgramUniform1dvEXT(GPPROGRAMUNIFORM1DVEXT fnptr, GLuint  program, GLint  location, GLsizei  count, const GLdouble * value) {
//   (*fnptr)(program, location, count, value);
// }
// static void  glowProgramUniform1f(GPPROGRAMUNIFORM1F fnptr, GLuint  program, GLint  location, GLfloat  v0) {
//   (*fnptr)(program, location, v0);
// }
// static void  glowProgramUniform1fEXT(GPPROGRAMUNIFORM1FEXT fnptr, GLuint  program, GLint  location, GLfloat  v0) {
//   (*fnptr)(program, location, v0);
// }
// static void  glowProgramUniform1fv(GPPROGRAMUNIFORM1FV fnptr, GLuint  program, GLint  location, GLsizei  count, const GLfloat * value) {
//   (*fnptr)(program, location, count, value);
// }
// static void  glowProgramUniform1fvEXT(GPPROGRAMUNIFORM1FVEXT fnptr, GLuint  program, GLint  location, GLsizei  count, const GLfloat * value) {
//   (*fnptr)(program, location, count, value);
// }
// static void  glowProgramUniform1i(GPPROGRAMUNIFORM1I fnptr, GLuint  program, GLint  location, GLint  v0) {
//   (*fnptr)(program, location, v0);
// }
// static void  glowProgramUniform1i64NV(GPPROGRAMUNIFORM1I64NV fnptr, GLuint  program, GLint  location, GLint64EXT  x) {
//   (*fnptr)(program, location, x);
// }
// static void  glowProgramUniform1i64vNV(GPPROGRAMUNIFORM1I64VNV fnptr, GLuint  program, GLint  location, GLsizei  count, const GLint64EXT * value) {
//   (*fnptr)(program, location, count, value);
// }
// static void  glowProgramUniform1iEXT(GPPROGRAMUNIFORM1IEXT fnptr, GLuint  program, GLint  location, GLint  v0) {
//   (*fnptr)(program, location, v0);
// }
// static void  glowProgramUniform1iv(GPPROGRAMUNIFORM1IV fnptr, GLuint  program, GLint  location, GLsizei  count, const GLint * value) {
//   (*fnptr)(program, location, count, value);
// }
// static void  glowProgramUniform1ivEXT(GPPROGRAMUNIFORM1IVEXT fnptr, GLuint  program, GLint  location, GLsizei  count, const GLint * value) {
//   (*fnptr)(program, location, count, value);
// }
// static void  glowProgramUniform1ui(GPPROGRAMUNIFORM1UI fnptr, GLuint  program, GLint  location, GLuint  v0) {
//   (*fnptr)(program, location, v0);
// }
// static void  glowProgramUniform1ui64NV(GPPROGRAMUNIFORM1UI64NV fnptr, GLuint  program, GLint  location, GLuint64EXT  x) {
//   (*fnptr)(program, location, x);
// }
// static void  glowProgramUniform1ui64vNV(GPPROGRAMUNIFORM1UI64VNV fnptr, GLuint  program, GLint  location, GLsizei  count, const GLuint64EXT * value) {
//   (*fnptr)(program, location, count, value);
// }
// static void  glowProgramUniform1uiEXT(GPPROGRAMUNIFORM1UIEXT fnptr, GLuint  program, GLint  location, GLuint  v0) {
//   (*fnptr)(program, location, v0);
// }
// static void  glowProgramUniform1uiv(GPPROGRAMUNIFORM1UIV fnptr, GLuint  program, GLint  location, GLsizei  count, const GLuint * value) {
//   (*fnptr)(program, location, count, value);
// }
// static void  glowProgramUniform1uivEXT(GPPROGRAMUNIFORM1UIVEXT fnptr, GLuint  program, GLint  location, GLsizei  count, const GLuint * value) {
//   (*fnptr)(program, location, count, value);
// }
// static void  glowProgramUniform2d(GPPROGRAMUNIFORM2D fnptr, GLuint  program, GLint  location, GLdouble  v0, GLdouble  v1) {
//   (*fnptr)(program, location, v0, v1);
// }
// static void  glowProgramUniform2dEXT(GPPROGRAMUNIFORM2DEXT fnptr, GLuint  program, GLint  location, GLdouble  x, GLdouble  y) {
//   (*fnptr)(program, location, x, y);
// }
// static void  glowProgramUniform2dv(GPPROGRAMUNIFORM2DV fnptr, GLuint  program, GLint  location, GLsizei  count, const GLdouble * value) {
//   (*fnptr)(program, location, count, value);
// }
// static void  glowProgramUniform2dvEXT(GPPROGRAMUNIFORM2DVEXT fnptr, GLuint  program, GLint  location, GLsizei  count, const GLdouble * value) {
//   (*fnptr)(program, location, count, value);
// }
// static void  glowProgramUniform2f(GPPROGRAMUNIFORM2F fnptr, GLuint  program, GLint  location, GLfloat  v0, GLfloat  v1) {
//   (*fnptr)(program, location, v0, v1);
// }
// static void  glowProgramUniform2fEXT(GPPROGRAMUNIFORM2FEXT fnptr, GLuint  program, GLint  location, GLfloat  v0, GLfloat  v1) {
//   (*fnptr)(program, location, v0, v1);
// }
// static void  glowProgramUniform2fv(GPPROGRAMUNIFORM2FV fnptr, GLuint  program, GLint  location, GLsizei  count, const GLfloat * value) {
//   (*fnptr)(program, location, count, value);
// }
// static void  glowProgramUniform2fvEXT(GPPROGRAMUNIFORM2FVEXT fnptr, GLuint  program, GLint  location, GLsizei  count, const GLfloat * value) {
//   (*fnptr)(program, location, count, value);
// }
// static void  glowProgramUniform2i(GPPROGRAMUNIFORM2I fnptr, GLuint  program, GLint  location, GLint  v0, GLint  v1) {
//   (*fnptr)(program, location, v0, v1);
// }
// static void  glowProgramUniform2i64NV(GPPROGRAMUNIFORM2I64NV fnptr, GLuint  program, GLint  location, GLint64EXT  x, GLint64EXT  y) {
//   (*fnptr)(program, location, x, y);
// }
// static void  glowProgramUniform2i64vNV(GPPROGRAMUNIFORM2I64VNV fnptr, GLuint  program, GLint  location, GLsizei  count, const GLint64EXT * value) {
//   (*fnptr)(program, location, count, value);
// }
// static void  glowProgramUniform2iEXT(GPPROGRAMUNIFORM2IEXT fnptr, GLuint  program, GLint  location, GLint  v0, GLint  v1) {
//   (*fnptr)(program, location, v0, v1);
// }
// static void  glowProgramUniform2iv(GPPROGRAMUNIFORM2IV fnptr, GLuint  program, GLint  location, GLsizei  count, const GLint * value) {
//   (*fnptr)(program, location, count, value);
// }
// static void  glowProgramUniform2ivEXT(GPPROGRAMUNIFORM2IVEXT fnptr, GLuint  program, GLint  location, GLsizei  count, const GLint * value) {
//   (*fnptr)(program, location, count, value);
// }
// static void  glowProgramUniform2ui(GPPROGRAMUNIFORM2UI fnptr, GLuint  program, GLint  location, GLuint  v0, GLuint  v1) {
//   (*fnptr)(program, location, v0, v1);
// }
// static void  glowProgramUniform2ui64NV(GPPROGRAMUNIFORM2UI64NV fnptr, GLuint  program, GLint  location, GLuint64EXT  x, GLuint64EXT  y) {
//   (*fnptr)(program, location, x, y);
// }
// static void  glowProgramUniform2ui64vNV(GPPROGRAMUNIFORM2UI64VNV fnptr, GLuint  program, GLint  location, GLsizei  count, const GLuint64EXT * value) {
//   (*fnptr)(program, location, count, value);
// }
// static void  glowProgramUniform2uiEXT(GPPROGRAMUNIFORM2UIEXT fnptr, GLuint  program, GLint  location, GLuint  v0, GLuint  v1) {
//   (*fnptr)(program, location, v0, v1);
// }
// static void  glowProgramUniform2uiv(GPPROGRAMUNIFORM2UIV fnptr, GLuint  program, GLint  location, GLsizei  count, const GLuint * value) {
//   (*fnptr)(program, location, count, value);
// }
// static void  glowProgramUniform2uivEXT(GPPROGRAMUNIFORM2UIVEXT fnptr, GLuint  program, GLint  location, GLsizei  count, const GLuint * value) {
//   (*fnptr)(program, location, count, value);
// }
// static void  glowProgramUniform3d(GPPROGRAMUNIFORM3D fnptr, GLuint  program, GLint  location, GLdouble  v0, GLdouble  v1, GLdouble  v2) {
//   (*fnptr)(program, location, v0, v1, v2);
// }
// static void  glowProgramUniform3dEXT(GPPROGRAMUNIFORM3DEXT fnptr, GLuint  program, GLint  location, GLdouble  x, GLdouble  y, GLdouble  z) {
//   (*fnptr)(program, location, x, y, z);
// }
// static void  glowProgramUniform3dv(GPPROGRAMUNIFORM3DV fnptr, GLuint  program, GLint  location, GLsizei  count, const GLdouble * value) {
//   (*fnptr)(program, location, count, value);
// }
// static void  glowProgramUniform3dvEXT(GPPROGRAMUNIFORM3DVEXT fnptr, GLuint  program, GLint  location, GLsizei  count, const GLdouble * value) {
//   (*fnptr)(program, location, count, value);
// }
// static void  glowProgramUniform3f(GPPROGRAMUNIFORM3F fnptr, GLuint  program, GLint  location, GLfloat  v0, GLfloat  v1, GLfloat  v2) {
//   (*fnptr)(program, location, v0, v1, v2);
// }
// static void  glowProgramUniform3fEXT(GPPROGRAMUNIFORM3FEXT fnptr, GLuint  program, GLint  location, GLfloat  v0, GLfloat  v1, GLfloat  v2) {
//   (*fnptr)(program, location, v0, v1, v2);
// }
// static void  glowProgramUniform3fv(GPPROGRAMUNIFORM3FV fnptr, GLuint  program, GLint  location, GLsizei  count, const GLfloat * value) {
//   (*fnptr)(program, location, count, value);
// }
// static void  glowProgramUniform3fvEXT(GPPROGRAMUNIFORM3FVEXT fnptr, GLuint  program, GLint  location, GLsizei  count, const GLfloat * value) {
//   (*fnptr)(program, location, count, value);
// }
// static void  glowProgramUniform3i(GPPROGRAMUNIFORM3I fnptr, GLuint  program, GLint  location, GLint  v0, GLint  v1, GLint  v2) {
//   (*fnptr)(program, location, v0, v1, v2);
// }
// static void  glowProgramUniform3i64NV(GPPROGRAMUNIFORM3I64NV fnptr, GLuint  program, GLint  location, GLint64EXT  x, GLint64EXT  y, GLint64EXT  z) {
//   (*fnptr)(program, location, x, y, z);
// }
// static void  glowProgramUniform3i64vNV(GPPROGRAMUNIFORM3I64VNV fnptr, GLuint  program, GLint  location, GLsizei  count, const GLint64EXT * value) {
//   (*fnptr)(program, location, count, value);
// }
// static void  glowProgramUniform3iEXT(GPPROGRAMUNIFORM3IEXT fnptr, GLuint  program, GLint  location, GLint  v0, GLint  v1, GLint  v2) {
//   (*fnptr)(program, location, v0, v1, v2);
// }
// static void  glowProgramUniform3iv(GPPROGRAMUNIFORM3IV fnptr, GLuint  program, GLint  location, GLsizei  count, const GLint * value) {
//   (*fnptr)(program, location, count, value);
// }
// static void  glowProgramUniform3ivEXT(GPPROGRAMUNIFORM3IVEXT fnptr, GLuint  program, GLint  location, GLsizei  count, const GLint * value) {
//   (*fnptr)(program, location, count, value);
// }
// static void  glowProgramUniform3ui(GPPROGRAMUNIFORM3UI fnptr, GLuint  program, GLint  location, GLuint  v0, GLuint  v1, GLuint  v2) {
//   (*fnptr)(program, location, v0, v1, v2);
// }
// static void  glowProgramUniform3ui64NV(GPPROGRAMUNIFORM3UI64NV fnptr, GLuint  program, GLint  location, GLuint64EXT  x, GLuint64EXT  y, GLuint64EXT  z) {
//   (*fnptr)(program, location, x, y, z);
// }
// static void  glowProgramUniform3ui64vNV(GPPROGRAMUNIFORM3UI64VNV fnptr, GLuint  program, GLint  location, GLsizei  count, const GLuint64EXT * value) {
//   (*fnptr)(program, location, count, value);
// }
// static void  glowProgramUniform3uiEXT(GPPROGRAMUNIFORM3UIEXT fnptr, GLuint  program, GLint  location, GLuint  v0, GLuint  v1, GLuint  v2) {
//   (*fnptr)(program, location, v0, v1, v2);
// }
// static void  glowProgramUniform3uiv(GPPROGRAMUNIFORM3UIV fnptr, GLuint  program, GLint  location, GLsizei  count, const GLuint * value) {
//   (*fnptr)(program, location, count, value);
// }
// static void  glowProgramUniform3uivEXT(GPPROGRAMUNIFORM3UIVEXT fnptr, GLuint  program, GLint  location, GLsizei  count, const GLuint * value) {
//   (*fnptr)(program, location, count, value);
// }
// static void  glowProgramUniform4d(GPPROGRAMUNIFORM4D fnptr, GLuint  program, GLint  location, GLdouble  v0, GLdouble  v1, GLdouble  v2, GLdouble  v3) {
//   (*fnptr)(program, location, v0, v1, v2, v3);
// }
// static void  glowProgramUniform4dEXT(GPPROGRAMUNIFORM4DEXT fnptr, GLuint  program, GLint  location, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w) {
//   (*fnptr)(program, location, x, y, z, w);
// }
// static void  glowProgramUniform4dv(GPPROGRAMUNIFORM4DV fnptr, GLuint  program, GLint  location, GLsizei  count, const GLdouble * value) {
//   (*fnptr)(program, location, count, value);
// }
// static void  glowProgramUniform4dvEXT(GPPROGRAMUNIFORM4DVEXT fnptr, GLuint  program, GLint  location, GLsizei  count, const GLdouble * value) {
//   (*fnptr)(program, location, count, value);
// }
// static void  glowProgramUniform4f(GPPROGRAMUNIFORM4F fnptr, GLuint  program, GLint  location, GLfloat  v0, GLfloat  v1, GLfloat  v2, GLfloat  v3) {
//   (*fnptr)(program, location, v0, v1, v2, v3);
// }
// static void  glowProgramUniform4fEXT(GPPROGRAMUNIFORM4FEXT fnptr, GLuint  program, GLint  location, GLfloat  v0, GLfloat  v1, GLfloat  v2, GLfloat  v3) {
//   (*fnptr)(program, location, v0, v1, v2, v3);
// }
// static void  glowProgramUniform4fv(GPPROGRAMUNIFORM4FV fnptr, GLuint  program, GLint  location, GLsizei  count, const GLfloat * value) {
//   (*fnptr)(program, location, count, value);
// }
// static void  glowProgramUniform4fvEXT(GPPROGRAMUNIFORM4FVEXT fnptr, GLuint  program, GLint  location, GLsizei  count, const GLfloat * value) {
//   (*fnptr)(program, location, count, value);
// }
// static void  glowProgramUniform4i(GPPROGRAMUNIFORM4I fnptr, GLuint  program, GLint  location, GLint  v0, GLint  v1, GLint  v2, GLint  v3) {
//   (*fnptr)(program, location, v0, v1, v2, v3);
// }
// static void  glowProgramUniform4i64NV(GPPROGRAMUNIFORM4I64NV fnptr, GLuint  program, GLint  location, GLint64EXT  x, GLint64EXT  y, GLint64EXT  z, GLint64EXT  w) {
//   (*fnptr)(program, location, x, y, z, w);
// }
// static void  glowProgramUniform4i64vNV(GPPROGRAMUNIFORM4I64VNV fnptr, GLuint  program, GLint  location, GLsizei  count, const GLint64EXT * value) {
//   (*fnptr)(program, location, count, value);
// }
// static void  glowProgramUniform4iEXT(GPPROGRAMUNIFORM4IEXT fnptr, GLuint  program, GLint  location, GLint  v0, GLint  v1, GLint  v2, GLint  v3) {
//   (*fnptr)(program, location, v0, v1, v2, v3);
// }
// static void  glowProgramUniform4iv(GPPROGRAMUNIFORM4IV fnptr, GLuint  program, GLint  location, GLsizei  count, const GLint * value) {
//   (*fnptr)(program, location, count, value);
// }
// static void  glowProgramUniform4ivEXT(GPPROGRAMUNIFORM4IVEXT fnptr, GLuint  program, GLint  location, GLsizei  count, const GLint * value) {
//   (*fnptr)(program, location, count, value);
// }
// static void  glowProgramUniform4ui(GPPROGRAMUNIFORM4UI fnptr, GLuint  program, GLint  location, GLuint  v0, GLuint  v1, GLuint  v2, GLuint  v3) {
//   (*fnptr)(program, location, v0, v1, v2, v3);
// }
// static void  glowProgramUniform4ui64NV(GPPROGRAMUNIFORM4UI64NV fnptr, GLuint  program, GLint  location, GLuint64EXT  x, GLuint64EXT  y, GLuint64EXT  z, GLuint64EXT  w) {
//   (*fnptr)(program, location, x, y, z, w);
// }
// static void  glowProgramUniform4ui64vNV(GPPROGRAMUNIFORM4UI64VNV fnptr, GLuint  program, GLint  location, GLsizei  count, const GLuint64EXT * value) {
//   (*fnptr)(program, location, count, value);
// }
// static void  glowProgramUniform4uiEXT(GPPROGRAMUNIFORM4UIEXT fnptr, GLuint  program, GLint  location, GLuint  v0, GLuint  v1, GLuint  v2, GLuint  v3) {
//   (*fnptr)(program, location, v0, v1, v2, v3);
// }
// static void  glowProgramUniform4uiv(GPPROGRAMUNIFORM4UIV fnptr, GLuint  program, GLint  location, GLsizei  count, const GLuint * value) {
//   (*fnptr)(program, location, count, value);
// }
// static void  glowProgramUniform4uivEXT(GPPROGRAMUNIFORM4UIVEXT fnptr, GLuint  program, GLint  location, GLsizei  count, const GLuint * value) {
//   (*fnptr)(program, location, count, value);
// }
// static void  glowProgramUniformHandleui64ARB(GPPROGRAMUNIFORMHANDLEUI64ARB fnptr, GLuint  program, GLint  location, GLuint64  value) {
//   (*fnptr)(program, location, value);
// }
// static void  glowProgramUniformHandleui64NV(GPPROGRAMUNIFORMHANDLEUI64NV fnptr, GLuint  program, GLint  location, GLuint64  value) {
//   (*fnptr)(program, location, value);
// }
// static void  glowProgramUniformHandleui64vARB(GPPROGRAMUNIFORMHANDLEUI64VARB fnptr, GLuint  program, GLint  location, GLsizei  count, const GLuint64 * values) {
//   (*fnptr)(program, location, count, values);
// }
// static void  glowProgramUniformHandleui64vNV(GPPROGRAMUNIFORMHANDLEUI64VNV fnptr, GLuint  program, GLint  location, GLsizei  count, const GLuint64 * values) {
//   (*fnptr)(program, location, count, values);
// }
// static void  glowProgramUniformMatrix2dv(GPPROGRAMUNIFORMMATRIX2DV fnptr, GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value) {
//   (*fnptr)(program, location, count, transpose, value);
// }
// static void  glowProgramUniformMatrix2dvEXT(GPPROGRAMUNIFORMMATRIX2DVEXT fnptr, GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value) {
//   (*fnptr)(program, location, count, transpose, value);
// }
// static void  glowProgramUniformMatrix2fv(GPPROGRAMUNIFORMMATRIX2FV fnptr, GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value) {
//   (*fnptr)(program, location, count, transpose, value);
// }
// static void  glowProgramUniformMatrix2fvEXT(GPPROGRAMUNIFORMMATRIX2FVEXT fnptr, GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value) {
//   (*fnptr)(program, location, count, transpose, value);
// }
// static void  glowProgramUniformMatrix2x3dv(GPPROGRAMUNIFORMMATRIX2X3DV fnptr, GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value) {
//   (*fnptr)(program, location, count, transpose, value);
// }
// static void  glowProgramUniformMatrix2x3dvEXT(GPPROGRAMUNIFORMMATRIX2X3DVEXT fnptr, GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value) {
//   (*fnptr)(program, location, count, transpose, value);
// }
// static void  glowProgramUniformMatrix2x3fv(GPPROGRAMUNIFORMMATRIX2X3FV fnptr, GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value) {
//   (*fnptr)(program, location, count, transpose, value);
// }
// static void  glowProgramUniformMatrix2x3fvEXT(GPPROGRAMUNIFORMMATRIX2X3FVEXT fnptr, GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value) {
//   (*fnptr)(program, location, count, transpose, value);
// }
// static void  glowProgramUniformMatrix2x4dv(GPPROGRAMUNIFORMMATRIX2X4DV fnptr, GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value) {
//   (*fnptr)(program, location, count, transpose, value);
// }
// static void  glowProgramUniformMatrix2x4dvEXT(GPPROGRAMUNIFORMMATRIX2X4DVEXT fnptr, GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value) {
//   (*fnptr)(program, location, count, transpose, value);
// }
// static void  glowProgramUniformMatrix2x4fv(GPPROGRAMUNIFORMMATRIX2X4FV fnptr, GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value) {
//   (*fnptr)(program, location, count, transpose, value);
// }
// static void  glowProgramUniformMatrix2x4fvEXT(GPPROGRAMUNIFORMMATRIX2X4FVEXT fnptr, GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value) {
//   (*fnptr)(program, location, count, transpose, value);
// }
// static void  glowProgramUniformMatrix3dv(GPPROGRAMUNIFORMMATRIX3DV fnptr, GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value) {
//   (*fnptr)(program, location, count, transpose, value);
// }
// static void  glowProgramUniformMatrix3dvEXT(GPPROGRAMUNIFORMMATRIX3DVEXT fnptr, GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value) {
//   (*fnptr)(program, location, count, transpose, value);
// }
// static void  glowProgramUniformMatrix3fv(GPPROGRAMUNIFORMMATRIX3FV fnptr, GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value) {
//   (*fnptr)(program, location, count, transpose, value);
// }
// static void  glowProgramUniformMatrix3fvEXT(GPPROGRAMUNIFORMMATRIX3FVEXT fnptr, GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value) {
//   (*fnptr)(program, location, count, transpose, value);
// }
// static void  glowProgramUniformMatrix3x2dv(GPPROGRAMUNIFORMMATRIX3X2DV fnptr, GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value) {
//   (*fnptr)(program, location, count, transpose, value);
// }
// static void  glowProgramUniformMatrix3x2dvEXT(GPPROGRAMUNIFORMMATRIX3X2DVEXT fnptr, GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value) {
//   (*fnptr)(program, location, count, transpose, value);
// }
// static void  glowProgramUniformMatrix3x2fv(GPPROGRAMUNIFORMMATRIX3X2FV fnptr, GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value) {
//   (*fnptr)(program, location, count, transpose, value);
// }
// static void  glowProgramUniformMatrix3x2fvEXT(GPPROGRAMUNIFORMMATRIX3X2FVEXT fnptr, GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value) {
//   (*fnptr)(program, location, count, transpose, value);
// }
// static void  glowProgramUniformMatrix3x4dv(GPPROGRAMUNIFORMMATRIX3X4DV fnptr, GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value) {
//   (*fnptr)(program, location, count, transpose, value);
// }
// static void  glowProgramUniformMatrix3x4dvEXT(GPPROGRAMUNIFORMMATRIX3X4DVEXT fnptr, GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value) {
//   (*fnptr)(program, location, count, transpose, value);
// }
// static void  glowProgramUniformMatrix3x4fv(GPPROGRAMUNIFORMMATRIX3X4FV fnptr, GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value) {
//   (*fnptr)(program, location, count, transpose, value);
// }
// static void  glowProgramUniformMatrix3x4fvEXT(GPPROGRAMUNIFORMMATRIX3X4FVEXT fnptr, GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value) {
//   (*fnptr)(program, location, count, transpose, value);
// }
// static void  glowProgramUniformMatrix4dv(GPPROGRAMUNIFORMMATRIX4DV fnptr, GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value) {
//   (*fnptr)(program, location, count, transpose, value);
// }
// static void  glowProgramUniformMatrix4dvEXT(GPPROGRAMUNIFORMMATRIX4DVEXT fnptr, GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value) {
//   (*fnptr)(program, location, count, transpose, value);
// }
// static void  glowProgramUniformMatrix4fv(GPPROGRAMUNIFORMMATRIX4FV fnptr, GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value) {
//   (*fnptr)(program, location, count, transpose, value);
// }
// static void  glowProgramUniformMatrix4fvEXT(GPPROGRAMUNIFORMMATRIX4FVEXT fnptr, GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value) {
//   (*fnptr)(program, location, count, transpose, value);
// }
// static void  glowProgramUniformMatrix4x2dv(GPPROGRAMUNIFORMMATRIX4X2DV fnptr, GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value) {
//   (*fnptr)(program, location, count, transpose, value);
// }
// static void  glowProgramUniformMatrix4x2dvEXT(GPPROGRAMUNIFORMMATRIX4X2DVEXT fnptr, GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value) {
//   (*fnptr)(program, location, count, transpose, value);
// }
// static void  glowProgramUniformMatrix4x2fv(GPPROGRAMUNIFORMMATRIX4X2FV fnptr, GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value) {
//   (*fnptr)(program, location, count, transpose, value);
// }
// static void  glowProgramUniformMatrix4x2fvEXT(GPPROGRAMUNIFORMMATRIX4X2FVEXT fnptr, GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value) {
//   (*fnptr)(program, location, count, transpose, value);
// }
// static void  glowProgramUniformMatrix4x3dv(GPPROGRAMUNIFORMMATRIX4X3DV fnptr, GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value) {
//   (*fnptr)(program, location, count, transpose, value);
// }
// static void  glowProgramUniformMatrix4x3dvEXT(GPPROGRAMUNIFORMMATRIX4X3DVEXT fnptr, GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value) {
//   (*fnptr)(program, location, count, transpose, value);
// }
// static void  glowProgramUniformMatrix4x3fv(GPPROGRAMUNIFORMMATRIX4X3FV fnptr, GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value) {
//   (*fnptr)(program, location, count, transpose, value);
// }
// static void  glowProgramUniformMatrix4x3fvEXT(GPPROGRAMUNIFORMMATRIX4X3FVEXT fnptr, GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value) {
//   (*fnptr)(program, location, count, transpose, value);
// }
// static void  glowProgramUniformui64NV(GPPROGRAMUNIFORMUI64NV fnptr, GLuint  program, GLint  location, GLuint64EXT  value) {
//   (*fnptr)(program, location, value);
// }
// static void  glowProgramUniformui64vNV(GPPROGRAMUNIFORMUI64VNV fnptr, GLuint  program, GLint  location, GLsizei  count, const GLuint64EXT * value) {
//   (*fnptr)(program, location, count, value);
// }
// static void  glowProgramVertexLimitNV(GPPROGRAMVERTEXLIMITNV fnptr, GLenum  target, GLint  limit) {
//   (*fnptr)(target, limit);
// }
// static void  glowProvokingVertex(GPPROVOKINGVERTEX fnptr, GLenum  mode) {
//   (*fnptr)(mode);
// }
// static void  glowProvokingVertexEXT(GPPROVOKINGVERTEXEXT fnptr, GLenum  mode) {
//   (*fnptr)(mode);
// }
// static void  glowPushClientAttribDefaultEXT(GPPUSHCLIENTATTRIBDEFAULTEXT fnptr, GLbitfield  mask) {
//   (*fnptr)(mask);
// }
// static void  glowPushDebugGroup(GPPUSHDEBUGGROUP fnptr, GLenum  source, GLuint  id, GLsizei  length, const GLchar * message) {
//   (*fnptr)(source, id, length, message);
// }
// static void  glowPushDebugGroupKHR(GPPUSHDEBUGGROUPKHR fnptr, GLenum  source, GLuint  id, GLsizei  length, const GLchar * message) {
//   (*fnptr)(source, id, length, message);
// }
// static void  glowPushGroupMarkerEXT(GPPUSHGROUPMARKEREXT fnptr, GLsizei  length, const GLchar * marker) {
//   (*fnptr)(length, marker);
// }
// static void  glowQueryCounter(GPQUERYCOUNTER fnptr, GLuint  id, GLenum  target) {
//   (*fnptr)(id, target);
// }
// static GLbitfield  glowQueryMatrixxOES(GPQUERYMATRIXXOES fnptr, GLfixed * mantissa, GLint * exponent) {
//   return (*fnptr)(mantissa, exponent);
// }
// static void  glowQueryObjectParameteruiAMD(GPQUERYOBJECTPARAMETERUIAMD fnptr, GLenum  target, GLuint  id, GLenum  pname, GLuint  param) {
//   (*fnptr)(target, id, pname, param);
// }
// static void  glowRasterPos2xOES(GPRASTERPOS2XOES fnptr, GLfixed  x, GLfixed  y) {
//   (*fnptr)(x, y);
// }
// static void  glowRasterPos2xvOES(GPRASTERPOS2XVOES fnptr, const GLfixed * coords) {
//   (*fnptr)(coords);
// }
// static void  glowRasterPos3xOES(GPRASTERPOS3XOES fnptr, GLfixed  x, GLfixed  y, GLfixed  z) {
//   (*fnptr)(x, y, z);
// }
// static void  glowRasterPos3xvOES(GPRASTERPOS3XVOES fnptr, const GLfixed * coords) {
//   (*fnptr)(coords);
// }
// static void  glowRasterPos4xOES(GPRASTERPOS4XOES fnptr, GLfixed  x, GLfixed  y, GLfixed  z, GLfixed  w) {
//   (*fnptr)(x, y, z, w);
// }
// static void  glowRasterPos4xvOES(GPRASTERPOS4XVOES fnptr, const GLfixed * coords) {
//   (*fnptr)(coords);
// }
// static void  glowReadBuffer(GPREADBUFFER fnptr, GLenum  mode) {
//   (*fnptr)(mode);
// }
// static void  glowReadInstrumentsSGIX(GPREADINSTRUMENTSSGIX fnptr, GLint  marker) {
//   (*fnptr)(marker);
// }
// static void  glowReadPixels(GPREADPIXELS fnptr, GLint  x, GLint  y, GLsizei  width, GLsizei  height, GLenum  format, GLenum  type, void * pixels) {
//   (*fnptr)(x, y, width, height, format, type, pixels);
// }
// static void  glowReadnPixelsARB(GPREADNPIXELSARB fnptr, GLint  x, GLint  y, GLsizei  width, GLsizei  height, GLenum  format, GLenum  type, GLsizei  bufSize, void * data) {
//   (*fnptr)(x, y, width, height, format, type, bufSize, data);
// }
// static void  glowRectxOES(GPRECTXOES fnptr, GLfixed  x1, GLfixed  y1, GLfixed  x2, GLfixed  y2) {
//   (*fnptr)(x1, y1, x2, y2);
// }
// static void  glowRectxvOES(GPRECTXVOES fnptr, const GLfixed * v1, const GLfixed * v2) {
//   (*fnptr)(v1, v2);
// }
// static void  glowReferencePlaneSGIX(GPREFERENCEPLANESGIX fnptr, const GLdouble * equation) {
//   (*fnptr)(equation);
// }
// static void  glowReleaseShaderCompiler(GPRELEASESHADERCOMPILER fnptr) {
//   (*fnptr)();
// }
// static void  glowRenderbufferStorage(GPRENDERBUFFERSTORAGE fnptr, GLenum  target, GLenum  internalformat, GLsizei  width, GLsizei  height) {
//   (*fnptr)(target, internalformat, width, height);
// }
// static void  glowRenderbufferStorageEXT(GPRENDERBUFFERSTORAGEEXT fnptr, GLenum  target, GLenum  internalformat, GLsizei  width, GLsizei  height) {
//   (*fnptr)(target, internalformat, width, height);
// }
// static void  glowRenderbufferStorageMultisample(GPRENDERBUFFERSTORAGEMULTISAMPLE fnptr, GLenum  target, GLsizei  samples, GLenum  internalformat, GLsizei  width, GLsizei  height) {
//   (*fnptr)(target, samples, internalformat, width, height);
// }
// static void  glowRenderbufferStorageMultisampleCoverageNV(GPRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENV fnptr, GLenum  target, GLsizei  coverageSamples, GLsizei  colorSamples, GLenum  internalformat, GLsizei  width, GLsizei  height) {
//   (*fnptr)(target, coverageSamples, colorSamples, internalformat, width, height);
// }
// static void  glowRenderbufferStorageMultisampleEXT(GPRENDERBUFFERSTORAGEMULTISAMPLEEXT fnptr, GLenum  target, GLsizei  samples, GLenum  internalformat, GLsizei  width, GLsizei  height) {
//   (*fnptr)(target, samples, internalformat, width, height);
// }
// static void  glowReplacementCodePointerSUN(GPREPLACEMENTCODEPOINTERSUN fnptr, GLenum  type, GLsizei  stride, const void ** pointer) {
//   (*fnptr)(type, stride, pointer);
// }
// static void  glowReplacementCodeubSUN(GPREPLACEMENTCODEUBSUN fnptr, GLubyte  code) {
//   (*fnptr)(code);
// }
// static void  glowReplacementCodeubvSUN(GPREPLACEMENTCODEUBVSUN fnptr, const GLubyte * code) {
//   (*fnptr)(code);
// }
// static void  glowReplacementCodeuiColor3fVertex3fSUN(GPREPLACEMENTCODEUICOLOR3FVERTEX3FSUN fnptr, GLuint  rc, GLfloat  r, GLfloat  g, GLfloat  b, GLfloat  x, GLfloat  y, GLfloat  z) {
//   (*fnptr)(rc, r, g, b, x, y, z);
// }
// static void  glowReplacementCodeuiColor3fVertex3fvSUN(GPREPLACEMENTCODEUICOLOR3FVERTEX3FVSUN fnptr, const GLuint * rc, const GLfloat * c, const GLfloat * v) {
//   (*fnptr)(rc, c, v);
// }
// static void  glowReplacementCodeuiColor4fNormal3fVertex3fSUN(GPREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUN fnptr, GLuint  rc, GLfloat  r, GLfloat  g, GLfloat  b, GLfloat  a, GLfloat  nx, GLfloat  ny, GLfloat  nz, GLfloat  x, GLfloat  y, GLfloat  z) {
//   (*fnptr)(rc, r, g, b, a, nx, ny, nz, x, y, z);
// }
// static void  glowReplacementCodeuiColor4fNormal3fVertex3fvSUN(GPREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUN fnptr, const GLuint * rc, const GLfloat * c, const GLfloat * n, const GLfloat * v) {
//   (*fnptr)(rc, c, n, v);
// }
// static void  glowReplacementCodeuiColor4ubVertex3fSUN(GPREPLACEMENTCODEUICOLOR4UBVERTEX3FSUN fnptr, GLuint  rc, GLubyte  r, GLubyte  g, GLubyte  b, GLubyte  a, GLfloat  x, GLfloat  y, GLfloat  z) {
//   (*fnptr)(rc, r, g, b, a, x, y, z);
// }
// static void  glowReplacementCodeuiColor4ubVertex3fvSUN(GPREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUN fnptr, const GLuint * rc, const GLubyte * c, const GLfloat * v) {
//   (*fnptr)(rc, c, v);
// }
// static void  glowReplacementCodeuiNormal3fVertex3fSUN(GPREPLACEMENTCODEUINORMAL3FVERTEX3FSUN fnptr, GLuint  rc, GLfloat  nx, GLfloat  ny, GLfloat  nz, GLfloat  x, GLfloat  y, GLfloat  z) {
//   (*fnptr)(rc, nx, ny, nz, x, y, z);
// }
// static void  glowReplacementCodeuiNormal3fVertex3fvSUN(GPREPLACEMENTCODEUINORMAL3FVERTEX3FVSUN fnptr, const GLuint * rc, const GLfloat * n, const GLfloat * v) {
//   (*fnptr)(rc, n, v);
// }
// static void  glowReplacementCodeuiSUN(GPREPLACEMENTCODEUISUN fnptr, GLuint  code) {
//   (*fnptr)(code);
// }
// static void  glowReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(GPREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUN fnptr, GLuint  rc, GLfloat  s, GLfloat  t, GLfloat  r, GLfloat  g, GLfloat  b, GLfloat  a, GLfloat  nx, GLfloat  ny, GLfloat  nz, GLfloat  x, GLfloat  y, GLfloat  z) {
//   (*fnptr)(rc, s, t, r, g, b, a, nx, ny, nz, x, y, z);
// }
// static void  glowReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(GPREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUN fnptr, const GLuint * rc, const GLfloat * tc, const GLfloat * c, const GLfloat * n, const GLfloat * v) {
//   (*fnptr)(rc, tc, c, n, v);
// }
// static void  glowReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(GPREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUN fnptr, GLuint  rc, GLfloat  s, GLfloat  t, GLfloat  nx, GLfloat  ny, GLfloat  nz, GLfloat  x, GLfloat  y, GLfloat  z) {
//   (*fnptr)(rc, s, t, nx, ny, nz, x, y, z);
// }
// static void  glowReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(GPREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUN fnptr, const GLuint * rc, const GLfloat * tc, const GLfloat * n, const GLfloat * v) {
//   (*fnptr)(rc, tc, n, v);
// }
// static void  glowReplacementCodeuiTexCoord2fVertex3fSUN(GPREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUN fnptr, GLuint  rc, GLfloat  s, GLfloat  t, GLfloat  x, GLfloat  y, GLfloat  z) {
//   (*fnptr)(rc, s, t, x, y, z);
// }
// static void  glowReplacementCodeuiTexCoord2fVertex3fvSUN(GPREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUN fnptr, const GLuint * rc, const GLfloat * tc, const GLfloat * v) {
//   (*fnptr)(rc, tc, v);
// }
// static void  glowReplacementCodeuiVertex3fSUN(GPREPLACEMENTCODEUIVERTEX3FSUN fnptr, GLuint  rc, GLfloat  x, GLfloat  y, GLfloat  z) {
//   (*fnptr)(rc, x, y, z);
// }
// static void  glowReplacementCodeuiVertex3fvSUN(GPREPLACEMENTCODEUIVERTEX3FVSUN fnptr, const GLuint * rc, const GLfloat * v) {
//   (*fnptr)(rc, v);
// }
// static void  glowReplacementCodeuivSUN(GPREPLACEMENTCODEUIVSUN fnptr, const GLuint * code) {
//   (*fnptr)(code);
// }
// static void  glowReplacementCodeusSUN(GPREPLACEMENTCODEUSSUN fnptr, GLushort  code) {
//   (*fnptr)(code);
// }
// static void  glowReplacementCodeusvSUN(GPREPLACEMENTCODEUSVSUN fnptr, const GLushort * code) {
//   (*fnptr)(code);
// }
// static void  glowRequestResidentProgramsNV(GPREQUESTRESIDENTPROGRAMSNV fnptr, GLsizei  n, const GLuint * programs) {
//   (*fnptr)(n, programs);
// }
// static void  glowResetHistogramEXT(GPRESETHISTOGRAMEXT fnptr, GLenum  target) {
//   (*fnptr)(target);
// }
// static void  glowResetMinmaxEXT(GPRESETMINMAXEXT fnptr, GLenum  target) {
//   (*fnptr)(target);
// }
// static void  glowResizeBuffersMESA(GPRESIZEBUFFERSMESA fnptr) {
//   (*fnptr)();
// }
// static void  glowResumeTransformFeedback(GPRESUMETRANSFORMFEEDBACK fnptr) {
//   (*fnptr)();
// }
// static void  glowResumeTransformFeedbackNV(GPRESUMETRANSFORMFEEDBACKNV fnptr) {
//   (*fnptr)();
// }
// static void  glowRotatexOES(GPROTATEXOES fnptr, GLfixed  angle, GLfixed  x, GLfixed  y, GLfixed  z) {
//   (*fnptr)(angle, x, y, z);
// }
// static void  glowSampleCoverage(GPSAMPLECOVERAGE fnptr, GLfloat  value, GLboolean  invert) {
//   (*fnptr)(value, invert);
// }
// static void  glowSampleCoverageARB(GPSAMPLECOVERAGEARB fnptr, GLfloat  value, GLboolean  invert) {
//   (*fnptr)(value, invert);
// }
// static void  glowSampleCoverageOES(GPSAMPLECOVERAGEOES fnptr, GLfixed  value, GLboolean  invert) {
//   (*fnptr)(value, invert);
// }
// static void  glowSampleCoveragexOES(GPSAMPLECOVERAGEXOES fnptr, GLclampx  value, GLboolean  invert) {
//   (*fnptr)(value, invert);
// }
// static void  glowSampleMapATI(GPSAMPLEMAPATI fnptr, GLuint  dst, GLuint  interp, GLenum  swizzle) {
//   (*fnptr)(dst, interp, swizzle);
// }
// static void  glowSampleMaskEXT(GPSAMPLEMASKEXT fnptr, GLclampf  value, GLboolean  invert) {
//   (*fnptr)(value, invert);
// }
// static void  glowSampleMaskIndexedNV(GPSAMPLEMASKINDEXEDNV fnptr, GLuint  index, GLbitfield  mask) {
//   (*fnptr)(index, mask);
// }
// static void  glowSampleMaskSGIS(GPSAMPLEMASKSGIS fnptr, GLclampf  value, GLboolean  invert) {
//   (*fnptr)(value, invert);
// }
// static void  glowSampleMaski(GPSAMPLEMASKI fnptr, GLuint  maskNumber, GLbitfield  mask) {
//   (*fnptr)(maskNumber, mask);
// }
// static void  glowSamplePatternEXT(GPSAMPLEPATTERNEXT fnptr, GLenum  pattern) {
//   (*fnptr)(pattern);
// }
// static void  glowSamplePatternSGIS(GPSAMPLEPATTERNSGIS fnptr, GLenum  pattern) {
//   (*fnptr)(pattern);
// }
// static void  glowSamplerParameterIiv(GPSAMPLERPARAMETERIIV fnptr, GLuint  sampler, GLenum  pname, const GLint * param) {
//   (*fnptr)(sampler, pname, param);
// }
// static void  glowSamplerParameterIuiv(GPSAMPLERPARAMETERIUIV fnptr, GLuint  sampler, GLenum  pname, const GLuint * param) {
//   (*fnptr)(sampler, pname, param);
// }
// static void  glowSamplerParameterf(GPSAMPLERPARAMETERF fnptr, GLuint  sampler, GLenum  pname, GLfloat  param) {
//   (*fnptr)(sampler, pname, param);
// }
// static void  glowSamplerParameterfv(GPSAMPLERPARAMETERFV fnptr, GLuint  sampler, GLenum  pname, const GLfloat * param) {
//   (*fnptr)(sampler, pname, param);
// }
// static void  glowSamplerParameteri(GPSAMPLERPARAMETERI fnptr, GLuint  sampler, GLenum  pname, GLint  param) {
//   (*fnptr)(sampler, pname, param);
// }
// static void  glowSamplerParameteriv(GPSAMPLERPARAMETERIV fnptr, GLuint  sampler, GLenum  pname, const GLint * param) {
//   (*fnptr)(sampler, pname, param);
// }
// static void  glowScalexOES(GPSCALEXOES fnptr, GLfixed  x, GLfixed  y, GLfixed  z) {
//   (*fnptr)(x, y, z);
// }
// static void  glowScissor(GPSCISSOR fnptr, GLint  x, GLint  y, GLsizei  width, GLsizei  height) {
//   (*fnptr)(x, y, width, height);
// }
// static void  glowScissorArrayv(GPSCISSORARRAYV fnptr, GLuint  first, GLsizei  count, const GLint * v) {
//   (*fnptr)(first, count, v);
// }
// static void  glowScissorIndexed(GPSCISSORINDEXED fnptr, GLuint  index, GLint  left, GLint  bottom, GLsizei  width, GLsizei  height) {
//   (*fnptr)(index, left, bottom, width, height);
// }
// static void  glowScissorIndexedv(GPSCISSORINDEXEDV fnptr, GLuint  index, const GLint * v) {
//   (*fnptr)(index, v);
// }
// static void  glowSecondaryColor3bEXT(GPSECONDARYCOLOR3BEXT fnptr, GLbyte  red, GLbyte  green, GLbyte  blue) {
//   (*fnptr)(red, green, blue);
// }
// static void  glowSecondaryColor3bvEXT(GPSECONDARYCOLOR3BVEXT fnptr, const GLbyte * v) {
//   (*fnptr)(v);
// }
// static void  glowSecondaryColor3dEXT(GPSECONDARYCOLOR3DEXT fnptr, GLdouble  red, GLdouble  green, GLdouble  blue) {
//   (*fnptr)(red, green, blue);
// }
// static void  glowSecondaryColor3dvEXT(GPSECONDARYCOLOR3DVEXT fnptr, const GLdouble * v) {
//   (*fnptr)(v);
// }
// static void  glowSecondaryColor3fEXT(GPSECONDARYCOLOR3FEXT fnptr, GLfloat  red, GLfloat  green, GLfloat  blue) {
//   (*fnptr)(red, green, blue);
// }
// static void  glowSecondaryColor3fvEXT(GPSECONDARYCOLOR3FVEXT fnptr, const GLfloat * v) {
//   (*fnptr)(v);
// }
// static void  glowSecondaryColor3hNV(GPSECONDARYCOLOR3HNV fnptr, GLhalfNV  red, GLhalfNV  green, GLhalfNV  blue) {
//   (*fnptr)(red, green, blue);
// }
// static void  glowSecondaryColor3hvNV(GPSECONDARYCOLOR3HVNV fnptr, const GLhalfNV * v) {
//   (*fnptr)(v);
// }
// static void  glowSecondaryColor3iEXT(GPSECONDARYCOLOR3IEXT fnptr, GLint  red, GLint  green, GLint  blue) {
//   (*fnptr)(red, green, blue);
// }
// static void  glowSecondaryColor3ivEXT(GPSECONDARYCOLOR3IVEXT fnptr, const GLint * v) {
//   (*fnptr)(v);
// }
// static void  glowSecondaryColor3sEXT(GPSECONDARYCOLOR3SEXT fnptr, GLshort  red, GLshort  green, GLshort  blue) {
//   (*fnptr)(red, green, blue);
// }
// static void  glowSecondaryColor3svEXT(GPSECONDARYCOLOR3SVEXT fnptr, const GLshort * v) {
//   (*fnptr)(v);
// }
// static void  glowSecondaryColor3ubEXT(GPSECONDARYCOLOR3UBEXT fnptr, GLubyte  red, GLubyte  green, GLubyte  blue) {
//   (*fnptr)(red, green, blue);
// }
// static void  glowSecondaryColor3ubvEXT(GPSECONDARYCOLOR3UBVEXT fnptr, const GLubyte * v) {
//   (*fnptr)(v);
// }
// static void  glowSecondaryColor3uiEXT(GPSECONDARYCOLOR3UIEXT fnptr, GLuint  red, GLuint  green, GLuint  blue) {
//   (*fnptr)(red, green, blue);
// }
// static void  glowSecondaryColor3uivEXT(GPSECONDARYCOLOR3UIVEXT fnptr, const GLuint * v) {
//   (*fnptr)(v);
// }
// static void  glowSecondaryColor3usEXT(GPSECONDARYCOLOR3USEXT fnptr, GLushort  red, GLushort  green, GLushort  blue) {
//   (*fnptr)(red, green, blue);
// }
// static void  glowSecondaryColor3usvEXT(GPSECONDARYCOLOR3USVEXT fnptr, const GLushort * v) {
//   (*fnptr)(v);
// }
// static void  glowSecondaryColorFormatNV(GPSECONDARYCOLORFORMATNV fnptr, GLint  size, GLenum  type, GLsizei  stride) {
//   (*fnptr)(size, type, stride);
// }
// static void  glowSecondaryColorPointerEXT(GPSECONDARYCOLORPOINTEREXT fnptr, GLint  size, GLenum  type, GLsizei  stride, const void * pointer) {
//   (*fnptr)(size, type, stride, pointer);
// }
// static void  glowSecondaryColorPointerListIBM(GPSECONDARYCOLORPOINTERLISTIBM fnptr, GLint  size, GLenum  type, GLint  stride, const void ** pointer, GLint  ptrstride) {
//   (*fnptr)(size, type, stride, pointer, ptrstride);
// }
// static void  glowSelectPerfMonitorCountersAMD(GPSELECTPERFMONITORCOUNTERSAMD fnptr, GLuint  monitor, GLboolean  enable, GLuint  group, GLint  numCounters, GLuint * counterList) {
//   (*fnptr)(monitor, enable, group, numCounters, counterList);
// }
// static void  glowSeparableFilter2DEXT(GPSEPARABLEFILTER2DEXT fnptr, GLenum  target, GLenum  internalformat, GLsizei  width, GLsizei  height, GLenum  format, GLenum  type, const void * row, const void * column) {
//   (*fnptr)(target, internalformat, width, height, format, type, row, column);
// }
// static void  glowSetFenceAPPLE(GPSETFENCEAPPLE fnptr, GLuint  fence) {
//   (*fnptr)(fence);
// }
// static void  glowSetFenceNV(GPSETFENCENV fnptr, GLuint  fence, GLenum  condition) {
//   (*fnptr)(fence, condition);
// }
// static void  glowSetFragmentShaderConstantATI(GPSETFRAGMENTSHADERCONSTANTATI fnptr, GLuint  dst, const GLfloat * value) {
//   (*fnptr)(dst, value);
// }
// static void  glowSetInvariantEXT(GPSETINVARIANTEXT fnptr, GLuint  id, GLenum  type, const void * addr) {
//   (*fnptr)(id, type, addr);
// }
// static void  glowSetLocalConstantEXT(GPSETLOCALCONSTANTEXT fnptr, GLuint  id, GLenum  type, const void * addr) {
//   (*fnptr)(id, type, addr);
// }
// static void  glowSetMultisamplefvAMD(GPSETMULTISAMPLEFVAMD fnptr, GLenum  pname, GLuint  index, const GLfloat * val) {
//   (*fnptr)(pname, index, val);
// }
// static void  glowShaderBinary(GPSHADERBINARY fnptr, GLsizei  count, const GLuint * shaders, GLenum  binaryformat, const void * binary, GLsizei  length) {
//   (*fnptr)(count, shaders, binaryformat, binary, length);
// }
// static void  glowShaderOp1EXT(GPSHADEROP1EXT fnptr, GLenum  op, GLuint  res, GLuint  arg1) {
//   (*fnptr)(op, res, arg1);
// }
// static void  glowShaderOp2EXT(GPSHADEROP2EXT fnptr, GLenum  op, GLuint  res, GLuint  arg1, GLuint  arg2) {
//   (*fnptr)(op, res, arg1, arg2);
// }
// static void  glowShaderOp3EXT(GPSHADEROP3EXT fnptr, GLenum  op, GLuint  res, GLuint  arg1, GLuint  arg2, GLuint  arg3) {
//   (*fnptr)(op, res, arg1, arg2, arg3);
// }
// static void  glowShaderSource(GPSHADERSOURCE fnptr, GLuint  shader, GLsizei  count, const GLchar *const* string, const GLint * length) {
//   (*fnptr)(shader, count, string, length);
// }
// static void  glowShaderSourceARB(GPSHADERSOURCEARB fnptr, GLhandleARB  shaderObj, GLsizei  count, const GLcharARB ** string, const GLint * length) {
//   (*fnptr)(shaderObj, count, string, length);
// }
// static void  glowShaderStorageBlockBinding(GPSHADERSTORAGEBLOCKBINDING fnptr, GLuint  program, GLuint  storageBlockIndex, GLuint  storageBlockBinding) {
//   (*fnptr)(program, storageBlockIndex, storageBlockBinding);
// }
// static void  glowSharpenTexFuncSGIS(GPSHARPENTEXFUNCSGIS fnptr, GLenum  target, GLsizei  n, const GLfloat * points) {
//   (*fnptr)(target, n, points);
// }
// static void  glowSpriteParameterfSGIX(GPSPRITEPARAMETERFSGIX fnptr, GLenum  pname, GLfloat  param) {
//   (*fnptr)(pname, param);
// }
// static void  glowSpriteParameterfvSGIX(GPSPRITEPARAMETERFVSGIX fnptr, GLenum  pname, const GLfloat * params) {
//   (*fnptr)(pname, params);
// }
// static void  glowSpriteParameteriSGIX(GPSPRITEPARAMETERISGIX fnptr, GLenum  pname, GLint  param) {
//   (*fnptr)(pname, param);
// }
// static void  glowSpriteParameterivSGIX(GPSPRITEPARAMETERIVSGIX fnptr, GLenum  pname, const GLint * params) {
//   (*fnptr)(pname, params);
// }
// static void  glowStartInstrumentsSGIX(GPSTARTINSTRUMENTSSGIX fnptr) {
//   (*fnptr)();
// }
// static void  glowStencilClearTagEXT(GPSTENCILCLEARTAGEXT fnptr, GLsizei  stencilTagBits, GLuint  stencilClearTag) {
//   (*fnptr)(stencilTagBits, stencilClearTag);
// }
// static void  glowStencilFillPathInstancedNV(GPSTENCILFILLPATHINSTANCEDNV fnptr, GLsizei  numPaths, GLenum  pathNameType, const void * paths, GLuint  pathBase, GLenum  fillMode, GLuint  mask, GLenum  transformType, const GLfloat * transformValues) {
//   (*fnptr)(numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues);
// }
// static void  glowStencilFillPathNV(GPSTENCILFILLPATHNV fnptr, GLuint  path, GLenum  fillMode, GLuint  mask) {
//   (*fnptr)(path, fillMode, mask);
// }
// static void  glowStencilFunc(GPSTENCILFUNC fnptr, GLenum  func, GLint  ref, GLuint  mask) {
//   (*fnptr)(func, ref, mask);
// }
// static void  glowStencilFuncSeparate(GPSTENCILFUNCSEPARATE fnptr, GLenum  face, GLenum  func, GLint  ref, GLuint  mask) {
//   (*fnptr)(face, func, ref, mask);
// }
// static void  glowStencilFuncSeparateATI(GPSTENCILFUNCSEPARATEATI fnptr, GLenum  frontfunc, GLenum  backfunc, GLint  ref, GLuint  mask) {
//   (*fnptr)(frontfunc, backfunc, ref, mask);
// }
// static void  glowStencilMask(GPSTENCILMASK fnptr, GLuint  mask) {
//   (*fnptr)(mask);
// }
// static void  glowStencilMaskSeparate(GPSTENCILMASKSEPARATE fnptr, GLenum  face, GLuint  mask) {
//   (*fnptr)(face, mask);
// }
// static void  glowStencilOp(GPSTENCILOP fnptr, GLenum  fail, GLenum  zfail, GLenum  zpass) {
//   (*fnptr)(fail, zfail, zpass);
// }
// static void  glowStencilOpSeparate(GPSTENCILOPSEPARATE fnptr, GLenum  face, GLenum  sfail, GLenum  dpfail, GLenum  dppass) {
//   (*fnptr)(face, sfail, dpfail, dppass);
// }
// static void  glowStencilOpSeparateATI(GPSTENCILOPSEPARATEATI fnptr, GLenum  face, GLenum  sfail, GLenum  dpfail, GLenum  dppass) {
//   (*fnptr)(face, sfail, dpfail, dppass);
// }
// static void  glowStencilOpValueAMD(GPSTENCILOPVALUEAMD fnptr, GLenum  face, GLuint  value) {
//   (*fnptr)(face, value);
// }
// static void  glowStencilStrokePathInstancedNV(GPSTENCILSTROKEPATHINSTANCEDNV fnptr, GLsizei  numPaths, GLenum  pathNameType, const void * paths, GLuint  pathBase, GLint  reference, GLuint  mask, GLenum  transformType, const GLfloat * transformValues) {
//   (*fnptr)(numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues);
// }
// static void  glowStencilStrokePathNV(GPSTENCILSTROKEPATHNV fnptr, GLuint  path, GLint  reference, GLuint  mask) {
//   (*fnptr)(path, reference, mask);
// }
// static void  glowStopInstrumentsSGIX(GPSTOPINSTRUMENTSSGIX fnptr, GLint  marker) {
//   (*fnptr)(marker);
// }
// static void  glowStringMarkerGREMEDY(GPSTRINGMARKERGREMEDY fnptr, GLsizei  len, const void * string) {
//   (*fnptr)(len, string);
// }
// static void  glowSwizzleEXT(GPSWIZZLEEXT fnptr, GLuint  res, GLuint  in, GLenum  outX, GLenum  outY, GLenum  outZ, GLenum  outW) {
//   (*fnptr)(res, in, outX, outY, outZ, outW);
// }
// static void  glowSyncTextureINTEL(GPSYNCTEXTUREINTEL fnptr, GLuint  texture) {
//   (*fnptr)(texture);
// }
// static void  glowTagSampleBufferSGIX(GPTAGSAMPLEBUFFERSGIX fnptr) {
//   (*fnptr)();
// }
// static void  glowTangent3bEXT(GPTANGENT3BEXT fnptr, GLbyte  tx, GLbyte  ty, GLbyte  tz) {
//   (*fnptr)(tx, ty, tz);
// }
// static void  glowTangent3bvEXT(GPTANGENT3BVEXT fnptr, const GLbyte * v) {
//   (*fnptr)(v);
// }
// static void  glowTangent3dEXT(GPTANGENT3DEXT fnptr, GLdouble  tx, GLdouble  ty, GLdouble  tz) {
//   (*fnptr)(tx, ty, tz);
// }
// static void  glowTangent3dvEXT(GPTANGENT3DVEXT fnptr, const GLdouble * v) {
//   (*fnptr)(v);
// }
// static void  glowTangent3fEXT(GPTANGENT3FEXT fnptr, GLfloat  tx, GLfloat  ty, GLfloat  tz) {
//   (*fnptr)(tx, ty, tz);
// }
// static void  glowTangent3fvEXT(GPTANGENT3FVEXT fnptr, const GLfloat * v) {
//   (*fnptr)(v);
// }
// static void  glowTangent3iEXT(GPTANGENT3IEXT fnptr, GLint  tx, GLint  ty, GLint  tz) {
//   (*fnptr)(tx, ty, tz);
// }
// static void  glowTangent3ivEXT(GPTANGENT3IVEXT fnptr, const GLint * v) {
//   (*fnptr)(v);
// }
// static void  glowTangent3sEXT(GPTANGENT3SEXT fnptr, GLshort  tx, GLshort  ty, GLshort  tz) {
//   (*fnptr)(tx, ty, tz);
// }
// static void  glowTangent3svEXT(GPTANGENT3SVEXT fnptr, const GLshort * v) {
//   (*fnptr)(v);
// }
// static void  glowTangentPointerEXT(GPTANGENTPOINTEREXT fnptr, GLenum  type, GLsizei  stride, const void * pointer) {
//   (*fnptr)(type, stride, pointer);
// }
// static void  glowTbufferMask3DFX(GPTBUFFERMASK3DFX fnptr, GLuint  mask) {
//   (*fnptr)(mask);
// }
// static void  glowTessellationFactorAMD(GPTESSELLATIONFACTORAMD fnptr, GLfloat  factor) {
//   (*fnptr)(factor);
// }
// static void  glowTessellationModeAMD(GPTESSELLATIONMODEAMD fnptr, GLenum  mode) {
//   (*fnptr)(mode);
// }
// static GLboolean  glowTestFenceAPPLE(GPTESTFENCEAPPLE fnptr, GLuint  fence) {
//   return (*fnptr)(fence);
// }
// static GLboolean  glowTestFenceNV(GPTESTFENCENV fnptr, GLuint  fence) {
//   return (*fnptr)(fence);
// }
// static GLboolean  glowTestObjectAPPLE(GPTESTOBJECTAPPLE fnptr, GLenum  object, GLuint  name) {
//   return (*fnptr)(object, name);
// }
// static void  glowTexBuffer(GPTEXBUFFER fnptr, GLenum  target, GLenum  internalformat, GLuint  buffer) {
//   (*fnptr)(target, internalformat, buffer);
// }
// static void  glowTexBufferARB(GPTEXBUFFERARB fnptr, GLenum  target, GLenum  internalformat, GLuint  buffer) {
//   (*fnptr)(target, internalformat, buffer);
// }
// static void  glowTexBufferEXT(GPTEXBUFFEREXT fnptr, GLenum  target, GLenum  internalformat, GLuint  buffer) {
//   (*fnptr)(target, internalformat, buffer);
// }
// static void  glowTexBufferRange(GPTEXBUFFERRANGE fnptr, GLenum  target, GLenum  internalformat, GLuint  buffer, GLintptr  offset, GLsizeiptr  size) {
//   (*fnptr)(target, internalformat, buffer, offset, size);
// }
// static void  glowTexBumpParameterfvATI(GPTEXBUMPPARAMETERFVATI fnptr, GLenum  pname, const GLfloat * param) {
//   (*fnptr)(pname, param);
// }
// static void  glowTexBumpParameterivATI(GPTEXBUMPPARAMETERIVATI fnptr, GLenum  pname, const GLint * param) {
//   (*fnptr)(pname, param);
// }
// static void  glowTexCoord1bOES(GPTEXCOORD1BOES fnptr, GLbyte  s) {
//   (*fnptr)(s);
// }
// static void  glowTexCoord1bvOES(GPTEXCOORD1BVOES fnptr, const GLbyte * coords) {
//   (*fnptr)(coords);
// }
// static void  glowTexCoord1hNV(GPTEXCOORD1HNV fnptr, GLhalfNV  s) {
//   (*fnptr)(s);
// }
// static void  glowTexCoord1hvNV(GPTEXCOORD1HVNV fnptr, const GLhalfNV * v) {
//   (*fnptr)(v);
// }
// static void  glowTexCoord1xOES(GPTEXCOORD1XOES fnptr, GLfixed  s) {
//   (*fnptr)(s);
// }
// static void  glowTexCoord1xvOES(GPTEXCOORD1XVOES fnptr, const GLfixed * coords) {
//   (*fnptr)(coords);
// }
// static void  glowTexCoord2bOES(GPTEXCOORD2BOES fnptr, GLbyte  s, GLbyte  t) {
//   (*fnptr)(s, t);
// }
// static void  glowTexCoord2bvOES(GPTEXCOORD2BVOES fnptr, const GLbyte * coords) {
//   (*fnptr)(coords);
// }
// static void  glowTexCoord2fColor3fVertex3fSUN(GPTEXCOORD2FCOLOR3FVERTEX3FSUN fnptr, GLfloat  s, GLfloat  t, GLfloat  r, GLfloat  g, GLfloat  b, GLfloat  x, GLfloat  y, GLfloat  z) {
//   (*fnptr)(s, t, r, g, b, x, y, z);
// }
// static void  glowTexCoord2fColor3fVertex3fvSUN(GPTEXCOORD2FCOLOR3FVERTEX3FVSUN fnptr, const GLfloat * tc, const GLfloat * c, const GLfloat * v) {
//   (*fnptr)(tc, c, v);
// }
// static void  glowTexCoord2fColor4fNormal3fVertex3fSUN(GPTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUN fnptr, GLfloat  s, GLfloat  t, GLfloat  r, GLfloat  g, GLfloat  b, GLfloat  a, GLfloat  nx, GLfloat  ny, GLfloat  nz, GLfloat  x, GLfloat  y, GLfloat  z) {
//   (*fnptr)(s, t, r, g, b, a, nx, ny, nz, x, y, z);
// }
// static void  glowTexCoord2fColor4fNormal3fVertex3fvSUN(GPTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUN fnptr, const GLfloat * tc, const GLfloat * c, const GLfloat * n, const GLfloat * v) {
//   (*fnptr)(tc, c, n, v);
// }
// static void  glowTexCoord2fColor4ubVertex3fSUN(GPTEXCOORD2FCOLOR4UBVERTEX3FSUN fnptr, GLfloat  s, GLfloat  t, GLubyte  r, GLubyte  g, GLubyte  b, GLubyte  a, GLfloat  x, GLfloat  y, GLfloat  z) {
//   (*fnptr)(s, t, r, g, b, a, x, y, z);
// }
// static void  glowTexCoord2fColor4ubVertex3fvSUN(GPTEXCOORD2FCOLOR4UBVERTEX3FVSUN fnptr, const GLfloat * tc, const GLubyte * c, const GLfloat * v) {
//   (*fnptr)(tc, c, v);
// }
// static void  glowTexCoord2fNormal3fVertex3fSUN(GPTEXCOORD2FNORMAL3FVERTEX3FSUN fnptr, GLfloat  s, GLfloat  t, GLfloat  nx, GLfloat  ny, GLfloat  nz, GLfloat  x, GLfloat  y, GLfloat  z) {
//   (*fnptr)(s, t, nx, ny, nz, x, y, z);
// }
// static void  glowTexCoord2fNormal3fVertex3fvSUN(GPTEXCOORD2FNORMAL3FVERTEX3FVSUN fnptr, const GLfloat * tc, const GLfloat * n, const GLfloat * v) {
//   (*fnptr)(tc, n, v);
// }
// static void  glowTexCoord2fVertex3fSUN(GPTEXCOORD2FVERTEX3FSUN fnptr, GLfloat  s, GLfloat  t, GLfloat  x, GLfloat  y, GLfloat  z) {
//   (*fnptr)(s, t, x, y, z);
// }
// static void  glowTexCoord2fVertex3fvSUN(GPTEXCOORD2FVERTEX3FVSUN fnptr, const GLfloat * tc, const GLfloat * v) {
//   (*fnptr)(tc, v);
// }
// static void  glowTexCoord2hNV(GPTEXCOORD2HNV fnptr, GLhalfNV  s, GLhalfNV  t) {
//   (*fnptr)(s, t);
// }
// static void  glowTexCoord2hvNV(GPTEXCOORD2HVNV fnptr, const GLhalfNV * v) {
//   (*fnptr)(v);
// }
// static void  glowTexCoord2xOES(GPTEXCOORD2XOES fnptr, GLfixed  s, GLfixed  t) {
//   (*fnptr)(s, t);
// }
// static void  glowTexCoord2xvOES(GPTEXCOORD2XVOES fnptr, const GLfixed * coords) {
//   (*fnptr)(coords);
// }
// static void  glowTexCoord3bOES(GPTEXCOORD3BOES fnptr, GLbyte  s, GLbyte  t, GLbyte  r) {
//   (*fnptr)(s, t, r);
// }
// static void  glowTexCoord3bvOES(GPTEXCOORD3BVOES fnptr, const GLbyte * coords) {
//   (*fnptr)(coords);
// }
// static void  glowTexCoord3hNV(GPTEXCOORD3HNV fnptr, GLhalfNV  s, GLhalfNV  t, GLhalfNV  r) {
//   (*fnptr)(s, t, r);
// }
// static void  glowTexCoord3hvNV(GPTEXCOORD3HVNV fnptr, const GLhalfNV * v) {
//   (*fnptr)(v);
// }
// static void  glowTexCoord3xOES(GPTEXCOORD3XOES fnptr, GLfixed  s, GLfixed  t, GLfixed  r) {
//   (*fnptr)(s, t, r);
// }
// static void  glowTexCoord3xvOES(GPTEXCOORD3XVOES fnptr, const GLfixed * coords) {
//   (*fnptr)(coords);
// }
// static void  glowTexCoord4bOES(GPTEXCOORD4BOES fnptr, GLbyte  s, GLbyte  t, GLbyte  r, GLbyte  q) {
//   (*fnptr)(s, t, r, q);
// }
// static void  glowTexCoord4bvOES(GPTEXCOORD4BVOES fnptr, const GLbyte * coords) {
//   (*fnptr)(coords);
// }
// static void  glowTexCoord4fColor4fNormal3fVertex4fSUN(GPTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUN fnptr, GLfloat  s, GLfloat  t, GLfloat  p, GLfloat  q, GLfloat  r, GLfloat  g, GLfloat  b, GLfloat  a, GLfloat  nx, GLfloat  ny, GLfloat  nz, GLfloat  x, GLfloat  y, GLfloat  z, GLfloat  w) {
//   (*fnptr)(s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w);
// }
// static void  glowTexCoord4fColor4fNormal3fVertex4fvSUN(GPTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUN fnptr, const GLfloat * tc, const GLfloat * c, const GLfloat * n, const GLfloat * v) {
//   (*fnptr)(tc, c, n, v);
// }
// static void  glowTexCoord4fVertex4fSUN(GPTEXCOORD4FVERTEX4FSUN fnptr, GLfloat  s, GLfloat  t, GLfloat  p, GLfloat  q, GLfloat  x, GLfloat  y, GLfloat  z, GLfloat  w) {
//   (*fnptr)(s, t, p, q, x, y, z, w);
// }
// static void  glowTexCoord4fVertex4fvSUN(GPTEXCOORD4FVERTEX4FVSUN fnptr, const GLfloat * tc, const GLfloat * v) {
//   (*fnptr)(tc, v);
// }
// static void  glowTexCoord4hNV(GPTEXCOORD4HNV fnptr, GLhalfNV  s, GLhalfNV  t, GLhalfNV  r, GLhalfNV  q) {
//   (*fnptr)(s, t, r, q);
// }
// static void  glowTexCoord4hvNV(GPTEXCOORD4HVNV fnptr, const GLhalfNV * v) {
//   (*fnptr)(v);
// }
// static void  glowTexCoord4xOES(GPTEXCOORD4XOES fnptr, GLfixed  s, GLfixed  t, GLfixed  r, GLfixed  q) {
//   (*fnptr)(s, t, r, q);
// }
// static void  glowTexCoord4xvOES(GPTEXCOORD4XVOES fnptr, const GLfixed * coords) {
//   (*fnptr)(coords);
// }
// static void  glowTexCoordFormatNV(GPTEXCOORDFORMATNV fnptr, GLint  size, GLenum  type, GLsizei  stride) {
//   (*fnptr)(size, type, stride);
// }
// static void  glowTexCoordPointerEXT(GPTEXCOORDPOINTEREXT fnptr, GLint  size, GLenum  type, GLsizei  stride, GLsizei  count, const void * pointer) {
//   (*fnptr)(size, type, stride, count, pointer);
// }
// static void  glowTexCoordPointerListIBM(GPTEXCOORDPOINTERLISTIBM fnptr, GLint  size, GLenum  type, GLint  stride, const void ** pointer, GLint  ptrstride) {
//   (*fnptr)(size, type, stride, pointer, ptrstride);
// }
// static void  glowTexCoordPointervINTEL(GPTEXCOORDPOINTERVINTEL fnptr, GLint  size, GLenum  type, const void ** pointer) {
//   (*fnptr)(size, type, pointer);
// }
// static void  glowTexEnvxOES(GPTEXENVXOES fnptr, GLenum  target, GLenum  pname, GLfixed  param) {
//   (*fnptr)(target, pname, param);
// }
// static void  glowTexEnvxvOES(GPTEXENVXVOES fnptr, GLenum  target, GLenum  pname, const GLfixed * params) {
//   (*fnptr)(target, pname, params);
// }
// static void  glowTexFilterFuncSGIS(GPTEXFILTERFUNCSGIS fnptr, GLenum  target, GLenum  filter, GLsizei  n, const GLfloat * weights) {
//   (*fnptr)(target, filter, n, weights);
// }
// static void  glowTexGenxOES(GPTEXGENXOES fnptr, GLenum  coord, GLenum  pname, GLfixed  param) {
//   (*fnptr)(coord, pname, param);
// }
// static void  glowTexGenxvOES(GPTEXGENXVOES fnptr, GLenum  coord, GLenum  pname, const GLfixed * params) {
//   (*fnptr)(coord, pname, params);
// }
// static void  glowTexImage1D(GPTEXIMAGE1D fnptr, GLenum  target, GLint  level, GLint  internalformat, GLsizei  width, GLint  border, GLenum  format, GLenum  type, const void * pixels) {
//   (*fnptr)(target, level, internalformat, width, border, format, type, pixels);
// }
// static void  glowTexImage2D(GPTEXIMAGE2D fnptr, GLenum  target, GLint  level, GLint  internalformat, GLsizei  width, GLsizei  height, GLint  border, GLenum  format, GLenum  type, const void * pixels) {
//   (*fnptr)(target, level, internalformat, width, height, border, format, type, pixels);
// }
// static void  glowTexImage2DMultisample(GPTEXIMAGE2DMULTISAMPLE fnptr, GLenum  target, GLsizei  samples, GLenum  internalformat, GLsizei  width, GLsizei  height, GLboolean  fixedsamplelocations) {
//   (*fnptr)(target, samples, internalformat, width, height, fixedsamplelocations);
// }
// static void  glowTexImage2DMultisampleCoverageNV(GPTEXIMAGE2DMULTISAMPLECOVERAGENV fnptr, GLenum  target, GLsizei  coverageSamples, GLsizei  colorSamples, GLint  internalFormat, GLsizei  width, GLsizei  height, GLboolean  fixedSampleLocations) {
//   (*fnptr)(target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);
// }
// static void  glowTexImage3D(GPTEXIMAGE3D fnptr, GLenum  target, GLint  level, GLint  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth, GLint  border, GLenum  format, GLenum  type, const void * pixels) {
//   (*fnptr)(target, level, internalformat, width, height, depth, border, format, type, pixels);
// }
// static void  glowTexImage3DEXT(GPTEXIMAGE3DEXT fnptr, GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth, GLint  border, GLenum  format, GLenum  type, const void * pixels) {
//   (*fnptr)(target, level, internalformat, width, height, depth, border, format, type, pixels);
// }
// static void  glowTexImage3DMultisample(GPTEXIMAGE3DMULTISAMPLE fnptr, GLenum  target, GLsizei  samples, GLenum  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth, GLboolean  fixedsamplelocations) {
//   (*fnptr)(target, samples, internalformat, width, height, depth, fixedsamplelocations);
// }
// static void  glowTexImage3DMultisampleCoverageNV(GPTEXIMAGE3DMULTISAMPLECOVERAGENV fnptr, GLenum  target, GLsizei  coverageSamples, GLsizei  colorSamples, GLint  internalFormat, GLsizei  width, GLsizei  height, GLsizei  depth, GLboolean  fixedSampleLocations) {
//   (*fnptr)(target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);
// }
// static void  glowTexImage4DSGIS(GPTEXIMAGE4DSGIS fnptr, GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth, GLsizei  size4d, GLint  border, GLenum  format, GLenum  type, const void * pixels) {
//   (*fnptr)(target, level, internalformat, width, height, depth, size4d, border, format, type, pixels);
// }
// static void  glowTexPageCommitmentARB(GPTEXPAGECOMMITMENTARB fnptr, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLsizei  width, GLsizei  height, GLsizei  depth, GLboolean  resident) {
//   (*fnptr)(target, level, xoffset, yoffset, zoffset, width, height, depth, resident);
// }
// static void  glowTexParameterIiv(GPTEXPARAMETERIIV fnptr, GLenum  target, GLenum  pname, const GLint * params) {
//   (*fnptr)(target, pname, params);
// }
// static void  glowTexParameterIivEXT(GPTEXPARAMETERIIVEXT fnptr, GLenum  target, GLenum  pname, const GLint * params) {
//   (*fnptr)(target, pname, params);
// }
// static void  glowTexParameterIuiv(GPTEXPARAMETERIUIV fnptr, GLenum  target, GLenum  pname, const GLuint * params) {
//   (*fnptr)(target, pname, params);
// }
// static void  glowTexParameterIuivEXT(GPTEXPARAMETERIUIVEXT fnptr, GLenum  target, GLenum  pname, const GLuint * params) {
//   (*fnptr)(target, pname, params);
// }
// static void  glowTexParameterf(GPTEXPARAMETERF fnptr, GLenum  target, GLenum  pname, GLfloat  param) {
//   (*fnptr)(target, pname, param);
// }
// static void  glowTexParameterfv(GPTEXPARAMETERFV fnptr, GLenum  target, GLenum  pname, const GLfloat * params) {
//   (*fnptr)(target, pname, params);
// }
// static void  glowTexParameteri(GPTEXPARAMETERI fnptr, GLenum  target, GLenum  pname, GLint  param) {
//   (*fnptr)(target, pname, param);
// }
// static void  glowTexParameteriv(GPTEXPARAMETERIV fnptr, GLenum  target, GLenum  pname, const GLint * params) {
//   (*fnptr)(target, pname, params);
// }
// static void  glowTexParameterxOES(GPTEXPARAMETERXOES fnptr, GLenum  target, GLenum  pname, GLfixed  param) {
//   (*fnptr)(target, pname, param);
// }
// static void  glowTexParameterxvOES(GPTEXPARAMETERXVOES fnptr, GLenum  target, GLenum  pname, const GLfixed * params) {
//   (*fnptr)(target, pname, params);
// }
// static void  glowTexRenderbufferNV(GPTEXRENDERBUFFERNV fnptr, GLenum  target, GLuint  renderbuffer) {
//   (*fnptr)(target, renderbuffer);
// }
// static void  glowTexStorage1D(GPTEXSTORAGE1D fnptr, GLenum  target, GLsizei  levels, GLenum  internalformat, GLsizei  width) {
//   (*fnptr)(target, levels, internalformat, width);
// }
// static void  glowTexStorage2D(GPTEXSTORAGE2D fnptr, GLenum  target, GLsizei  levels, GLenum  internalformat, GLsizei  width, GLsizei  height) {
//   (*fnptr)(target, levels, internalformat, width, height);
// }
// static void  glowTexStorage2DMultisample(GPTEXSTORAGE2DMULTISAMPLE fnptr, GLenum  target, GLsizei  samples, GLenum  internalformat, GLsizei  width, GLsizei  height, GLboolean  fixedsamplelocations) {
//   (*fnptr)(target, samples, internalformat, width, height, fixedsamplelocations);
// }
// static void  glowTexStorage3D(GPTEXSTORAGE3D fnptr, GLenum  target, GLsizei  levels, GLenum  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth) {
//   (*fnptr)(target, levels, internalformat, width, height, depth);
// }
// static void  glowTexStorage3DMultisample(GPTEXSTORAGE3DMULTISAMPLE fnptr, GLenum  target, GLsizei  samples, GLenum  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth, GLboolean  fixedsamplelocations) {
//   (*fnptr)(target, samples, internalformat, width, height, depth, fixedsamplelocations);
// }
// static void  glowTexStorageSparseAMD(GPTEXSTORAGESPARSEAMD fnptr, GLenum  target, GLenum  internalFormat, GLsizei  width, GLsizei  height, GLsizei  depth, GLsizei  layers, GLbitfield  flags) {
//   (*fnptr)(target, internalFormat, width, height, depth, layers, flags);
// }
// static void  glowTexSubImage1D(GPTEXSUBIMAGE1D fnptr, GLenum  target, GLint  level, GLint  xoffset, GLsizei  width, GLenum  format, GLenum  type, const void * pixels) {
//   (*fnptr)(target, level, xoffset, width, format, type, pixels);
// }
// static void  glowTexSubImage1DEXT(GPTEXSUBIMAGE1DEXT fnptr, GLenum  target, GLint  level, GLint  xoffset, GLsizei  width, GLenum  format, GLenum  type, const void * pixels) {
//   (*fnptr)(target, level, xoffset, width, format, type, pixels);
// }
// static void  glowTexSubImage2D(GPTEXSUBIMAGE2D fnptr, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLsizei  width, GLsizei  height, GLenum  format, GLenum  type, const void * pixels) {
//   (*fnptr)(target, level, xoffset, yoffset, width, height, format, type, pixels);
// }
// static void  glowTexSubImage2DEXT(GPTEXSUBIMAGE2DEXT fnptr, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLsizei  width, GLsizei  height, GLenum  format, GLenum  type, const void * pixels) {
//   (*fnptr)(target, level, xoffset, yoffset, width, height, format, type, pixels);
// }
// static void  glowTexSubImage3D(GPTEXSUBIMAGE3D fnptr, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLsizei  width, GLsizei  height, GLsizei  depth, GLenum  format, GLenum  type, const void * pixels) {
//   (*fnptr)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
// }
// static void  glowTexSubImage3DEXT(GPTEXSUBIMAGE3DEXT fnptr, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLsizei  width, GLsizei  height, GLsizei  depth, GLenum  format, GLenum  type, const void * pixels) {
//   (*fnptr)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
// }
// static void  glowTexSubImage4DSGIS(GPTEXSUBIMAGE4DSGIS fnptr, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLint  woffset, GLsizei  width, GLsizei  height, GLsizei  depth, GLsizei  size4d, GLenum  format, GLenum  type, const void * pixels) {
//   (*fnptr)(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels);
// }
// static void  glowTextureBarrierNV(GPTEXTUREBARRIERNV fnptr) {
//   (*fnptr)();
// }
// static void  glowTextureBufferEXT(GPTEXTUREBUFFEREXT fnptr, GLuint  texture, GLenum  target, GLenum  internalformat, GLuint  buffer) {
//   (*fnptr)(texture, target, internalformat, buffer);
// }
// static void  glowTextureBufferRangeEXT(GPTEXTUREBUFFERRANGEEXT fnptr, GLuint  texture, GLenum  target, GLenum  internalformat, GLuint  buffer, GLintptr  offset, GLsizeiptr  size) {
//   (*fnptr)(texture, target, internalformat, buffer, offset, size);
// }
// static void  glowTextureColorMaskSGIS(GPTEXTURECOLORMASKSGIS fnptr, GLboolean  red, GLboolean  green, GLboolean  blue, GLboolean  alpha) {
//   (*fnptr)(red, green, blue, alpha);
// }
// static void  glowTextureImage1DEXT(GPTEXTUREIMAGE1DEXT fnptr, GLuint  texture, GLenum  target, GLint  level, GLint  internalformat, GLsizei  width, GLint  border, GLenum  format, GLenum  type, const void * pixels) {
//   (*fnptr)(texture, target, level, internalformat, width, border, format, type, pixels);
// }
// static void  glowTextureImage2DEXT(GPTEXTUREIMAGE2DEXT fnptr, GLuint  texture, GLenum  target, GLint  level, GLint  internalformat, GLsizei  width, GLsizei  height, GLint  border, GLenum  format, GLenum  type, const void * pixels) {
//   (*fnptr)(texture, target, level, internalformat, width, height, border, format, type, pixels);
// }
// static void  glowTextureImage2DMultisampleCoverageNV(GPTEXTUREIMAGE2DMULTISAMPLECOVERAGENV fnptr, GLuint  texture, GLenum  target, GLsizei  coverageSamples, GLsizei  colorSamples, GLint  internalFormat, GLsizei  width, GLsizei  height, GLboolean  fixedSampleLocations) {
//   (*fnptr)(texture, target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);
// }
// static void  glowTextureImage2DMultisampleNV(GPTEXTUREIMAGE2DMULTISAMPLENV fnptr, GLuint  texture, GLenum  target, GLsizei  samples, GLint  internalFormat, GLsizei  width, GLsizei  height, GLboolean  fixedSampleLocations) {
//   (*fnptr)(texture, target, samples, internalFormat, width, height, fixedSampleLocations);
// }
// static void  glowTextureImage3DEXT(GPTEXTUREIMAGE3DEXT fnptr, GLuint  texture, GLenum  target, GLint  level, GLint  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth, GLint  border, GLenum  format, GLenum  type, const void * pixels) {
//   (*fnptr)(texture, target, level, internalformat, width, height, depth, border, format, type, pixels);
// }
// static void  glowTextureImage3DMultisampleCoverageNV(GPTEXTUREIMAGE3DMULTISAMPLECOVERAGENV fnptr, GLuint  texture, GLenum  target, GLsizei  coverageSamples, GLsizei  colorSamples, GLint  internalFormat, GLsizei  width, GLsizei  height, GLsizei  depth, GLboolean  fixedSampleLocations) {
//   (*fnptr)(texture, target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);
// }
// static void  glowTextureImage3DMultisampleNV(GPTEXTUREIMAGE3DMULTISAMPLENV fnptr, GLuint  texture, GLenum  target, GLsizei  samples, GLint  internalFormat, GLsizei  width, GLsizei  height, GLsizei  depth, GLboolean  fixedSampleLocations) {
//   (*fnptr)(texture, target, samples, internalFormat, width, height, depth, fixedSampleLocations);
// }
// static void  glowTextureLightEXT(GPTEXTURELIGHTEXT fnptr, GLenum  pname) {
//   (*fnptr)(pname);
// }
// static void  glowTextureMaterialEXT(GPTEXTUREMATERIALEXT fnptr, GLenum  face, GLenum  mode) {
//   (*fnptr)(face, mode);
// }
// static void  glowTextureNormalEXT(GPTEXTURENORMALEXT fnptr, GLenum  mode) {
//   (*fnptr)(mode);
// }
// static void  glowTexturePageCommitmentEXT(GPTEXTUREPAGECOMMITMENTEXT fnptr, GLuint  texture, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLsizei  width, GLsizei  height, GLsizei  depth, GLboolean  resident) {
//   (*fnptr)(texture, level, xoffset, yoffset, zoffset, width, height, depth, resident);
// }
// static void  glowTextureParameterIivEXT(GPTEXTUREPARAMETERIIVEXT fnptr, GLuint  texture, GLenum  target, GLenum  pname, const GLint * params) {
//   (*fnptr)(texture, target, pname, params);
// }
// static void  glowTextureParameterIuivEXT(GPTEXTUREPARAMETERIUIVEXT fnptr, GLuint  texture, GLenum  target, GLenum  pname, const GLuint * params) {
//   (*fnptr)(texture, target, pname, params);
// }
// static void  glowTextureParameterfEXT(GPTEXTUREPARAMETERFEXT fnptr, GLuint  texture, GLenum  target, GLenum  pname, GLfloat  param) {
//   (*fnptr)(texture, target, pname, param);
// }
// static void  glowTextureParameterfvEXT(GPTEXTUREPARAMETERFVEXT fnptr, GLuint  texture, GLenum  target, GLenum  pname, const GLfloat * params) {
//   (*fnptr)(texture, target, pname, params);
// }
// static void  glowTextureParameteriEXT(GPTEXTUREPARAMETERIEXT fnptr, GLuint  texture, GLenum  target, GLenum  pname, GLint  param) {
//   (*fnptr)(texture, target, pname, param);
// }
// static void  glowTextureParameterivEXT(GPTEXTUREPARAMETERIVEXT fnptr, GLuint  texture, GLenum  target, GLenum  pname, const GLint * params) {
//   (*fnptr)(texture, target, pname, params);
// }
// static void  glowTextureRangeAPPLE(GPTEXTURERANGEAPPLE fnptr, GLenum  target, GLsizei  length, const void * pointer) {
//   (*fnptr)(target, length, pointer);
// }
// static void  glowTextureRenderbufferEXT(GPTEXTURERENDERBUFFEREXT fnptr, GLuint  texture, GLenum  target, GLuint  renderbuffer) {
//   (*fnptr)(texture, target, renderbuffer);
// }
// static void  glowTextureStorage1DEXT(GPTEXTURESTORAGE1DEXT fnptr, GLuint  texture, GLenum  target, GLsizei  levels, GLenum  internalformat, GLsizei  width) {
//   (*fnptr)(texture, target, levels, internalformat, width);
// }
// static void  glowTextureStorage2DEXT(GPTEXTURESTORAGE2DEXT fnptr, GLuint  texture, GLenum  target, GLsizei  levels, GLenum  internalformat, GLsizei  width, GLsizei  height) {
//   (*fnptr)(texture, target, levels, internalformat, width, height);
// }
// static void  glowTextureStorage2DMultisampleEXT(GPTEXTURESTORAGE2DMULTISAMPLEEXT fnptr, GLuint  texture, GLenum  target, GLsizei  samples, GLenum  internalformat, GLsizei  width, GLsizei  height, GLboolean  fixedsamplelocations) {
//   (*fnptr)(texture, target, samples, internalformat, width, height, fixedsamplelocations);
// }
// static void  glowTextureStorage3DEXT(GPTEXTURESTORAGE3DEXT fnptr, GLuint  texture, GLenum  target, GLsizei  levels, GLenum  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth) {
//   (*fnptr)(texture, target, levels, internalformat, width, height, depth);
// }
// static void  glowTextureStorage3DMultisampleEXT(GPTEXTURESTORAGE3DMULTISAMPLEEXT fnptr, GLuint  texture, GLenum  target, GLsizei  samples, GLenum  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth, GLboolean  fixedsamplelocations) {
//   (*fnptr)(texture, target, samples, internalformat, width, height, depth, fixedsamplelocations);
// }
// static void  glowTextureStorageSparseAMD(GPTEXTURESTORAGESPARSEAMD fnptr, GLuint  texture, GLenum  target, GLenum  internalFormat, GLsizei  width, GLsizei  height, GLsizei  depth, GLsizei  layers, GLbitfield  flags) {
//   (*fnptr)(texture, target, internalFormat, width, height, depth, layers, flags);
// }
// static void  glowTextureSubImage1DEXT(GPTEXTURESUBIMAGE1DEXT fnptr, GLuint  texture, GLenum  target, GLint  level, GLint  xoffset, GLsizei  width, GLenum  format, GLenum  type, const void * pixels) {
//   (*fnptr)(texture, target, level, xoffset, width, format, type, pixels);
// }
// static void  glowTextureSubImage2DEXT(GPTEXTURESUBIMAGE2DEXT fnptr, GLuint  texture, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLsizei  width, GLsizei  height, GLenum  format, GLenum  type, const void * pixels) {
//   (*fnptr)(texture, target, level, xoffset, yoffset, width, height, format, type, pixels);
// }
// static void  glowTextureSubImage3DEXT(GPTEXTURESUBIMAGE3DEXT fnptr, GLuint  texture, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLsizei  width, GLsizei  height, GLsizei  depth, GLenum  format, GLenum  type, const void * pixels) {
//   (*fnptr)(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
// }
// static void  glowTextureView(GPTEXTUREVIEW fnptr, GLuint  texture, GLenum  target, GLuint  origtexture, GLenum  internalformat, GLuint  minlevel, GLuint  numlevels, GLuint  minlayer, GLuint  numlayers) {
//   (*fnptr)(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
// }
// static void  glowTrackMatrixNV(GPTRACKMATRIXNV fnptr, GLenum  target, GLuint  address, GLenum  matrix, GLenum  transform) {
//   (*fnptr)(target, address, matrix, transform);
// }
// static void  glowTransformFeedbackAttribsNV(GPTRANSFORMFEEDBACKATTRIBSNV fnptr, GLsizei  count, const GLint * attribs, GLenum  bufferMode) {
//   (*fnptr)(count, attribs, bufferMode);
// }
// static void  glowTransformFeedbackStreamAttribsNV(GPTRANSFORMFEEDBACKSTREAMATTRIBSNV fnptr, GLsizei  count, const GLint * attribs, GLsizei  nbuffers, const GLint * bufstreams, GLenum  bufferMode) {
//   (*fnptr)(count, attribs, nbuffers, bufstreams, bufferMode);
// }
// static void  glowTransformFeedbackVaryings(GPTRANSFORMFEEDBACKVARYINGS fnptr, GLuint  program, GLsizei  count, const GLchar *const* varyings, GLenum  bufferMode) {
//   (*fnptr)(program, count, varyings, bufferMode);
// }
// static void  glowTransformFeedbackVaryingsEXT(GPTRANSFORMFEEDBACKVARYINGSEXT fnptr, GLuint  program, GLsizei  count, const GLchar *const* varyings, GLenum  bufferMode) {
//   (*fnptr)(program, count, varyings, bufferMode);
// }
// static void  glowTransformFeedbackVaryingsNV(GPTRANSFORMFEEDBACKVARYINGSNV fnptr, GLuint  program, GLsizei  count, const GLint * locations, GLenum  bufferMode) {
//   (*fnptr)(program, count, locations, bufferMode);
// }
// static void  glowTransformPathNV(GPTRANSFORMPATHNV fnptr, GLuint  resultPath, GLuint  srcPath, GLenum  transformType, const GLfloat * transformValues) {
//   (*fnptr)(resultPath, srcPath, transformType, transformValues);
// }
// static void  glowTranslatexOES(GPTRANSLATEXOES fnptr, GLfixed  x, GLfixed  y, GLfixed  z) {
//   (*fnptr)(x, y, z);
// }
// static void  glowUniform1d(GPUNIFORM1D fnptr, GLint  location, GLdouble  x) {
//   (*fnptr)(location, x);
// }
// static void  glowUniform1dv(GPUNIFORM1DV fnptr, GLint  location, GLsizei  count, const GLdouble * value) {
//   (*fnptr)(location, count, value);
// }
// static void  glowUniform1f(GPUNIFORM1F fnptr, GLint  location, GLfloat  v0) {
//   (*fnptr)(location, v0);
// }
// static void  glowUniform1fARB(GPUNIFORM1FARB fnptr, GLint  location, GLfloat  v0) {
//   (*fnptr)(location, v0);
// }
// static void  glowUniform1fv(GPUNIFORM1FV fnptr, GLint  location, GLsizei  count, const GLfloat * value) {
//   (*fnptr)(location, count, value);
// }
// static void  glowUniform1fvARB(GPUNIFORM1FVARB fnptr, GLint  location, GLsizei  count, const GLfloat * value) {
//   (*fnptr)(location, count, value);
// }
// static void  glowUniform1i(GPUNIFORM1I fnptr, GLint  location, GLint  v0) {
//   (*fnptr)(location, v0);
// }
// static void  glowUniform1i64NV(GPUNIFORM1I64NV fnptr, GLint  location, GLint64EXT  x) {
//   (*fnptr)(location, x);
// }
// static void  glowUniform1i64vNV(GPUNIFORM1I64VNV fnptr, GLint  location, GLsizei  count, const GLint64EXT * value) {
//   (*fnptr)(location, count, value);
// }
// static void  glowUniform1iARB(GPUNIFORM1IARB fnptr, GLint  location, GLint  v0) {
//   (*fnptr)(location, v0);
// }
// static void  glowUniform1iv(GPUNIFORM1IV fnptr, GLint  location, GLsizei  count, const GLint * value) {
//   (*fnptr)(location, count, value);
// }
// static void  glowUniform1ivARB(GPUNIFORM1IVARB fnptr, GLint  location, GLsizei  count, const GLint * value) {
//   (*fnptr)(location, count, value);
// }
// static void  glowUniform1ui(GPUNIFORM1UI fnptr, GLint  location, GLuint  v0) {
//   (*fnptr)(location, v0);
// }
// static void  glowUniform1ui64NV(GPUNIFORM1UI64NV fnptr, GLint  location, GLuint64EXT  x) {
//   (*fnptr)(location, x);
// }
// static void  glowUniform1ui64vNV(GPUNIFORM1UI64VNV fnptr, GLint  location, GLsizei  count, const GLuint64EXT * value) {
//   (*fnptr)(location, count, value);
// }
// static void  glowUniform1uiEXT(GPUNIFORM1UIEXT fnptr, GLint  location, GLuint  v0) {
//   (*fnptr)(location, v0);
// }
// static void  glowUniform1uiv(GPUNIFORM1UIV fnptr, GLint  location, GLsizei  count, const GLuint * value) {
//   (*fnptr)(location, count, value);
// }
// static void  glowUniform1uivEXT(GPUNIFORM1UIVEXT fnptr, GLint  location, GLsizei  count, const GLuint * value) {
//   (*fnptr)(location, count, value);
// }
// static void  glowUniform2d(GPUNIFORM2D fnptr, GLint  location, GLdouble  x, GLdouble  y) {
//   (*fnptr)(location, x, y);
// }
// static void  glowUniform2dv(GPUNIFORM2DV fnptr, GLint  location, GLsizei  count, const GLdouble * value) {
//   (*fnptr)(location, count, value);
// }
// static void  glowUniform2f(GPUNIFORM2F fnptr, GLint  location, GLfloat  v0, GLfloat  v1) {
//   (*fnptr)(location, v0, v1);
// }
// static void  glowUniform2fARB(GPUNIFORM2FARB fnptr, GLint  location, GLfloat  v0, GLfloat  v1) {
//   (*fnptr)(location, v0, v1);
// }
// static void  glowUniform2fv(GPUNIFORM2FV fnptr, GLint  location, GLsizei  count, const GLfloat * value) {
//   (*fnptr)(location, count, value);
// }
// static void  glowUniform2fvARB(GPUNIFORM2FVARB fnptr, GLint  location, GLsizei  count, const GLfloat * value) {
//   (*fnptr)(location, count, value);
// }
// static void  glowUniform2i(GPUNIFORM2I fnptr, GLint  location, GLint  v0, GLint  v1) {
//   (*fnptr)(location, v0, v1);
// }
// static void  glowUniform2i64NV(GPUNIFORM2I64NV fnptr, GLint  location, GLint64EXT  x, GLint64EXT  y) {
//   (*fnptr)(location, x, y);
// }
// static void  glowUniform2i64vNV(GPUNIFORM2I64VNV fnptr, GLint  location, GLsizei  count, const GLint64EXT * value) {
//   (*fnptr)(location, count, value);
// }
// static void  glowUniform2iARB(GPUNIFORM2IARB fnptr, GLint  location, GLint  v0, GLint  v1) {
//   (*fnptr)(location, v0, v1);
// }
// static void  glowUniform2iv(GPUNIFORM2IV fnptr, GLint  location, GLsizei  count, const GLint * value) {
//   (*fnptr)(location, count, value);
// }
// static void  glowUniform2ivARB(GPUNIFORM2IVARB fnptr, GLint  location, GLsizei  count, const GLint * value) {
//   (*fnptr)(location, count, value);
// }
// static void  glowUniform2ui(GPUNIFORM2UI fnptr, GLint  location, GLuint  v0, GLuint  v1) {
//   (*fnptr)(location, v0, v1);
// }
// static void  glowUniform2ui64NV(GPUNIFORM2UI64NV fnptr, GLint  location, GLuint64EXT  x, GLuint64EXT  y) {
//   (*fnptr)(location, x, y);
// }
// static void  glowUniform2ui64vNV(GPUNIFORM2UI64VNV fnptr, GLint  location, GLsizei  count, const GLuint64EXT * value) {
//   (*fnptr)(location, count, value);
// }
// static void  glowUniform2uiEXT(GPUNIFORM2UIEXT fnptr, GLint  location, GLuint  v0, GLuint  v1) {
//   (*fnptr)(location, v0, v1);
// }
// static void  glowUniform2uiv(GPUNIFORM2UIV fnptr, GLint  location, GLsizei  count, const GLuint * value) {
//   (*fnptr)(location, count, value);
// }
// static void  glowUniform2uivEXT(GPUNIFORM2UIVEXT fnptr, GLint  location, GLsizei  count, const GLuint * value) {
//   (*fnptr)(location, count, value);
// }
// static void  glowUniform3d(GPUNIFORM3D fnptr, GLint  location, GLdouble  x, GLdouble  y, GLdouble  z) {
//   (*fnptr)(location, x, y, z);
// }
// static void  glowUniform3dv(GPUNIFORM3DV fnptr, GLint  location, GLsizei  count, const GLdouble * value) {
//   (*fnptr)(location, count, value);
// }
// static void  glowUniform3f(GPUNIFORM3F fnptr, GLint  location, GLfloat  v0, GLfloat  v1, GLfloat  v2) {
//   (*fnptr)(location, v0, v1, v2);
// }
// static void  glowUniform3fARB(GPUNIFORM3FARB fnptr, GLint  location, GLfloat  v0, GLfloat  v1, GLfloat  v2) {
//   (*fnptr)(location, v0, v1, v2);
// }
// static void  glowUniform3fv(GPUNIFORM3FV fnptr, GLint  location, GLsizei  count, const GLfloat * value) {
//   (*fnptr)(location, count, value);
// }
// static void  glowUniform3fvARB(GPUNIFORM3FVARB fnptr, GLint  location, GLsizei  count, const GLfloat * value) {
//   (*fnptr)(location, count, value);
// }
// static void  glowUniform3i(GPUNIFORM3I fnptr, GLint  location, GLint  v0, GLint  v1, GLint  v2) {
//   (*fnptr)(location, v0, v1, v2);
// }
// static void  glowUniform3i64NV(GPUNIFORM3I64NV fnptr, GLint  location, GLint64EXT  x, GLint64EXT  y, GLint64EXT  z) {
//   (*fnptr)(location, x, y, z);
// }
// static void  glowUniform3i64vNV(GPUNIFORM3I64VNV fnptr, GLint  location, GLsizei  count, const GLint64EXT * value) {
//   (*fnptr)(location, count, value);
// }
// static void  glowUniform3iARB(GPUNIFORM3IARB fnptr, GLint  location, GLint  v0, GLint  v1, GLint  v2) {
//   (*fnptr)(location, v0, v1, v2);
// }
// static void  glowUniform3iv(GPUNIFORM3IV fnptr, GLint  location, GLsizei  count, const GLint * value) {
//   (*fnptr)(location, count, value);
// }
// static void  glowUniform3ivARB(GPUNIFORM3IVARB fnptr, GLint  location, GLsizei  count, const GLint * value) {
//   (*fnptr)(location, count, value);
// }
// static void  glowUniform3ui(GPUNIFORM3UI fnptr, GLint  location, GLuint  v0, GLuint  v1, GLuint  v2) {
//   (*fnptr)(location, v0, v1, v2);
// }
// static void  glowUniform3ui64NV(GPUNIFORM3UI64NV fnptr, GLint  location, GLuint64EXT  x, GLuint64EXT  y, GLuint64EXT  z) {
//   (*fnptr)(location, x, y, z);
// }
// static void  glowUniform3ui64vNV(GPUNIFORM3UI64VNV fnptr, GLint  location, GLsizei  count, const GLuint64EXT * value) {
//   (*fnptr)(location, count, value);
// }
// static void  glowUniform3uiEXT(GPUNIFORM3UIEXT fnptr, GLint  location, GLuint  v0, GLuint  v1, GLuint  v2) {
//   (*fnptr)(location, v0, v1, v2);
// }
// static void  glowUniform3uiv(GPUNIFORM3UIV fnptr, GLint  location, GLsizei  count, const GLuint * value) {
//   (*fnptr)(location, count, value);
// }
// static void  glowUniform3uivEXT(GPUNIFORM3UIVEXT fnptr, GLint  location, GLsizei  count, const GLuint * value) {
//   (*fnptr)(location, count, value);
// }
// static void  glowUniform4d(GPUNIFORM4D fnptr, GLint  location, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w) {
//   (*fnptr)(location, x, y, z, w);
// }
// static void  glowUniform4dv(GPUNIFORM4DV fnptr, GLint  location, GLsizei  count, const GLdouble * value) {
//   (*fnptr)(location, count, value);
// }
// static void  glowUniform4f(GPUNIFORM4F fnptr, GLint  location, GLfloat  v0, GLfloat  v1, GLfloat  v2, GLfloat  v3) {
//   (*fnptr)(location, v0, v1, v2, v3);
// }
// static void  glowUniform4fARB(GPUNIFORM4FARB fnptr, GLint  location, GLfloat  v0, GLfloat  v1, GLfloat  v2, GLfloat  v3) {
//   (*fnptr)(location, v0, v1, v2, v3);
// }
// static void  glowUniform4fv(GPUNIFORM4FV fnptr, GLint  location, GLsizei  count, const GLfloat * value) {
//   (*fnptr)(location, count, value);
// }
// static void  glowUniform4fvARB(GPUNIFORM4FVARB fnptr, GLint  location, GLsizei  count, const GLfloat * value) {
//   (*fnptr)(location, count, value);
// }
// static void  glowUniform4i(GPUNIFORM4I fnptr, GLint  location, GLint  v0, GLint  v1, GLint  v2, GLint  v3) {
//   (*fnptr)(location, v0, v1, v2, v3);
// }
// static void  glowUniform4i64NV(GPUNIFORM4I64NV fnptr, GLint  location, GLint64EXT  x, GLint64EXT  y, GLint64EXT  z, GLint64EXT  w) {
//   (*fnptr)(location, x, y, z, w);
// }
// static void  glowUniform4i64vNV(GPUNIFORM4I64VNV fnptr, GLint  location, GLsizei  count, const GLint64EXT * value) {
//   (*fnptr)(location, count, value);
// }
// static void  glowUniform4iARB(GPUNIFORM4IARB fnptr, GLint  location, GLint  v0, GLint  v1, GLint  v2, GLint  v3) {
//   (*fnptr)(location, v0, v1, v2, v3);
// }
// static void  glowUniform4iv(GPUNIFORM4IV fnptr, GLint  location, GLsizei  count, const GLint * value) {
//   (*fnptr)(location, count, value);
// }
// static void  glowUniform4ivARB(GPUNIFORM4IVARB fnptr, GLint  location, GLsizei  count, const GLint * value) {
//   (*fnptr)(location, count, value);
// }
// static void  glowUniform4ui(GPUNIFORM4UI fnptr, GLint  location, GLuint  v0, GLuint  v1, GLuint  v2, GLuint  v3) {
//   (*fnptr)(location, v0, v1, v2, v3);
// }
// static void  glowUniform4ui64NV(GPUNIFORM4UI64NV fnptr, GLint  location, GLuint64EXT  x, GLuint64EXT  y, GLuint64EXT  z, GLuint64EXT  w) {
//   (*fnptr)(location, x, y, z, w);
// }
// static void  glowUniform4ui64vNV(GPUNIFORM4UI64VNV fnptr, GLint  location, GLsizei  count, const GLuint64EXT * value) {
//   (*fnptr)(location, count, value);
// }
// static void  glowUniform4uiEXT(GPUNIFORM4UIEXT fnptr, GLint  location, GLuint  v0, GLuint  v1, GLuint  v2, GLuint  v3) {
//   (*fnptr)(location, v0, v1, v2, v3);
// }
// static void  glowUniform4uiv(GPUNIFORM4UIV fnptr, GLint  location, GLsizei  count, const GLuint * value) {
//   (*fnptr)(location, count, value);
// }
// static void  glowUniform4uivEXT(GPUNIFORM4UIVEXT fnptr, GLint  location, GLsizei  count, const GLuint * value) {
//   (*fnptr)(location, count, value);
// }
// static void  glowUniformBlockBinding(GPUNIFORMBLOCKBINDING fnptr, GLuint  program, GLuint  uniformBlockIndex, GLuint  uniformBlockBinding) {
//   (*fnptr)(program, uniformBlockIndex, uniformBlockBinding);
// }
// static void  glowUniformBufferEXT(GPUNIFORMBUFFEREXT fnptr, GLuint  program, GLint  location, GLuint  buffer) {
//   (*fnptr)(program, location, buffer);
// }
// static void  glowUniformHandleui64ARB(GPUNIFORMHANDLEUI64ARB fnptr, GLint  location, GLuint64  value) {
//   (*fnptr)(location, value);
// }
// static void  glowUniformHandleui64NV(GPUNIFORMHANDLEUI64NV fnptr, GLint  location, GLuint64  value) {
//   (*fnptr)(location, value);
// }
// static void  glowUniformHandleui64vARB(GPUNIFORMHANDLEUI64VARB fnptr, GLint  location, GLsizei  count, const GLuint64 * value) {
//   (*fnptr)(location, count, value);
// }
// static void  glowUniformHandleui64vNV(GPUNIFORMHANDLEUI64VNV fnptr, GLint  location, GLsizei  count, const GLuint64 * value) {
//   (*fnptr)(location, count, value);
// }
// static void  glowUniformMatrix2dv(GPUNIFORMMATRIX2DV fnptr, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value) {
//   (*fnptr)(location, count, transpose, value);
// }
// static void  glowUniformMatrix2fv(GPUNIFORMMATRIX2FV fnptr, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value) {
//   (*fnptr)(location, count, transpose, value);
// }
// static void  glowUniformMatrix2fvARB(GPUNIFORMMATRIX2FVARB fnptr, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value) {
//   (*fnptr)(location, count, transpose, value);
// }
// static void  glowUniformMatrix2x3dv(GPUNIFORMMATRIX2X3DV fnptr, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value) {
//   (*fnptr)(location, count, transpose, value);
// }
// static void  glowUniformMatrix2x3fv(GPUNIFORMMATRIX2X3FV fnptr, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value) {
//   (*fnptr)(location, count, transpose, value);
// }
// static void  glowUniformMatrix2x4dv(GPUNIFORMMATRIX2X4DV fnptr, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value) {
//   (*fnptr)(location, count, transpose, value);
// }
// static void  glowUniformMatrix2x4fv(GPUNIFORMMATRIX2X4FV fnptr, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value) {
//   (*fnptr)(location, count, transpose, value);
// }
// static void  glowUniformMatrix3dv(GPUNIFORMMATRIX3DV fnptr, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value) {
//   (*fnptr)(location, count, transpose, value);
// }
// static void  glowUniformMatrix3fv(GPUNIFORMMATRIX3FV fnptr, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value) {
//   (*fnptr)(location, count, transpose, value);
// }
// static void  glowUniformMatrix3fvARB(GPUNIFORMMATRIX3FVARB fnptr, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value) {
//   (*fnptr)(location, count, transpose, value);
// }
// static void  glowUniformMatrix3x2dv(GPUNIFORMMATRIX3X2DV fnptr, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value) {
//   (*fnptr)(location, count, transpose, value);
// }
// static void  glowUniformMatrix3x2fv(GPUNIFORMMATRIX3X2FV fnptr, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value) {
//   (*fnptr)(location, count, transpose, value);
// }
// static void  glowUniformMatrix3x4dv(GPUNIFORMMATRIX3X4DV fnptr, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value) {
//   (*fnptr)(location, count, transpose, value);
// }
// static void  glowUniformMatrix3x4fv(GPUNIFORMMATRIX3X4FV fnptr, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value) {
//   (*fnptr)(location, count, transpose, value);
// }
// static void  glowUniformMatrix4dv(GPUNIFORMMATRIX4DV fnptr, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value) {
//   (*fnptr)(location, count, transpose, value);
// }
// static void  glowUniformMatrix4fv(GPUNIFORMMATRIX4FV fnptr, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value) {
//   (*fnptr)(location, count, transpose, value);
// }
// static void  glowUniformMatrix4fvARB(GPUNIFORMMATRIX4FVARB fnptr, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value) {
//   (*fnptr)(location, count, transpose, value);
// }
// static void  glowUniformMatrix4x2dv(GPUNIFORMMATRIX4X2DV fnptr, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value) {
//   (*fnptr)(location, count, transpose, value);
// }
// static void  glowUniformMatrix4x2fv(GPUNIFORMMATRIX4X2FV fnptr, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value) {
//   (*fnptr)(location, count, transpose, value);
// }
// static void  glowUniformMatrix4x3dv(GPUNIFORMMATRIX4X3DV fnptr, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value) {
//   (*fnptr)(location, count, transpose, value);
// }
// static void  glowUniformMatrix4x3fv(GPUNIFORMMATRIX4X3FV fnptr, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value) {
//   (*fnptr)(location, count, transpose, value);
// }
// static void  glowUniformSubroutinesuiv(GPUNIFORMSUBROUTINESUIV fnptr, GLenum  shadertype, GLsizei  count, const GLuint * indices) {
//   (*fnptr)(shadertype, count, indices);
// }
// static void  glowUniformui64NV(GPUNIFORMUI64NV fnptr, GLint  location, GLuint64EXT  value) {
//   (*fnptr)(location, value);
// }
// static void  glowUniformui64vNV(GPUNIFORMUI64VNV fnptr, GLint  location, GLsizei  count, const GLuint64EXT * value) {
//   (*fnptr)(location, count, value);
// }
// static void  glowUnlockArraysEXT(GPUNLOCKARRAYSEXT fnptr) {
//   (*fnptr)();
// }
// static GLboolean  glowUnmapBuffer(GPUNMAPBUFFER fnptr, GLenum  target) {
//   return (*fnptr)(target);
// }
// static GLboolean  glowUnmapBufferARB(GPUNMAPBUFFERARB fnptr, GLenum  target) {
//   return (*fnptr)(target);
// }
// static GLboolean  glowUnmapNamedBufferEXT(GPUNMAPNAMEDBUFFEREXT fnptr, GLuint  buffer) {
//   return (*fnptr)(buffer);
// }
// static void  glowUnmapObjectBufferATI(GPUNMAPOBJECTBUFFERATI fnptr, GLuint  buffer) {
//   (*fnptr)(buffer);
// }
// static void  glowUnmapTexture2DINTEL(GPUNMAPTEXTURE2DINTEL fnptr, GLuint  texture, GLint  level) {
//   (*fnptr)(texture, level);
// }
// static void  glowUpdateObjectBufferATI(GPUPDATEOBJECTBUFFERATI fnptr, GLuint  buffer, GLuint  offset, GLsizei  size, const void * pointer, GLenum  preserve) {
//   (*fnptr)(buffer, offset, size, pointer, preserve);
// }
// static void  glowUseProgram(GPUSEPROGRAM fnptr, GLuint  program) {
//   (*fnptr)(program);
// }
// static void  glowUseProgramObjectARB(GPUSEPROGRAMOBJECTARB fnptr, GLhandleARB  programObj) {
//   (*fnptr)(programObj);
// }
// static void  glowUseProgramStages(GPUSEPROGRAMSTAGES fnptr, GLuint  pipeline, GLbitfield  stages, GLuint  program) {
//   (*fnptr)(pipeline, stages, program);
// }
// static void  glowUseProgramStagesEXT(GPUSEPROGRAMSTAGESEXT fnptr, GLuint  pipeline, GLbitfield  stages, GLuint  program) {
//   (*fnptr)(pipeline, stages, program);
// }
// static void  glowUseShaderProgramEXT(GPUSESHADERPROGRAMEXT fnptr, GLenum  type, GLuint  program) {
//   (*fnptr)(type, program);
// }
// static void  glowVDPAUFiniNV(GPVDPAUFININV fnptr) {
//   (*fnptr)();
// }
// static void  glowVDPAUGetSurfaceivNV(GPVDPAUGETSURFACEIVNV fnptr, GLvdpauSurfaceNV  surface, GLenum  pname, GLsizei  bufSize, GLsizei * length, GLint * values) {
//   (*fnptr)(surface, pname, bufSize, length, values);
// }
// static void  glowVDPAUInitNV(GPVDPAUINITNV fnptr, const void * vdpDevice, const void * getProcAddress) {
//   (*fnptr)(vdpDevice, getProcAddress);
// }
// static GLboolean  glowVDPAUIsSurfaceNV(GPVDPAUISSURFACENV fnptr, GLvdpauSurfaceNV  surface) {
//   return (*fnptr)(surface);
// }
// static void  glowVDPAUMapSurfacesNV(GPVDPAUMAPSURFACESNV fnptr, GLsizei  numSurfaces, const GLvdpauSurfaceNV * surfaces) {
//   (*fnptr)(numSurfaces, surfaces);
// }
// static GLvdpauSurfaceNV  glowVDPAURegisterOutputSurfaceNV(GPVDPAUREGISTEROUTPUTSURFACENV fnptr, const void * vdpSurface, GLenum  target, GLsizei  numTextureNames, const GLuint * textureNames) {
//   return (*fnptr)(vdpSurface, target, numTextureNames, textureNames);
// }
// static GLvdpauSurfaceNV  glowVDPAURegisterVideoSurfaceNV(GPVDPAUREGISTERVIDEOSURFACENV fnptr, const void * vdpSurface, GLenum  target, GLsizei  numTextureNames, const GLuint * textureNames) {
//   return (*fnptr)(vdpSurface, target, numTextureNames, textureNames);
// }
// static void  glowVDPAUSurfaceAccessNV(GPVDPAUSURFACEACCESSNV fnptr, GLvdpauSurfaceNV  surface, GLenum  access) {
//   (*fnptr)(surface, access);
// }
// static void  glowVDPAUUnmapSurfacesNV(GPVDPAUUNMAPSURFACESNV fnptr, GLsizei  numSurface, const GLvdpauSurfaceNV * surfaces) {
//   (*fnptr)(numSurface, surfaces);
// }
// static void  glowVDPAUUnregisterSurfaceNV(GPVDPAUUNREGISTERSURFACENV fnptr, GLvdpauSurfaceNV  surface) {
//   (*fnptr)(surface);
// }
// static void  glowValidateProgram(GPVALIDATEPROGRAM fnptr, GLuint  program) {
//   (*fnptr)(program);
// }
// static void  glowValidateProgramARB(GPVALIDATEPROGRAMARB fnptr, GLhandleARB  programObj) {
//   (*fnptr)(programObj);
// }
// static void  glowValidateProgramPipeline(GPVALIDATEPROGRAMPIPELINE fnptr, GLuint  pipeline) {
//   (*fnptr)(pipeline);
// }
// static void  glowValidateProgramPipelineEXT(GPVALIDATEPROGRAMPIPELINEEXT fnptr, GLuint  pipeline) {
//   (*fnptr)(pipeline);
// }
// static void  glowVariantArrayObjectATI(GPVARIANTARRAYOBJECTATI fnptr, GLuint  id, GLenum  type, GLsizei  stride, GLuint  buffer, GLuint  offset) {
//   (*fnptr)(id, type, stride, buffer, offset);
// }
// static void  glowVariantPointerEXT(GPVARIANTPOINTEREXT fnptr, GLuint  id, GLenum  type, GLuint  stride, const void * addr) {
//   (*fnptr)(id, type, stride, addr);
// }
// static void  glowVariantbvEXT(GPVARIANTBVEXT fnptr, GLuint  id, const GLbyte * addr) {
//   (*fnptr)(id, addr);
// }
// static void  glowVariantdvEXT(GPVARIANTDVEXT fnptr, GLuint  id, const GLdouble * addr) {
//   (*fnptr)(id, addr);
// }
// static void  glowVariantfvEXT(GPVARIANTFVEXT fnptr, GLuint  id, const GLfloat * addr) {
//   (*fnptr)(id, addr);
// }
// static void  glowVariantivEXT(GPVARIANTIVEXT fnptr, GLuint  id, const GLint * addr) {
//   (*fnptr)(id, addr);
// }
// static void  glowVariantsvEXT(GPVARIANTSVEXT fnptr, GLuint  id, const GLshort * addr) {
//   (*fnptr)(id, addr);
// }
// static void  glowVariantubvEXT(GPVARIANTUBVEXT fnptr, GLuint  id, const GLubyte * addr) {
//   (*fnptr)(id, addr);
// }
// static void  glowVariantuivEXT(GPVARIANTUIVEXT fnptr, GLuint  id, const GLuint * addr) {
//   (*fnptr)(id, addr);
// }
// static void  glowVariantusvEXT(GPVARIANTUSVEXT fnptr, GLuint  id, const GLushort * addr) {
//   (*fnptr)(id, addr);
// }
// static void  glowVertex2bOES(GPVERTEX2BOES fnptr, GLbyte  x, GLbyte  y) {
//   (*fnptr)(x, y);
// }
// static void  glowVertex2bvOES(GPVERTEX2BVOES fnptr, const GLbyte * coords) {
//   (*fnptr)(coords);
// }
// static void  glowVertex2hNV(GPVERTEX2HNV fnptr, GLhalfNV  x, GLhalfNV  y) {
//   (*fnptr)(x, y);
// }
// static void  glowVertex2hvNV(GPVERTEX2HVNV fnptr, const GLhalfNV * v) {
//   (*fnptr)(v);
// }
// static void  glowVertex2xOES(GPVERTEX2XOES fnptr, GLfixed  x) {
//   (*fnptr)(x);
// }
// static void  glowVertex2xvOES(GPVERTEX2XVOES fnptr, const GLfixed * coords) {
//   (*fnptr)(coords);
// }
// static void  glowVertex3bOES(GPVERTEX3BOES fnptr, GLbyte  x, GLbyte  y, GLbyte  z) {
//   (*fnptr)(x, y, z);
// }
// static void  glowVertex3bvOES(GPVERTEX3BVOES fnptr, const GLbyte * coords) {
//   (*fnptr)(coords);
// }
// static void  glowVertex3hNV(GPVERTEX3HNV fnptr, GLhalfNV  x, GLhalfNV  y, GLhalfNV  z) {
//   (*fnptr)(x, y, z);
// }
// static void  glowVertex3hvNV(GPVERTEX3HVNV fnptr, const GLhalfNV * v) {
//   (*fnptr)(v);
// }
// static void  glowVertex3xOES(GPVERTEX3XOES fnptr, GLfixed  x, GLfixed  y) {
//   (*fnptr)(x, y);
// }
// static void  glowVertex3xvOES(GPVERTEX3XVOES fnptr, const GLfixed * coords) {
//   (*fnptr)(coords);
// }
// static void  glowVertex4bOES(GPVERTEX4BOES fnptr, GLbyte  x, GLbyte  y, GLbyte  z, GLbyte  w) {
//   (*fnptr)(x, y, z, w);
// }
// static void  glowVertex4bvOES(GPVERTEX4BVOES fnptr, const GLbyte * coords) {
//   (*fnptr)(coords);
// }
// static void  glowVertex4hNV(GPVERTEX4HNV fnptr, GLhalfNV  x, GLhalfNV  y, GLhalfNV  z, GLhalfNV  w) {
//   (*fnptr)(x, y, z, w);
// }
// static void  glowVertex4hvNV(GPVERTEX4HVNV fnptr, const GLhalfNV * v) {
//   (*fnptr)(v);
// }
// static void  glowVertex4xOES(GPVERTEX4XOES fnptr, GLfixed  x, GLfixed  y, GLfixed  z) {
//   (*fnptr)(x, y, z);
// }
// static void  glowVertex4xvOES(GPVERTEX4XVOES fnptr, const GLfixed * coords) {
//   (*fnptr)(coords);
// }
// static void  glowVertexArrayBindVertexBufferEXT(GPVERTEXARRAYBINDVERTEXBUFFEREXT fnptr, GLuint  vaobj, GLuint  bindingindex, GLuint  buffer, GLintptr  offset, GLsizei  stride) {
//   (*fnptr)(vaobj, bindingindex, buffer, offset, stride);
// }
// static void  glowVertexArrayColorOffsetEXT(GPVERTEXARRAYCOLOROFFSETEXT fnptr, GLuint  vaobj, GLuint  buffer, GLint  size, GLenum  type, GLsizei  stride, GLintptr  offset) {
//   (*fnptr)(vaobj, buffer, size, type, stride, offset);
// }
// static void  glowVertexArrayEdgeFlagOffsetEXT(GPVERTEXARRAYEDGEFLAGOFFSETEXT fnptr, GLuint  vaobj, GLuint  buffer, GLsizei  stride, GLintptr  offset) {
//   (*fnptr)(vaobj, buffer, stride, offset);
// }
// static void  glowVertexArrayFogCoordOffsetEXT(GPVERTEXARRAYFOGCOORDOFFSETEXT fnptr, GLuint  vaobj, GLuint  buffer, GLenum  type, GLsizei  stride, GLintptr  offset) {
//   (*fnptr)(vaobj, buffer, type, stride, offset);
// }
// static void  glowVertexArrayIndexOffsetEXT(GPVERTEXARRAYINDEXOFFSETEXT fnptr, GLuint  vaobj, GLuint  buffer, GLenum  type, GLsizei  stride, GLintptr  offset) {
//   (*fnptr)(vaobj, buffer, type, stride, offset);
// }
// static void  glowVertexArrayMultiTexCoordOffsetEXT(GPVERTEXARRAYMULTITEXCOORDOFFSETEXT fnptr, GLuint  vaobj, GLuint  buffer, GLenum  texunit, GLint  size, GLenum  type, GLsizei  stride, GLintptr  offset) {
//   (*fnptr)(vaobj, buffer, texunit, size, type, stride, offset);
// }
// static void  glowVertexArrayNormalOffsetEXT(GPVERTEXARRAYNORMALOFFSETEXT fnptr, GLuint  vaobj, GLuint  buffer, GLenum  type, GLsizei  stride, GLintptr  offset) {
//   (*fnptr)(vaobj, buffer, type, stride, offset);
// }
// static void  glowVertexArrayParameteriAPPLE(GPVERTEXARRAYPARAMETERIAPPLE fnptr, GLenum  pname, GLint  param) {
//   (*fnptr)(pname, param);
// }
// static void  glowVertexArrayRangeAPPLE(GPVERTEXARRAYRANGEAPPLE fnptr, GLsizei  length, void * pointer) {
//   (*fnptr)(length, pointer);
// }
// static void  glowVertexArrayRangeNV(GPVERTEXARRAYRANGENV fnptr, GLsizei  length, const void * pointer) {
//   (*fnptr)(length, pointer);
// }
// static void  glowVertexArraySecondaryColorOffsetEXT(GPVERTEXARRAYSECONDARYCOLOROFFSETEXT fnptr, GLuint  vaobj, GLuint  buffer, GLint  size, GLenum  type, GLsizei  stride, GLintptr  offset) {
//   (*fnptr)(vaobj, buffer, size, type, stride, offset);
// }
// static void  glowVertexArrayTexCoordOffsetEXT(GPVERTEXARRAYTEXCOORDOFFSETEXT fnptr, GLuint  vaobj, GLuint  buffer, GLint  size, GLenum  type, GLsizei  stride, GLintptr  offset) {
//   (*fnptr)(vaobj, buffer, size, type, stride, offset);
// }
// static void  glowVertexArrayVertexAttribBindingEXT(GPVERTEXARRAYVERTEXATTRIBBINDINGEXT fnptr, GLuint  vaobj, GLuint  attribindex, GLuint  bindingindex) {
//   (*fnptr)(vaobj, attribindex, bindingindex);
// }
// static void  glowVertexArrayVertexAttribDivisorEXT(GPVERTEXARRAYVERTEXATTRIBDIVISOREXT fnptr, GLuint  vaobj, GLuint  index, GLuint  divisor) {
//   (*fnptr)(vaobj, index, divisor);
// }
// static void  glowVertexArrayVertexAttribFormatEXT(GPVERTEXARRAYVERTEXATTRIBFORMATEXT fnptr, GLuint  vaobj, GLuint  attribindex, GLint  size, GLenum  type, GLboolean  normalized, GLuint  relativeoffset) {
//   (*fnptr)(vaobj, attribindex, size, type, normalized, relativeoffset);
// }
// static void  glowVertexArrayVertexAttribIFormatEXT(GPVERTEXARRAYVERTEXATTRIBIFORMATEXT fnptr, GLuint  vaobj, GLuint  attribindex, GLint  size, GLenum  type, GLuint  relativeoffset) {
//   (*fnptr)(vaobj, attribindex, size, type, relativeoffset);
// }
// static void  glowVertexArrayVertexAttribIOffsetEXT(GPVERTEXARRAYVERTEXATTRIBIOFFSETEXT fnptr, GLuint  vaobj, GLuint  buffer, GLuint  index, GLint  size, GLenum  type, GLsizei  stride, GLintptr  offset) {
//   (*fnptr)(vaobj, buffer, index, size, type, stride, offset);
// }
// static void  glowVertexArrayVertexAttribLFormatEXT(GPVERTEXARRAYVERTEXATTRIBLFORMATEXT fnptr, GLuint  vaobj, GLuint  attribindex, GLint  size, GLenum  type, GLuint  relativeoffset) {
//   (*fnptr)(vaobj, attribindex, size, type, relativeoffset);
// }
// static void  glowVertexArrayVertexAttribLOffsetEXT(GPVERTEXARRAYVERTEXATTRIBLOFFSETEXT fnptr, GLuint  vaobj, GLuint  buffer, GLuint  index, GLint  size, GLenum  type, GLsizei  stride, GLintptr  offset) {
//   (*fnptr)(vaobj, buffer, index, size, type, stride, offset);
// }
// static void  glowVertexArrayVertexAttribOffsetEXT(GPVERTEXARRAYVERTEXATTRIBOFFSETEXT fnptr, GLuint  vaobj, GLuint  buffer, GLuint  index, GLint  size, GLenum  type, GLboolean  normalized, GLsizei  stride, GLintptr  offset) {
//   (*fnptr)(vaobj, buffer, index, size, type, normalized, stride, offset);
// }
// static void  glowVertexArrayVertexBindingDivisorEXT(GPVERTEXARRAYVERTEXBINDINGDIVISOREXT fnptr, GLuint  vaobj, GLuint  bindingindex, GLuint  divisor) {
//   (*fnptr)(vaobj, bindingindex, divisor);
// }
// static void  glowVertexArrayVertexOffsetEXT(GPVERTEXARRAYVERTEXOFFSETEXT fnptr, GLuint  vaobj, GLuint  buffer, GLint  size, GLenum  type, GLsizei  stride, GLintptr  offset) {
//   (*fnptr)(vaobj, buffer, size, type, stride, offset);
// }
// static void  glowVertexAttrib1d(GPVERTEXATTRIB1D fnptr, GLuint  index, GLdouble  x) {
//   (*fnptr)(index, x);
// }
// static void  glowVertexAttrib1dARB(GPVERTEXATTRIB1DARB fnptr, GLuint  index, GLdouble  x) {
//   (*fnptr)(index, x);
// }
// static void  glowVertexAttrib1dNV(GPVERTEXATTRIB1DNV fnptr, GLuint  index, GLdouble  x) {
//   (*fnptr)(index, x);
// }
// static void  glowVertexAttrib1dv(GPVERTEXATTRIB1DV fnptr, GLuint  index, const GLdouble * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttrib1dvARB(GPVERTEXATTRIB1DVARB fnptr, GLuint  index, const GLdouble * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttrib1dvNV(GPVERTEXATTRIB1DVNV fnptr, GLuint  index, const GLdouble * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttrib1f(GPVERTEXATTRIB1F fnptr, GLuint  index, GLfloat  x) {
//   (*fnptr)(index, x);
// }
// static void  glowVertexAttrib1fARB(GPVERTEXATTRIB1FARB fnptr, GLuint  index, GLfloat  x) {
//   (*fnptr)(index, x);
// }
// static void  glowVertexAttrib1fNV(GPVERTEXATTRIB1FNV fnptr, GLuint  index, GLfloat  x) {
//   (*fnptr)(index, x);
// }
// static void  glowVertexAttrib1fv(GPVERTEXATTRIB1FV fnptr, GLuint  index, const GLfloat * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttrib1fvARB(GPVERTEXATTRIB1FVARB fnptr, GLuint  index, const GLfloat * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttrib1fvNV(GPVERTEXATTRIB1FVNV fnptr, GLuint  index, const GLfloat * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttrib1hNV(GPVERTEXATTRIB1HNV fnptr, GLuint  index, GLhalfNV  x) {
//   (*fnptr)(index, x);
// }
// static void  glowVertexAttrib1hvNV(GPVERTEXATTRIB1HVNV fnptr, GLuint  index, const GLhalfNV * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttrib1s(GPVERTEXATTRIB1S fnptr, GLuint  index, GLshort  x) {
//   (*fnptr)(index, x);
// }
// static void  glowVertexAttrib1sARB(GPVERTEXATTRIB1SARB fnptr, GLuint  index, GLshort  x) {
//   (*fnptr)(index, x);
// }
// static void  glowVertexAttrib1sNV(GPVERTEXATTRIB1SNV fnptr, GLuint  index, GLshort  x) {
//   (*fnptr)(index, x);
// }
// static void  glowVertexAttrib1sv(GPVERTEXATTRIB1SV fnptr, GLuint  index, const GLshort * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttrib1svARB(GPVERTEXATTRIB1SVARB fnptr, GLuint  index, const GLshort * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttrib1svNV(GPVERTEXATTRIB1SVNV fnptr, GLuint  index, const GLshort * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttrib2d(GPVERTEXATTRIB2D fnptr, GLuint  index, GLdouble  x, GLdouble  y) {
//   (*fnptr)(index, x, y);
// }
// static void  glowVertexAttrib2dARB(GPVERTEXATTRIB2DARB fnptr, GLuint  index, GLdouble  x, GLdouble  y) {
//   (*fnptr)(index, x, y);
// }
// static void  glowVertexAttrib2dNV(GPVERTEXATTRIB2DNV fnptr, GLuint  index, GLdouble  x, GLdouble  y) {
//   (*fnptr)(index, x, y);
// }
// static void  glowVertexAttrib2dv(GPVERTEXATTRIB2DV fnptr, GLuint  index, const GLdouble * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttrib2dvARB(GPVERTEXATTRIB2DVARB fnptr, GLuint  index, const GLdouble * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttrib2dvNV(GPVERTEXATTRIB2DVNV fnptr, GLuint  index, const GLdouble * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttrib2f(GPVERTEXATTRIB2F fnptr, GLuint  index, GLfloat  x, GLfloat  y) {
//   (*fnptr)(index, x, y);
// }
// static void  glowVertexAttrib2fARB(GPVERTEXATTRIB2FARB fnptr, GLuint  index, GLfloat  x, GLfloat  y) {
//   (*fnptr)(index, x, y);
// }
// static void  glowVertexAttrib2fNV(GPVERTEXATTRIB2FNV fnptr, GLuint  index, GLfloat  x, GLfloat  y) {
//   (*fnptr)(index, x, y);
// }
// static void  glowVertexAttrib2fv(GPVERTEXATTRIB2FV fnptr, GLuint  index, const GLfloat * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttrib2fvARB(GPVERTEXATTRIB2FVARB fnptr, GLuint  index, const GLfloat * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttrib2fvNV(GPVERTEXATTRIB2FVNV fnptr, GLuint  index, const GLfloat * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttrib2hNV(GPVERTEXATTRIB2HNV fnptr, GLuint  index, GLhalfNV  x, GLhalfNV  y) {
//   (*fnptr)(index, x, y);
// }
// static void  glowVertexAttrib2hvNV(GPVERTEXATTRIB2HVNV fnptr, GLuint  index, const GLhalfNV * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttrib2s(GPVERTEXATTRIB2S fnptr, GLuint  index, GLshort  x, GLshort  y) {
//   (*fnptr)(index, x, y);
// }
// static void  glowVertexAttrib2sARB(GPVERTEXATTRIB2SARB fnptr, GLuint  index, GLshort  x, GLshort  y) {
//   (*fnptr)(index, x, y);
// }
// static void  glowVertexAttrib2sNV(GPVERTEXATTRIB2SNV fnptr, GLuint  index, GLshort  x, GLshort  y) {
//   (*fnptr)(index, x, y);
// }
// static void  glowVertexAttrib2sv(GPVERTEXATTRIB2SV fnptr, GLuint  index, const GLshort * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttrib2svARB(GPVERTEXATTRIB2SVARB fnptr, GLuint  index, const GLshort * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttrib2svNV(GPVERTEXATTRIB2SVNV fnptr, GLuint  index, const GLshort * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttrib3d(GPVERTEXATTRIB3D fnptr, GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z) {
//   (*fnptr)(index, x, y, z);
// }
// static void  glowVertexAttrib3dARB(GPVERTEXATTRIB3DARB fnptr, GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z) {
//   (*fnptr)(index, x, y, z);
// }
// static void  glowVertexAttrib3dNV(GPVERTEXATTRIB3DNV fnptr, GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z) {
//   (*fnptr)(index, x, y, z);
// }
// static void  glowVertexAttrib3dv(GPVERTEXATTRIB3DV fnptr, GLuint  index, const GLdouble * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttrib3dvARB(GPVERTEXATTRIB3DVARB fnptr, GLuint  index, const GLdouble * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttrib3dvNV(GPVERTEXATTRIB3DVNV fnptr, GLuint  index, const GLdouble * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttrib3f(GPVERTEXATTRIB3F fnptr, GLuint  index, GLfloat  x, GLfloat  y, GLfloat  z) {
//   (*fnptr)(index, x, y, z);
// }
// static void  glowVertexAttrib3fARB(GPVERTEXATTRIB3FARB fnptr, GLuint  index, GLfloat  x, GLfloat  y, GLfloat  z) {
//   (*fnptr)(index, x, y, z);
// }
// static void  glowVertexAttrib3fNV(GPVERTEXATTRIB3FNV fnptr, GLuint  index, GLfloat  x, GLfloat  y, GLfloat  z) {
//   (*fnptr)(index, x, y, z);
// }
// static void  glowVertexAttrib3fv(GPVERTEXATTRIB3FV fnptr, GLuint  index, const GLfloat * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttrib3fvARB(GPVERTEXATTRIB3FVARB fnptr, GLuint  index, const GLfloat * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttrib3fvNV(GPVERTEXATTRIB3FVNV fnptr, GLuint  index, const GLfloat * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttrib3hNV(GPVERTEXATTRIB3HNV fnptr, GLuint  index, GLhalfNV  x, GLhalfNV  y, GLhalfNV  z) {
//   (*fnptr)(index, x, y, z);
// }
// static void  glowVertexAttrib3hvNV(GPVERTEXATTRIB3HVNV fnptr, GLuint  index, const GLhalfNV * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttrib3s(GPVERTEXATTRIB3S fnptr, GLuint  index, GLshort  x, GLshort  y, GLshort  z) {
//   (*fnptr)(index, x, y, z);
// }
// static void  glowVertexAttrib3sARB(GPVERTEXATTRIB3SARB fnptr, GLuint  index, GLshort  x, GLshort  y, GLshort  z) {
//   (*fnptr)(index, x, y, z);
// }
// static void  glowVertexAttrib3sNV(GPVERTEXATTRIB3SNV fnptr, GLuint  index, GLshort  x, GLshort  y, GLshort  z) {
//   (*fnptr)(index, x, y, z);
// }
// static void  glowVertexAttrib3sv(GPVERTEXATTRIB3SV fnptr, GLuint  index, const GLshort * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttrib3svARB(GPVERTEXATTRIB3SVARB fnptr, GLuint  index, const GLshort * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttrib3svNV(GPVERTEXATTRIB3SVNV fnptr, GLuint  index, const GLshort * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttrib4Nbv(GPVERTEXATTRIB4NBV fnptr, GLuint  index, const GLbyte * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttrib4NbvARB(GPVERTEXATTRIB4NBVARB fnptr, GLuint  index, const GLbyte * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttrib4Niv(GPVERTEXATTRIB4NIV fnptr, GLuint  index, const GLint * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttrib4NivARB(GPVERTEXATTRIB4NIVARB fnptr, GLuint  index, const GLint * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttrib4Nsv(GPVERTEXATTRIB4NSV fnptr, GLuint  index, const GLshort * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttrib4NsvARB(GPVERTEXATTRIB4NSVARB fnptr, GLuint  index, const GLshort * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttrib4Nub(GPVERTEXATTRIB4NUB fnptr, GLuint  index, GLubyte  x, GLubyte  y, GLubyte  z, GLubyte  w) {
//   (*fnptr)(index, x, y, z, w);
// }
// static void  glowVertexAttrib4NubARB(GPVERTEXATTRIB4NUBARB fnptr, GLuint  index, GLubyte  x, GLubyte  y, GLubyte  z, GLubyte  w) {
//   (*fnptr)(index, x, y, z, w);
// }
// static void  glowVertexAttrib4Nubv(GPVERTEXATTRIB4NUBV fnptr, GLuint  index, const GLubyte * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttrib4NubvARB(GPVERTEXATTRIB4NUBVARB fnptr, GLuint  index, const GLubyte * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttrib4Nuiv(GPVERTEXATTRIB4NUIV fnptr, GLuint  index, const GLuint * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttrib4NuivARB(GPVERTEXATTRIB4NUIVARB fnptr, GLuint  index, const GLuint * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttrib4Nusv(GPVERTEXATTRIB4NUSV fnptr, GLuint  index, const GLushort * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttrib4NusvARB(GPVERTEXATTRIB4NUSVARB fnptr, GLuint  index, const GLushort * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttrib4bv(GPVERTEXATTRIB4BV fnptr, GLuint  index, const GLbyte * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttrib4bvARB(GPVERTEXATTRIB4BVARB fnptr, GLuint  index, const GLbyte * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttrib4d(GPVERTEXATTRIB4D fnptr, GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w) {
//   (*fnptr)(index, x, y, z, w);
// }
// static void  glowVertexAttrib4dARB(GPVERTEXATTRIB4DARB fnptr, GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w) {
//   (*fnptr)(index, x, y, z, w);
// }
// static void  glowVertexAttrib4dNV(GPVERTEXATTRIB4DNV fnptr, GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w) {
//   (*fnptr)(index, x, y, z, w);
// }
// static void  glowVertexAttrib4dv(GPVERTEXATTRIB4DV fnptr, GLuint  index, const GLdouble * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttrib4dvARB(GPVERTEXATTRIB4DVARB fnptr, GLuint  index, const GLdouble * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttrib4dvNV(GPVERTEXATTRIB4DVNV fnptr, GLuint  index, const GLdouble * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttrib4f(GPVERTEXATTRIB4F fnptr, GLuint  index, GLfloat  x, GLfloat  y, GLfloat  z, GLfloat  w) {
//   (*fnptr)(index, x, y, z, w);
// }
// static void  glowVertexAttrib4fARB(GPVERTEXATTRIB4FARB fnptr, GLuint  index, GLfloat  x, GLfloat  y, GLfloat  z, GLfloat  w) {
//   (*fnptr)(index, x, y, z, w);
// }
// static void  glowVertexAttrib4fNV(GPVERTEXATTRIB4FNV fnptr, GLuint  index, GLfloat  x, GLfloat  y, GLfloat  z, GLfloat  w) {
//   (*fnptr)(index, x, y, z, w);
// }
// static void  glowVertexAttrib4fv(GPVERTEXATTRIB4FV fnptr, GLuint  index, const GLfloat * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttrib4fvARB(GPVERTEXATTRIB4FVARB fnptr, GLuint  index, const GLfloat * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttrib4fvNV(GPVERTEXATTRIB4FVNV fnptr, GLuint  index, const GLfloat * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttrib4hNV(GPVERTEXATTRIB4HNV fnptr, GLuint  index, GLhalfNV  x, GLhalfNV  y, GLhalfNV  z, GLhalfNV  w) {
//   (*fnptr)(index, x, y, z, w);
// }
// static void  glowVertexAttrib4hvNV(GPVERTEXATTRIB4HVNV fnptr, GLuint  index, const GLhalfNV * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttrib4iv(GPVERTEXATTRIB4IV fnptr, GLuint  index, const GLint * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttrib4ivARB(GPVERTEXATTRIB4IVARB fnptr, GLuint  index, const GLint * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttrib4s(GPVERTEXATTRIB4S fnptr, GLuint  index, GLshort  x, GLshort  y, GLshort  z, GLshort  w) {
//   (*fnptr)(index, x, y, z, w);
// }
// static void  glowVertexAttrib4sARB(GPVERTEXATTRIB4SARB fnptr, GLuint  index, GLshort  x, GLshort  y, GLshort  z, GLshort  w) {
//   (*fnptr)(index, x, y, z, w);
// }
// static void  glowVertexAttrib4sNV(GPVERTEXATTRIB4SNV fnptr, GLuint  index, GLshort  x, GLshort  y, GLshort  z, GLshort  w) {
//   (*fnptr)(index, x, y, z, w);
// }
// static void  glowVertexAttrib4sv(GPVERTEXATTRIB4SV fnptr, GLuint  index, const GLshort * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttrib4svARB(GPVERTEXATTRIB4SVARB fnptr, GLuint  index, const GLshort * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttrib4svNV(GPVERTEXATTRIB4SVNV fnptr, GLuint  index, const GLshort * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttrib4ubNV(GPVERTEXATTRIB4UBNV fnptr, GLuint  index, GLubyte  x, GLubyte  y, GLubyte  z, GLubyte  w) {
//   (*fnptr)(index, x, y, z, w);
// }
// static void  glowVertexAttrib4ubv(GPVERTEXATTRIB4UBV fnptr, GLuint  index, const GLubyte * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttrib4ubvARB(GPVERTEXATTRIB4UBVARB fnptr, GLuint  index, const GLubyte * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttrib4ubvNV(GPVERTEXATTRIB4UBVNV fnptr, GLuint  index, const GLubyte * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttrib4uiv(GPVERTEXATTRIB4UIV fnptr, GLuint  index, const GLuint * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttrib4uivARB(GPVERTEXATTRIB4UIVARB fnptr, GLuint  index, const GLuint * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttrib4usv(GPVERTEXATTRIB4USV fnptr, GLuint  index, const GLushort * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttrib4usvARB(GPVERTEXATTRIB4USVARB fnptr, GLuint  index, const GLushort * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttribArrayObjectATI(GPVERTEXATTRIBARRAYOBJECTATI fnptr, GLuint  index, GLint  size, GLenum  type, GLboolean  normalized, GLsizei  stride, GLuint  buffer, GLuint  offset) {
//   (*fnptr)(index, size, type, normalized, stride, buffer, offset);
// }
// static void  glowVertexAttribBinding(GPVERTEXATTRIBBINDING fnptr, GLuint  attribindex, GLuint  bindingindex) {
//   (*fnptr)(attribindex, bindingindex);
// }
// static void  glowVertexAttribDivisor(GPVERTEXATTRIBDIVISOR fnptr, GLuint  index, GLuint  divisor) {
//   (*fnptr)(index, divisor);
// }
// static void  glowVertexAttribDivisorARB(GPVERTEXATTRIBDIVISORARB fnptr, GLuint  index, GLuint  divisor) {
//   (*fnptr)(index, divisor);
// }
// static void  glowVertexAttribFormat(GPVERTEXATTRIBFORMAT fnptr, GLuint  attribindex, GLint  size, GLenum  type, GLboolean  normalized, GLuint  relativeoffset) {
//   (*fnptr)(attribindex, size, type, normalized, relativeoffset);
// }
// static void  glowVertexAttribFormatNV(GPVERTEXATTRIBFORMATNV fnptr, GLuint  index, GLint  size, GLenum  type, GLboolean  normalized, GLsizei  stride) {
//   (*fnptr)(index, size, type, normalized, stride);
// }
// static void  glowVertexAttribI1i(GPVERTEXATTRIBI1I fnptr, GLuint  index, GLint  x) {
//   (*fnptr)(index, x);
// }
// static void  glowVertexAttribI1iEXT(GPVERTEXATTRIBI1IEXT fnptr, GLuint  index, GLint  x) {
//   (*fnptr)(index, x);
// }
// static void  glowVertexAttribI1iv(GPVERTEXATTRIBI1IV fnptr, GLuint  index, const GLint * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttribI1ivEXT(GPVERTEXATTRIBI1IVEXT fnptr, GLuint  index, const GLint * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttribI1ui(GPVERTEXATTRIBI1UI fnptr, GLuint  index, GLuint  x) {
//   (*fnptr)(index, x);
// }
// static void  glowVertexAttribI1uiEXT(GPVERTEXATTRIBI1UIEXT fnptr, GLuint  index, GLuint  x) {
//   (*fnptr)(index, x);
// }
// static void  glowVertexAttribI1uiv(GPVERTEXATTRIBI1UIV fnptr, GLuint  index, const GLuint * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttribI1uivEXT(GPVERTEXATTRIBI1UIVEXT fnptr, GLuint  index, const GLuint * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttribI2i(GPVERTEXATTRIBI2I fnptr, GLuint  index, GLint  x, GLint  y) {
//   (*fnptr)(index, x, y);
// }
// static void  glowVertexAttribI2iEXT(GPVERTEXATTRIBI2IEXT fnptr, GLuint  index, GLint  x, GLint  y) {
//   (*fnptr)(index, x, y);
// }
// static void  glowVertexAttribI2iv(GPVERTEXATTRIBI2IV fnptr, GLuint  index, const GLint * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttribI2ivEXT(GPVERTEXATTRIBI2IVEXT fnptr, GLuint  index, const GLint * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttribI2ui(GPVERTEXATTRIBI2UI fnptr, GLuint  index, GLuint  x, GLuint  y) {
//   (*fnptr)(index, x, y);
// }
// static void  glowVertexAttribI2uiEXT(GPVERTEXATTRIBI2UIEXT fnptr, GLuint  index, GLuint  x, GLuint  y) {
//   (*fnptr)(index, x, y);
// }
// static void  glowVertexAttribI2uiv(GPVERTEXATTRIBI2UIV fnptr, GLuint  index, const GLuint * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttribI2uivEXT(GPVERTEXATTRIBI2UIVEXT fnptr, GLuint  index, const GLuint * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttribI3i(GPVERTEXATTRIBI3I fnptr, GLuint  index, GLint  x, GLint  y, GLint  z) {
//   (*fnptr)(index, x, y, z);
// }
// static void  glowVertexAttribI3iEXT(GPVERTEXATTRIBI3IEXT fnptr, GLuint  index, GLint  x, GLint  y, GLint  z) {
//   (*fnptr)(index, x, y, z);
// }
// static void  glowVertexAttribI3iv(GPVERTEXATTRIBI3IV fnptr, GLuint  index, const GLint * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttribI3ivEXT(GPVERTEXATTRIBI3IVEXT fnptr, GLuint  index, const GLint * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttribI3ui(GPVERTEXATTRIBI3UI fnptr, GLuint  index, GLuint  x, GLuint  y, GLuint  z) {
//   (*fnptr)(index, x, y, z);
// }
// static void  glowVertexAttribI3uiEXT(GPVERTEXATTRIBI3UIEXT fnptr, GLuint  index, GLuint  x, GLuint  y, GLuint  z) {
//   (*fnptr)(index, x, y, z);
// }
// static void  glowVertexAttribI3uiv(GPVERTEXATTRIBI3UIV fnptr, GLuint  index, const GLuint * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttribI3uivEXT(GPVERTEXATTRIBI3UIVEXT fnptr, GLuint  index, const GLuint * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttribI4bv(GPVERTEXATTRIBI4BV fnptr, GLuint  index, const GLbyte * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttribI4bvEXT(GPVERTEXATTRIBI4BVEXT fnptr, GLuint  index, const GLbyte * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttribI4i(GPVERTEXATTRIBI4I fnptr, GLuint  index, GLint  x, GLint  y, GLint  z, GLint  w) {
//   (*fnptr)(index, x, y, z, w);
// }
// static void  glowVertexAttribI4iEXT(GPVERTEXATTRIBI4IEXT fnptr, GLuint  index, GLint  x, GLint  y, GLint  z, GLint  w) {
//   (*fnptr)(index, x, y, z, w);
// }
// static void  glowVertexAttribI4iv(GPVERTEXATTRIBI4IV fnptr, GLuint  index, const GLint * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttribI4ivEXT(GPVERTEXATTRIBI4IVEXT fnptr, GLuint  index, const GLint * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttribI4sv(GPVERTEXATTRIBI4SV fnptr, GLuint  index, const GLshort * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttribI4svEXT(GPVERTEXATTRIBI4SVEXT fnptr, GLuint  index, const GLshort * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttribI4ubv(GPVERTEXATTRIBI4UBV fnptr, GLuint  index, const GLubyte * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttribI4ubvEXT(GPVERTEXATTRIBI4UBVEXT fnptr, GLuint  index, const GLubyte * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttribI4ui(GPVERTEXATTRIBI4UI fnptr, GLuint  index, GLuint  x, GLuint  y, GLuint  z, GLuint  w) {
//   (*fnptr)(index, x, y, z, w);
// }
// static void  glowVertexAttribI4uiEXT(GPVERTEXATTRIBI4UIEXT fnptr, GLuint  index, GLuint  x, GLuint  y, GLuint  z, GLuint  w) {
//   (*fnptr)(index, x, y, z, w);
// }
// static void  glowVertexAttribI4uiv(GPVERTEXATTRIBI4UIV fnptr, GLuint  index, const GLuint * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttribI4uivEXT(GPVERTEXATTRIBI4UIVEXT fnptr, GLuint  index, const GLuint * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttribI4usv(GPVERTEXATTRIBI4USV fnptr, GLuint  index, const GLushort * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttribI4usvEXT(GPVERTEXATTRIBI4USVEXT fnptr, GLuint  index, const GLushort * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttribIFormat(GPVERTEXATTRIBIFORMAT fnptr, GLuint  attribindex, GLint  size, GLenum  type, GLuint  relativeoffset) {
//   (*fnptr)(attribindex, size, type, relativeoffset);
// }
// static void  glowVertexAttribIFormatNV(GPVERTEXATTRIBIFORMATNV fnptr, GLuint  index, GLint  size, GLenum  type, GLsizei  stride) {
//   (*fnptr)(index, size, type, stride);
// }
// static void  glowVertexAttribIPointer(GPVERTEXATTRIBIPOINTER fnptr, GLuint  index, GLint  size, GLenum  type, GLsizei  stride, const void * pointer) {
//   (*fnptr)(index, size, type, stride, pointer);
// }
// static void  glowVertexAttribIPointerEXT(GPVERTEXATTRIBIPOINTEREXT fnptr, GLuint  index, GLint  size, GLenum  type, GLsizei  stride, const void * pointer) {
//   (*fnptr)(index, size, type, stride, pointer);
// }
// static void  glowVertexAttribL1d(GPVERTEXATTRIBL1D fnptr, GLuint  index, GLdouble  x) {
//   (*fnptr)(index, x);
// }
// static void  glowVertexAttribL1dEXT(GPVERTEXATTRIBL1DEXT fnptr, GLuint  index, GLdouble  x) {
//   (*fnptr)(index, x);
// }
// static void  glowVertexAttribL1dv(GPVERTEXATTRIBL1DV fnptr, GLuint  index, const GLdouble * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttribL1dvEXT(GPVERTEXATTRIBL1DVEXT fnptr, GLuint  index, const GLdouble * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttribL1i64NV(GPVERTEXATTRIBL1I64NV fnptr, GLuint  index, GLint64EXT  x) {
//   (*fnptr)(index, x);
// }
// static void  glowVertexAttribL1i64vNV(GPVERTEXATTRIBL1I64VNV fnptr, GLuint  index, const GLint64EXT * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttribL1ui64ARB(GPVERTEXATTRIBL1UI64ARB fnptr, GLuint  index, GLuint64EXT  x) {
//   (*fnptr)(index, x);
// }
// static void  glowVertexAttribL1ui64NV(GPVERTEXATTRIBL1UI64NV fnptr, GLuint  index, GLuint64EXT  x) {
//   (*fnptr)(index, x);
// }
// static void  glowVertexAttribL1ui64vARB(GPVERTEXATTRIBL1UI64VARB fnptr, GLuint  index, const GLuint64EXT * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttribL1ui64vNV(GPVERTEXATTRIBL1UI64VNV fnptr, GLuint  index, const GLuint64EXT * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttribL2d(GPVERTEXATTRIBL2D fnptr, GLuint  index, GLdouble  x, GLdouble  y) {
//   (*fnptr)(index, x, y);
// }
// static void  glowVertexAttribL2dEXT(GPVERTEXATTRIBL2DEXT fnptr, GLuint  index, GLdouble  x, GLdouble  y) {
//   (*fnptr)(index, x, y);
// }
// static void  glowVertexAttribL2dv(GPVERTEXATTRIBL2DV fnptr, GLuint  index, const GLdouble * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttribL2dvEXT(GPVERTEXATTRIBL2DVEXT fnptr, GLuint  index, const GLdouble * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttribL2i64NV(GPVERTEXATTRIBL2I64NV fnptr, GLuint  index, GLint64EXT  x, GLint64EXT  y) {
//   (*fnptr)(index, x, y);
// }
// static void  glowVertexAttribL2i64vNV(GPVERTEXATTRIBL2I64VNV fnptr, GLuint  index, const GLint64EXT * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttribL2ui64NV(GPVERTEXATTRIBL2UI64NV fnptr, GLuint  index, GLuint64EXT  x, GLuint64EXT  y) {
//   (*fnptr)(index, x, y);
// }
// static void  glowVertexAttribL2ui64vNV(GPVERTEXATTRIBL2UI64VNV fnptr, GLuint  index, const GLuint64EXT * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttribL3d(GPVERTEXATTRIBL3D fnptr, GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z) {
//   (*fnptr)(index, x, y, z);
// }
// static void  glowVertexAttribL3dEXT(GPVERTEXATTRIBL3DEXT fnptr, GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z) {
//   (*fnptr)(index, x, y, z);
// }
// static void  glowVertexAttribL3dv(GPVERTEXATTRIBL3DV fnptr, GLuint  index, const GLdouble * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttribL3dvEXT(GPVERTEXATTRIBL3DVEXT fnptr, GLuint  index, const GLdouble * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttribL3i64NV(GPVERTEXATTRIBL3I64NV fnptr, GLuint  index, GLint64EXT  x, GLint64EXT  y, GLint64EXT  z) {
//   (*fnptr)(index, x, y, z);
// }
// static void  glowVertexAttribL3i64vNV(GPVERTEXATTRIBL3I64VNV fnptr, GLuint  index, const GLint64EXT * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttribL3ui64NV(GPVERTEXATTRIBL3UI64NV fnptr, GLuint  index, GLuint64EXT  x, GLuint64EXT  y, GLuint64EXT  z) {
//   (*fnptr)(index, x, y, z);
// }
// static void  glowVertexAttribL3ui64vNV(GPVERTEXATTRIBL3UI64VNV fnptr, GLuint  index, const GLuint64EXT * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttribL4d(GPVERTEXATTRIBL4D fnptr, GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w) {
//   (*fnptr)(index, x, y, z, w);
// }
// static void  glowVertexAttribL4dEXT(GPVERTEXATTRIBL4DEXT fnptr, GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w) {
//   (*fnptr)(index, x, y, z, w);
// }
// static void  glowVertexAttribL4dv(GPVERTEXATTRIBL4DV fnptr, GLuint  index, const GLdouble * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttribL4dvEXT(GPVERTEXATTRIBL4DVEXT fnptr, GLuint  index, const GLdouble * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttribL4i64NV(GPVERTEXATTRIBL4I64NV fnptr, GLuint  index, GLint64EXT  x, GLint64EXT  y, GLint64EXT  z, GLint64EXT  w) {
//   (*fnptr)(index, x, y, z, w);
// }
// static void  glowVertexAttribL4i64vNV(GPVERTEXATTRIBL4I64VNV fnptr, GLuint  index, const GLint64EXT * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttribL4ui64NV(GPVERTEXATTRIBL4UI64NV fnptr, GLuint  index, GLuint64EXT  x, GLuint64EXT  y, GLuint64EXT  z, GLuint64EXT  w) {
//   (*fnptr)(index, x, y, z, w);
// }
// static void  glowVertexAttribL4ui64vNV(GPVERTEXATTRIBL4UI64VNV fnptr, GLuint  index, const GLuint64EXT * v) {
//   (*fnptr)(index, v);
// }
// static void  glowVertexAttribLFormat(GPVERTEXATTRIBLFORMAT fnptr, GLuint  attribindex, GLint  size, GLenum  type, GLuint  relativeoffset) {
//   (*fnptr)(attribindex, size, type, relativeoffset);
// }
// static void  glowVertexAttribLFormatNV(GPVERTEXATTRIBLFORMATNV fnptr, GLuint  index, GLint  size, GLenum  type, GLsizei  stride) {
//   (*fnptr)(index, size, type, stride);
// }
// static void  glowVertexAttribLPointer(GPVERTEXATTRIBLPOINTER fnptr, GLuint  index, GLint  size, GLenum  type, GLsizei  stride, const void * pointer) {
//   (*fnptr)(index, size, type, stride, pointer);
// }
// static void  glowVertexAttribLPointerEXT(GPVERTEXATTRIBLPOINTEREXT fnptr, GLuint  index, GLint  size, GLenum  type, GLsizei  stride, const void * pointer) {
//   (*fnptr)(index, size, type, stride, pointer);
// }
// static void  glowVertexAttribP1ui(GPVERTEXATTRIBP1UI fnptr, GLuint  index, GLenum  type, GLboolean  normalized, GLuint  value) {
//   (*fnptr)(index, type, normalized, value);
// }
// static void  glowVertexAttribP1uiv(GPVERTEXATTRIBP1UIV fnptr, GLuint  index, GLenum  type, GLboolean  normalized, const GLuint * value) {
//   (*fnptr)(index, type, normalized, value);
// }
// static void  glowVertexAttribP2ui(GPVERTEXATTRIBP2UI fnptr, GLuint  index, GLenum  type, GLboolean  normalized, GLuint  value) {
//   (*fnptr)(index, type, normalized, value);
// }
// static void  glowVertexAttribP2uiv(GPVERTEXATTRIBP2UIV fnptr, GLuint  index, GLenum  type, GLboolean  normalized, const GLuint * value) {
//   (*fnptr)(index, type, normalized, value);
// }
// static void  glowVertexAttribP3ui(GPVERTEXATTRIBP3UI fnptr, GLuint  index, GLenum  type, GLboolean  normalized, GLuint  value) {
//   (*fnptr)(index, type, normalized, value);
// }
// static void  glowVertexAttribP3uiv(GPVERTEXATTRIBP3UIV fnptr, GLuint  index, GLenum  type, GLboolean  normalized, const GLuint * value) {
//   (*fnptr)(index, type, normalized, value);
// }
// static void  glowVertexAttribP4ui(GPVERTEXATTRIBP4UI fnptr, GLuint  index, GLenum  type, GLboolean  normalized, GLuint  value) {
//   (*fnptr)(index, type, normalized, value);
// }
// static void  glowVertexAttribP4uiv(GPVERTEXATTRIBP4UIV fnptr, GLuint  index, GLenum  type, GLboolean  normalized, const GLuint * value) {
//   (*fnptr)(index, type, normalized, value);
// }
// static void  glowVertexAttribParameteriAMD(GPVERTEXATTRIBPARAMETERIAMD fnptr, GLuint  index, GLenum  pname, GLint  param) {
//   (*fnptr)(index, pname, param);
// }
// static void  glowVertexAttribPointer(GPVERTEXATTRIBPOINTER fnptr, GLuint  index, GLint  size, GLenum  type, GLboolean  normalized, GLsizei  stride, const void * pointer) {
//   (*fnptr)(index, size, type, normalized, stride, pointer);
// }
// static void  glowVertexAttribPointerARB(GPVERTEXATTRIBPOINTERARB fnptr, GLuint  index, GLint  size, GLenum  type, GLboolean  normalized, GLsizei  stride, const void * pointer) {
//   (*fnptr)(index, size, type, normalized, stride, pointer);
// }
// static void  glowVertexAttribPointerNV(GPVERTEXATTRIBPOINTERNV fnptr, GLuint  index, GLint  fsize, GLenum  type, GLsizei  stride, const void * pointer) {
//   (*fnptr)(index, fsize, type, stride, pointer);
// }
// static void  glowVertexAttribs1dvNV(GPVERTEXATTRIBS1DVNV fnptr, GLuint  index, GLsizei  count, const GLdouble * v) {
//   (*fnptr)(index, count, v);
// }
// static void  glowVertexAttribs1fvNV(GPVERTEXATTRIBS1FVNV fnptr, GLuint  index, GLsizei  count, const GLfloat * v) {
//   (*fnptr)(index, count, v);
// }
// static void  glowVertexAttribs1hvNV(GPVERTEXATTRIBS1HVNV fnptr, GLuint  index, GLsizei  n, const GLhalfNV * v) {
//   (*fnptr)(index, n, v);
// }
// static void  glowVertexAttribs1svNV(GPVERTEXATTRIBS1SVNV fnptr, GLuint  index, GLsizei  count, const GLshort * v) {
//   (*fnptr)(index, count, v);
// }
// static void  glowVertexAttribs2dvNV(GPVERTEXATTRIBS2DVNV fnptr, GLuint  index, GLsizei  count, const GLdouble * v) {
//   (*fnptr)(index, count, v);
// }
// static void  glowVertexAttribs2fvNV(GPVERTEXATTRIBS2FVNV fnptr, GLuint  index, GLsizei  count, const GLfloat * v) {
//   (*fnptr)(index, count, v);
// }
// static void  glowVertexAttribs2hvNV(GPVERTEXATTRIBS2HVNV fnptr, GLuint  index, GLsizei  n, const GLhalfNV * v) {
//   (*fnptr)(index, n, v);
// }
// static void  glowVertexAttribs2svNV(GPVERTEXATTRIBS2SVNV fnptr, GLuint  index, GLsizei  count, const GLshort * v) {
//   (*fnptr)(index, count, v);
// }
// static void  glowVertexAttribs3dvNV(GPVERTEXATTRIBS3DVNV fnptr, GLuint  index, GLsizei  count, const GLdouble * v) {
//   (*fnptr)(index, count, v);
// }
// static void  glowVertexAttribs3fvNV(GPVERTEXATTRIBS3FVNV fnptr, GLuint  index, GLsizei  count, const GLfloat * v) {
//   (*fnptr)(index, count, v);
// }
// static void  glowVertexAttribs3hvNV(GPVERTEXATTRIBS3HVNV fnptr, GLuint  index, GLsizei  n, const GLhalfNV * v) {
//   (*fnptr)(index, n, v);
// }
// static void  glowVertexAttribs3svNV(GPVERTEXATTRIBS3SVNV fnptr, GLuint  index, GLsizei  count, const GLshort * v) {
//   (*fnptr)(index, count, v);
// }
// static void  glowVertexAttribs4dvNV(GPVERTEXATTRIBS4DVNV fnptr, GLuint  index, GLsizei  count, const GLdouble * v) {
//   (*fnptr)(index, count, v);
// }
// static void  glowVertexAttribs4fvNV(GPVERTEXATTRIBS4FVNV fnptr, GLuint  index, GLsizei  count, const GLfloat * v) {
//   (*fnptr)(index, count, v);
// }
// static void  glowVertexAttribs4hvNV(GPVERTEXATTRIBS4HVNV fnptr, GLuint  index, GLsizei  n, const GLhalfNV * v) {
//   (*fnptr)(index, n, v);
// }
// static void  glowVertexAttribs4svNV(GPVERTEXATTRIBS4SVNV fnptr, GLuint  index, GLsizei  count, const GLshort * v) {
//   (*fnptr)(index, count, v);
// }
// static void  glowVertexAttribs4ubvNV(GPVERTEXATTRIBS4UBVNV fnptr, GLuint  index, GLsizei  count, const GLubyte * v) {
//   (*fnptr)(index, count, v);
// }
// static void  glowVertexBindingDivisor(GPVERTEXBINDINGDIVISOR fnptr, GLuint  bindingindex, GLuint  divisor) {
//   (*fnptr)(bindingindex, divisor);
// }
// static void  glowVertexBlendARB(GPVERTEXBLENDARB fnptr, GLint  count) {
//   (*fnptr)(count);
// }
// static void  glowVertexBlendEnvfATI(GPVERTEXBLENDENVFATI fnptr, GLenum  pname, GLfloat  param) {
//   (*fnptr)(pname, param);
// }
// static void  glowVertexBlendEnviATI(GPVERTEXBLENDENVIATI fnptr, GLenum  pname, GLint  param) {
//   (*fnptr)(pname, param);
// }
// static void  glowVertexFormatNV(GPVERTEXFORMATNV fnptr, GLint  size, GLenum  type, GLsizei  stride) {
//   (*fnptr)(size, type, stride);
// }
// static void  glowVertexPointerEXT(GPVERTEXPOINTEREXT fnptr, GLint  size, GLenum  type, GLsizei  stride, GLsizei  count, const void * pointer) {
//   (*fnptr)(size, type, stride, count, pointer);
// }
// static void  glowVertexPointerListIBM(GPVERTEXPOINTERLISTIBM fnptr, GLint  size, GLenum  type, GLint  stride, const void ** pointer, GLint  ptrstride) {
//   (*fnptr)(size, type, stride, pointer, ptrstride);
// }
// static void  glowVertexPointervINTEL(GPVERTEXPOINTERVINTEL fnptr, GLint  size, GLenum  type, const void ** pointer) {
//   (*fnptr)(size, type, pointer);
// }
// static void  glowVertexStream1dATI(GPVERTEXSTREAM1DATI fnptr, GLenum  stream, GLdouble  x) {
//   (*fnptr)(stream, x);
// }
// static void  glowVertexStream1dvATI(GPVERTEXSTREAM1DVATI fnptr, GLenum  stream, const GLdouble * coords) {
//   (*fnptr)(stream, coords);
// }
// static void  glowVertexStream1fATI(GPVERTEXSTREAM1FATI fnptr, GLenum  stream, GLfloat  x) {
//   (*fnptr)(stream, x);
// }
// static void  glowVertexStream1fvATI(GPVERTEXSTREAM1FVATI fnptr, GLenum  stream, const GLfloat * coords) {
//   (*fnptr)(stream, coords);
// }
// static void  glowVertexStream1iATI(GPVERTEXSTREAM1IATI fnptr, GLenum  stream, GLint  x) {
//   (*fnptr)(stream, x);
// }
// static void  glowVertexStream1ivATI(GPVERTEXSTREAM1IVATI fnptr, GLenum  stream, const GLint * coords) {
//   (*fnptr)(stream, coords);
// }
// static void  glowVertexStream1sATI(GPVERTEXSTREAM1SATI fnptr, GLenum  stream, GLshort  x) {
//   (*fnptr)(stream, x);
// }
// static void  glowVertexStream1svATI(GPVERTEXSTREAM1SVATI fnptr, GLenum  stream, const GLshort * coords) {
//   (*fnptr)(stream, coords);
// }
// static void  glowVertexStream2dATI(GPVERTEXSTREAM2DATI fnptr, GLenum  stream, GLdouble  x, GLdouble  y) {
//   (*fnptr)(stream, x, y);
// }
// static void  glowVertexStream2dvATI(GPVERTEXSTREAM2DVATI fnptr, GLenum  stream, const GLdouble * coords) {
//   (*fnptr)(stream, coords);
// }
// static void  glowVertexStream2fATI(GPVERTEXSTREAM2FATI fnptr, GLenum  stream, GLfloat  x, GLfloat  y) {
//   (*fnptr)(stream, x, y);
// }
// static void  glowVertexStream2fvATI(GPVERTEXSTREAM2FVATI fnptr, GLenum  stream, const GLfloat * coords) {
//   (*fnptr)(stream, coords);
// }
// static void  glowVertexStream2iATI(GPVERTEXSTREAM2IATI fnptr, GLenum  stream, GLint  x, GLint  y) {
//   (*fnptr)(stream, x, y);
// }
// static void  glowVertexStream2ivATI(GPVERTEXSTREAM2IVATI fnptr, GLenum  stream, const GLint * coords) {
//   (*fnptr)(stream, coords);
// }
// static void  glowVertexStream2sATI(GPVERTEXSTREAM2SATI fnptr, GLenum  stream, GLshort  x, GLshort  y) {
//   (*fnptr)(stream, x, y);
// }
// static void  glowVertexStream2svATI(GPVERTEXSTREAM2SVATI fnptr, GLenum  stream, const GLshort * coords) {
//   (*fnptr)(stream, coords);
// }
// static void  glowVertexStream3dATI(GPVERTEXSTREAM3DATI fnptr, GLenum  stream, GLdouble  x, GLdouble  y, GLdouble  z) {
//   (*fnptr)(stream, x, y, z);
// }
// static void  glowVertexStream3dvATI(GPVERTEXSTREAM3DVATI fnptr, GLenum  stream, const GLdouble * coords) {
//   (*fnptr)(stream, coords);
// }
// static void  glowVertexStream3fATI(GPVERTEXSTREAM3FATI fnptr, GLenum  stream, GLfloat  x, GLfloat  y, GLfloat  z) {
//   (*fnptr)(stream, x, y, z);
// }
// static void  glowVertexStream3fvATI(GPVERTEXSTREAM3FVATI fnptr, GLenum  stream, const GLfloat * coords) {
//   (*fnptr)(stream, coords);
// }
// static void  glowVertexStream3iATI(GPVERTEXSTREAM3IATI fnptr, GLenum  stream, GLint  x, GLint  y, GLint  z) {
//   (*fnptr)(stream, x, y, z);
// }
// static void  glowVertexStream3ivATI(GPVERTEXSTREAM3IVATI fnptr, GLenum  stream, const GLint * coords) {
//   (*fnptr)(stream, coords);
// }
// static void  glowVertexStream3sATI(GPVERTEXSTREAM3SATI fnptr, GLenum  stream, GLshort  x, GLshort  y, GLshort  z) {
//   (*fnptr)(stream, x, y, z);
// }
// static void  glowVertexStream3svATI(GPVERTEXSTREAM3SVATI fnptr, GLenum  stream, const GLshort * coords) {
//   (*fnptr)(stream, coords);
// }
// static void  glowVertexStream4dATI(GPVERTEXSTREAM4DATI fnptr, GLenum  stream, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w) {
//   (*fnptr)(stream, x, y, z, w);
// }
// static void  glowVertexStream4dvATI(GPVERTEXSTREAM4DVATI fnptr, GLenum  stream, const GLdouble * coords) {
//   (*fnptr)(stream, coords);
// }
// static void  glowVertexStream4fATI(GPVERTEXSTREAM4FATI fnptr, GLenum  stream, GLfloat  x, GLfloat  y, GLfloat  z, GLfloat  w) {
//   (*fnptr)(stream, x, y, z, w);
// }
// static void  glowVertexStream4fvATI(GPVERTEXSTREAM4FVATI fnptr, GLenum  stream, const GLfloat * coords) {
//   (*fnptr)(stream, coords);
// }
// static void  glowVertexStream4iATI(GPVERTEXSTREAM4IATI fnptr, GLenum  stream, GLint  x, GLint  y, GLint  z, GLint  w) {
//   (*fnptr)(stream, x, y, z, w);
// }
// static void  glowVertexStream4ivATI(GPVERTEXSTREAM4IVATI fnptr, GLenum  stream, const GLint * coords) {
//   (*fnptr)(stream, coords);
// }
// static void  glowVertexStream4sATI(GPVERTEXSTREAM4SATI fnptr, GLenum  stream, GLshort  x, GLshort  y, GLshort  z, GLshort  w) {
//   (*fnptr)(stream, x, y, z, w);
// }
// static void  glowVertexStream4svATI(GPVERTEXSTREAM4SVATI fnptr, GLenum  stream, const GLshort * coords) {
//   (*fnptr)(stream, coords);
// }
// static void  glowVertexWeightPointerEXT(GPVERTEXWEIGHTPOINTEREXT fnptr, GLint  size, GLenum  type, GLsizei  stride, const void * pointer) {
//   (*fnptr)(size, type, stride, pointer);
// }
// static void  glowVertexWeightfEXT(GPVERTEXWEIGHTFEXT fnptr, GLfloat  weight) {
//   (*fnptr)(weight);
// }
// static void  glowVertexWeightfvEXT(GPVERTEXWEIGHTFVEXT fnptr, const GLfloat * weight) {
//   (*fnptr)(weight);
// }
// static void  glowVertexWeighthNV(GPVERTEXWEIGHTHNV fnptr, GLhalfNV  weight) {
//   (*fnptr)(weight);
// }
// static void  glowVertexWeighthvNV(GPVERTEXWEIGHTHVNV fnptr, const GLhalfNV * weight) {
//   (*fnptr)(weight);
// }
// static GLenum  glowVideoCaptureNV(GPVIDEOCAPTURENV fnptr, GLuint  video_capture_slot, GLuint * sequence_num, GLuint64EXT * capture_time) {
//   return (*fnptr)(video_capture_slot, sequence_num, capture_time);
// }
// static void  glowVideoCaptureStreamParameterdvNV(GPVIDEOCAPTURESTREAMPARAMETERDVNV fnptr, GLuint  video_capture_slot, GLuint  stream, GLenum  pname, const GLdouble * params) {
//   (*fnptr)(video_capture_slot, stream, pname, params);
// }
// static void  glowVideoCaptureStreamParameterfvNV(GPVIDEOCAPTURESTREAMPARAMETERFVNV fnptr, GLuint  video_capture_slot, GLuint  stream, GLenum  pname, const GLfloat * params) {
//   (*fnptr)(video_capture_slot, stream, pname, params);
// }
// static void  glowVideoCaptureStreamParameterivNV(GPVIDEOCAPTURESTREAMPARAMETERIVNV fnptr, GLuint  video_capture_slot, GLuint  stream, GLenum  pname, const GLint * params) {
//   (*fnptr)(video_capture_slot, stream, pname, params);
// }
// static void  glowViewport(GPVIEWPORT fnptr, GLint  x, GLint  y, GLsizei  width, GLsizei  height) {
//   (*fnptr)(x, y, width, height);
// }
// static void  glowViewportArrayv(GPVIEWPORTARRAYV fnptr, GLuint  first, GLsizei  count, const GLfloat * v) {
//   (*fnptr)(first, count, v);
// }
// static void  glowViewportIndexedf(GPVIEWPORTINDEXEDF fnptr, GLuint  index, GLfloat  x, GLfloat  y, GLfloat  w, GLfloat  h) {
//   (*fnptr)(index, x, y, w, h);
// }
// static void  glowViewportIndexedfv(GPVIEWPORTINDEXEDFV fnptr, GLuint  index, const GLfloat * v) {
//   (*fnptr)(index, v);
// }
// static void  glowWaitSync(GPWAITSYNC fnptr, GLsync  sync, GLbitfield  flags, GLuint64  timeout) {
//   (*fnptr)(sync, flags, timeout);
// }
// static void  glowWeightPathsNV(GPWEIGHTPATHSNV fnptr, GLuint  resultPath, GLsizei  numPaths, const GLuint * paths, const GLfloat * weights) {
//   (*fnptr)(resultPath, numPaths, paths, weights);
// }
// static void  glowWeightPointerARB(GPWEIGHTPOINTERARB fnptr, GLint  size, GLenum  type, GLsizei  stride, const void * pointer) {
//   (*fnptr)(size, type, stride, pointer);
// }
// static void  glowWeightbvARB(GPWEIGHTBVARB fnptr, GLint  size, const GLbyte * weights) {
//   (*fnptr)(size, weights);
// }
// static void  glowWeightdvARB(GPWEIGHTDVARB fnptr, GLint  size, const GLdouble * weights) {
//   (*fnptr)(size, weights);
// }
// static void  glowWeightfvARB(GPWEIGHTFVARB fnptr, GLint  size, const GLfloat * weights) {
//   (*fnptr)(size, weights);
// }
// static void  glowWeightivARB(GPWEIGHTIVARB fnptr, GLint  size, const GLint * weights) {
//   (*fnptr)(size, weights);
// }
// static void  glowWeightsvARB(GPWEIGHTSVARB fnptr, GLint  size, const GLshort * weights) {
//   (*fnptr)(size, weights);
// }
// static void  glowWeightubvARB(GPWEIGHTUBVARB fnptr, GLint  size, const GLubyte * weights) {
//   (*fnptr)(size, weights);
// }
// static void  glowWeightuivARB(GPWEIGHTUIVARB fnptr, GLint  size, const GLuint * weights) {
//   (*fnptr)(size, weights);
// }
// static void  glowWeightusvARB(GPWEIGHTUSVARB fnptr, GLint  size, const GLushort * weights) {
//   (*fnptr)(size, weights);
// }
// static void  glowWindowPos2dARB(GPWINDOWPOS2DARB fnptr, GLdouble  x, GLdouble  y) {
//   (*fnptr)(x, y);
// }
// static void  glowWindowPos2dMESA(GPWINDOWPOS2DMESA fnptr, GLdouble  x, GLdouble  y) {
//   (*fnptr)(x, y);
// }
// static void  glowWindowPos2dvARB(GPWINDOWPOS2DVARB fnptr, const GLdouble * v) {
//   (*fnptr)(v);
// }
// static void  glowWindowPos2dvMESA(GPWINDOWPOS2DVMESA fnptr, const GLdouble * v) {
//   (*fnptr)(v);
// }
// static void  glowWindowPos2fARB(GPWINDOWPOS2FARB fnptr, GLfloat  x, GLfloat  y) {
//   (*fnptr)(x, y);
// }
// static void  glowWindowPos2fMESA(GPWINDOWPOS2FMESA fnptr, GLfloat  x, GLfloat  y) {
//   (*fnptr)(x, y);
// }
// static void  glowWindowPos2fvARB(GPWINDOWPOS2FVARB fnptr, const GLfloat * v) {
//   (*fnptr)(v);
// }
// static void  glowWindowPos2fvMESA(GPWINDOWPOS2FVMESA fnptr, const GLfloat * v) {
//   (*fnptr)(v);
// }
// static void  glowWindowPos2iARB(GPWINDOWPOS2IARB fnptr, GLint  x, GLint  y) {
//   (*fnptr)(x, y);
// }
// static void  glowWindowPos2iMESA(GPWINDOWPOS2IMESA fnptr, GLint  x, GLint  y) {
//   (*fnptr)(x, y);
// }
// static void  glowWindowPos2ivARB(GPWINDOWPOS2IVARB fnptr, const GLint * v) {
//   (*fnptr)(v);
// }
// static void  glowWindowPos2ivMESA(GPWINDOWPOS2IVMESA fnptr, const GLint * v) {
//   (*fnptr)(v);
// }
// static void  glowWindowPos2sARB(GPWINDOWPOS2SARB fnptr, GLshort  x, GLshort  y) {
//   (*fnptr)(x, y);
// }
// static void  glowWindowPos2sMESA(GPWINDOWPOS2SMESA fnptr, GLshort  x, GLshort  y) {
//   (*fnptr)(x, y);
// }
// static void  glowWindowPos2svARB(GPWINDOWPOS2SVARB fnptr, const GLshort * v) {
//   (*fnptr)(v);
// }
// static void  glowWindowPos2svMESA(GPWINDOWPOS2SVMESA fnptr, const GLshort * v) {
//   (*fnptr)(v);
// }
// static void  glowWindowPos3dARB(GPWINDOWPOS3DARB fnptr, GLdouble  x, GLdouble  y, GLdouble  z) {
//   (*fnptr)(x, y, z);
// }
// static void  glowWindowPos3dMESA(GPWINDOWPOS3DMESA fnptr, GLdouble  x, GLdouble  y, GLdouble  z) {
//   (*fnptr)(x, y, z);
// }
// static void  glowWindowPos3dvARB(GPWINDOWPOS3DVARB fnptr, const GLdouble * v) {
//   (*fnptr)(v);
// }
// static void  glowWindowPos3dvMESA(GPWINDOWPOS3DVMESA fnptr, const GLdouble * v) {
//   (*fnptr)(v);
// }
// static void  glowWindowPos3fARB(GPWINDOWPOS3FARB fnptr, GLfloat  x, GLfloat  y, GLfloat  z) {
//   (*fnptr)(x, y, z);
// }
// static void  glowWindowPos3fMESA(GPWINDOWPOS3FMESA fnptr, GLfloat  x, GLfloat  y, GLfloat  z) {
//   (*fnptr)(x, y, z);
// }
// static void  glowWindowPos3fvARB(GPWINDOWPOS3FVARB fnptr, const GLfloat * v) {
//   (*fnptr)(v);
// }
// static void  glowWindowPos3fvMESA(GPWINDOWPOS3FVMESA fnptr, const GLfloat * v) {
//   (*fnptr)(v);
// }
// static void  glowWindowPos3iARB(GPWINDOWPOS3IARB fnptr, GLint  x, GLint  y, GLint  z) {
//   (*fnptr)(x, y, z);
// }
// static void  glowWindowPos3iMESA(GPWINDOWPOS3IMESA fnptr, GLint  x, GLint  y, GLint  z) {
//   (*fnptr)(x, y, z);
// }
// static void  glowWindowPos3ivARB(GPWINDOWPOS3IVARB fnptr, const GLint * v) {
//   (*fnptr)(v);
// }
// static void  glowWindowPos3ivMESA(GPWINDOWPOS3IVMESA fnptr, const GLint * v) {
//   (*fnptr)(v);
// }
// static void  glowWindowPos3sARB(GPWINDOWPOS3SARB fnptr, GLshort  x, GLshort  y, GLshort  z) {
//   (*fnptr)(x, y, z);
// }
// static void  glowWindowPos3sMESA(GPWINDOWPOS3SMESA fnptr, GLshort  x, GLshort  y, GLshort  z) {
//   (*fnptr)(x, y, z);
// }
// static void  glowWindowPos3svARB(GPWINDOWPOS3SVARB fnptr, const GLshort * v) {
//   (*fnptr)(v);
// }
// static void  glowWindowPos3svMESA(GPWINDOWPOS3SVMESA fnptr, const GLshort * v) {
//   (*fnptr)(v);
// }
// static void  glowWindowPos4dMESA(GPWINDOWPOS4DMESA fnptr, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w) {
//   (*fnptr)(x, y, z, w);
// }
// static void  glowWindowPos4dvMESA(GPWINDOWPOS4DVMESA fnptr, const GLdouble * v) {
//   (*fnptr)(v);
// }
// static void  glowWindowPos4fMESA(GPWINDOWPOS4FMESA fnptr, GLfloat  x, GLfloat  y, GLfloat  z, GLfloat  w) {
//   (*fnptr)(x, y, z, w);
// }
// static void  glowWindowPos4fvMESA(GPWINDOWPOS4FVMESA fnptr, const GLfloat * v) {
//   (*fnptr)(v);
// }
// static void  glowWindowPos4iMESA(GPWINDOWPOS4IMESA fnptr, GLint  x, GLint  y, GLint  z, GLint  w) {
//   (*fnptr)(x, y, z, w);
// }
// static void  glowWindowPos4ivMESA(GPWINDOWPOS4IVMESA fnptr, const GLint * v) {
//   (*fnptr)(v);
// }
// static void  glowWindowPos4sMESA(GPWINDOWPOS4SMESA fnptr, GLshort  x, GLshort  y, GLshort  z, GLshort  w) {
//   (*fnptr)(x, y, z, w);
// }
// static void  glowWindowPos4svMESA(GPWINDOWPOS4SVMESA fnptr, const GLshort * v) {
//   (*fnptr)(v);
// }
// static void  glowWriteMaskEXT(GPWRITEMASKEXT fnptr, GLuint  res, GLuint  in, GLenum  outX, GLenum  outY, GLenum  outZ, GLenum  outW) {
//   (*fnptr)(res, in, outX, outY, outZ, outW);
// }
import "C"
import (
  "errors"
  "github.com/errcw/glow/procaddr"
  "github.com/errcw/glow/procaddr/auto"
  "unsafe"
)
const (
  GL_1PASS_EXT = 0x80A1
  GL_1PASS_SGIS = 0x80A1
  GL_2PASS_0_EXT = 0x80A2
  GL_2PASS_0_SGIS = 0x80A2
  GL_2PASS_1_EXT = 0x80A3
  GL_2PASS_1_SGIS = 0x80A3
  GL_2X_BIT_ATI = 0x00000001
  GL_422_AVERAGE_EXT = 0x80CE
  GL_422_EXT = 0x80CC
  GL_422_REV_AVERAGE_EXT = 0x80CF
  GL_422_REV_EXT = 0x80CD
  GL_4PASS_0_EXT = 0x80A4
  GL_4PASS_0_SGIS = 0x80A4
  GL_4PASS_1_EXT = 0x80A5
  GL_4PASS_1_SGIS = 0x80A5
  GL_4PASS_2_EXT = 0x80A6
  GL_4PASS_2_SGIS = 0x80A6
  GL_4PASS_3_EXT = 0x80A7
  GL_4PASS_3_SGIS = 0x80A7
  GL_4X_BIT_ATI = 0x00000002
  GL_8X_BIT_ATI = 0x00000004
  ABGR_EXT = 0x8000
  ACCUM_ADJACENT_PAIRS_NV = 0x90AD
  ACTIVE_ATOMIC_COUNTER_BUFFERS = 0x92D9
  ACTIVE_ATTRIBUTES = 0x8B89
  ACTIVE_ATTRIBUTE_MAX_LENGTH = 0x8B8A
  ACTIVE_PROGRAM = 0x8259
  ACTIVE_PROGRAM_EXT = 0x8B8D
  ACTIVE_RESOURCES = 0x92F5
  ACTIVE_STENCIL_FACE_EXT = 0x8911
  ACTIVE_SUBROUTINES = 0x8DE5
  ACTIVE_SUBROUTINE_MAX_LENGTH = 0x8E48
  ACTIVE_SUBROUTINE_UNIFORMS = 0x8DE6
  ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS = 0x8E47
  ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH = 0x8E49
  ACTIVE_TEXTURE = 0x84E0
  ACTIVE_TEXTURE_ARB = 0x84E0
  ACTIVE_UNIFORMS = 0x8B86
  ACTIVE_UNIFORM_BLOCKS = 0x8A36
  ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 0x8A35
  ACTIVE_UNIFORM_MAX_LENGTH = 0x8B87
  ACTIVE_VARIABLES = 0x9305
  ACTIVE_VARYINGS_NV = 0x8C81
  ACTIVE_VARYING_MAX_LENGTH_NV = 0x8C82
  ACTIVE_VERTEX_UNITS_ARB = 0x86A5
  ADD_ATI = 0x8963
  ADD_SIGNED_ARB = 0x8574
  ADD_SIGNED_EXT = 0x8574
  ADJACENT_PAIRS_NV = 0x90AE
  AFFINE_2D_NV = 0x9092
  AFFINE_3D_NV = 0x9094
  ALIASED_LINE_WIDTH_RANGE = 0x846E
  ALLOW_DRAW_FRG_HINT_PGI = 0x1A210
  ALLOW_DRAW_MEM_HINT_PGI = 0x1A211
  ALLOW_DRAW_OBJ_HINT_PGI = 0x1A20E
  ALLOW_DRAW_WIN_HINT_PGI = 0x1A20F
  ALL_BARRIER_BITS = 0xFFFFFFFF
  ALL_BARRIER_BITS_EXT = 0xFFFFFFFF
  ALL_COMPLETED_NV = 0x84F2
  ALL_SHADER_BITS = 0xFFFFFFFF
  ALL_SHADER_BITS_EXT = 0xFFFFFFFF
  ALL_STATIC_DATA_IBM = 103060
  ALPHA = 0x1906
  ALPHA12_EXT = 0x803D
  ALPHA16F_ARB = 0x881C
  ALPHA16I_EXT = 0x8D8A
  ALPHA16UI_EXT = 0x8D78
  ALPHA16_EXT = 0x803E
  ALPHA16_SNORM = 0x9018
  ALPHA32F_ARB = 0x8816
  ALPHA32I_EXT = 0x8D84
  ALPHA32UI_EXT = 0x8D72
  ALPHA4_EXT = 0x803B
  ALPHA8I_EXT = 0x8D90
  ALPHA8UI_EXT = 0x8D7E
  ALPHA8_EXT = 0x803C
  ALPHA8_SNORM = 0x9014
  ALPHA_FLOAT16_APPLE = 0x881C
  ALPHA_FLOAT16_ATI = 0x881C
  ALPHA_FLOAT32_APPLE = 0x8816
  ALPHA_FLOAT32_ATI = 0x8816
  ALPHA_INTEGER_EXT = 0x8D97
  ALPHA_MAX_CLAMP_INGR = 0x8567
  ALPHA_MAX_SGIX = 0x8321
  ALPHA_MIN_CLAMP_INGR = 0x8563
  ALPHA_MIN_SGIX = 0x8320
  ALPHA_SNORM = 0x9010
  ALREADY_SIGNALED = 0x911A
  ALWAYS = 0x0207
  ALWAYS_FAST_HINT_PGI = 0x1A20C
  ALWAYS_SOFT_HINT_PGI = 0x1A20D
  AND = 0x1501
  AND_INVERTED = 0x1504
  AND_REVERSE = 0x1502
  ANY_SAMPLES_PASSED = 0x8C2F
  ANY_SAMPLES_PASSED_CONSERVATIVE = 0x8D6A
  ARC_TO_NV = 0xFE
  ARRAY_BUFFER = 0x8892
  ARRAY_BUFFER_ARB = 0x8892
  ARRAY_BUFFER_BINDING = 0x8894
  ARRAY_BUFFER_BINDING_ARB = 0x8894
  ARRAY_ELEMENT_LOCK_COUNT_EXT = 0x81A9
  ARRAY_ELEMENT_LOCK_FIRST_EXT = 0x81A8
  ARRAY_OBJECT_BUFFER_ATI = 0x8766
  ARRAY_OBJECT_OFFSET_ATI = 0x8767
  ARRAY_SIZE = 0x92FB
  ARRAY_STRIDE = 0x92FE
  ASYNC_DRAW_PIXELS_SGIX = 0x835D
  ASYNC_HISTOGRAM_SGIX = 0x832C
  ASYNC_MARKER_SGIX = 0x8329
  ASYNC_READ_PIXELS_SGIX = 0x835E
  ASYNC_TEX_IMAGE_SGIX = 0x835C
  ATOMIC_COUNTER_BARRIER_BIT = 0x00001000
  ATOMIC_COUNTER_BARRIER_BIT_EXT = 0x00001000
  ATOMIC_COUNTER_BUFFER = 0x92C0
  ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS = 0x92C5
  ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES = 0x92C6
  ATOMIC_COUNTER_BUFFER_BINDING = 0x92C1
  ATOMIC_COUNTER_BUFFER_DATA_SIZE = 0x92C4
  ATOMIC_COUNTER_BUFFER_INDEX = 0x9301
  ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER = 0x90ED
  ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER = 0x92CB
  ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER = 0x92CA
  ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER = 0x92C8
  ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x92C9
  ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER = 0x92C7
  ATOMIC_COUNTER_BUFFER_SIZE = 0x92C3
  ATOMIC_COUNTER_BUFFER_START = 0x92C2
  ATTACHED_SHADERS = 0x8B85
  ATTENUATION_EXT = 0x834D
  ATTRIB_ARRAY_POINTER_NV = 0x8645
  ATTRIB_ARRAY_SIZE_NV = 0x8623
  ATTRIB_ARRAY_STRIDE_NV = 0x8624
  ATTRIB_ARRAY_TYPE_NV = 0x8625
  AUTO_GENERATE_MIPMAP = 0x8295
  AUX_DEPTH_STENCIL_APPLE = 0x8A14
  AVERAGE_EXT = 0x8335
  AVERAGE_HP = 0x8160
  BACK = 0x0405
  BACK_LEFT = 0x0402
  BACK_NORMALS_HINT_PGI = 0x1A223
  BACK_PRIMARY_COLOR_NV = 0x8C77
  BACK_RIGHT = 0x0403
  BACK_SECONDARY_COLOR_NV = 0x8C78
  BEVEL_NV = 0x90A6
  BGR = 0x80E0
  BGRA = 0x80E1
  BGRA_EXT = 0x80E1
  BGRA_INTEGER = 0x8D9B
  BGRA_INTEGER_EXT = 0x8D9B
  BGR_EXT = 0x80E0
  BGR_INTEGER = 0x8D9A
  BGR_INTEGER_EXT = 0x8D9A
  BIAS_BIT_ATI = 0x00000008
  BIAS_BY_NEGATIVE_ONE_HALF_NV = 0x8541
  BINORMAL_ARRAY_EXT = 0x843A
  BINORMAL_ARRAY_POINTER_EXT = 0x8443
  BINORMAL_ARRAY_STRIDE_EXT = 0x8441
  BINORMAL_ARRAY_TYPE_EXT = 0x8440
  BLEND = 0x0BE2
  BLEND_ADVANCED_COHERENT_NV = 0x9285
  BLEND_COLOR = 0x8005
  BLEND_COLOR_EXT = 0x8005
  BLEND_DST = 0x0BE0
  BLEND_DST_ALPHA = 0x80CA
  BLEND_DST_ALPHA_EXT = 0x80CA
  BLEND_DST_RGB = 0x80C8
  BLEND_DST_RGB_EXT = 0x80C8
  BLEND_EQUATION = 0x8009
  BLEND_EQUATION_ALPHA = 0x883D
  BLEND_EQUATION_ALPHA_EXT = 0x883D
  BLEND_EQUATION_EXT = 0x8009
  BLEND_EQUATION_RGB = 0x8009
  BLEND_EQUATION_RGB_EXT = 0x8009
  BLEND_OVERLAP_NV = 0x9281
  BLEND_PREMULTIPLIED_SRC_NV = 0x9280
  BLEND_SRC = 0x0BE1
  BLEND_SRC_ALPHA = 0x80CB
  BLEND_SRC_ALPHA_EXT = 0x80CB
  BLEND_SRC_RGB = 0x80C9
  BLEND_SRC_RGB_EXT = 0x80C9
  BLOCK_INDEX = 0x92FD
  BLUE = 0x1905
  BLUE_BIT_ATI = 0x00000004
  BLUE_INTEGER = 0x8D96
  BLUE_INTEGER_EXT = 0x8D96
  BLUE_MAX_CLAMP_INGR = 0x8566
  BLUE_MIN_CLAMP_INGR = 0x8562
  BLUE_NV = 0x1905
  BOLD_BIT_NV = 0x01
  BOOL = 0x8B56
  BOOL_ARB = 0x8B56
  BOOL_VEC2 = 0x8B57
  BOOL_VEC2_ARB = 0x8B57
  BOOL_VEC3 = 0x8B58
  BOOL_VEC3_ARB = 0x8B58
  BOOL_VEC4 = 0x8B59
  BOOL_VEC4_ARB = 0x8B59
  BOUNDING_BOX_NV = 0x908D
  BOUNDING_BOX_OF_BOUNDING_BOXES_NV = 0x909C
  BUFFER = 0x82E0
  BUFFER_ACCESS = 0x88BB
  BUFFER_ACCESS_ARB = 0x88BB
  BUFFER_ACCESS_FLAGS = 0x911F
  BUFFER_BINDING = 0x9302
  BUFFER_DATA_SIZE = 0x9303
  BUFFER_FLUSHING_UNMAP_APPLE = 0x8A13
  BUFFER_GPU_ADDRESS_NV = 0x8F1D
  BUFFER_IMMUTABLE_STORAGE = 0x821F
  BUFFER_KHR = 0x82E0
  BUFFER_MAPPED = 0x88BC
  BUFFER_MAPPED_ARB = 0x88BC
  BUFFER_MAP_LENGTH = 0x9120
  BUFFER_MAP_OFFSET = 0x9121
  BUFFER_MAP_POINTER = 0x88BD
  BUFFER_MAP_POINTER_ARB = 0x88BD
  BUFFER_OBJECT_APPLE = 0x85B3
  BUFFER_OBJECT_EXT = 0x9151
  BUFFER_SERIALIZED_MODIFY_APPLE = 0x8A12
  BUFFER_SIZE = 0x8764
  BUFFER_SIZE_ARB = 0x8764
  BUFFER_STORAGE_FLAGS = 0x8220
  BUFFER_UPDATE_BARRIER_BIT = 0x00000200
  BUFFER_UPDATE_BARRIER_BIT_EXT = 0x00000200
  BUFFER_USAGE = 0x8765
  BUFFER_USAGE_ARB = 0x8765
  BUFFER_VARIABLE = 0x92E5
  BUMP_ENVMAP_ATI = 0x877B
  BUMP_NUM_TEX_UNITS_ATI = 0x8777
  BUMP_ROT_MATRIX_ATI = 0x8775
  BUMP_ROT_MATRIX_SIZE_ATI = 0x8776
  BUMP_TARGET_ATI = 0x877C
  BUMP_TEX_UNITS_ATI = 0x8778
  BYTE = 0x1400
  CALLIGRAPHIC_FRAGMENT_SGIX = 0x8183
  CAVEAT_SUPPORT = 0x82B8
  CCW = 0x0901
  CIRCULAR_CCW_ARC_TO_NV = 0xF8
  CIRCULAR_CW_ARC_TO_NV = 0xFA
  CIRCULAR_TANGENT_ARC_TO_NV = 0xFC
  CLAMP_FRAGMENT_COLOR_ARB = 0x891B
  CLAMP_READ_COLOR = 0x891C
  CLAMP_READ_COLOR_ARB = 0x891C
  CLAMP_TO_BORDER = 0x812D
  CLAMP_TO_BORDER_ARB = 0x812D
  CLAMP_TO_BORDER_SGIS = 0x812D
  CLAMP_TO_EDGE = 0x812F
  CLAMP_TO_EDGE_SGIS = 0x812F
  CLAMP_VERTEX_COLOR_ARB = 0x891A
  CLEAR = 0x1500
  CLEAR_BUFFER = 0x82B4
  CLEAR_TEXTURE = 0x9365
  CLIENT_ACTIVE_TEXTURE_ARB = 0x84E1
  CLIENT_MAPPED_BUFFER_BARRIER_BIT = 0x00004000
  CLIENT_STORAGE_BIT = 0x0200
  CLIP_DISTANCE0 = 0x3000
  CLIP_DISTANCE1 = 0x3001
  CLIP_DISTANCE2 = 0x3002
  CLIP_DISTANCE3 = 0x3003
  CLIP_DISTANCE4 = 0x3004
  CLIP_DISTANCE5 = 0x3005
  CLIP_DISTANCE6 = 0x3006
  CLIP_DISTANCE7 = 0x3007
  CLIP_DISTANCE_NV = 0x8C7A
  CLIP_FAR_HINT_PGI = 0x1A221
  CLIP_NEAR_HINT_PGI = 0x1A220
  CLIP_VOLUME_CLIPPING_HINT_EXT = 0x80F0
  CLOSE_PATH_NV = 0x00
  CMYKA_EXT = 0x800D
  CMYK_EXT = 0x800C
  CND0_ATI = 0x896B
  CND_ATI = 0x896A
  COLOR = 0x1800
  COLOR3_BIT_PGI = 0x00010000
  COLOR4_BIT_PGI = 0x00020000
  COLORBURN_NV = 0x929A
  COLORDODGE_NV = 0x9299
  COLOR_ALPHA_PAIRING_ATI = 0x8975
  COLOR_ARRAY_ADDRESS_NV = 0x8F23
  COLOR_ARRAY_BUFFER_BINDING_ARB = 0x8898
  COLOR_ARRAY_COUNT_EXT = 0x8084
  COLOR_ARRAY_EXT = 0x8076
  COLOR_ARRAY_LENGTH_NV = 0x8F2D
  COLOR_ARRAY_LIST_IBM = 103072
  COLOR_ARRAY_LIST_STRIDE_IBM = 103082
  COLOR_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F7
  COLOR_ARRAY_POINTER_EXT = 0x8090
  COLOR_ARRAY_SIZE_EXT = 0x8081
  COLOR_ARRAY_STRIDE_EXT = 0x8083
  COLOR_ARRAY_TYPE_EXT = 0x8082
  COLOR_ATTACHMENT0 = 0x8CE0
  COLOR_ATTACHMENT0_EXT = 0x8CE0
  COLOR_ATTACHMENT1 = 0x8CE1
  COLOR_ATTACHMENT10 = 0x8CEA
  COLOR_ATTACHMENT10_EXT = 0x8CEA
  COLOR_ATTACHMENT11 = 0x8CEB
  COLOR_ATTACHMENT11_EXT = 0x8CEB
  COLOR_ATTACHMENT12 = 0x8CEC
  COLOR_ATTACHMENT12_EXT = 0x8CEC
  COLOR_ATTACHMENT13 = 0x8CED
  COLOR_ATTACHMENT13_EXT = 0x8CED
  COLOR_ATTACHMENT14 = 0x8CEE
  COLOR_ATTACHMENT14_EXT = 0x8CEE
  COLOR_ATTACHMENT15 = 0x8CEF
  COLOR_ATTACHMENT15_EXT = 0x8CEF
  COLOR_ATTACHMENT1_EXT = 0x8CE1
  COLOR_ATTACHMENT2 = 0x8CE2
  COLOR_ATTACHMENT2_EXT = 0x8CE2
  COLOR_ATTACHMENT3 = 0x8CE3
  COLOR_ATTACHMENT3_EXT = 0x8CE3
  COLOR_ATTACHMENT4 = 0x8CE4
  COLOR_ATTACHMENT4_EXT = 0x8CE4
  COLOR_ATTACHMENT5 = 0x8CE5
  COLOR_ATTACHMENT5_EXT = 0x8CE5
  COLOR_ATTACHMENT6 = 0x8CE6
  COLOR_ATTACHMENT6_EXT = 0x8CE6
  COLOR_ATTACHMENT7 = 0x8CE7
  COLOR_ATTACHMENT7_EXT = 0x8CE7
  COLOR_ATTACHMENT8 = 0x8CE8
  COLOR_ATTACHMENT8_EXT = 0x8CE8
  COLOR_ATTACHMENT9 = 0x8CE9
  COLOR_ATTACHMENT9_EXT = 0x8CE9
  COLOR_BUFFER_BIT = 0x00004000
  COLOR_CLEAR_UNCLAMPED_VALUE_ATI = 0x8835
  COLOR_CLEAR_VALUE = 0x0C22
  COLOR_COMPONENTS = 0x8283
  COLOR_ENCODING = 0x8296
  COLOR_FLOAT_APPLE = 0x8A0F
  COLOR_INDEX12_EXT = 0x80E6
  COLOR_INDEX16_EXT = 0x80E7
  COLOR_INDEX1_EXT = 0x80E2
  COLOR_INDEX2_EXT = 0x80E3
  COLOR_INDEX4_EXT = 0x80E4
  COLOR_INDEX8_EXT = 0x80E5
  COLOR_LOGIC_OP = 0x0BF2
  COLOR_MATRIX_SGI = 0x80B1
  COLOR_MATRIX_STACK_DEPTH_SGI = 0x80B2
  COLOR_RENDERABLE = 0x8286
  COLOR_SAMPLES_NV = 0x8E20
  COLOR_SUM_ARB = 0x8458
  COLOR_SUM_CLAMP_NV = 0x854F
  COLOR_SUM_EXT = 0x8458
  COLOR_TABLE_ALPHA_SIZE_SGI = 0x80DD
  COLOR_TABLE_BIAS_SGI = 0x80D7
  COLOR_TABLE_BLUE_SIZE_SGI = 0x80DC
  COLOR_TABLE_FORMAT_SGI = 0x80D8
  COLOR_TABLE_GREEN_SIZE_SGI = 0x80DB
  COLOR_TABLE_INTENSITY_SIZE_SGI = 0x80DF
  COLOR_TABLE_LUMINANCE_SIZE_SGI = 0x80DE
  COLOR_TABLE_RED_SIZE_SGI = 0x80DA
  COLOR_TABLE_SCALE_SGI = 0x80D6
  COLOR_TABLE_SGI = 0x80D0
  COLOR_TABLE_WIDTH_SGI = 0x80D9
  COLOR_WRITEMASK = 0x0C23
  COMBINE4_NV = 0x8503
  COMBINER0_NV = 0x8550
  COMBINER1_NV = 0x8551
  COMBINER2_NV = 0x8552
  COMBINER3_NV = 0x8553
  COMBINER4_NV = 0x8554
  COMBINER5_NV = 0x8555
  COMBINER6_NV = 0x8556
  COMBINER7_NV = 0x8557
  COMBINER_AB_DOT_PRODUCT_NV = 0x8545
  COMBINER_AB_OUTPUT_NV = 0x854A
  COMBINER_BIAS_NV = 0x8549
  COMBINER_CD_DOT_PRODUCT_NV = 0x8546
  COMBINER_CD_OUTPUT_NV = 0x854B
  COMBINER_COMPONENT_USAGE_NV = 0x8544
  COMBINER_INPUT_NV = 0x8542
  COMBINER_MAPPING_NV = 0x8543
  COMBINER_MUX_SUM_NV = 0x8547
  COMBINER_SCALE_NV = 0x8548
  COMBINER_SUM_OUTPUT_NV = 0x854C
  COMBINE_ALPHA_ARB = 0x8572
  COMBINE_ALPHA_EXT = 0x8572
  COMBINE_ARB = 0x8570
  COMBINE_EXT = 0x8570
  COMBINE_RGB_ARB = 0x8571
  COMBINE_RGB_EXT = 0x8571
  COMMAND_BARRIER_BIT = 0x00000040
  COMMAND_BARRIER_BIT_EXT = 0x00000040
  COMPARE_REF_DEPTH_TO_TEXTURE_EXT = 0x884E
  COMPARE_REF_TO_TEXTURE = 0x884E
  COMPARE_R_TO_TEXTURE_ARB = 0x884E
  COMPATIBLE_SUBROUTINES = 0x8E4B
  COMPILE_STATUS = 0x8B81
  COMPRESSED_ALPHA_ARB = 0x84E9
  COMPRESSED_INTENSITY_ARB = 0x84EC
  COMPRESSED_LUMINANCE_ALPHA_ARB = 0x84EB
  COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT = 0x8C72
  COMPRESSED_LUMINANCE_ARB = 0x84EA
  COMPRESSED_LUMINANCE_LATC1_EXT = 0x8C70
  COMPRESSED_R11_EAC = 0x9270
  COMPRESSED_RED = 0x8225
  COMPRESSED_RED_GREEN_RGTC2_EXT = 0x8DBD
  COMPRESSED_RED_RGTC1 = 0x8DBB
  COMPRESSED_RED_RGTC1_EXT = 0x8DBB
  COMPRESSED_RG = 0x8226
  COMPRESSED_RG11_EAC = 0x9272
  COMPRESSED_RGB = 0x84ED
  COMPRESSED_RGB8_ETC2 = 0x9274
  COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9276
  COMPRESSED_RGBA = 0x84EE
  COMPRESSED_RGBA8_ETC2_EAC = 0x9278
  COMPRESSED_RGBA_ARB = 0x84EE
  COMPRESSED_RGBA_ASTC_10x10_KHR = 0x93BB
  COMPRESSED_RGBA_ASTC_10x5_KHR = 0x93B8
  COMPRESSED_RGBA_ASTC_10x6_KHR = 0x93B9
  COMPRESSED_RGBA_ASTC_10x8_KHR = 0x93BA
  COMPRESSED_RGBA_ASTC_12x10_KHR = 0x93BC
  COMPRESSED_RGBA_ASTC_12x12_KHR = 0x93BD
  COMPRESSED_RGBA_ASTC_4x4_KHR = 0x93B0
  COMPRESSED_RGBA_ASTC_5x4_KHR = 0x93B1
  COMPRESSED_RGBA_ASTC_5x5_KHR = 0x93B2
  COMPRESSED_RGBA_ASTC_6x5_KHR = 0x93B3
  COMPRESSED_RGBA_ASTC_6x6_KHR = 0x93B4
  COMPRESSED_RGBA_ASTC_8x5_KHR = 0x93B5
  COMPRESSED_RGBA_ASTC_8x6_KHR = 0x93B6
  COMPRESSED_RGBA_ASTC_8x8_KHR = 0x93B7
  COMPRESSED_RGBA_BPTC_UNORM_ARB = 0x8E8C
  COMPRESSED_RGBA_FXT1_3DFX = 0x86B1
  COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1
  COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2
  COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3
  COMPRESSED_RGB_ARB = 0x84ED
  COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB = 0x8E8E
  COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB = 0x8E8F
  COMPRESSED_RGB_FXT1_3DFX = 0x86B0
  COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0
  COMPRESSED_RG_RGTC2 = 0x8DBD
  COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT = 0x8C73
  COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT = 0x8C71
  COMPRESSED_SIGNED_R11_EAC = 0x9271
  COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT = 0x8DBE
  COMPRESSED_SIGNED_RED_RGTC1 = 0x8DBC
  COMPRESSED_SIGNED_RED_RGTC1_EXT = 0x8DBC
  COMPRESSED_SIGNED_RG11_EAC = 0x9273
  COMPRESSED_SIGNED_RG_RGTC2 = 0x8DBE
  COMPRESSED_SLUMINANCE_ALPHA_EXT = 0x8C4B
  COMPRESSED_SLUMINANCE_EXT = 0x8C4A
  COMPRESSED_SRGB = 0x8C48
  COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR = 0x93DB
  COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR = 0x93D8
  COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR = 0x93D9
  COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR = 0x93DA
  COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR = 0x93DC
  COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR = 0x93DD
  COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR = 0x93D0
  COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR = 0x93D1
  COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR = 0x93D2
  COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR = 0x93D3
  COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR = 0x93D4
  COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR = 0x93D5
  COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR = 0x93D6
  COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR = 0x93D7
  COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 0x9279
  COMPRESSED_SRGB8_ETC2 = 0x9275
  COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277
  COMPRESSED_SRGB_ALPHA = 0x8C49
  COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB = 0x8E8D
  COMPRESSED_SRGB_ALPHA_EXT = 0x8C49
  COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = 0x8C4D
  COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = 0x8C4E
  COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = 0x8C4F
  COMPRESSED_SRGB_EXT = 0x8C48
  COMPRESSED_SRGB_S3TC_DXT1_EXT = 0x8C4C
  COMPRESSED_TEXTURE_FORMATS = 0x86A3
  COMPRESSED_TEXTURE_FORMATS_ARB = 0x86A3
  COMPUTE_PROGRAM_NV = 0x90FB
  COMPUTE_PROGRAM_PARAMETER_BUFFER_NV = 0x90FC
  COMPUTE_SHADER = 0x91B9
  COMPUTE_SHADER_BIT = 0x00000020
  COMPUTE_SUBROUTINE = 0x92ED
  COMPUTE_SUBROUTINE_UNIFORM = 0x92F3
  COMPUTE_TEXTURE = 0x82A0
  COMPUTE_WORK_GROUP_SIZE = 0x8267
  COMP_BIT_ATI = 0x00000002
  CONDITION_SATISFIED = 0x911C
  CONJOINT_NV = 0x9284
  CONSERVE_MEMORY_HINT_PGI = 0x1A1FD
  CONSTANT_ALPHA = 0x8003
  CONSTANT_ALPHA_EXT = 0x8003
  CONSTANT_ARB = 0x8576
  CONSTANT_BORDER_HP = 0x8151
  CONSTANT_COLOR = 0x8001
  CONSTANT_COLOR0_NV = 0x852A
  CONSTANT_COLOR1_NV = 0x852B
  CONSTANT_COLOR_EXT = 0x8001
  CONSTANT_EXT = 0x8576
  CONST_EYE_NV = 0x86E5
  CONTEXT_COMPATIBILITY_PROFILE_BIT = 0x00000002
  CONTEXT_CORE_PROFILE_BIT = 0x00000001
  CONTEXT_FLAGS = 0x821E
  CONTEXT_FLAG_DEBUG_BIT = 0x00000002
  CONTEXT_FLAG_DEBUG_BIT_KHR = 0x00000002
  CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = 0x00000001
  CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB = 0x00000004
  CONTEXT_PROFILE_MASK = 0x9126
  CONTINUOUS_AMD = 0x9007
  CONTRAST_NV = 0x92A1
  CONVEX_HULL_NV = 0x908B
  CONVOLUTION_1D_EXT = 0x8010
  CONVOLUTION_2D_EXT = 0x8011
  CONVOLUTION_BORDER_COLOR_HP = 0x8154
  CONVOLUTION_BORDER_MODE_EXT = 0x8013
  CONVOLUTION_FILTER_BIAS_EXT = 0x8015
  CONVOLUTION_FILTER_SCALE_EXT = 0x8014
  CONVOLUTION_FORMAT_EXT = 0x8017
  CONVOLUTION_HEIGHT_EXT = 0x8019
  CONVOLUTION_HINT_SGIX = 0x8316
  CONVOLUTION_WIDTH_EXT = 0x8018
  CON_0_ATI = 0x8941
  CON_10_ATI = 0x894B
  CON_11_ATI = 0x894C
  CON_12_ATI = 0x894D
  CON_13_ATI = 0x894E
  CON_14_ATI = 0x894F
  CON_15_ATI = 0x8950
  CON_16_ATI = 0x8951
  CON_17_ATI = 0x8952
  CON_18_ATI = 0x8953
  CON_19_ATI = 0x8954
  CON_1_ATI = 0x8942
  CON_20_ATI = 0x8955
  CON_21_ATI = 0x8956
  CON_22_ATI = 0x8957
  CON_23_ATI = 0x8958
  CON_24_ATI = 0x8959
  CON_25_ATI = 0x895A
  CON_26_ATI = 0x895B
  CON_27_ATI = 0x895C
  CON_28_ATI = 0x895D
  CON_29_ATI = 0x895E
  CON_2_ATI = 0x8943
  CON_30_ATI = 0x895F
  CON_31_ATI = 0x8960
  CON_3_ATI = 0x8944
  CON_4_ATI = 0x8945
  CON_5_ATI = 0x8946
  CON_6_ATI = 0x8947
  CON_7_ATI = 0x8948
  CON_8_ATI = 0x8949
  CON_9_ATI = 0x894A
  COORD_REPLACE_ARB = 0x8862
  COORD_REPLACE_NV = 0x8862
  COPY = 0x1503
  COPY_INVERTED = 0x150C
  COPY_READ_BUFFER = 0x8F36
  COPY_READ_BUFFER_BINDING = 0x8F36
  COPY_WRITE_BUFFER = 0x8F37
  COPY_WRITE_BUFFER_BINDING = 0x8F37
  COUNTER_RANGE_AMD = 0x8BC1
  COUNTER_TYPE_AMD = 0x8BC0
  COUNT_DOWN_NV = 0x9089
  COUNT_UP_NV = 0x9088
  CUBIC_CURVE_TO_NV = 0x0C
  CUBIC_EXT = 0x8334
  CUBIC_HP = 0x815F
  CULL_FACE = 0x0B44
  CULL_FACE_MODE = 0x0B45
  CULL_FRAGMENT_NV = 0x86E7
  CULL_MODES_NV = 0x86E0
  CULL_VERTEX_EXT = 0x81AA
  CULL_VERTEX_EYE_POSITION_EXT = 0x81AB
  CULL_VERTEX_IBM = 103050
  CULL_VERTEX_OBJECT_POSITION_EXT = 0x81AC
  CURRENT_ATTRIB_NV = 0x8626
  CURRENT_BINORMAL_EXT = 0x843C
  CURRENT_FOG_COORDINATE_EXT = 0x8453
  CURRENT_MATRIX_ARB = 0x8641
  CURRENT_MATRIX_INDEX_ARB = 0x8845
  CURRENT_MATRIX_NV = 0x8641
  CURRENT_MATRIX_STACK_DEPTH_ARB = 0x8640
  CURRENT_MATRIX_STACK_DEPTH_NV = 0x8640
  CURRENT_OCCLUSION_QUERY_ID_NV = 0x8865
  CURRENT_PALETTE_MATRIX_ARB = 0x8843
  CURRENT_PROGRAM = 0x8B8D
  CURRENT_QUERY = 0x8865
  CURRENT_QUERY_ARB = 0x8865
  CURRENT_RASTER_NORMAL_SGIX = 0x8406
  CURRENT_SECONDARY_COLOR_EXT = 0x8459
  CURRENT_TANGENT_EXT = 0x843B
  CURRENT_TIME_NV = 0x8E28
  CURRENT_VERTEX_ATTRIB = 0x8626
  CURRENT_VERTEX_ATTRIB_ARB = 0x8626
  CURRENT_VERTEX_EXT = 0x87E2
  CURRENT_VERTEX_WEIGHT_EXT = 0x850B
  CURRENT_WEIGHT_ARB = 0x86A8
  CW = 0x0900
  DARKEN_NV = 0x9297
  DATA_BUFFER_AMD = 0x9151
  DEBUG_CALLBACK_FUNCTION = 0x8244
  DEBUG_CALLBACK_FUNCTION_ARB = 0x8244
  DEBUG_CALLBACK_FUNCTION_KHR = 0x8244
  DEBUG_CALLBACK_USER_PARAM = 0x8245
  DEBUG_CALLBACK_USER_PARAM_ARB = 0x8245
  DEBUG_CALLBACK_USER_PARAM_KHR = 0x8245
  DEBUG_CATEGORY_API_ERROR_AMD = 0x9149
  DEBUG_CATEGORY_APPLICATION_AMD = 0x914F
  DEBUG_CATEGORY_DEPRECATION_AMD = 0x914B
  DEBUG_CATEGORY_OTHER_AMD = 0x9150
  DEBUG_CATEGORY_PERFORMANCE_AMD = 0x914D
  DEBUG_CATEGORY_SHADER_COMPILER_AMD = 0x914E
  DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD = 0x914C
  DEBUG_CATEGORY_WINDOW_SYSTEM_AMD = 0x914A
  DEBUG_GROUP_STACK_DEPTH = 0x826D
  DEBUG_GROUP_STACK_DEPTH_KHR = 0x826D
  DEBUG_LOGGED_MESSAGES = 0x9145
  DEBUG_LOGGED_MESSAGES_AMD = 0x9145
  DEBUG_LOGGED_MESSAGES_ARB = 0x9145
  DEBUG_LOGGED_MESSAGES_KHR = 0x9145
  DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = 0x8243
  DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB = 0x8243
  DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR = 0x8243
  DEBUG_OUTPUT = 0x92E0
  DEBUG_OUTPUT_KHR = 0x92E0
  DEBUG_OUTPUT_SYNCHRONOUS = 0x8242
  DEBUG_OUTPUT_SYNCHRONOUS_ARB = 0x8242
  DEBUG_OUTPUT_SYNCHRONOUS_KHR = 0x8242
  DEBUG_SEVERITY_HIGH = 0x9146
  DEBUG_SEVERITY_HIGH_AMD = 0x9146
  DEBUG_SEVERITY_HIGH_ARB = 0x9146
  DEBUG_SEVERITY_HIGH_KHR = 0x9146
  DEBUG_SEVERITY_LOW = 0x9148
  DEBUG_SEVERITY_LOW_AMD = 0x9148
  DEBUG_SEVERITY_LOW_ARB = 0x9148
  DEBUG_SEVERITY_LOW_KHR = 0x9148
  DEBUG_SEVERITY_MEDIUM = 0x9147
  DEBUG_SEVERITY_MEDIUM_AMD = 0x9147
  DEBUG_SEVERITY_MEDIUM_ARB = 0x9147
  DEBUG_SEVERITY_MEDIUM_KHR = 0x9147
  DEBUG_SEVERITY_NOTIFICATION = 0x826B
  DEBUG_SEVERITY_NOTIFICATION_KHR = 0x826B
  DEBUG_SOURCE_API = 0x8246
  DEBUG_SOURCE_API_ARB = 0x8246
  DEBUG_SOURCE_API_KHR = 0x8246
  DEBUG_SOURCE_APPLICATION = 0x824A
  DEBUG_SOURCE_APPLICATION_ARB = 0x824A
  DEBUG_SOURCE_APPLICATION_KHR = 0x824A
  DEBUG_SOURCE_OTHER = 0x824B
  DEBUG_SOURCE_OTHER_ARB = 0x824B
  DEBUG_SOURCE_OTHER_KHR = 0x824B
  DEBUG_SOURCE_SHADER_COMPILER = 0x8248
  DEBUG_SOURCE_SHADER_COMPILER_ARB = 0x8248
  DEBUG_SOURCE_SHADER_COMPILER_KHR = 0x8248
  DEBUG_SOURCE_THIRD_PARTY = 0x8249
  DEBUG_SOURCE_THIRD_PARTY_ARB = 0x8249
  DEBUG_SOURCE_THIRD_PARTY_KHR = 0x8249
  DEBUG_SOURCE_WINDOW_SYSTEM = 0x8247
  DEBUG_SOURCE_WINDOW_SYSTEM_ARB = 0x8247
  DEBUG_SOURCE_WINDOW_SYSTEM_KHR = 0x8247
  DEBUG_TYPE_DEPRECATED_BEHAVIOR = 0x824D
  DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB = 0x824D
  DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR = 0x824D
  DEBUG_TYPE_ERROR = 0x824C
  DEBUG_TYPE_ERROR_ARB = 0x824C
  DEBUG_TYPE_ERROR_KHR = 0x824C
  DEBUG_TYPE_MARKER = 0x8268
  DEBUG_TYPE_MARKER_KHR = 0x8268
  DEBUG_TYPE_OTHER = 0x8251
  DEBUG_TYPE_OTHER_ARB = 0x8251
  DEBUG_TYPE_OTHER_KHR = 0x8251
  DEBUG_TYPE_PERFORMANCE = 0x8250
  DEBUG_TYPE_PERFORMANCE_ARB = 0x8250
  DEBUG_TYPE_PERFORMANCE_KHR = 0x8250
  DEBUG_TYPE_POP_GROUP = 0x826A
  DEBUG_TYPE_POP_GROUP_KHR = 0x826A
  DEBUG_TYPE_PORTABILITY = 0x824F
  DEBUG_TYPE_PORTABILITY_ARB = 0x824F
  DEBUG_TYPE_PORTABILITY_KHR = 0x824F
  DEBUG_TYPE_PUSH_GROUP = 0x8269
  DEBUG_TYPE_PUSH_GROUP_KHR = 0x8269
  DEBUG_TYPE_UNDEFINED_BEHAVIOR = 0x824E
  DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB = 0x824E
  DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR = 0x824E
  DECODE_EXT = 0x8A49
  DECR = 0x1E03
  DECR_WRAP = 0x8508
  DECR_WRAP_EXT = 0x8508
  DEFORMATIONS_MASK_SGIX = 0x8196
  DELETE_STATUS = 0x8B80
  DEPENDENT_AR_TEXTURE_2D_NV = 0x86E9
  DEPENDENT_GB_TEXTURE_2D_NV = 0x86EA
  DEPENDENT_HILO_TEXTURE_2D_NV = 0x8858
  DEPENDENT_RGB_TEXTURE_3D_NV = 0x8859
  DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV = 0x885A
  DEPTH = 0x1801
  DEPTH24_STENCIL8 = 0x88F0
  DEPTH24_STENCIL8_EXT = 0x88F0
  DEPTH32F_STENCIL8 = 0x8CAD
  DEPTH32F_STENCIL8_NV = 0x8DAC
  DEPTH_ATTACHMENT = 0x8D00
  DEPTH_ATTACHMENT_EXT = 0x8D00
  DEPTH_BOUNDS_EXT = 0x8891
  DEPTH_BOUNDS_TEST_EXT = 0x8890
  DEPTH_BUFFER_BIT = 0x00000100
  DEPTH_BUFFER_FLOAT_MODE_NV = 0x8DAF
  DEPTH_CLAMP = 0x864F
  DEPTH_CLAMP_FAR_AMD = 0x901F
  DEPTH_CLAMP_NEAR_AMD = 0x901E
  DEPTH_CLAMP_NV = 0x864F
  DEPTH_CLEAR_VALUE = 0x0B73
  DEPTH_COMPONENT = 0x1902
  DEPTH_COMPONENT16 = 0x81A5
  DEPTH_COMPONENT16_ARB = 0x81A5
  DEPTH_COMPONENT16_SGIX = 0x81A5
  DEPTH_COMPONENT24 = 0x81A6
  DEPTH_COMPONENT24_ARB = 0x81A6
  DEPTH_COMPONENT24_SGIX = 0x81A6
  DEPTH_COMPONENT32 = 0x81A7
  DEPTH_COMPONENT32F = 0x8CAC
  DEPTH_COMPONENT32F_NV = 0x8DAB
  DEPTH_COMPONENT32_ARB = 0x81A7
  DEPTH_COMPONENT32_SGIX = 0x81A7
  DEPTH_COMPONENTS = 0x8284
  DEPTH_FUNC = 0x0B74
  DEPTH_RANGE = 0x0B70
  DEPTH_RENDERABLE = 0x8287
  DEPTH_STENCIL = 0x84F9
  DEPTH_STENCIL_ATTACHMENT = 0x821A
  DEPTH_STENCIL_EXT = 0x84F9
  DEPTH_STENCIL_NV = 0x84F9
  DEPTH_STENCIL_TEXTURE_MODE = 0x90EA
  DEPTH_STENCIL_TO_BGRA_NV = 0x886F
  DEPTH_STENCIL_TO_RGBA_NV = 0x886E
  DEPTH_TEST = 0x0B71
  DEPTH_TEXTURE_MODE_ARB = 0x884B
  DEPTH_WRITEMASK = 0x0B72
  DETAIL_TEXTURE_2D_BINDING_SGIS = 0x8096
  DETAIL_TEXTURE_2D_SGIS = 0x8095
  DETAIL_TEXTURE_FUNC_POINTS_SGIS = 0x809C
  DETAIL_TEXTURE_LEVEL_SGIS = 0x809A
  DETAIL_TEXTURE_MODE_SGIS = 0x809B
  DIFFERENCE_NV = 0x929E
  DISCARD_ATI = 0x8763
  DISCARD_NV = 0x8530
  DISCRETE_AMD = 0x9006
  DISJOINT_NV = 0x9283
  DISPATCH_INDIRECT_BUFFER = 0x90EE
  DISPATCH_INDIRECT_BUFFER_BINDING = 0x90EF
  DISTANCE_ATTENUATION_EXT = 0x8129
  DISTANCE_ATTENUATION_SGIS = 0x8129
  DITHER = 0x0BD0
  DONT_CARE = 0x1100
  DOT2_ADD_ATI = 0x896C
  DOT3_ATI = 0x8966
  DOT3_RGBA_ARB = 0x86AF
  DOT3_RGBA_EXT = 0x8741
  DOT3_RGB_ARB = 0x86AE
  DOT3_RGB_EXT = 0x8740
  DOT4_ATI = 0x8967
  DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV = 0x885D
  DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV = 0x86F3
  DOT_PRODUCT_DEPTH_REPLACE_NV = 0x86ED
  DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV = 0x86F1
  DOT_PRODUCT_NV = 0x86EC
  DOT_PRODUCT_PASS_THROUGH_NV = 0x885B
  DOT_PRODUCT_REFLECT_CUBE_MAP_NV = 0x86F2
  DOT_PRODUCT_TEXTURE_1D_NV = 0x885C
  DOT_PRODUCT_TEXTURE_2D_NV = 0x86EE
  DOT_PRODUCT_TEXTURE_3D_NV = 0x86EF
  DOT_PRODUCT_TEXTURE_CUBE_MAP_NV = 0x86F0
  DOT_PRODUCT_TEXTURE_RECTANGLE_NV = 0x864E
  DOUBLE = 0x140A
  DOUBLEBUFFER = 0x0C32
  DOUBLE_MAT2 = 0x8F46
  DOUBLE_MAT2_EXT = 0x8F46
  DOUBLE_MAT2x3 = 0x8F49
  DOUBLE_MAT2x3_EXT = 0x8F49
  DOUBLE_MAT2x4 = 0x8F4A
  DOUBLE_MAT2x4_EXT = 0x8F4A
  DOUBLE_MAT3 = 0x8F47
  DOUBLE_MAT3_EXT = 0x8F47
  DOUBLE_MAT3x2 = 0x8F4B
  DOUBLE_MAT3x2_EXT = 0x8F4B
  DOUBLE_MAT3x4 = 0x8F4C
  DOUBLE_MAT3x4_EXT = 0x8F4C
  DOUBLE_MAT4 = 0x8F48
  DOUBLE_MAT4_EXT = 0x8F48
  DOUBLE_MAT4x2 = 0x8F4D
  DOUBLE_MAT4x2_EXT = 0x8F4D
  DOUBLE_MAT4x3 = 0x8F4E
  DOUBLE_MAT4x3_EXT = 0x8F4E
  DOUBLE_VEC2 = 0x8FFC
  DOUBLE_VEC2_EXT = 0x8FFC
  DOUBLE_VEC3 = 0x8FFD
  DOUBLE_VEC3_EXT = 0x8FFD
  DOUBLE_VEC4 = 0x8FFE
  DOUBLE_VEC4_EXT = 0x8FFE
  DRAW_BUFFER = 0x0C01
  DRAW_BUFFER0 = 0x8825
  DRAW_BUFFER0_ARB = 0x8825
  DRAW_BUFFER0_ATI = 0x8825
  DRAW_BUFFER1 = 0x8826
  DRAW_BUFFER10 = 0x882F
  DRAW_BUFFER10_ARB = 0x882F
  DRAW_BUFFER10_ATI = 0x882F
  DRAW_BUFFER11 = 0x8830
  DRAW_BUFFER11_ARB = 0x8830
  DRAW_BUFFER11_ATI = 0x8830
  DRAW_BUFFER12 = 0x8831
  DRAW_BUFFER12_ARB = 0x8831
  DRAW_BUFFER12_ATI = 0x8831
  DRAW_BUFFER13 = 0x8832
  DRAW_BUFFER13_ARB = 0x8832
  DRAW_BUFFER13_ATI = 0x8832
  DRAW_BUFFER14 = 0x8833
  DRAW_BUFFER14_ARB = 0x8833
  DRAW_BUFFER14_ATI = 0x8833
  DRAW_BUFFER15 = 0x8834
  DRAW_BUFFER15_ARB = 0x8834
  DRAW_BUFFER15_ATI = 0x8834
  DRAW_BUFFER1_ARB = 0x8826
  DRAW_BUFFER1_ATI = 0x8826
  DRAW_BUFFER2 = 0x8827
  DRAW_BUFFER2_ARB = 0x8827
  DRAW_BUFFER2_ATI = 0x8827
  DRAW_BUFFER3 = 0x8828
  DRAW_BUFFER3_ARB = 0x8828
  DRAW_BUFFER3_ATI = 0x8828
  DRAW_BUFFER4 = 0x8829
  DRAW_BUFFER4_ARB = 0x8829
  DRAW_BUFFER4_ATI = 0x8829
  DRAW_BUFFER5 = 0x882A
  DRAW_BUFFER5_ARB = 0x882A
  DRAW_BUFFER5_ATI = 0x882A
  DRAW_BUFFER6 = 0x882B
  DRAW_BUFFER6_ARB = 0x882B
  DRAW_BUFFER6_ATI = 0x882B
  DRAW_BUFFER7 = 0x882C
  DRAW_BUFFER7_ARB = 0x882C
  DRAW_BUFFER7_ATI = 0x882C
  DRAW_BUFFER8 = 0x882D
  DRAW_BUFFER8_ARB = 0x882D
  DRAW_BUFFER8_ATI = 0x882D
  DRAW_BUFFER9 = 0x882E
  DRAW_BUFFER9_ARB = 0x882E
  DRAW_BUFFER9_ATI = 0x882E
  DRAW_FRAMEBUFFER = 0x8CA9
  DRAW_FRAMEBUFFER_BINDING = 0x8CA6
  DRAW_FRAMEBUFFER_BINDING_EXT = 0x8CA6
  DRAW_FRAMEBUFFER_EXT = 0x8CA9
  DRAW_INDIRECT_ADDRESS_NV = 0x8F41
  DRAW_INDIRECT_BUFFER = 0x8F3F
  DRAW_INDIRECT_BUFFER_BINDING = 0x8F43
  DRAW_INDIRECT_LENGTH_NV = 0x8F42
  DRAW_INDIRECT_UNIFIED_NV = 0x8F40
  DRAW_PIXELS_APPLE = 0x8A0A
  DSDT8_MAG8_INTENSITY8_NV = 0x870B
  DSDT8_MAG8_NV = 0x870A
  DSDT8_NV = 0x8709
  DSDT_MAG_INTENSITY_NV = 0x86DC
  DSDT_MAG_NV = 0x86F6
  DSDT_MAG_VIB_NV = 0x86F7
  DSDT_NV = 0x86F5
  DST_ALPHA = 0x0304
  DST_ATOP_NV = 0x928F
  DST_COLOR = 0x0306
  DST_IN_NV = 0x928B
  DST_NV = 0x9287
  DST_OUT_NV = 0x928D
  DST_OVER_NV = 0x9289
  DS_BIAS_NV = 0x8716
  DS_SCALE_NV = 0x8710
  DT_BIAS_NV = 0x8717
  DT_SCALE_NV = 0x8711
  DU8DV8_ATI = 0x877A
  DUAL_ALPHA12_SGIS = 0x8112
  DUAL_ALPHA16_SGIS = 0x8113
  DUAL_ALPHA4_SGIS = 0x8110
  DUAL_ALPHA8_SGIS = 0x8111
  DUAL_INTENSITY12_SGIS = 0x811A
  DUAL_INTENSITY16_SGIS = 0x811B
  DUAL_INTENSITY4_SGIS = 0x8118
  DUAL_INTENSITY8_SGIS = 0x8119
  DUAL_LUMINANCE12_SGIS = 0x8116
  DUAL_LUMINANCE16_SGIS = 0x8117
  DUAL_LUMINANCE4_SGIS = 0x8114
  DUAL_LUMINANCE8_SGIS = 0x8115
  DUAL_LUMINANCE_ALPHA4_SGIS = 0x811C
  DUAL_LUMINANCE_ALPHA8_SGIS = 0x811D
  DUAL_TEXTURE_SELECT_SGIS = 0x8124
  DUDV_ATI = 0x8779
  DUP_FIRST_CUBIC_CURVE_TO_NV = 0xF2
  DUP_LAST_CUBIC_CURVE_TO_NV = 0xF4
  DYNAMIC_ATI = 0x8761
  DYNAMIC_COPY = 0x88EA
  DYNAMIC_COPY_ARB = 0x88EA
  DYNAMIC_DRAW = 0x88E8
  DYNAMIC_DRAW_ARB = 0x88E8
  DYNAMIC_READ = 0x88E9
  DYNAMIC_READ_ARB = 0x88E9
  DYNAMIC_STORAGE_BIT = 0x0100
  EDGEFLAG_BIT_PGI = 0x00040000
  EDGE_FLAG_ARRAY_ADDRESS_NV = 0x8F26
  EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB = 0x889B
  EDGE_FLAG_ARRAY_COUNT_EXT = 0x808D
  EDGE_FLAG_ARRAY_EXT = 0x8079
  EDGE_FLAG_ARRAY_LENGTH_NV = 0x8F30
  EDGE_FLAG_ARRAY_LIST_IBM = 103075
  EDGE_FLAG_ARRAY_LIST_STRIDE_IBM = 103085
  EDGE_FLAG_ARRAY_POINTER_EXT = 0x8093
  EDGE_FLAG_ARRAY_STRIDE_EXT = 0x808C
  EIGHTH_BIT_ATI = 0x00000020
  ELEMENT_ARRAY_ADDRESS_NV = 0x8F29
  ELEMENT_ARRAY_APPLE = 0x8A0C
  ELEMENT_ARRAY_ATI = 0x8768
  ELEMENT_ARRAY_BARRIER_BIT = 0x00000002
  ELEMENT_ARRAY_BARRIER_BIT_EXT = 0x00000002
  ELEMENT_ARRAY_BUFFER = 0x8893
  ELEMENT_ARRAY_BUFFER_ARB = 0x8893
  ELEMENT_ARRAY_BUFFER_BINDING = 0x8895
  ELEMENT_ARRAY_BUFFER_BINDING_ARB = 0x8895
  ELEMENT_ARRAY_LENGTH_NV = 0x8F33
  ELEMENT_ARRAY_POINTER_APPLE = 0x8A0E
  ELEMENT_ARRAY_POINTER_ATI = 0x876A
  ELEMENT_ARRAY_TYPE_APPLE = 0x8A0D
  ELEMENT_ARRAY_TYPE_ATI = 0x8769
  ELEMENT_ARRAY_UNIFIED_NV = 0x8F1F
  EMBOSS_CONSTANT_NV = 0x855E
  EMBOSS_LIGHT_NV = 0x855D
  EMBOSS_MAP_NV = 0x855F
  EQUAL = 0x0202
  EQUIV = 0x1509
  EVAL_2D_NV = 0x86C0
  EVAL_FRACTIONAL_TESSELLATION_NV = 0x86C5
  EVAL_TRIANGULAR_2D_NV = 0x86C1
  EVAL_VERTEX_ATTRIB0_NV = 0x86C6
  EVAL_VERTEX_ATTRIB10_NV = 0x86D0
  EVAL_VERTEX_ATTRIB11_NV = 0x86D1
  EVAL_VERTEX_ATTRIB12_NV = 0x86D2
  EVAL_VERTEX_ATTRIB13_NV = 0x86D3
  EVAL_VERTEX_ATTRIB14_NV = 0x86D4
  EVAL_VERTEX_ATTRIB15_NV = 0x86D5
  EVAL_VERTEX_ATTRIB1_NV = 0x86C7
  EVAL_VERTEX_ATTRIB2_NV = 0x86C8
  EVAL_VERTEX_ATTRIB3_NV = 0x86C9
  EVAL_VERTEX_ATTRIB4_NV = 0x86CA
  EVAL_VERTEX_ATTRIB5_NV = 0x86CB
  EVAL_VERTEX_ATTRIB6_NV = 0x86CC
  EVAL_VERTEX_ATTRIB7_NV = 0x86CD
  EVAL_VERTEX_ATTRIB8_NV = 0x86CE
  EVAL_VERTEX_ATTRIB9_NV = 0x86CF
  EXCLUSION_NV = 0x92A0
  EXPAND_NEGATE_NV = 0x8539
  EXPAND_NORMAL_NV = 0x8538
  EXTENSIONS = 0x1F03
  EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD = 0x9160
  EYE_DISTANCE_TO_LINE_SGIS = 0x81F2
  EYE_DISTANCE_TO_POINT_SGIS = 0x81F0
  EYE_LINE_SGIS = 0x81F6
  EYE_PLANE = 0x2502
  EYE_PLANE_ABSOLUTE_NV = 0x855C
  EYE_POINT_SGIS = 0x81F4
  EYE_RADIAL_NV = 0x855B
  E_TIMES_F_NV = 0x8531
  FACTOR_MAX_AMD = 0x901D
  FACTOR_MIN_AMD = 0x901C
  FAILURE_NV = 0x9030
  FALSE = 0
  FASTEST = 0x1101
  FENCE_APPLE = 0x8A0B
  FENCE_CONDITION_NV = 0x84F4
  FENCE_STATUS_NV = 0x84F3
  FIELDS_NV = 0x8E27
  FIELD_LOWER_NV = 0x9023
  FIELD_UPPER_NV = 0x9022
  FILE_NAME_NV = 0x9074
  FILL = 0x1B02
  FILTER = 0x829A
  FILTER4_SGIS = 0x8146
  FIRST_TO_REST_NV = 0x90AF
  FIRST_VERTEX_CONVENTION = 0x8E4D
  FIRST_VERTEX_CONVENTION_EXT = 0x8E4D
  FIXED = 0x140C
  FIXED_OES = 0x140C
  FIXED_ONLY = 0x891D
  FIXED_ONLY_ARB = 0x891D
  FLOAT = 0x1406
  FLOAT16_NV = 0x8FF8
  FLOAT16_VEC2_NV = 0x8FF9
  FLOAT16_VEC3_NV = 0x8FFA
  FLOAT16_VEC4_NV = 0x8FFB
  FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD
  FLOAT_32_UNSIGNED_INT_24_8_REV_NV = 0x8DAD
  FLOAT_CLEAR_COLOR_VALUE_NV = 0x888D
  FLOAT_MAT2 = 0x8B5A
  FLOAT_MAT2_ARB = 0x8B5A
  FLOAT_MAT2x3 = 0x8B65
  FLOAT_MAT2x4 = 0x8B66
  FLOAT_MAT3 = 0x8B5B
  FLOAT_MAT3_ARB = 0x8B5B
  FLOAT_MAT3x2 = 0x8B67
  FLOAT_MAT3x4 = 0x8B68
  FLOAT_MAT4 = 0x8B5C
  FLOAT_MAT4_ARB = 0x8B5C
  FLOAT_MAT4x2 = 0x8B69
  FLOAT_MAT4x3 = 0x8B6A
  FLOAT_R16_NV = 0x8884
  FLOAT_R32_NV = 0x8885
  FLOAT_RG16_NV = 0x8886
  FLOAT_RG32_NV = 0x8887
  FLOAT_RGB16_NV = 0x8888
  FLOAT_RGB32_NV = 0x8889
  FLOAT_RGBA16_NV = 0x888A
  FLOAT_RGBA32_NV = 0x888B
  FLOAT_RGBA_MODE_NV = 0x888E
  FLOAT_RGBA_NV = 0x8883
  FLOAT_RGB_NV = 0x8882
  FLOAT_RG_NV = 0x8881
  FLOAT_R_NV = 0x8880
  FLOAT_VEC2 = 0x8B50
  FLOAT_VEC2_ARB = 0x8B50
  FLOAT_VEC3 = 0x8B51
  FLOAT_VEC3_ARB = 0x8B51
  FLOAT_VEC4 = 0x8B52
  FLOAT_VEC4_ARB = 0x8B52
  FOG = 0x0B60
  FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB = 0x889D
  FOG_COORDINATE_ARRAY_EXT = 0x8457
  FOG_COORDINATE_ARRAY_LIST_IBM = 103076
  FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM = 103086
  FOG_COORDINATE_ARRAY_POINTER_EXT = 0x8456
  FOG_COORDINATE_ARRAY_STRIDE_EXT = 0x8455
  FOG_COORDINATE_ARRAY_TYPE_EXT = 0x8454
  FOG_COORDINATE_EXT = 0x8451
  FOG_COORDINATE_SOURCE_EXT = 0x8450
  FOG_COORD_ARRAY_ADDRESS_NV = 0x8F28
  FOG_COORD_ARRAY_LENGTH_NV = 0x8F32
  FOG_DISTANCE_MODE_NV = 0x855A
  FOG_FUNC_POINTS_SGIS = 0x812B
  FOG_FUNC_SGIS = 0x812A
  FOG_OFFSET_SGIX = 0x8198
  FOG_OFFSET_VALUE_SGIX = 0x8199
  FOG_SPECULAR_TEXTURE_WIN = 0x80EC
  FONT_ASCENDER_BIT_NV = 0x00200000
  FONT_DESCENDER_BIT_NV = 0x00400000
  FONT_HAS_KERNING_BIT_NV = 0x10000000
  FONT_HEIGHT_BIT_NV = 0x00800000
  FONT_MAX_ADVANCE_HEIGHT_BIT_NV = 0x02000000
  FONT_MAX_ADVANCE_WIDTH_BIT_NV = 0x01000000
  FONT_UNDERLINE_POSITION_BIT_NV = 0x04000000
  FONT_UNDERLINE_THICKNESS_BIT_NV = 0x08000000
  FONT_UNITS_PER_EM_BIT_NV = 0x00100000
  FONT_X_MAX_BOUNDS_BIT_NV = 0x00040000
  FONT_X_MIN_BOUNDS_BIT_NV = 0x00010000
  FONT_Y_MAX_BOUNDS_BIT_NV = 0x00080000
  FONT_Y_MIN_BOUNDS_BIT_NV = 0x00020000
  FORCE_BLUE_TO_ONE_NV = 0x8860
  FORMAT_SUBSAMPLE_244_244_OML = 0x8983
  FORMAT_SUBSAMPLE_24_24_OML = 0x8982
  FRACTIONAL_EVEN = 0x8E7C
  FRACTIONAL_ODD = 0x8E7B
  FRAGMENT_COLOR_EXT = 0x834C
  FRAGMENT_COLOR_MATERIAL_FACE_SGIX = 0x8402
  FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX = 0x8403
  FRAGMENT_COLOR_MATERIAL_SGIX = 0x8401
  FRAGMENT_DEPTH_EXT = 0x8452
  FRAGMENT_INTERPOLATION_OFFSET_BITS = 0x8E5D
  FRAGMENT_LIGHT0_SGIX = 0x840C
  FRAGMENT_LIGHT1_SGIX = 0x840D
  FRAGMENT_LIGHT2_SGIX = 0x840E
  FRAGMENT_LIGHT3_SGIX = 0x840F
  FRAGMENT_LIGHT4_SGIX = 0x8410
  FRAGMENT_LIGHT5_SGIX = 0x8411
  FRAGMENT_LIGHT6_SGIX = 0x8412
  FRAGMENT_LIGHT7_SGIX = 0x8413
  FRAGMENT_LIGHTING_SGIX = 0x8400
  FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX = 0x840A
  FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX = 0x8408
  FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX = 0x840B
  FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX = 0x8409
  FRAGMENT_MATERIAL_EXT = 0x8349
  FRAGMENT_NORMAL_EXT = 0x834A
  FRAGMENT_PROGRAM_ARB = 0x8804
  FRAGMENT_PROGRAM_BINDING_NV = 0x8873
  FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV = 0x8E5D
  FRAGMENT_PROGRAM_NV = 0x8870
  FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV = 0x8DA4
  FRAGMENT_SHADER = 0x8B30
  FRAGMENT_SHADER_ARB = 0x8B30
  FRAGMENT_SHADER_ATI = 0x8920
  FRAGMENT_SHADER_BIT = 0x00000002
  FRAGMENT_SHADER_BIT_EXT = 0x00000002
  FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8B
  FRAGMENT_SHADER_DERIVATIVE_HINT_ARB = 0x8B8B
  FRAGMENT_SUBROUTINE = 0x92EC
  FRAGMENT_SUBROUTINE_UNIFORM = 0x92F2
  FRAGMENT_TEXTURE = 0x829F
  FRAMEBUFFER = 0x8D40
  FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 0x8215
  FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 0x8214
  FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 0x8210
  FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 0x8211
  FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 0x8216
  FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 0x8213
  FRAMEBUFFER_ATTACHMENT_LAYERED = 0x8DA7
  FRAMEBUFFER_ATTACHMENT_LAYERED_ARB = 0x8DA7
  FRAMEBUFFER_ATTACHMENT_LAYERED_EXT = 0x8DA7
  FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1
  FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT = 0x8CD1
  FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0
  FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT = 0x8CD0
  FRAMEBUFFER_ATTACHMENT_RED_SIZE = 0x8212
  FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 0x8217
  FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT = 0x8CD4
  FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3
  FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT = 0x8CD3
  FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 0x8CD4
  FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT = 0x8CD4
  FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2
  FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT = 0x8CD2
  FRAMEBUFFER_BARRIER_BIT = 0x00000400
  FRAMEBUFFER_BARRIER_BIT_EXT = 0x00000400
  FRAMEBUFFER_BINDING = 0x8CA6
  FRAMEBUFFER_BINDING_EXT = 0x8CA6
  FRAMEBUFFER_BLEND = 0x828B
  FRAMEBUFFER_COMPLETE = 0x8CD5
  FRAMEBUFFER_COMPLETE_EXT = 0x8CD5
  FRAMEBUFFER_DEFAULT = 0x8218
  FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = 0x9314
  FRAMEBUFFER_DEFAULT_HEIGHT = 0x9311
  FRAMEBUFFER_DEFAULT_LAYERS = 0x9312
  FRAMEBUFFER_DEFAULT_SAMPLES = 0x9313
  FRAMEBUFFER_DEFAULT_WIDTH = 0x9310
  FRAMEBUFFER_EXT = 0x8D40
  FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6
  FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT = 0x8CD6
  FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT = 0x8CD9
  FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = 0x8CDB
  FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT = 0x8CDB
  FRAMEBUFFER_INCOMPLETE_FORMATS_EXT = 0x8CDA
  FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB = 0x8DA9
  FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT = 0x8DA9
  FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = 0x8DA8
  FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB = 0x8DA8
  FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT = 0x8DA8
  FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7
  FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT = 0x8CD7
  FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 0x8D56
  FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT = 0x8D56
  FRAMEBUFFER_INCOMPLETE_READ_BUFFER = 0x8CDC
  FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT = 0x8CDC
  FRAMEBUFFER_RENDERABLE = 0x8289
  FRAMEBUFFER_RENDERABLE_LAYERED = 0x828A
  FRAMEBUFFER_SRGB = 0x8DB9
  FRAMEBUFFER_SRGB_CAPABLE_EXT = 0x8DBA
  FRAMEBUFFER_SRGB_EXT = 0x8DB9
  FRAMEBUFFER_UNDEFINED = 0x8219
  FRAMEBUFFER_UNSUPPORTED = 0x8CDD
  FRAMEBUFFER_UNSUPPORTED_EXT = 0x8CDD
  FRAMEZOOM_FACTOR_SGIX = 0x818C
  FRAMEZOOM_SGIX = 0x818B
  FRAME_NV = 0x8E26
  FRONT = 0x0404
  FRONT_AND_BACK = 0x0408
  FRONT_FACE = 0x0B46
  FRONT_LEFT = 0x0400
  FRONT_RIGHT = 0x0401
  FULL_RANGE_EXT = 0x87E1
  FULL_STIPPLE_HINT_PGI = 0x1A219
  FULL_SUPPORT = 0x82B7
  FUNC_ADD = 0x8006
  FUNC_ADD_EXT = 0x8006
  FUNC_REVERSE_SUBTRACT = 0x800B
  FUNC_REVERSE_SUBTRACT_EXT = 0x800B
  FUNC_SUBTRACT = 0x800A
  FUNC_SUBTRACT_EXT = 0x800A
  GENERATE_MIPMAP_HINT_SGIS = 0x8192
  GENERATE_MIPMAP_SGIS = 0x8191
  GENERIC_ATTRIB_NV = 0x8C7D
  GEOMETRY_DEFORMATION_BIT_SGIX = 0x00000002
  GEOMETRY_DEFORMATION_SGIX = 0x8194
  GEOMETRY_INPUT_TYPE = 0x8917
  GEOMETRY_INPUT_TYPE_ARB = 0x8DDB
  GEOMETRY_INPUT_TYPE_EXT = 0x8DDB
  GEOMETRY_OUTPUT_TYPE = 0x8918
  GEOMETRY_OUTPUT_TYPE_ARB = 0x8DDC
  GEOMETRY_OUTPUT_TYPE_EXT = 0x8DDC
  GEOMETRY_PROGRAM_NV = 0x8C26
  GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV = 0x8DA3
  GEOMETRY_SHADER = 0x8DD9
  GEOMETRY_SHADER_ARB = 0x8DD9
  GEOMETRY_SHADER_BIT = 0x00000004
  GEOMETRY_SHADER_EXT = 0x8DD9
  GEOMETRY_SHADER_INVOCATIONS = 0x887F
  GEOMETRY_SUBROUTINE = 0x92EB
  GEOMETRY_SUBROUTINE_UNIFORM = 0x92F1
  GEOMETRY_TEXTURE = 0x829E
  GEOMETRY_VERTICES_OUT = 0x8916
  GEOMETRY_VERTICES_OUT_ARB = 0x8DDA
  GEOMETRY_VERTICES_OUT_EXT = 0x8DDA
  GEQUAL = 0x0206
  GET_TEXTURE_IMAGE_FORMAT = 0x8291
  GET_TEXTURE_IMAGE_TYPE = 0x8292
  GLOBAL_ALPHA_FACTOR_SUN = 0x81DA
  GLOBAL_ALPHA_SUN = 0x81D9
  GLYPH_HAS_KERNING_BIT_NV = 0x100
  GLYPH_HEIGHT_BIT_NV = 0x02
  GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV = 0x10
  GLYPH_HORIZONTAL_BEARING_X_BIT_NV = 0x04
  GLYPH_HORIZONTAL_BEARING_Y_BIT_NV = 0x08
  GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV = 0x80
  GLYPH_VERTICAL_BEARING_X_BIT_NV = 0x20
  GLYPH_VERTICAL_BEARING_Y_BIT_NV = 0x40
  GLYPH_WIDTH_BIT_NV = 0x01
  GPU_ADDRESS_NV = 0x8F34
  GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX = 0x9049
  GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX = 0x9047
  GPU_MEMORY_INFO_EVICTED_MEMORY_NVX = 0x904B
  GPU_MEMORY_INFO_EVICTION_COUNT_NVX = 0x904A
  GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX = 0x9048
  GREATER = 0x0204
  GREEN = 0x1904
  GREEN_BIT_ATI = 0x00000002
  GREEN_INTEGER = 0x8D95
  GREEN_INTEGER_EXT = 0x8D95
  GREEN_MAX_CLAMP_INGR = 0x8565
  GREEN_MIN_CLAMP_INGR = 0x8561
  GREEN_NV = 0x1904
  GUILTY_CONTEXT_RESET_ARB = 0x8253
  HALF_APPLE = 0x140B
  HALF_BIAS_NEGATE_NV = 0x853B
  HALF_BIAS_NORMAL_NV = 0x853A
  HALF_BIT_ATI = 0x00000008
  HALF_FLOAT = 0x140B
  HALF_FLOAT_ARB = 0x140B
  HALF_FLOAT_NV = 0x140B
  HARDLIGHT_NV = 0x929B
  HARDMIX_NV = 0x92A9
  HIGH_FLOAT = 0x8DF2
  HIGH_INT = 0x8DF5
  HILO16_NV = 0x86F8
  HILO8_NV = 0x885E
  HILO_NV = 0x86F4
  HISTOGRAM_ALPHA_SIZE_EXT = 0x802B
  HISTOGRAM_BLUE_SIZE_EXT = 0x802A
  HISTOGRAM_EXT = 0x8024
  HISTOGRAM_FORMAT_EXT = 0x8027
  HISTOGRAM_GREEN_SIZE_EXT = 0x8029
  HISTOGRAM_LUMINANCE_SIZE_EXT = 0x802C
  HISTOGRAM_RED_SIZE_EXT = 0x8028
  HISTOGRAM_SINK_EXT = 0x802D
  HISTOGRAM_WIDTH_EXT = 0x8026
  HI_BIAS_NV = 0x8714
  HI_SCALE_NV = 0x870E
  HORIZONTAL_LINE_TO_NV = 0x06
  HSL_COLOR_NV = 0x92AF
  HSL_HUE_NV = 0x92AD
  HSL_LUMINOSITY_NV = 0x92B0
  HSL_SATURATION_NV = 0x92AE
  IDENTITY_NV = 0x862A
  IGNORE_BORDER_HP = 0x8150
  IMAGE_1D = 0x904C
  IMAGE_1D_ARRAY = 0x9052
  IMAGE_1D_ARRAY_EXT = 0x9052
  IMAGE_1D_EXT = 0x904C
  IMAGE_2D = 0x904D
  IMAGE_2D_ARRAY = 0x9053
  IMAGE_2D_ARRAY_EXT = 0x9053
  IMAGE_2D_EXT = 0x904D
  IMAGE_2D_MULTISAMPLE = 0x9055
  IMAGE_2D_MULTISAMPLE_ARRAY = 0x9056
  IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 0x9056
  IMAGE_2D_MULTISAMPLE_EXT = 0x9055
  IMAGE_2D_RECT = 0x904F
  IMAGE_2D_RECT_EXT = 0x904F
  IMAGE_3D = 0x904E
  IMAGE_3D_EXT = 0x904E
  IMAGE_BINDING_ACCESS = 0x8F3E
  IMAGE_BINDING_ACCESS_EXT = 0x8F3E
  IMAGE_BINDING_FORMAT = 0x906E
  IMAGE_BINDING_FORMAT_EXT = 0x906E
  IMAGE_BINDING_LAYER = 0x8F3D
  IMAGE_BINDING_LAYERED = 0x8F3C
  IMAGE_BINDING_LAYERED_EXT = 0x8F3C
  IMAGE_BINDING_LAYER_EXT = 0x8F3D
  IMAGE_BINDING_LEVEL = 0x8F3B
  IMAGE_BINDING_LEVEL_EXT = 0x8F3B
  IMAGE_BINDING_NAME = 0x8F3A
  IMAGE_BINDING_NAME_EXT = 0x8F3A
  IMAGE_BUFFER = 0x9051
  IMAGE_BUFFER_EXT = 0x9051
  IMAGE_CLASS_10_10_10_2 = 0x82C3
  IMAGE_CLASS_11_11_10 = 0x82C2
  IMAGE_CLASS_1_X_16 = 0x82BE
  IMAGE_CLASS_1_X_32 = 0x82BB
  IMAGE_CLASS_1_X_8 = 0x82C1
  IMAGE_CLASS_2_X_16 = 0x82BD
  IMAGE_CLASS_2_X_32 = 0x82BA
  IMAGE_CLASS_2_X_8 = 0x82C0
  IMAGE_CLASS_4_X_16 = 0x82BC
  IMAGE_CLASS_4_X_32 = 0x82B9
  IMAGE_CLASS_4_X_8 = 0x82BF
  IMAGE_COMPATIBILITY_CLASS = 0x82A8
  IMAGE_CUBE = 0x9050
  IMAGE_CUBE_EXT = 0x9050
  IMAGE_CUBE_MAP_ARRAY = 0x9054
  IMAGE_CUBE_MAP_ARRAY_EXT = 0x9054
  IMAGE_CUBIC_WEIGHT_HP = 0x815E
  IMAGE_FORMAT_COMPATIBILITY_BY_CLASS = 0x90C9
  IMAGE_FORMAT_COMPATIBILITY_BY_SIZE = 0x90C8
  IMAGE_FORMAT_COMPATIBILITY_TYPE = 0x90C7
  IMAGE_MAG_FILTER_HP = 0x815C
  IMAGE_MIN_FILTER_HP = 0x815D
  IMAGE_PIXEL_FORMAT = 0x82A9
  IMAGE_PIXEL_TYPE = 0x82AA
  IMAGE_ROTATE_ANGLE_HP = 0x8159
  IMAGE_ROTATE_ORIGIN_X_HP = 0x815A
  IMAGE_ROTATE_ORIGIN_Y_HP = 0x815B
  IMAGE_SCALE_X_HP = 0x8155
  IMAGE_SCALE_Y_HP = 0x8156
  IMAGE_TEXEL_SIZE = 0x82A7
  IMAGE_TRANSFORM_2D_HP = 0x8161
  IMAGE_TRANSLATE_X_HP = 0x8157
  IMAGE_TRANSLATE_Y_HP = 0x8158
  IMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9B
  IMPLEMENTATION_COLOR_READ_FORMAT_OES = 0x8B9B
  IMPLEMENTATION_COLOR_READ_TYPE = 0x8B9A
  IMPLEMENTATION_COLOR_READ_TYPE_OES = 0x8B9A
  INCR = 0x1E02
  INCR_WRAP = 0x8507
  INCR_WRAP_EXT = 0x8507
  INDEX_ARRAY_ADDRESS_NV = 0x8F24
  INDEX_ARRAY_BUFFER_BINDING_ARB = 0x8899
  INDEX_ARRAY_COUNT_EXT = 0x8087
  INDEX_ARRAY_EXT = 0x8077
  INDEX_ARRAY_LENGTH_NV = 0x8F2E
  INDEX_ARRAY_LIST_IBM = 103073
  INDEX_ARRAY_LIST_STRIDE_IBM = 103083
  INDEX_ARRAY_POINTER_EXT = 0x8091
  INDEX_ARRAY_STRIDE_EXT = 0x8086
  INDEX_ARRAY_TYPE_EXT = 0x8085
  INDEX_BIT_PGI = 0x00080000
  INDEX_MATERIAL_EXT = 0x81B8
  INDEX_MATERIAL_FACE_EXT = 0x81BA
  INDEX_MATERIAL_PARAMETER_EXT = 0x81B9
  INDEX_TEST_EXT = 0x81B5
  INDEX_TEST_FUNC_EXT = 0x81B6
  INDEX_TEST_REF_EXT = 0x81B7
  INFO_LOG_LENGTH = 0x8B84
  INNOCENT_CONTEXT_RESET_ARB = 0x8254
  INSTRUMENT_BUFFER_POINTER_SGIX = 0x8180
  INSTRUMENT_MEASUREMENTS_SGIX = 0x8181
  INT = 0x1404
  INT16_NV = 0x8FE4
  INT16_VEC2_NV = 0x8FE5
  INT16_VEC3_NV = 0x8FE6
  INT16_VEC4_NV = 0x8FE7
  INT64_NV = 0x140E
  INT64_VEC2_NV = 0x8FE9
  INT64_VEC3_NV = 0x8FEA
  INT64_VEC4_NV = 0x8FEB
  INT8_NV = 0x8FE0
  INT8_VEC2_NV = 0x8FE1
  INT8_VEC3_NV = 0x8FE2
  INT8_VEC4_NV = 0x8FE3
  INTENSITY12_EXT = 0x804C
  INTENSITY16F_ARB = 0x881D
  INTENSITY16I_EXT = 0x8D8B
  INTENSITY16UI_EXT = 0x8D79
  INTENSITY16_EXT = 0x804D
  INTENSITY16_SNORM = 0x901B
  INTENSITY32F_ARB = 0x8817
  INTENSITY32I_EXT = 0x8D85
  INTENSITY32UI_EXT = 0x8D73
  INTENSITY4_EXT = 0x804A
  INTENSITY8I_EXT = 0x8D91
  INTENSITY8UI_EXT = 0x8D7F
  INTENSITY8_EXT = 0x804B
  INTENSITY8_SNORM = 0x9017
  INTENSITY_EXT = 0x8049
  INTENSITY_FLOAT16_APPLE = 0x881D
  INTENSITY_FLOAT16_ATI = 0x881D
  INTENSITY_FLOAT32_APPLE = 0x8817
  INTENSITY_FLOAT32_ATI = 0x8817
  INTENSITY_SNORM = 0x9013
  INTERLACE_OML = 0x8980
  INTERLACE_READ_INGR = 0x8568
  INTERLACE_READ_OML = 0x8981
  INTERLACE_SGIX = 0x8094
  INTERLEAVED_ATTRIBS = 0x8C8C
  INTERLEAVED_ATTRIBS_EXT = 0x8C8C
  INTERLEAVED_ATTRIBS_NV = 0x8C8C
  INTERNALFORMAT_ALPHA_SIZE = 0x8274
  INTERNALFORMAT_ALPHA_TYPE = 0x827B
  INTERNALFORMAT_BLUE_SIZE = 0x8273
  INTERNALFORMAT_BLUE_TYPE = 0x827A
  INTERNALFORMAT_DEPTH_SIZE = 0x8275
  INTERNALFORMAT_DEPTH_TYPE = 0x827C
  INTERNALFORMAT_GREEN_SIZE = 0x8272
  INTERNALFORMAT_GREEN_TYPE = 0x8279
  INTERNALFORMAT_PREFERRED = 0x8270
  INTERNALFORMAT_RED_SIZE = 0x8271
  INTERNALFORMAT_RED_TYPE = 0x8278
  INTERNALFORMAT_SHARED_SIZE = 0x8277
  INTERNALFORMAT_STENCIL_SIZE = 0x8276
  INTERNALFORMAT_STENCIL_TYPE = 0x827D
  INTERNALFORMAT_SUPPORTED = 0x826F
  INTERPOLATE_ARB = 0x8575
  INTERPOLATE_EXT = 0x8575
  INT_2_10_10_10_REV = 0x8D9F
  INT_IMAGE_1D = 0x9057
  INT_IMAGE_1D_ARRAY = 0x905D
  INT_IMAGE_1D_ARRAY_EXT = 0x905D
  INT_IMAGE_1D_EXT = 0x9057
  INT_IMAGE_2D = 0x9058
  INT_IMAGE_2D_ARRAY = 0x905E
  INT_IMAGE_2D_ARRAY_EXT = 0x905E
  INT_IMAGE_2D_EXT = 0x9058
  INT_IMAGE_2D_MULTISAMPLE = 0x9060
  INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x9061
  INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 0x9061
  INT_IMAGE_2D_MULTISAMPLE_EXT = 0x9060
  INT_IMAGE_2D_RECT = 0x905A
  INT_IMAGE_2D_RECT_EXT = 0x905A
  INT_IMAGE_3D = 0x9059
  INT_IMAGE_3D_EXT = 0x9059
  INT_IMAGE_BUFFER = 0x905C
  INT_IMAGE_BUFFER_EXT = 0x905C
  INT_IMAGE_CUBE = 0x905B
  INT_IMAGE_CUBE_EXT = 0x905B
  INT_IMAGE_CUBE_MAP_ARRAY = 0x905F
  INT_IMAGE_CUBE_MAP_ARRAY_EXT = 0x905F
  INT_SAMPLER_1D = 0x8DC9
  INT_SAMPLER_1D_ARRAY = 0x8DCE
  INT_SAMPLER_1D_ARRAY_EXT = 0x8DCE
  INT_SAMPLER_1D_EXT = 0x8DC9
  INT_SAMPLER_2D = 0x8DCA
  INT_SAMPLER_2D_ARRAY = 0x8DCF
  INT_SAMPLER_2D_ARRAY_EXT = 0x8DCF
  INT_SAMPLER_2D_EXT = 0x8DCA
  INT_SAMPLER_2D_MULTISAMPLE = 0x9109
  INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910C
  INT_SAMPLER_2D_RECT = 0x8DCD
  INT_SAMPLER_2D_RECT_EXT = 0x8DCD
  INT_SAMPLER_3D = 0x8DCB
  INT_SAMPLER_3D_EXT = 0x8DCB
  INT_SAMPLER_BUFFER = 0x8DD0
  INT_SAMPLER_BUFFER_AMD = 0x9002
  INT_SAMPLER_BUFFER_EXT = 0x8DD0
  INT_SAMPLER_CUBE = 0x8DCC
  INT_SAMPLER_CUBE_EXT = 0x8DCC
  INT_SAMPLER_CUBE_MAP_ARRAY_ARB = 0x900E
  INT_SAMPLER_RENDERBUFFER_NV = 0x8E57
  INT_VEC2 = 0x8B53
  INT_VEC2_ARB = 0x8B53
  INT_VEC3 = 0x8B54
  INT_VEC3_ARB = 0x8B54
  INT_VEC4 = 0x8B55
  INT_VEC4_ARB = 0x8B55
  INVALID_ENUM = 0x0500
  INVALID_FRAMEBUFFER_OPERATION = 0x0506
  INVALID_FRAMEBUFFER_OPERATION_EXT = 0x0506
  INVALID_INDEX = 0xFFFFFFFF
  INVALID_OPERATION = 0x0502
  INVALID_VALUE = 0x0501
  INVARIANT_DATATYPE_EXT = 0x87EB
  INVARIANT_EXT = 0x87C2
  INVARIANT_VALUE_EXT = 0x87EA
  INVERSE_NV = 0x862B
  INVERSE_TRANSPOSE_NV = 0x862D
  INVERT = 0x150A
  INVERTED_SCREEN_W_REND = 0x8491
  INVERT_OVG_NV = 0x92B4
  INVERT_RGB_NV = 0x92A3
  IR_INSTRUMENT1_SGIX = 0x817F
  ISOLINES = 0x8E7A
  IS_PER_PATCH = 0x92E7
  IS_ROW_MAJOR = 0x9300
  ITALIC_BIT_NV = 0x02
  IUI_N3F_V2F_EXT = 0x81AF
  IUI_N3F_V3F_EXT = 0x81B0
  IUI_V2F_EXT = 0x81AD
  IUI_V3F_EXT = 0x81AE
  KEEP = 0x1E00
  LARGE_CCW_ARC_TO_NV = 0x16
  LARGE_CW_ARC_TO_NV = 0x18
  LAST_VERTEX_CONVENTION = 0x8E4E
  LAST_VERTEX_CONVENTION_EXT = 0x8E4E
  LAST_VIDEO_CAPTURE_STATUS_NV = 0x9027
  LAYER_NV = 0x8DAA
  LAYER_PROVOKING_VERTEX = 0x825E
  LAYOUT_DEFAULT_INTEL = 0
  LAYOUT_LINEAR_CPU_CACHED_INTEL = 2
  LAYOUT_LINEAR_INTEL = 1
  LEFT = 0x0406
  LEQUAL = 0x0203
  LERP_ATI = 0x8969
  LESS = 0x0201
  LIGHTEN_NV = 0x9298
  LIGHT_ENV_MODE_SGIX = 0x8407
  LIGHT_MODEL_COLOR_CONTROL_EXT = 0x81F8
  LIGHT_MODEL_SPECULAR_VECTOR_APPLE = 0x85B0
  LINE = 0x1B01
  LINEAR = 0x2601
  LINEARBURN_NV = 0x92A5
  LINEARDODGE_NV = 0x92A4
  LINEARLIGHT_NV = 0x92A7
  LINEAR_CLIPMAP_LINEAR_SGIX = 0x8170
  LINEAR_CLIPMAP_NEAREST_SGIX = 0x844F
  LINEAR_DETAIL_ALPHA_SGIS = 0x8098
  LINEAR_DETAIL_COLOR_SGIS = 0x8099
  LINEAR_DETAIL_SGIS = 0x8097
  LINEAR_MIPMAP_LINEAR = 0x2703
  LINEAR_MIPMAP_NEAREST = 0x2701
  LINEAR_SHARPEN_ALPHA_SGIS = 0x80AE
  LINEAR_SHARPEN_COLOR_SGIS = 0x80AF
  LINEAR_SHARPEN_SGIS = 0x80AD
  LINES = 0x0001
  LINES_ADJACENCY = 0x000A
  LINES_ADJACENCY_ARB = 0x000A
  LINES_ADJACENCY_EXT = 0x000A
  LINE_LOOP = 0x0002
  LINE_SMOOTH = 0x0B20
  LINE_SMOOTH_HINT = 0x0C52
  LINE_STRIP = 0x0003
  LINE_STRIP_ADJACENCY = 0x000B
  LINE_STRIP_ADJACENCY_ARB = 0x000B
  LINE_STRIP_ADJACENCY_EXT = 0x000B
  LINE_TO_NV = 0x04
  LINE_WIDTH = 0x0B21
  LINE_WIDTH_GRANULARITY = 0x0B23
  LINE_WIDTH_RANGE = 0x0B22
  LINK_STATUS = 0x8B82
  LIST_PRIORITY_SGIX = 0x8182
  LOCAL_CONSTANT_DATATYPE_EXT = 0x87ED
  LOCAL_CONSTANT_EXT = 0x87C3
  LOCAL_CONSTANT_VALUE_EXT = 0x87EC
  LOCAL_EXT = 0x87C4
  LOCATION = 0x930E
  LOCATION_COMPONENT = 0x934A
  LOCATION_INDEX = 0x930F
  LOGIC_OP_MODE = 0x0BF0
  LOSE_CONTEXT_ON_RESET_ARB = 0x8252
  LOWER_LEFT = 0x8CA1
  LOW_FLOAT = 0x8DF0
  LOW_INT = 0x8DF3
  LO_BIAS_NV = 0x8715
  LO_SCALE_NV = 0x870F
  LUMINANCE12_ALPHA12_EXT = 0x8047
  LUMINANCE12_ALPHA4_EXT = 0x8046
  LUMINANCE12_EXT = 0x8041
  LUMINANCE16F_ARB = 0x881E
  LUMINANCE16I_EXT = 0x8D8C
  LUMINANCE16UI_EXT = 0x8D7A
  LUMINANCE16_ALPHA16_EXT = 0x8048
  LUMINANCE16_ALPHA16_SNORM = 0x901A
  LUMINANCE16_EXT = 0x8042
  LUMINANCE16_SNORM = 0x9019
  LUMINANCE32F_ARB = 0x8818
  LUMINANCE32I_EXT = 0x8D86
  LUMINANCE32UI_EXT = 0x8D74
  LUMINANCE4_ALPHA4_EXT = 0x8043
  LUMINANCE4_EXT = 0x803F
  LUMINANCE6_ALPHA2_EXT = 0x8044
  LUMINANCE8I_EXT = 0x8D92
  LUMINANCE8UI_EXT = 0x8D80
  LUMINANCE8_ALPHA8_EXT = 0x8045
  LUMINANCE8_ALPHA8_SNORM = 0x9016
  LUMINANCE8_EXT = 0x8040
  LUMINANCE8_SNORM = 0x9015
  LUMINANCE_ALPHA16F_ARB = 0x881F
  LUMINANCE_ALPHA16I_EXT = 0x8D8D
  LUMINANCE_ALPHA16UI_EXT = 0x8D7B
  LUMINANCE_ALPHA32F_ARB = 0x8819
  LUMINANCE_ALPHA32I_EXT = 0x8D87
  LUMINANCE_ALPHA32UI_EXT = 0x8D75
  LUMINANCE_ALPHA8I_EXT = 0x8D93
  LUMINANCE_ALPHA8UI_EXT = 0x8D81
  LUMINANCE_ALPHA_FLOAT16_APPLE = 0x881F
  LUMINANCE_ALPHA_FLOAT16_ATI = 0x881F
  LUMINANCE_ALPHA_FLOAT32_APPLE = 0x8819
  LUMINANCE_ALPHA_FLOAT32_ATI = 0x8819
  LUMINANCE_ALPHA_INTEGER_EXT = 0x8D9D
  LUMINANCE_ALPHA_SNORM = 0x9012
  LUMINANCE_FLOAT16_APPLE = 0x881E
  LUMINANCE_FLOAT16_ATI = 0x881E
  LUMINANCE_FLOAT32_APPLE = 0x8818
  LUMINANCE_FLOAT32_ATI = 0x8818
  LUMINANCE_INTEGER_EXT = 0x8D9C
  LUMINANCE_SNORM = 0x9011
  MAD_ATI = 0x8968
  MAGNITUDE_BIAS_NV = 0x8718
  MAGNITUDE_SCALE_NV = 0x8712
  MAJOR_VERSION = 0x821B
  MANUAL_GENERATE_MIPMAP = 0x8294
  MAP1_BINORMAL_EXT = 0x8446
  MAP1_TANGENT_EXT = 0x8444
  MAP1_VERTEX_ATTRIB0_4_NV = 0x8660
  MAP1_VERTEX_ATTRIB10_4_NV = 0x866A
  MAP1_VERTEX_ATTRIB11_4_NV = 0x866B
  MAP1_VERTEX_ATTRIB12_4_NV = 0x866C
  MAP1_VERTEX_ATTRIB13_4_NV = 0x866D
  MAP1_VERTEX_ATTRIB14_4_NV = 0x866E
  MAP1_VERTEX_ATTRIB15_4_NV = 0x866F
  MAP1_VERTEX_ATTRIB1_4_NV = 0x8661
  MAP1_VERTEX_ATTRIB2_4_NV = 0x8662
  MAP1_VERTEX_ATTRIB3_4_NV = 0x8663
  MAP1_VERTEX_ATTRIB4_4_NV = 0x8664
  MAP1_VERTEX_ATTRIB5_4_NV = 0x8665
  MAP1_VERTEX_ATTRIB6_4_NV = 0x8666
  MAP1_VERTEX_ATTRIB7_4_NV = 0x8667
  MAP1_VERTEX_ATTRIB8_4_NV = 0x8668
  MAP1_VERTEX_ATTRIB9_4_NV = 0x8669
  MAP2_BINORMAL_EXT = 0x8447
  MAP2_TANGENT_EXT = 0x8445
  MAP2_VERTEX_ATTRIB0_4_NV = 0x8670
  MAP2_VERTEX_ATTRIB10_4_NV = 0x867A
  MAP2_VERTEX_ATTRIB11_4_NV = 0x867B
  MAP2_VERTEX_ATTRIB12_4_NV = 0x867C
  MAP2_VERTEX_ATTRIB13_4_NV = 0x867D
  MAP2_VERTEX_ATTRIB14_4_NV = 0x867E
  MAP2_VERTEX_ATTRIB15_4_NV = 0x867F
  MAP2_VERTEX_ATTRIB1_4_NV = 0x8671
  MAP2_VERTEX_ATTRIB2_4_NV = 0x8672
  MAP2_VERTEX_ATTRIB3_4_NV = 0x8673
  MAP2_VERTEX_ATTRIB4_4_NV = 0x8674
  MAP2_VERTEX_ATTRIB5_4_NV = 0x8675
  MAP2_VERTEX_ATTRIB6_4_NV = 0x8676
  MAP2_VERTEX_ATTRIB7_4_NV = 0x8677
  MAP2_VERTEX_ATTRIB8_4_NV = 0x8678
  MAP2_VERTEX_ATTRIB9_4_NV = 0x8679
  MAP_ATTRIB_U_ORDER_NV = 0x86C3
  MAP_ATTRIB_V_ORDER_NV = 0x86C4
  MAP_COHERENT_BIT = 0x0080
  MAP_FLUSH_EXPLICIT_BIT = 0x0010
  MAP_INVALIDATE_BUFFER_BIT = 0x0008
  MAP_INVALIDATE_RANGE_BIT = 0x0004
  MAP_PERSISTENT_BIT = 0x0040
  MAP_READ_BIT = 0x0001
  MAP_TESSELLATION_NV = 0x86C2
  MAP_UNSYNCHRONIZED_BIT = 0x0020
  MAP_WRITE_BIT = 0x0002
  MATERIAL_SIDE_HINT_PGI = 0x1A22C
  MATRIX0_ARB = 0x88C0
  MATRIX0_NV = 0x8630
  MATRIX10_ARB = 0x88CA
  MATRIX11_ARB = 0x88CB
  MATRIX12_ARB = 0x88CC
  MATRIX13_ARB = 0x88CD
  MATRIX14_ARB = 0x88CE
  MATRIX15_ARB = 0x88CF
  MATRIX16_ARB = 0x88D0
  MATRIX17_ARB = 0x88D1
  MATRIX18_ARB = 0x88D2
  MATRIX19_ARB = 0x88D3
  MATRIX1_ARB = 0x88C1
  MATRIX1_NV = 0x8631
  MATRIX20_ARB = 0x88D4
  MATRIX21_ARB = 0x88D5
  MATRIX22_ARB = 0x88D6
  MATRIX23_ARB = 0x88D7
  MATRIX24_ARB = 0x88D8
  MATRIX25_ARB = 0x88D9
  MATRIX26_ARB = 0x88DA
  MATRIX27_ARB = 0x88DB
  MATRIX28_ARB = 0x88DC
  MATRIX29_ARB = 0x88DD
  MATRIX2_ARB = 0x88C2
  MATRIX2_NV = 0x8632
  MATRIX30_ARB = 0x88DE
  MATRIX31_ARB = 0x88DF
  MATRIX3_ARB = 0x88C3
  MATRIX3_NV = 0x8633
  MATRIX4_ARB = 0x88C4
  MATRIX4_NV = 0x8634
  MATRIX5_ARB = 0x88C5
  MATRIX5_NV = 0x8635
  MATRIX6_ARB = 0x88C6
  MATRIX6_NV = 0x8636
  MATRIX7_ARB = 0x88C7
  MATRIX7_NV = 0x8637
  MATRIX8_ARB = 0x88C8
  MATRIX9_ARB = 0x88C9
  MATRIX_EXT = 0x87C0
  MATRIX_INDEX_ARRAY_ARB = 0x8844
  MATRIX_INDEX_ARRAY_POINTER_ARB = 0x8849
  MATRIX_INDEX_ARRAY_SIZE_ARB = 0x8846
  MATRIX_INDEX_ARRAY_STRIDE_ARB = 0x8848
  MATRIX_INDEX_ARRAY_TYPE_ARB = 0x8847
  MATRIX_PALETTE_ARB = 0x8840
  MATRIX_STRIDE = 0x92FF
  MAT_AMBIENT_AND_DIFFUSE_BIT_PGI = 0x00200000
  MAT_AMBIENT_BIT_PGI = 0x00100000
  MAT_COLOR_INDEXES_BIT_PGI = 0x01000000
  MAT_DIFFUSE_BIT_PGI = 0x00400000
  MAT_EMISSION_BIT_PGI = 0x00800000
  MAT_SHININESS_BIT_PGI = 0x02000000
  MAT_SPECULAR_BIT_PGI = 0x04000000
  MAX = 0x8008
  MAX_3D_TEXTURE_SIZE = 0x8073
  MAX_3D_TEXTURE_SIZE_EXT = 0x8073
  MAX_4D_TEXTURE_SIZE_SGIS = 0x8138
  MAX_ACTIVE_LIGHTS_SGIX = 0x8405
  MAX_ARRAY_TEXTURE_LAYERS = 0x88FF
  MAX_ARRAY_TEXTURE_LAYERS_EXT = 0x88FF
  MAX_ASYNC_DRAW_PIXELS_SGIX = 0x8360
  MAX_ASYNC_HISTOGRAM_SGIX = 0x832D
  MAX_ASYNC_READ_PIXELS_SGIX = 0x8361
  MAX_ASYNC_TEX_IMAGE_SGIX = 0x835F
  MAX_ATOMIC_COUNTER_BUFFER_BINDINGS = 0x92DC
  MAX_ATOMIC_COUNTER_BUFFER_SIZE = 0x92D8
  MAX_BINDABLE_UNIFORM_SIZE_EXT = 0x8DED
  MAX_CLIPMAP_DEPTH_SGIX = 0x8177
  MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX = 0x8178
  MAX_CLIP_DISTANCES = 0x0D32
  MAX_COLOR_ATTACHMENTS = 0x8CDF
  MAX_COLOR_ATTACHMENTS_EXT = 0x8CDF
  MAX_COLOR_MATRIX_STACK_DEPTH_SGI = 0x80B3
  MAX_COLOR_TEXTURE_SAMPLES = 0x910E
  MAX_COMBINED_ATOMIC_COUNTERS = 0x92D7
  MAX_COMBINED_ATOMIC_COUNTER_BUFFERS = 0x92D1
  MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = 0x8266
  MAX_COMBINED_DIMENSIONS = 0x8282
  MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 0x8A33
  MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = 0x8A32
  MAX_COMBINED_IMAGE_UNIFORMS = 0x90CF
  MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS = 0x8F39
  MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT = 0x8F39
  MAX_COMBINED_SHADER_OUTPUT_RESOURCES = 0x8F39
  MAX_COMBINED_SHADER_STORAGE_BLOCKS = 0x90DC
  MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E1E
  MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E1F
  MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D
  MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB = 0x8B4D
  MAX_COMBINED_UNIFORM_BLOCKS = 0x8A2E
  MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 0x8A31
  MAX_COMPUTE_ATOMIC_COUNTERS = 0x8265
  MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = 0x8264
  MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB = 0x90EB
  MAX_COMPUTE_FIXED_GROUP_SIZE_ARB = 0x91BF
  MAX_COMPUTE_IMAGE_UNIFORMS = 0x91BD
  MAX_COMPUTE_SHADER_STORAGE_BLOCKS = 0x90DB
  MAX_COMPUTE_SHARED_MEMORY_SIZE = 0x8262
  MAX_COMPUTE_TEXTURE_IMAGE_UNITS = 0x91BC
  MAX_COMPUTE_UNIFORM_BLOCKS = 0x91BB
  MAX_COMPUTE_UNIFORM_COMPONENTS = 0x8263
  MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB = 0x9344
  MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB = 0x9345
  MAX_COMPUTE_WORK_GROUP_COUNT = 0x91BE
  MAX_COMPUTE_WORK_GROUP_INVOCATIONS = 0x90EB
  MAX_COMPUTE_WORK_GROUP_SIZE = 0x91BF
  MAX_CONVOLUTION_HEIGHT_EXT = 0x801B
  MAX_CONVOLUTION_WIDTH_EXT = 0x801A
  MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C
  MAX_CUBE_MAP_TEXTURE_SIZE_ARB = 0x851C
  MAX_CUBE_MAP_TEXTURE_SIZE_EXT = 0x851C
  MAX_DEBUG_GROUP_STACK_DEPTH = 0x826C
  MAX_DEBUG_GROUP_STACK_DEPTH_KHR = 0x826C
  MAX_DEBUG_LOGGED_MESSAGES = 0x9144
  MAX_DEBUG_LOGGED_MESSAGES_AMD = 0x9144
  MAX_DEBUG_LOGGED_MESSAGES_ARB = 0x9144
  MAX_DEBUG_LOGGED_MESSAGES_KHR = 0x9144
  MAX_DEBUG_MESSAGE_LENGTH = 0x9143
  MAX_DEBUG_MESSAGE_LENGTH_AMD = 0x9143
  MAX_DEBUG_MESSAGE_LENGTH_ARB = 0x9143
  MAX_DEBUG_MESSAGE_LENGTH_KHR = 0x9143
  MAX_DEEP_3D_TEXTURE_DEPTH_NV = 0x90D1
  MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV = 0x90D0
  MAX_DEFORMATION_ORDER_SGIX = 0x8197
  MAX_DEPTH = 0x8280
  MAX_DEPTH_TEXTURE_SAMPLES = 0x910F
  MAX_DRAW_BUFFERS = 0x8824
  MAX_DRAW_BUFFERS_ARB = 0x8824
  MAX_DRAW_BUFFERS_ATI = 0x8824
  MAX_DUAL_SOURCE_DRAW_BUFFERS = 0x88FC
  MAX_ELEMENTS_INDICES = 0x80E9
  MAX_ELEMENTS_INDICES_EXT = 0x80E9
  MAX_ELEMENTS_VERTICES = 0x80E8
  MAX_ELEMENTS_VERTICES_EXT = 0x80E8
  MAX_ELEMENT_INDEX = 0x8D6B
  MAX_EXT = 0x8008
  MAX_FOG_FUNC_POINTS_SGIS = 0x812C
  MAX_FRAGMENT_ATOMIC_COUNTERS = 0x92D6
  MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS = 0x92D0
  MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT = 0x8DE3
  MAX_FRAGMENT_IMAGE_UNIFORMS = 0x90CE
  MAX_FRAGMENT_INPUT_COMPONENTS = 0x9125
  MAX_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5C
  MAX_FRAGMENT_INTERPOLATION_OFFSET_NV = 0x8E5C
  MAX_FRAGMENT_LIGHTS_SGIX = 0x8404
  MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV = 0x8868
  MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = 0x90DA
  MAX_FRAGMENT_UNIFORM_BLOCKS = 0x8A2D
  MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8B49
  MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB = 0x8B49
  MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD
  MAX_FRAMEBUFFER_HEIGHT = 0x9316
  MAX_FRAMEBUFFER_LAYERS = 0x9317
  MAX_FRAMEBUFFER_SAMPLES = 0x9318
  MAX_FRAMEBUFFER_WIDTH = 0x9315
  MAX_FRAMEZOOM_FACTOR_SGIX = 0x818D
  MAX_GENERAL_COMBINERS_NV = 0x854D
  MAX_GEOMETRY_ATOMIC_COUNTERS = 0x92D5
  MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS = 0x92CF
  MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT = 0x8DE4
  MAX_GEOMETRY_IMAGE_UNIFORMS = 0x90CD
  MAX_GEOMETRY_INPUT_COMPONENTS = 0x9123
  MAX_GEOMETRY_OUTPUT_COMPONENTS = 0x9124
  MAX_GEOMETRY_OUTPUT_VERTICES = 0x8DE0
  MAX_GEOMETRY_OUTPUT_VERTICES_ARB = 0x8DE0
  MAX_GEOMETRY_OUTPUT_VERTICES_EXT = 0x8DE0
  MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV = 0x8E5A
  MAX_GEOMETRY_SHADER_INVOCATIONS = 0x8E5A
  MAX_GEOMETRY_SHADER_STORAGE_BLOCKS = 0x90D7
  MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = 0x8C29
  MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB = 0x8C29
  MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT = 0x8C29
  MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = 0x8DE1
  MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB = 0x8DE1
  MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT = 0x8DE1
  MAX_GEOMETRY_UNIFORM_BLOCKS = 0x8A2C
  MAX_GEOMETRY_UNIFORM_COMPONENTS = 0x8DDF
  MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB = 0x8DDF
  MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT = 0x8DDF
  MAX_GEOMETRY_VARYING_COMPONENTS_ARB = 0x8DDD
  MAX_GEOMETRY_VARYING_COMPONENTS_EXT = 0x8DDD
  MAX_HEIGHT = 0x827F
  MAX_IMAGE_SAMPLES = 0x906D
  MAX_IMAGE_SAMPLES_EXT = 0x906D
  MAX_IMAGE_UNITS = 0x8F38
  MAX_IMAGE_UNITS_EXT = 0x8F38
  MAX_INTEGER_SAMPLES = 0x9110
  MAX_LABEL_LENGTH = 0x82E8
  MAX_LABEL_LENGTH_KHR = 0x82E8
  MAX_LAYERS = 0x8281
  MAX_MAP_TESSELLATION_NV = 0x86D6
  MAX_MATRIX_PALETTE_STACK_DEPTH_ARB = 0x8841
  MAX_MULTISAMPLE_COVERAGE_MODES_NV = 0x8E11
  MAX_NAME_LENGTH = 0x92F6
  MAX_NUM_ACTIVE_VARIABLES = 0x92F7
  MAX_NUM_COMPATIBLE_SUBROUTINES = 0x92F8
  MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87CA
  MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT = 0x87CD
  MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT = 0x87CE
  MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87CC
  MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT = 0x87CB
  MAX_PALETTE_MATRICES_ARB = 0x8842
  MAX_PATCH_VERTICES = 0x8E7D
  MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 0x8337
  MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI = 0x87F1
  MAX_PROGRAM_ADDRESS_REGISTERS_ARB = 0x88B1
  MAX_PROGRAM_ALU_INSTRUCTIONS_ARB = 0x880B
  MAX_PROGRAM_ATTRIBS_ARB = 0x88AD
  MAX_PROGRAM_ATTRIB_COMPONENTS_NV = 0x8908
  MAX_PROGRAM_CALL_DEPTH_NV = 0x88F5
  MAX_PROGRAM_ENV_PARAMETERS_ARB = 0x88B5
  MAX_PROGRAM_EXEC_INSTRUCTIONS_NV = 0x88F4
  MAX_PROGRAM_GENERIC_ATTRIBS_NV = 0x8DA5
  MAX_PROGRAM_GENERIC_RESULTS_NV = 0x8DA6
  MAX_PROGRAM_IF_DEPTH_NV = 0x88F6
  MAX_PROGRAM_INSTRUCTIONS_ARB = 0x88A1
  MAX_PROGRAM_LOCAL_PARAMETERS_ARB = 0x88B4
  MAX_PROGRAM_LOOP_COUNT_NV = 0x88F8
  MAX_PROGRAM_LOOP_DEPTH_NV = 0x88F7
  MAX_PROGRAM_MATRICES_ARB = 0x862F
  MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB = 0x862E
  MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 0x88B3
  MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 0x880E
  MAX_PROGRAM_NATIVE_ATTRIBS_ARB = 0x88AF
  MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 0x88A3
  MAX_PROGRAM_NATIVE_PARAMETERS_ARB = 0x88AB
  MAX_PROGRAM_NATIVE_TEMPORARIES_ARB = 0x88A7
  MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 0x8810
  MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 0x880F
  MAX_PROGRAM_OUTPUT_VERTICES_NV = 0x8C27
  MAX_PROGRAM_PARAMETERS_ARB = 0x88A9
  MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV = 0x8DA0
  MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV = 0x8DA1
  MAX_PROGRAM_PATCH_ATTRIBS_NV = 0x86D8
  MAX_PROGRAM_RESULT_COMPONENTS_NV = 0x8909
  MAX_PROGRAM_SUBROUTINE_NUM_NV = 0x8F45
  MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV = 0x8F44
  MAX_PROGRAM_TEMPORARIES_ARB = 0x88A5
  MAX_PROGRAM_TEXEL_OFFSET = 0x8905
  MAX_PROGRAM_TEXEL_OFFSET_EXT = 0x8905
  MAX_PROGRAM_TEXEL_OFFSET_NV = 0x8905
  MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB = 0x8F9F
  MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = 0x8E5F
  MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV = 0x8E5F
  MAX_PROGRAM_TEX_INDIRECTIONS_ARB = 0x880D
  MAX_PROGRAM_TEX_INSTRUCTIONS_ARB = 0x880C
  MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV = 0x8C28
  MAX_RATIONAL_EVAL_ORDER_NV = 0x86D7
  MAX_RECTANGLE_TEXTURE_SIZE = 0x84F8
  MAX_RECTANGLE_TEXTURE_SIZE_ARB = 0x84F8
  MAX_RECTANGLE_TEXTURE_SIZE_NV = 0x84F8
  MAX_RENDERBUFFER_SIZE = 0x84E8
  MAX_RENDERBUFFER_SIZE_EXT = 0x84E8
  MAX_SAMPLES = 0x8D57
  MAX_SAMPLES_EXT = 0x8D57
  MAX_SAMPLE_MASK_WORDS = 0x8E59
  MAX_SAMPLE_MASK_WORDS_NV = 0x8E59
  MAX_SERVER_WAIT_TIMEOUT = 0x9111
  MAX_SHADER_BUFFER_ADDRESS_NV = 0x8F35
  MAX_SHADER_STORAGE_BLOCK_SIZE = 0x90DE
  MAX_SHADER_STORAGE_BUFFER_BINDINGS = 0x90DD
  MAX_SHININESS_NV = 0x8504
  MAX_SPARSE_3D_TEXTURE_SIZE_AMD = 0x9199
  MAX_SPARSE_3D_TEXTURE_SIZE_ARB = 0x9199
  MAX_SPARSE_ARRAY_TEXTURE_LAYERS = 0x919A
  MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB = 0x919A
  MAX_SPARSE_TEXTURE_SIZE_AMD = 0x9198
  MAX_SPARSE_TEXTURE_SIZE_ARB = 0x9198
  MAX_SPOT_EXPONENT_NV = 0x8505
  MAX_SUBROUTINES = 0x8DE7
  MAX_SUBROUTINE_UNIFORM_LOCATIONS = 0x8DE8
  MAX_TESS_CONTROL_ATOMIC_COUNTERS = 0x92D3
  MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS = 0x92CD
  MAX_TESS_CONTROL_IMAGE_UNIFORMS = 0x90CB
  MAX_TESS_CONTROL_INPUT_COMPONENTS = 0x886C
  MAX_TESS_CONTROL_OUTPUT_COMPONENTS = 0x8E83
  MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = 0x90D8
  MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = 0x8E81
  MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = 0x8E85
  MAX_TESS_CONTROL_UNIFORM_BLOCKS = 0x8E89
  MAX_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E7F
  MAX_TESS_EVALUATION_ATOMIC_COUNTERS = 0x92D4
  MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS = 0x92CE
  MAX_TESS_EVALUATION_IMAGE_UNIFORMS = 0x90CC
  MAX_TESS_EVALUATION_INPUT_COMPONENTS = 0x886D
  MAX_TESS_EVALUATION_OUTPUT_COMPONENTS = 0x8E86
  MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS = 0x90D9
  MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = 0x8E82
  MAX_TESS_EVALUATION_UNIFORM_BLOCKS = 0x8E8A
  MAX_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E80
  MAX_TESS_GEN_LEVEL = 0x8E7E
  MAX_TESS_PATCH_COMPONENTS = 0x8E84
  MAX_TEXTURE_BUFFER_SIZE = 0x8C2B
  MAX_TEXTURE_BUFFER_SIZE_ARB = 0x8C2B
  MAX_TEXTURE_BUFFER_SIZE_EXT = 0x8C2B
  MAX_TEXTURE_COORDS_ARB = 0x8871
  MAX_TEXTURE_COORDS_NV = 0x8871
  MAX_TEXTURE_IMAGE_UNITS = 0x8872
  MAX_TEXTURE_IMAGE_UNITS_ARB = 0x8872
  MAX_TEXTURE_IMAGE_UNITS_NV = 0x8872
  MAX_TEXTURE_LOD_BIAS = 0x84FD
  MAX_TEXTURE_LOD_BIAS_EXT = 0x84FD
  MAX_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FF
  MAX_TEXTURE_SIZE = 0x0D33
  MAX_TEXTURE_UNITS_ARB = 0x84E2
  MAX_TRACK_MATRICES_NV = 0x862F
  MAX_TRACK_MATRIX_STACK_DEPTH_NV = 0x862E
  MAX_TRANSFORM_FEEDBACK_BUFFERS = 0x8E70
  MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 0x8C8A
  MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT = 0x8C8A
  MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV = 0x8C8A
  MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 0x8C8B
  MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT = 0x8C8B
  MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV = 0x8C8B
  MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 0x8C80
  MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT = 0x8C80
  MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV = 0x8C80
  MAX_UNIFORM_BLOCK_SIZE = 0x8A30
  MAX_UNIFORM_BUFFER_BINDINGS = 0x8A2F
  MAX_UNIFORM_LOCATIONS = 0x826E
  MAX_VARYING_COMPONENTS = 0x8B4B
  MAX_VARYING_COMPONENTS_EXT = 0x8B4B
  MAX_VARYING_FLOATS = 0x8B4B
  MAX_VARYING_FLOATS_ARB = 0x8B4B
  MAX_VARYING_VECTORS = 0x8DFC
  MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV = 0x8520
  MAX_VERTEX_ATOMIC_COUNTERS = 0x92D2
  MAX_VERTEX_ATOMIC_COUNTER_BUFFERS = 0x92CC
  MAX_VERTEX_ATTRIBS = 0x8869
  MAX_VERTEX_ATTRIBS_ARB = 0x8869
  MAX_VERTEX_ATTRIB_BINDINGS = 0x82DA
  MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D9
  MAX_VERTEX_BINDABLE_UNIFORMS_EXT = 0x8DE2
  MAX_VERTEX_HINT_PGI = 0x1A22D
  MAX_VERTEX_IMAGE_UNIFORMS = 0x90CA
  MAX_VERTEX_OUTPUT_COMPONENTS = 0x9122
  MAX_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87C5
  MAX_VERTEX_SHADER_INVARIANTS_EXT = 0x87C7
  MAX_VERTEX_SHADER_LOCALS_EXT = 0x87C9
  MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87C8
  MAX_VERTEX_SHADER_STORAGE_BLOCKS = 0x90D6
  MAX_VERTEX_SHADER_VARIANTS_EXT = 0x87C6
  MAX_VERTEX_STREAMS = 0x8E71
  MAX_VERTEX_STREAMS_ATI = 0x876B
  MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C
  MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB = 0x8B4C
  MAX_VERTEX_UNIFORM_BLOCKS = 0x8A2B
  MAX_VERTEX_UNIFORM_COMPONENTS = 0x8B4A
  MAX_VERTEX_UNIFORM_COMPONENTS_ARB = 0x8B4A
  MAX_VERTEX_UNIFORM_VECTORS = 0x8DFB
  MAX_VERTEX_UNITS_ARB = 0x86A4
  MAX_VERTEX_VARYING_COMPONENTS_ARB = 0x8DDE
  MAX_VERTEX_VARYING_COMPONENTS_EXT = 0x8DDE
  MAX_VIEWPORTS = 0x825B
  MAX_VIEWPORT_DIMS = 0x0D3A
  MAX_WIDTH = 0x827E
  MEDIUM_FLOAT = 0x8DF1
  MEDIUM_INT = 0x8DF4
  MIN = 0x8007
  MINMAX_EXT = 0x802E
  MINMAX_FORMAT_EXT = 0x802F
  MINMAX_SINK_EXT = 0x8030
  MINOR_VERSION = 0x821C
  MINUS_CLAMPED_NV = 0x92B3
  MINUS_NV = 0x929F
  MIN_EXT = 0x8007
  MIN_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5B
  MIN_FRAGMENT_INTERPOLATION_OFFSET_NV = 0x8E5B
  MIN_LOD_WARNING_AMD = 0x919C
  MIN_MAP_BUFFER_ALIGNMENT = 0x90BC
  MIN_PROGRAM_TEXEL_OFFSET = 0x8904
  MIN_PROGRAM_TEXEL_OFFSET_EXT = 0x8904
  MIN_PROGRAM_TEXEL_OFFSET_NV = 0x8904
  MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = 0x8E5E
  MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV = 0x8E5E
  MIN_SAMPLE_SHADING_VALUE_ARB = 0x8C37
  MIN_SPARSE_LEVEL_AMD = 0x919B
  MIN_SPARSE_LEVEL_ARB = 0x919B
  MIPMAP = 0x8293
  MIRRORED_REPEAT = 0x8370
  MIRRORED_REPEAT_ARB = 0x8370
  MIRRORED_REPEAT_IBM = 0x8370
  MIRROR_CLAMP_ATI = 0x8742
  MIRROR_CLAMP_EXT = 0x8742
  MIRROR_CLAMP_TO_BORDER_EXT = 0x8912
  MIRROR_CLAMP_TO_EDGE = 0x8743
  MIRROR_CLAMP_TO_EDGE_ATI = 0x8743
  MIRROR_CLAMP_TO_EDGE_EXT = 0x8743
  MITER_REVERT_NV = 0x90A7
  MITER_TRUNCATE_NV = 0x90A8
  MODELVIEW0_ARB = 0x1700
  MODELVIEW0_EXT = 0x1700
  MODELVIEW0_MATRIX_EXT = 0x0BA6
  MODELVIEW0_STACK_DEPTH_EXT = 0x0BA3
  MODELVIEW10_ARB = 0x872A
  MODELVIEW11_ARB = 0x872B
  MODELVIEW12_ARB = 0x872C
  MODELVIEW13_ARB = 0x872D
  MODELVIEW14_ARB = 0x872E
  MODELVIEW15_ARB = 0x872F
  MODELVIEW16_ARB = 0x8730
  MODELVIEW17_ARB = 0x8731
  MODELVIEW18_ARB = 0x8732
  MODELVIEW19_ARB = 0x8733
  MODELVIEW1_ARB = 0x850A
  MODELVIEW1_EXT = 0x850A
  MODELVIEW1_MATRIX_EXT = 0x8506
  MODELVIEW1_STACK_DEPTH_EXT = 0x8502
  MODELVIEW20_ARB = 0x8734
  MODELVIEW21_ARB = 0x8735
  MODELVIEW22_ARB = 0x8736
  MODELVIEW23_ARB = 0x8737
  MODELVIEW24_ARB = 0x8738
  MODELVIEW25_ARB = 0x8739
  MODELVIEW26_ARB = 0x873A
  MODELVIEW27_ARB = 0x873B
  MODELVIEW28_ARB = 0x873C
  MODELVIEW29_ARB = 0x873D
  MODELVIEW2_ARB = 0x8722
  MODELVIEW30_ARB = 0x873E
  MODELVIEW31_ARB = 0x873F
  MODELVIEW3_ARB = 0x8723
  MODELVIEW4_ARB = 0x8724
  MODELVIEW5_ARB = 0x8725
  MODELVIEW6_ARB = 0x8726
  MODELVIEW7_ARB = 0x8727
  MODELVIEW8_ARB = 0x8728
  MODELVIEW9_ARB = 0x8729
  MODELVIEW_PROJECTION_NV = 0x8629
  MODULATE_ADD_ATI = 0x8744
  MODULATE_SIGNED_ADD_ATI = 0x8745
  MODULATE_SUBTRACT_ATI = 0x8746
  MOVE_TO_CONTINUES_NV = 0x90B6
  MOVE_TO_NV = 0x02
  MOVE_TO_RESETS_NV = 0x90B5
  MOV_ATI = 0x8961
  MULTIPLY_NV = 0x9294
  MULTISAMPLE = 0x809D
  MULTISAMPLE_3DFX = 0x86B2
  MULTISAMPLE_ARB = 0x809D
  MULTISAMPLE_BIT_3DFX = 0x20000000
  MULTISAMPLE_BIT_ARB = 0x20000000
  MULTISAMPLE_BIT_EXT = 0x20000000
  MULTISAMPLE_COVERAGE_MODES_NV = 0x8E12
  MULTISAMPLE_EXT = 0x809D
  MULTISAMPLE_FILTER_HINT_NV = 0x8534
  MULTISAMPLE_SGIS = 0x809D
  MUL_ATI = 0x8964
  MVP_MATRIX_EXT = 0x87E3
  NAMED_STRING_LENGTH_ARB = 0x8DE9
  NAMED_STRING_TYPE_ARB = 0x8DEA
  NAME_LENGTH = 0x92F9
  NAND = 0x150E
  NATIVE_GRAPHICS_BEGIN_HINT_PGI = 0x1A203
  NATIVE_GRAPHICS_END_HINT_PGI = 0x1A204
  NATIVE_GRAPHICS_HANDLE_PGI = 0x1A202
  NEAREST = 0x2600
  NEAREST_CLIPMAP_LINEAR_SGIX = 0x844E
  NEAREST_CLIPMAP_NEAREST_SGIX = 0x844D
  NEAREST_MIPMAP_LINEAR = 0x2702
  NEAREST_MIPMAP_NEAREST = 0x2700
  NEGATE_BIT_ATI = 0x00000004
  NEGATIVE_ONE_EXT = 0x87DF
  NEGATIVE_W_EXT = 0x87DC
  NEGATIVE_X_EXT = 0x87D9
  NEGATIVE_Y_EXT = 0x87DA
  NEGATIVE_Z_EXT = 0x87DB
  NEVER = 0x0200
  NEXT_BUFFER_NV = -2
  NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV = 0x9025
  NICEST = 0x1102
  NONE = 0
  NOOP = 0x1505
  NOR = 0x1508
  NORMALIZED_RANGE_EXT = 0x87E0
  NORMAL_ARRAY_ADDRESS_NV = 0x8F22
  NORMAL_ARRAY_BUFFER_BINDING_ARB = 0x8897
  NORMAL_ARRAY_COUNT_EXT = 0x8080
  NORMAL_ARRAY_EXT = 0x8075
  NORMAL_ARRAY_LENGTH_NV = 0x8F2C
  NORMAL_ARRAY_LIST_IBM = 103071
  NORMAL_ARRAY_LIST_STRIDE_IBM = 103081
  NORMAL_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F6
  NORMAL_ARRAY_POINTER_EXT = 0x808F
  NORMAL_ARRAY_STRIDE_EXT = 0x807F
  NORMAL_ARRAY_TYPE_EXT = 0x807E
  NORMAL_BIT_PGI = 0x08000000
  NORMAL_MAP_ARB = 0x8511
  NORMAL_MAP_EXT = 0x8511
  NORMAL_MAP_NV = 0x8511
  NOTEQUAL = 0x0205
  NO_ERROR = 0
  NO_RESET_NOTIFICATION_ARB = 0x8261
  NUM_ACTIVE_VARIABLES = 0x9304
  NUM_COMPATIBLE_SUBROUTINES = 0x8E4A
  NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2
  NUM_COMPRESSED_TEXTURE_FORMATS_ARB = 0x86A2
  NUM_EXTENSIONS = 0x821D
  NUM_FILL_STREAMS_NV = 0x8E29
  NUM_FRAGMENT_CONSTANTS_ATI = 0x896F
  NUM_FRAGMENT_REGISTERS_ATI = 0x896E
  NUM_GENERAL_COMBINERS_NV = 0x854E
  NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI = 0x8973
  NUM_INSTRUCTIONS_PER_PASS_ATI = 0x8971
  NUM_INSTRUCTIONS_TOTAL_ATI = 0x8972
  NUM_LOOPBACK_COMPONENTS_ATI = 0x8974
  NUM_PASSES_ATI = 0x8970
  NUM_PROGRAM_BINARY_FORMATS = 0x87FE
  NUM_SAMPLE_COUNTS = 0x9380
  NUM_SHADER_BINARY_FORMATS = 0x8DF9
  NUM_VIDEO_CAPTURE_STREAMS_NV = 0x9024
  NUM_VIRTUAL_PAGE_SIZES_ARB = 0x91A8
  OBJECT_ACTIVE_ATTRIBUTES_ARB = 0x8B89
  OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB = 0x8B8A
  OBJECT_ACTIVE_UNIFORMS_ARB = 0x8B86
  OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB = 0x8B87
  OBJECT_ATTACHED_OBJECTS_ARB = 0x8B85
  OBJECT_BUFFER_SIZE_ATI = 0x8764
  OBJECT_BUFFER_USAGE_ATI = 0x8765
  OBJECT_COMPILE_STATUS_ARB = 0x8B81
  OBJECT_DELETE_STATUS_ARB = 0x8B80
  OBJECT_DISTANCE_TO_LINE_SGIS = 0x81F3
  OBJECT_DISTANCE_TO_POINT_SGIS = 0x81F1
  OBJECT_INFO_LOG_LENGTH_ARB = 0x8B84
  OBJECT_LINE_SGIS = 0x81F7
  OBJECT_LINK_STATUS_ARB = 0x8B82
  OBJECT_POINT_SGIS = 0x81F5
  OBJECT_SHADER_SOURCE_LENGTH_ARB = 0x8B88
  OBJECT_SUBTYPE_ARB = 0x8B4F
  OBJECT_TYPE = 0x9112
  OBJECT_TYPE_ARB = 0x8B4E
  OBJECT_VALIDATE_STATUS_ARB = 0x8B83
  OCCLUSION_QUERY_EVENT_MASK_AMD = 0x874F
  OCCLUSION_TEST_HP = 0x8165
  OCCLUSION_TEST_RESULT_HP = 0x8166
  OFFSET = 0x92FC
  OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV = 0x8856
  OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV = 0x8857
  OFFSET_HILO_TEXTURE_2D_NV = 0x8854
  OFFSET_HILO_TEXTURE_RECTANGLE_NV = 0x8855
  OFFSET_PROJECTIVE_TEXTURE_2D_NV = 0x8850
  OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV = 0x8851
  OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV = 0x8852
  OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV = 0x8853
  OFFSET_TEXTURE_2D_BIAS_NV = 0x86E3
  OFFSET_TEXTURE_2D_MATRIX_NV = 0x86E1
  OFFSET_TEXTURE_2D_NV = 0x86E8
  OFFSET_TEXTURE_2D_SCALE_NV = 0x86E2
  OFFSET_TEXTURE_BIAS_NV = 0x86E3
  OFFSET_TEXTURE_MATRIX_NV = 0x86E1
  OFFSET_TEXTURE_RECTANGLE_NV = 0x864C
  OFFSET_TEXTURE_RECTANGLE_SCALE_NV = 0x864D
  OFFSET_TEXTURE_SCALE_NV = 0x86E2
  ONE = 1
  ONE_EXT = 0x87DE
  ONE_MINUS_CONSTANT_ALPHA = 0x8004
  ONE_MINUS_CONSTANT_ALPHA_EXT = 0x8004
  ONE_MINUS_CONSTANT_COLOR = 0x8002
  ONE_MINUS_CONSTANT_COLOR_EXT = 0x8002
  ONE_MINUS_DST_ALPHA = 0x0305
  ONE_MINUS_DST_COLOR = 0x0307
  ONE_MINUS_SRC1_ALPHA = 0x88FB
  ONE_MINUS_SRC1_COLOR = 0x88FA
  ONE_MINUS_SRC_ALPHA = 0x0303
  ONE_MINUS_SRC_COLOR = 0x0301
  OPERAND0_ALPHA_ARB = 0x8598
  OPERAND0_ALPHA_EXT = 0x8598
  OPERAND0_RGB_ARB = 0x8590
  OPERAND0_RGB_EXT = 0x8590
  OPERAND1_ALPHA_ARB = 0x8599
  OPERAND1_ALPHA_EXT = 0x8599
  OPERAND1_RGB_ARB = 0x8591
  OPERAND1_RGB_EXT = 0x8591
  OPERAND2_ALPHA_ARB = 0x859A
  OPERAND2_ALPHA_EXT = 0x859A
  OPERAND2_RGB_ARB = 0x8592
  OPERAND2_RGB_EXT = 0x8592
  OPERAND3_ALPHA_NV = 0x859B
  OPERAND3_RGB_NV = 0x8593
  OP_ADD_EXT = 0x8787
  OP_CLAMP_EXT = 0x878E
  OP_CROSS_PRODUCT_EXT = 0x8797
  OP_DOT3_EXT = 0x8784
  OP_DOT4_EXT = 0x8785
  OP_EXP_BASE_2_EXT = 0x8791
  OP_FLOOR_EXT = 0x878F
  OP_FRAC_EXT = 0x8789
  OP_INDEX_EXT = 0x8782
  OP_LOG_BASE_2_EXT = 0x8792
  OP_MADD_EXT = 0x8788
  OP_MAX_EXT = 0x878A
  OP_MIN_EXT = 0x878B
  OP_MOV_EXT = 0x8799
  OP_MULTIPLY_MATRIX_EXT = 0x8798
  OP_MUL_EXT = 0x8786
  OP_NEGATE_EXT = 0x8783
  OP_POWER_EXT = 0x8793
  OP_RECIP_EXT = 0x8794
  OP_RECIP_SQRT_EXT = 0x8795
  OP_ROUND_EXT = 0x8790
  OP_SET_GE_EXT = 0x878C
  OP_SET_LT_EXT = 0x878D
  OP_SUB_EXT = 0x8796
  OR = 0x1507
  OR_INVERTED = 0x150D
  OR_REVERSE = 0x150B
  OUTPUT_COLOR0_EXT = 0x879B
  OUTPUT_COLOR1_EXT = 0x879C
  OUTPUT_FOG_EXT = 0x87BD
  OUTPUT_TEXTURE_COORD0_EXT = 0x879D
  OUTPUT_TEXTURE_COORD10_EXT = 0x87A7
  OUTPUT_TEXTURE_COORD11_EXT = 0x87A8
  OUTPUT_TEXTURE_COORD12_EXT = 0x87A9
  OUTPUT_TEXTURE_COORD13_EXT = 0x87AA
  OUTPUT_TEXTURE_COORD14_EXT = 0x87AB
  OUTPUT_TEXTURE_COORD15_EXT = 0x87AC
  OUTPUT_TEXTURE_COORD16_EXT = 0x87AD
  OUTPUT_TEXTURE_COORD17_EXT = 0x87AE
  OUTPUT_TEXTURE_COORD18_EXT = 0x87AF
  OUTPUT_TEXTURE_COORD19_EXT = 0x87B0
  OUTPUT_TEXTURE_COORD1_EXT = 0x879E
  OUTPUT_TEXTURE_COORD20_EXT = 0x87B1
  OUTPUT_TEXTURE_COORD21_EXT = 0x87B2
  OUTPUT_TEXTURE_COORD22_EXT = 0x87B3
  OUTPUT_TEXTURE_COORD23_EXT = 0x87B4
  OUTPUT_TEXTURE_COORD24_EXT = 0x87B5
  OUTPUT_TEXTURE_COORD25_EXT = 0x87B6
  OUTPUT_TEXTURE_COORD26_EXT = 0x87B7
  OUTPUT_TEXTURE_COORD27_EXT = 0x87B8
  OUTPUT_TEXTURE_COORD28_EXT = 0x87B9
  OUTPUT_TEXTURE_COORD29_EXT = 0x87BA
  OUTPUT_TEXTURE_COORD2_EXT = 0x879F
  OUTPUT_TEXTURE_COORD30_EXT = 0x87BB
  OUTPUT_TEXTURE_COORD31_EXT = 0x87BC
  OUTPUT_TEXTURE_COORD3_EXT = 0x87A0
  OUTPUT_TEXTURE_COORD4_EXT = 0x87A1
  OUTPUT_TEXTURE_COORD5_EXT = 0x87A2
  OUTPUT_TEXTURE_COORD6_EXT = 0x87A3
  OUTPUT_TEXTURE_COORD7_EXT = 0x87A4
  OUTPUT_TEXTURE_COORD8_EXT = 0x87A5
  OUTPUT_TEXTURE_COORD9_EXT = 0x87A6
  OUTPUT_VERTEX_EXT = 0x879A
  OUT_OF_MEMORY = 0x0505
  OVERLAY_NV = 0x9296
  PACK_ALIGNMENT = 0x0D05
  PACK_CMYK_HINT_EXT = 0x800E
  PACK_COMPRESSED_BLOCK_DEPTH = 0x912D
  PACK_COMPRESSED_BLOCK_HEIGHT = 0x912C
  PACK_COMPRESSED_BLOCK_SIZE = 0x912E
  PACK_COMPRESSED_BLOCK_WIDTH = 0x912B
  PACK_IMAGE_DEPTH_SGIS = 0x8131
  PACK_IMAGE_HEIGHT = 0x806C
  PACK_IMAGE_HEIGHT_EXT = 0x806C
  PACK_INVERT_MESA = 0x8758
  PACK_LSB_FIRST = 0x0D01
  PACK_RESAMPLE_OML = 0x8984
  PACK_RESAMPLE_SGIX = 0x842C
  PACK_ROW_BYTES_APPLE = 0x8A15
  PACK_ROW_LENGTH = 0x0D02
  PACK_SKIP_IMAGES = 0x806B
  PACK_SKIP_IMAGES_EXT = 0x806B
  PACK_SKIP_PIXELS = 0x0D04
  PACK_SKIP_ROWS = 0x0D03
  PACK_SKIP_VOLUMES_SGIS = 0x8130
  PACK_SUBSAMPLE_RATE_SGIX = 0x85A0
  PACK_SWAP_BYTES = 0x0D00
  PALETTE4_R5_G6_B5_OES = 0x8B92
  PALETTE4_RGB5_A1_OES = 0x8B94
  PALETTE4_RGB8_OES = 0x8B90
  PALETTE4_RGBA4_OES = 0x8B93
  PALETTE4_RGBA8_OES = 0x8B91
  PALETTE8_R5_G6_B5_OES = 0x8B97
  PALETTE8_RGB5_A1_OES = 0x8B99
  PALETTE8_RGB8_OES = 0x8B95
  PALETTE8_RGBA4_OES = 0x8B98
  PALETTE8_RGBA8_OES = 0x8B96
  PARALLEL_ARRAYS_INTEL = 0x83F4
  PARAMETER_BUFFER_ARB = 0x80EE
  PARAMETER_BUFFER_BINDING_ARB = 0x80EF
  PARTIAL_SUCCESS_NV = 0x902E
  PASS_THROUGH_NV = 0x86E6
  PATCHES = 0x000E
  PATCH_DEFAULT_INNER_LEVEL = 0x8E73
  PATCH_DEFAULT_OUTER_LEVEL = 0x8E74
  PATCH_VERTICES = 0x8E72
  PATH_CLIENT_LENGTH_NV = 0x907F
  PATH_COMMAND_COUNT_NV = 0x909D
  PATH_COMPUTED_LENGTH_NV = 0x90A0
  PATH_COORD_COUNT_NV = 0x909E
  PATH_COVER_DEPTH_FUNC_NV = 0x90BF
  PATH_DASH_ARRAY_COUNT_NV = 0x909F
  PATH_DASH_CAPS_NV = 0x907B
  PATH_DASH_OFFSET_NV = 0x907E
  PATH_DASH_OFFSET_RESET_NV = 0x90B4
  PATH_END_CAPS_NV = 0x9076
  PATH_ERROR_POSITION_NV = 0x90AB
  PATH_FILL_BOUNDING_BOX_NV = 0x90A1
  PATH_FILL_COVER_MODE_NV = 0x9082
  PATH_FILL_MASK_NV = 0x9081
  PATH_FILL_MODE_NV = 0x9080
  PATH_FOG_GEN_MODE_NV = 0x90AC
  PATH_FORMAT_PS_NV = 0x9071
  PATH_FORMAT_SVG_NV = 0x9070
  PATH_GEN_COEFF_NV = 0x90B1
  PATH_GEN_COLOR_FORMAT_NV = 0x90B2
  PATH_GEN_COMPONENTS_NV = 0x90B3
  PATH_GEN_MODE_NV = 0x90B0
  PATH_INITIAL_DASH_CAP_NV = 0x907C
  PATH_INITIAL_END_CAP_NV = 0x9077
  PATH_JOIN_STYLE_NV = 0x9079
  PATH_MITER_LIMIT_NV = 0x907A
  PATH_OBJECT_BOUNDING_BOX_NV = 0x908A
  PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV = 0x90BD
  PATH_STENCIL_DEPTH_OFFSET_UNITS_NV = 0x90BE
  PATH_STENCIL_FUNC_NV = 0x90B7
  PATH_STENCIL_REF_NV = 0x90B8
  PATH_STENCIL_VALUE_MASK_NV = 0x90B9
  PATH_STROKE_BOUNDING_BOX_NV = 0x90A2
  PATH_STROKE_COVER_MODE_NV = 0x9083
  PATH_STROKE_MASK_NV = 0x9084
  PATH_STROKE_WIDTH_NV = 0x9075
  PATH_TERMINAL_DASH_CAP_NV = 0x907D
  PATH_TERMINAL_END_CAP_NV = 0x9078
  PERCENTAGE_AMD = 0x8BC3
  PERFMON_RESULT_AMD = 0x8BC6
  PERFMON_RESULT_AVAILABLE_AMD = 0x8BC4
  PERFMON_RESULT_SIZE_AMD = 0x8BC5
  PERFORMANCE_MONITOR_AMD = 0x9152
  PERFQUERY_COUNTER_DATA_BOOL32_INTEL = 0x94FC
  PERFQUERY_COUNTER_DATA_DOUBLE_INTEL = 0x94FB
  PERFQUERY_COUNTER_DATA_FLOAT_INTEL = 0x94FA
  PERFQUERY_COUNTER_DATA_UINT32_INTEL = 0x94F8
  PERFQUERY_COUNTER_DATA_UINT64_INTEL = 0x94F9
  PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL = 0x94FF
  PERFQUERY_COUNTER_DURATION_NORM_INTEL = 0x94F1
  PERFQUERY_COUNTER_DURATION_RAW_INTEL = 0x94F2
  PERFQUERY_COUNTER_EVENT_INTEL = 0x94F0
  PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL = 0x94FE
  PERFQUERY_COUNTER_RAW_INTEL = 0x94F4
  PERFQUERY_COUNTER_THROUGHPUT_INTEL = 0x94F3
  PERFQUERY_COUNTER_TIMESTAMP_INTEL = 0x94F5
  PERFQUERY_DONOT_FLUSH_INTEL = 0x83F9
  PERFQUERY_FLUSH_INTEL = 0x83FA
  PERFQUERY_GLOBAL_CONTEXT_INTEL = 0x00000001
  PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL = 0x9500
  PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL = 0x94FD
  PERFQUERY_SINGLE_CONTEXT_INTEL = 0x00000000
  PERFQUERY_WAIT_INTEL = 0x83FB
  PERTURB_EXT = 0x85AE
  PER_STAGE_CONSTANTS_NV = 0x8535
  PHONG_HINT_WIN = 0x80EB
  PHONG_WIN = 0x80EA
  PINLIGHT_NV = 0x92A8
  PIXEL_BUFFER_BARRIER_BIT = 0x00000080
  PIXEL_BUFFER_BARRIER_BIT_EXT = 0x00000080
  PIXEL_COUNTER_BITS_NV = 0x8864
  PIXEL_COUNT_AVAILABLE_NV = 0x8867
  PIXEL_COUNT_NV = 0x8866
  PIXEL_CUBIC_WEIGHT_EXT = 0x8333
  PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS = 0x8355
  PIXEL_FRAGMENT_RGB_SOURCE_SGIS = 0x8354
  PIXEL_GROUP_COLOR_SGIS = 0x8356
  PIXEL_MAG_FILTER_EXT = 0x8331
  PIXEL_MIN_FILTER_EXT = 0x8332
  PIXEL_PACK_BUFFER = 0x88EB
  PIXEL_PACK_BUFFER_ARB = 0x88EB
  PIXEL_PACK_BUFFER_BINDING = 0x88ED
  PIXEL_PACK_BUFFER_BINDING_ARB = 0x88ED
  PIXEL_PACK_BUFFER_BINDING_EXT = 0x88ED
  PIXEL_PACK_BUFFER_EXT = 0x88EB
  PIXEL_SUBSAMPLE_2424_SGIX = 0x85A3
  PIXEL_SUBSAMPLE_4242_SGIX = 0x85A4
  PIXEL_SUBSAMPLE_4444_SGIX = 0x85A2
  PIXEL_TEXTURE_SGIS = 0x8353
  PIXEL_TEX_GEN_MODE_SGIX = 0x832B
  PIXEL_TEX_GEN_SGIX = 0x8139
  PIXEL_TILE_BEST_ALIGNMENT_SGIX = 0x813E
  PIXEL_TILE_CACHE_INCREMENT_SGIX = 0x813F
  PIXEL_TILE_CACHE_SIZE_SGIX = 0x8145
  PIXEL_TILE_GRID_DEPTH_SGIX = 0x8144
  PIXEL_TILE_GRID_HEIGHT_SGIX = 0x8143
  PIXEL_TILE_GRID_WIDTH_SGIX = 0x8142
  PIXEL_TILE_HEIGHT_SGIX = 0x8141
  PIXEL_TILE_WIDTH_SGIX = 0x8140
  PIXEL_TRANSFORM_2D_EXT = 0x8330
  PIXEL_TRANSFORM_2D_MATRIX_EXT = 0x8338
  PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 0x8336
  PIXEL_UNPACK_BUFFER = 0x88EC
  PIXEL_UNPACK_BUFFER_ARB = 0x88EC
  PIXEL_UNPACK_BUFFER_BINDING = 0x88EF
  PIXEL_UNPACK_BUFFER_BINDING_ARB = 0x88EF
  PIXEL_UNPACK_BUFFER_BINDING_EXT = 0x88EF
  PIXEL_UNPACK_BUFFER_EXT = 0x88EC
  PLUS_CLAMPED_ALPHA_NV = 0x92B2
  PLUS_CLAMPED_NV = 0x92B1
  PLUS_DARKER_NV = 0x9292
  PLUS_NV = 0x9291
  PN_TRIANGLES_ATI = 0x87F0
  PN_TRIANGLES_NORMAL_MODE_ATI = 0x87F3
  PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI = 0x87F7
  PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI = 0x87F8
  PN_TRIANGLES_POINT_MODE_ATI = 0x87F2
  PN_TRIANGLES_POINT_MODE_CUBIC_ATI = 0x87F6
  PN_TRIANGLES_POINT_MODE_LINEAR_ATI = 0x87F5
  PN_TRIANGLES_TESSELATION_LEVEL_ATI = 0x87F4
  POINT = 0x1B00
  POINTS = 0x0000
  POINT_DISTANCE_ATTENUATION_ARB = 0x8129
  POINT_FADE_THRESHOLD_SIZE = 0x8128
  POINT_FADE_THRESHOLD_SIZE_ARB = 0x8128
  POINT_FADE_THRESHOLD_SIZE_EXT = 0x8128
  POINT_FADE_THRESHOLD_SIZE_SGIS = 0x8128
  POINT_SIZE = 0x0B11
  POINT_SIZE_GRANULARITY = 0x0B13
  POINT_SIZE_MAX_ARB = 0x8127
  POINT_SIZE_MAX_EXT = 0x8127
  POINT_SIZE_MAX_SGIS = 0x8127
  POINT_SIZE_MIN_ARB = 0x8126
  POINT_SIZE_MIN_EXT = 0x8126
  POINT_SIZE_MIN_SGIS = 0x8126
  POINT_SIZE_RANGE = 0x0B12
  POINT_SPRITE_ARB = 0x8861
  POINT_SPRITE_COORD_ORIGIN = 0x8CA0
  POINT_SPRITE_NV = 0x8861
  POINT_SPRITE_R_MODE_NV = 0x8863
  POLYGON_MODE = 0x0B40
  POLYGON_OFFSET_BIAS_EXT = 0x8039
  POLYGON_OFFSET_EXT = 0x8037
  POLYGON_OFFSET_FACTOR = 0x8038
  POLYGON_OFFSET_FACTOR_EXT = 0x8038
  POLYGON_OFFSET_FILL = 0x8037
  POLYGON_OFFSET_LINE = 0x2A02
  POLYGON_OFFSET_POINT = 0x2A01
  POLYGON_OFFSET_UNITS = 0x2A00
  POLYGON_SMOOTH = 0x0B41
  POLYGON_SMOOTH_HINT = 0x0C53
  POST_COLOR_MATRIX_ALPHA_BIAS_SGI = 0x80BB
  POST_COLOR_MATRIX_ALPHA_SCALE_SGI = 0x80B7
  POST_COLOR_MATRIX_BLUE_BIAS_SGI = 0x80BA
  POST_COLOR_MATRIX_BLUE_SCALE_SGI = 0x80B6
  POST_COLOR_MATRIX_COLOR_TABLE_SGI = 0x80D2
  POST_COLOR_MATRIX_GREEN_BIAS_SGI = 0x80B9
  POST_COLOR_MATRIX_GREEN_SCALE_SGI = 0x80B5
  POST_COLOR_MATRIX_RED_BIAS_SGI = 0x80B8
  POST_COLOR_MATRIX_RED_SCALE_SGI = 0x80B4
  POST_CONVOLUTION_ALPHA_BIAS_EXT = 0x8023
  POST_CONVOLUTION_ALPHA_SCALE_EXT = 0x801F
  POST_CONVOLUTION_BLUE_BIAS_EXT = 0x8022
  POST_CONVOLUTION_BLUE_SCALE_EXT = 0x801E
  POST_CONVOLUTION_COLOR_TABLE_SGI = 0x80D1
  POST_CONVOLUTION_GREEN_BIAS_EXT = 0x8021
  POST_CONVOLUTION_GREEN_SCALE_EXT = 0x801D
  POST_CONVOLUTION_RED_BIAS_EXT = 0x8020
  POST_CONVOLUTION_RED_SCALE_EXT = 0x801C
  POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = 0x8162
  POST_TEXTURE_FILTER_BIAS_RANGE_SGIX = 0x817B
  POST_TEXTURE_FILTER_BIAS_SGIX = 0x8179
  POST_TEXTURE_FILTER_SCALE_RANGE_SGIX = 0x817C
  POST_TEXTURE_FILTER_SCALE_SGIX = 0x817A
  PREFER_DOUBLEBUFFER_HINT_PGI = 0x1A1F8
  PRESENT_DURATION_NV = 0x8E2B
  PRESENT_TIME_NV = 0x8E2A
  PRESERVE_ATI = 0x8762
  PREVIOUS_ARB = 0x8578
  PREVIOUS_EXT = 0x8578
  PREVIOUS_TEXTURE_INPUT_NV = 0x86E4
  PRIMARY_COLOR = 0x8577
  PRIMARY_COLOR_ARB = 0x8577
  PRIMARY_COLOR_EXT = 0x8577
  PRIMARY_COLOR_NV = 0x852C
  PRIMITIVES_GENERATED = 0x8C87
  PRIMITIVES_GENERATED_EXT = 0x8C87
  PRIMITIVES_GENERATED_NV = 0x8C87
  PRIMITIVE_ID_NV = 0x8C7C
  PRIMITIVE_RESTART = 0x8F9D
  PRIMITIVE_RESTART_FIXED_INDEX = 0x8D69
  PRIMITIVE_RESTART_INDEX = 0x8F9E
  PRIMITIVE_RESTART_INDEX_NV = 0x8559
  PRIMITIVE_RESTART_NV = 0x8558
  PROGRAM = 0x82E2
  PROGRAM_ADDRESS_REGISTERS_ARB = 0x88B0
  PROGRAM_ALU_INSTRUCTIONS_ARB = 0x8805
  PROGRAM_ATTRIBS_ARB = 0x88AC
  PROGRAM_ATTRIB_COMPONENTS_NV = 0x8906
  PROGRAM_BINARY_FORMATS = 0x87FF
  PROGRAM_BINARY_LENGTH = 0x8741
  PROGRAM_BINARY_RETRIEVABLE_HINT = 0x8257
  PROGRAM_BINDING_ARB = 0x8677
  PROGRAM_ERROR_POSITION_ARB = 0x864B
  PROGRAM_ERROR_POSITION_NV = 0x864B
  PROGRAM_ERROR_STRING_ARB = 0x8874
  PROGRAM_ERROR_STRING_NV = 0x8874
  PROGRAM_FORMAT_ARB = 0x8876
  PROGRAM_FORMAT_ASCII_ARB = 0x8875
  PROGRAM_INPUT = 0x92E3
  PROGRAM_INSTRUCTIONS_ARB = 0x88A0
  PROGRAM_KHR = 0x82E2
  PROGRAM_LENGTH_ARB = 0x8627
  PROGRAM_LENGTH_NV = 0x8627
  PROGRAM_MATRIX_EXT = 0x8E2D
  PROGRAM_MATRIX_STACK_DEPTH_EXT = 0x8E2F
  PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 0x88B2
  PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 0x8808
  PROGRAM_NATIVE_ATTRIBS_ARB = 0x88AE
  PROGRAM_NATIVE_INSTRUCTIONS_ARB = 0x88A2
  PROGRAM_NATIVE_PARAMETERS_ARB = 0x88AA
  PROGRAM_NATIVE_TEMPORARIES_ARB = 0x88A6
  PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 0x880A
  PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 0x8809
  PROGRAM_OBJECT_ARB = 0x8B40
  PROGRAM_OBJECT_EXT = 0x8B40
  PROGRAM_OUTPUT = 0x92E4
  PROGRAM_PARAMETERS_ARB = 0x88A8
  PROGRAM_PARAMETER_NV = 0x8644
  PROGRAM_PIPELINE = 0x82E4
  PROGRAM_PIPELINE_BINDING = 0x825A
  PROGRAM_PIPELINE_BINDING_EXT = 0x825A
  PROGRAM_PIPELINE_OBJECT_EXT = 0x8A4F
  PROGRAM_POINT_SIZE = 0x8642
  PROGRAM_POINT_SIZE_ARB = 0x8642
  PROGRAM_POINT_SIZE_EXT = 0x8642
  PROGRAM_RESIDENT_NV = 0x8647
  PROGRAM_RESULT_COMPONENTS_NV = 0x8907
  PROGRAM_SEPARABLE = 0x8258
  PROGRAM_SEPARABLE_EXT = 0x8258
  PROGRAM_STRING_ARB = 0x8628
  PROGRAM_STRING_NV = 0x8628
  PROGRAM_TARGET_NV = 0x8646
  PROGRAM_TEMPORARIES_ARB = 0x88A4
  PROGRAM_TEX_INDIRECTIONS_ARB = 0x8807
  PROGRAM_TEX_INSTRUCTIONS_ARB = 0x8806
  PROGRAM_UNDER_NATIVE_LIMITS_ARB = 0x88B6
  PROVOKING_VERTEX = 0x8E4F
  PROVOKING_VERTEX_EXT = 0x8E4F
  PROXY_COLOR_TABLE_SGI = 0x80D3
  PROXY_HISTOGRAM_EXT = 0x8025
  PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI = 0x80D5
  PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI = 0x80D4
  PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = 0x8163
  PROXY_TEXTURE_1D = 0x8063
  PROXY_TEXTURE_1D_ARRAY = 0x8C19
  PROXY_TEXTURE_1D_ARRAY_EXT = 0x8C19
  PROXY_TEXTURE_1D_EXT = 0x8063
  PROXY_TEXTURE_1D_STACK_MESAX = 0x875B
  PROXY_TEXTURE_2D = 0x8064
  PROXY_TEXTURE_2D_ARRAY = 0x8C1B
  PROXY_TEXTURE_2D_ARRAY_EXT = 0x8C1B
  PROXY_TEXTURE_2D_EXT = 0x8064
  PROXY_TEXTURE_2D_MULTISAMPLE = 0x9101
  PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9103
  PROXY_TEXTURE_2D_STACK_MESAX = 0x875C
  PROXY_TEXTURE_3D = 0x8070
  PROXY_TEXTURE_3D_EXT = 0x8070
  PROXY_TEXTURE_4D_SGIS = 0x8135
  PROXY_TEXTURE_COLOR_TABLE_SGI = 0x80BD
  PROXY_TEXTURE_CUBE_MAP = 0x851B
  PROXY_TEXTURE_CUBE_MAP_ARB = 0x851B
  PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB = 0x900B
  PROXY_TEXTURE_CUBE_MAP_EXT = 0x851B
  PROXY_TEXTURE_RECTANGLE = 0x84F7
  PROXY_TEXTURE_RECTANGLE_ARB = 0x84F7
  PROXY_TEXTURE_RECTANGLE_NV = 0x84F7
  PURGEABLE_APPLE = 0x8A1D
  QUADRATIC_CURVE_TO_NV = 0x0A
  QUADS = 0x0007
  QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = 0x8E4C
  QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT = 0x8E4C
  QUAD_ALPHA4_SGIS = 0x811E
  QUAD_ALPHA8_SGIS = 0x811F
  QUAD_INTENSITY4_SGIS = 0x8122
  QUAD_INTENSITY8_SGIS = 0x8123
  QUAD_LUMINANCE4_SGIS = 0x8120
  QUAD_LUMINANCE8_SGIS = 0x8121
  QUAD_MESH_SUN = 0x8614
  QUAD_TEXTURE_SELECT_SGIS = 0x8125
  QUARTER_BIT_ATI = 0x00000010
  QUERY = 0x82E3
  QUERY_ALL_EVENT_BITS_AMD = 0xFFFFFFFF
  QUERY_BUFFER = 0x9192
  QUERY_BUFFER_AMD = 0x9192
  QUERY_BUFFER_BARRIER_BIT = 0x00008000
  QUERY_BUFFER_BINDING = 0x9193
  QUERY_BUFFER_BINDING_AMD = 0x9193
  QUERY_BY_REGION_NO_WAIT = 0x8E16
  QUERY_BY_REGION_NO_WAIT_NV = 0x8E16
  QUERY_BY_REGION_WAIT = 0x8E15
  QUERY_BY_REGION_WAIT_NV = 0x8E15
  QUERY_COUNTER_BITS = 0x8864
  QUERY_COUNTER_BITS_ARB = 0x8864
  QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD = 0x00000008
  QUERY_DEPTH_FAIL_EVENT_BIT_AMD = 0x00000002
  QUERY_DEPTH_PASS_EVENT_BIT_AMD = 0x00000001
  QUERY_KHR = 0x82E3
  QUERY_NO_WAIT = 0x8E14
  QUERY_NO_WAIT_NV = 0x8E14
  QUERY_OBJECT_AMD = 0x9153
  QUERY_OBJECT_EXT = 0x9153
  QUERY_RESULT = 0x8866
  QUERY_RESULT_ARB = 0x8866
  QUERY_RESULT_AVAILABLE = 0x8867
  QUERY_RESULT_AVAILABLE_ARB = 0x8867
  QUERY_RESULT_NO_WAIT = 0x9194
  QUERY_RESULT_NO_WAIT_AMD = 0x9194
  QUERY_STENCIL_FAIL_EVENT_BIT_AMD = 0x00000004
  QUERY_WAIT = 0x8E13
  QUERY_WAIT_NV = 0x8E13
  R11F_G11F_B10F = 0x8C3A
  R11F_G11F_B10F_EXT = 0x8C3A
  R16 = 0x822A
  R16F = 0x822D
  R16I = 0x8233
  R16UI = 0x8234
  R16_SNORM = 0x8F98
  R1UI_C3F_V3F_SUN = 0x85C6
  R1UI_C4F_N3F_V3F_SUN = 0x85C8
  R1UI_C4UB_V3F_SUN = 0x85C5
  R1UI_N3F_V3F_SUN = 0x85C7
  R1UI_T2F_C4F_N3F_V3F_SUN = 0x85CB
  R1UI_T2F_N3F_V3F_SUN = 0x85CA
  R1UI_T2F_V3F_SUN = 0x85C9
  R1UI_V3F_SUN = 0x85C4
  R32F = 0x822E
  R32I = 0x8235
  R32UI = 0x8236
  R3_G3_B2 = 0x2A10
  R8 = 0x8229
  R8I = 0x8231
  R8UI = 0x8232
  R8_SNORM = 0x8F94
  RASTERIZER_DISCARD = 0x8C89
  RASTERIZER_DISCARD_EXT = 0x8C89
  RASTERIZER_DISCARD_NV = 0x8C89
  RASTER_POSITION_UNCLIPPED_IBM = 0x19262
  READ_BUFFER = 0x0C02
  READ_FRAMEBUFFER = 0x8CA8
  READ_FRAMEBUFFER_BINDING = 0x8CAA
  READ_FRAMEBUFFER_BINDING_EXT = 0x8CAA
  READ_FRAMEBUFFER_EXT = 0x8CA8
  READ_ONLY = 0x88B8
  READ_ONLY_ARB = 0x88B8
  READ_PIXELS = 0x828C
  READ_PIXELS_FORMAT = 0x828D
  READ_PIXELS_TYPE = 0x828E
  READ_PIXEL_DATA_RANGE_LENGTH_NV = 0x887B
  READ_PIXEL_DATA_RANGE_NV = 0x8879
  READ_PIXEL_DATA_RANGE_POINTER_NV = 0x887D
  READ_WRITE = 0x88BA
  READ_WRITE_ARB = 0x88BA
  RECLAIM_MEMORY_HINT_PGI = 0x1A1FE
  RECT_NV = 0xF6
  RED = 0x1903
  REDUCE_EXT = 0x8016
  RED_BIT_ATI = 0x00000001
  RED_INTEGER = 0x8D94
  RED_INTEGER_EXT = 0x8D94
  RED_MAX_CLAMP_INGR = 0x8564
  RED_MIN_CLAMP_INGR = 0x8560
  RED_NV = 0x1903
  RED_SNORM = 0x8F90
  REFERENCED_BY_COMPUTE_SHADER = 0x930B
  REFERENCED_BY_FRAGMENT_SHADER = 0x930A
  REFERENCED_BY_GEOMETRY_SHADER = 0x9309
  REFERENCED_BY_TESS_CONTROL_SHADER = 0x9307
  REFERENCED_BY_TESS_EVALUATION_SHADER = 0x9308
  REFERENCED_BY_VERTEX_SHADER = 0x9306
  REFERENCE_PLANE_EQUATION_SGIX = 0x817E
  REFERENCE_PLANE_SGIX = 0x817D
  REFLECTION_MAP_ARB = 0x8512
  REFLECTION_MAP_EXT = 0x8512
  REFLECTION_MAP_NV = 0x8512
  REGISTER_COMBINERS_NV = 0x8522
  REG_0_ATI = 0x8921
  REG_10_ATI = 0x892B
  REG_11_ATI = 0x892C
  REG_12_ATI = 0x892D
  REG_13_ATI = 0x892E
  REG_14_ATI = 0x892F
  REG_15_ATI = 0x8930
  REG_16_ATI = 0x8931
  REG_17_ATI = 0x8932
  REG_18_ATI = 0x8933
  REG_19_ATI = 0x8934
  REG_1_ATI = 0x8922
  REG_20_ATI = 0x8935
  REG_21_ATI = 0x8936
  REG_22_ATI = 0x8937
  REG_23_ATI = 0x8938
  REG_24_ATI = 0x8939
  REG_25_ATI = 0x893A
  REG_26_ATI = 0x893B
  REG_27_ATI = 0x893C
  REG_28_ATI = 0x893D
  REG_29_ATI = 0x893E
  REG_2_ATI = 0x8923
  REG_30_ATI = 0x893F
  REG_31_ATI = 0x8940
  REG_3_ATI = 0x8924
  REG_4_ATI = 0x8925
  REG_5_ATI = 0x8926
  REG_6_ATI = 0x8927
  REG_7_ATI = 0x8928
  REG_8_ATI = 0x8929
  REG_9_ATI = 0x892A
  RELATIVE_ARC_TO_NV = 0xFF
  RELATIVE_CUBIC_CURVE_TO_NV = 0x0D
  RELATIVE_HORIZONTAL_LINE_TO_NV = 0x07
  RELATIVE_LARGE_CCW_ARC_TO_NV = 0x17
  RELATIVE_LARGE_CW_ARC_TO_NV = 0x19
  RELATIVE_LINE_TO_NV = 0x05
  RELATIVE_MOVE_TO_NV = 0x03
  RELATIVE_QUADRATIC_CURVE_TO_NV = 0x0B
  RELATIVE_SMALL_CCW_ARC_TO_NV = 0x13
  RELATIVE_SMALL_CW_ARC_TO_NV = 0x15
  RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV = 0x11
  RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV = 0x0F
  RELATIVE_VERTICAL_LINE_TO_NV = 0x09
  RELEASED_APPLE = 0x8A19
  RENDERBUFFER = 0x8D41
  RENDERBUFFER_ALPHA_SIZE = 0x8D53
  RENDERBUFFER_ALPHA_SIZE_EXT = 0x8D53
  RENDERBUFFER_BINDING = 0x8CA7
  RENDERBUFFER_BINDING_EXT = 0x8CA7
  RENDERBUFFER_BLUE_SIZE = 0x8D52
  RENDERBUFFER_BLUE_SIZE_EXT = 0x8D52
  RENDERBUFFER_COLOR_SAMPLES_NV = 0x8E10
  RENDERBUFFER_COVERAGE_SAMPLES_NV = 0x8CAB
  RENDERBUFFER_DEPTH_SIZE = 0x8D54
  RENDERBUFFER_DEPTH_SIZE_EXT = 0x8D54
  RENDERBUFFER_EXT = 0x8D41
  RENDERBUFFER_FREE_MEMORY_ATI = 0x87FD
  RENDERBUFFER_GREEN_SIZE = 0x8D51
  RENDERBUFFER_GREEN_SIZE_EXT = 0x8D51
  RENDERBUFFER_HEIGHT = 0x8D43
  RENDERBUFFER_HEIGHT_EXT = 0x8D43
  RENDERBUFFER_INTERNAL_FORMAT = 0x8D44
  RENDERBUFFER_INTERNAL_FORMAT_EXT = 0x8D44
  RENDERBUFFER_RED_SIZE = 0x8D50
  RENDERBUFFER_RED_SIZE_EXT = 0x8D50
  RENDERBUFFER_SAMPLES = 0x8CAB
  RENDERBUFFER_SAMPLES_EXT = 0x8CAB
  RENDERBUFFER_STENCIL_SIZE = 0x8D55
  RENDERBUFFER_STENCIL_SIZE_EXT = 0x8D55
  RENDERBUFFER_WIDTH = 0x8D42
  RENDERBUFFER_WIDTH_EXT = 0x8D42
  RENDERER = 0x1F01
  REPEAT = 0x2901
  REPLACE = 0x1E01
  REPLACEMENT_CODE_ARRAY_POINTER_SUN = 0x85C3
  REPLACEMENT_CODE_ARRAY_STRIDE_SUN = 0x85C2
  REPLACEMENT_CODE_ARRAY_SUN = 0x85C0
  REPLACEMENT_CODE_ARRAY_TYPE_SUN = 0x85C1
  REPLACEMENT_CODE_SUN = 0x81D8
  REPLACE_EXT = 0x8062
  REPLACE_MIDDLE_SUN = 0x0002
  REPLACE_OLDEST_SUN = 0x0003
  REPLACE_VALUE_AMD = 0x874B
  REPLICATE_BORDER_HP = 0x8153
  RESAMPLE_AVERAGE_OML = 0x8988
  RESAMPLE_DECIMATE_OML = 0x8989
  RESAMPLE_DECIMATE_SGIX = 0x8430
  RESAMPLE_REPLICATE_OML = 0x8986
  RESAMPLE_REPLICATE_SGIX = 0x842E
  RESAMPLE_ZERO_FILL_OML = 0x8987
  RESAMPLE_ZERO_FILL_SGIX = 0x842F
  RESCALE_NORMAL_EXT = 0x803A
  RESET_NOTIFICATION_STRATEGY_ARB = 0x8256
  RESTART_PATH_NV = 0xF0
  RESTART_SUN = 0x0001
  RETAINED_APPLE = 0x8A1B
  RG = 0x8227
  RG16 = 0x822C
  RG16F = 0x822F
  RG16I = 0x8239
  RG16UI = 0x823A
  RG16_SNORM = 0x8F99
  RG32F = 0x8230
  RG32I = 0x823B
  RG32UI = 0x823C
  RG8 = 0x822B
  RG8I = 0x8237
  RG8UI = 0x8238
  RG8_SNORM = 0x8F95
  RGB = 0x1907
  RGB10 = 0x8052
  RGB10_A2 = 0x8059
  RGB10_A2UI = 0x906F
  RGB10_A2_EXT = 0x8059
  RGB10_EXT = 0x8052
  RGB12 = 0x8053
  RGB12_EXT = 0x8053
  RGB16 = 0x8054
  RGB16F = 0x881B
  RGB16F_ARB = 0x881B
  RGB16I = 0x8D89
  RGB16I_EXT = 0x8D89
  RGB16UI = 0x8D77
  RGB16UI_EXT = 0x8D77
  RGB16_EXT = 0x8054
  RGB16_SNORM = 0x8F9A
  RGB2_EXT = 0x804E
  RGB32F = 0x8815
  RGB32F_ARB = 0x8815
  RGB32I = 0x8D83
  RGB32I_EXT = 0x8D83
  RGB32UI = 0x8D71
  RGB32UI_EXT = 0x8D71
  RGB4 = 0x804F
  RGB4_EXT = 0x804F
  RGB4_S3TC = 0x83A1
  RGB5 = 0x8050
  RGB565 = 0x8D62
  RGB5_A1 = 0x8057
  RGB5_A1_EXT = 0x8057
  RGB5_EXT = 0x8050
  RGB8 = 0x8051
  RGB8I = 0x8D8F
  RGB8I_EXT = 0x8D8F
  RGB8UI = 0x8D7D
  RGB8UI_EXT = 0x8D7D
  RGB8_EXT = 0x8051
  RGB8_SNORM = 0x8F96
  RGB9_E5 = 0x8C3D
  RGB9_E5_EXT = 0x8C3D
  RGBA = 0x1908
  RGBA12 = 0x805A
  RGBA12_EXT = 0x805A
  RGBA16 = 0x805B
  RGBA16F = 0x881A
  RGBA16F_ARB = 0x881A
  RGBA16I = 0x8D88
  RGBA16I_EXT = 0x8D88
  RGBA16UI = 0x8D76
  RGBA16UI_EXT = 0x8D76
  RGBA16_EXT = 0x805B
  RGBA16_SNORM = 0x8F9B
  RGBA2 = 0x8055
  RGBA2_EXT = 0x8055
  RGBA32F = 0x8814
  RGBA32F_ARB = 0x8814
  RGBA32I = 0x8D82
  RGBA32I_EXT = 0x8D82
  RGBA32UI = 0x8D70
  RGBA32UI_EXT = 0x8D70
  RGBA4 = 0x8056
  RGBA4_DXT5_S3TC = 0x83A5
  RGBA4_EXT = 0x8056
  RGBA4_S3TC = 0x83A3
  RGBA8 = 0x8058
  RGBA8I = 0x8D8E
  RGBA8I_EXT = 0x8D8E
  RGBA8UI = 0x8D7C
  RGBA8UI_EXT = 0x8D7C
  RGBA8_EXT = 0x8058
  RGBA8_SNORM = 0x8F97
  RGBA_DXT5_S3TC = 0x83A4
  RGBA_FLOAT16_APPLE = 0x881A
  RGBA_FLOAT16_ATI = 0x881A
  RGBA_FLOAT32_APPLE = 0x8814
  RGBA_FLOAT32_ATI = 0x8814
  RGBA_FLOAT_MODE_ARB = 0x8820
  RGBA_FLOAT_MODE_ATI = 0x8820
  RGBA_INTEGER = 0x8D99
  RGBA_INTEGER_EXT = 0x8D99
  RGBA_INTEGER_MODE_EXT = 0x8D9E
  RGBA_S3TC = 0x83A2
  RGBA_SIGNED_COMPONENTS_EXT = 0x8C3C
  RGBA_SNORM = 0x8F93
  RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV = 0x86D9
  RGB_422_APPLE = 0x8A1F
  RGB_FLOAT16_APPLE = 0x881B
  RGB_FLOAT16_ATI = 0x881B
  RGB_FLOAT32_APPLE = 0x8815
  RGB_FLOAT32_ATI = 0x8815
  RGB_INTEGER = 0x8D98
  RGB_INTEGER_EXT = 0x8D98
  RGB_RAW_422_APPLE = 0x8A51
  RGB_S3TC = 0x83A0
  RGB_SCALE_ARB = 0x8573
  RGB_SCALE_EXT = 0x8573
  RGB_SNORM = 0x8F92
  RG_INTEGER = 0x8228
  RG_SNORM = 0x8F91
  RIGHT = 0x0407
  ROUND_NV = 0x90A4
  SAMPLER = 0x82E6
  SAMPLER_1D = 0x8B5D
  SAMPLER_1D_ARB = 0x8B5D
  SAMPLER_1D_ARRAY = 0x8DC0
  SAMPLER_1D_ARRAY_EXT = 0x8DC0
  SAMPLER_1D_ARRAY_SHADOW = 0x8DC3
  SAMPLER_1D_ARRAY_SHADOW_EXT = 0x8DC3
  SAMPLER_1D_SHADOW = 0x8B61
  SAMPLER_1D_SHADOW_ARB = 0x8B61
  SAMPLER_2D = 0x8B5E
  SAMPLER_2D_ARB = 0x8B5E
  SAMPLER_2D_ARRAY = 0x8DC1
  SAMPLER_2D_ARRAY_EXT = 0x8DC1
  SAMPLER_2D_ARRAY_SHADOW = 0x8DC4
  SAMPLER_2D_ARRAY_SHADOW_EXT = 0x8DC4
  SAMPLER_2D_MULTISAMPLE = 0x9108
  SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910B
  SAMPLER_2D_RECT = 0x8B63
  SAMPLER_2D_RECT_ARB = 0x8B63
  SAMPLER_2D_RECT_SHADOW = 0x8B64
  SAMPLER_2D_RECT_SHADOW_ARB = 0x8B64
  SAMPLER_2D_SHADOW = 0x8B62
  SAMPLER_2D_SHADOW_ARB = 0x8B62
  SAMPLER_3D = 0x8B5F
  SAMPLER_3D_ARB = 0x8B5F
  SAMPLER_BINDING = 0x8919
  SAMPLER_BUFFER = 0x8DC2
  SAMPLER_BUFFER_AMD = 0x9001
  SAMPLER_BUFFER_EXT = 0x8DC2
  SAMPLER_CUBE = 0x8B60
  SAMPLER_CUBE_ARB = 0x8B60
  SAMPLER_CUBE_MAP_ARRAY_ARB = 0x900C
  SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB = 0x900D
  SAMPLER_CUBE_SHADOW = 0x8DC5
  SAMPLER_CUBE_SHADOW_EXT = 0x8DC5
  SAMPLER_KHR = 0x82E6
  SAMPLER_OBJECT_AMD = 0x9155
  SAMPLER_RENDERBUFFER_NV = 0x8E56
  SAMPLES = 0x80A9
  SAMPLES_3DFX = 0x86B4
  SAMPLES_ARB = 0x80A9
  SAMPLES_EXT = 0x80A9
  SAMPLES_PASSED = 0x8914
  SAMPLES_PASSED_ARB = 0x8914
  SAMPLES_SGIS = 0x80A9
  SAMPLE_ALPHA_TO_COVERAGE = 0x809E
  SAMPLE_ALPHA_TO_COVERAGE_ARB = 0x809E
  SAMPLE_ALPHA_TO_MASK_EXT = 0x809E
  SAMPLE_ALPHA_TO_MASK_SGIS = 0x809E
  SAMPLE_ALPHA_TO_ONE = 0x809F
  SAMPLE_ALPHA_TO_ONE_ARB = 0x809F
  SAMPLE_ALPHA_TO_ONE_EXT = 0x809F
  SAMPLE_ALPHA_TO_ONE_SGIS = 0x809F
  SAMPLE_BUFFERS = 0x80A8
  SAMPLE_BUFFERS_3DFX = 0x86B3
  SAMPLE_BUFFERS_ARB = 0x80A8
  SAMPLE_BUFFERS_EXT = 0x80A8
  SAMPLE_BUFFERS_SGIS = 0x80A8
  SAMPLE_COVERAGE = 0x80A0
  SAMPLE_COVERAGE_ARB = 0x80A0
  SAMPLE_COVERAGE_INVERT = 0x80AB
  SAMPLE_COVERAGE_INVERT_ARB = 0x80AB
  SAMPLE_COVERAGE_VALUE = 0x80AA
  SAMPLE_COVERAGE_VALUE_ARB = 0x80AA
  SAMPLE_MASK = 0x8E51
  SAMPLE_MASK_EXT = 0x80A0
  SAMPLE_MASK_INVERT_EXT = 0x80AB
  SAMPLE_MASK_INVERT_SGIS = 0x80AB
  SAMPLE_MASK_NV = 0x8E51
  SAMPLE_MASK_SGIS = 0x80A0
  SAMPLE_MASK_VALUE = 0x8E52
  SAMPLE_MASK_VALUE_EXT = 0x80AA
  SAMPLE_MASK_VALUE_NV = 0x8E52
  SAMPLE_MASK_VALUE_SGIS = 0x80AA
  SAMPLE_PATTERN_EXT = 0x80AC
  SAMPLE_PATTERN_SGIS = 0x80AC
  SAMPLE_POSITION = 0x8E50
  SAMPLE_POSITION_NV = 0x8E50
  SAMPLE_SHADING_ARB = 0x8C36
  SATURATE_BIT_ATI = 0x00000040
  SCALAR_EXT = 0x87BE
  SCALEBIAS_HINT_SGIX = 0x8322
  SCALED_RESOLVE_FASTEST_EXT = 0x90BA
  SCALED_RESOLVE_NICEST_EXT = 0x90BB
  SCALE_BY_FOUR_NV = 0x853F
  SCALE_BY_ONE_HALF_NV = 0x8540
  SCALE_BY_TWO_NV = 0x853E
  SCISSOR_BOX = 0x0C10
  SCISSOR_TEST = 0x0C11
  SCREEN_COORDINATES_REND = 0x8490
  SCREEN_NV = 0x9295
  SECONDARY_COLOR_ARRAY_ADDRESS_NV = 0x8F27
  SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB = 0x889C
  SECONDARY_COLOR_ARRAY_EXT = 0x845E
  SECONDARY_COLOR_ARRAY_LENGTH_NV = 0x8F31
  SECONDARY_COLOR_ARRAY_LIST_IBM = 103077
  SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM = 103087
  SECONDARY_COLOR_ARRAY_POINTER_EXT = 0x845D
  SECONDARY_COLOR_ARRAY_SIZE_EXT = 0x845A
  SECONDARY_COLOR_ARRAY_STRIDE_EXT = 0x845C
  SECONDARY_COLOR_ARRAY_TYPE_EXT = 0x845B
  SECONDARY_COLOR_NV = 0x852D
  SECONDARY_INTERPOLATOR_ATI = 0x896D
  SEPARABLE_2D_EXT = 0x8012
  SEPARATE_ATTRIBS = 0x8C8D
  SEPARATE_ATTRIBS_EXT = 0x8C8D
  SEPARATE_ATTRIBS_NV = 0x8C8D
  SEPARATE_SPECULAR_COLOR_EXT = 0x81FA
  SET = 0x150F
  SET_AMD = 0x874A
  SHADER = 0x82E1
  SHADER_BINARY_FORMATS = 0x8DF8
  SHADER_COMPILER = 0x8DFA
  SHADER_CONSISTENT_NV = 0x86DD
  SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV = 0x00000010
  SHADER_IMAGE_ACCESS_BARRIER_BIT = 0x00000020
  SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT = 0x00000020
  SHADER_IMAGE_ATOMIC = 0x82A6
  SHADER_IMAGE_LOAD = 0x82A4
  SHADER_IMAGE_STORE = 0x82A5
  SHADER_INCLUDE_ARB = 0x8DAE
  SHADER_KHR = 0x82E1
  SHADER_OBJECT_ARB = 0x8B48
  SHADER_OBJECT_EXT = 0x8B48
  SHADER_OPERATION_NV = 0x86DF
  SHADER_SOURCE_LENGTH = 0x8B88
  SHADER_STORAGE_BARRIER_BIT = 0x00002000
  SHADER_STORAGE_BLOCK = 0x92E6
  SHADER_STORAGE_BUFFER = 0x90D2
  SHADER_STORAGE_BUFFER_BINDING = 0x90D3
  SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = 0x90DF
  SHADER_STORAGE_BUFFER_SIZE = 0x90D5
  SHADER_STORAGE_BUFFER_START = 0x90D4
  SHADER_TYPE = 0x8B4F
  SHADING_LANGUAGE_VERSION = 0x8B8C
  SHADING_LANGUAGE_VERSION_ARB = 0x8B8C
  SHADOW_AMBIENT_SGIX = 0x80BF
  SHADOW_ATTENUATION_EXT = 0x834E
  SHARED_TEXTURE_PALETTE_EXT = 0x81FB
  SHARPEN_TEXTURE_FUNC_POINTS_SGIS = 0x80B0
  SHORT = 0x1402
  SIGNALED = 0x9119
  SIGNED_ALPHA8_NV = 0x8706
  SIGNED_ALPHA_NV = 0x8705
  SIGNED_HILO16_NV = 0x86FA
  SIGNED_HILO8_NV = 0x885F
  SIGNED_HILO_NV = 0x86F9
  SIGNED_IDENTITY_NV = 0x853C
  SIGNED_INTENSITY8_NV = 0x8708
  SIGNED_INTENSITY_NV = 0x8707
  SIGNED_LUMINANCE8_ALPHA8_NV = 0x8704
  SIGNED_LUMINANCE8_NV = 0x8702
  SIGNED_LUMINANCE_ALPHA_NV = 0x8703
  SIGNED_LUMINANCE_NV = 0x8701
  SIGNED_NEGATE_NV = 0x853D
  SIGNED_NORMALIZED = 0x8F9C
  SIGNED_RGB8_NV = 0x86FF
  SIGNED_RGB8_UNSIGNED_ALPHA8_NV = 0x870D
  SIGNED_RGBA8_NV = 0x86FC
  SIGNED_RGBA_NV = 0x86FB
  SIGNED_RGB_NV = 0x86FE
  SIGNED_RGB_UNSIGNED_ALPHA_NV = 0x870C
  SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST = 0x82AC
  SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE = 0x82AE
  SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST = 0x82AD
  SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE = 0x82AF
  SINGLE_COLOR_EXT = 0x81F9
  SKIP_COMPONENTS1_NV = -6
  SKIP_COMPONENTS2_NV = -5
  SKIP_COMPONENTS3_NV = -4
  SKIP_COMPONENTS4_NV = -3
  SKIP_DECODE_EXT = 0x8A4A
  SKIP_MISSING_GLYPH_NV = 0x90A9
  SLICE_ACCUM_SUN = 0x85CC
  SLUMINANCE8_ALPHA8_EXT = 0x8C45
  SLUMINANCE8_EXT = 0x8C47
  SLUMINANCE_ALPHA_EXT = 0x8C44
  SLUMINANCE_EXT = 0x8C46
  SMALL_CCW_ARC_TO_NV = 0x12
  SMALL_CW_ARC_TO_NV = 0x14
  SMOOTH_CUBIC_CURVE_TO_NV = 0x10
  SMOOTH_LINE_WIDTH_GRANULARITY = 0x0B23
  SMOOTH_LINE_WIDTH_RANGE = 0x0B22
  SMOOTH_POINT_SIZE_GRANULARITY = 0x0B13
  SMOOTH_POINT_SIZE_RANGE = 0x0B12
  SMOOTH_QUADRATIC_CURVE_TO_NV = 0x0E
  SM_COUNT_NV = 0x933B
  SOFTLIGHT_NV = 0x929C
  SOURCE0_ALPHA_ARB = 0x8588
  SOURCE0_ALPHA_EXT = 0x8588
  SOURCE0_RGB_ARB = 0x8580
  SOURCE0_RGB_EXT = 0x8580
  SOURCE1_ALPHA_ARB = 0x8589
  SOURCE1_ALPHA_EXT = 0x8589
  SOURCE1_RGB_ARB = 0x8581
  SOURCE1_RGB_EXT = 0x8581
  SOURCE2_ALPHA_ARB = 0x858A
  SOURCE2_ALPHA_EXT = 0x858A
  SOURCE2_RGB_ARB = 0x8582
  SOURCE2_RGB_EXT = 0x8582
  SOURCE3_ALPHA_NV = 0x858B
  SOURCE3_RGB_NV = 0x8583
  SPARE0_NV = 0x852E
  SPARE0_PLUS_SECONDARY_COLOR_NV = 0x8532
  SPARE1_NV = 0x852F
  SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB = 0x91A9
  SPRITE_AXIAL_SGIX = 0x814C
  SPRITE_AXIS_SGIX = 0x814A
  SPRITE_EYE_ALIGNED_SGIX = 0x814E
  SPRITE_MODE_SGIX = 0x8149
  SPRITE_OBJECT_ALIGNED_SGIX = 0x814D
  SPRITE_SGIX = 0x8148
  SPRITE_TRANSLATION_SGIX = 0x814B
  SQUARE_NV = 0x90A3
  SRC1_ALPHA = 0x8589
  SRC1_COLOR = 0x88F9
  SRC_ALPHA = 0x0302
  SRC_ALPHA_SATURATE = 0x0308
  SRC_ATOP_NV = 0x928E
  SRC_COLOR = 0x0300
  SRC_IN_NV = 0x928A
  SRC_NV = 0x9286
  SRC_OUT_NV = 0x928C
  SRC_OVER_NV = 0x9288
  SRGB = 0x8C40
  SRGB8 = 0x8C41
  SRGB8_ALPHA8 = 0x8C43
  SRGB8_ALPHA8_EXT = 0x8C43
  SRGB8_EXT = 0x8C41
  SRGB_ALPHA = 0x8C42
  SRGB_ALPHA_EXT = 0x8C42
  SRGB_DECODE_ARB = 0x8299
  SRGB_EXT = 0x8C40
  SRGB_READ = 0x8297
  SRGB_WRITE = 0x8298
  STACK_OVERFLOW = 0x0503
  STACK_OVERFLOW_KHR = 0x0503
  STACK_UNDERFLOW = 0x0504
  STACK_UNDERFLOW_KHR = 0x0504
  STANDARD_FONT_NAME_NV = 0x9072
  STATIC_ATI = 0x8760
  STATIC_COPY = 0x88E6
  STATIC_COPY_ARB = 0x88E6
  STATIC_DRAW = 0x88E4
  STATIC_DRAW_ARB = 0x88E4
  STATIC_READ = 0x88E5
  STATIC_READ_ARB = 0x88E5
  STATIC_VERTEX_ARRAY_IBM = 103061
  STENCIL = 0x1802
  STENCIL_ATTACHMENT = 0x8D20
  STENCIL_ATTACHMENT_EXT = 0x8D20
  STENCIL_BACK_FAIL = 0x8801
  STENCIL_BACK_FAIL_ATI = 0x8801
  STENCIL_BACK_FUNC = 0x8800
  STENCIL_BACK_FUNC_ATI = 0x8800
  STENCIL_BACK_OP_VALUE_AMD = 0x874D
  STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802
  STENCIL_BACK_PASS_DEPTH_FAIL_ATI = 0x8802
  STENCIL_BACK_PASS_DEPTH_PASS = 0x8803
  STENCIL_BACK_PASS_DEPTH_PASS_ATI = 0x8803
  STENCIL_BACK_REF = 0x8CA3
  STENCIL_BACK_VALUE_MASK = 0x8CA4
  STENCIL_BACK_WRITEMASK = 0x8CA5
  STENCIL_BUFFER_BIT = 0x00000400
  STENCIL_CLEAR_TAG_VALUE_EXT = 0x88F3
  STENCIL_CLEAR_VALUE = 0x0B91
  STENCIL_COMPONENTS = 0x8285
  STENCIL_FAIL = 0x0B94
  STENCIL_FUNC = 0x0B92
  STENCIL_INDEX = 0x1901
  STENCIL_INDEX1 = 0x8D46
  STENCIL_INDEX16 = 0x8D49
  STENCIL_INDEX16_EXT = 0x8D49
  STENCIL_INDEX1_EXT = 0x8D46
  STENCIL_INDEX4 = 0x8D47
  STENCIL_INDEX4_EXT = 0x8D47
  STENCIL_INDEX8 = 0x8D48
  STENCIL_INDEX8_EXT = 0x8D48
  STENCIL_OP_VALUE_AMD = 0x874C
  STENCIL_PASS_DEPTH_FAIL = 0x0B95
  STENCIL_PASS_DEPTH_PASS = 0x0B96
  STENCIL_REF = 0x0B97
  STENCIL_RENDERABLE = 0x8288
  STENCIL_TAG_BITS_EXT = 0x88F2
  STENCIL_TEST = 0x0B90
  STENCIL_TEST_TWO_SIDE_EXT = 0x8910
  STENCIL_VALUE_MASK = 0x0B93
  STENCIL_WRITEMASK = 0x0B98
  STEREO = 0x0C33
  STORAGE_CACHED_APPLE = 0x85BE
  STORAGE_CLIENT_APPLE = 0x85B4
  STORAGE_PRIVATE_APPLE = 0x85BD
  STORAGE_SHARED_APPLE = 0x85BF
  STREAM_COPY = 0x88E2
  STREAM_COPY_ARB = 0x88E2
  STREAM_DRAW = 0x88E0
  STREAM_DRAW_ARB = 0x88E0
  STREAM_RASTERIZATION_AMD = 0x91A0
  STREAM_READ = 0x88E1
  STREAM_READ_ARB = 0x88E1
  STRICT_DEPTHFUNC_HINT_PGI = 0x1A216
  STRICT_LIGHTING_HINT_PGI = 0x1A217
  STRICT_SCISSOR_HINT_PGI = 0x1A218
  SUBPIXEL_BITS = 0x0D50
  SUBSAMPLE_DISTANCE_AMD = 0x883F
  SUBTRACT_ARB = 0x84E7
  SUB_ATI = 0x8965
  SUCCESS_NV = 0x902F
  SURFACE_MAPPED_NV = 0x8700
  SURFACE_REGISTERED_NV = 0x86FD
  SURFACE_STATE_NV = 0x86EB
  SWIZZLE_STQ_ATI = 0x8977
  SWIZZLE_STQ_DQ_ATI = 0x8979
  SWIZZLE_STRQ_ATI = 0x897A
  SWIZZLE_STRQ_DQ_ATI = 0x897B
  SWIZZLE_STR_ATI = 0x8976
  SWIZZLE_STR_DR_ATI = 0x8978
  SYNC_CL_EVENT_ARB = 0x8240
  SYNC_CL_EVENT_COMPLETE_ARB = 0x8241
  SYNC_CONDITION = 0x9113
  SYNC_FENCE = 0x9116
  SYNC_FLAGS = 0x9115
  SYNC_FLUSH_COMMANDS_BIT = 0x00000001
  SYNC_GPU_COMMANDS_COMPLETE = 0x9117
  SYNC_STATUS = 0x9114
  SYNC_X11_FENCE_EXT = 0x90E1
  SYSTEM_FONT_NAME_NV = 0x9073
  T2F_IUI_N3F_V2F_EXT = 0x81B3
  T2F_IUI_N3F_V3F_EXT = 0x81B4
  T2F_IUI_V2F_EXT = 0x81B1
  T2F_IUI_V3F_EXT = 0x81B2
  TABLE_TOO_LARGE_EXT = 0x8031
  TANGENT_ARRAY_EXT = 0x8439
  TANGENT_ARRAY_POINTER_EXT = 0x8442
  TANGENT_ARRAY_STRIDE_EXT = 0x843F
  TANGENT_ARRAY_TYPE_EXT = 0x843E
  TESSELLATION_FACTOR_AMD = 0x9005
  TESSELLATION_MODE_AMD = 0x9004
  TESS_CONTROL_OUTPUT_VERTICES = 0x8E75
  TESS_CONTROL_PROGRAM_NV = 0x891E
  TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV = 0x8C74
  TESS_CONTROL_SHADER = 0x8E88
  TESS_CONTROL_SHADER_BIT = 0x00000008
  TESS_CONTROL_SUBROUTINE = 0x92E9
  TESS_CONTROL_SUBROUTINE_UNIFORM = 0x92EF
  TESS_CONTROL_TEXTURE = 0x829C
  TESS_EVALUATION_PROGRAM_NV = 0x891F
  TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV = 0x8C75
  TESS_EVALUATION_SHADER = 0x8E87
  TESS_EVALUATION_SHADER_BIT = 0x00000010
  TESS_EVALUATION_SUBROUTINE = 0x92EA
  TESS_EVALUATION_SUBROUTINE_UNIFORM = 0x92F0
  TESS_EVALUATION_TEXTURE = 0x829D
  TESS_GEN_MODE = 0x8E76
  TESS_GEN_POINT_MODE = 0x8E79
  TESS_GEN_SPACING = 0x8E77
  TESS_GEN_VERTEX_ORDER = 0x8E78
  TEXCOORD1_BIT_PGI = 0x10000000
  TEXCOORD2_BIT_PGI = 0x20000000
  TEXCOORD3_BIT_PGI = 0x40000000
  TEXCOORD4_BIT_PGI = 0x80000000
  TEXTURE = 0x1702
  TEXTURE0 = 0x84C0
  TEXTURE0_ARB = 0x84C0
  TEXTURE1 = 0x84C1
  TEXTURE10 = 0x84CA
  TEXTURE10_ARB = 0x84CA
  TEXTURE11 = 0x84CB
  TEXTURE11_ARB = 0x84CB
  TEXTURE12 = 0x84CC
  TEXTURE12_ARB = 0x84CC
  TEXTURE13 = 0x84CD
  TEXTURE13_ARB = 0x84CD
  TEXTURE14 = 0x84CE
  TEXTURE14_ARB = 0x84CE
  TEXTURE15 = 0x84CF
  TEXTURE15_ARB = 0x84CF
  TEXTURE16 = 0x84D0
  TEXTURE16_ARB = 0x84D0
  TEXTURE17 = 0x84D1
  TEXTURE17_ARB = 0x84D1
  TEXTURE18 = 0x84D2
  TEXTURE18_ARB = 0x84D2
  TEXTURE19 = 0x84D3
  TEXTURE19_ARB = 0x84D3
  TEXTURE1_ARB = 0x84C1
  TEXTURE2 = 0x84C2
  TEXTURE20 = 0x84D4
  TEXTURE20_ARB = 0x84D4
  TEXTURE21 = 0x84D5
  TEXTURE21_ARB = 0x84D5
  TEXTURE22 = 0x84D6
  TEXTURE22_ARB = 0x84D6
  TEXTURE23 = 0x84D7
  TEXTURE23_ARB = 0x84D7
  TEXTURE24 = 0x84D8
  TEXTURE24_ARB = 0x84D8
  TEXTURE25 = 0x84D9
  TEXTURE25_ARB = 0x84D9
  TEXTURE26 = 0x84DA
  TEXTURE26_ARB = 0x84DA
  TEXTURE27 = 0x84DB
  TEXTURE27_ARB = 0x84DB
  TEXTURE28 = 0x84DC
  TEXTURE28_ARB = 0x84DC
  TEXTURE29 = 0x84DD
  TEXTURE29_ARB = 0x84DD
  TEXTURE2_ARB = 0x84C2
  TEXTURE3 = 0x84C3
  TEXTURE30 = 0x84DE
  TEXTURE30_ARB = 0x84DE
  TEXTURE31 = 0x84DF
  TEXTURE31_ARB = 0x84DF
  TEXTURE3_ARB = 0x84C3
  TEXTURE4 = 0x84C4
  TEXTURE4_ARB = 0x84C4
  TEXTURE5 = 0x84C5
  TEXTURE5_ARB = 0x84C5
  TEXTURE6 = 0x84C6
  TEXTURE6_ARB = 0x84C6
  TEXTURE7 = 0x84C7
  TEXTURE7_ARB = 0x84C7
  TEXTURE8 = 0x84C8
  TEXTURE8_ARB = 0x84C8
  TEXTURE9 = 0x84C9
  TEXTURE9_ARB = 0x84C9
  TEXTURE_1D = 0x0DE0
  TEXTURE_1D_ARRAY = 0x8C18
  TEXTURE_1D_ARRAY_EXT = 0x8C18
  TEXTURE_1D_BINDING_EXT = 0x8068
  TEXTURE_1D_STACK_BINDING_MESAX = 0x875D
  TEXTURE_1D_STACK_MESAX = 0x8759
  TEXTURE_2D = 0x0DE1
  TEXTURE_2D_ARRAY = 0x8C1A
  TEXTURE_2D_ARRAY_EXT = 0x8C1A
  TEXTURE_2D_BINDING_EXT = 0x8069
  TEXTURE_2D_MULTISAMPLE = 0x9100
  TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9102
  TEXTURE_2D_STACK_BINDING_MESAX = 0x875E
  TEXTURE_2D_STACK_MESAX = 0x875A
  TEXTURE_3D = 0x806F
  TEXTURE_3D_BINDING_EXT = 0x806A
  TEXTURE_3D_EXT = 0x806F
  TEXTURE_4DSIZE_SGIS = 0x8136
  TEXTURE_4D_BINDING_SGIS = 0x814F
  TEXTURE_4D_SGIS = 0x8134
  TEXTURE_ALPHA_SIZE = 0x805F
  TEXTURE_ALPHA_SIZE_EXT = 0x805F
  TEXTURE_ALPHA_TYPE = 0x8C13
  TEXTURE_ALPHA_TYPE_ARB = 0x8C13
  TEXTURE_APPLICATION_MODE_EXT = 0x834F
  TEXTURE_BASE_LEVEL = 0x813C
  TEXTURE_BASE_LEVEL_SGIS = 0x813C
  TEXTURE_BINDING_1D = 0x8068
  TEXTURE_BINDING_1D_ARRAY = 0x8C1C
  TEXTURE_BINDING_1D_ARRAY_EXT = 0x8C1C
  TEXTURE_BINDING_2D = 0x8069
  TEXTURE_BINDING_2D_ARRAY = 0x8C1D
  TEXTURE_BINDING_2D_ARRAY_EXT = 0x8C1D
  TEXTURE_BINDING_2D_MULTISAMPLE = 0x9104
  TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 0x9105
  TEXTURE_BINDING_3D = 0x806A
  TEXTURE_BINDING_BUFFER = 0x8C2C
  TEXTURE_BINDING_BUFFER_ARB = 0x8C2C
  TEXTURE_BINDING_BUFFER_EXT = 0x8C2C
  TEXTURE_BINDING_CUBE_MAP = 0x8514
  TEXTURE_BINDING_CUBE_MAP_ARB = 0x8514
  TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB = 0x900A
  TEXTURE_BINDING_CUBE_MAP_EXT = 0x8514
  TEXTURE_BINDING_RECTANGLE = 0x84F6
  TEXTURE_BINDING_RECTANGLE_ARB = 0x84F6
  TEXTURE_BINDING_RECTANGLE_NV = 0x84F6
  TEXTURE_BINDING_RENDERBUFFER_NV = 0x8E53
  TEXTURE_BLUE_SIZE = 0x805E
  TEXTURE_BLUE_SIZE_EXT = 0x805E
  TEXTURE_BLUE_TYPE = 0x8C12
  TEXTURE_BLUE_TYPE_ARB = 0x8C12
  TEXTURE_BORDER_COLOR = 0x1004
  TEXTURE_BORDER_VALUES_NV = 0x871A
  TEXTURE_BUFFER = 0x8C2A
  TEXTURE_BUFFER_ARB = 0x8C2A
  TEXTURE_BUFFER_DATA_STORE_BINDING = 0x8C2D
  TEXTURE_BUFFER_DATA_STORE_BINDING_ARB = 0x8C2D
  TEXTURE_BUFFER_DATA_STORE_BINDING_EXT = 0x8C2D
  TEXTURE_BUFFER_EXT = 0x8C2A
  TEXTURE_BUFFER_FORMAT_ARB = 0x8C2E
  TEXTURE_BUFFER_FORMAT_EXT = 0x8C2E
  TEXTURE_BUFFER_OFFSET = 0x919D
  TEXTURE_BUFFER_OFFSET_ALIGNMENT = 0x919F
  TEXTURE_BUFFER_SIZE = 0x919E
  TEXTURE_CLIPMAP_CENTER_SGIX = 0x8171
  TEXTURE_CLIPMAP_DEPTH_SGIX = 0x8176
  TEXTURE_CLIPMAP_FRAME_SGIX = 0x8172
  TEXTURE_CLIPMAP_LOD_OFFSET_SGIX = 0x8175
  TEXTURE_CLIPMAP_OFFSET_SGIX = 0x8173
  TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX = 0x8174
  TEXTURE_COLOR_SAMPLES_NV = 0x9046
  TEXTURE_COLOR_TABLE_SGI = 0x80BC
  TEXTURE_COLOR_WRITEMASK_SGIS = 0x81EF
  TEXTURE_COMPARE_FAIL_VALUE_ARB = 0x80BF
  TEXTURE_COMPARE_FUNC = 0x884D
  TEXTURE_COMPARE_FUNC_ARB = 0x884D
  TEXTURE_COMPARE_MODE = 0x884C
  TEXTURE_COMPARE_MODE_ARB = 0x884C
  TEXTURE_COMPARE_OPERATOR_SGIX = 0x819B
  TEXTURE_COMPARE_SGIX = 0x819A
  TEXTURE_COMPRESSED = 0x86A1
  TEXTURE_COMPRESSED_ARB = 0x86A1
  TEXTURE_COMPRESSED_BLOCK_HEIGHT = 0x82B2
  TEXTURE_COMPRESSED_BLOCK_SIZE = 0x82B3
  TEXTURE_COMPRESSED_BLOCK_WIDTH = 0x82B1
  TEXTURE_COMPRESSED_IMAGE_SIZE = 0x86A0
  TEXTURE_COMPRESSED_IMAGE_SIZE_ARB = 0x86A0
  TEXTURE_COMPRESSION_HINT = 0x84EF
  TEXTURE_COMPRESSION_HINT_ARB = 0x84EF
  TEXTURE_CONSTANT_DATA_SUNX = 0x81D6
  TEXTURE_COORD_ARRAY_ADDRESS_NV = 0x8F25
  TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB = 0x889A
  TEXTURE_COORD_ARRAY_COUNT_EXT = 0x808B
  TEXTURE_COORD_ARRAY_EXT = 0x8078
  TEXTURE_COORD_ARRAY_LENGTH_NV = 0x8F2F
  TEXTURE_COORD_ARRAY_LIST_IBM = 103074
  TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM = 103084
  TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F8
  TEXTURE_COORD_ARRAY_POINTER_EXT = 0x8092
  TEXTURE_COORD_ARRAY_SIZE_EXT = 0x8088
  TEXTURE_COORD_ARRAY_STRIDE_EXT = 0x808A
  TEXTURE_COORD_ARRAY_TYPE_EXT = 0x8089
  TEXTURE_COORD_NV = 0x8C79
  TEXTURE_COVERAGE_SAMPLES_NV = 0x9045
  TEXTURE_CUBE_MAP = 0x8513
  TEXTURE_CUBE_MAP_ARB = 0x8513
  TEXTURE_CUBE_MAP_ARRAY = 0x9009
  TEXTURE_CUBE_MAP_ARRAY_ARB = 0x9009
  TEXTURE_CUBE_MAP_EXT = 0x8513
  TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516
  TEXTURE_CUBE_MAP_NEGATIVE_X_ARB = 0x8516
  TEXTURE_CUBE_MAP_NEGATIVE_X_EXT = 0x8516
  TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518
  TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB = 0x8518
  TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT = 0x8518
  TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A
  TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB = 0x851A
  TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT = 0x851A
  TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515
  TEXTURE_CUBE_MAP_POSITIVE_X_ARB = 0x8515
  TEXTURE_CUBE_MAP_POSITIVE_X_EXT = 0x8515
  TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517
  TEXTURE_CUBE_MAP_POSITIVE_Y_ARB = 0x8517
  TEXTURE_CUBE_MAP_POSITIVE_Y_EXT = 0x8517
  TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519
  TEXTURE_CUBE_MAP_POSITIVE_Z_ARB = 0x8519
  TEXTURE_CUBE_MAP_POSITIVE_Z_EXT = 0x8519
  TEXTURE_CUBE_MAP_SEAMLESS = 0x884F
  TEXTURE_DEFORMATION_BIT_SGIX = 0x00000001
  TEXTURE_DEFORMATION_SGIX = 0x8195
  TEXTURE_DEPTH = 0x8071
  TEXTURE_DEPTH_EXT = 0x8071
  TEXTURE_DEPTH_SIZE = 0x884A
  TEXTURE_DEPTH_SIZE_ARB = 0x884A
  TEXTURE_DEPTH_TYPE = 0x8C16
  TEXTURE_DEPTH_TYPE_ARB = 0x8C16
  TEXTURE_DS_SIZE_NV = 0x871D
  TEXTURE_DT_SIZE_NV = 0x871E
  TEXTURE_ENV_BIAS_SGIX = 0x80BE
  TEXTURE_FETCH_BARRIER_BIT = 0x00000008
  TEXTURE_FETCH_BARRIER_BIT_EXT = 0x00000008
  TEXTURE_FILTER4_SIZE_SGIS = 0x8147
  TEXTURE_FILTER_CONTROL_EXT = 0x8500
  TEXTURE_FIXED_SAMPLE_LOCATIONS = 0x9107
  TEXTURE_FLOAT_COMPONENTS_NV = 0x888C
  TEXTURE_FREE_MEMORY_ATI = 0x87FC
  TEXTURE_GATHER = 0x82A2
  TEXTURE_GATHER_SHADOW = 0x82A3
  TEXTURE_GEQUAL_R_SGIX = 0x819D
  TEXTURE_GREEN_SIZE = 0x805D
  TEXTURE_GREEN_SIZE_EXT = 0x805D
  TEXTURE_GREEN_TYPE = 0x8C11
  TEXTURE_GREEN_TYPE_ARB = 0x8C11
  TEXTURE_HEIGHT = 0x1001
  TEXTURE_HI_SIZE_NV = 0x871B
  TEXTURE_IMAGE_FORMAT = 0x828F
  TEXTURE_IMAGE_TYPE = 0x8290
  TEXTURE_IMMUTABLE_FORMAT = 0x912F
  TEXTURE_IMMUTABLE_LEVELS = 0x82DF
  TEXTURE_INDEX_SIZE_EXT = 0x80ED
  TEXTURE_INTENSITY_SIZE_EXT = 0x8061
  TEXTURE_INTENSITY_TYPE_ARB = 0x8C15
  TEXTURE_INTERNAL_FORMAT = 0x1003
  TEXTURE_LEQUAL_R_SGIX = 0x819C
  TEXTURE_LIGHTING_MODE_HP = 0x8167
  TEXTURE_LIGHT_EXT = 0x8350
  TEXTURE_LOD_BIAS = 0x8501
  TEXTURE_LOD_BIAS_EXT = 0x8501
  TEXTURE_LOD_BIAS_R_SGIX = 0x8190
  TEXTURE_LOD_BIAS_S_SGIX = 0x818E
  TEXTURE_LOD_BIAS_T_SGIX = 0x818F
  TEXTURE_LO_SIZE_NV = 0x871C
  TEXTURE_LUMINANCE_SIZE_EXT = 0x8060
  TEXTURE_LUMINANCE_TYPE_ARB = 0x8C14
  TEXTURE_MAG_FILTER = 0x2800
  TEXTURE_MAG_SIZE_NV = 0x871F
  TEXTURE_MATERIAL_FACE_EXT = 0x8351
  TEXTURE_MATERIAL_PARAMETER_EXT = 0x8352
  TEXTURE_MAX_ANISOTROPY_EXT = 0x84FE
  TEXTURE_MAX_CLAMP_R_SGIX = 0x836B
  TEXTURE_MAX_CLAMP_S_SGIX = 0x8369
  TEXTURE_MAX_CLAMP_T_SGIX = 0x836A
  TEXTURE_MAX_LEVEL = 0x813D
  TEXTURE_MAX_LEVEL_SGIS = 0x813D
  TEXTURE_MAX_LOD = 0x813B
  TEXTURE_MAX_LOD_SGIS = 0x813B
  TEXTURE_MEMORY_LAYOUT_INTEL = 0x83FF
  TEXTURE_MIN_FILTER = 0x2801
  TEXTURE_MIN_LOD = 0x813A
  TEXTURE_MIN_LOD_SGIS = 0x813A
  TEXTURE_MULTI_BUFFER_HINT_SGIX = 0x812E
  TEXTURE_NORMAL_EXT = 0x85AF
  TEXTURE_POST_SPECULAR_HP = 0x8168
  TEXTURE_PRE_SPECULAR_HP = 0x8169
  TEXTURE_PRIORITY_EXT = 0x8066
  TEXTURE_RANGE_LENGTH_APPLE = 0x85B7
  TEXTURE_RANGE_POINTER_APPLE = 0x85B8
  TEXTURE_RECTANGLE = 0x84F5
  TEXTURE_RECTANGLE_ARB = 0x84F5
  TEXTURE_RECTANGLE_NV = 0x84F5
  TEXTURE_RED_SIZE = 0x805C
  TEXTURE_RED_SIZE_EXT = 0x805C
  TEXTURE_RED_TYPE = 0x8C10
  TEXTURE_RED_TYPE_ARB = 0x8C10
  TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV = 0x8E54
  TEXTURE_RENDERBUFFER_NV = 0x8E55
  TEXTURE_RESIDENT_EXT = 0x8067
  TEXTURE_SAMPLES = 0x9106
  TEXTURE_SHADER_NV = 0x86DE
  TEXTURE_SHADOW = 0x82A1
  TEXTURE_SHARED_SIZE = 0x8C3F
  TEXTURE_SHARED_SIZE_EXT = 0x8C3F
  TEXTURE_SPARSE_ARB = 0x91A6
  TEXTURE_SRGB_DECODE_EXT = 0x8A48
  TEXTURE_STENCIL_SIZE = 0x88F1
  TEXTURE_STENCIL_SIZE_EXT = 0x88F1
  TEXTURE_STORAGE_HINT_APPLE = 0x85BC
  TEXTURE_STORAGE_SPARSE_BIT_AMD = 0x00000001
  TEXTURE_SWIZZLE_A = 0x8E45
  TEXTURE_SWIZZLE_A_EXT = 0x8E45
  TEXTURE_SWIZZLE_B = 0x8E44
  TEXTURE_SWIZZLE_B_EXT = 0x8E44
  TEXTURE_SWIZZLE_G = 0x8E43
  TEXTURE_SWIZZLE_G_EXT = 0x8E43
  TEXTURE_SWIZZLE_R = 0x8E42
  TEXTURE_SWIZZLE_RGBA = 0x8E46
  TEXTURE_SWIZZLE_RGBA_EXT = 0x8E46
  TEXTURE_SWIZZLE_R_EXT = 0x8E42
  TEXTURE_TOO_LARGE_EXT = 0x8065
  TEXTURE_UNSIGNED_REMAP_MODE_NV = 0x888F
  TEXTURE_UPDATE_BARRIER_BIT = 0x00000100
  TEXTURE_UPDATE_BARRIER_BIT_EXT = 0x00000100
  TEXTURE_VIEW = 0x82B5
  TEXTURE_VIEW_MIN_LAYER = 0x82DD
  TEXTURE_VIEW_MIN_LEVEL = 0x82DB
  TEXTURE_VIEW_NUM_LAYERS = 0x82DE
  TEXTURE_VIEW_NUM_LEVELS = 0x82DC
  TEXTURE_WIDTH = 0x1000
  TEXTURE_WRAP_Q_SGIS = 0x8137
  TEXTURE_WRAP_R = 0x8072
  TEXTURE_WRAP_R_EXT = 0x8072
  TEXTURE_WRAP_S = 0x2802
  TEXTURE_WRAP_T = 0x2803
  TEXT_FRAGMENT_SHADER_ATI = 0x8200
  TIMEOUT_EXPIRED = 0x911B
  TIMEOUT_IGNORED = 0xFFFFFFFFFFFFFFFF
  TIMESTAMP = 0x8E28
  TIME_ELAPSED = 0x88BF
  TIME_ELAPSED_EXT = 0x88BF
  TOP_LEVEL_ARRAY_SIZE = 0x930C
  TOP_LEVEL_ARRAY_STRIDE = 0x930D
  TRACK_MATRIX_NV = 0x8648
  TRACK_MATRIX_TRANSFORM_NV = 0x8649
  TRANSFORM_FEEDBACK = 0x8E22
  TRANSFORM_FEEDBACK_ACTIVE = 0x8E24
  TRANSFORM_FEEDBACK_ATTRIBS_NV = 0x8C7E
  TRANSFORM_FEEDBACK_BARRIER_BIT = 0x00000800
  TRANSFORM_FEEDBACK_BARRIER_BIT_EXT = 0x00000800
  TRANSFORM_FEEDBACK_BINDING = 0x8E25
  TRANSFORM_FEEDBACK_BINDING_NV = 0x8E25
  TRANSFORM_FEEDBACK_BUFFER = 0x8C8E
  TRANSFORM_FEEDBACK_BUFFER_ACTIVE = 0x8E24
  TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV = 0x8E24
  TRANSFORM_FEEDBACK_BUFFER_BINDING = 0x8C8F
  TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT = 0x8C8F
  TRANSFORM_FEEDBACK_BUFFER_BINDING_NV = 0x8C8F
  TRANSFORM_FEEDBACK_BUFFER_EXT = 0x8C8E
  TRANSFORM_FEEDBACK_BUFFER_INDEX = 0x934B
  TRANSFORM_FEEDBACK_BUFFER_MODE = 0x8C7F
  TRANSFORM_FEEDBACK_BUFFER_MODE_EXT = 0x8C7F
  TRANSFORM_FEEDBACK_BUFFER_MODE_NV = 0x8C7F
  TRANSFORM_FEEDBACK_BUFFER_NV = 0x8C8E
  TRANSFORM_FEEDBACK_BUFFER_PAUSED = 0x8E23
  TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV = 0x8E23
  TRANSFORM_FEEDBACK_BUFFER_SIZE = 0x8C85
  TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT = 0x8C85
  TRANSFORM_FEEDBACK_BUFFER_SIZE_NV = 0x8C85
  TRANSFORM_FEEDBACK_BUFFER_START = 0x8C84
  TRANSFORM_FEEDBACK_BUFFER_START_EXT = 0x8C84
  TRANSFORM_FEEDBACK_BUFFER_START_NV = 0x8C84
  TRANSFORM_FEEDBACK_BUFFER_STRIDE = 0x934C
  TRANSFORM_FEEDBACK_NV = 0x8E22
  TRANSFORM_FEEDBACK_PAUSED = 0x8E23
  TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8C88
  TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT = 0x8C88
  TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV = 0x8C88
  TRANSFORM_FEEDBACK_RECORD_NV = 0x8C86
  TRANSFORM_FEEDBACK_VARYING = 0x92F4
  TRANSFORM_FEEDBACK_VARYINGS = 0x8C83
  TRANSFORM_FEEDBACK_VARYINGS_EXT = 0x8C83
  TRANSFORM_FEEDBACK_VARYINGS_NV = 0x8C83
  TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = 0x8C76
  TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT = 0x8C76
  TRANSFORM_HINT_APPLE = 0x85B1
  TRANSLATE_2D_NV = 0x9090
  TRANSLATE_3D_NV = 0x9091
  TRANSLATE_X_NV = 0x908E
  TRANSLATE_Y_NV = 0x908F
  TRANSPOSE_AFFINE_2D_NV = 0x9096
  TRANSPOSE_AFFINE_3D_NV = 0x9098
  TRANSPOSE_COLOR_MATRIX_ARB = 0x84E6
  TRANSPOSE_CURRENT_MATRIX_ARB = 0x88B7
  TRANSPOSE_MODELVIEW_MATRIX_ARB = 0x84E3
  TRANSPOSE_NV = 0x862C
  TRANSPOSE_PROGRAM_MATRIX_EXT = 0x8E2E
  TRANSPOSE_PROJECTION_MATRIX_ARB = 0x84E4
  TRANSPOSE_TEXTURE_MATRIX_ARB = 0x84E5
  TRIANGLES = 0x0004
  TRIANGLES_ADJACENCY = 0x000C
  TRIANGLES_ADJACENCY_ARB = 0x000C
  TRIANGLES_ADJACENCY_EXT = 0x000C
  TRIANGLE_FAN = 0x0006
  TRIANGLE_LIST_SUN = 0x81D7
  TRIANGLE_MESH_SUN = 0x8615
  TRIANGLE_STRIP = 0x0005
  TRIANGLE_STRIP_ADJACENCY = 0x000D
  TRIANGLE_STRIP_ADJACENCY_ARB = 0x000D
  TRIANGLE_STRIP_ADJACENCY_EXT = 0x000D
  TRIANGULAR_NV = 0x90A5
  TRUE = 1
  TYPE = 0x92FA
  UNCORRELATED_NV = 0x9282
  UNDEFINED_APPLE = 0x8A1C
  UNDEFINED_VERTEX = 0x8260
  UNIFORM = 0x92E1
  UNIFORM_ARRAY_STRIDE = 0x8A3C
  UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX = 0x92DA
  UNIFORM_BARRIER_BIT = 0x00000004
  UNIFORM_BARRIER_BIT_EXT = 0x00000004
  UNIFORM_BLOCK = 0x92E2
  UNIFORM_BLOCK_ACTIVE_UNIFORMS = 0x8A42
  UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 0x8A43
  UNIFORM_BLOCK_BINDING = 0x8A3F
  UNIFORM_BLOCK_DATA_SIZE = 0x8A40
  UNIFORM_BLOCK_INDEX = 0x8A3A
  UNIFORM_BLOCK_NAME_LENGTH = 0x8A41
  UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER = 0x90EC
  UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8A46
  UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = 0x8A45
  UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER = 0x84F0
  UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x84F1
  UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 0x8A44
  UNIFORM_BUFFER = 0x8A11
  UNIFORM_BUFFER_BINDING = 0x8A28
  UNIFORM_BUFFER_BINDING_EXT = 0x8DEF
  UNIFORM_BUFFER_EXT = 0x8DEE
  UNIFORM_BUFFER_OFFSET_ALIGNMENT = 0x8A34
  UNIFORM_BUFFER_SIZE = 0x8A2A
  UNIFORM_BUFFER_START = 0x8A29
  UNIFORM_IS_ROW_MAJOR = 0x8A3E
  UNIFORM_MATRIX_STRIDE = 0x8A3D
  UNIFORM_NAME_LENGTH = 0x8A39
  UNIFORM_OFFSET = 0x8A3B
  UNIFORM_SIZE = 0x8A38
  UNIFORM_TYPE = 0x8A37
  UNKNOWN_CONTEXT_RESET_ARB = 0x8255
  UNPACK_ALIGNMENT = 0x0CF5
  UNPACK_CLIENT_STORAGE_APPLE = 0x85B2
  UNPACK_CMYK_HINT_EXT = 0x800F
  UNPACK_COMPRESSED_BLOCK_DEPTH = 0x9129
  UNPACK_COMPRESSED_BLOCK_HEIGHT = 0x9128
  UNPACK_COMPRESSED_BLOCK_SIZE = 0x912A
  UNPACK_COMPRESSED_BLOCK_WIDTH = 0x9127
  UNPACK_CONSTANT_DATA_SUNX = 0x81D5
  UNPACK_IMAGE_DEPTH_SGIS = 0x8133
  UNPACK_IMAGE_HEIGHT = 0x806E
  UNPACK_IMAGE_HEIGHT_EXT = 0x806E
  UNPACK_LSB_FIRST = 0x0CF1
  UNPACK_RESAMPLE_OML = 0x8985
  UNPACK_RESAMPLE_SGIX = 0x842D
  UNPACK_ROW_BYTES_APPLE = 0x8A16
  UNPACK_ROW_LENGTH = 0x0CF2
  UNPACK_SKIP_IMAGES = 0x806D
  UNPACK_SKIP_IMAGES_EXT = 0x806D
  UNPACK_SKIP_PIXELS = 0x0CF4
  UNPACK_SKIP_ROWS = 0x0CF3
  UNPACK_SKIP_VOLUMES_SGIS = 0x8132
  UNPACK_SUBSAMPLE_RATE_SGIX = 0x85A1
  UNPACK_SWAP_BYTES = 0x0CF0
  UNSIGNALED = 0x9118
  UNSIGNED_BYTE = 0x1401
  UNSIGNED_BYTE_2_3_3_REV = 0x8362
  UNSIGNED_BYTE_3_3_2 = 0x8032
  UNSIGNED_BYTE_3_3_2_EXT = 0x8032
  UNSIGNED_IDENTITY_NV = 0x8536
  UNSIGNED_INT = 0x1405
  UNSIGNED_INT16_NV = 0x8FF0
  UNSIGNED_INT16_VEC2_NV = 0x8FF1
  UNSIGNED_INT16_VEC3_NV = 0x8FF2
  UNSIGNED_INT16_VEC4_NV = 0x8FF3
  UNSIGNED_INT64_AMD = 0x8BC2
  UNSIGNED_INT64_ARB = 0x140F
  UNSIGNED_INT64_NV = 0x140F
  UNSIGNED_INT64_VEC2_NV = 0x8FF5
  UNSIGNED_INT64_VEC3_NV = 0x8FF6
  UNSIGNED_INT64_VEC4_NV = 0x8FF7
  UNSIGNED_INT8_NV = 0x8FEC
  UNSIGNED_INT8_VEC2_NV = 0x8FED
  UNSIGNED_INT8_VEC3_NV = 0x8FEE
  UNSIGNED_INT8_VEC4_NV = 0x8FEF
  UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B
  UNSIGNED_INT_10F_11F_11F_REV_EXT = 0x8C3B
  UNSIGNED_INT_10_10_10_2 = 0x8036
  UNSIGNED_INT_10_10_10_2_EXT = 0x8036
  UNSIGNED_INT_24_8 = 0x84FA
  UNSIGNED_INT_24_8_EXT = 0x84FA
  UNSIGNED_INT_24_8_NV = 0x84FA
  UNSIGNED_INT_2_10_10_10_REV = 0x8368
  UNSIGNED_INT_5_9_9_9_REV = 0x8C3E
  UNSIGNED_INT_5_9_9_9_REV_EXT = 0x8C3E
  UNSIGNED_INT_8_8_8_8 = 0x8035
  UNSIGNED_INT_8_8_8_8_EXT = 0x8035
  UNSIGNED_INT_8_8_8_8_REV = 0x8367
  UNSIGNED_INT_8_8_S8_S8_REV_NV = 0x86DB
  UNSIGNED_INT_ATOMIC_COUNTER = 0x92DB
  UNSIGNED_INT_IMAGE_1D = 0x9062
  UNSIGNED_INT_IMAGE_1D_ARRAY = 0x9068
  UNSIGNED_INT_IMAGE_1D_ARRAY_EXT = 0x9068
  UNSIGNED_INT_IMAGE_1D_EXT = 0x9062
  UNSIGNED_INT_IMAGE_2D = 0x9063
  UNSIGNED_INT_IMAGE_2D_ARRAY = 0x9069
  UNSIGNED_INT_IMAGE_2D_ARRAY_EXT = 0x9069
  UNSIGNED_INT_IMAGE_2D_EXT = 0x9063
  UNSIGNED_INT_IMAGE_2D_MULTISAMPLE = 0x906B
  UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x906C
  UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 0x906C
  UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT = 0x906B
  UNSIGNED_INT_IMAGE_2D_RECT = 0x9065
  UNSIGNED_INT_IMAGE_2D_RECT_EXT = 0x9065
  UNSIGNED_INT_IMAGE_3D = 0x9064
  UNSIGNED_INT_IMAGE_3D_EXT = 0x9064
  UNSIGNED_INT_IMAGE_BUFFER = 0x9067
  UNSIGNED_INT_IMAGE_BUFFER_EXT = 0x9067
  UNSIGNED_INT_IMAGE_CUBE = 0x9066
  UNSIGNED_INT_IMAGE_CUBE_EXT = 0x9066
  UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY = 0x906A
  UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT = 0x906A
  UNSIGNED_INT_S8_S8_8_8_NV = 0x86DA
  UNSIGNED_INT_SAMPLER_1D = 0x8DD1
  UNSIGNED_INT_SAMPLER_1D_ARRAY = 0x8DD6
  UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT = 0x8DD6
  UNSIGNED_INT_SAMPLER_1D_EXT = 0x8DD1
  UNSIGNED_INT_SAMPLER_2D = 0x8DD2
  UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7
  UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT = 0x8DD7
  UNSIGNED_INT_SAMPLER_2D_EXT = 0x8DD2
  UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = 0x910A
  UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910D
  UNSIGNED_INT_SAMPLER_2D_RECT = 0x8DD5
  UNSIGNED_INT_SAMPLER_2D_RECT_EXT = 0x8DD5
  UNSIGNED_INT_SAMPLER_3D = 0x8DD3
  UNSIGNED_INT_SAMPLER_3D_EXT = 0x8DD3
  UNSIGNED_INT_SAMPLER_BUFFER = 0x8DD8
  UNSIGNED_INT_SAMPLER_BUFFER_AMD = 0x9003
  UNSIGNED_INT_SAMPLER_BUFFER_EXT = 0x8DD8
  UNSIGNED_INT_SAMPLER_CUBE = 0x8DD4
  UNSIGNED_INT_SAMPLER_CUBE_EXT = 0x8DD4
  UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB = 0x900F
  UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV = 0x8E58
  UNSIGNED_INT_VEC2 = 0x8DC6
  UNSIGNED_INT_VEC2_EXT = 0x8DC6
  UNSIGNED_INT_VEC3 = 0x8DC7
  UNSIGNED_INT_VEC3_EXT = 0x8DC7
  UNSIGNED_INT_VEC4 = 0x8DC8
  UNSIGNED_INT_VEC4_EXT = 0x8DC8
  UNSIGNED_INVERT_NV = 0x8537
  UNSIGNED_NORMALIZED = 0x8C17
  UNSIGNED_NORMALIZED_ARB = 0x8C17
  UNSIGNED_SHORT = 0x1403
  UNSIGNED_SHORT_1_5_5_5_REV = 0x8366
  UNSIGNED_SHORT_4_4_4_4 = 0x8033
  UNSIGNED_SHORT_4_4_4_4_EXT = 0x8033
  UNSIGNED_SHORT_4_4_4_4_REV = 0x8365
  UNSIGNED_SHORT_5_5_5_1 = 0x8034
  UNSIGNED_SHORT_5_5_5_1_EXT = 0x8034
  UNSIGNED_SHORT_5_6_5 = 0x8363
  UNSIGNED_SHORT_5_6_5_REV = 0x8364
  UNSIGNED_SHORT_8_8_APPLE = 0x85BA
  UNSIGNED_SHORT_8_8_MESA = 0x85BA
  UNSIGNED_SHORT_8_8_REV_APPLE = 0x85BB
  UNSIGNED_SHORT_8_8_REV_MESA = 0x85BB
  UPPER_LEFT = 0x8CA2
  USE_MISSING_GLYPH_NV = 0x90AA
  UTF16_NV = 0x909B
  UTF8_NV = 0x909A
  VALIDATE_STATUS = 0x8B83
  VARIABLE_A_NV = 0x8523
  VARIABLE_B_NV = 0x8524
  VARIABLE_C_NV = 0x8525
  VARIABLE_D_NV = 0x8526
  VARIABLE_E_NV = 0x8527
  VARIABLE_F_NV = 0x8528
  VARIABLE_G_NV = 0x8529
  VARIANT_ARRAY_EXT = 0x87E8
  VARIANT_ARRAY_POINTER_EXT = 0x87E9
  VARIANT_ARRAY_STRIDE_EXT = 0x87E6
  VARIANT_ARRAY_TYPE_EXT = 0x87E7
  VARIANT_DATATYPE_EXT = 0x87E5
  VARIANT_EXT = 0x87C1
  VARIANT_VALUE_EXT = 0x87E4
  VBO_FREE_MEMORY_ATI = 0x87FB
  VECTOR_EXT = 0x87BF
  VENDOR = 0x1F00
  VERSION = 0x1F02
  VERTEX23_BIT_PGI = 0x00000004
  VERTEX4_BIT_PGI = 0x00000008
  VERTEX_ARRAY = 0x8074
  VERTEX_ARRAY_ADDRESS_NV = 0x8F21
  VERTEX_ARRAY_BINDING = 0x85B5
  VERTEX_ARRAY_BINDING_APPLE = 0x85B5
  VERTEX_ARRAY_BUFFER_BINDING_ARB = 0x8896
  VERTEX_ARRAY_COUNT_EXT = 0x807D
  VERTEX_ARRAY_EXT = 0x8074
  VERTEX_ARRAY_KHR = 0x8074
  VERTEX_ARRAY_LENGTH_NV = 0x8F2B
  VERTEX_ARRAY_LIST_IBM = 103070
  VERTEX_ARRAY_LIST_STRIDE_IBM = 103080
  VERTEX_ARRAY_OBJECT_AMD = 0x9154
  VERTEX_ARRAY_OBJECT_EXT = 0x9154
  VERTEX_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F5
  VERTEX_ARRAY_POINTER_EXT = 0x808E
  VERTEX_ARRAY_RANGE_APPLE = 0x851D
  VERTEX_ARRAY_RANGE_LENGTH_APPLE = 0x851E
  VERTEX_ARRAY_RANGE_LENGTH_NV = 0x851E
  VERTEX_ARRAY_RANGE_NV = 0x851D
  VERTEX_ARRAY_RANGE_POINTER_APPLE = 0x8521
  VERTEX_ARRAY_RANGE_POINTER_NV = 0x8521
  VERTEX_ARRAY_RANGE_VALID_NV = 0x851F
  VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV = 0x8533
  VERTEX_ARRAY_SIZE_EXT = 0x807A
  VERTEX_ARRAY_STORAGE_HINT_APPLE = 0x851F
  VERTEX_ARRAY_STRIDE_EXT = 0x807C
  VERTEX_ARRAY_TYPE_EXT = 0x807B
  VERTEX_ATTRIB_ARRAY0_NV = 0x8650
  VERTEX_ATTRIB_ARRAY10_NV = 0x865A
  VERTEX_ATTRIB_ARRAY11_NV = 0x865B
  VERTEX_ATTRIB_ARRAY12_NV = 0x865C
  VERTEX_ATTRIB_ARRAY13_NV = 0x865D
  VERTEX_ATTRIB_ARRAY14_NV = 0x865E
  VERTEX_ATTRIB_ARRAY15_NV = 0x865F
  VERTEX_ATTRIB_ARRAY1_NV = 0x8651
  VERTEX_ATTRIB_ARRAY2_NV = 0x8652
  VERTEX_ATTRIB_ARRAY3_NV = 0x8653
  VERTEX_ATTRIB_ARRAY4_NV = 0x8654
  VERTEX_ATTRIB_ARRAY5_NV = 0x8655
  VERTEX_ATTRIB_ARRAY6_NV = 0x8656
  VERTEX_ATTRIB_ARRAY7_NV = 0x8657
  VERTEX_ATTRIB_ARRAY8_NV = 0x8658
  VERTEX_ATTRIB_ARRAY9_NV = 0x8659
  VERTEX_ATTRIB_ARRAY_ADDRESS_NV = 0x8F20
  VERTEX_ATTRIB_ARRAY_BARRIER_BIT = 0x00000001
  VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT = 0x00000001
  VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F
  VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB = 0x889F
  VERTEX_ATTRIB_ARRAY_DIVISOR = 0x88FE
  VERTEX_ATTRIB_ARRAY_DIVISOR_ARB = 0x88FE
  VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622
  VERTEX_ATTRIB_ARRAY_ENABLED_ARB = 0x8622
  VERTEX_ATTRIB_ARRAY_INTEGER = 0x88FD
  VERTEX_ATTRIB_ARRAY_INTEGER_EXT = 0x88FD
  VERTEX_ATTRIB_ARRAY_INTEGER_NV = 0x88FD
  VERTEX_ATTRIB_ARRAY_LENGTH_NV = 0x8F2A
  VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A
  VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB = 0x886A
  VERTEX_ATTRIB_ARRAY_POINTER = 0x8645
  VERTEX_ATTRIB_ARRAY_POINTER_ARB = 0x8645
  VERTEX_ATTRIB_ARRAY_SIZE = 0x8623
  VERTEX_ATTRIB_ARRAY_SIZE_ARB = 0x8623
  VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624
  VERTEX_ATTRIB_ARRAY_STRIDE_ARB = 0x8624
  VERTEX_ATTRIB_ARRAY_TYPE = 0x8625
  VERTEX_ATTRIB_ARRAY_TYPE_ARB = 0x8625
  VERTEX_ATTRIB_ARRAY_UNIFIED_NV = 0x8F1E
  VERTEX_ATTRIB_BINDING = 0x82D4
  VERTEX_ATTRIB_MAP1_APPLE = 0x8A00
  VERTEX_ATTRIB_MAP1_COEFF_APPLE = 0x8A03
  VERTEX_ATTRIB_MAP1_DOMAIN_APPLE = 0x8A05
  VERTEX_ATTRIB_MAP1_ORDER_APPLE = 0x8A04
  VERTEX_ATTRIB_MAP1_SIZE_APPLE = 0x8A02
  VERTEX_ATTRIB_MAP2_APPLE = 0x8A01
  VERTEX_ATTRIB_MAP2_COEFF_APPLE = 0x8A07
  VERTEX_ATTRIB_MAP2_DOMAIN_APPLE = 0x8A09
  VERTEX_ATTRIB_MAP2_ORDER_APPLE = 0x8A08
  VERTEX_ATTRIB_MAP2_SIZE_APPLE = 0x8A06
  VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D5
  VERTEX_BINDING_DIVISOR = 0x82D6
  VERTEX_BINDING_OFFSET = 0x82D7
  VERTEX_BINDING_STRIDE = 0x82D8
  VERTEX_BLEND_ARB = 0x86A7
  VERTEX_CONSISTENT_HINT_PGI = 0x1A22B
  VERTEX_DATA_HINT_PGI = 0x1A22A
  VERTEX_ELEMENT_SWIZZLE_AMD = 0x91A4
  VERTEX_ID_NV = 0x8C7B
  VERTEX_ID_SWIZZLE_AMD = 0x91A5
  VERTEX_PRECLIP_HINT_SGIX = 0x83EF
  VERTEX_PRECLIP_SGIX = 0x83EE
  VERTEX_PROGRAM_ARB = 0x8620
  VERTEX_PROGRAM_BINDING_NV = 0x864A
  VERTEX_PROGRAM_NV = 0x8620
  VERTEX_PROGRAM_PARAMETER_BUFFER_NV = 0x8DA2
  VERTEX_PROGRAM_POINT_SIZE = 0x8642
  VERTEX_PROGRAM_POINT_SIZE_ARB = 0x8642
  VERTEX_PROGRAM_POINT_SIZE_NV = 0x8642
  VERTEX_PROGRAM_TWO_SIDE_ARB = 0x8643
  VERTEX_PROGRAM_TWO_SIDE_NV = 0x8643
  VERTEX_SHADER = 0x8B31
  VERTEX_SHADER_ARB = 0x8B31
  VERTEX_SHADER_BINDING_EXT = 0x8781
  VERTEX_SHADER_BIT = 0x00000001
  VERTEX_SHADER_BIT_EXT = 0x00000001
  VERTEX_SHADER_EXT = 0x8780
  VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87CF
  VERTEX_SHADER_INVARIANTS_EXT = 0x87D1
  VERTEX_SHADER_LOCALS_EXT = 0x87D3
  VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87D2
  VERTEX_SHADER_OPTIMIZED_EXT = 0x87D4
  VERTEX_SHADER_VARIANTS_EXT = 0x87D0
  VERTEX_SOURCE_ATI = 0x8774
  VERTEX_STATE_PROGRAM_NV = 0x8621
  VERTEX_STREAM0_ATI = 0x876C
  VERTEX_STREAM1_ATI = 0x876D
  VERTEX_STREAM2_ATI = 0x876E
  VERTEX_STREAM3_ATI = 0x876F
  VERTEX_STREAM4_ATI = 0x8770
  VERTEX_STREAM5_ATI = 0x8771
  VERTEX_STREAM6_ATI = 0x8772
  VERTEX_STREAM7_ATI = 0x8773
  VERTEX_SUBROUTINE = 0x92E8
  VERTEX_SUBROUTINE_UNIFORM = 0x92EE
  VERTEX_TEXTURE = 0x829B
  VERTEX_WEIGHTING_EXT = 0x8509
  VERTEX_WEIGHT_ARRAY_EXT = 0x850C
  VERTEX_WEIGHT_ARRAY_POINTER_EXT = 0x8510
  VERTEX_WEIGHT_ARRAY_SIZE_EXT = 0x850D
  VERTEX_WEIGHT_ARRAY_STRIDE_EXT = 0x850F
  VERTEX_WEIGHT_ARRAY_TYPE_EXT = 0x850E
  VERTICAL_LINE_TO_NV = 0x08
  VIBRANCE_BIAS_NV = 0x8719
  VIBRANCE_SCALE_NV = 0x8713
  VIDEO_BUFFER_BINDING_NV = 0x9021
  VIDEO_BUFFER_INTERNAL_FORMAT_NV = 0x902D
  VIDEO_BUFFER_NV = 0x9020
  VIDEO_BUFFER_PITCH_NV = 0x9028
  VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV = 0x903B
  VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV = 0x903A
  VIDEO_CAPTURE_FRAME_HEIGHT_NV = 0x9039
  VIDEO_CAPTURE_FRAME_WIDTH_NV = 0x9038
  VIDEO_CAPTURE_SURFACE_ORIGIN_NV = 0x903C
  VIDEO_CAPTURE_TO_422_SUPPORTED_NV = 0x9026
  VIDEO_COLOR_CONVERSION_MATRIX_NV = 0x9029
  VIDEO_COLOR_CONVERSION_MAX_NV = 0x902A
  VIDEO_COLOR_CONVERSION_MIN_NV = 0x902B
  VIDEO_COLOR_CONVERSION_OFFSET_NV = 0x902C
  VIEWPORT = 0x0BA2
  VIEWPORT_BOUNDS_RANGE = 0x825D
  VIEWPORT_INDEX_PROVOKING_VERTEX = 0x825F
  VIEWPORT_SUBPIXEL_BITS = 0x825C
  VIEW_CLASS_128_BITS = 0x82C4
  VIEW_CLASS_16_BITS = 0x82CA
  VIEW_CLASS_24_BITS = 0x82C9
  VIEW_CLASS_32_BITS = 0x82C8
  VIEW_CLASS_48_BITS = 0x82C7
  VIEW_CLASS_64_BITS = 0x82C6
  VIEW_CLASS_8_BITS = 0x82CB
  VIEW_CLASS_96_BITS = 0x82C5
  VIEW_CLASS_BPTC_FLOAT = 0x82D3
  VIEW_CLASS_BPTC_UNORM = 0x82D2
  VIEW_CLASS_RGTC1_RED = 0x82D0
  VIEW_CLASS_RGTC2_RG = 0x82D1
  VIEW_CLASS_S3TC_DXT1_RGB = 0x82CC
  VIEW_CLASS_S3TC_DXT1_RGBA = 0x82CD
  VIEW_CLASS_S3TC_DXT3_RGBA = 0x82CE
  VIEW_CLASS_S3TC_DXT5_RGBA = 0x82CF
  VIEW_COMPATIBILITY_CLASS = 0x82B6
  VIRTUAL_PAGE_SIZE_INDEX_ARB = 0x91A7
  VIRTUAL_PAGE_SIZE_X_AMD = 0x9195
  VIRTUAL_PAGE_SIZE_X_ARB = 0x9195
  VIRTUAL_PAGE_SIZE_Y_AMD = 0x9196
  VIRTUAL_PAGE_SIZE_Y_ARB = 0x9196
  VIRTUAL_PAGE_SIZE_Z_AMD = 0x9197
  VIRTUAL_PAGE_SIZE_Z_ARB = 0x9197
  VIVIDLIGHT_NV = 0x92A6
  VOLATILE_APPLE = 0x8A1A
  WAIT_FAILED = 0x911D
  WARPS_PER_SM_NV = 0x933A
  WARP_SIZE_NV = 0x9339
  WEIGHT_ARRAY_ARB = 0x86AD
  WEIGHT_ARRAY_BUFFER_BINDING_ARB = 0x889E
  WEIGHT_ARRAY_POINTER_ARB = 0x86AC
  WEIGHT_ARRAY_SIZE_ARB = 0x86AB
  WEIGHT_ARRAY_STRIDE_ARB = 0x86AA
  WEIGHT_ARRAY_TYPE_ARB = 0x86A9
  WEIGHT_SUM_UNITY_ARB = 0x86A6
  WIDE_LINE_HINT_PGI = 0x1A222
  WRAP_BORDER_SUN = 0x81D4
  WRITE_DISCARD_NV = 0x88BE
  WRITE_ONLY = 0x88B9
  WRITE_ONLY_ARB = 0x88B9
  WRITE_PIXEL_DATA_RANGE_LENGTH_NV = 0x887A
  WRITE_PIXEL_DATA_RANGE_NV = 0x8878
  WRITE_PIXEL_DATA_RANGE_POINTER_NV = 0x887C
  W_EXT = 0x87D8
  XOR = 0x1506
  XOR_NV = 0x1506
  X_EXT = 0x87D5
  YCBAYCR8A_4224_NV = 0x9032
  YCBCR_422_APPLE = 0x85B9
  YCBCR_MESA = 0x8757
  YCBYCR8_422_NV = 0x9031
  YCRCBA_SGIX = 0x8319
  YCRCB_422_SGIX = 0x81BB
  YCRCB_444_SGIX = 0x81BC
  YCRCB_SGIX = 0x8318
  Y_EXT = 0x87D6
  Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV = 0x9036
  Z4Y12Z4CB12Z4CR12_444_NV = 0x9037
  Z4Y12Z4CB12Z4Y12Z4CR12_422_NV = 0x9035
  Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV = 0x9034
  Z6Y10Z6CB10Z6Y10Z6CR10_422_NV = 0x9033
  ZERO = 0
  ZERO_EXT = 0x87DD
  Z_EXT = 0x87D7
)
var (
  gpAccumxOES C.GPACCUMXOES
  gpActiveProgramEXT C.GPACTIVEPROGRAMEXT
  gpActiveShaderProgram C.GPACTIVESHADERPROGRAM
  gpActiveShaderProgramEXT C.GPACTIVESHADERPROGRAMEXT
  gpActiveStencilFaceEXT C.GPACTIVESTENCILFACEEXT
  gpActiveTexture C.GPACTIVETEXTURE
  gpActiveTextureARB C.GPACTIVETEXTUREARB
  gpActiveVaryingNV C.GPACTIVEVARYINGNV
  gpAlphaFragmentOp1ATI C.GPALPHAFRAGMENTOP1ATI
  gpAlphaFragmentOp2ATI C.GPALPHAFRAGMENTOP2ATI
  gpAlphaFragmentOp3ATI C.GPALPHAFRAGMENTOP3ATI
  gpAlphaFuncxOES C.GPALPHAFUNCXOES
  gpApplyTextureEXT C.GPAPPLYTEXTUREEXT
  gpAreProgramsResidentNV C.GPAREPROGRAMSRESIDENTNV
  gpAreTexturesResidentEXT C.GPARETEXTURESRESIDENTEXT
  gpArrayElementEXT C.GPARRAYELEMENTEXT
  gpArrayObjectATI C.GPARRAYOBJECTATI
  gpAsyncMarkerSGIX C.GPASYNCMARKERSGIX
  gpAttachObjectARB C.GPATTACHOBJECTARB
  gpAttachShader C.GPATTACHSHADER
  gpBeginConditionalRender C.GPBEGINCONDITIONALRENDER
  gpBeginConditionalRenderNV C.GPBEGINCONDITIONALRENDERNV
  gpBeginConditionalRenderNVX C.GPBEGINCONDITIONALRENDERNVX
  gpBeginFragmentShaderATI C.GPBEGINFRAGMENTSHADERATI
  gpBeginOcclusionQueryNV C.GPBEGINOCCLUSIONQUERYNV
  gpBeginPerfMonitorAMD C.GPBEGINPERFMONITORAMD
  gpBeginPerfQueryINTEL C.GPBEGINPERFQUERYINTEL
  gpBeginQuery C.GPBEGINQUERY
  gpBeginQueryARB C.GPBEGINQUERYARB
  gpBeginQueryIndexed C.GPBEGINQUERYINDEXED
  gpBeginTransformFeedback C.GPBEGINTRANSFORMFEEDBACK
  gpBeginTransformFeedbackEXT C.GPBEGINTRANSFORMFEEDBACKEXT
  gpBeginTransformFeedbackNV C.GPBEGINTRANSFORMFEEDBACKNV
  gpBeginVertexShaderEXT C.GPBEGINVERTEXSHADEREXT
  gpBeginVideoCaptureNV C.GPBEGINVIDEOCAPTURENV
  gpBindAttribLocation C.GPBINDATTRIBLOCATION
  gpBindAttribLocationARB C.GPBINDATTRIBLOCATIONARB
  gpBindBuffer C.GPBINDBUFFER
  gpBindBufferARB C.GPBINDBUFFERARB
  gpBindBufferBase C.GPBINDBUFFERBASE
  gpBindBufferBaseEXT C.GPBINDBUFFERBASEEXT
  gpBindBufferBaseNV C.GPBINDBUFFERBASENV
  gpBindBufferOffsetEXT C.GPBINDBUFFEROFFSETEXT
  gpBindBufferOffsetNV C.GPBINDBUFFEROFFSETNV
  gpBindBufferRange C.GPBINDBUFFERRANGE
  gpBindBufferRangeEXT C.GPBINDBUFFERRANGEEXT
  gpBindBufferRangeNV C.GPBINDBUFFERRANGENV
  gpBindBuffersBase C.GPBINDBUFFERSBASE
  gpBindBuffersRange C.GPBINDBUFFERSRANGE
  gpBindFragDataLocation C.GPBINDFRAGDATALOCATION
  gpBindFragDataLocationEXT C.GPBINDFRAGDATALOCATIONEXT
  gpBindFragDataLocationIndexed C.GPBINDFRAGDATALOCATIONINDEXED
  gpBindFragmentShaderATI C.GPBINDFRAGMENTSHADERATI
  gpBindFramebuffer C.GPBINDFRAMEBUFFER
  gpBindFramebufferEXT C.GPBINDFRAMEBUFFEREXT
  gpBindImageTexture C.GPBINDIMAGETEXTURE
  gpBindImageTextureEXT C.GPBINDIMAGETEXTUREEXT
  gpBindImageTextures C.GPBINDIMAGETEXTURES
  gpBindLightParameterEXT C.GPBINDLIGHTPARAMETEREXT
  gpBindMaterialParameterEXT C.GPBINDMATERIALPARAMETEREXT
  gpBindMultiTextureEXT C.GPBINDMULTITEXTUREEXT
  gpBindParameterEXT C.GPBINDPARAMETEREXT
  gpBindProgramARB C.GPBINDPROGRAMARB
  gpBindProgramNV C.GPBINDPROGRAMNV
  gpBindProgramPipeline C.GPBINDPROGRAMPIPELINE
  gpBindProgramPipelineEXT C.GPBINDPROGRAMPIPELINEEXT
  gpBindRenderbuffer C.GPBINDRENDERBUFFER
  gpBindRenderbufferEXT C.GPBINDRENDERBUFFEREXT
  gpBindSampler C.GPBINDSAMPLER
  gpBindSamplers C.GPBINDSAMPLERS
  gpBindTexGenParameterEXT C.GPBINDTEXGENPARAMETEREXT
  gpBindTexture C.GPBINDTEXTURE
  gpBindTextureEXT C.GPBINDTEXTUREEXT
  gpBindTextureUnitParameterEXT C.GPBINDTEXTUREUNITPARAMETEREXT
  gpBindTextures C.GPBINDTEXTURES
  gpBindTransformFeedback C.GPBINDTRANSFORMFEEDBACK
  gpBindTransformFeedbackNV C.GPBINDTRANSFORMFEEDBACKNV
  gpBindVertexArray C.GPBINDVERTEXARRAY
  gpBindVertexArrayAPPLE C.GPBINDVERTEXARRAYAPPLE
  gpBindVertexBuffer C.GPBINDVERTEXBUFFER
  gpBindVertexBuffers C.GPBINDVERTEXBUFFERS
  gpBindVertexShaderEXT C.GPBINDVERTEXSHADEREXT
  gpBindVideoCaptureStreamBufferNV C.GPBINDVIDEOCAPTURESTREAMBUFFERNV
  gpBindVideoCaptureStreamTextureNV C.GPBINDVIDEOCAPTURESTREAMTEXTURENV
  gpBinormal3bEXT C.GPBINORMAL3BEXT
  gpBinormal3bvEXT C.GPBINORMAL3BVEXT
  gpBinormal3dEXT C.GPBINORMAL3DEXT
  gpBinormal3dvEXT C.GPBINORMAL3DVEXT
  gpBinormal3fEXT C.GPBINORMAL3FEXT
  gpBinormal3fvEXT C.GPBINORMAL3FVEXT
  gpBinormal3iEXT C.GPBINORMAL3IEXT
  gpBinormal3ivEXT C.GPBINORMAL3IVEXT
  gpBinormal3sEXT C.GPBINORMAL3SEXT
  gpBinormal3svEXT C.GPBINORMAL3SVEXT
  gpBinormalPointerEXT C.GPBINORMALPOINTEREXT
  gpBitmapxOES C.GPBITMAPXOES
  gpBlendBarrierNV C.GPBLENDBARRIERNV
  gpBlendColor C.GPBLENDCOLOR
  gpBlendColorEXT C.GPBLENDCOLOREXT
  gpBlendColorxOES C.GPBLENDCOLORXOES
  gpBlendEquation C.GPBLENDEQUATION
  gpBlendEquationEXT C.GPBLENDEQUATIONEXT
  gpBlendEquationIndexedAMD C.GPBLENDEQUATIONINDEXEDAMD
  gpBlendEquationSeparate C.GPBLENDEQUATIONSEPARATE
  gpBlendEquationSeparateEXT C.GPBLENDEQUATIONSEPARATEEXT
  gpBlendEquationSeparateIndexedAMD C.GPBLENDEQUATIONSEPARATEINDEXEDAMD
  gpBlendEquationSeparateiARB C.GPBLENDEQUATIONSEPARATEIARB
  gpBlendEquationiARB C.GPBLENDEQUATIONIARB
  gpBlendFunc C.GPBLENDFUNC
  gpBlendFuncIndexedAMD C.GPBLENDFUNCINDEXEDAMD
  gpBlendFuncSeparate C.GPBLENDFUNCSEPARATE
  gpBlendFuncSeparateEXT C.GPBLENDFUNCSEPARATEEXT
  gpBlendFuncSeparateINGR C.GPBLENDFUNCSEPARATEINGR
  gpBlendFuncSeparateIndexedAMD C.GPBLENDFUNCSEPARATEINDEXEDAMD
  gpBlendFuncSeparateiARB C.GPBLENDFUNCSEPARATEIARB
  gpBlendFunciARB C.GPBLENDFUNCIARB
  gpBlendParameteriNV C.GPBLENDPARAMETERINV
  gpBlitFramebuffer C.GPBLITFRAMEBUFFER
  gpBlitFramebufferEXT C.GPBLITFRAMEBUFFEREXT
  gpBufferAddressRangeNV C.GPBUFFERADDRESSRANGENV
  gpBufferData C.GPBUFFERDATA
  gpBufferDataARB C.GPBUFFERDATAARB
  gpBufferParameteriAPPLE C.GPBUFFERPARAMETERIAPPLE
  gpBufferStorage C.GPBUFFERSTORAGE
  gpBufferSubData C.GPBUFFERSUBDATA
  gpBufferSubDataARB C.GPBUFFERSUBDATAARB
  gpCheckFramebufferStatus C.GPCHECKFRAMEBUFFERSTATUS
  gpCheckFramebufferStatusEXT C.GPCHECKFRAMEBUFFERSTATUSEXT
  gpCheckNamedFramebufferStatusEXT C.GPCHECKNAMEDFRAMEBUFFERSTATUSEXT
  gpClampColor C.GPCLAMPCOLOR
  gpClampColorARB C.GPCLAMPCOLORARB
  gpClear C.GPCLEAR
  gpClearAccumxOES C.GPCLEARACCUMXOES
  gpClearBufferData C.GPCLEARBUFFERDATA
  gpClearBufferSubData C.GPCLEARBUFFERSUBDATA
  gpClearBufferfi C.GPCLEARBUFFERFI
  gpClearBufferfv C.GPCLEARBUFFERFV
  gpClearBufferiv C.GPCLEARBUFFERIV
  gpClearBufferuiv C.GPCLEARBUFFERUIV
  gpClearColor C.GPCLEARCOLOR
  gpClearColorIiEXT C.GPCLEARCOLORIIEXT
  gpClearColorIuiEXT C.GPCLEARCOLORIUIEXT
  gpClearColorxOES C.GPCLEARCOLORXOES
  gpClearDepth C.GPCLEARDEPTH
  gpClearDepthdNV C.GPCLEARDEPTHDNV
  gpClearDepthf C.GPCLEARDEPTHF
  gpClearDepthfOES C.GPCLEARDEPTHFOES
  gpClearDepthxOES C.GPCLEARDEPTHXOES
  gpClearNamedBufferDataEXT C.GPCLEARNAMEDBUFFERDATAEXT
  gpClearNamedBufferSubDataEXT C.GPCLEARNAMEDBUFFERSUBDATAEXT
  gpClearStencil C.GPCLEARSTENCIL
  gpClearTexImage C.GPCLEARTEXIMAGE
  gpClearTexSubImage C.GPCLEARTEXSUBIMAGE
  gpClientActiveTextureARB C.GPCLIENTACTIVETEXTUREARB
  gpClientActiveVertexStreamATI C.GPCLIENTACTIVEVERTEXSTREAMATI
  gpClientAttribDefaultEXT C.GPCLIENTATTRIBDEFAULTEXT
  gpClientWaitSync C.GPCLIENTWAITSYNC
  gpClipPlanefOES C.GPCLIPPLANEFOES
  gpClipPlanexOES C.GPCLIPPLANEXOES
  gpColor3fVertex3fSUN C.GPCOLOR3FVERTEX3FSUN
  gpColor3fVertex3fvSUN C.GPCOLOR3FVERTEX3FVSUN
  gpColor3hNV C.GPCOLOR3HNV
  gpColor3hvNV C.GPCOLOR3HVNV
  gpColor3xOES C.GPCOLOR3XOES
  gpColor3xvOES C.GPCOLOR3XVOES
  gpColor4fNormal3fVertex3fSUN C.GPCOLOR4FNORMAL3FVERTEX3FSUN
  gpColor4fNormal3fVertex3fvSUN C.GPCOLOR4FNORMAL3FVERTEX3FVSUN
  gpColor4hNV C.GPCOLOR4HNV
  gpColor4hvNV C.GPCOLOR4HVNV
  gpColor4ubVertex2fSUN C.GPCOLOR4UBVERTEX2FSUN
  gpColor4ubVertex2fvSUN C.GPCOLOR4UBVERTEX2FVSUN
  gpColor4ubVertex3fSUN C.GPCOLOR4UBVERTEX3FSUN
  gpColor4ubVertex3fvSUN C.GPCOLOR4UBVERTEX3FVSUN
  gpColor4xOES C.GPCOLOR4XOES
  gpColor4xvOES C.GPCOLOR4XVOES
  gpColorFormatNV C.GPCOLORFORMATNV
  gpColorFragmentOp1ATI C.GPCOLORFRAGMENTOP1ATI
  gpColorFragmentOp2ATI C.GPCOLORFRAGMENTOP2ATI
  gpColorFragmentOp3ATI C.GPCOLORFRAGMENTOP3ATI
  gpColorMask C.GPCOLORMASK
  gpColorMaskIndexedEXT C.GPCOLORMASKINDEXEDEXT
  gpColorMaski C.GPCOLORMASKI
  gpColorPointerEXT C.GPCOLORPOINTEREXT
  gpColorPointerListIBM C.GPCOLORPOINTERLISTIBM
  gpColorPointervINTEL C.GPCOLORPOINTERVINTEL
  gpColorSubTableEXT C.GPCOLORSUBTABLEEXT
  gpColorTableEXT C.GPCOLORTABLEEXT
  gpColorTableParameterfvSGI C.GPCOLORTABLEPARAMETERFVSGI
  gpColorTableParameterivSGI C.GPCOLORTABLEPARAMETERIVSGI
  gpColorTableSGI C.GPCOLORTABLESGI
  gpCombinerInputNV C.GPCOMBINERINPUTNV
  gpCombinerOutputNV C.GPCOMBINEROUTPUTNV
  gpCombinerParameterfNV C.GPCOMBINERPARAMETERFNV
  gpCombinerParameterfvNV C.GPCOMBINERPARAMETERFVNV
  gpCombinerParameteriNV C.GPCOMBINERPARAMETERINV
  gpCombinerParameterivNV C.GPCOMBINERPARAMETERIVNV
  gpCombinerStageParameterfvNV C.GPCOMBINERSTAGEPARAMETERFVNV
  gpCompileShader C.GPCOMPILESHADER
  gpCompileShaderARB C.GPCOMPILESHADERARB
  gpCompileShaderIncludeARB C.GPCOMPILESHADERINCLUDEARB
  gpCompressedMultiTexImage1DEXT C.GPCOMPRESSEDMULTITEXIMAGE1DEXT
  gpCompressedMultiTexImage2DEXT C.GPCOMPRESSEDMULTITEXIMAGE2DEXT
  gpCompressedMultiTexImage3DEXT C.GPCOMPRESSEDMULTITEXIMAGE3DEXT
  gpCompressedMultiTexSubImage1DEXT C.GPCOMPRESSEDMULTITEXSUBIMAGE1DEXT
  gpCompressedMultiTexSubImage2DEXT C.GPCOMPRESSEDMULTITEXSUBIMAGE2DEXT
  gpCompressedMultiTexSubImage3DEXT C.GPCOMPRESSEDMULTITEXSUBIMAGE3DEXT
  gpCompressedTexImage1D C.GPCOMPRESSEDTEXIMAGE1D
  gpCompressedTexImage1DARB C.GPCOMPRESSEDTEXIMAGE1DARB
  gpCompressedTexImage2D C.GPCOMPRESSEDTEXIMAGE2D
  gpCompressedTexImage2DARB C.GPCOMPRESSEDTEXIMAGE2DARB
  gpCompressedTexImage3D C.GPCOMPRESSEDTEXIMAGE3D
  gpCompressedTexImage3DARB C.GPCOMPRESSEDTEXIMAGE3DARB
  gpCompressedTexSubImage1D C.GPCOMPRESSEDTEXSUBIMAGE1D
  gpCompressedTexSubImage1DARB C.GPCOMPRESSEDTEXSUBIMAGE1DARB
  gpCompressedTexSubImage2D C.GPCOMPRESSEDTEXSUBIMAGE2D
  gpCompressedTexSubImage2DARB C.GPCOMPRESSEDTEXSUBIMAGE2DARB
  gpCompressedTexSubImage3D C.GPCOMPRESSEDTEXSUBIMAGE3D
  gpCompressedTexSubImage3DARB C.GPCOMPRESSEDTEXSUBIMAGE3DARB
  gpCompressedTextureImage1DEXT C.GPCOMPRESSEDTEXTUREIMAGE1DEXT
  gpCompressedTextureImage2DEXT C.GPCOMPRESSEDTEXTUREIMAGE2DEXT
  gpCompressedTextureImage3DEXT C.GPCOMPRESSEDTEXTUREIMAGE3DEXT
  gpCompressedTextureSubImage1DEXT C.GPCOMPRESSEDTEXTURESUBIMAGE1DEXT
  gpCompressedTextureSubImage2DEXT C.GPCOMPRESSEDTEXTURESUBIMAGE2DEXT
  gpCompressedTextureSubImage3DEXT C.GPCOMPRESSEDTEXTURESUBIMAGE3DEXT
  gpConvolutionFilter1DEXT C.GPCONVOLUTIONFILTER1DEXT
  gpConvolutionFilter2DEXT C.GPCONVOLUTIONFILTER2DEXT
  gpConvolutionParameterfEXT C.GPCONVOLUTIONPARAMETERFEXT
  gpConvolutionParameterfvEXT C.GPCONVOLUTIONPARAMETERFVEXT
  gpConvolutionParameteriEXT C.GPCONVOLUTIONPARAMETERIEXT
  gpConvolutionParameterivEXT C.GPCONVOLUTIONPARAMETERIVEXT
  gpConvolutionParameterxOES C.GPCONVOLUTIONPARAMETERXOES
  gpConvolutionParameterxvOES C.GPCONVOLUTIONPARAMETERXVOES
  gpCopyBufferSubData C.GPCOPYBUFFERSUBDATA
  gpCopyColorSubTableEXT C.GPCOPYCOLORSUBTABLEEXT
  gpCopyColorTableSGI C.GPCOPYCOLORTABLESGI
  gpCopyConvolutionFilter1DEXT C.GPCOPYCONVOLUTIONFILTER1DEXT
  gpCopyConvolutionFilter2DEXT C.GPCOPYCONVOLUTIONFILTER2DEXT
  gpCopyImageSubData C.GPCOPYIMAGESUBDATA
  gpCopyImageSubDataNV C.GPCOPYIMAGESUBDATANV
  gpCopyMultiTexImage1DEXT C.GPCOPYMULTITEXIMAGE1DEXT
  gpCopyMultiTexImage2DEXT C.GPCOPYMULTITEXIMAGE2DEXT
  gpCopyMultiTexSubImage1DEXT C.GPCOPYMULTITEXSUBIMAGE1DEXT
  gpCopyMultiTexSubImage2DEXT C.GPCOPYMULTITEXSUBIMAGE2DEXT
  gpCopyMultiTexSubImage3DEXT C.GPCOPYMULTITEXSUBIMAGE3DEXT
  gpCopyPathNV C.GPCOPYPATHNV
  gpCopyTexImage1D C.GPCOPYTEXIMAGE1D
  gpCopyTexImage1DEXT C.GPCOPYTEXIMAGE1DEXT
  gpCopyTexImage2D C.GPCOPYTEXIMAGE2D
  gpCopyTexImage2DEXT C.GPCOPYTEXIMAGE2DEXT
  gpCopyTexSubImage1D C.GPCOPYTEXSUBIMAGE1D
  gpCopyTexSubImage1DEXT C.GPCOPYTEXSUBIMAGE1DEXT
  gpCopyTexSubImage2D C.GPCOPYTEXSUBIMAGE2D
  gpCopyTexSubImage2DEXT C.GPCOPYTEXSUBIMAGE2DEXT
  gpCopyTexSubImage3D C.GPCOPYTEXSUBIMAGE3D
  gpCopyTexSubImage3DEXT C.GPCOPYTEXSUBIMAGE3DEXT
  gpCopyTextureImage1DEXT C.GPCOPYTEXTUREIMAGE1DEXT
  gpCopyTextureImage2DEXT C.GPCOPYTEXTUREIMAGE2DEXT
  gpCopyTextureSubImage1DEXT C.GPCOPYTEXTURESUBIMAGE1DEXT
  gpCopyTextureSubImage2DEXT C.GPCOPYTEXTURESUBIMAGE2DEXT
  gpCopyTextureSubImage3DEXT C.GPCOPYTEXTURESUBIMAGE3DEXT
  gpCoverFillPathInstancedNV C.GPCOVERFILLPATHINSTANCEDNV
  gpCoverFillPathNV C.GPCOVERFILLPATHNV
  gpCoverStrokePathInstancedNV C.GPCOVERSTROKEPATHINSTANCEDNV
  gpCoverStrokePathNV C.GPCOVERSTROKEPATHNV
  gpCreatePerfQueryINTEL C.GPCREATEPERFQUERYINTEL
  gpCreateProgram C.GPCREATEPROGRAM
  gpCreateProgramObjectARB C.GPCREATEPROGRAMOBJECTARB
  gpCreateShader C.GPCREATESHADER
  gpCreateShaderObjectARB C.GPCREATESHADEROBJECTARB
  gpCreateShaderProgramEXT C.GPCREATESHADERPROGRAMEXT
  gpCreateShaderProgramv C.GPCREATESHADERPROGRAMV
  gpCreateShaderProgramvEXT C.GPCREATESHADERPROGRAMVEXT
  gpCreateSyncFromCLeventARB C.GPCREATESYNCFROMCLEVENTARB
  gpCullFace C.GPCULLFACE
  gpCullParameterdvEXT C.GPCULLPARAMETERDVEXT
  gpCullParameterfvEXT C.GPCULLPARAMETERFVEXT
  gpCurrentPaletteMatrixARB C.GPCURRENTPALETTEMATRIXARB
  gpDebugMessageCallback C.GPDEBUGMESSAGECALLBACK
  gpDebugMessageCallbackAMD C.GPDEBUGMESSAGECALLBACKAMD
  gpDebugMessageCallbackARB C.GPDEBUGMESSAGECALLBACKARB
  gpDebugMessageCallbackKHR C.GPDEBUGMESSAGECALLBACKKHR
  gpDebugMessageControl C.GPDEBUGMESSAGECONTROL
  gpDebugMessageControlARB C.GPDEBUGMESSAGECONTROLARB
  gpDebugMessageControlKHR C.GPDEBUGMESSAGECONTROLKHR
  gpDebugMessageEnableAMD C.GPDEBUGMESSAGEENABLEAMD
  gpDebugMessageInsert C.GPDEBUGMESSAGEINSERT
  gpDebugMessageInsertAMD C.GPDEBUGMESSAGEINSERTAMD
  gpDebugMessageInsertARB C.GPDEBUGMESSAGEINSERTARB
  gpDebugMessageInsertKHR C.GPDEBUGMESSAGEINSERTKHR
  gpDeformSGIX C.GPDEFORMSGIX
  gpDeformationMap3dSGIX C.GPDEFORMATIONMAP3DSGIX
  gpDeformationMap3fSGIX C.GPDEFORMATIONMAP3FSGIX
  gpDeleteAsyncMarkersSGIX C.GPDELETEASYNCMARKERSSGIX
  gpDeleteBuffers C.GPDELETEBUFFERS
  gpDeleteBuffersARB C.GPDELETEBUFFERSARB
  gpDeleteFencesAPPLE C.GPDELETEFENCESAPPLE
  gpDeleteFencesNV C.GPDELETEFENCESNV
  gpDeleteFragmentShaderATI C.GPDELETEFRAGMENTSHADERATI
  gpDeleteFramebuffers C.GPDELETEFRAMEBUFFERS
  gpDeleteFramebuffersEXT C.GPDELETEFRAMEBUFFERSEXT
  gpDeleteNamedStringARB C.GPDELETENAMEDSTRINGARB
  gpDeleteNamesAMD C.GPDELETENAMESAMD
  gpDeleteObjectARB C.GPDELETEOBJECTARB
  gpDeleteOcclusionQueriesNV C.GPDELETEOCCLUSIONQUERIESNV
  gpDeletePathsNV C.GPDELETEPATHSNV
  gpDeletePerfMonitorsAMD C.GPDELETEPERFMONITORSAMD
  gpDeletePerfQueryINTEL C.GPDELETEPERFQUERYINTEL
  gpDeleteProgram C.GPDELETEPROGRAM
  gpDeleteProgramPipelines C.GPDELETEPROGRAMPIPELINES
  gpDeleteProgramPipelinesEXT C.GPDELETEPROGRAMPIPELINESEXT
  gpDeleteProgramsARB C.GPDELETEPROGRAMSARB
  gpDeleteProgramsNV C.GPDELETEPROGRAMSNV
  gpDeleteQueries C.GPDELETEQUERIES
  gpDeleteQueriesARB C.GPDELETEQUERIESARB
  gpDeleteRenderbuffers C.GPDELETERENDERBUFFERS
  gpDeleteRenderbuffersEXT C.GPDELETERENDERBUFFERSEXT
  gpDeleteSamplers C.GPDELETESAMPLERS
  gpDeleteShader C.GPDELETESHADER
  gpDeleteSync C.GPDELETESYNC
  gpDeleteTextures C.GPDELETETEXTURES
  gpDeleteTexturesEXT C.GPDELETETEXTURESEXT
  gpDeleteTransformFeedbacks C.GPDELETETRANSFORMFEEDBACKS
  gpDeleteTransformFeedbacksNV C.GPDELETETRANSFORMFEEDBACKSNV
  gpDeleteVertexArrays C.GPDELETEVERTEXARRAYS
  gpDeleteVertexArraysAPPLE C.GPDELETEVERTEXARRAYSAPPLE
  gpDeleteVertexShaderEXT C.GPDELETEVERTEXSHADEREXT
  gpDepthBoundsEXT C.GPDEPTHBOUNDSEXT
  gpDepthBoundsdNV C.GPDEPTHBOUNDSDNV
  gpDepthFunc C.GPDEPTHFUNC
  gpDepthMask C.GPDEPTHMASK
  gpDepthRange C.GPDEPTHRANGE
  gpDepthRangeArrayv C.GPDEPTHRANGEARRAYV
  gpDepthRangeIndexed C.GPDEPTHRANGEINDEXED
  gpDepthRangedNV C.GPDEPTHRANGEDNV
  gpDepthRangef C.GPDEPTHRANGEF
  gpDepthRangefOES C.GPDEPTHRANGEFOES
  gpDepthRangexOES C.GPDEPTHRANGEXOES
  gpDetachObjectARB C.GPDETACHOBJECTARB
  gpDetachShader C.GPDETACHSHADER
  gpDetailTexFuncSGIS C.GPDETAILTEXFUNCSGIS
  gpDisable C.GPDISABLE
  gpDisableClientStateIndexedEXT C.GPDISABLECLIENTSTATEINDEXEDEXT
  gpDisableClientStateiEXT C.GPDISABLECLIENTSTATEIEXT
  gpDisableIndexedEXT C.GPDISABLEINDEXEDEXT
  gpDisableVariantClientStateEXT C.GPDISABLEVARIANTCLIENTSTATEEXT
  gpDisableVertexArrayAttribEXT C.GPDISABLEVERTEXARRAYATTRIBEXT
  gpDisableVertexArrayEXT C.GPDISABLEVERTEXARRAYEXT
  gpDisableVertexAttribAPPLE C.GPDISABLEVERTEXATTRIBAPPLE
  gpDisableVertexAttribArray C.GPDISABLEVERTEXATTRIBARRAY
  gpDisableVertexAttribArrayARB C.GPDISABLEVERTEXATTRIBARRAYARB
  gpDisablei C.GPDISABLEI
  gpDispatchCompute C.GPDISPATCHCOMPUTE
  gpDispatchComputeGroupSizeARB C.GPDISPATCHCOMPUTEGROUPSIZEARB
  gpDispatchComputeIndirect C.GPDISPATCHCOMPUTEINDIRECT
  gpDrawArrays C.GPDRAWARRAYS
  gpDrawArraysEXT C.GPDRAWARRAYSEXT
  gpDrawArraysIndirect C.GPDRAWARRAYSINDIRECT
  gpDrawArraysInstanced C.GPDRAWARRAYSINSTANCED
  gpDrawArraysInstancedARB C.GPDRAWARRAYSINSTANCEDARB
  gpDrawArraysInstancedBaseInstance C.GPDRAWARRAYSINSTANCEDBASEINSTANCE
  gpDrawArraysInstancedEXT C.GPDRAWARRAYSINSTANCEDEXT
  gpDrawBuffer C.GPDRAWBUFFER
  gpDrawBuffers C.GPDRAWBUFFERS
  gpDrawBuffersARB C.GPDRAWBUFFERSARB
  gpDrawBuffersATI C.GPDRAWBUFFERSATI
  gpDrawElementArrayAPPLE C.GPDRAWELEMENTARRAYAPPLE
  gpDrawElementArrayATI C.GPDRAWELEMENTARRAYATI
  gpDrawElements C.GPDRAWELEMENTS
  gpDrawElementsBaseVertex C.GPDRAWELEMENTSBASEVERTEX
  gpDrawElementsIndirect C.GPDRAWELEMENTSINDIRECT
  gpDrawElementsInstanced C.GPDRAWELEMENTSINSTANCED
  gpDrawElementsInstancedARB C.GPDRAWELEMENTSINSTANCEDARB
  gpDrawElementsInstancedBaseInstance C.GPDRAWELEMENTSINSTANCEDBASEINSTANCE
  gpDrawElementsInstancedBaseVertex C.GPDRAWELEMENTSINSTANCEDBASEVERTEX
  gpDrawElementsInstancedBaseVertexBaseInstance C.GPDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCE
  gpDrawElementsInstancedEXT C.GPDRAWELEMENTSINSTANCEDEXT
  gpDrawMeshArraysSUN C.GPDRAWMESHARRAYSSUN
  gpDrawRangeElementArrayAPPLE C.GPDRAWRANGEELEMENTARRAYAPPLE
  gpDrawRangeElementArrayATI C.GPDRAWRANGEELEMENTARRAYATI
  gpDrawRangeElements C.GPDRAWRANGEELEMENTS
  gpDrawRangeElementsBaseVertex C.GPDRAWRANGEELEMENTSBASEVERTEX
  gpDrawRangeElementsEXT C.GPDRAWRANGEELEMENTSEXT
  gpDrawTextureNV C.GPDRAWTEXTURENV
  gpDrawTransformFeedback C.GPDRAWTRANSFORMFEEDBACK
  gpDrawTransformFeedbackInstanced C.GPDRAWTRANSFORMFEEDBACKINSTANCED
  gpDrawTransformFeedbackNV C.GPDRAWTRANSFORMFEEDBACKNV
  gpDrawTransformFeedbackStream C.GPDRAWTRANSFORMFEEDBACKSTREAM
  gpDrawTransformFeedbackStreamInstanced C.GPDRAWTRANSFORMFEEDBACKSTREAMINSTANCED
  gpEdgeFlagFormatNV C.GPEDGEFLAGFORMATNV
  gpEdgeFlagPointerEXT C.GPEDGEFLAGPOINTEREXT
  gpEdgeFlagPointerListIBM C.GPEDGEFLAGPOINTERLISTIBM
  gpElementPointerAPPLE C.GPELEMENTPOINTERAPPLE
  gpElementPointerATI C.GPELEMENTPOINTERATI
  gpEnable C.GPENABLE
  gpEnableClientStateIndexedEXT C.GPENABLECLIENTSTATEINDEXEDEXT
  gpEnableClientStateiEXT C.GPENABLECLIENTSTATEIEXT
  gpEnableIndexedEXT C.GPENABLEINDEXEDEXT
  gpEnableVariantClientStateEXT C.GPENABLEVARIANTCLIENTSTATEEXT
  gpEnableVertexArrayAttribEXT C.GPENABLEVERTEXARRAYATTRIBEXT
  gpEnableVertexArrayEXT C.GPENABLEVERTEXARRAYEXT
  gpEnableVertexAttribAPPLE C.GPENABLEVERTEXATTRIBAPPLE
  gpEnableVertexAttribArray C.GPENABLEVERTEXATTRIBARRAY
  gpEnableVertexAttribArrayARB C.GPENABLEVERTEXATTRIBARRAYARB
  gpEnablei C.GPENABLEI
  gpEndConditionalRender C.GPENDCONDITIONALRENDER
  gpEndConditionalRenderNV C.GPENDCONDITIONALRENDERNV
  gpEndConditionalRenderNVX C.GPENDCONDITIONALRENDERNVX
  gpEndFragmentShaderATI C.GPENDFRAGMENTSHADERATI
  gpEndOcclusionQueryNV C.GPENDOCCLUSIONQUERYNV
  gpEndPerfMonitorAMD C.GPENDPERFMONITORAMD
  gpEndPerfQueryINTEL C.GPENDPERFQUERYINTEL
  gpEndQuery C.GPENDQUERY
  gpEndQueryARB C.GPENDQUERYARB
  gpEndQueryIndexed C.GPENDQUERYINDEXED
  gpEndTransformFeedback C.GPENDTRANSFORMFEEDBACK
  gpEndTransformFeedbackEXT C.GPENDTRANSFORMFEEDBACKEXT
  gpEndTransformFeedbackNV C.GPENDTRANSFORMFEEDBACKNV
  gpEndVertexShaderEXT C.GPENDVERTEXSHADEREXT
  gpEndVideoCaptureNV C.GPENDVIDEOCAPTURENV
  gpEvalCoord1xOES C.GPEVALCOORD1XOES
  gpEvalCoord1xvOES C.GPEVALCOORD1XVOES
  gpEvalCoord2xOES C.GPEVALCOORD2XOES
  gpEvalCoord2xvOES C.GPEVALCOORD2XVOES
  gpEvalMapsNV C.GPEVALMAPSNV
  gpExecuteProgramNV C.GPEXECUTEPROGRAMNV
  gpExtractComponentEXT C.GPEXTRACTCOMPONENTEXT
  gpFeedbackBufferxOES C.GPFEEDBACKBUFFERXOES
  gpFenceSync C.GPFENCESYNC
  gpFinalCombinerInputNV C.GPFINALCOMBINERINPUTNV
  gpFinish C.GPFINISH
  gpFinishAsyncSGIX C.GPFINISHASYNCSGIX
  gpFinishFenceAPPLE C.GPFINISHFENCEAPPLE
  gpFinishFenceNV C.GPFINISHFENCENV
  gpFinishObjectAPPLE C.GPFINISHOBJECTAPPLE
  gpFinishTextureSUNX C.GPFINISHTEXTURESUNX
  gpFlush C.GPFLUSH
  gpFlushMappedBufferRange C.GPFLUSHMAPPEDBUFFERRANGE
  gpFlushMappedBufferRangeAPPLE C.GPFLUSHMAPPEDBUFFERRANGEAPPLE
  gpFlushMappedNamedBufferRangeEXT C.GPFLUSHMAPPEDNAMEDBUFFERRANGEEXT
  gpFlushPixelDataRangeNV C.GPFLUSHPIXELDATARANGENV
  gpFlushRasterSGIX C.GPFLUSHRASTERSGIX
  gpFlushStaticDataIBM C.GPFLUSHSTATICDATAIBM
  gpFlushVertexArrayRangeAPPLE C.GPFLUSHVERTEXARRAYRANGEAPPLE
  gpFlushVertexArrayRangeNV C.GPFLUSHVERTEXARRAYRANGENV
  gpFogCoordFormatNV C.GPFOGCOORDFORMATNV
  gpFogCoordPointerEXT C.GPFOGCOORDPOINTEREXT
  gpFogCoordPointerListIBM C.GPFOGCOORDPOINTERLISTIBM
  gpFogCoorddEXT C.GPFOGCOORDDEXT
  gpFogCoorddvEXT C.GPFOGCOORDDVEXT
  gpFogCoordfEXT C.GPFOGCOORDFEXT
  gpFogCoordfvEXT C.GPFOGCOORDFVEXT
  gpFogCoordhNV C.GPFOGCOORDHNV
  gpFogCoordhvNV C.GPFOGCOORDHVNV
  gpFogFuncSGIS C.GPFOGFUNCSGIS
  gpFogxOES C.GPFOGXOES
  gpFogxvOES C.GPFOGXVOES
  gpFragmentColorMaterialSGIX C.GPFRAGMENTCOLORMATERIALSGIX
  gpFragmentLightModelfSGIX C.GPFRAGMENTLIGHTMODELFSGIX
  gpFragmentLightModelfvSGIX C.GPFRAGMENTLIGHTMODELFVSGIX
  gpFragmentLightModeliSGIX C.GPFRAGMENTLIGHTMODELISGIX
  gpFragmentLightModelivSGIX C.GPFRAGMENTLIGHTMODELIVSGIX
  gpFragmentLightfSGIX C.GPFRAGMENTLIGHTFSGIX
  gpFragmentLightfvSGIX C.GPFRAGMENTLIGHTFVSGIX
  gpFragmentLightiSGIX C.GPFRAGMENTLIGHTISGIX
  gpFragmentLightivSGIX C.GPFRAGMENTLIGHTIVSGIX
  gpFragmentMaterialfSGIX C.GPFRAGMENTMATERIALFSGIX
  gpFragmentMaterialfvSGIX C.GPFRAGMENTMATERIALFVSGIX
  gpFragmentMaterialiSGIX C.GPFRAGMENTMATERIALISGIX
  gpFragmentMaterialivSGIX C.GPFRAGMENTMATERIALIVSGIX
  gpFrameTerminatorGREMEDY C.GPFRAMETERMINATORGREMEDY
  gpFrameZoomSGIX C.GPFRAMEZOOMSGIX
  gpFramebufferDrawBufferEXT C.GPFRAMEBUFFERDRAWBUFFEREXT
  gpFramebufferDrawBuffersEXT C.GPFRAMEBUFFERDRAWBUFFERSEXT
  gpFramebufferParameteri C.GPFRAMEBUFFERPARAMETERI
  gpFramebufferReadBufferEXT C.GPFRAMEBUFFERREADBUFFEREXT
  gpFramebufferRenderbuffer C.GPFRAMEBUFFERRENDERBUFFER
  gpFramebufferRenderbufferEXT C.GPFRAMEBUFFERRENDERBUFFEREXT
  gpFramebufferTexture C.GPFRAMEBUFFERTEXTURE
  gpFramebufferTexture1D C.GPFRAMEBUFFERTEXTURE1D
  gpFramebufferTexture1DEXT C.GPFRAMEBUFFERTEXTURE1DEXT
  gpFramebufferTexture2D C.GPFRAMEBUFFERTEXTURE2D
  gpFramebufferTexture2DEXT C.GPFRAMEBUFFERTEXTURE2DEXT
  gpFramebufferTexture3D C.GPFRAMEBUFFERTEXTURE3D
  gpFramebufferTexture3DEXT C.GPFRAMEBUFFERTEXTURE3DEXT
  gpFramebufferTextureARB C.GPFRAMEBUFFERTEXTUREARB
  gpFramebufferTextureEXT C.GPFRAMEBUFFERTEXTUREEXT
  gpFramebufferTextureFaceARB C.GPFRAMEBUFFERTEXTUREFACEARB
  gpFramebufferTextureFaceEXT C.GPFRAMEBUFFERTEXTUREFACEEXT
  gpFramebufferTextureLayer C.GPFRAMEBUFFERTEXTURELAYER
  gpFramebufferTextureLayerARB C.GPFRAMEBUFFERTEXTURELAYERARB
  gpFramebufferTextureLayerEXT C.GPFRAMEBUFFERTEXTURELAYEREXT
  gpFreeObjectBufferATI C.GPFREEOBJECTBUFFERATI
  gpFrontFace C.GPFRONTFACE
  gpFrustumfOES C.GPFRUSTUMFOES
  gpFrustumxOES C.GPFRUSTUMXOES
  gpGenAsyncMarkersSGIX C.GPGENASYNCMARKERSSGIX
  gpGenBuffers C.GPGENBUFFERS
  gpGenBuffersARB C.GPGENBUFFERSARB
  gpGenFencesAPPLE C.GPGENFENCESAPPLE
  gpGenFencesNV C.GPGENFENCESNV
  gpGenFragmentShadersATI C.GPGENFRAGMENTSHADERSATI
  gpGenFramebuffers C.GPGENFRAMEBUFFERS
  gpGenFramebuffersEXT C.GPGENFRAMEBUFFERSEXT
  gpGenNamesAMD C.GPGENNAMESAMD
  gpGenOcclusionQueriesNV C.GPGENOCCLUSIONQUERIESNV
  gpGenPathsNV C.GPGENPATHSNV
  gpGenPerfMonitorsAMD C.GPGENPERFMONITORSAMD
  gpGenProgramPipelines C.GPGENPROGRAMPIPELINES
  gpGenProgramPipelinesEXT C.GPGENPROGRAMPIPELINESEXT
  gpGenProgramsARB C.GPGENPROGRAMSARB
  gpGenProgramsNV C.GPGENPROGRAMSNV
  gpGenQueries C.GPGENQUERIES
  gpGenQueriesARB C.GPGENQUERIESARB
  gpGenRenderbuffers C.GPGENRENDERBUFFERS
  gpGenRenderbuffersEXT C.GPGENRENDERBUFFERSEXT
  gpGenSamplers C.GPGENSAMPLERS
  gpGenSymbolsEXT C.GPGENSYMBOLSEXT
  gpGenTextures C.GPGENTEXTURES
  gpGenTexturesEXT C.GPGENTEXTURESEXT
  gpGenTransformFeedbacks C.GPGENTRANSFORMFEEDBACKS
  gpGenTransformFeedbacksNV C.GPGENTRANSFORMFEEDBACKSNV
  gpGenVertexArrays C.GPGENVERTEXARRAYS
  gpGenVertexArraysAPPLE C.GPGENVERTEXARRAYSAPPLE
  gpGenVertexShadersEXT C.GPGENVERTEXSHADERSEXT
  gpGenerateMipmap C.GPGENERATEMIPMAP
  gpGenerateMipmapEXT C.GPGENERATEMIPMAPEXT
  gpGenerateMultiTexMipmapEXT C.GPGENERATEMULTITEXMIPMAPEXT
  gpGenerateTextureMipmapEXT C.GPGENERATETEXTUREMIPMAPEXT
  gpGetActiveAtomicCounterBufferiv C.GPGETACTIVEATOMICCOUNTERBUFFERIV
  gpGetActiveAttrib C.GPGETACTIVEATTRIB
  gpGetActiveAttribARB C.GPGETACTIVEATTRIBARB
  gpGetActiveSubroutineName C.GPGETACTIVESUBROUTINENAME
  gpGetActiveSubroutineUniformName C.GPGETACTIVESUBROUTINEUNIFORMNAME
  gpGetActiveSubroutineUniformiv C.GPGETACTIVESUBROUTINEUNIFORMIV
  gpGetActiveUniform C.GPGETACTIVEUNIFORM
  gpGetActiveUniformARB C.GPGETACTIVEUNIFORMARB
  gpGetActiveUniformBlockName C.GPGETACTIVEUNIFORMBLOCKNAME
  gpGetActiveUniformBlockiv C.GPGETACTIVEUNIFORMBLOCKIV
  gpGetActiveUniformName C.GPGETACTIVEUNIFORMNAME
  gpGetActiveUniformsiv C.GPGETACTIVEUNIFORMSIV
  gpGetActiveVaryingNV C.GPGETACTIVEVARYINGNV
  gpGetArrayObjectfvATI C.GPGETARRAYOBJECTFVATI
  gpGetArrayObjectivATI C.GPGETARRAYOBJECTIVATI
  gpGetAttachedObjectsARB C.GPGETATTACHEDOBJECTSARB
  gpGetAttachedShaders C.GPGETATTACHEDSHADERS
  gpGetAttribLocation C.GPGETATTRIBLOCATION
  gpGetAttribLocationARB C.GPGETATTRIBLOCATIONARB
  gpGetBooleanIndexedvEXT C.GPGETBOOLEANINDEXEDVEXT
  gpGetBooleani_v C.GPGETBOOLEANI_V
  gpGetBooleanv C.GPGETBOOLEANV
  gpGetBufferParameteri64v C.GPGETBUFFERPARAMETERI64V
  gpGetBufferParameteriv C.GPGETBUFFERPARAMETERIV
  gpGetBufferParameterivARB C.GPGETBUFFERPARAMETERIVARB
  gpGetBufferParameterui64vNV C.GPGETBUFFERPARAMETERUI64VNV
  gpGetBufferPointerv C.GPGETBUFFERPOINTERV
  gpGetBufferPointervARB C.GPGETBUFFERPOINTERVARB
  gpGetBufferSubData C.GPGETBUFFERSUBDATA
  gpGetBufferSubDataARB C.GPGETBUFFERSUBDATAARB
  gpGetClipPlanefOES C.GPGETCLIPPLANEFOES
  gpGetClipPlanexOES C.GPGETCLIPPLANEXOES
  gpGetColorTableEXT C.GPGETCOLORTABLEEXT
  gpGetColorTableParameterfvEXT C.GPGETCOLORTABLEPARAMETERFVEXT
  gpGetColorTableParameterfvSGI C.GPGETCOLORTABLEPARAMETERFVSGI
  gpGetColorTableParameterivEXT C.GPGETCOLORTABLEPARAMETERIVEXT
  gpGetColorTableParameterivSGI C.GPGETCOLORTABLEPARAMETERIVSGI
  gpGetColorTableSGI C.GPGETCOLORTABLESGI
  gpGetCombinerInputParameterfvNV C.GPGETCOMBINERINPUTPARAMETERFVNV
  gpGetCombinerInputParameterivNV C.GPGETCOMBINERINPUTPARAMETERIVNV
  gpGetCombinerOutputParameterfvNV C.GPGETCOMBINEROUTPUTPARAMETERFVNV
  gpGetCombinerOutputParameterivNV C.GPGETCOMBINEROUTPUTPARAMETERIVNV
  gpGetCombinerStageParameterfvNV C.GPGETCOMBINERSTAGEPARAMETERFVNV
  gpGetCompressedMultiTexImageEXT C.GPGETCOMPRESSEDMULTITEXIMAGEEXT
  gpGetCompressedTexImage C.GPGETCOMPRESSEDTEXIMAGE
  gpGetCompressedTexImageARB C.GPGETCOMPRESSEDTEXIMAGEARB
  gpGetCompressedTextureImageEXT C.GPGETCOMPRESSEDTEXTUREIMAGEEXT
  gpGetConvolutionFilterEXT C.GPGETCONVOLUTIONFILTEREXT
  gpGetConvolutionParameterfvEXT C.GPGETCONVOLUTIONPARAMETERFVEXT
  gpGetConvolutionParameterivEXT C.GPGETCONVOLUTIONPARAMETERIVEXT
  gpGetConvolutionParameterxvOES C.GPGETCONVOLUTIONPARAMETERXVOES
  gpGetDebugMessageLog C.GPGETDEBUGMESSAGELOG
  gpGetDebugMessageLogAMD C.GPGETDEBUGMESSAGELOGAMD
  gpGetDebugMessageLogARB C.GPGETDEBUGMESSAGELOGARB
  gpGetDebugMessageLogKHR C.GPGETDEBUGMESSAGELOGKHR
  gpGetDetailTexFuncSGIS C.GPGETDETAILTEXFUNCSGIS
  gpGetDoubleIndexedvEXT C.GPGETDOUBLEINDEXEDVEXT
  gpGetDoublei_v C.GPGETDOUBLEI_V
  gpGetDoublei_vEXT C.GPGETDOUBLEI_VEXT
  gpGetDoublev C.GPGETDOUBLEV
  gpGetError C.GPGETERROR
  gpGetFenceivNV C.GPGETFENCEIVNV
  gpGetFinalCombinerInputParameterfvNV C.GPGETFINALCOMBINERINPUTPARAMETERFVNV
  gpGetFinalCombinerInputParameterivNV C.GPGETFINALCOMBINERINPUTPARAMETERIVNV
  gpGetFirstPerfQueryIdINTEL C.GPGETFIRSTPERFQUERYIDINTEL
  gpGetFixedvOES C.GPGETFIXEDVOES
  gpGetFloatIndexedvEXT C.GPGETFLOATINDEXEDVEXT
  gpGetFloati_v C.GPGETFLOATI_V
  gpGetFloati_vEXT C.GPGETFLOATI_VEXT
  gpGetFloatv C.GPGETFLOATV
  gpGetFogFuncSGIS C.GPGETFOGFUNCSGIS
  gpGetFragDataIndex C.GPGETFRAGDATAINDEX
  gpGetFragDataLocation C.GPGETFRAGDATALOCATION
  gpGetFragDataLocationEXT C.GPGETFRAGDATALOCATIONEXT
  gpGetFragmentLightfvSGIX C.GPGETFRAGMENTLIGHTFVSGIX
  gpGetFragmentLightivSGIX C.GPGETFRAGMENTLIGHTIVSGIX
  gpGetFragmentMaterialfvSGIX C.GPGETFRAGMENTMATERIALFVSGIX
  gpGetFragmentMaterialivSGIX C.GPGETFRAGMENTMATERIALIVSGIX
  gpGetFramebufferAttachmentParameteriv C.GPGETFRAMEBUFFERATTACHMENTPARAMETERIV
  gpGetFramebufferAttachmentParameterivEXT C.GPGETFRAMEBUFFERATTACHMENTPARAMETERIVEXT
  gpGetFramebufferParameteriv C.GPGETFRAMEBUFFERPARAMETERIV
  gpGetFramebufferParameterivEXT C.GPGETFRAMEBUFFERPARAMETERIVEXT
  gpGetGraphicsResetStatusARB C.GPGETGRAPHICSRESETSTATUSARB
  gpGetHandleARB C.GPGETHANDLEARB
  gpGetHistogramEXT C.GPGETHISTOGRAMEXT
  gpGetHistogramParameterfvEXT C.GPGETHISTOGRAMPARAMETERFVEXT
  gpGetHistogramParameterivEXT C.GPGETHISTOGRAMPARAMETERIVEXT
  gpGetHistogramParameterxvOES C.GPGETHISTOGRAMPARAMETERXVOES
  gpGetImageHandleARB C.GPGETIMAGEHANDLEARB
  gpGetImageHandleNV C.GPGETIMAGEHANDLENV
  gpGetImageTransformParameterfvHP C.GPGETIMAGETRANSFORMPARAMETERFVHP
  gpGetImageTransformParameterivHP C.GPGETIMAGETRANSFORMPARAMETERIVHP
  gpGetInfoLogARB C.GPGETINFOLOGARB
  gpGetInstrumentsSGIX C.GPGETINSTRUMENTSSGIX
  gpGetInteger64i_v C.GPGETINTEGER64I_V
  gpGetInteger64v C.GPGETINTEGER64V
  gpGetIntegerIndexedvEXT C.GPGETINTEGERINDEXEDVEXT
  gpGetIntegeri_v C.GPGETINTEGERI_V
  gpGetIntegerui64i_vNV C.GPGETINTEGERUI64I_VNV
  gpGetIntegerui64vNV C.GPGETINTEGERUI64VNV
  gpGetIntegerv C.GPGETINTEGERV
  gpGetInternalformati64v C.GPGETINTERNALFORMATI64V
  gpGetInternalformativ C.GPGETINTERNALFORMATIV
  gpGetInvariantBooleanvEXT C.GPGETINVARIANTBOOLEANVEXT
  gpGetInvariantFloatvEXT C.GPGETINVARIANTFLOATVEXT
  gpGetInvariantIntegervEXT C.GPGETINVARIANTINTEGERVEXT
  gpGetLightxOES C.GPGETLIGHTXOES
  gpGetLightxvOES C.GPGETLIGHTXVOES
  gpGetListParameterfvSGIX C.GPGETLISTPARAMETERFVSGIX
  gpGetListParameterivSGIX C.GPGETLISTPARAMETERIVSGIX
  gpGetLocalConstantBooleanvEXT C.GPGETLOCALCONSTANTBOOLEANVEXT
  gpGetLocalConstantFloatvEXT C.GPGETLOCALCONSTANTFLOATVEXT
  gpGetLocalConstantIntegervEXT C.GPGETLOCALCONSTANTINTEGERVEXT
  gpGetMapAttribParameterfvNV C.GPGETMAPATTRIBPARAMETERFVNV
  gpGetMapAttribParameterivNV C.GPGETMAPATTRIBPARAMETERIVNV
  gpGetMapControlPointsNV C.GPGETMAPCONTROLPOINTSNV
  gpGetMapParameterfvNV C.GPGETMAPPARAMETERFVNV
  gpGetMapParameterivNV C.GPGETMAPPARAMETERIVNV
  gpGetMapxvOES C.GPGETMAPXVOES
  gpGetMaterialxOES C.GPGETMATERIALXOES
  gpGetMaterialxvOES C.GPGETMATERIALXVOES
  gpGetMinmaxEXT C.GPGETMINMAXEXT
  gpGetMinmaxParameterfvEXT C.GPGETMINMAXPARAMETERFVEXT
  gpGetMinmaxParameterivEXT C.GPGETMINMAXPARAMETERIVEXT
  gpGetMultiTexEnvfvEXT C.GPGETMULTITEXENVFVEXT
  gpGetMultiTexEnvivEXT C.GPGETMULTITEXENVIVEXT
  gpGetMultiTexGendvEXT C.GPGETMULTITEXGENDVEXT
  gpGetMultiTexGenfvEXT C.GPGETMULTITEXGENFVEXT
  gpGetMultiTexGenivEXT C.GPGETMULTITEXGENIVEXT
  gpGetMultiTexImageEXT C.GPGETMULTITEXIMAGEEXT
  gpGetMultiTexLevelParameterfvEXT C.GPGETMULTITEXLEVELPARAMETERFVEXT
  gpGetMultiTexLevelParameterivEXT C.GPGETMULTITEXLEVELPARAMETERIVEXT
  gpGetMultiTexParameterIivEXT C.GPGETMULTITEXPARAMETERIIVEXT
  gpGetMultiTexParameterIuivEXT C.GPGETMULTITEXPARAMETERIUIVEXT
  gpGetMultiTexParameterfvEXT C.GPGETMULTITEXPARAMETERFVEXT
  gpGetMultiTexParameterivEXT C.GPGETMULTITEXPARAMETERIVEXT
  gpGetMultisamplefv C.GPGETMULTISAMPLEFV
  gpGetMultisamplefvNV C.GPGETMULTISAMPLEFVNV
  gpGetNamedBufferParameterivEXT C.GPGETNAMEDBUFFERPARAMETERIVEXT
  gpGetNamedBufferParameterui64vNV C.GPGETNAMEDBUFFERPARAMETERUI64VNV
  gpGetNamedBufferPointervEXT C.GPGETNAMEDBUFFERPOINTERVEXT
  gpGetNamedBufferSubDataEXT C.GPGETNAMEDBUFFERSUBDATAEXT
  gpGetNamedFramebufferAttachmentParameterivEXT C.GPGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXT
  gpGetNamedFramebufferParameterivEXT C.GPGETNAMEDFRAMEBUFFERPARAMETERIVEXT
  gpGetNamedProgramLocalParameterIivEXT C.GPGETNAMEDPROGRAMLOCALPARAMETERIIVEXT
  gpGetNamedProgramLocalParameterIuivEXT C.GPGETNAMEDPROGRAMLOCALPARAMETERIUIVEXT
  gpGetNamedProgramLocalParameterdvEXT C.GPGETNAMEDPROGRAMLOCALPARAMETERDVEXT
  gpGetNamedProgramLocalParameterfvEXT C.GPGETNAMEDPROGRAMLOCALPARAMETERFVEXT
  gpGetNamedProgramStringEXT C.GPGETNAMEDPROGRAMSTRINGEXT
  gpGetNamedProgramivEXT C.GPGETNAMEDPROGRAMIVEXT
  gpGetNamedRenderbufferParameterivEXT C.GPGETNAMEDRENDERBUFFERPARAMETERIVEXT
  gpGetNamedStringARB C.GPGETNAMEDSTRINGARB
  gpGetNamedStringivARB C.GPGETNAMEDSTRINGIVARB
  gpGetNextPerfQueryIdINTEL C.GPGETNEXTPERFQUERYIDINTEL
  gpGetObjectBufferfvATI C.GPGETOBJECTBUFFERFVATI
  gpGetObjectBufferivATI C.GPGETOBJECTBUFFERIVATI
  gpGetObjectLabel C.GPGETOBJECTLABEL
  gpGetObjectLabelEXT C.GPGETOBJECTLABELEXT
  gpGetObjectLabelKHR C.GPGETOBJECTLABELKHR
  gpGetObjectParameterfvARB C.GPGETOBJECTPARAMETERFVARB
  gpGetObjectParameterivAPPLE C.GPGETOBJECTPARAMETERIVAPPLE
  gpGetObjectParameterivARB C.GPGETOBJECTPARAMETERIVARB
  gpGetObjectPtrLabel C.GPGETOBJECTPTRLABEL
  gpGetObjectPtrLabelKHR C.GPGETOBJECTPTRLABELKHR
  gpGetOcclusionQueryivNV C.GPGETOCCLUSIONQUERYIVNV
  gpGetOcclusionQueryuivNV C.GPGETOCCLUSIONQUERYUIVNV
  gpGetPathColorGenfvNV C.GPGETPATHCOLORGENFVNV
  gpGetPathColorGenivNV C.GPGETPATHCOLORGENIVNV
  gpGetPathCommandsNV C.GPGETPATHCOMMANDSNV
  gpGetPathCoordsNV C.GPGETPATHCOORDSNV
  gpGetPathDashArrayNV C.GPGETPATHDASHARRAYNV
  gpGetPathLengthNV C.GPGETPATHLENGTHNV
  gpGetPathMetricRangeNV C.GPGETPATHMETRICRANGENV
  gpGetPathMetricsNV C.GPGETPATHMETRICSNV
  gpGetPathParameterfvNV C.GPGETPATHPARAMETERFVNV
  gpGetPathParameterivNV C.GPGETPATHPARAMETERIVNV
  gpGetPathSpacingNV C.GPGETPATHSPACINGNV
  gpGetPathTexGenfvNV C.GPGETPATHTEXGENFVNV
  gpGetPathTexGenivNV C.GPGETPATHTEXGENIVNV
  gpGetPerfCounterInfoINTEL C.GPGETPERFCOUNTERINFOINTEL
  gpGetPerfMonitorCounterDataAMD C.GPGETPERFMONITORCOUNTERDATAAMD
  gpGetPerfMonitorCounterInfoAMD C.GPGETPERFMONITORCOUNTERINFOAMD
  gpGetPerfMonitorCounterStringAMD C.GPGETPERFMONITORCOUNTERSTRINGAMD
  gpGetPerfMonitorCountersAMD C.GPGETPERFMONITORCOUNTERSAMD
  gpGetPerfMonitorGroupStringAMD C.GPGETPERFMONITORGROUPSTRINGAMD
  gpGetPerfMonitorGroupsAMD C.GPGETPERFMONITORGROUPSAMD
  gpGetPerfQueryDataINTEL C.GPGETPERFQUERYDATAINTEL
  gpGetPerfQueryIdByNameINTEL C.GPGETPERFQUERYIDBYNAMEINTEL
  gpGetPerfQueryInfoINTEL C.GPGETPERFQUERYINFOINTEL
  gpGetPixelMapxv C.GPGETPIXELMAPXV
  gpGetPixelTexGenParameterfvSGIS C.GPGETPIXELTEXGENPARAMETERFVSGIS
  gpGetPixelTexGenParameterivSGIS C.GPGETPIXELTEXGENPARAMETERIVSGIS
  gpGetPixelTransformParameterfvEXT C.GPGETPIXELTRANSFORMPARAMETERFVEXT
  gpGetPixelTransformParameterivEXT C.GPGETPIXELTRANSFORMPARAMETERIVEXT
  gpGetPointerIndexedvEXT C.GPGETPOINTERINDEXEDVEXT
  gpGetPointeri_vEXT C.GPGETPOINTERI_VEXT
  gpGetPointerv C.GPGETPOINTERV
  gpGetPointervEXT C.GPGETPOINTERVEXT
  gpGetPointervKHR C.GPGETPOINTERVKHR
  gpGetProgramBinary C.GPGETPROGRAMBINARY
  gpGetProgramEnvParameterIivNV C.GPGETPROGRAMENVPARAMETERIIVNV
  gpGetProgramEnvParameterIuivNV C.GPGETPROGRAMENVPARAMETERIUIVNV
  gpGetProgramEnvParameterdvARB C.GPGETPROGRAMENVPARAMETERDVARB
  gpGetProgramEnvParameterfvARB C.GPGETPROGRAMENVPARAMETERFVARB
  gpGetProgramInfoLog C.GPGETPROGRAMINFOLOG
  gpGetProgramInterfaceiv C.GPGETPROGRAMINTERFACEIV
  gpGetProgramLocalParameterIivNV C.GPGETPROGRAMLOCALPARAMETERIIVNV
  gpGetProgramLocalParameterIuivNV C.GPGETPROGRAMLOCALPARAMETERIUIVNV
  gpGetProgramLocalParameterdvARB C.GPGETPROGRAMLOCALPARAMETERDVARB
  gpGetProgramLocalParameterfvARB C.GPGETPROGRAMLOCALPARAMETERFVARB
  gpGetProgramNamedParameterdvNV C.GPGETPROGRAMNAMEDPARAMETERDVNV
  gpGetProgramNamedParameterfvNV C.GPGETPROGRAMNAMEDPARAMETERFVNV
  gpGetProgramParameterdvNV C.GPGETPROGRAMPARAMETERDVNV
  gpGetProgramParameterfvNV C.GPGETPROGRAMPARAMETERFVNV
  gpGetProgramPipelineInfoLog C.GPGETPROGRAMPIPELINEINFOLOG
  gpGetProgramPipelineInfoLogEXT C.GPGETPROGRAMPIPELINEINFOLOGEXT
  gpGetProgramPipelineiv C.GPGETPROGRAMPIPELINEIV
  gpGetProgramPipelineivEXT C.GPGETPROGRAMPIPELINEIVEXT
  gpGetProgramResourceIndex C.GPGETPROGRAMRESOURCEINDEX
  gpGetProgramResourceLocation C.GPGETPROGRAMRESOURCELOCATION
  gpGetProgramResourceLocationIndex C.GPGETPROGRAMRESOURCELOCATIONINDEX
  gpGetProgramResourceName C.GPGETPROGRAMRESOURCENAME
  gpGetProgramResourceiv C.GPGETPROGRAMRESOURCEIV
  gpGetProgramStageiv C.GPGETPROGRAMSTAGEIV
  gpGetProgramStringARB C.GPGETPROGRAMSTRINGARB
  gpGetProgramStringNV C.GPGETPROGRAMSTRINGNV
  gpGetProgramSubroutineParameteruivNV C.GPGETPROGRAMSUBROUTINEPARAMETERUIVNV
  gpGetProgramiv C.GPGETPROGRAMIV
  gpGetProgramivARB C.GPGETPROGRAMIVARB
  gpGetProgramivNV C.GPGETPROGRAMIVNV
  gpGetQueryIndexediv C.GPGETQUERYINDEXEDIV
  gpGetQueryObjecti64v C.GPGETQUERYOBJECTI64V
  gpGetQueryObjecti64vEXT C.GPGETQUERYOBJECTI64VEXT
  gpGetQueryObjectiv C.GPGETQUERYOBJECTIV
  gpGetQueryObjectivARB C.GPGETQUERYOBJECTIVARB
  gpGetQueryObjectui64v C.GPGETQUERYOBJECTUI64V
  gpGetQueryObjectui64vEXT C.GPGETQUERYOBJECTUI64VEXT
  gpGetQueryObjectuiv C.GPGETQUERYOBJECTUIV
  gpGetQueryObjectuivARB C.GPGETQUERYOBJECTUIVARB
  gpGetQueryiv C.GPGETQUERYIV
  gpGetQueryivARB C.GPGETQUERYIVARB
  gpGetRenderbufferParameteriv C.GPGETRENDERBUFFERPARAMETERIV
  gpGetRenderbufferParameterivEXT C.GPGETRENDERBUFFERPARAMETERIVEXT
  gpGetSamplerParameterIiv C.GPGETSAMPLERPARAMETERIIV
  gpGetSamplerParameterIuiv C.GPGETSAMPLERPARAMETERIUIV
  gpGetSamplerParameterfv C.GPGETSAMPLERPARAMETERFV
  gpGetSamplerParameteriv C.GPGETSAMPLERPARAMETERIV
  gpGetSeparableFilterEXT C.GPGETSEPARABLEFILTEREXT
  gpGetShaderInfoLog C.GPGETSHADERINFOLOG
  gpGetShaderPrecisionFormat C.GPGETSHADERPRECISIONFORMAT
  gpGetShaderSource C.GPGETSHADERSOURCE
  gpGetShaderSourceARB C.GPGETSHADERSOURCEARB
  gpGetShaderiv C.GPGETSHADERIV
  gpGetSharpenTexFuncSGIS C.GPGETSHARPENTEXFUNCSGIS
  gpGetString C.GPGETSTRING
  gpGetStringi C.GPGETSTRINGI
  gpGetSubroutineIndex C.GPGETSUBROUTINEINDEX
  gpGetSubroutineUniformLocation C.GPGETSUBROUTINEUNIFORMLOCATION
  gpGetSynciv C.GPGETSYNCIV
  gpGetTexBumpParameterfvATI C.GPGETTEXBUMPPARAMETERFVATI
  gpGetTexBumpParameterivATI C.GPGETTEXBUMPPARAMETERIVATI
  gpGetTexEnvxvOES C.GPGETTEXENVXVOES
  gpGetTexFilterFuncSGIS C.GPGETTEXFILTERFUNCSGIS
  gpGetTexGenxvOES C.GPGETTEXGENXVOES
  gpGetTexImage C.GPGETTEXIMAGE
  gpGetTexLevelParameterfv C.GPGETTEXLEVELPARAMETERFV
  gpGetTexLevelParameteriv C.GPGETTEXLEVELPARAMETERIV
  gpGetTexLevelParameterxvOES C.GPGETTEXLEVELPARAMETERXVOES
  gpGetTexParameterIiv C.GPGETTEXPARAMETERIIV
  gpGetTexParameterIivEXT C.GPGETTEXPARAMETERIIVEXT
  gpGetTexParameterIuiv C.GPGETTEXPARAMETERIUIV
  gpGetTexParameterIuivEXT C.GPGETTEXPARAMETERIUIVEXT
  gpGetTexParameterPointervAPPLE C.GPGETTEXPARAMETERPOINTERVAPPLE
  gpGetTexParameterfv C.GPGETTEXPARAMETERFV
  gpGetTexParameteriv C.GPGETTEXPARAMETERIV
  gpGetTexParameterxvOES C.GPGETTEXPARAMETERXVOES
  gpGetTextureHandleARB C.GPGETTEXTUREHANDLEARB
  gpGetTextureHandleNV C.GPGETTEXTUREHANDLENV
  gpGetTextureImageEXT C.GPGETTEXTUREIMAGEEXT
  gpGetTextureLevelParameterfvEXT C.GPGETTEXTURELEVELPARAMETERFVEXT
  gpGetTextureLevelParameterivEXT C.GPGETTEXTURELEVELPARAMETERIVEXT
  gpGetTextureParameterIivEXT C.GPGETTEXTUREPARAMETERIIVEXT
  gpGetTextureParameterIuivEXT C.GPGETTEXTUREPARAMETERIUIVEXT
  gpGetTextureParameterfvEXT C.GPGETTEXTUREPARAMETERFVEXT
  gpGetTextureParameterivEXT C.GPGETTEXTUREPARAMETERIVEXT
  gpGetTextureSamplerHandleARB C.GPGETTEXTURESAMPLERHANDLEARB
  gpGetTextureSamplerHandleNV C.GPGETTEXTURESAMPLERHANDLENV
  gpGetTrackMatrixivNV C.GPGETTRACKMATRIXIVNV
  gpGetTransformFeedbackVarying C.GPGETTRANSFORMFEEDBACKVARYING
  gpGetTransformFeedbackVaryingEXT C.GPGETTRANSFORMFEEDBACKVARYINGEXT
  gpGetTransformFeedbackVaryingNV C.GPGETTRANSFORMFEEDBACKVARYINGNV
  gpGetUniformBlockIndex C.GPGETUNIFORMBLOCKINDEX
  gpGetUniformBufferSizeEXT C.GPGETUNIFORMBUFFERSIZEEXT
  gpGetUniformIndices C.GPGETUNIFORMINDICES
  gpGetUniformLocation C.GPGETUNIFORMLOCATION
  gpGetUniformLocationARB C.GPGETUNIFORMLOCATIONARB
  gpGetUniformOffsetEXT C.GPGETUNIFORMOFFSETEXT
  gpGetUniformSubroutineuiv C.GPGETUNIFORMSUBROUTINEUIV
  gpGetUniformdv C.GPGETUNIFORMDV
  gpGetUniformfv C.GPGETUNIFORMFV
  gpGetUniformfvARB C.GPGETUNIFORMFVARB
  gpGetUniformi64vNV C.GPGETUNIFORMI64VNV
  gpGetUniformiv C.GPGETUNIFORMIV
  gpGetUniformivARB C.GPGETUNIFORMIVARB
  gpGetUniformui64vNV C.GPGETUNIFORMUI64VNV
  gpGetUniformuiv C.GPGETUNIFORMUIV
  gpGetUniformuivEXT C.GPGETUNIFORMUIVEXT
  gpGetVariantArrayObjectfvATI C.GPGETVARIANTARRAYOBJECTFVATI
  gpGetVariantArrayObjectivATI C.GPGETVARIANTARRAYOBJECTIVATI
  gpGetVariantBooleanvEXT C.GPGETVARIANTBOOLEANVEXT
  gpGetVariantFloatvEXT C.GPGETVARIANTFLOATVEXT
  gpGetVariantIntegervEXT C.GPGETVARIANTINTEGERVEXT
  gpGetVariantPointervEXT C.GPGETVARIANTPOINTERVEXT
  gpGetVaryingLocationNV C.GPGETVARYINGLOCATIONNV
  gpGetVertexArrayIntegeri_vEXT C.GPGETVERTEXARRAYINTEGERI_VEXT
  gpGetVertexArrayIntegervEXT C.GPGETVERTEXARRAYINTEGERVEXT
  gpGetVertexArrayPointeri_vEXT C.GPGETVERTEXARRAYPOINTERI_VEXT
  gpGetVertexArrayPointervEXT C.GPGETVERTEXARRAYPOINTERVEXT
  gpGetVertexAttribArrayObjectfvATI C.GPGETVERTEXATTRIBARRAYOBJECTFVATI
  gpGetVertexAttribArrayObjectivATI C.GPGETVERTEXATTRIBARRAYOBJECTIVATI
  gpGetVertexAttribIiv C.GPGETVERTEXATTRIBIIV
  gpGetVertexAttribIivEXT C.GPGETVERTEXATTRIBIIVEXT
  gpGetVertexAttribIuiv C.GPGETVERTEXATTRIBIUIV
  gpGetVertexAttribIuivEXT C.GPGETVERTEXATTRIBIUIVEXT
  gpGetVertexAttribLdv C.GPGETVERTEXATTRIBLDV
  gpGetVertexAttribLdvEXT C.GPGETVERTEXATTRIBLDVEXT
  gpGetVertexAttribLi64vNV C.GPGETVERTEXATTRIBLI64VNV
  gpGetVertexAttribLui64vARB C.GPGETVERTEXATTRIBLUI64VARB
  gpGetVertexAttribLui64vNV C.GPGETVERTEXATTRIBLUI64VNV
  gpGetVertexAttribPointerv C.GPGETVERTEXATTRIBPOINTERV
  gpGetVertexAttribPointervARB C.GPGETVERTEXATTRIBPOINTERVARB
  gpGetVertexAttribPointervNV C.GPGETVERTEXATTRIBPOINTERVNV
  gpGetVertexAttribdv C.GPGETVERTEXATTRIBDV
  gpGetVertexAttribdvARB C.GPGETVERTEXATTRIBDVARB
  gpGetVertexAttribdvNV C.GPGETVERTEXATTRIBDVNV
  gpGetVertexAttribfv C.GPGETVERTEXATTRIBFV
  gpGetVertexAttribfvARB C.GPGETVERTEXATTRIBFVARB
  gpGetVertexAttribfvNV C.GPGETVERTEXATTRIBFVNV
  gpGetVertexAttribiv C.GPGETVERTEXATTRIBIV
  gpGetVertexAttribivARB C.GPGETVERTEXATTRIBIVARB
  gpGetVertexAttribivNV C.GPGETVERTEXATTRIBIVNV
  gpGetVideoCaptureStreamdvNV C.GPGETVIDEOCAPTURESTREAMDVNV
  gpGetVideoCaptureStreamfvNV C.GPGETVIDEOCAPTURESTREAMFVNV
  gpGetVideoCaptureStreamivNV C.GPGETVIDEOCAPTURESTREAMIVNV
  gpGetVideoCaptureivNV C.GPGETVIDEOCAPTUREIVNV
  gpGetVideoi64vNV C.GPGETVIDEOI64VNV
  gpGetVideoivNV C.GPGETVIDEOIVNV
  gpGetVideoui64vNV C.GPGETVIDEOUI64VNV
  gpGetVideouivNV C.GPGETVIDEOUIVNV
  gpGetnCompressedTexImageARB C.GPGETNCOMPRESSEDTEXIMAGEARB
  gpGetnTexImageARB C.GPGETNTEXIMAGEARB
  gpGetnUniformdvARB C.GPGETNUNIFORMDVARB
  gpGetnUniformfvARB C.GPGETNUNIFORMFVARB
  gpGetnUniformivARB C.GPGETNUNIFORMIVARB
  gpGetnUniformuivARB C.GPGETNUNIFORMUIVARB
  gpGlobalAlphaFactorbSUN C.GPGLOBALALPHAFACTORBSUN
  gpGlobalAlphaFactordSUN C.GPGLOBALALPHAFACTORDSUN
  gpGlobalAlphaFactorfSUN C.GPGLOBALALPHAFACTORFSUN
  gpGlobalAlphaFactoriSUN C.GPGLOBALALPHAFACTORISUN
  gpGlobalAlphaFactorsSUN C.GPGLOBALALPHAFACTORSSUN
  gpGlobalAlphaFactorubSUN C.GPGLOBALALPHAFACTORUBSUN
  gpGlobalAlphaFactoruiSUN C.GPGLOBALALPHAFACTORUISUN
  gpGlobalAlphaFactorusSUN C.GPGLOBALALPHAFACTORUSSUN
  gpHint C.GPHINT
  gpHintPGI C.GPHINTPGI
  gpHistogramEXT C.GPHISTOGRAMEXT
  gpIglooInterfaceSGIX C.GPIGLOOINTERFACESGIX
  gpImageTransformParameterfHP C.GPIMAGETRANSFORMPARAMETERFHP
  gpImageTransformParameterfvHP C.GPIMAGETRANSFORMPARAMETERFVHP
  gpImageTransformParameteriHP C.GPIMAGETRANSFORMPARAMETERIHP
  gpImageTransformParameterivHP C.GPIMAGETRANSFORMPARAMETERIVHP
  gpImportSyncEXT C.GPIMPORTSYNCEXT
  gpIndexFormatNV C.GPINDEXFORMATNV
  gpIndexFuncEXT C.GPINDEXFUNCEXT
  gpIndexMaterialEXT C.GPINDEXMATERIALEXT
  gpIndexPointerEXT C.GPINDEXPOINTEREXT
  gpIndexPointerListIBM C.GPINDEXPOINTERLISTIBM
  gpIndexxOES C.GPINDEXXOES
  gpIndexxvOES C.GPINDEXXVOES
  gpInsertComponentEXT C.GPINSERTCOMPONENTEXT
  gpInsertEventMarkerEXT C.GPINSERTEVENTMARKEREXT
  gpInstrumentsBufferSGIX C.GPINSTRUMENTSBUFFERSGIX
  gpInterpolatePathsNV C.GPINTERPOLATEPATHSNV
  gpInvalidateBufferData C.GPINVALIDATEBUFFERDATA
  gpInvalidateBufferSubData C.GPINVALIDATEBUFFERSUBDATA
  gpInvalidateFramebuffer C.GPINVALIDATEFRAMEBUFFER
  gpInvalidateSubFramebuffer C.GPINVALIDATESUBFRAMEBUFFER
  gpInvalidateTexImage C.GPINVALIDATETEXIMAGE
  gpInvalidateTexSubImage C.GPINVALIDATETEXSUBIMAGE
  gpIsAsyncMarkerSGIX C.GPISASYNCMARKERSGIX
  gpIsBuffer C.GPISBUFFER
  gpIsBufferARB C.GPISBUFFERARB
  gpIsBufferResidentNV C.GPISBUFFERRESIDENTNV
  gpIsEnabled C.GPISENABLED
  gpIsEnabledIndexedEXT C.GPISENABLEDINDEXEDEXT
  gpIsEnabledi C.GPISENABLEDI
  gpIsFenceAPPLE C.GPISFENCEAPPLE
  gpIsFenceNV C.GPISFENCENV
  gpIsFramebuffer C.GPISFRAMEBUFFER
  gpIsFramebufferEXT C.GPISFRAMEBUFFEREXT
  gpIsImageHandleResidentARB C.GPISIMAGEHANDLERESIDENTARB
  gpIsImageHandleResidentNV C.GPISIMAGEHANDLERESIDENTNV
  gpIsNameAMD C.GPISNAMEAMD
  gpIsNamedBufferResidentNV C.GPISNAMEDBUFFERRESIDENTNV
  gpIsNamedStringARB C.GPISNAMEDSTRINGARB
  gpIsObjectBufferATI C.GPISOBJECTBUFFERATI
  gpIsOcclusionQueryNV C.GPISOCCLUSIONQUERYNV
  gpIsPathNV C.GPISPATHNV
  gpIsPointInFillPathNV C.GPISPOINTINFILLPATHNV
  gpIsPointInStrokePathNV C.GPISPOINTINSTROKEPATHNV
  gpIsProgram C.GPISPROGRAM
  gpIsProgramARB C.GPISPROGRAMARB
  gpIsProgramNV C.GPISPROGRAMNV
  gpIsProgramPipeline C.GPISPROGRAMPIPELINE
  gpIsProgramPipelineEXT C.GPISPROGRAMPIPELINEEXT
  gpIsQuery C.GPISQUERY
  gpIsQueryARB C.GPISQUERYARB
  gpIsRenderbuffer C.GPISRENDERBUFFER
  gpIsRenderbufferEXT C.GPISRENDERBUFFEREXT
  gpIsSampler C.GPISSAMPLER
  gpIsShader C.GPISSHADER
  gpIsSync C.GPISSYNC
  gpIsTexture C.GPISTEXTURE
  gpIsTextureEXT C.GPISTEXTUREEXT
  gpIsTextureHandleResidentARB C.GPISTEXTUREHANDLERESIDENTARB
  gpIsTextureHandleResidentNV C.GPISTEXTUREHANDLERESIDENTNV
  gpIsTransformFeedback C.GPISTRANSFORMFEEDBACK
  gpIsTransformFeedbackNV C.GPISTRANSFORMFEEDBACKNV
  gpIsVariantEnabledEXT C.GPISVARIANTENABLEDEXT
  gpIsVertexArray C.GPISVERTEXARRAY
  gpIsVertexArrayAPPLE C.GPISVERTEXARRAYAPPLE
  gpIsVertexAttribEnabledAPPLE C.GPISVERTEXATTRIBENABLEDAPPLE
  gpLabelObjectEXT C.GPLABELOBJECTEXT
  gpLightEnviSGIX C.GPLIGHTENVISGIX
  gpLightModelxOES C.GPLIGHTMODELXOES
  gpLightModelxvOES C.GPLIGHTMODELXVOES
  gpLightxOES C.GPLIGHTXOES
  gpLightxvOES C.GPLIGHTXVOES
  gpLineWidth C.GPLINEWIDTH
  gpLineWidthxOES C.GPLINEWIDTHXOES
  gpLinkProgram C.GPLINKPROGRAM
  gpLinkProgramARB C.GPLINKPROGRAMARB
  gpListParameterfSGIX C.GPLISTPARAMETERFSGIX
  gpListParameterfvSGIX C.GPLISTPARAMETERFVSGIX
  gpListParameteriSGIX C.GPLISTPARAMETERISGIX
  gpListParameterivSGIX C.GPLISTPARAMETERIVSGIX
  gpLoadIdentityDeformationMapSGIX C.GPLOADIDENTITYDEFORMATIONMAPSGIX
  gpLoadMatrixxOES C.GPLOADMATRIXXOES
  gpLoadProgramNV C.GPLOADPROGRAMNV
  gpLoadTransposeMatrixdARB C.GPLOADTRANSPOSEMATRIXDARB
  gpLoadTransposeMatrixfARB C.GPLOADTRANSPOSEMATRIXFARB
  gpLoadTransposeMatrixxOES C.GPLOADTRANSPOSEMATRIXXOES
  gpLockArraysEXT C.GPLOCKARRAYSEXT
  gpLogicOp C.GPLOGICOP
  gpMakeBufferNonResidentNV C.GPMAKEBUFFERNONRESIDENTNV
  gpMakeBufferResidentNV C.GPMAKEBUFFERRESIDENTNV
  gpMakeImageHandleNonResidentARB C.GPMAKEIMAGEHANDLENONRESIDENTARB
  gpMakeImageHandleNonResidentNV C.GPMAKEIMAGEHANDLENONRESIDENTNV
  gpMakeImageHandleResidentARB C.GPMAKEIMAGEHANDLERESIDENTARB
  gpMakeImageHandleResidentNV C.GPMAKEIMAGEHANDLERESIDENTNV
  gpMakeNamedBufferNonResidentNV C.GPMAKENAMEDBUFFERNONRESIDENTNV
  gpMakeNamedBufferResidentNV C.GPMAKENAMEDBUFFERRESIDENTNV
  gpMakeTextureHandleNonResidentARB C.GPMAKETEXTUREHANDLENONRESIDENTARB
  gpMakeTextureHandleNonResidentNV C.GPMAKETEXTUREHANDLENONRESIDENTNV
  gpMakeTextureHandleResidentARB C.GPMAKETEXTUREHANDLERESIDENTARB
  gpMakeTextureHandleResidentNV C.GPMAKETEXTUREHANDLERESIDENTNV
  gpMap1xOES C.GPMAP1XOES
  gpMap2xOES C.GPMAP2XOES
  gpMapBuffer C.GPMAPBUFFER
  gpMapBufferARB C.GPMAPBUFFERARB
  gpMapBufferRange C.GPMAPBUFFERRANGE
  gpMapControlPointsNV C.GPMAPCONTROLPOINTSNV
  gpMapGrid1xOES C.GPMAPGRID1XOES
  gpMapGrid2xOES C.GPMAPGRID2XOES
  gpMapNamedBufferEXT C.GPMAPNAMEDBUFFEREXT
  gpMapNamedBufferRangeEXT C.GPMAPNAMEDBUFFERRANGEEXT
  gpMapObjectBufferATI C.GPMAPOBJECTBUFFERATI
  gpMapParameterfvNV C.GPMAPPARAMETERFVNV
  gpMapParameterivNV C.GPMAPPARAMETERIVNV
  gpMapTexture2DINTEL C.GPMAPTEXTURE2DINTEL
  gpMapVertexAttrib1dAPPLE C.GPMAPVERTEXATTRIB1DAPPLE
  gpMapVertexAttrib1fAPPLE C.GPMAPVERTEXATTRIB1FAPPLE
  gpMapVertexAttrib2dAPPLE C.GPMAPVERTEXATTRIB2DAPPLE
  gpMapVertexAttrib2fAPPLE C.GPMAPVERTEXATTRIB2FAPPLE
  gpMaterialxOES C.GPMATERIALXOES
  gpMaterialxvOES C.GPMATERIALXVOES
  gpMatrixFrustumEXT C.GPMATRIXFRUSTUMEXT
  gpMatrixIndexPointerARB C.GPMATRIXINDEXPOINTERARB
  gpMatrixIndexubvARB C.GPMATRIXINDEXUBVARB
  gpMatrixIndexuivARB C.GPMATRIXINDEXUIVARB
  gpMatrixIndexusvARB C.GPMATRIXINDEXUSVARB
  gpMatrixLoadIdentityEXT C.GPMATRIXLOADIDENTITYEXT
  gpMatrixLoadTransposedEXT C.GPMATRIXLOADTRANSPOSEDEXT
  gpMatrixLoadTransposefEXT C.GPMATRIXLOADTRANSPOSEFEXT
  gpMatrixLoaddEXT C.GPMATRIXLOADDEXT
  gpMatrixLoadfEXT C.GPMATRIXLOADFEXT
  gpMatrixMultTransposedEXT C.GPMATRIXMULTTRANSPOSEDEXT
  gpMatrixMultTransposefEXT C.GPMATRIXMULTTRANSPOSEFEXT
  gpMatrixMultdEXT C.GPMATRIXMULTDEXT
  gpMatrixMultfEXT C.GPMATRIXMULTFEXT
  gpMatrixOrthoEXT C.GPMATRIXORTHOEXT
  gpMatrixPopEXT C.GPMATRIXPOPEXT
  gpMatrixPushEXT C.GPMATRIXPUSHEXT
  gpMatrixRotatedEXT C.GPMATRIXROTATEDEXT
  gpMatrixRotatefEXT C.GPMATRIXROTATEFEXT
  gpMatrixScaledEXT C.GPMATRIXSCALEDEXT
  gpMatrixScalefEXT C.GPMATRIXSCALEFEXT
  gpMatrixTranslatedEXT C.GPMATRIXTRANSLATEDEXT
  gpMatrixTranslatefEXT C.GPMATRIXTRANSLATEFEXT
  gpMemoryBarrier C.GPMEMORYBARRIER
  gpMemoryBarrierEXT C.GPMEMORYBARRIEREXT
  gpMinSampleShadingARB C.GPMINSAMPLESHADINGARB
  gpMinmaxEXT C.GPMINMAXEXT
  gpMultMatrixxOES C.GPMULTMATRIXXOES
  gpMultTransposeMatrixdARB C.GPMULTTRANSPOSEMATRIXDARB
  gpMultTransposeMatrixfARB C.GPMULTTRANSPOSEMATRIXFARB
  gpMultTransposeMatrixxOES C.GPMULTTRANSPOSEMATRIXXOES
  gpMultiDrawArrays C.GPMULTIDRAWARRAYS
  gpMultiDrawArraysEXT C.GPMULTIDRAWARRAYSEXT
  gpMultiDrawArraysIndirect C.GPMULTIDRAWARRAYSINDIRECT
  gpMultiDrawArraysIndirectAMD C.GPMULTIDRAWARRAYSINDIRECTAMD
  gpMultiDrawArraysIndirectBindlessNV C.GPMULTIDRAWARRAYSINDIRECTBINDLESSNV
  gpMultiDrawArraysIndirectCountARB C.GPMULTIDRAWARRAYSINDIRECTCOUNTARB
  gpMultiDrawElementArrayAPPLE C.GPMULTIDRAWELEMENTARRAYAPPLE
  gpMultiDrawElements C.GPMULTIDRAWELEMENTS
  gpMultiDrawElementsBaseVertex C.GPMULTIDRAWELEMENTSBASEVERTEX
  gpMultiDrawElementsEXT C.GPMULTIDRAWELEMENTSEXT
  gpMultiDrawElementsIndirect C.GPMULTIDRAWELEMENTSINDIRECT
  gpMultiDrawElementsIndirectAMD C.GPMULTIDRAWELEMENTSINDIRECTAMD
  gpMultiDrawElementsIndirectBindlessNV C.GPMULTIDRAWELEMENTSINDIRECTBINDLESSNV
  gpMultiDrawElementsIndirectCountARB C.GPMULTIDRAWELEMENTSINDIRECTCOUNTARB
  gpMultiDrawRangeElementArrayAPPLE C.GPMULTIDRAWRANGEELEMENTARRAYAPPLE
  gpMultiModeDrawArraysIBM C.GPMULTIMODEDRAWARRAYSIBM
  gpMultiModeDrawElementsIBM C.GPMULTIMODEDRAWELEMENTSIBM
  gpMultiTexBufferEXT C.GPMULTITEXBUFFEREXT
  gpMultiTexCoord1bOES C.GPMULTITEXCOORD1BOES
  gpMultiTexCoord1bvOES C.GPMULTITEXCOORD1BVOES
  gpMultiTexCoord1dARB C.GPMULTITEXCOORD1DARB
  gpMultiTexCoord1dvARB C.GPMULTITEXCOORD1DVARB
  gpMultiTexCoord1fARB C.GPMULTITEXCOORD1FARB
  gpMultiTexCoord1fvARB C.GPMULTITEXCOORD1FVARB
  gpMultiTexCoord1hNV C.GPMULTITEXCOORD1HNV
  gpMultiTexCoord1hvNV C.GPMULTITEXCOORD1HVNV
  gpMultiTexCoord1iARB C.GPMULTITEXCOORD1IARB
  gpMultiTexCoord1ivARB C.GPMULTITEXCOORD1IVARB
  gpMultiTexCoord1sARB C.GPMULTITEXCOORD1SARB
  gpMultiTexCoord1svARB C.GPMULTITEXCOORD1SVARB
  gpMultiTexCoord1xOES C.GPMULTITEXCOORD1XOES
  gpMultiTexCoord1xvOES C.GPMULTITEXCOORD1XVOES
  gpMultiTexCoord2bOES C.GPMULTITEXCOORD2BOES
  gpMultiTexCoord2bvOES C.GPMULTITEXCOORD2BVOES
  gpMultiTexCoord2dARB C.GPMULTITEXCOORD2DARB
  gpMultiTexCoord2dvARB C.GPMULTITEXCOORD2DVARB
  gpMultiTexCoord2fARB C.GPMULTITEXCOORD2FARB
  gpMultiTexCoord2fvARB C.GPMULTITEXCOORD2FVARB
  gpMultiTexCoord2hNV C.GPMULTITEXCOORD2HNV
  gpMultiTexCoord2hvNV C.GPMULTITEXCOORD2HVNV
  gpMultiTexCoord2iARB C.GPMULTITEXCOORD2IARB
  gpMultiTexCoord2ivARB C.GPMULTITEXCOORD2IVARB
  gpMultiTexCoord2sARB C.GPMULTITEXCOORD2SARB
  gpMultiTexCoord2svARB C.GPMULTITEXCOORD2SVARB
  gpMultiTexCoord2xOES C.GPMULTITEXCOORD2XOES
  gpMultiTexCoord2xvOES C.GPMULTITEXCOORD2XVOES
  gpMultiTexCoord3bOES C.GPMULTITEXCOORD3BOES
  gpMultiTexCoord3bvOES C.GPMULTITEXCOORD3BVOES
  gpMultiTexCoord3dARB C.GPMULTITEXCOORD3DARB
  gpMultiTexCoord3dvARB C.GPMULTITEXCOORD3DVARB
  gpMultiTexCoord3fARB C.GPMULTITEXCOORD3FARB
  gpMultiTexCoord3fvARB C.GPMULTITEXCOORD3FVARB
  gpMultiTexCoord3hNV C.GPMULTITEXCOORD3HNV
  gpMultiTexCoord3hvNV C.GPMULTITEXCOORD3HVNV
  gpMultiTexCoord3iARB C.GPMULTITEXCOORD3IARB
  gpMultiTexCoord3ivARB C.GPMULTITEXCOORD3IVARB
  gpMultiTexCoord3sARB C.GPMULTITEXCOORD3SARB
  gpMultiTexCoord3svARB C.GPMULTITEXCOORD3SVARB
  gpMultiTexCoord3xOES C.GPMULTITEXCOORD3XOES
  gpMultiTexCoord3xvOES C.GPMULTITEXCOORD3XVOES
  gpMultiTexCoord4bOES C.GPMULTITEXCOORD4BOES
  gpMultiTexCoord4bvOES C.GPMULTITEXCOORD4BVOES
  gpMultiTexCoord4dARB C.GPMULTITEXCOORD4DARB
  gpMultiTexCoord4dvARB C.GPMULTITEXCOORD4DVARB
  gpMultiTexCoord4fARB C.GPMULTITEXCOORD4FARB
  gpMultiTexCoord4fvARB C.GPMULTITEXCOORD4FVARB
  gpMultiTexCoord4hNV C.GPMULTITEXCOORD4HNV
  gpMultiTexCoord4hvNV C.GPMULTITEXCOORD4HVNV
  gpMultiTexCoord4iARB C.GPMULTITEXCOORD4IARB
  gpMultiTexCoord4ivARB C.GPMULTITEXCOORD4IVARB
  gpMultiTexCoord4sARB C.GPMULTITEXCOORD4SARB
  gpMultiTexCoord4svARB C.GPMULTITEXCOORD4SVARB
  gpMultiTexCoord4xOES C.GPMULTITEXCOORD4XOES
  gpMultiTexCoord4xvOES C.GPMULTITEXCOORD4XVOES
  gpMultiTexCoordPointerEXT C.GPMULTITEXCOORDPOINTEREXT
  gpMultiTexEnvfEXT C.GPMULTITEXENVFEXT
  gpMultiTexEnvfvEXT C.GPMULTITEXENVFVEXT
  gpMultiTexEnviEXT C.GPMULTITEXENVIEXT
  gpMultiTexEnvivEXT C.GPMULTITEXENVIVEXT
  gpMultiTexGendEXT C.GPMULTITEXGENDEXT
  gpMultiTexGendvEXT C.GPMULTITEXGENDVEXT
  gpMultiTexGenfEXT C.GPMULTITEXGENFEXT
  gpMultiTexGenfvEXT C.GPMULTITEXGENFVEXT
  gpMultiTexGeniEXT C.GPMULTITEXGENIEXT
  gpMultiTexGenivEXT C.GPMULTITEXGENIVEXT
  gpMultiTexImage1DEXT C.GPMULTITEXIMAGE1DEXT
  gpMultiTexImage2DEXT C.GPMULTITEXIMAGE2DEXT
  gpMultiTexImage3DEXT C.GPMULTITEXIMAGE3DEXT
  gpMultiTexParameterIivEXT C.GPMULTITEXPARAMETERIIVEXT
  gpMultiTexParameterIuivEXT C.GPMULTITEXPARAMETERIUIVEXT
  gpMultiTexParameterfEXT C.GPMULTITEXPARAMETERFEXT
  gpMultiTexParameterfvEXT C.GPMULTITEXPARAMETERFVEXT
  gpMultiTexParameteriEXT C.GPMULTITEXPARAMETERIEXT
  gpMultiTexParameterivEXT C.GPMULTITEXPARAMETERIVEXT
  gpMultiTexRenderbufferEXT C.GPMULTITEXRENDERBUFFEREXT
  gpMultiTexSubImage1DEXT C.GPMULTITEXSUBIMAGE1DEXT
  gpMultiTexSubImage2DEXT C.GPMULTITEXSUBIMAGE2DEXT
  gpMultiTexSubImage3DEXT C.GPMULTITEXSUBIMAGE3DEXT
  gpNamedBufferDataEXT C.GPNAMEDBUFFERDATAEXT
  gpNamedBufferStorageEXT C.GPNAMEDBUFFERSTORAGEEXT
  gpNamedBufferSubDataEXT C.GPNAMEDBUFFERSUBDATAEXT
  gpNamedCopyBufferSubDataEXT C.GPNAMEDCOPYBUFFERSUBDATAEXT
  gpNamedFramebufferParameteriEXT C.GPNAMEDFRAMEBUFFERPARAMETERIEXT
  gpNamedFramebufferRenderbufferEXT C.GPNAMEDFRAMEBUFFERRENDERBUFFEREXT
  gpNamedFramebufferTexture1DEXT C.GPNAMEDFRAMEBUFFERTEXTURE1DEXT
  gpNamedFramebufferTexture2DEXT C.GPNAMEDFRAMEBUFFERTEXTURE2DEXT
  gpNamedFramebufferTexture3DEXT C.GPNAMEDFRAMEBUFFERTEXTURE3DEXT
  gpNamedFramebufferTextureEXT C.GPNAMEDFRAMEBUFFERTEXTUREEXT
  gpNamedFramebufferTextureFaceEXT C.GPNAMEDFRAMEBUFFERTEXTUREFACEEXT
  gpNamedFramebufferTextureLayerEXT C.GPNAMEDFRAMEBUFFERTEXTURELAYEREXT
  gpNamedProgramLocalParameter4dEXT C.GPNAMEDPROGRAMLOCALPARAMETER4DEXT
  gpNamedProgramLocalParameter4dvEXT C.GPNAMEDPROGRAMLOCALPARAMETER4DVEXT
  gpNamedProgramLocalParameter4fEXT C.GPNAMEDPROGRAMLOCALPARAMETER4FEXT
  gpNamedProgramLocalParameter4fvEXT C.GPNAMEDPROGRAMLOCALPARAMETER4FVEXT
  gpNamedProgramLocalParameterI4iEXT C.GPNAMEDPROGRAMLOCALPARAMETERI4IEXT
  gpNamedProgramLocalParameterI4ivEXT C.GPNAMEDPROGRAMLOCALPARAMETERI4IVEXT
  gpNamedProgramLocalParameterI4uiEXT C.GPNAMEDPROGRAMLOCALPARAMETERI4UIEXT
  gpNamedProgramLocalParameterI4uivEXT C.GPNAMEDPROGRAMLOCALPARAMETERI4UIVEXT
  gpNamedProgramLocalParameters4fvEXT C.GPNAMEDPROGRAMLOCALPARAMETERS4FVEXT
  gpNamedProgramLocalParametersI4ivEXT C.GPNAMEDPROGRAMLOCALPARAMETERSI4IVEXT
  gpNamedProgramLocalParametersI4uivEXT C.GPNAMEDPROGRAMLOCALPARAMETERSI4UIVEXT
  gpNamedProgramStringEXT C.GPNAMEDPROGRAMSTRINGEXT
  gpNamedRenderbufferStorageEXT C.GPNAMEDRENDERBUFFERSTORAGEEXT
  gpNamedRenderbufferStorageMultisampleCoverageEXT C.GPNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXT
  gpNamedRenderbufferStorageMultisampleEXT C.GPNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXT
  gpNamedStringARB C.GPNAMEDSTRINGARB
  gpNewObjectBufferATI C.GPNEWOBJECTBUFFERATI
  gpNormal3fVertex3fSUN C.GPNORMAL3FVERTEX3FSUN
  gpNormal3fVertex3fvSUN C.GPNORMAL3FVERTEX3FVSUN
  gpNormal3hNV C.GPNORMAL3HNV
  gpNormal3hvNV C.GPNORMAL3HVNV
  gpNormal3xOES C.GPNORMAL3XOES
  gpNormal3xvOES C.GPNORMAL3XVOES
  gpNormalFormatNV C.GPNORMALFORMATNV
  gpNormalPointerEXT C.GPNORMALPOINTEREXT
  gpNormalPointerListIBM C.GPNORMALPOINTERLISTIBM
  gpNormalPointervINTEL C.GPNORMALPOINTERVINTEL
  gpNormalStream3bATI C.GPNORMALSTREAM3BATI
  gpNormalStream3bvATI C.GPNORMALSTREAM3BVATI
  gpNormalStream3dATI C.GPNORMALSTREAM3DATI
  gpNormalStream3dvATI C.GPNORMALSTREAM3DVATI
  gpNormalStream3fATI C.GPNORMALSTREAM3FATI
  gpNormalStream3fvATI C.GPNORMALSTREAM3FVATI
  gpNormalStream3iATI C.GPNORMALSTREAM3IATI
  gpNormalStream3ivATI C.GPNORMALSTREAM3IVATI
  gpNormalStream3sATI C.GPNORMALSTREAM3SATI
  gpNormalStream3svATI C.GPNORMALSTREAM3SVATI
  gpObjectLabel C.GPOBJECTLABEL
  gpObjectLabelKHR C.GPOBJECTLABELKHR
  gpObjectPtrLabel C.GPOBJECTPTRLABEL
  gpObjectPtrLabelKHR C.GPOBJECTPTRLABELKHR
  gpObjectPurgeableAPPLE C.GPOBJECTPURGEABLEAPPLE
  gpObjectUnpurgeableAPPLE C.GPOBJECTUNPURGEABLEAPPLE
  gpOrthofOES C.GPORTHOFOES
  gpOrthoxOES C.GPORTHOXOES
  gpPNTrianglesfATI C.GPPNTRIANGLESFATI
  gpPNTrianglesiATI C.GPPNTRIANGLESIATI
  gpPassTexCoordATI C.GPPASSTEXCOORDATI
  gpPassThroughxOES C.GPPASSTHROUGHXOES
  gpPatchParameterfv C.GPPATCHPARAMETERFV
  gpPatchParameteri C.GPPATCHPARAMETERI
  gpPathColorGenNV C.GPPATHCOLORGENNV
  gpPathCommandsNV C.GPPATHCOMMANDSNV
  gpPathCoordsNV C.GPPATHCOORDSNV
  gpPathCoverDepthFuncNV C.GPPATHCOVERDEPTHFUNCNV
  gpPathDashArrayNV C.GPPATHDASHARRAYNV
  gpPathFogGenNV C.GPPATHFOGGENNV
  gpPathGlyphRangeNV C.GPPATHGLYPHRANGENV
  gpPathGlyphsNV C.GPPATHGLYPHSNV
  gpPathParameterfNV C.GPPATHPARAMETERFNV
  gpPathParameterfvNV C.GPPATHPARAMETERFVNV
  gpPathParameteriNV C.GPPATHPARAMETERINV
  gpPathParameterivNV C.GPPATHPARAMETERIVNV
  gpPathStencilDepthOffsetNV C.GPPATHSTENCILDEPTHOFFSETNV
  gpPathStencilFuncNV C.GPPATHSTENCILFUNCNV
  gpPathStringNV C.GPPATHSTRINGNV
  gpPathSubCommandsNV C.GPPATHSUBCOMMANDSNV
  gpPathSubCoordsNV C.GPPATHSUBCOORDSNV
  gpPathTexGenNV C.GPPATHTEXGENNV
  gpPauseTransformFeedback C.GPPAUSETRANSFORMFEEDBACK
  gpPauseTransformFeedbackNV C.GPPAUSETRANSFORMFEEDBACKNV
  gpPixelDataRangeNV C.GPPIXELDATARANGENV
  gpPixelMapx C.GPPIXELMAPX
  gpPixelStoref C.GPPIXELSTOREF
  gpPixelStorei C.GPPIXELSTOREI
  gpPixelStorex C.GPPIXELSTOREX
  gpPixelTexGenParameterfSGIS C.GPPIXELTEXGENPARAMETERFSGIS
  gpPixelTexGenParameterfvSGIS C.GPPIXELTEXGENPARAMETERFVSGIS
  gpPixelTexGenParameteriSGIS C.GPPIXELTEXGENPARAMETERISGIS
  gpPixelTexGenParameterivSGIS C.GPPIXELTEXGENPARAMETERIVSGIS
  gpPixelTexGenSGIX C.GPPIXELTEXGENSGIX
  gpPixelTransferxOES C.GPPIXELTRANSFERXOES
  gpPixelTransformParameterfEXT C.GPPIXELTRANSFORMPARAMETERFEXT
  gpPixelTransformParameterfvEXT C.GPPIXELTRANSFORMPARAMETERFVEXT
  gpPixelTransformParameteriEXT C.GPPIXELTRANSFORMPARAMETERIEXT
  gpPixelTransformParameterivEXT C.GPPIXELTRANSFORMPARAMETERIVEXT
  gpPixelZoomxOES C.GPPIXELZOOMXOES
  gpPointAlongPathNV C.GPPOINTALONGPATHNV
  gpPointParameterf C.GPPOINTPARAMETERF
  gpPointParameterfARB C.GPPOINTPARAMETERFARB
  gpPointParameterfEXT C.GPPOINTPARAMETERFEXT
  gpPointParameterfSGIS C.GPPOINTPARAMETERFSGIS
  gpPointParameterfv C.GPPOINTPARAMETERFV
  gpPointParameterfvARB C.GPPOINTPARAMETERFVARB
  gpPointParameterfvEXT C.GPPOINTPARAMETERFVEXT
  gpPointParameterfvSGIS C.GPPOINTPARAMETERFVSGIS
  gpPointParameteri C.GPPOINTPARAMETERI
  gpPointParameteriNV C.GPPOINTPARAMETERINV
  gpPointParameteriv C.GPPOINTPARAMETERIV
  gpPointParameterivNV C.GPPOINTPARAMETERIVNV
  gpPointParameterxOES C.GPPOINTPARAMETERXOES
  gpPointParameterxvOES C.GPPOINTPARAMETERXVOES
  gpPointSize C.GPPOINTSIZE
  gpPointSizexOES C.GPPOINTSIZEXOES
  gpPollAsyncSGIX C.GPPOLLASYNCSGIX
  gpPollInstrumentsSGIX C.GPPOLLINSTRUMENTSSGIX
  gpPolygonMode C.GPPOLYGONMODE
  gpPolygonOffset C.GPPOLYGONOFFSET
  gpPolygonOffsetEXT C.GPPOLYGONOFFSETEXT
  gpPolygonOffsetxOES C.GPPOLYGONOFFSETXOES
  gpPopDebugGroup C.GPPOPDEBUGGROUP
  gpPopDebugGroupKHR C.GPPOPDEBUGGROUPKHR
  gpPopGroupMarkerEXT C.GPPOPGROUPMARKEREXT
  gpPresentFrameDualFillNV C.GPPRESENTFRAMEDUALFILLNV
  gpPresentFrameKeyedNV C.GPPRESENTFRAMEKEYEDNV
  gpPrimitiveRestartIndex C.GPPRIMITIVERESTARTINDEX
  gpPrimitiveRestartIndexNV C.GPPRIMITIVERESTARTINDEXNV
  gpPrimitiveRestartNV C.GPPRIMITIVERESTARTNV
  gpPrioritizeTexturesEXT C.GPPRIORITIZETEXTURESEXT
  gpPrioritizeTexturesxOES C.GPPRIORITIZETEXTURESXOES
  gpProgramBinary C.GPPROGRAMBINARY
  gpProgramBufferParametersIivNV C.GPPROGRAMBUFFERPARAMETERSIIVNV
  gpProgramBufferParametersIuivNV C.GPPROGRAMBUFFERPARAMETERSIUIVNV
  gpProgramBufferParametersfvNV C.GPPROGRAMBUFFERPARAMETERSFVNV
  gpProgramEnvParameter4dARB C.GPPROGRAMENVPARAMETER4DARB
  gpProgramEnvParameter4dvARB C.GPPROGRAMENVPARAMETER4DVARB
  gpProgramEnvParameter4fARB C.GPPROGRAMENVPARAMETER4FARB
  gpProgramEnvParameter4fvARB C.GPPROGRAMENVPARAMETER4FVARB
  gpProgramEnvParameterI4iNV C.GPPROGRAMENVPARAMETERI4INV
  gpProgramEnvParameterI4ivNV C.GPPROGRAMENVPARAMETERI4IVNV
  gpProgramEnvParameterI4uiNV C.GPPROGRAMENVPARAMETERI4UINV
  gpProgramEnvParameterI4uivNV C.GPPROGRAMENVPARAMETERI4UIVNV
  gpProgramEnvParameters4fvEXT C.GPPROGRAMENVPARAMETERS4FVEXT
  gpProgramEnvParametersI4ivNV C.GPPROGRAMENVPARAMETERSI4IVNV
  gpProgramEnvParametersI4uivNV C.GPPROGRAMENVPARAMETERSI4UIVNV
  gpProgramLocalParameter4dARB C.GPPROGRAMLOCALPARAMETER4DARB
  gpProgramLocalParameter4dvARB C.GPPROGRAMLOCALPARAMETER4DVARB
  gpProgramLocalParameter4fARB C.GPPROGRAMLOCALPARAMETER4FARB
  gpProgramLocalParameter4fvARB C.GPPROGRAMLOCALPARAMETER4FVARB
  gpProgramLocalParameterI4iNV C.GPPROGRAMLOCALPARAMETERI4INV
  gpProgramLocalParameterI4ivNV C.GPPROGRAMLOCALPARAMETERI4IVNV
  gpProgramLocalParameterI4uiNV C.GPPROGRAMLOCALPARAMETERI4UINV
  gpProgramLocalParameterI4uivNV C.GPPROGRAMLOCALPARAMETERI4UIVNV
  gpProgramLocalParameters4fvEXT C.GPPROGRAMLOCALPARAMETERS4FVEXT
  gpProgramLocalParametersI4ivNV C.GPPROGRAMLOCALPARAMETERSI4IVNV
  gpProgramLocalParametersI4uivNV C.GPPROGRAMLOCALPARAMETERSI4UIVNV
  gpProgramNamedParameter4dNV C.GPPROGRAMNAMEDPARAMETER4DNV
  gpProgramNamedParameter4dvNV C.GPPROGRAMNAMEDPARAMETER4DVNV
  gpProgramNamedParameter4fNV C.GPPROGRAMNAMEDPARAMETER4FNV
  gpProgramNamedParameter4fvNV C.GPPROGRAMNAMEDPARAMETER4FVNV
  gpProgramParameter4dNV C.GPPROGRAMPARAMETER4DNV
  gpProgramParameter4dvNV C.GPPROGRAMPARAMETER4DVNV
  gpProgramParameter4fNV C.GPPROGRAMPARAMETER4FNV
  gpProgramParameter4fvNV C.GPPROGRAMPARAMETER4FVNV
  gpProgramParameteri C.GPPROGRAMPARAMETERI
  gpProgramParameteriARB C.GPPROGRAMPARAMETERIARB
  gpProgramParameteriEXT C.GPPROGRAMPARAMETERIEXT
  gpProgramParameters4dvNV C.GPPROGRAMPARAMETERS4DVNV
  gpProgramParameters4fvNV C.GPPROGRAMPARAMETERS4FVNV
  gpProgramStringARB C.GPPROGRAMSTRINGARB
  gpProgramSubroutineParametersuivNV C.GPPROGRAMSUBROUTINEPARAMETERSUIVNV
  gpProgramUniform1d C.GPPROGRAMUNIFORM1D
  gpProgramUniform1dEXT C.GPPROGRAMUNIFORM1DEXT
  gpProgramUniform1dv C.GPPROGRAMUNIFORM1DV
  gpProgramUniform1dvEXT C.GPPROGRAMUNIFORM1DVEXT
  gpProgramUniform1f C.GPPROGRAMUNIFORM1F
  gpProgramUniform1fEXT C.GPPROGRAMUNIFORM1FEXT
  gpProgramUniform1fv C.GPPROGRAMUNIFORM1FV
  gpProgramUniform1fvEXT C.GPPROGRAMUNIFORM1FVEXT
  gpProgramUniform1i C.GPPROGRAMUNIFORM1I
  gpProgramUniform1i64NV C.GPPROGRAMUNIFORM1I64NV
  gpProgramUniform1i64vNV C.GPPROGRAMUNIFORM1I64VNV
  gpProgramUniform1iEXT C.GPPROGRAMUNIFORM1IEXT
  gpProgramUniform1iv C.GPPROGRAMUNIFORM1IV
  gpProgramUniform1ivEXT C.GPPROGRAMUNIFORM1IVEXT
  gpProgramUniform1ui C.GPPROGRAMUNIFORM1UI
  gpProgramUniform1ui64NV C.GPPROGRAMUNIFORM1UI64NV
  gpProgramUniform1ui64vNV C.GPPROGRAMUNIFORM1UI64VNV
  gpProgramUniform1uiEXT C.GPPROGRAMUNIFORM1UIEXT
  gpProgramUniform1uiv C.GPPROGRAMUNIFORM1UIV
  gpProgramUniform1uivEXT C.GPPROGRAMUNIFORM1UIVEXT
  gpProgramUniform2d C.GPPROGRAMUNIFORM2D
  gpProgramUniform2dEXT C.GPPROGRAMUNIFORM2DEXT
  gpProgramUniform2dv C.GPPROGRAMUNIFORM2DV
  gpProgramUniform2dvEXT C.GPPROGRAMUNIFORM2DVEXT
  gpProgramUniform2f C.GPPROGRAMUNIFORM2F
  gpProgramUniform2fEXT C.GPPROGRAMUNIFORM2FEXT
  gpProgramUniform2fv C.GPPROGRAMUNIFORM2FV
  gpProgramUniform2fvEXT C.GPPROGRAMUNIFORM2FVEXT
  gpProgramUniform2i C.GPPROGRAMUNIFORM2I
  gpProgramUniform2i64NV C.GPPROGRAMUNIFORM2I64NV
  gpProgramUniform2i64vNV C.GPPROGRAMUNIFORM2I64VNV
  gpProgramUniform2iEXT C.GPPROGRAMUNIFORM2IEXT
  gpProgramUniform2iv C.GPPROGRAMUNIFORM2IV
  gpProgramUniform2ivEXT C.GPPROGRAMUNIFORM2IVEXT
  gpProgramUniform2ui C.GPPROGRAMUNIFORM2UI
  gpProgramUniform2ui64NV C.GPPROGRAMUNIFORM2UI64NV
  gpProgramUniform2ui64vNV C.GPPROGRAMUNIFORM2UI64VNV
  gpProgramUniform2uiEXT C.GPPROGRAMUNIFORM2UIEXT
  gpProgramUniform2uiv C.GPPROGRAMUNIFORM2UIV
  gpProgramUniform2uivEXT C.GPPROGRAMUNIFORM2UIVEXT
  gpProgramUniform3d C.GPPROGRAMUNIFORM3D
  gpProgramUniform3dEXT C.GPPROGRAMUNIFORM3DEXT
  gpProgramUniform3dv C.GPPROGRAMUNIFORM3DV
  gpProgramUniform3dvEXT C.GPPROGRAMUNIFORM3DVEXT
  gpProgramUniform3f C.GPPROGRAMUNIFORM3F
  gpProgramUniform3fEXT C.GPPROGRAMUNIFORM3FEXT
  gpProgramUniform3fv C.GPPROGRAMUNIFORM3FV
  gpProgramUniform3fvEXT C.GPPROGRAMUNIFORM3FVEXT
  gpProgramUniform3i C.GPPROGRAMUNIFORM3I
  gpProgramUniform3i64NV C.GPPROGRAMUNIFORM3I64NV
  gpProgramUniform3i64vNV C.GPPROGRAMUNIFORM3I64VNV
  gpProgramUniform3iEXT C.GPPROGRAMUNIFORM3IEXT
  gpProgramUniform3iv C.GPPROGRAMUNIFORM3IV
  gpProgramUniform3ivEXT C.GPPROGRAMUNIFORM3IVEXT
  gpProgramUniform3ui C.GPPROGRAMUNIFORM3UI
  gpProgramUniform3ui64NV C.GPPROGRAMUNIFORM3UI64NV
  gpProgramUniform3ui64vNV C.GPPROGRAMUNIFORM3UI64VNV
  gpProgramUniform3uiEXT C.GPPROGRAMUNIFORM3UIEXT
  gpProgramUniform3uiv C.GPPROGRAMUNIFORM3UIV
  gpProgramUniform3uivEXT C.GPPROGRAMUNIFORM3UIVEXT
  gpProgramUniform4d C.GPPROGRAMUNIFORM4D
  gpProgramUniform4dEXT C.GPPROGRAMUNIFORM4DEXT
  gpProgramUniform4dv C.GPPROGRAMUNIFORM4DV
  gpProgramUniform4dvEXT C.GPPROGRAMUNIFORM4DVEXT
  gpProgramUniform4f C.GPPROGRAMUNIFORM4F
  gpProgramUniform4fEXT C.GPPROGRAMUNIFORM4FEXT
  gpProgramUniform4fv C.GPPROGRAMUNIFORM4FV
  gpProgramUniform4fvEXT C.GPPROGRAMUNIFORM4FVEXT
  gpProgramUniform4i C.GPPROGRAMUNIFORM4I
  gpProgramUniform4i64NV C.GPPROGRAMUNIFORM4I64NV
  gpProgramUniform4i64vNV C.GPPROGRAMUNIFORM4I64VNV
  gpProgramUniform4iEXT C.GPPROGRAMUNIFORM4IEXT
  gpProgramUniform4iv C.GPPROGRAMUNIFORM4IV
  gpProgramUniform4ivEXT C.GPPROGRAMUNIFORM4IVEXT
  gpProgramUniform4ui C.GPPROGRAMUNIFORM4UI
  gpProgramUniform4ui64NV C.GPPROGRAMUNIFORM4UI64NV
  gpProgramUniform4ui64vNV C.GPPROGRAMUNIFORM4UI64VNV
  gpProgramUniform4uiEXT C.GPPROGRAMUNIFORM4UIEXT
  gpProgramUniform4uiv C.GPPROGRAMUNIFORM4UIV
  gpProgramUniform4uivEXT C.GPPROGRAMUNIFORM4UIVEXT
  gpProgramUniformHandleui64ARB C.GPPROGRAMUNIFORMHANDLEUI64ARB
  gpProgramUniformHandleui64NV C.GPPROGRAMUNIFORMHANDLEUI64NV
  gpProgramUniformHandleui64vARB C.GPPROGRAMUNIFORMHANDLEUI64VARB
  gpProgramUniformHandleui64vNV C.GPPROGRAMUNIFORMHANDLEUI64VNV
  gpProgramUniformMatrix2dv C.GPPROGRAMUNIFORMMATRIX2DV
  gpProgramUniformMatrix2dvEXT C.GPPROGRAMUNIFORMMATRIX2DVEXT
  gpProgramUniformMatrix2fv C.GPPROGRAMUNIFORMMATRIX2FV
  gpProgramUniformMatrix2fvEXT C.GPPROGRAMUNIFORMMATRIX2FVEXT
  gpProgramUniformMatrix2x3dv C.GPPROGRAMUNIFORMMATRIX2X3DV
  gpProgramUniformMatrix2x3dvEXT C.GPPROGRAMUNIFORMMATRIX2X3DVEXT
  gpProgramUniformMatrix2x3fv C.GPPROGRAMUNIFORMMATRIX2X3FV
  gpProgramUniformMatrix2x3fvEXT C.GPPROGRAMUNIFORMMATRIX2X3FVEXT
  gpProgramUniformMatrix2x4dv C.GPPROGRAMUNIFORMMATRIX2X4DV
  gpProgramUniformMatrix2x4dvEXT C.GPPROGRAMUNIFORMMATRIX2X4DVEXT
  gpProgramUniformMatrix2x4fv C.GPPROGRAMUNIFORMMATRIX2X4FV
  gpProgramUniformMatrix2x4fvEXT C.GPPROGRAMUNIFORMMATRIX2X4FVEXT
  gpProgramUniformMatrix3dv C.GPPROGRAMUNIFORMMATRIX3DV
  gpProgramUniformMatrix3dvEXT C.GPPROGRAMUNIFORMMATRIX3DVEXT
  gpProgramUniformMatrix3fv C.GPPROGRAMUNIFORMMATRIX3FV
  gpProgramUniformMatrix3fvEXT C.GPPROGRAMUNIFORMMATRIX3FVEXT
  gpProgramUniformMatrix3x2dv C.GPPROGRAMUNIFORMMATRIX3X2DV
  gpProgramUniformMatrix3x2dvEXT C.GPPROGRAMUNIFORMMATRIX3X2DVEXT
  gpProgramUniformMatrix3x2fv C.GPPROGRAMUNIFORMMATRIX3X2FV
  gpProgramUniformMatrix3x2fvEXT C.GPPROGRAMUNIFORMMATRIX3X2FVEXT
  gpProgramUniformMatrix3x4dv C.GPPROGRAMUNIFORMMATRIX3X4DV
  gpProgramUniformMatrix3x4dvEXT C.GPPROGRAMUNIFORMMATRIX3X4DVEXT
  gpProgramUniformMatrix3x4fv C.GPPROGRAMUNIFORMMATRIX3X4FV
  gpProgramUniformMatrix3x4fvEXT C.GPPROGRAMUNIFORMMATRIX3X4FVEXT
  gpProgramUniformMatrix4dv C.GPPROGRAMUNIFORMMATRIX4DV
  gpProgramUniformMatrix4dvEXT C.GPPROGRAMUNIFORMMATRIX4DVEXT
  gpProgramUniformMatrix4fv C.GPPROGRAMUNIFORMMATRIX4FV
  gpProgramUniformMatrix4fvEXT C.GPPROGRAMUNIFORMMATRIX4FVEXT
  gpProgramUniformMatrix4x2dv C.GPPROGRAMUNIFORMMATRIX4X2DV
  gpProgramUniformMatrix4x2dvEXT C.GPPROGRAMUNIFORMMATRIX4X2DVEXT
  gpProgramUniformMatrix4x2fv C.GPPROGRAMUNIFORMMATRIX4X2FV
  gpProgramUniformMatrix4x2fvEXT C.GPPROGRAMUNIFORMMATRIX4X2FVEXT
  gpProgramUniformMatrix4x3dv C.GPPROGRAMUNIFORMMATRIX4X3DV
  gpProgramUniformMatrix4x3dvEXT C.GPPROGRAMUNIFORMMATRIX4X3DVEXT
  gpProgramUniformMatrix4x3fv C.GPPROGRAMUNIFORMMATRIX4X3FV
  gpProgramUniformMatrix4x3fvEXT C.GPPROGRAMUNIFORMMATRIX4X3FVEXT
  gpProgramUniformui64NV C.GPPROGRAMUNIFORMUI64NV
  gpProgramUniformui64vNV C.GPPROGRAMUNIFORMUI64VNV
  gpProgramVertexLimitNV C.GPPROGRAMVERTEXLIMITNV
  gpProvokingVertex C.GPPROVOKINGVERTEX
  gpProvokingVertexEXT C.GPPROVOKINGVERTEXEXT
  gpPushClientAttribDefaultEXT C.GPPUSHCLIENTATTRIBDEFAULTEXT
  gpPushDebugGroup C.GPPUSHDEBUGGROUP
  gpPushDebugGroupKHR C.GPPUSHDEBUGGROUPKHR
  gpPushGroupMarkerEXT C.GPPUSHGROUPMARKEREXT
  gpQueryCounter C.GPQUERYCOUNTER
  gpQueryMatrixxOES C.GPQUERYMATRIXXOES
  gpQueryObjectParameteruiAMD C.GPQUERYOBJECTPARAMETERUIAMD
  gpRasterPos2xOES C.GPRASTERPOS2XOES
  gpRasterPos2xvOES C.GPRASTERPOS2XVOES
  gpRasterPos3xOES C.GPRASTERPOS3XOES
  gpRasterPos3xvOES C.GPRASTERPOS3XVOES
  gpRasterPos4xOES C.GPRASTERPOS4XOES
  gpRasterPos4xvOES C.GPRASTERPOS4XVOES
  gpReadBuffer C.GPREADBUFFER
  gpReadInstrumentsSGIX C.GPREADINSTRUMENTSSGIX
  gpReadPixels C.GPREADPIXELS
  gpReadnPixelsARB C.GPREADNPIXELSARB
  gpRectxOES C.GPRECTXOES
  gpRectxvOES C.GPRECTXVOES
  gpReferencePlaneSGIX C.GPREFERENCEPLANESGIX
  gpReleaseShaderCompiler C.GPRELEASESHADERCOMPILER
  gpRenderbufferStorage C.GPRENDERBUFFERSTORAGE
  gpRenderbufferStorageEXT C.GPRENDERBUFFERSTORAGEEXT
  gpRenderbufferStorageMultisample C.GPRENDERBUFFERSTORAGEMULTISAMPLE
  gpRenderbufferStorageMultisampleCoverageNV C.GPRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENV
  gpRenderbufferStorageMultisampleEXT C.GPRENDERBUFFERSTORAGEMULTISAMPLEEXT
  gpReplacementCodePointerSUN C.GPREPLACEMENTCODEPOINTERSUN
  gpReplacementCodeubSUN C.GPREPLACEMENTCODEUBSUN
  gpReplacementCodeubvSUN C.GPREPLACEMENTCODEUBVSUN
  gpReplacementCodeuiColor3fVertex3fSUN C.GPREPLACEMENTCODEUICOLOR3FVERTEX3FSUN
  gpReplacementCodeuiColor3fVertex3fvSUN C.GPREPLACEMENTCODEUICOLOR3FVERTEX3FVSUN
  gpReplacementCodeuiColor4fNormal3fVertex3fSUN C.GPREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUN
  gpReplacementCodeuiColor4fNormal3fVertex3fvSUN C.GPREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUN
  gpReplacementCodeuiColor4ubVertex3fSUN C.GPREPLACEMENTCODEUICOLOR4UBVERTEX3FSUN
  gpReplacementCodeuiColor4ubVertex3fvSUN C.GPREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUN
  gpReplacementCodeuiNormal3fVertex3fSUN C.GPREPLACEMENTCODEUINORMAL3FVERTEX3FSUN
  gpReplacementCodeuiNormal3fVertex3fvSUN C.GPREPLACEMENTCODEUINORMAL3FVERTEX3FVSUN
  gpReplacementCodeuiSUN C.GPREPLACEMENTCODEUISUN
  gpReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN C.GPREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUN
  gpReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN C.GPREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUN
  gpReplacementCodeuiTexCoord2fNormal3fVertex3fSUN C.GPREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUN
  gpReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN C.GPREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUN
  gpReplacementCodeuiTexCoord2fVertex3fSUN C.GPREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUN
  gpReplacementCodeuiTexCoord2fVertex3fvSUN C.GPREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUN
  gpReplacementCodeuiVertex3fSUN C.GPREPLACEMENTCODEUIVERTEX3FSUN
  gpReplacementCodeuiVertex3fvSUN C.GPREPLACEMENTCODEUIVERTEX3FVSUN
  gpReplacementCodeuivSUN C.GPREPLACEMENTCODEUIVSUN
  gpReplacementCodeusSUN C.GPREPLACEMENTCODEUSSUN
  gpReplacementCodeusvSUN C.GPREPLACEMENTCODEUSVSUN
  gpRequestResidentProgramsNV C.GPREQUESTRESIDENTPROGRAMSNV
  gpResetHistogramEXT C.GPRESETHISTOGRAMEXT
  gpResetMinmaxEXT C.GPRESETMINMAXEXT
  gpResizeBuffersMESA C.GPRESIZEBUFFERSMESA
  gpResumeTransformFeedback C.GPRESUMETRANSFORMFEEDBACK
  gpResumeTransformFeedbackNV C.GPRESUMETRANSFORMFEEDBACKNV
  gpRotatexOES C.GPROTATEXOES
  gpSampleCoverage C.GPSAMPLECOVERAGE
  gpSampleCoverageARB C.GPSAMPLECOVERAGEARB
  gpSampleCoverageOES C.GPSAMPLECOVERAGEOES
  gpSampleCoveragexOES C.GPSAMPLECOVERAGEXOES
  gpSampleMapATI C.GPSAMPLEMAPATI
  gpSampleMaskEXT C.GPSAMPLEMASKEXT
  gpSampleMaskIndexedNV C.GPSAMPLEMASKINDEXEDNV
  gpSampleMaskSGIS C.GPSAMPLEMASKSGIS
  gpSampleMaski C.GPSAMPLEMASKI
  gpSamplePatternEXT C.GPSAMPLEPATTERNEXT
  gpSamplePatternSGIS C.GPSAMPLEPATTERNSGIS
  gpSamplerParameterIiv C.GPSAMPLERPARAMETERIIV
  gpSamplerParameterIuiv C.GPSAMPLERPARAMETERIUIV
  gpSamplerParameterf C.GPSAMPLERPARAMETERF
  gpSamplerParameterfv C.GPSAMPLERPARAMETERFV
  gpSamplerParameteri C.GPSAMPLERPARAMETERI
  gpSamplerParameteriv C.GPSAMPLERPARAMETERIV
  gpScalexOES C.GPSCALEXOES
  gpScissor C.GPSCISSOR
  gpScissorArrayv C.GPSCISSORARRAYV
  gpScissorIndexed C.GPSCISSORINDEXED
  gpScissorIndexedv C.GPSCISSORINDEXEDV
  gpSecondaryColor3bEXT C.GPSECONDARYCOLOR3BEXT
  gpSecondaryColor3bvEXT C.GPSECONDARYCOLOR3BVEXT
  gpSecondaryColor3dEXT C.GPSECONDARYCOLOR3DEXT
  gpSecondaryColor3dvEXT C.GPSECONDARYCOLOR3DVEXT
  gpSecondaryColor3fEXT C.GPSECONDARYCOLOR3FEXT
  gpSecondaryColor3fvEXT C.GPSECONDARYCOLOR3FVEXT
  gpSecondaryColor3hNV C.GPSECONDARYCOLOR3HNV
  gpSecondaryColor3hvNV C.GPSECONDARYCOLOR3HVNV
  gpSecondaryColor3iEXT C.GPSECONDARYCOLOR3IEXT
  gpSecondaryColor3ivEXT C.GPSECONDARYCOLOR3IVEXT
  gpSecondaryColor3sEXT C.GPSECONDARYCOLOR3SEXT
  gpSecondaryColor3svEXT C.GPSECONDARYCOLOR3SVEXT
  gpSecondaryColor3ubEXT C.GPSECONDARYCOLOR3UBEXT
  gpSecondaryColor3ubvEXT C.GPSECONDARYCOLOR3UBVEXT
  gpSecondaryColor3uiEXT C.GPSECONDARYCOLOR3UIEXT
  gpSecondaryColor3uivEXT C.GPSECONDARYCOLOR3UIVEXT
  gpSecondaryColor3usEXT C.GPSECONDARYCOLOR3USEXT
  gpSecondaryColor3usvEXT C.GPSECONDARYCOLOR3USVEXT
  gpSecondaryColorFormatNV C.GPSECONDARYCOLORFORMATNV
  gpSecondaryColorPointerEXT C.GPSECONDARYCOLORPOINTEREXT
  gpSecondaryColorPointerListIBM C.GPSECONDARYCOLORPOINTERLISTIBM
  gpSelectPerfMonitorCountersAMD C.GPSELECTPERFMONITORCOUNTERSAMD
  gpSeparableFilter2DEXT C.GPSEPARABLEFILTER2DEXT
  gpSetFenceAPPLE C.GPSETFENCEAPPLE
  gpSetFenceNV C.GPSETFENCENV
  gpSetFragmentShaderConstantATI C.GPSETFRAGMENTSHADERCONSTANTATI
  gpSetInvariantEXT C.GPSETINVARIANTEXT
  gpSetLocalConstantEXT C.GPSETLOCALCONSTANTEXT
  gpSetMultisamplefvAMD C.GPSETMULTISAMPLEFVAMD
  gpShaderBinary C.GPSHADERBINARY
  gpShaderOp1EXT C.GPSHADEROP1EXT
  gpShaderOp2EXT C.GPSHADEROP2EXT
  gpShaderOp3EXT C.GPSHADEROP3EXT
  gpShaderSource C.GPSHADERSOURCE
  gpShaderSourceARB C.GPSHADERSOURCEARB
  gpShaderStorageBlockBinding C.GPSHADERSTORAGEBLOCKBINDING
  gpSharpenTexFuncSGIS C.GPSHARPENTEXFUNCSGIS
  gpSpriteParameterfSGIX C.GPSPRITEPARAMETERFSGIX
  gpSpriteParameterfvSGIX C.GPSPRITEPARAMETERFVSGIX
  gpSpriteParameteriSGIX C.GPSPRITEPARAMETERISGIX
  gpSpriteParameterivSGIX C.GPSPRITEPARAMETERIVSGIX
  gpStartInstrumentsSGIX C.GPSTARTINSTRUMENTSSGIX
  gpStencilClearTagEXT C.GPSTENCILCLEARTAGEXT
  gpStencilFillPathInstancedNV C.GPSTENCILFILLPATHINSTANCEDNV
  gpStencilFillPathNV C.GPSTENCILFILLPATHNV
  gpStencilFunc C.GPSTENCILFUNC
  gpStencilFuncSeparate C.GPSTENCILFUNCSEPARATE
  gpStencilFuncSeparateATI C.GPSTENCILFUNCSEPARATEATI
  gpStencilMask C.GPSTENCILMASK
  gpStencilMaskSeparate C.GPSTENCILMASKSEPARATE
  gpStencilOp C.GPSTENCILOP
  gpStencilOpSeparate C.GPSTENCILOPSEPARATE
  gpStencilOpSeparateATI C.GPSTENCILOPSEPARATEATI
  gpStencilOpValueAMD C.GPSTENCILOPVALUEAMD
  gpStencilStrokePathInstancedNV C.GPSTENCILSTROKEPATHINSTANCEDNV
  gpStencilStrokePathNV C.GPSTENCILSTROKEPATHNV
  gpStopInstrumentsSGIX C.GPSTOPINSTRUMENTSSGIX
  gpStringMarkerGREMEDY C.GPSTRINGMARKERGREMEDY
  gpSwizzleEXT C.GPSWIZZLEEXT
  gpSyncTextureINTEL C.GPSYNCTEXTUREINTEL
  gpTagSampleBufferSGIX C.GPTAGSAMPLEBUFFERSGIX
  gpTangent3bEXT C.GPTANGENT3BEXT
  gpTangent3bvEXT C.GPTANGENT3BVEXT
  gpTangent3dEXT C.GPTANGENT3DEXT
  gpTangent3dvEXT C.GPTANGENT3DVEXT
  gpTangent3fEXT C.GPTANGENT3FEXT
  gpTangent3fvEXT C.GPTANGENT3FVEXT
  gpTangent3iEXT C.GPTANGENT3IEXT
  gpTangent3ivEXT C.GPTANGENT3IVEXT
  gpTangent3sEXT C.GPTANGENT3SEXT
  gpTangent3svEXT C.GPTANGENT3SVEXT
  gpTangentPointerEXT C.GPTANGENTPOINTEREXT
  gpTbufferMask3DFX C.GPTBUFFERMASK3DFX
  gpTessellationFactorAMD C.GPTESSELLATIONFACTORAMD
  gpTessellationModeAMD C.GPTESSELLATIONMODEAMD
  gpTestFenceAPPLE C.GPTESTFENCEAPPLE
  gpTestFenceNV C.GPTESTFENCENV
  gpTestObjectAPPLE C.GPTESTOBJECTAPPLE
  gpTexBuffer C.GPTEXBUFFER
  gpTexBufferARB C.GPTEXBUFFERARB
  gpTexBufferEXT C.GPTEXBUFFEREXT
  gpTexBufferRange C.GPTEXBUFFERRANGE
  gpTexBumpParameterfvATI C.GPTEXBUMPPARAMETERFVATI
  gpTexBumpParameterivATI C.GPTEXBUMPPARAMETERIVATI
  gpTexCoord1bOES C.GPTEXCOORD1BOES
  gpTexCoord1bvOES C.GPTEXCOORD1BVOES
  gpTexCoord1hNV C.GPTEXCOORD1HNV
  gpTexCoord1hvNV C.GPTEXCOORD1HVNV
  gpTexCoord1xOES C.GPTEXCOORD1XOES
  gpTexCoord1xvOES C.GPTEXCOORD1XVOES
  gpTexCoord2bOES C.GPTEXCOORD2BOES
  gpTexCoord2bvOES C.GPTEXCOORD2BVOES
  gpTexCoord2fColor3fVertex3fSUN C.GPTEXCOORD2FCOLOR3FVERTEX3FSUN
  gpTexCoord2fColor3fVertex3fvSUN C.GPTEXCOORD2FCOLOR3FVERTEX3FVSUN
  gpTexCoord2fColor4fNormal3fVertex3fSUN C.GPTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUN
  gpTexCoord2fColor4fNormal3fVertex3fvSUN C.GPTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUN
  gpTexCoord2fColor4ubVertex3fSUN C.GPTEXCOORD2FCOLOR4UBVERTEX3FSUN
  gpTexCoord2fColor4ubVertex3fvSUN C.GPTEXCOORD2FCOLOR4UBVERTEX3FVSUN
  gpTexCoord2fNormal3fVertex3fSUN C.GPTEXCOORD2FNORMAL3FVERTEX3FSUN
  gpTexCoord2fNormal3fVertex3fvSUN C.GPTEXCOORD2FNORMAL3FVERTEX3FVSUN
  gpTexCoord2fVertex3fSUN C.GPTEXCOORD2FVERTEX3FSUN
  gpTexCoord2fVertex3fvSUN C.GPTEXCOORD2FVERTEX3FVSUN
  gpTexCoord2hNV C.GPTEXCOORD2HNV
  gpTexCoord2hvNV C.GPTEXCOORD2HVNV
  gpTexCoord2xOES C.GPTEXCOORD2XOES
  gpTexCoord2xvOES C.GPTEXCOORD2XVOES
  gpTexCoord3bOES C.GPTEXCOORD3BOES
  gpTexCoord3bvOES C.GPTEXCOORD3BVOES
  gpTexCoord3hNV C.GPTEXCOORD3HNV
  gpTexCoord3hvNV C.GPTEXCOORD3HVNV
  gpTexCoord3xOES C.GPTEXCOORD3XOES
  gpTexCoord3xvOES C.GPTEXCOORD3XVOES
  gpTexCoord4bOES C.GPTEXCOORD4BOES
  gpTexCoord4bvOES C.GPTEXCOORD4BVOES
  gpTexCoord4fColor4fNormal3fVertex4fSUN C.GPTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUN
  gpTexCoord4fColor4fNormal3fVertex4fvSUN C.GPTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUN
  gpTexCoord4fVertex4fSUN C.GPTEXCOORD4FVERTEX4FSUN
  gpTexCoord4fVertex4fvSUN C.GPTEXCOORD4FVERTEX4FVSUN
  gpTexCoord4hNV C.GPTEXCOORD4HNV
  gpTexCoord4hvNV C.GPTEXCOORD4HVNV
  gpTexCoord4xOES C.GPTEXCOORD4XOES
  gpTexCoord4xvOES C.GPTEXCOORD4XVOES
  gpTexCoordFormatNV C.GPTEXCOORDFORMATNV
  gpTexCoordPointerEXT C.GPTEXCOORDPOINTEREXT
  gpTexCoordPointerListIBM C.GPTEXCOORDPOINTERLISTIBM
  gpTexCoordPointervINTEL C.GPTEXCOORDPOINTERVINTEL
  gpTexEnvxOES C.GPTEXENVXOES
  gpTexEnvxvOES C.GPTEXENVXVOES
  gpTexFilterFuncSGIS C.GPTEXFILTERFUNCSGIS
  gpTexGenxOES C.GPTEXGENXOES
  gpTexGenxvOES C.GPTEXGENXVOES
  gpTexImage1D C.GPTEXIMAGE1D
  gpTexImage2D C.GPTEXIMAGE2D
  gpTexImage2DMultisample C.GPTEXIMAGE2DMULTISAMPLE
  gpTexImage2DMultisampleCoverageNV C.GPTEXIMAGE2DMULTISAMPLECOVERAGENV
  gpTexImage3D C.GPTEXIMAGE3D
  gpTexImage3DEXT C.GPTEXIMAGE3DEXT
  gpTexImage3DMultisample C.GPTEXIMAGE3DMULTISAMPLE
  gpTexImage3DMultisampleCoverageNV C.GPTEXIMAGE3DMULTISAMPLECOVERAGENV
  gpTexImage4DSGIS C.GPTEXIMAGE4DSGIS
  gpTexPageCommitmentARB C.GPTEXPAGECOMMITMENTARB
  gpTexParameterIiv C.GPTEXPARAMETERIIV
  gpTexParameterIivEXT C.GPTEXPARAMETERIIVEXT
  gpTexParameterIuiv C.GPTEXPARAMETERIUIV
  gpTexParameterIuivEXT C.GPTEXPARAMETERIUIVEXT
  gpTexParameterf C.GPTEXPARAMETERF
  gpTexParameterfv C.GPTEXPARAMETERFV
  gpTexParameteri C.GPTEXPARAMETERI
  gpTexParameteriv C.GPTEXPARAMETERIV
  gpTexParameterxOES C.GPTEXPARAMETERXOES
  gpTexParameterxvOES C.GPTEXPARAMETERXVOES
  gpTexRenderbufferNV C.GPTEXRENDERBUFFERNV
  gpTexStorage1D C.GPTEXSTORAGE1D
  gpTexStorage2D C.GPTEXSTORAGE2D
  gpTexStorage2DMultisample C.GPTEXSTORAGE2DMULTISAMPLE
  gpTexStorage3D C.GPTEXSTORAGE3D
  gpTexStorage3DMultisample C.GPTEXSTORAGE3DMULTISAMPLE
  gpTexStorageSparseAMD C.GPTEXSTORAGESPARSEAMD
  gpTexSubImage1D C.GPTEXSUBIMAGE1D
  gpTexSubImage1DEXT C.GPTEXSUBIMAGE1DEXT
  gpTexSubImage2D C.GPTEXSUBIMAGE2D
  gpTexSubImage2DEXT C.GPTEXSUBIMAGE2DEXT
  gpTexSubImage3D C.GPTEXSUBIMAGE3D
  gpTexSubImage3DEXT C.GPTEXSUBIMAGE3DEXT
  gpTexSubImage4DSGIS C.GPTEXSUBIMAGE4DSGIS
  gpTextureBarrierNV C.GPTEXTUREBARRIERNV
  gpTextureBufferEXT C.GPTEXTUREBUFFEREXT
  gpTextureBufferRangeEXT C.GPTEXTUREBUFFERRANGEEXT
  gpTextureColorMaskSGIS C.GPTEXTURECOLORMASKSGIS
  gpTextureImage1DEXT C.GPTEXTUREIMAGE1DEXT
  gpTextureImage2DEXT C.GPTEXTUREIMAGE2DEXT
  gpTextureImage2DMultisampleCoverageNV C.GPTEXTUREIMAGE2DMULTISAMPLECOVERAGENV
  gpTextureImage2DMultisampleNV C.GPTEXTUREIMAGE2DMULTISAMPLENV
  gpTextureImage3DEXT C.GPTEXTUREIMAGE3DEXT
  gpTextureImage3DMultisampleCoverageNV C.GPTEXTUREIMAGE3DMULTISAMPLECOVERAGENV
  gpTextureImage3DMultisampleNV C.GPTEXTUREIMAGE3DMULTISAMPLENV
  gpTextureLightEXT C.GPTEXTURELIGHTEXT
  gpTextureMaterialEXT C.GPTEXTUREMATERIALEXT
  gpTextureNormalEXT C.GPTEXTURENORMALEXT
  gpTexturePageCommitmentEXT C.GPTEXTUREPAGECOMMITMENTEXT
  gpTextureParameterIivEXT C.GPTEXTUREPARAMETERIIVEXT
  gpTextureParameterIuivEXT C.GPTEXTUREPARAMETERIUIVEXT
  gpTextureParameterfEXT C.GPTEXTUREPARAMETERFEXT
  gpTextureParameterfvEXT C.GPTEXTUREPARAMETERFVEXT
  gpTextureParameteriEXT C.GPTEXTUREPARAMETERIEXT
  gpTextureParameterivEXT C.GPTEXTUREPARAMETERIVEXT
  gpTextureRangeAPPLE C.GPTEXTURERANGEAPPLE
  gpTextureRenderbufferEXT C.GPTEXTURERENDERBUFFEREXT
  gpTextureStorage1DEXT C.GPTEXTURESTORAGE1DEXT
  gpTextureStorage2DEXT C.GPTEXTURESTORAGE2DEXT
  gpTextureStorage2DMultisampleEXT C.GPTEXTURESTORAGE2DMULTISAMPLEEXT
  gpTextureStorage3DEXT C.GPTEXTURESTORAGE3DEXT
  gpTextureStorage3DMultisampleEXT C.GPTEXTURESTORAGE3DMULTISAMPLEEXT
  gpTextureStorageSparseAMD C.GPTEXTURESTORAGESPARSEAMD
  gpTextureSubImage1DEXT C.GPTEXTURESUBIMAGE1DEXT
  gpTextureSubImage2DEXT C.GPTEXTURESUBIMAGE2DEXT
  gpTextureSubImage3DEXT C.GPTEXTURESUBIMAGE3DEXT
  gpTextureView C.GPTEXTUREVIEW
  gpTrackMatrixNV C.GPTRACKMATRIXNV
  gpTransformFeedbackAttribsNV C.GPTRANSFORMFEEDBACKATTRIBSNV
  gpTransformFeedbackStreamAttribsNV C.GPTRANSFORMFEEDBACKSTREAMATTRIBSNV
  gpTransformFeedbackVaryings C.GPTRANSFORMFEEDBACKVARYINGS
  gpTransformFeedbackVaryingsEXT C.GPTRANSFORMFEEDBACKVARYINGSEXT
  gpTransformFeedbackVaryingsNV C.GPTRANSFORMFEEDBACKVARYINGSNV
  gpTransformPathNV C.GPTRANSFORMPATHNV
  gpTranslatexOES C.GPTRANSLATEXOES
  gpUniform1d C.GPUNIFORM1D
  gpUniform1dv C.GPUNIFORM1DV
  gpUniform1f C.GPUNIFORM1F
  gpUniform1fARB C.GPUNIFORM1FARB
  gpUniform1fv C.GPUNIFORM1FV
  gpUniform1fvARB C.GPUNIFORM1FVARB
  gpUniform1i C.GPUNIFORM1I
  gpUniform1i64NV C.GPUNIFORM1I64NV
  gpUniform1i64vNV C.GPUNIFORM1I64VNV
  gpUniform1iARB C.GPUNIFORM1IARB
  gpUniform1iv C.GPUNIFORM1IV
  gpUniform1ivARB C.GPUNIFORM1IVARB
  gpUniform1ui C.GPUNIFORM1UI
  gpUniform1ui64NV C.GPUNIFORM1UI64NV
  gpUniform1ui64vNV C.GPUNIFORM1UI64VNV
  gpUniform1uiEXT C.GPUNIFORM1UIEXT
  gpUniform1uiv C.GPUNIFORM1UIV
  gpUniform1uivEXT C.GPUNIFORM1UIVEXT
  gpUniform2d C.GPUNIFORM2D
  gpUniform2dv C.GPUNIFORM2DV
  gpUniform2f C.GPUNIFORM2F
  gpUniform2fARB C.GPUNIFORM2FARB
  gpUniform2fv C.GPUNIFORM2FV
  gpUniform2fvARB C.GPUNIFORM2FVARB
  gpUniform2i C.GPUNIFORM2I
  gpUniform2i64NV C.GPUNIFORM2I64NV
  gpUniform2i64vNV C.GPUNIFORM2I64VNV
  gpUniform2iARB C.GPUNIFORM2IARB
  gpUniform2iv C.GPUNIFORM2IV
  gpUniform2ivARB C.GPUNIFORM2IVARB
  gpUniform2ui C.GPUNIFORM2UI
  gpUniform2ui64NV C.GPUNIFORM2UI64NV
  gpUniform2ui64vNV C.GPUNIFORM2UI64VNV
  gpUniform2uiEXT C.GPUNIFORM2UIEXT
  gpUniform2uiv C.GPUNIFORM2UIV
  gpUniform2uivEXT C.GPUNIFORM2UIVEXT
  gpUniform3d C.GPUNIFORM3D
  gpUniform3dv C.GPUNIFORM3DV
  gpUniform3f C.GPUNIFORM3F
  gpUniform3fARB C.GPUNIFORM3FARB
  gpUniform3fv C.GPUNIFORM3FV
  gpUniform3fvARB C.GPUNIFORM3FVARB
  gpUniform3i C.GPUNIFORM3I
  gpUniform3i64NV C.GPUNIFORM3I64NV
  gpUniform3i64vNV C.GPUNIFORM3I64VNV
  gpUniform3iARB C.GPUNIFORM3IARB
  gpUniform3iv C.GPUNIFORM3IV
  gpUniform3ivARB C.GPUNIFORM3IVARB
  gpUniform3ui C.GPUNIFORM3UI
  gpUniform3ui64NV C.GPUNIFORM3UI64NV
  gpUniform3ui64vNV C.GPUNIFORM3UI64VNV
  gpUniform3uiEXT C.GPUNIFORM3UIEXT
  gpUniform3uiv C.GPUNIFORM3UIV
  gpUniform3uivEXT C.GPUNIFORM3UIVEXT
  gpUniform4d C.GPUNIFORM4D
  gpUniform4dv C.GPUNIFORM4DV
  gpUniform4f C.GPUNIFORM4F
  gpUniform4fARB C.GPUNIFORM4FARB
  gpUniform4fv C.GPUNIFORM4FV
  gpUniform4fvARB C.GPUNIFORM4FVARB
  gpUniform4i C.GPUNIFORM4I
  gpUniform4i64NV C.GPUNIFORM4I64NV
  gpUniform4i64vNV C.GPUNIFORM4I64VNV
  gpUniform4iARB C.GPUNIFORM4IARB
  gpUniform4iv C.GPUNIFORM4IV
  gpUniform4ivARB C.GPUNIFORM4IVARB
  gpUniform4ui C.GPUNIFORM4UI
  gpUniform4ui64NV C.GPUNIFORM4UI64NV
  gpUniform4ui64vNV C.GPUNIFORM4UI64VNV
  gpUniform4uiEXT C.GPUNIFORM4UIEXT
  gpUniform4uiv C.GPUNIFORM4UIV
  gpUniform4uivEXT C.GPUNIFORM4UIVEXT
  gpUniformBlockBinding C.GPUNIFORMBLOCKBINDING
  gpUniformBufferEXT C.GPUNIFORMBUFFEREXT
  gpUniformHandleui64ARB C.GPUNIFORMHANDLEUI64ARB
  gpUniformHandleui64NV C.GPUNIFORMHANDLEUI64NV
  gpUniformHandleui64vARB C.GPUNIFORMHANDLEUI64VARB
  gpUniformHandleui64vNV C.GPUNIFORMHANDLEUI64VNV
  gpUniformMatrix2dv C.GPUNIFORMMATRIX2DV
  gpUniformMatrix2fv C.GPUNIFORMMATRIX2FV
  gpUniformMatrix2fvARB C.GPUNIFORMMATRIX2FVARB
  gpUniformMatrix2x3dv C.GPUNIFORMMATRIX2X3DV
  gpUniformMatrix2x3fv C.GPUNIFORMMATRIX2X3FV
  gpUniformMatrix2x4dv C.GPUNIFORMMATRIX2X4DV
  gpUniformMatrix2x4fv C.GPUNIFORMMATRIX2X4FV
  gpUniformMatrix3dv C.GPUNIFORMMATRIX3DV
  gpUniformMatrix3fv C.GPUNIFORMMATRIX3FV
  gpUniformMatrix3fvARB C.GPUNIFORMMATRIX3FVARB
  gpUniformMatrix3x2dv C.GPUNIFORMMATRIX3X2DV
  gpUniformMatrix3x2fv C.GPUNIFORMMATRIX3X2FV
  gpUniformMatrix3x4dv C.GPUNIFORMMATRIX3X4DV
  gpUniformMatrix3x4fv C.GPUNIFORMMATRIX3X4FV
  gpUniformMatrix4dv C.GPUNIFORMMATRIX4DV
  gpUniformMatrix4fv C.GPUNIFORMMATRIX4FV
  gpUniformMatrix4fvARB C.GPUNIFORMMATRIX4FVARB
  gpUniformMatrix4x2dv C.GPUNIFORMMATRIX4X2DV
  gpUniformMatrix4x2fv C.GPUNIFORMMATRIX4X2FV
  gpUniformMatrix4x3dv C.GPUNIFORMMATRIX4X3DV
  gpUniformMatrix4x3fv C.GPUNIFORMMATRIX4X3FV
  gpUniformSubroutinesuiv C.GPUNIFORMSUBROUTINESUIV
  gpUniformui64NV C.GPUNIFORMUI64NV
  gpUniformui64vNV C.GPUNIFORMUI64VNV
  gpUnlockArraysEXT C.GPUNLOCKARRAYSEXT
  gpUnmapBuffer C.GPUNMAPBUFFER
  gpUnmapBufferARB C.GPUNMAPBUFFERARB
  gpUnmapNamedBufferEXT C.GPUNMAPNAMEDBUFFEREXT
  gpUnmapObjectBufferATI C.GPUNMAPOBJECTBUFFERATI
  gpUnmapTexture2DINTEL C.GPUNMAPTEXTURE2DINTEL
  gpUpdateObjectBufferATI C.GPUPDATEOBJECTBUFFERATI
  gpUseProgram C.GPUSEPROGRAM
  gpUseProgramObjectARB C.GPUSEPROGRAMOBJECTARB
  gpUseProgramStages C.GPUSEPROGRAMSTAGES
  gpUseProgramStagesEXT C.GPUSEPROGRAMSTAGESEXT
  gpUseShaderProgramEXT C.GPUSESHADERPROGRAMEXT
  gpVDPAUFiniNV C.GPVDPAUFININV
  gpVDPAUGetSurfaceivNV C.GPVDPAUGETSURFACEIVNV
  gpVDPAUInitNV C.GPVDPAUINITNV
  gpVDPAUIsSurfaceNV C.GPVDPAUISSURFACENV
  gpVDPAUMapSurfacesNV C.GPVDPAUMAPSURFACESNV
  gpVDPAURegisterOutputSurfaceNV C.GPVDPAUREGISTEROUTPUTSURFACENV
  gpVDPAURegisterVideoSurfaceNV C.GPVDPAUREGISTERVIDEOSURFACENV
  gpVDPAUSurfaceAccessNV C.GPVDPAUSURFACEACCESSNV
  gpVDPAUUnmapSurfacesNV C.GPVDPAUUNMAPSURFACESNV
  gpVDPAUUnregisterSurfaceNV C.GPVDPAUUNREGISTERSURFACENV
  gpValidateProgram C.GPVALIDATEPROGRAM
  gpValidateProgramARB C.GPVALIDATEPROGRAMARB
  gpValidateProgramPipeline C.GPVALIDATEPROGRAMPIPELINE
  gpValidateProgramPipelineEXT C.GPVALIDATEPROGRAMPIPELINEEXT
  gpVariantArrayObjectATI C.GPVARIANTARRAYOBJECTATI
  gpVariantPointerEXT C.GPVARIANTPOINTEREXT
  gpVariantbvEXT C.GPVARIANTBVEXT
  gpVariantdvEXT C.GPVARIANTDVEXT
  gpVariantfvEXT C.GPVARIANTFVEXT
  gpVariantivEXT C.GPVARIANTIVEXT
  gpVariantsvEXT C.GPVARIANTSVEXT
  gpVariantubvEXT C.GPVARIANTUBVEXT
  gpVariantuivEXT C.GPVARIANTUIVEXT
  gpVariantusvEXT C.GPVARIANTUSVEXT
  gpVertex2bOES C.GPVERTEX2BOES
  gpVertex2bvOES C.GPVERTEX2BVOES
  gpVertex2hNV C.GPVERTEX2HNV
  gpVertex2hvNV C.GPVERTEX2HVNV
  gpVertex2xOES C.GPVERTEX2XOES
  gpVertex2xvOES C.GPVERTEX2XVOES
  gpVertex3bOES C.GPVERTEX3BOES
  gpVertex3bvOES C.GPVERTEX3BVOES
  gpVertex3hNV C.GPVERTEX3HNV
  gpVertex3hvNV C.GPVERTEX3HVNV
  gpVertex3xOES C.GPVERTEX3XOES
  gpVertex3xvOES C.GPVERTEX3XVOES
  gpVertex4bOES C.GPVERTEX4BOES
  gpVertex4bvOES C.GPVERTEX4BVOES
  gpVertex4hNV C.GPVERTEX4HNV
  gpVertex4hvNV C.GPVERTEX4HVNV
  gpVertex4xOES C.GPVERTEX4XOES
  gpVertex4xvOES C.GPVERTEX4XVOES
  gpVertexArrayBindVertexBufferEXT C.GPVERTEXARRAYBINDVERTEXBUFFEREXT
  gpVertexArrayColorOffsetEXT C.GPVERTEXARRAYCOLOROFFSETEXT
  gpVertexArrayEdgeFlagOffsetEXT C.GPVERTEXARRAYEDGEFLAGOFFSETEXT
  gpVertexArrayFogCoordOffsetEXT C.GPVERTEXARRAYFOGCOORDOFFSETEXT
  gpVertexArrayIndexOffsetEXT C.GPVERTEXARRAYINDEXOFFSETEXT
  gpVertexArrayMultiTexCoordOffsetEXT C.GPVERTEXARRAYMULTITEXCOORDOFFSETEXT
  gpVertexArrayNormalOffsetEXT C.GPVERTEXARRAYNORMALOFFSETEXT
  gpVertexArrayParameteriAPPLE C.GPVERTEXARRAYPARAMETERIAPPLE
  gpVertexArrayRangeAPPLE C.GPVERTEXARRAYRANGEAPPLE
  gpVertexArrayRangeNV C.GPVERTEXARRAYRANGENV
  gpVertexArraySecondaryColorOffsetEXT C.GPVERTEXARRAYSECONDARYCOLOROFFSETEXT
  gpVertexArrayTexCoordOffsetEXT C.GPVERTEXARRAYTEXCOORDOFFSETEXT
  gpVertexArrayVertexAttribBindingEXT C.GPVERTEXARRAYVERTEXATTRIBBINDINGEXT
  gpVertexArrayVertexAttribDivisorEXT C.GPVERTEXARRAYVERTEXATTRIBDIVISOREXT
  gpVertexArrayVertexAttribFormatEXT C.GPVERTEXARRAYVERTEXATTRIBFORMATEXT
  gpVertexArrayVertexAttribIFormatEXT C.GPVERTEXARRAYVERTEXATTRIBIFORMATEXT
  gpVertexArrayVertexAttribIOffsetEXT C.GPVERTEXARRAYVERTEXATTRIBIOFFSETEXT
  gpVertexArrayVertexAttribLFormatEXT C.GPVERTEXARRAYVERTEXATTRIBLFORMATEXT
  gpVertexArrayVertexAttribLOffsetEXT C.GPVERTEXARRAYVERTEXATTRIBLOFFSETEXT
  gpVertexArrayVertexAttribOffsetEXT C.GPVERTEXARRAYVERTEXATTRIBOFFSETEXT
  gpVertexArrayVertexBindingDivisorEXT C.GPVERTEXARRAYVERTEXBINDINGDIVISOREXT
  gpVertexArrayVertexOffsetEXT C.GPVERTEXARRAYVERTEXOFFSETEXT
  gpVertexAttrib1d C.GPVERTEXATTRIB1D
  gpVertexAttrib1dARB C.GPVERTEXATTRIB1DARB
  gpVertexAttrib1dNV C.GPVERTEXATTRIB1DNV
  gpVertexAttrib1dv C.GPVERTEXATTRIB1DV
  gpVertexAttrib1dvARB C.GPVERTEXATTRIB1DVARB
  gpVertexAttrib1dvNV C.GPVERTEXATTRIB1DVNV
  gpVertexAttrib1f C.GPVERTEXATTRIB1F
  gpVertexAttrib1fARB C.GPVERTEXATTRIB1FARB
  gpVertexAttrib1fNV C.GPVERTEXATTRIB1FNV
  gpVertexAttrib1fv C.GPVERTEXATTRIB1FV
  gpVertexAttrib1fvARB C.GPVERTEXATTRIB1FVARB
  gpVertexAttrib1fvNV C.GPVERTEXATTRIB1FVNV
  gpVertexAttrib1hNV C.GPVERTEXATTRIB1HNV
  gpVertexAttrib1hvNV C.GPVERTEXATTRIB1HVNV
  gpVertexAttrib1s C.GPVERTEXATTRIB1S
  gpVertexAttrib1sARB C.GPVERTEXATTRIB1SARB
  gpVertexAttrib1sNV C.GPVERTEXATTRIB1SNV
  gpVertexAttrib1sv C.GPVERTEXATTRIB1SV
  gpVertexAttrib1svARB C.GPVERTEXATTRIB1SVARB
  gpVertexAttrib1svNV C.GPVERTEXATTRIB1SVNV
  gpVertexAttrib2d C.GPVERTEXATTRIB2D
  gpVertexAttrib2dARB C.GPVERTEXATTRIB2DARB
  gpVertexAttrib2dNV C.GPVERTEXATTRIB2DNV
  gpVertexAttrib2dv C.GPVERTEXATTRIB2DV
  gpVertexAttrib2dvARB C.GPVERTEXATTRIB2DVARB
  gpVertexAttrib2dvNV C.GPVERTEXATTRIB2DVNV
  gpVertexAttrib2f C.GPVERTEXATTRIB2F
  gpVertexAttrib2fARB C.GPVERTEXATTRIB2FARB
  gpVertexAttrib2fNV C.GPVERTEXATTRIB2FNV
  gpVertexAttrib2fv C.GPVERTEXATTRIB2FV
  gpVertexAttrib2fvARB C.GPVERTEXATTRIB2FVARB
  gpVertexAttrib2fvNV C.GPVERTEXATTRIB2FVNV
  gpVertexAttrib2hNV C.GPVERTEXATTRIB2HNV
  gpVertexAttrib2hvNV C.GPVERTEXATTRIB2HVNV
  gpVertexAttrib2s C.GPVERTEXATTRIB2S
  gpVertexAttrib2sARB C.GPVERTEXATTRIB2SARB
  gpVertexAttrib2sNV C.GPVERTEXATTRIB2SNV
  gpVertexAttrib2sv C.GPVERTEXATTRIB2SV
  gpVertexAttrib2svARB C.GPVERTEXATTRIB2SVARB
  gpVertexAttrib2svNV C.GPVERTEXATTRIB2SVNV
  gpVertexAttrib3d C.GPVERTEXATTRIB3D
  gpVertexAttrib3dARB C.GPVERTEXATTRIB3DARB
  gpVertexAttrib3dNV C.GPVERTEXATTRIB3DNV
  gpVertexAttrib3dv C.GPVERTEXATTRIB3DV
  gpVertexAttrib3dvARB C.GPVERTEXATTRIB3DVARB
  gpVertexAttrib3dvNV C.GPVERTEXATTRIB3DVNV
  gpVertexAttrib3f C.GPVERTEXATTRIB3F
  gpVertexAttrib3fARB C.GPVERTEXATTRIB3FARB
  gpVertexAttrib3fNV C.GPVERTEXATTRIB3FNV
  gpVertexAttrib3fv C.GPVERTEXATTRIB3FV
  gpVertexAttrib3fvARB C.GPVERTEXATTRIB3FVARB
  gpVertexAttrib3fvNV C.GPVERTEXATTRIB3FVNV
  gpVertexAttrib3hNV C.GPVERTEXATTRIB3HNV
  gpVertexAttrib3hvNV C.GPVERTEXATTRIB3HVNV
  gpVertexAttrib3s C.GPVERTEXATTRIB3S
  gpVertexAttrib3sARB C.GPVERTEXATTRIB3SARB
  gpVertexAttrib3sNV C.GPVERTEXATTRIB3SNV
  gpVertexAttrib3sv C.GPVERTEXATTRIB3SV
  gpVertexAttrib3svARB C.GPVERTEXATTRIB3SVARB
  gpVertexAttrib3svNV C.GPVERTEXATTRIB3SVNV
  gpVertexAttrib4Nbv C.GPVERTEXATTRIB4NBV
  gpVertexAttrib4NbvARB C.GPVERTEXATTRIB4NBVARB
  gpVertexAttrib4Niv C.GPVERTEXATTRIB4NIV
  gpVertexAttrib4NivARB C.GPVERTEXATTRIB4NIVARB
  gpVertexAttrib4Nsv C.GPVERTEXATTRIB4NSV
  gpVertexAttrib4NsvARB C.GPVERTEXATTRIB4NSVARB
  gpVertexAttrib4Nub C.GPVERTEXATTRIB4NUB
  gpVertexAttrib4NubARB C.GPVERTEXATTRIB4NUBARB
  gpVertexAttrib4Nubv C.GPVERTEXATTRIB4NUBV
  gpVertexAttrib4NubvARB C.GPVERTEXATTRIB4NUBVARB
  gpVertexAttrib4Nuiv C.GPVERTEXATTRIB4NUIV
  gpVertexAttrib4NuivARB C.GPVERTEXATTRIB4NUIVARB
  gpVertexAttrib4Nusv C.GPVERTEXATTRIB4NUSV
  gpVertexAttrib4NusvARB C.GPVERTEXATTRIB4NUSVARB
  gpVertexAttrib4bv C.GPVERTEXATTRIB4BV
  gpVertexAttrib4bvARB C.GPVERTEXATTRIB4BVARB
  gpVertexAttrib4d C.GPVERTEXATTRIB4D
  gpVertexAttrib4dARB C.GPVERTEXATTRIB4DARB
  gpVertexAttrib4dNV C.GPVERTEXATTRIB4DNV
  gpVertexAttrib4dv C.GPVERTEXATTRIB4DV
  gpVertexAttrib4dvARB C.GPVERTEXATTRIB4DVARB
  gpVertexAttrib4dvNV C.GPVERTEXATTRIB4DVNV
  gpVertexAttrib4f C.GPVERTEXATTRIB4F
  gpVertexAttrib4fARB C.GPVERTEXATTRIB4FARB
  gpVertexAttrib4fNV C.GPVERTEXATTRIB4FNV
  gpVertexAttrib4fv C.GPVERTEXATTRIB4FV
  gpVertexAttrib4fvARB C.GPVERTEXATTRIB4FVARB
  gpVertexAttrib4fvNV C.GPVERTEXATTRIB4FVNV
  gpVertexAttrib4hNV C.GPVERTEXATTRIB4HNV
  gpVertexAttrib4hvNV C.GPVERTEXATTRIB4HVNV
  gpVertexAttrib4iv C.GPVERTEXATTRIB4IV
  gpVertexAttrib4ivARB C.GPVERTEXATTRIB4IVARB
  gpVertexAttrib4s C.GPVERTEXATTRIB4S
  gpVertexAttrib4sARB C.GPVERTEXATTRIB4SARB
  gpVertexAttrib4sNV C.GPVERTEXATTRIB4SNV
  gpVertexAttrib4sv C.GPVERTEXATTRIB4SV
  gpVertexAttrib4svARB C.GPVERTEXATTRIB4SVARB
  gpVertexAttrib4svNV C.GPVERTEXATTRIB4SVNV
  gpVertexAttrib4ubNV C.GPVERTEXATTRIB4UBNV
  gpVertexAttrib4ubv C.GPVERTEXATTRIB4UBV
  gpVertexAttrib4ubvARB C.GPVERTEXATTRIB4UBVARB
  gpVertexAttrib4ubvNV C.GPVERTEXATTRIB4UBVNV
  gpVertexAttrib4uiv C.GPVERTEXATTRIB4UIV
  gpVertexAttrib4uivARB C.GPVERTEXATTRIB4UIVARB
  gpVertexAttrib4usv C.GPVERTEXATTRIB4USV
  gpVertexAttrib4usvARB C.GPVERTEXATTRIB4USVARB
  gpVertexAttribArrayObjectATI C.GPVERTEXATTRIBARRAYOBJECTATI
  gpVertexAttribBinding C.GPVERTEXATTRIBBINDING
  gpVertexAttribDivisor C.GPVERTEXATTRIBDIVISOR
  gpVertexAttribDivisorARB C.GPVERTEXATTRIBDIVISORARB
  gpVertexAttribFormat C.GPVERTEXATTRIBFORMAT
  gpVertexAttribFormatNV C.GPVERTEXATTRIBFORMATNV
  gpVertexAttribI1i C.GPVERTEXATTRIBI1I
  gpVertexAttribI1iEXT C.GPVERTEXATTRIBI1IEXT
  gpVertexAttribI1iv C.GPVERTEXATTRIBI1IV
  gpVertexAttribI1ivEXT C.GPVERTEXATTRIBI1IVEXT
  gpVertexAttribI1ui C.GPVERTEXATTRIBI1UI
  gpVertexAttribI1uiEXT C.GPVERTEXATTRIBI1UIEXT
  gpVertexAttribI1uiv C.GPVERTEXATTRIBI1UIV
  gpVertexAttribI1uivEXT C.GPVERTEXATTRIBI1UIVEXT
  gpVertexAttribI2i C.GPVERTEXATTRIBI2I
  gpVertexAttribI2iEXT C.GPVERTEXATTRIBI2IEXT
  gpVertexAttribI2iv C.GPVERTEXATTRIBI2IV
  gpVertexAttribI2ivEXT C.GPVERTEXATTRIBI2IVEXT
  gpVertexAttribI2ui C.GPVERTEXATTRIBI2UI
  gpVertexAttribI2uiEXT C.GPVERTEXATTRIBI2UIEXT
  gpVertexAttribI2uiv C.GPVERTEXATTRIBI2UIV
  gpVertexAttribI2uivEXT C.GPVERTEXATTRIBI2UIVEXT
  gpVertexAttribI3i C.GPVERTEXATTRIBI3I
  gpVertexAttribI3iEXT C.GPVERTEXATTRIBI3IEXT
  gpVertexAttribI3iv C.GPVERTEXATTRIBI3IV
  gpVertexAttribI3ivEXT C.GPVERTEXATTRIBI3IVEXT
  gpVertexAttribI3ui C.GPVERTEXATTRIBI3UI
  gpVertexAttribI3uiEXT C.GPVERTEXATTRIBI3UIEXT
  gpVertexAttribI3uiv C.GPVERTEXATTRIBI3UIV
  gpVertexAttribI3uivEXT C.GPVERTEXATTRIBI3UIVEXT
  gpVertexAttribI4bv C.GPVERTEXATTRIBI4BV
  gpVertexAttribI4bvEXT C.GPVERTEXATTRIBI4BVEXT
  gpVertexAttribI4i C.GPVERTEXATTRIBI4I
  gpVertexAttribI4iEXT C.GPVERTEXATTRIBI4IEXT
  gpVertexAttribI4iv C.GPVERTEXATTRIBI4IV
  gpVertexAttribI4ivEXT C.GPVERTEXATTRIBI4IVEXT
  gpVertexAttribI4sv C.GPVERTEXATTRIBI4SV
  gpVertexAttribI4svEXT C.GPVERTEXATTRIBI4SVEXT
  gpVertexAttribI4ubv C.GPVERTEXATTRIBI4UBV
  gpVertexAttribI4ubvEXT C.GPVERTEXATTRIBI4UBVEXT
  gpVertexAttribI4ui C.GPVERTEXATTRIBI4UI
  gpVertexAttribI4uiEXT C.GPVERTEXATTRIBI4UIEXT
  gpVertexAttribI4uiv C.GPVERTEXATTRIBI4UIV
  gpVertexAttribI4uivEXT C.GPVERTEXATTRIBI4UIVEXT
  gpVertexAttribI4usv C.GPVERTEXATTRIBI4USV
  gpVertexAttribI4usvEXT C.GPVERTEXATTRIBI4USVEXT
  gpVertexAttribIFormat C.GPVERTEXATTRIBIFORMAT
  gpVertexAttribIFormatNV C.GPVERTEXATTRIBIFORMATNV
  gpVertexAttribIPointer C.GPVERTEXATTRIBIPOINTER
  gpVertexAttribIPointerEXT C.GPVERTEXATTRIBIPOINTEREXT
  gpVertexAttribL1d C.GPVERTEXATTRIBL1D
  gpVertexAttribL1dEXT C.GPVERTEXATTRIBL1DEXT
  gpVertexAttribL1dv C.GPVERTEXATTRIBL1DV
  gpVertexAttribL1dvEXT C.GPVERTEXATTRIBL1DVEXT
  gpVertexAttribL1i64NV C.GPVERTEXATTRIBL1I64NV
  gpVertexAttribL1i64vNV C.GPVERTEXATTRIBL1I64VNV
  gpVertexAttribL1ui64ARB C.GPVERTEXATTRIBL1UI64ARB
  gpVertexAttribL1ui64NV C.GPVERTEXATTRIBL1UI64NV
  gpVertexAttribL1ui64vARB C.GPVERTEXATTRIBL1UI64VARB
  gpVertexAttribL1ui64vNV C.GPVERTEXATTRIBL1UI64VNV
  gpVertexAttribL2d C.GPVERTEXATTRIBL2D
  gpVertexAttribL2dEXT C.GPVERTEXATTRIBL2DEXT
  gpVertexAttribL2dv C.GPVERTEXATTRIBL2DV
  gpVertexAttribL2dvEXT C.GPVERTEXATTRIBL2DVEXT
  gpVertexAttribL2i64NV C.GPVERTEXATTRIBL2I64NV
  gpVertexAttribL2i64vNV C.GPVERTEXATTRIBL2I64VNV
  gpVertexAttribL2ui64NV C.GPVERTEXATTRIBL2UI64NV
  gpVertexAttribL2ui64vNV C.GPVERTEXATTRIBL2UI64VNV
  gpVertexAttribL3d C.GPVERTEXATTRIBL3D
  gpVertexAttribL3dEXT C.GPVERTEXATTRIBL3DEXT
  gpVertexAttribL3dv C.GPVERTEXATTRIBL3DV
  gpVertexAttribL3dvEXT C.GPVERTEXATTRIBL3DVEXT
  gpVertexAttribL3i64NV C.GPVERTEXATTRIBL3I64NV
  gpVertexAttribL3i64vNV C.GPVERTEXATTRIBL3I64VNV
  gpVertexAttribL3ui64NV C.GPVERTEXATTRIBL3UI64NV
  gpVertexAttribL3ui64vNV C.GPVERTEXATTRIBL3UI64VNV
  gpVertexAttribL4d C.GPVERTEXATTRIBL4D
  gpVertexAttribL4dEXT C.GPVERTEXATTRIBL4DEXT
  gpVertexAttribL4dv C.GPVERTEXATTRIBL4DV
  gpVertexAttribL4dvEXT C.GPVERTEXATTRIBL4DVEXT
  gpVertexAttribL4i64NV C.GPVERTEXATTRIBL4I64NV
  gpVertexAttribL4i64vNV C.GPVERTEXATTRIBL4I64VNV
  gpVertexAttribL4ui64NV C.GPVERTEXATTRIBL4UI64NV
  gpVertexAttribL4ui64vNV C.GPVERTEXATTRIBL4UI64VNV
  gpVertexAttribLFormat C.GPVERTEXATTRIBLFORMAT
  gpVertexAttribLFormatNV C.GPVERTEXATTRIBLFORMATNV
  gpVertexAttribLPointer C.GPVERTEXATTRIBLPOINTER
  gpVertexAttribLPointerEXT C.GPVERTEXATTRIBLPOINTEREXT
  gpVertexAttribP1ui C.GPVERTEXATTRIBP1UI
  gpVertexAttribP1uiv C.GPVERTEXATTRIBP1UIV
  gpVertexAttribP2ui C.GPVERTEXATTRIBP2UI
  gpVertexAttribP2uiv C.GPVERTEXATTRIBP2UIV
  gpVertexAttribP3ui C.GPVERTEXATTRIBP3UI
  gpVertexAttribP3uiv C.GPVERTEXATTRIBP3UIV
  gpVertexAttribP4ui C.GPVERTEXATTRIBP4UI
  gpVertexAttribP4uiv C.GPVERTEXATTRIBP4UIV
  gpVertexAttribParameteriAMD C.GPVERTEXATTRIBPARAMETERIAMD
  gpVertexAttribPointer C.GPVERTEXATTRIBPOINTER
  gpVertexAttribPointerARB C.GPVERTEXATTRIBPOINTERARB
  gpVertexAttribPointerNV C.GPVERTEXATTRIBPOINTERNV
  gpVertexAttribs1dvNV C.GPVERTEXATTRIBS1DVNV
  gpVertexAttribs1fvNV C.GPVERTEXATTRIBS1FVNV
  gpVertexAttribs1hvNV C.GPVERTEXATTRIBS1HVNV
  gpVertexAttribs1svNV C.GPVERTEXATTRIBS1SVNV
  gpVertexAttribs2dvNV C.GPVERTEXATTRIBS2DVNV
  gpVertexAttribs2fvNV C.GPVERTEXATTRIBS2FVNV
  gpVertexAttribs2hvNV C.GPVERTEXATTRIBS2HVNV
  gpVertexAttribs2svNV C.GPVERTEXATTRIBS2SVNV
  gpVertexAttribs3dvNV C.GPVERTEXATTRIBS3DVNV
  gpVertexAttribs3fvNV C.GPVERTEXATTRIBS3FVNV
  gpVertexAttribs3hvNV C.GPVERTEXATTRIBS3HVNV
  gpVertexAttribs3svNV C.GPVERTEXATTRIBS3SVNV
  gpVertexAttribs4dvNV C.GPVERTEXATTRIBS4DVNV
  gpVertexAttribs4fvNV C.GPVERTEXATTRIBS4FVNV
  gpVertexAttribs4hvNV C.GPVERTEXATTRIBS4HVNV
  gpVertexAttribs4svNV C.GPVERTEXATTRIBS4SVNV
  gpVertexAttribs4ubvNV C.GPVERTEXATTRIBS4UBVNV
  gpVertexBindingDivisor C.GPVERTEXBINDINGDIVISOR
  gpVertexBlendARB C.GPVERTEXBLENDARB
  gpVertexBlendEnvfATI C.GPVERTEXBLENDENVFATI
  gpVertexBlendEnviATI C.GPVERTEXBLENDENVIATI
  gpVertexFormatNV C.GPVERTEXFORMATNV
  gpVertexPointerEXT C.GPVERTEXPOINTEREXT
  gpVertexPointerListIBM C.GPVERTEXPOINTERLISTIBM
  gpVertexPointervINTEL C.GPVERTEXPOINTERVINTEL
  gpVertexStream1dATI C.GPVERTEXSTREAM1DATI
  gpVertexStream1dvATI C.GPVERTEXSTREAM1DVATI
  gpVertexStream1fATI C.GPVERTEXSTREAM1FATI
  gpVertexStream1fvATI C.GPVERTEXSTREAM1FVATI
  gpVertexStream1iATI C.GPVERTEXSTREAM1IATI
  gpVertexStream1ivATI C.GPVERTEXSTREAM1IVATI
  gpVertexStream1sATI C.GPVERTEXSTREAM1SATI
  gpVertexStream1svATI C.GPVERTEXSTREAM1SVATI
  gpVertexStream2dATI C.GPVERTEXSTREAM2DATI
  gpVertexStream2dvATI C.GPVERTEXSTREAM2DVATI
  gpVertexStream2fATI C.GPVERTEXSTREAM2FATI
  gpVertexStream2fvATI C.GPVERTEXSTREAM2FVATI
  gpVertexStream2iATI C.GPVERTEXSTREAM2IATI
  gpVertexStream2ivATI C.GPVERTEXSTREAM2IVATI
  gpVertexStream2sATI C.GPVERTEXSTREAM2SATI
  gpVertexStream2svATI C.GPVERTEXSTREAM2SVATI
  gpVertexStream3dATI C.GPVERTEXSTREAM3DATI
  gpVertexStream3dvATI C.GPVERTEXSTREAM3DVATI
  gpVertexStream3fATI C.GPVERTEXSTREAM3FATI
  gpVertexStream3fvATI C.GPVERTEXSTREAM3FVATI
  gpVertexStream3iATI C.GPVERTEXSTREAM3IATI
  gpVertexStream3ivATI C.GPVERTEXSTREAM3IVATI
  gpVertexStream3sATI C.GPVERTEXSTREAM3SATI
  gpVertexStream3svATI C.GPVERTEXSTREAM3SVATI
  gpVertexStream4dATI C.GPVERTEXSTREAM4DATI
  gpVertexStream4dvATI C.GPVERTEXSTREAM4DVATI
  gpVertexStream4fATI C.GPVERTEXSTREAM4FATI
  gpVertexStream4fvATI C.GPVERTEXSTREAM4FVATI
  gpVertexStream4iATI C.GPVERTEXSTREAM4IATI
  gpVertexStream4ivATI C.GPVERTEXSTREAM4IVATI
  gpVertexStream4sATI C.GPVERTEXSTREAM4SATI
  gpVertexStream4svATI C.GPVERTEXSTREAM4SVATI
  gpVertexWeightPointerEXT C.GPVERTEXWEIGHTPOINTEREXT
  gpVertexWeightfEXT C.GPVERTEXWEIGHTFEXT
  gpVertexWeightfvEXT C.GPVERTEXWEIGHTFVEXT
  gpVertexWeighthNV C.GPVERTEXWEIGHTHNV
  gpVertexWeighthvNV C.GPVERTEXWEIGHTHVNV
  gpVideoCaptureNV C.GPVIDEOCAPTURENV
  gpVideoCaptureStreamParameterdvNV C.GPVIDEOCAPTURESTREAMPARAMETERDVNV
  gpVideoCaptureStreamParameterfvNV C.GPVIDEOCAPTURESTREAMPARAMETERFVNV
  gpVideoCaptureStreamParameterivNV C.GPVIDEOCAPTURESTREAMPARAMETERIVNV
  gpViewport C.GPVIEWPORT
  gpViewportArrayv C.GPVIEWPORTARRAYV
  gpViewportIndexedf C.GPVIEWPORTINDEXEDF
  gpViewportIndexedfv C.GPVIEWPORTINDEXEDFV
  gpWaitSync C.GPWAITSYNC
  gpWeightPathsNV C.GPWEIGHTPATHSNV
  gpWeightPointerARB C.GPWEIGHTPOINTERARB
  gpWeightbvARB C.GPWEIGHTBVARB
  gpWeightdvARB C.GPWEIGHTDVARB
  gpWeightfvARB C.GPWEIGHTFVARB
  gpWeightivARB C.GPWEIGHTIVARB
  gpWeightsvARB C.GPWEIGHTSVARB
  gpWeightubvARB C.GPWEIGHTUBVARB
  gpWeightuivARB C.GPWEIGHTUIVARB
  gpWeightusvARB C.GPWEIGHTUSVARB
  gpWindowPos2dARB C.GPWINDOWPOS2DARB
  gpWindowPos2dMESA C.GPWINDOWPOS2DMESA
  gpWindowPos2dvARB C.GPWINDOWPOS2DVARB
  gpWindowPos2dvMESA C.GPWINDOWPOS2DVMESA
  gpWindowPos2fARB C.GPWINDOWPOS2FARB
  gpWindowPos2fMESA C.GPWINDOWPOS2FMESA
  gpWindowPos2fvARB C.GPWINDOWPOS2FVARB
  gpWindowPos2fvMESA C.GPWINDOWPOS2FVMESA
  gpWindowPos2iARB C.GPWINDOWPOS2IARB
  gpWindowPos2iMESA C.GPWINDOWPOS2IMESA
  gpWindowPos2ivARB C.GPWINDOWPOS2IVARB
  gpWindowPos2ivMESA C.GPWINDOWPOS2IVMESA
  gpWindowPos2sARB C.GPWINDOWPOS2SARB
  gpWindowPos2sMESA C.GPWINDOWPOS2SMESA
  gpWindowPos2svARB C.GPWINDOWPOS2SVARB
  gpWindowPos2svMESA C.GPWINDOWPOS2SVMESA
  gpWindowPos3dARB C.GPWINDOWPOS3DARB
  gpWindowPos3dMESA C.GPWINDOWPOS3DMESA
  gpWindowPos3dvARB C.GPWINDOWPOS3DVARB
  gpWindowPos3dvMESA C.GPWINDOWPOS3DVMESA
  gpWindowPos3fARB C.GPWINDOWPOS3FARB
  gpWindowPos3fMESA C.GPWINDOWPOS3FMESA
  gpWindowPos3fvARB C.GPWINDOWPOS3FVARB
  gpWindowPos3fvMESA C.GPWINDOWPOS3FVMESA
  gpWindowPos3iARB C.GPWINDOWPOS3IARB
  gpWindowPos3iMESA C.GPWINDOWPOS3IMESA
  gpWindowPos3ivARB C.GPWINDOWPOS3IVARB
  gpWindowPos3ivMESA C.GPWINDOWPOS3IVMESA
  gpWindowPos3sARB C.GPWINDOWPOS3SARB
  gpWindowPos3sMESA C.GPWINDOWPOS3SMESA
  gpWindowPos3svARB C.GPWINDOWPOS3SVARB
  gpWindowPos3svMESA C.GPWINDOWPOS3SVMESA
  gpWindowPos4dMESA C.GPWINDOWPOS4DMESA
  gpWindowPos4dvMESA C.GPWINDOWPOS4DVMESA
  gpWindowPos4fMESA C.GPWINDOWPOS4FMESA
  gpWindowPos4fvMESA C.GPWINDOWPOS4FVMESA
  gpWindowPos4iMESA C.GPWINDOWPOS4IMESA
  gpWindowPos4ivMESA C.GPWINDOWPOS4IVMESA
  gpWindowPos4sMESA C.GPWINDOWPOS4SMESA
  gpWindowPos4svMESA C.GPWINDOWPOS4SVMESA
  gpWriteMaskEXT C.GPWRITEMASKEXT
)
var (
  AMD_debug_output = true
  AMD_draw_buffers_blend = true
  AMD_gpu_shader_int64 = true
  AMD_interleaved_elements = true
  AMD_multi_draw_indirect = true
  AMD_name_gen_delete = true
  AMD_occlusion_query_event = true
  AMD_performance_monitor = true
  AMD_sample_positions = true
  AMD_sparse_texture = true
  AMD_stencil_operation_extended = true
  AMD_vertex_shader_tessellator = true
  APPLE_element_array = true
  APPLE_fence = true
  APPLE_flush_buffer_range = true
  APPLE_object_purgeable = true
  APPLE_texture_range = true
  APPLE_vertex_array_object = true
  APPLE_vertex_array_range = true
  APPLE_vertex_program_evaluators = true
  ARB_ES2_compatibility = true
  ARB_base_instance = true
  ARB_bindless_texture = true
  ARB_blend_func_extended = true
  ARB_buffer_storage = true
  ARB_cl_event = true
  ARB_clear_buffer_object = true
  ARB_clear_texture = true
  ARB_color_buffer_float = true
  ARB_compute_shader = true
  ARB_compute_variable_group_size = true
  ARB_copy_buffer = true
  ARB_copy_image = true
  ARB_debug_output = true
  ARB_draw_buffers = true
  ARB_draw_buffers_blend = true
  ARB_draw_elements_base_vertex = true
  ARB_draw_indirect = true
  ARB_draw_instanced = true
  ARB_fragment_program = true
  ARB_framebuffer_no_attachments = true
  ARB_framebuffer_object = true
  ARB_geometry_shader4 = true
  ARB_get_program_binary = true
  ARB_gpu_shader_fp64 = true
  ARB_imaging = true
  ARB_indirect_parameters = true
  ARB_instanced_arrays = true
  ARB_internalformat_query = true
  ARB_internalformat_query2 = true
  ARB_invalidate_subdata = true
  ARB_map_buffer_range = true
  ARB_matrix_palette = true
  ARB_multi_bind = true
  ARB_multi_draw_indirect = true
  ARB_multisample = true
  ARB_multitexture = true
  ARB_occlusion_query = true
  ARB_point_parameters = true
  ARB_program_interface_query = true
  ARB_provoking_vertex = true
  ARB_robustness = true
  ARB_sample_shading = true
  ARB_sampler_objects = true
  ARB_separate_shader_objects = true
  ARB_shader_atomic_counters = true
  ARB_shader_image_load_store = true
  ARB_shader_objects = true
  ARB_shader_storage_buffer_object = true
  ARB_shader_subroutine = true
  ARB_shading_language_include = true
  ARB_sparse_texture = true
  ARB_sync = true
  ARB_tessellation_shader = true
  ARB_texture_buffer_object = true
  ARB_texture_buffer_range = true
  ARB_texture_compression = true
  ARB_texture_multisample = true
  ARB_texture_storage = true
  ARB_texture_storage_multisample = true
  ARB_texture_view = true
  ARB_timer_query = true
  ARB_transform_feedback2 = true
  ARB_transform_feedback3 = true
  ARB_transform_feedback_instanced = true
  ARB_transpose_matrix = true
  ARB_uniform_buffer_object = true
  ARB_vertex_array_object = true
  ARB_vertex_attrib_64bit = true
  ARB_vertex_attrib_binding = true
  ARB_vertex_blend = true
  ARB_vertex_buffer_object = true
  ARB_vertex_program = true
  ARB_vertex_shader = true
  ARB_vertex_type_2_10_10_10_rev = true
  ARB_viewport_array = true
  ARB_window_pos = true
  ATI_draw_buffers = true
  ATI_element_array = true
  ATI_envmap_bumpmap = true
  ATI_fragment_shader = true
  ATI_map_object_buffer = true
  ATI_pn_triangles = true
  ATI_separate_stencil = true
  ATI_vertex_array_object = true
  ATI_vertex_attrib_array_object = true
  ATI_vertex_streams = true
  EXT_bindable_uniform = true
  EXT_blend_color = true
  EXT_blend_equation_separate = true
  EXT_blend_func_separate = true
  EXT_blend_minmax = true
  EXT_color_subtable = true
  EXT_compiled_vertex_array = true
  EXT_convolution = true
  EXT_coordinate_frame = true
  EXT_copy_texture = true
  EXT_cull_vertex = true
  EXT_debug_label = true
  EXT_debug_marker = true
  EXT_depth_bounds_test = true
  EXT_direct_state_access = true
  EXT_draw_buffers2 = true
  EXT_draw_instanced = true
  EXT_draw_range_elements = true
  EXT_fog_coord = true
  EXT_framebuffer_blit = true
  EXT_framebuffer_multisample = true
  EXT_framebuffer_object = true
  EXT_geometry_shader4 = true
  EXT_gpu_program_parameters = true
  EXT_gpu_shader4 = true
  EXT_histogram = true
  EXT_index_func = true
  EXT_index_material = true
  EXT_light_texture = true
  EXT_multi_draw_arrays = true
  EXT_multisample = true
  EXT_paletted_texture = true
  EXT_pixel_transform = true
  EXT_point_parameters = true
  EXT_polygon_offset = true
  EXT_provoking_vertex = true
  EXT_secondary_color = true
  EXT_separate_shader_objects = true
  EXT_shader_image_load_store = true
  EXT_stencil_clear_tag = true
  EXT_stencil_two_side = true
  EXT_subtexture = true
  EXT_texture3D = true
  EXT_texture_array = true
  EXT_texture_buffer_object = true
  EXT_texture_integer = true
  EXT_texture_object = true
  EXT_texture_perturb_normal = true
  EXT_timer_query = true
  EXT_transform_feedback = true
  EXT_vertex_array = true
  EXT_vertex_attrib_64bit = true
  EXT_vertex_shader = true
  EXT_vertex_weighting = true
  EXT_x11_sync_object = true
  GL_3DFX_tbuffer = true
  GREMEDY_frame_terminator = true
  GREMEDY_string_marker = true
  HP_image_transform = true
  IBM_multimode_draw_arrays = true
  IBM_static_data = true
  IBM_vertex_array_lists = true
  INGR_blend_func_separate = true
  INTEL_map_texture = true
  INTEL_parallel_arrays = true
  INTEL_performance_query = true
  KHR_debug = true
  MESA_resize_buffers = true
  MESA_window_pos = true
  NVX_conditional_render = true
  NV_bindless_multi_draw_indirect = true
  NV_bindless_texture = true
  NV_blend_equation_advanced = true
  NV_conditional_render = true
  NV_copy_image = true
  NV_depth_buffer_float = true
  NV_draw_texture = true
  NV_evaluators = true
  NV_explicit_multisample = true
  NV_fence = true
  NV_fragment_program = true
  NV_framebuffer_multisample_coverage = true
  NV_geometry_program4 = true
  NV_gpu_program4 = true
  NV_gpu_program5 = true
  NV_gpu_shader5 = true
  NV_half_float = true
  NV_occlusion_query = true
  NV_parameter_buffer_object = true
  NV_path_rendering = true
  NV_pixel_data_range = true
  NV_point_sprite = true
  NV_present_video = true
  NV_primitive_restart = true
  NV_register_combiners = true
  NV_register_combiners2 = true
  NV_shader_buffer_load = true
  NV_texture_barrier = true
  NV_texture_multisample = true
  NV_transform_feedback = true
  NV_transform_feedback2 = true
  NV_vdpau_interop = true
  NV_vertex_array_range = true
  NV_vertex_attrib_integer_64bit = true
  NV_vertex_buffer_unified_memory = true
  NV_vertex_program = true
  NV_vertex_program4 = true
  NV_video_capture = true
  OES_byte_coordinates = true
  OES_fixed_point = true
  OES_query_matrix = true
  OES_single_precision = true
  PGI_misc_hints = true
  SGIS_detail_texture = true
  SGIS_fog_function = true
  SGIS_multisample = true
  SGIS_pixel_texture = true
  SGIS_point_parameters = true
  SGIS_sharpen_texture = true
  SGIS_texture4D = true
  SGIS_texture_color_mask = true
  SGIS_texture_filter4 = true
  SGIX_async = true
  SGIX_flush_raster = true
  SGIX_fragment_lighting = true
  SGIX_framezoom = true
  SGIX_igloo_interface = true
  SGIX_instruments = true
  SGIX_list_priority = true
  SGIX_pixel_texture = true
  SGIX_polynomial_ffd = true
  SGIX_reference_plane = true
  SGIX_sprite = true
  SGIX_tag_sample_buffer = true
  SGI_color_table = true
  SUNX_constant_data = true
  SUN_global_alpha = true
  SUN_mesh_array = true
  SUN_triangle_list = true
  SUN_vertex = true
)
// Helper functions
func boolToInt(b bool) int {
	if b { return 1 }
	return 0
}
func AccumxOES(op uint32, value int32) {
  C.glowAccumxOES(gpAccumxOES, (C.GLenum)(op), (C.GLfixed)(value))
}
func ActiveProgramEXT(program uint32) {
  C.glowActiveProgramEXT(gpActiveProgramEXT, (C.GLuint)(program))
}
// set the active program object for a program pipeline object
func ActiveShaderProgram(pipeline uint32, program uint32) {
  C.glowActiveShaderProgram(gpActiveShaderProgram, (C.GLuint)(pipeline), (C.GLuint)(program))
}
func ActiveShaderProgramEXT(pipeline uint32, program uint32) {
  C.glowActiveShaderProgramEXT(gpActiveShaderProgramEXT, (C.GLuint)(pipeline), (C.GLuint)(program))
}
func ActiveStencilFaceEXT(face uint32) {
  C.glowActiveStencilFaceEXT(gpActiveStencilFaceEXT, (C.GLenum)(face))
}
// select active texture unit
func ActiveTexture(texture uint32) {
  C.glowActiveTexture(gpActiveTexture, (C.GLenum)(texture))
}
func ActiveTextureARB(texture uint32) {
  C.glowActiveTextureARB(gpActiveTextureARB, (C.GLenum)(texture))
}
func ActiveVaryingNV(program uint32, name *int8) {
  C.glowActiveVaryingNV(gpActiveVaryingNV, (C.GLuint)(program), (*C.GLchar)(unsafe.Pointer(name)))
}
func AlphaFragmentOp1ATI(op uint32, dst uint32, dstMod uint32, arg1 uint32, arg1Rep uint32, arg1Mod uint32) {
  C.glowAlphaFragmentOp1ATI(gpAlphaFragmentOp1ATI, (C.GLenum)(op), (C.GLuint)(dst), (C.GLuint)(dstMod), (C.GLuint)(arg1), (C.GLuint)(arg1Rep), (C.GLuint)(arg1Mod))
}
func AlphaFragmentOp2ATI(op uint32, dst uint32, dstMod uint32, arg1 uint32, arg1Rep uint32, arg1Mod uint32, arg2 uint32, arg2Rep uint32, arg2Mod uint32) {
  C.glowAlphaFragmentOp2ATI(gpAlphaFragmentOp2ATI, (C.GLenum)(op), (C.GLuint)(dst), (C.GLuint)(dstMod), (C.GLuint)(arg1), (C.GLuint)(arg1Rep), (C.GLuint)(arg1Mod), (C.GLuint)(arg2), (C.GLuint)(arg2Rep), (C.GLuint)(arg2Mod))
}
func AlphaFragmentOp3ATI(op uint32, dst uint32, dstMod uint32, arg1 uint32, arg1Rep uint32, arg1Mod uint32, arg2 uint32, arg2Rep uint32, arg2Mod uint32, arg3 uint32, arg3Rep uint32, arg3Mod uint32) {
  C.glowAlphaFragmentOp3ATI(gpAlphaFragmentOp3ATI, (C.GLenum)(op), (C.GLuint)(dst), (C.GLuint)(dstMod), (C.GLuint)(arg1), (C.GLuint)(arg1Rep), (C.GLuint)(arg1Mod), (C.GLuint)(arg2), (C.GLuint)(arg2Rep), (C.GLuint)(arg2Mod), (C.GLuint)(arg3), (C.GLuint)(arg3Rep), (C.GLuint)(arg3Mod))
}
func AlphaFuncxOES(xfunc uint32, ref int32) {
  C.glowAlphaFuncxOES(gpAlphaFuncxOES, (C.GLenum)(xfunc), (C.GLfixed)(ref))
}
func ApplyTextureEXT(mode uint32) {
  C.glowApplyTextureEXT(gpApplyTextureEXT, (C.GLenum)(mode))
}
func AreProgramsResidentNV(n int32, programs *uint32, residences *bool) bool {
  ret := C.glowAreProgramsResidentNV(gpAreProgramsResidentNV, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(programs)), (*C.GLboolean)(unsafe.Pointer(residences)))
  return ret == TRUE
}
func AreTexturesResidentEXT(n int32, textures *uint32, residences *bool) bool {
  ret := C.glowAreTexturesResidentEXT(gpAreTexturesResidentEXT, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(textures)), (*C.GLboolean)(unsafe.Pointer(residences)))
  return ret == TRUE
}
func ArrayElementEXT(i int32) {
  C.glowArrayElementEXT(gpArrayElementEXT, (C.GLint)(i))
}
func ArrayObjectATI(array uint32, size int32, xtype uint32, stride int32, buffer uint32, offset uint32) {
  C.glowArrayObjectATI(gpArrayObjectATI, (C.GLenum)(array), (C.GLint)(size), (C.GLenum)(xtype), (C.GLsizei)(stride), (C.GLuint)(buffer), (C.GLuint)(offset))
}
func AsyncMarkerSGIX(marker uint32) {
  C.glowAsyncMarkerSGIX(gpAsyncMarkerSGIX, (C.GLuint)(marker))
}
func AttachObjectARB(containerObj uintptr, obj uintptr) {
  C.glowAttachObjectARB(gpAttachObjectARB, (C.GLhandleARB)(containerObj), (C.GLhandleARB)(obj))
}
// Attaches a shader object to a program object
func AttachShader(program uint32, shader uint32) {
  C.glowAttachShader(gpAttachShader, (C.GLuint)(program), (C.GLuint)(shader))
}
// start conditional rendering
func BeginConditionalRender(id uint32, mode uint32) {
  C.glowBeginConditionalRender(gpBeginConditionalRender, (C.GLuint)(id), (C.GLenum)(mode))
}
func BeginConditionalRenderNV(id uint32, mode uint32) {
  C.glowBeginConditionalRenderNV(gpBeginConditionalRenderNV, (C.GLuint)(id), (C.GLenum)(mode))
}
func BeginConditionalRenderNVX(id uint32) {
  C.glowBeginConditionalRenderNVX(gpBeginConditionalRenderNVX, (C.GLuint)(id))
}
func BeginFragmentShaderATI() {
  C.glowBeginFragmentShaderATI(gpBeginFragmentShaderATI)
}
func BeginOcclusionQueryNV(id uint32) {
  C.glowBeginOcclusionQueryNV(gpBeginOcclusionQueryNV, (C.GLuint)(id))
}
func BeginPerfMonitorAMD(monitor uint32) {
  C.glowBeginPerfMonitorAMD(gpBeginPerfMonitorAMD, (C.GLuint)(monitor))
}
func BeginPerfQueryINTEL(queryHandle uint32) {
  C.glowBeginPerfQueryINTEL(gpBeginPerfQueryINTEL, (C.GLuint)(queryHandle))
}
// delimit the boundaries of a query object
func BeginQuery(target uint32, id uint32) {
  C.glowBeginQuery(gpBeginQuery, (C.GLenum)(target), (C.GLuint)(id))
}
func BeginQueryARB(target uint32, id uint32) {
  C.glowBeginQueryARB(gpBeginQueryARB, (C.GLenum)(target), (C.GLuint)(id))
}
func BeginQueryIndexed(target uint32, index uint32, id uint32) {
  C.glowBeginQueryIndexed(gpBeginQueryIndexed, (C.GLenum)(target), (C.GLuint)(index), (C.GLuint)(id))
}
// start transform feedback operation
func BeginTransformFeedback(primitiveMode uint32) {
  C.glowBeginTransformFeedback(gpBeginTransformFeedback, (C.GLenum)(primitiveMode))
}
func BeginTransformFeedbackEXT(primitiveMode uint32) {
  C.glowBeginTransformFeedbackEXT(gpBeginTransformFeedbackEXT, (C.GLenum)(primitiveMode))
}
func BeginTransformFeedbackNV(primitiveMode uint32) {
  C.glowBeginTransformFeedbackNV(gpBeginTransformFeedbackNV, (C.GLenum)(primitiveMode))
}
func BeginVertexShaderEXT() {
  C.glowBeginVertexShaderEXT(gpBeginVertexShaderEXT)
}
func BeginVideoCaptureNV(video_capture_slot uint32) {
  C.glowBeginVideoCaptureNV(gpBeginVideoCaptureNV, (C.GLuint)(video_capture_slot))
}
// Associates a generic vertex attribute index with a named attribute variable
func BindAttribLocation(program uint32, index uint32, name *int8) {
  C.glowBindAttribLocation(gpBindAttribLocation, (C.GLuint)(program), (C.GLuint)(index), (*C.GLchar)(unsafe.Pointer(name)))
}
func BindAttribLocationARB(programObj uintptr, index uint32, name *int8) {
  C.glowBindAttribLocationARB(gpBindAttribLocationARB, (C.GLhandleARB)(programObj), (C.GLuint)(index), (*C.GLcharARB)(unsafe.Pointer(name)))
}
// bind a named buffer object
func BindBuffer(target uint32, buffer uint32) {
  C.glowBindBuffer(gpBindBuffer, (C.GLenum)(target), (C.GLuint)(buffer))
}
func BindBufferARB(target uint32, buffer uint32) {
  C.glowBindBufferARB(gpBindBufferARB, (C.GLenum)(target), (C.GLuint)(buffer))
}
// bind a buffer object to an indexed buffer target
func BindBufferBase(target uint32, index uint32, buffer uint32) {
  C.glowBindBufferBase(gpBindBufferBase, (C.GLenum)(target), (C.GLuint)(index), (C.GLuint)(buffer))
}
func BindBufferBaseEXT(target uint32, index uint32, buffer uint32) {
  C.glowBindBufferBaseEXT(gpBindBufferBaseEXT, (C.GLenum)(target), (C.GLuint)(index), (C.GLuint)(buffer))
}
func BindBufferBaseNV(target uint32, index uint32, buffer uint32) {
  C.glowBindBufferBaseNV(gpBindBufferBaseNV, (C.GLenum)(target), (C.GLuint)(index), (C.GLuint)(buffer))
}
func BindBufferOffsetEXT(target uint32, index uint32, buffer uint32, offset int) {
  C.glowBindBufferOffsetEXT(gpBindBufferOffsetEXT, (C.GLenum)(target), (C.GLuint)(index), (C.GLuint)(buffer), (C.GLintptr)(offset))
}
func BindBufferOffsetNV(target uint32, index uint32, buffer uint32, offset int) {
  C.glowBindBufferOffsetNV(gpBindBufferOffsetNV, (C.GLenum)(target), (C.GLuint)(index), (C.GLuint)(buffer), (C.GLintptr)(offset))
}
// bind a range within a buffer object to an indexed buffer target
func BindBufferRange(target uint32, index uint32, buffer uint32, offset int, size int) {
  C.glowBindBufferRange(gpBindBufferRange, (C.GLenum)(target), (C.GLuint)(index), (C.GLuint)(buffer), (C.GLintptr)(offset), (C.GLsizeiptr)(size))
}
func BindBufferRangeEXT(target uint32, index uint32, buffer uint32, offset int, size int) {
  C.glowBindBufferRangeEXT(gpBindBufferRangeEXT, (C.GLenum)(target), (C.GLuint)(index), (C.GLuint)(buffer), (C.GLintptr)(offset), (C.GLsizeiptr)(size))
}
func BindBufferRangeNV(target uint32, index uint32, buffer uint32, offset int, size int) {
  C.glowBindBufferRangeNV(gpBindBufferRangeNV, (C.GLenum)(target), (C.GLuint)(index), (C.GLuint)(buffer), (C.GLintptr)(offset), (C.GLsizeiptr)(size))
}
// bind one or more buffer objects to a sequence of indexed buffer targets
func BindBuffersBase(target uint32, first uint32, count int32, buffers *uint32) {
  C.glowBindBuffersBase(gpBindBuffersBase, (C.GLenum)(target), (C.GLuint)(first), (C.GLsizei)(count), (*C.GLuint)(unsafe.Pointer(buffers)))
}
// bind ranges of one or more buffer objects to a sequence of indexed buffer targets
func BindBuffersRange(target uint32, first uint32, count int32, buffers *uint32, offsets *int, sizes *int) {
  C.glowBindBuffersRange(gpBindBuffersRange, (C.GLenum)(target), (C.GLuint)(first), (C.GLsizei)(count), (*C.GLuint)(unsafe.Pointer(buffers)), (*C.GLintptr)(unsafe.Pointer(offsets)), (*C.GLsizeiptr)(unsafe.Pointer(sizes)))
}
// bind a user-defined varying out variable to a fragment shader color number
func BindFragDataLocation(program uint32, color uint32, name *int8) {
  C.glowBindFragDataLocation(gpBindFragDataLocation, (C.GLuint)(program), (C.GLuint)(color), (*C.GLchar)(unsafe.Pointer(name)))
}
func BindFragDataLocationEXT(program uint32, color uint32, name *int8) {
  C.glowBindFragDataLocationEXT(gpBindFragDataLocationEXT, (C.GLuint)(program), (C.GLuint)(color), (*C.GLchar)(unsafe.Pointer(name)))
}
// bind a user-defined varying out variable to a fragment shader color number and index
func BindFragDataLocationIndexed(program uint32, colorNumber uint32, index uint32, name *int8) {
  C.glowBindFragDataLocationIndexed(gpBindFragDataLocationIndexed, (C.GLuint)(program), (C.GLuint)(colorNumber), (C.GLuint)(index), (*C.GLchar)(unsafe.Pointer(name)))
}
func BindFragmentShaderATI(id uint32) {
  C.glowBindFragmentShaderATI(gpBindFragmentShaderATI, (C.GLuint)(id))
}
// bind a framebuffer to a framebuffer target
func BindFramebuffer(target uint32, framebuffer uint32) {
  C.glowBindFramebuffer(gpBindFramebuffer, (C.GLenum)(target), (C.GLuint)(framebuffer))
}
func BindFramebufferEXT(target uint32, framebuffer uint32) {
  C.glowBindFramebufferEXT(gpBindFramebufferEXT, (C.GLenum)(target), (C.GLuint)(framebuffer))
}
// bind a level of a texture to an image unit
func BindImageTexture(unit uint32, texture uint32, level int32, layered bool, layer int32, access uint32, format uint32) {
  C.glowBindImageTexture(gpBindImageTexture, (C.GLuint)(unit), (C.GLuint)(texture), (C.GLint)(level), (C.GLboolean)(boolToInt(layered)), (C.GLint)(layer), (C.GLenum)(access), (C.GLenum)(format))
}
func BindImageTextureEXT(index uint32, texture uint32, level int32, layered bool, layer int32, access uint32, format int32) {
  C.glowBindImageTextureEXT(gpBindImageTextureEXT, (C.GLuint)(index), (C.GLuint)(texture), (C.GLint)(level), (C.GLboolean)(boolToInt(layered)), (C.GLint)(layer), (C.GLenum)(access), (C.GLint)(format))
}
// bind one or more named texture images to a sequence of consecutive image units
func BindImageTextures(first uint32, count int32, textures *uint32) {
  C.glowBindImageTextures(gpBindImageTextures, (C.GLuint)(first), (C.GLsizei)(count), (*C.GLuint)(unsafe.Pointer(textures)))
}
func BindLightParameterEXT(light uint32, value uint32) uint32 {
  ret := C.glowBindLightParameterEXT(gpBindLightParameterEXT, (C.GLenum)(light), (C.GLenum)(value))
  return (uint32)(ret)
}
func BindMaterialParameterEXT(face uint32, value uint32) uint32 {
  ret := C.glowBindMaterialParameterEXT(gpBindMaterialParameterEXT, (C.GLenum)(face), (C.GLenum)(value))
  return (uint32)(ret)
}
func BindMultiTextureEXT(texunit uint32, target uint32, texture uint32) {
  C.glowBindMultiTextureEXT(gpBindMultiTextureEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLuint)(texture))
}
func BindParameterEXT(value uint32) uint32 {
  ret := C.glowBindParameterEXT(gpBindParameterEXT, (C.GLenum)(value))
  return (uint32)(ret)
}
func BindProgramARB(target uint32, program uint32) {
  C.glowBindProgramARB(gpBindProgramARB, (C.GLenum)(target), (C.GLuint)(program))
}
func BindProgramNV(target uint32, id uint32) {
  C.glowBindProgramNV(gpBindProgramNV, (C.GLenum)(target), (C.GLuint)(id))
}
// bind a program pipeline to the current context
func BindProgramPipeline(pipeline uint32) {
  C.glowBindProgramPipeline(gpBindProgramPipeline, (C.GLuint)(pipeline))
}
func BindProgramPipelineEXT(pipeline uint32) {
  C.glowBindProgramPipelineEXT(gpBindProgramPipelineEXT, (C.GLuint)(pipeline))
}
// bind a renderbuffer to a renderbuffer target
func BindRenderbuffer(target uint32, renderbuffer uint32) {
  C.glowBindRenderbuffer(gpBindRenderbuffer, (C.GLenum)(target), (C.GLuint)(renderbuffer))
}
func BindRenderbufferEXT(target uint32, renderbuffer uint32) {
  C.glowBindRenderbufferEXT(gpBindRenderbufferEXT, (C.GLenum)(target), (C.GLuint)(renderbuffer))
}
// bind a named sampler to a texturing target
func BindSampler(unit uint32, sampler uint32) {
  C.glowBindSampler(gpBindSampler, (C.GLuint)(unit), (C.GLuint)(sampler))
}
// bind one or more named sampler objects to a sequence of consecutive sampler units
func BindSamplers(first uint32, count int32, samplers *uint32) {
  C.glowBindSamplers(gpBindSamplers, (C.GLuint)(first), (C.GLsizei)(count), (*C.GLuint)(unsafe.Pointer(samplers)))
}
func BindTexGenParameterEXT(unit uint32, coord uint32, value uint32) uint32 {
  ret := C.glowBindTexGenParameterEXT(gpBindTexGenParameterEXT, (C.GLenum)(unit), (C.GLenum)(coord), (C.GLenum)(value))
  return (uint32)(ret)
}
// bind a named texture to a texturing target
func BindTexture(target uint32, texture uint32) {
  C.glowBindTexture(gpBindTexture, (C.GLenum)(target), (C.GLuint)(texture))
}
func BindTextureEXT(target uint32, texture uint32) {
  C.glowBindTextureEXT(gpBindTextureEXT, (C.GLenum)(target), (C.GLuint)(texture))
}
func BindTextureUnitParameterEXT(unit uint32, value uint32) uint32 {
  ret := C.glowBindTextureUnitParameterEXT(gpBindTextureUnitParameterEXT, (C.GLenum)(unit), (C.GLenum)(value))
  return (uint32)(ret)
}
// bind one or more named textures to a sequence of consecutive texture units
func BindTextures(first uint32, count int32, textures *uint32) {
  C.glowBindTextures(gpBindTextures, (C.GLuint)(first), (C.GLsizei)(count), (*C.GLuint)(unsafe.Pointer(textures)))
}
// bind a transform feedback object
func BindTransformFeedback(target uint32, id uint32) {
  C.glowBindTransformFeedback(gpBindTransformFeedback, (C.GLenum)(target), (C.GLuint)(id))
}
func BindTransformFeedbackNV(target uint32, id uint32) {
  C.glowBindTransformFeedbackNV(gpBindTransformFeedbackNV, (C.GLenum)(target), (C.GLuint)(id))
}
// bind a vertex array object
func BindVertexArray(array uint32) {
  C.glowBindVertexArray(gpBindVertexArray, (C.GLuint)(array))
}
func BindVertexArrayAPPLE(array uint32) {
  C.glowBindVertexArrayAPPLE(gpBindVertexArrayAPPLE, (C.GLuint)(array))
}
// bind a buffer to a vertex buffer bind point
func BindVertexBuffer(bindingindex uint32, buffer uint32, offset int, stride int32) {
  C.glowBindVertexBuffer(gpBindVertexBuffer, (C.GLuint)(bindingindex), (C.GLuint)(buffer), (C.GLintptr)(offset), (C.GLsizei)(stride))
}
// bind one or more named buffer objects to a sequence of consecutive vertex buffer binding points
func BindVertexBuffers(first uint32, count int32, buffers *uint32, offsets *int, strides *int32) {
  C.glowBindVertexBuffers(gpBindVertexBuffers, (C.GLuint)(first), (C.GLsizei)(count), (*C.GLuint)(unsafe.Pointer(buffers)), (*C.GLintptr)(unsafe.Pointer(offsets)), (*C.GLsizei)(unsafe.Pointer(strides)))
}
func BindVertexShaderEXT(id uint32) {
  C.glowBindVertexShaderEXT(gpBindVertexShaderEXT, (C.GLuint)(id))
}
func BindVideoCaptureStreamBufferNV(video_capture_slot uint32, stream uint32, frame_region uint32, offset int) {
  C.glowBindVideoCaptureStreamBufferNV(gpBindVideoCaptureStreamBufferNV, (C.GLuint)(video_capture_slot), (C.GLuint)(stream), (C.GLenum)(frame_region), (C.GLintptrARB)(offset))
}
func BindVideoCaptureStreamTextureNV(video_capture_slot uint32, stream uint32, frame_region uint32, target uint32, texture uint32) {
  C.glowBindVideoCaptureStreamTextureNV(gpBindVideoCaptureStreamTextureNV, (C.GLuint)(video_capture_slot), (C.GLuint)(stream), (C.GLenum)(frame_region), (C.GLenum)(target), (C.GLuint)(texture))
}
func Binormal3bEXT(bx int8, by int8, bz int8) {
  C.glowBinormal3bEXT(gpBinormal3bEXT, (C.GLbyte)(bx), (C.GLbyte)(by), (C.GLbyte)(bz))
}
func Binormal3bvEXT(v *int8) {
  C.glowBinormal3bvEXT(gpBinormal3bvEXT, (*C.GLbyte)(unsafe.Pointer(v)))
}
func Binormal3dEXT(bx float64, by float64, bz float64) {
  C.glowBinormal3dEXT(gpBinormal3dEXT, (C.GLdouble)(bx), (C.GLdouble)(by), (C.GLdouble)(bz))
}
func Binormal3dvEXT(v *float64) {
  C.glowBinormal3dvEXT(gpBinormal3dvEXT, (*C.GLdouble)(unsafe.Pointer(v)))
}
func Binormal3fEXT(bx float32, by float32, bz float32) {
  C.glowBinormal3fEXT(gpBinormal3fEXT, (C.GLfloat)(bx), (C.GLfloat)(by), (C.GLfloat)(bz))
}
func Binormal3fvEXT(v *float32) {
  C.glowBinormal3fvEXT(gpBinormal3fvEXT, (*C.GLfloat)(unsafe.Pointer(v)))
}
func Binormal3iEXT(bx int32, by int32, bz int32) {
  C.glowBinormal3iEXT(gpBinormal3iEXT, (C.GLint)(bx), (C.GLint)(by), (C.GLint)(bz))
}
func Binormal3ivEXT(v *int32) {
  C.glowBinormal3ivEXT(gpBinormal3ivEXT, (*C.GLint)(unsafe.Pointer(v)))
}
func Binormal3sEXT(bx int16, by int16, bz int16) {
  C.glowBinormal3sEXT(gpBinormal3sEXT, (C.GLshort)(bx), (C.GLshort)(by), (C.GLshort)(bz))
}
func Binormal3svEXT(v *int16) {
  C.glowBinormal3svEXT(gpBinormal3svEXT, (*C.GLshort)(unsafe.Pointer(v)))
}
func BinormalPointerEXT(xtype uint32, stride int32, pointer unsafe.Pointer) {
  C.glowBinormalPointerEXT(gpBinormalPointerEXT, (C.GLenum)(xtype), (C.GLsizei)(stride), pointer)
}
func BitmapxOES(width int32, height int32, xorig int32, yorig int32, xmove int32, ymove int32, bitmap *uint8) {
  C.glowBitmapxOES(gpBitmapxOES, (C.GLsizei)(width), (C.GLsizei)(height), (C.GLfixed)(xorig), (C.GLfixed)(yorig), (C.GLfixed)(xmove), (C.GLfixed)(ymove), (*C.GLubyte)(unsafe.Pointer(bitmap)))
}
func BlendBarrierNV() {
  C.glowBlendBarrierNV(gpBlendBarrierNV)
}
// set the blend color
func BlendColor(red float32, green float32, blue float32, alpha float32) {
  C.glowBlendColor(gpBlendColor, (C.GLfloat)(red), (C.GLfloat)(green), (C.GLfloat)(blue), (C.GLfloat)(alpha))
}
func BlendColorEXT(red float32, green float32, blue float32, alpha float32) {
  C.glowBlendColorEXT(gpBlendColorEXT, (C.GLfloat)(red), (C.GLfloat)(green), (C.GLfloat)(blue), (C.GLfloat)(alpha))
}
func BlendColorxOES(red int32, green int32, blue int32, alpha int32) {
  C.glowBlendColorxOES(gpBlendColorxOES, (C.GLfixed)(red), (C.GLfixed)(green), (C.GLfixed)(blue), (C.GLfixed)(alpha))
}
// specify the equation used for both the RGB blend equation and the Alpha blend equation
func BlendEquation(mode uint32) {
  C.glowBlendEquation(gpBlendEquation, (C.GLenum)(mode))
}
func BlendEquationEXT(mode uint32) {
  C.glowBlendEquationEXT(gpBlendEquationEXT, (C.GLenum)(mode))
}
func BlendEquationIndexedAMD(buf uint32, mode uint32) {
  C.glowBlendEquationIndexedAMD(gpBlendEquationIndexedAMD, (C.GLuint)(buf), (C.GLenum)(mode))
}
// set the RGB blend equation and the alpha blend equation separately
func BlendEquationSeparate(modeRGB uint32, modeAlpha uint32) {
  C.glowBlendEquationSeparate(gpBlendEquationSeparate, (C.GLenum)(modeRGB), (C.GLenum)(modeAlpha))
}
func BlendEquationSeparateEXT(modeRGB uint32, modeAlpha uint32) {
  C.glowBlendEquationSeparateEXT(gpBlendEquationSeparateEXT, (C.GLenum)(modeRGB), (C.GLenum)(modeAlpha))
}
func BlendEquationSeparateIndexedAMD(buf uint32, modeRGB uint32, modeAlpha uint32) {
  C.glowBlendEquationSeparateIndexedAMD(gpBlendEquationSeparateIndexedAMD, (C.GLuint)(buf), (C.GLenum)(modeRGB), (C.GLenum)(modeAlpha))
}
func BlendEquationSeparateiARB(buf uint32, modeRGB uint32, modeAlpha uint32) {
  C.glowBlendEquationSeparateiARB(gpBlendEquationSeparateiARB, (C.GLuint)(buf), (C.GLenum)(modeRGB), (C.GLenum)(modeAlpha))
}
func BlendEquationiARB(buf uint32, mode uint32) {
  C.glowBlendEquationiARB(gpBlendEquationiARB, (C.GLuint)(buf), (C.GLenum)(mode))
}
// specify pixel arithmetic
func BlendFunc(sfactor uint32, dfactor uint32) {
  C.glowBlendFunc(gpBlendFunc, (C.GLenum)(sfactor), (C.GLenum)(dfactor))
}
func BlendFuncIndexedAMD(buf uint32, src uint32, dst uint32) {
  C.glowBlendFuncIndexedAMD(gpBlendFuncIndexedAMD, (C.GLuint)(buf), (C.GLenum)(src), (C.GLenum)(dst))
}
// specify pixel arithmetic for RGB and alpha components separately
func BlendFuncSeparate(sfactorRGB uint32, dfactorRGB uint32, sfactorAlpha uint32, dfactorAlpha uint32) {
  C.glowBlendFuncSeparate(gpBlendFuncSeparate, (C.GLenum)(sfactorRGB), (C.GLenum)(dfactorRGB), (C.GLenum)(sfactorAlpha), (C.GLenum)(dfactorAlpha))
}
func BlendFuncSeparateEXT(sfactorRGB uint32, dfactorRGB uint32, sfactorAlpha uint32, dfactorAlpha uint32) {
  C.glowBlendFuncSeparateEXT(gpBlendFuncSeparateEXT, (C.GLenum)(sfactorRGB), (C.GLenum)(dfactorRGB), (C.GLenum)(sfactorAlpha), (C.GLenum)(dfactorAlpha))
}
func BlendFuncSeparateINGR(sfactorRGB uint32, dfactorRGB uint32, sfactorAlpha uint32, dfactorAlpha uint32) {
  C.glowBlendFuncSeparateINGR(gpBlendFuncSeparateINGR, (C.GLenum)(sfactorRGB), (C.GLenum)(dfactorRGB), (C.GLenum)(sfactorAlpha), (C.GLenum)(dfactorAlpha))
}
func BlendFuncSeparateIndexedAMD(buf uint32, srcRGB uint32, dstRGB uint32, srcAlpha uint32, dstAlpha uint32) {
  C.glowBlendFuncSeparateIndexedAMD(gpBlendFuncSeparateIndexedAMD, (C.GLuint)(buf), (C.GLenum)(srcRGB), (C.GLenum)(dstRGB), (C.GLenum)(srcAlpha), (C.GLenum)(dstAlpha))
}
func BlendFuncSeparateiARB(buf uint32, srcRGB uint32, dstRGB uint32, srcAlpha uint32, dstAlpha uint32) {
  C.glowBlendFuncSeparateiARB(gpBlendFuncSeparateiARB, (C.GLuint)(buf), (C.GLenum)(srcRGB), (C.GLenum)(dstRGB), (C.GLenum)(srcAlpha), (C.GLenum)(dstAlpha))
}
func BlendFunciARB(buf uint32, src uint32, dst uint32) {
  C.glowBlendFunciARB(gpBlendFunciARB, (C.GLuint)(buf), (C.GLenum)(src), (C.GLenum)(dst))
}
func BlendParameteriNV(pname uint32, value int32) {
  C.glowBlendParameteriNV(gpBlendParameteriNV, (C.GLenum)(pname), (C.GLint)(value))
}
// copy a block of pixels from the read framebuffer to the draw framebuffer
func BlitFramebuffer(srcX0 int32, srcY0 int32, srcX1 int32, srcY1 int32, dstX0 int32, dstY0 int32, dstX1 int32, dstY1 int32, mask uint32, filter uint32) {
  C.glowBlitFramebuffer(gpBlitFramebuffer, (C.GLint)(srcX0), (C.GLint)(srcY0), (C.GLint)(srcX1), (C.GLint)(srcY1), (C.GLint)(dstX0), (C.GLint)(dstY0), (C.GLint)(dstX1), (C.GLint)(dstY1), (C.GLbitfield)(mask), (C.GLenum)(filter))
}
func BlitFramebufferEXT(srcX0 int32, srcY0 int32, srcX1 int32, srcY1 int32, dstX0 int32, dstY0 int32, dstX1 int32, dstY1 int32, mask uint32, filter uint32) {
  C.glowBlitFramebufferEXT(gpBlitFramebufferEXT, (C.GLint)(srcX0), (C.GLint)(srcY0), (C.GLint)(srcX1), (C.GLint)(srcY1), (C.GLint)(dstX0), (C.GLint)(dstY0), (C.GLint)(dstX1), (C.GLint)(dstY1), (C.GLbitfield)(mask), (C.GLenum)(filter))
}
func BufferAddressRangeNV(pname uint32, index uint32, address uint64, length int) {
  C.glowBufferAddressRangeNV(gpBufferAddressRangeNV, (C.GLenum)(pname), (C.GLuint)(index), (C.GLuint64EXT)(address), (C.GLsizeiptr)(length))
}
// creates and initializes a buffer object's data store
func BufferData(target uint32, size int, data unsafe.Pointer, usage uint32) {
  C.glowBufferData(gpBufferData, (C.GLenum)(target), (C.GLsizeiptr)(size), data, (C.GLenum)(usage))
}
func BufferDataARB(target uint32, size int, data unsafe.Pointer, usage uint32) {
  C.glowBufferDataARB(gpBufferDataARB, (C.GLenum)(target), (C.GLsizeiptrARB)(size), data, (C.GLenum)(usage))
}
func BufferParameteriAPPLE(target uint32, pname uint32, param int32) {
  C.glowBufferParameteriAPPLE(gpBufferParameteriAPPLE, (C.GLenum)(target), (C.GLenum)(pname), (C.GLint)(param))
}
// creates and initializes a buffer object's immutable data store
func BufferStorage(target uint32, size int, data unsafe.Pointer, flags uint32) {
  C.glowBufferStorage(gpBufferStorage, (C.GLenum)(target), (C.GLsizeiptr)(size), data, (C.GLbitfield)(flags))
}
// updates a subset of a buffer object's data store
func BufferSubData(target uint32, offset int, size int, data unsafe.Pointer) {
  C.glowBufferSubData(gpBufferSubData, (C.GLenum)(target), (C.GLintptr)(offset), (C.GLsizeiptr)(size), data)
}
func BufferSubDataARB(target uint32, offset int, size int, data unsafe.Pointer) {
  C.glowBufferSubDataARB(gpBufferSubDataARB, (C.GLenum)(target), (C.GLintptrARB)(offset), (C.GLsizeiptrARB)(size), data)
}
// check the completeness status of a framebuffer
func CheckFramebufferStatus(target uint32) uint32 {
  ret := C.glowCheckFramebufferStatus(gpCheckFramebufferStatus, (C.GLenum)(target))
  return (uint32)(ret)
}
func CheckFramebufferStatusEXT(target uint32) uint32 {
  ret := C.glowCheckFramebufferStatusEXT(gpCheckFramebufferStatusEXT, (C.GLenum)(target))
  return (uint32)(ret)
}
func CheckNamedFramebufferStatusEXT(framebuffer uint32, target uint32) uint32 {
  ret := C.glowCheckNamedFramebufferStatusEXT(gpCheckNamedFramebufferStatusEXT, (C.GLuint)(framebuffer), (C.GLenum)(target))
  return (uint32)(ret)
}
// specify whether data read via  should be clamped
func ClampColor(target uint32, clamp uint32) {
  C.glowClampColor(gpClampColor, (C.GLenum)(target), (C.GLenum)(clamp))
}
func ClampColorARB(target uint32, clamp uint32) {
  C.glowClampColorARB(gpClampColorARB, (C.GLenum)(target), (C.GLenum)(clamp))
}
// clear buffers to preset values
func Clear(mask uint32) {
  C.glowClear(gpClear, (C.GLbitfield)(mask))
}
func ClearAccumxOES(red int32, green int32, blue int32, alpha int32) {
  C.glowClearAccumxOES(gpClearAccumxOES, (C.GLfixed)(red), (C.GLfixed)(green), (C.GLfixed)(blue), (C.GLfixed)(alpha))
}
// fill a buffer object's data store with a fixed value
func ClearBufferData(target uint32, internalformat uint32, format uint32, xtype uint32, data unsafe.Pointer) {
  C.glowClearBufferData(gpClearBufferData, (C.GLenum)(target), (C.GLenum)(internalformat), (C.GLenum)(format), (C.GLenum)(xtype), data)
}
// fill all or part of buffer object's data store with a fixed value
func ClearBufferSubData(target uint32, internalformat uint32, offset int, size int, format uint32, xtype uint32, data unsafe.Pointer) {
  C.glowClearBufferSubData(gpClearBufferSubData, (C.GLenum)(target), (C.GLenum)(internalformat), (C.GLintptr)(offset), (C.GLsizeiptr)(size), (C.GLenum)(format), (C.GLenum)(xtype), data)
}
func ClearBufferfi(buffer uint32, drawbuffer int32, depth float32, stencil int32) {
  C.glowClearBufferfi(gpClearBufferfi, (C.GLenum)(buffer), (C.GLint)(drawbuffer), (C.GLfloat)(depth), (C.GLint)(stencil))
}
func ClearBufferfv(buffer uint32, drawbuffer int32, value *float32) {
  C.glowClearBufferfv(gpClearBufferfv, (C.GLenum)(buffer), (C.GLint)(drawbuffer), (*C.GLfloat)(unsafe.Pointer(value)))
}
func ClearBufferiv(buffer uint32, drawbuffer int32, value *int32) {
  C.glowClearBufferiv(gpClearBufferiv, (C.GLenum)(buffer), (C.GLint)(drawbuffer), (*C.GLint)(unsafe.Pointer(value)))
}
func ClearBufferuiv(buffer uint32, drawbuffer int32, value *uint32) {
  C.glowClearBufferuiv(gpClearBufferuiv, (C.GLenum)(buffer), (C.GLint)(drawbuffer), (*C.GLuint)(unsafe.Pointer(value)))
}
// specify clear values for the color buffers
func ClearColor(red float32, green float32, blue float32, alpha float32) {
  C.glowClearColor(gpClearColor, (C.GLfloat)(red), (C.GLfloat)(green), (C.GLfloat)(blue), (C.GLfloat)(alpha))
}
func ClearColorIiEXT(red int32, green int32, blue int32, alpha int32) {
  C.glowClearColorIiEXT(gpClearColorIiEXT, (C.GLint)(red), (C.GLint)(green), (C.GLint)(blue), (C.GLint)(alpha))
}
func ClearColorIuiEXT(red uint32, green uint32, blue uint32, alpha uint32) {
  C.glowClearColorIuiEXT(gpClearColorIuiEXT, (C.GLuint)(red), (C.GLuint)(green), (C.GLuint)(blue), (C.GLuint)(alpha))
}
func ClearColorxOES(red int32, green int32, blue int32, alpha int32) {
  C.glowClearColorxOES(gpClearColorxOES, (C.GLfixed)(red), (C.GLfixed)(green), (C.GLfixed)(blue), (C.GLfixed)(alpha))
}
// specify the clear value for the depth buffer
func ClearDepth(depth float64) {
  C.glowClearDepth(gpClearDepth, (C.GLdouble)(depth))
}
func ClearDepthdNV(depth float64) {
  C.glowClearDepthdNV(gpClearDepthdNV, (C.GLdouble)(depth))
}
func ClearDepthf(d float32) {
  C.glowClearDepthf(gpClearDepthf, (C.GLfloat)(d))
}
func ClearDepthfOES(depth float32) {
  C.glowClearDepthfOES(gpClearDepthfOES, (C.GLclampf)(depth))
}
func ClearDepthxOES(depth int32) {
  C.glowClearDepthxOES(gpClearDepthxOES, (C.GLfixed)(depth))
}
func ClearNamedBufferDataEXT(buffer uint32, internalformat uint32, format uint32, xtype uint32, data unsafe.Pointer) {
  C.glowClearNamedBufferDataEXT(gpClearNamedBufferDataEXT, (C.GLuint)(buffer), (C.GLenum)(internalformat), (C.GLenum)(format), (C.GLenum)(xtype), data)
}
func ClearNamedBufferSubDataEXT(buffer uint32, internalformat uint32, offset int, size int, format uint32, xtype uint32, data unsafe.Pointer) {
  C.glowClearNamedBufferSubDataEXT(gpClearNamedBufferSubDataEXT, (C.GLuint)(buffer), (C.GLenum)(internalformat), (C.GLsizeiptr)(offset), (C.GLsizeiptr)(size), (C.GLenum)(format), (C.GLenum)(xtype), data)
}
// specify the clear value for the stencil buffer
func ClearStencil(s int32) {
  C.glowClearStencil(gpClearStencil, (C.GLint)(s))
}
// fills all a texture image with a constant value
func ClearTexImage(texture uint32, level int32, format uint32, xtype uint32, data unsafe.Pointer) {
  C.glowClearTexImage(gpClearTexImage, (C.GLuint)(texture), (C.GLint)(level), (C.GLenum)(format), (C.GLenum)(xtype), data)
}
// fills all or part of a texture image with a constant value
func ClearTexSubImage(texture uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, xtype uint32, data unsafe.Pointer) {
  C.glowClearTexSubImage(gpClearTexSubImage, (C.GLuint)(texture), (C.GLint)(level), (C.GLint)(xoffset), (C.GLint)(yoffset), (C.GLint)(zoffset), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLsizei)(depth), (C.GLenum)(format), (C.GLenum)(xtype), data)
}
func ClientActiveTextureARB(texture uint32) {
  C.glowClientActiveTextureARB(gpClientActiveTextureARB, (C.GLenum)(texture))
}
func ClientActiveVertexStreamATI(stream uint32) {
  C.glowClientActiveVertexStreamATI(gpClientActiveVertexStreamATI, (C.GLenum)(stream))
}
func ClientAttribDefaultEXT(mask uint32) {
  C.glowClientAttribDefaultEXT(gpClientAttribDefaultEXT, (C.GLbitfield)(mask))
}
// block and wait for a sync object to become signaled
func ClientWaitSync(sync unsafe.Pointer, flags uint32, timeout uint64) uint32 {
  ret := C.glowClientWaitSync(gpClientWaitSync, (C.GLsync)(sync), (C.GLbitfield)(flags), (C.GLuint64)(timeout))
  return (uint32)(ret)
}
func ClipPlanefOES(plane uint32, equation *float32) {
  C.glowClipPlanefOES(gpClipPlanefOES, (C.GLenum)(plane), (*C.GLfloat)(unsafe.Pointer(equation)))
}
func ClipPlanexOES(plane uint32, equation *int32) {
  C.glowClipPlanexOES(gpClipPlanexOES, (C.GLenum)(plane), (*C.GLfixed)(unsafe.Pointer(equation)))
}
func Color3fVertex3fSUN(r float32, g float32, b float32, x float32, y float32, z float32) {
  C.glowColor3fVertex3fSUN(gpColor3fVertex3fSUN, (C.GLfloat)(r), (C.GLfloat)(g), (C.GLfloat)(b), (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z))
}
func Color3fVertex3fvSUN(c *float32, v *float32) {
  C.glowColor3fVertex3fvSUN(gpColor3fVertex3fvSUN, (*C.GLfloat)(unsafe.Pointer(c)), (*C.GLfloat)(unsafe.Pointer(v)))
}
func Color3hNV(red uint16, green uint16, blue uint16) {
  C.glowColor3hNV(gpColor3hNV, (C.GLhalfNV)(red), (C.GLhalfNV)(green), (C.GLhalfNV)(blue))
}
func Color3hvNV(v *uint16) {
  C.glowColor3hvNV(gpColor3hvNV, (*C.GLhalfNV)(unsafe.Pointer(v)))
}
func Color3xOES(red int32, green int32, blue int32) {
  C.glowColor3xOES(gpColor3xOES, (C.GLfixed)(red), (C.GLfixed)(green), (C.GLfixed)(blue))
}
func Color3xvOES(components *int32) {
  C.glowColor3xvOES(gpColor3xvOES, (*C.GLfixed)(unsafe.Pointer(components)))
}
func Color4fNormal3fVertex3fSUN(r float32, g float32, b float32, a float32, nx float32, ny float32, nz float32, x float32, y float32, z float32) {
  C.glowColor4fNormal3fVertex3fSUN(gpColor4fNormal3fVertex3fSUN, (C.GLfloat)(r), (C.GLfloat)(g), (C.GLfloat)(b), (C.GLfloat)(a), (C.GLfloat)(nx), (C.GLfloat)(ny), (C.GLfloat)(nz), (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z))
}
func Color4fNormal3fVertex3fvSUN(c *float32, n *float32, v *float32) {
  C.glowColor4fNormal3fVertex3fvSUN(gpColor4fNormal3fVertex3fvSUN, (*C.GLfloat)(unsafe.Pointer(c)), (*C.GLfloat)(unsafe.Pointer(n)), (*C.GLfloat)(unsafe.Pointer(v)))
}
func Color4hNV(red uint16, green uint16, blue uint16, alpha uint16) {
  C.glowColor4hNV(gpColor4hNV, (C.GLhalfNV)(red), (C.GLhalfNV)(green), (C.GLhalfNV)(blue), (C.GLhalfNV)(alpha))
}
func Color4hvNV(v *uint16) {
  C.glowColor4hvNV(gpColor4hvNV, (*C.GLhalfNV)(unsafe.Pointer(v)))
}
func Color4ubVertex2fSUN(r uint8, g uint8, b uint8, a uint8, x float32, y float32) {
  C.glowColor4ubVertex2fSUN(gpColor4ubVertex2fSUN, (C.GLubyte)(r), (C.GLubyte)(g), (C.GLubyte)(b), (C.GLubyte)(a), (C.GLfloat)(x), (C.GLfloat)(y))
}
func Color4ubVertex2fvSUN(c *uint8, v *float32) {
  C.glowColor4ubVertex2fvSUN(gpColor4ubVertex2fvSUN, (*C.GLubyte)(unsafe.Pointer(c)), (*C.GLfloat)(unsafe.Pointer(v)))
}
func Color4ubVertex3fSUN(r uint8, g uint8, b uint8, a uint8, x float32, y float32, z float32) {
  C.glowColor4ubVertex3fSUN(gpColor4ubVertex3fSUN, (C.GLubyte)(r), (C.GLubyte)(g), (C.GLubyte)(b), (C.GLubyte)(a), (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z))
}
func Color4ubVertex3fvSUN(c *uint8, v *float32) {
  C.glowColor4ubVertex3fvSUN(gpColor4ubVertex3fvSUN, (*C.GLubyte)(unsafe.Pointer(c)), (*C.GLfloat)(unsafe.Pointer(v)))
}
func Color4xOES(red int32, green int32, blue int32, alpha int32) {
  C.glowColor4xOES(gpColor4xOES, (C.GLfixed)(red), (C.GLfixed)(green), (C.GLfixed)(blue), (C.GLfixed)(alpha))
}
func Color4xvOES(components *int32) {
  C.glowColor4xvOES(gpColor4xvOES, (*C.GLfixed)(unsafe.Pointer(components)))
}
func ColorFormatNV(size int32, xtype uint32, stride int32) {
  C.glowColorFormatNV(gpColorFormatNV, (C.GLint)(size), (C.GLenum)(xtype), (C.GLsizei)(stride))
}
func ColorFragmentOp1ATI(op uint32, dst uint32, dstMask uint32, dstMod uint32, arg1 uint32, arg1Rep uint32, arg1Mod uint32) {
  C.glowColorFragmentOp1ATI(gpColorFragmentOp1ATI, (C.GLenum)(op), (C.GLuint)(dst), (C.GLuint)(dstMask), (C.GLuint)(dstMod), (C.GLuint)(arg1), (C.GLuint)(arg1Rep), (C.GLuint)(arg1Mod))
}
func ColorFragmentOp2ATI(op uint32, dst uint32, dstMask uint32, dstMod uint32, arg1 uint32, arg1Rep uint32, arg1Mod uint32, arg2 uint32, arg2Rep uint32, arg2Mod uint32) {
  C.glowColorFragmentOp2ATI(gpColorFragmentOp2ATI, (C.GLenum)(op), (C.GLuint)(dst), (C.GLuint)(dstMask), (C.GLuint)(dstMod), (C.GLuint)(arg1), (C.GLuint)(arg1Rep), (C.GLuint)(arg1Mod), (C.GLuint)(arg2), (C.GLuint)(arg2Rep), (C.GLuint)(arg2Mod))
}
func ColorFragmentOp3ATI(op uint32, dst uint32, dstMask uint32, dstMod uint32, arg1 uint32, arg1Rep uint32, arg1Mod uint32, arg2 uint32, arg2Rep uint32, arg2Mod uint32, arg3 uint32, arg3Rep uint32, arg3Mod uint32) {
  C.glowColorFragmentOp3ATI(gpColorFragmentOp3ATI, (C.GLenum)(op), (C.GLuint)(dst), (C.GLuint)(dstMask), (C.GLuint)(dstMod), (C.GLuint)(arg1), (C.GLuint)(arg1Rep), (C.GLuint)(arg1Mod), (C.GLuint)(arg2), (C.GLuint)(arg2Rep), (C.GLuint)(arg2Mod), (C.GLuint)(arg3), (C.GLuint)(arg3Rep), (C.GLuint)(arg3Mod))
}
func ColorMask(red bool, green bool, blue bool, alpha bool) {
  C.glowColorMask(gpColorMask, (C.GLboolean)(boolToInt(red)), (C.GLboolean)(boolToInt(green)), (C.GLboolean)(boolToInt(blue)), (C.GLboolean)(boolToInt(alpha)))
}
func ColorMaskIndexedEXT(index uint32, r bool, g bool, b bool, a bool) {
  C.glowColorMaskIndexedEXT(gpColorMaskIndexedEXT, (C.GLuint)(index), (C.GLboolean)(boolToInt(r)), (C.GLboolean)(boolToInt(g)), (C.GLboolean)(boolToInt(b)), (C.GLboolean)(boolToInt(a)))
}
func ColorMaski(index uint32, r bool, g bool, b bool, a bool) {
  C.glowColorMaski(gpColorMaski, (C.GLuint)(index), (C.GLboolean)(boolToInt(r)), (C.GLboolean)(boolToInt(g)), (C.GLboolean)(boolToInt(b)), (C.GLboolean)(boolToInt(a)))
}
func ColorPointerEXT(size int32, xtype uint32, stride int32, count int32, pointer unsafe.Pointer) {
  C.glowColorPointerEXT(gpColorPointerEXT, (C.GLint)(size), (C.GLenum)(xtype), (C.GLsizei)(stride), (C.GLsizei)(count), pointer)
}
func ColorPointerListIBM(size int32, xtype uint32, stride int32, pointer *unsafe.Pointer, ptrstride int32) {
  C.glowColorPointerListIBM(gpColorPointerListIBM, (C.GLint)(size), (C.GLenum)(xtype), (C.GLint)(stride), pointer, (C.GLint)(ptrstride))
}
func ColorPointervINTEL(size int32, xtype uint32, pointer *unsafe.Pointer) {
  C.glowColorPointervINTEL(gpColorPointervINTEL, (C.GLint)(size), (C.GLenum)(xtype), pointer)
}
func ColorSubTableEXT(target uint32, start int32, count int32, format uint32, xtype uint32, data unsafe.Pointer) {
  C.glowColorSubTableEXT(gpColorSubTableEXT, (C.GLenum)(target), (C.GLsizei)(start), (C.GLsizei)(count), (C.GLenum)(format), (C.GLenum)(xtype), data)
}
func ColorTableEXT(target uint32, internalFormat uint32, width int32, format uint32, xtype uint32, table unsafe.Pointer) {
  C.glowColorTableEXT(gpColorTableEXT, (C.GLenum)(target), (C.GLenum)(internalFormat), (C.GLsizei)(width), (C.GLenum)(format), (C.GLenum)(xtype), table)
}
func ColorTableParameterfvSGI(target uint32, pname uint32, params *float32) {
  C.glowColorTableParameterfvSGI(gpColorTableParameterfvSGI, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func ColorTableParameterivSGI(target uint32, pname uint32, params *int32) {
  C.glowColorTableParameterivSGI(gpColorTableParameterivSGI, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func ColorTableSGI(target uint32, internalformat uint32, width int32, format uint32, xtype uint32, table unsafe.Pointer) {
  C.glowColorTableSGI(gpColorTableSGI, (C.GLenum)(target), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLenum)(format), (C.GLenum)(xtype), table)
}
func CombinerInputNV(stage uint32, portion uint32, variable uint32, input uint32, mapping uint32, componentUsage uint32) {
  C.glowCombinerInputNV(gpCombinerInputNV, (C.GLenum)(stage), (C.GLenum)(portion), (C.GLenum)(variable), (C.GLenum)(input), (C.GLenum)(mapping), (C.GLenum)(componentUsage))
}
func CombinerOutputNV(stage uint32, portion uint32, abOutput uint32, cdOutput uint32, sumOutput uint32, scale uint32, bias uint32, abDotProduct bool, cdDotProduct bool, muxSum bool) {
  C.glowCombinerOutputNV(gpCombinerOutputNV, (C.GLenum)(stage), (C.GLenum)(portion), (C.GLenum)(abOutput), (C.GLenum)(cdOutput), (C.GLenum)(sumOutput), (C.GLenum)(scale), (C.GLenum)(bias), (C.GLboolean)(boolToInt(abDotProduct)), (C.GLboolean)(boolToInt(cdDotProduct)), (C.GLboolean)(boolToInt(muxSum)))
}
func CombinerParameterfNV(pname uint32, param float32) {
  C.glowCombinerParameterfNV(gpCombinerParameterfNV, (C.GLenum)(pname), (C.GLfloat)(param))
}
func CombinerParameterfvNV(pname uint32, params *float32) {
  C.glowCombinerParameterfvNV(gpCombinerParameterfvNV, (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func CombinerParameteriNV(pname uint32, param int32) {
  C.glowCombinerParameteriNV(gpCombinerParameteriNV, (C.GLenum)(pname), (C.GLint)(param))
}
func CombinerParameterivNV(pname uint32, params *int32) {
  C.glowCombinerParameterivNV(gpCombinerParameterivNV, (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func CombinerStageParameterfvNV(stage uint32, pname uint32, params *float32) {
  C.glowCombinerStageParameterfvNV(gpCombinerStageParameterfvNV, (C.GLenum)(stage), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
// Compiles a shader object
func CompileShader(shader uint32) {
  C.glowCompileShader(gpCompileShader, (C.GLuint)(shader))
}
func CompileShaderARB(shaderObj uintptr) {
  C.glowCompileShaderARB(gpCompileShaderARB, (C.GLhandleARB)(shaderObj))
}
func CompileShaderIncludeARB(shader uint32, count int32, path **int8, length *int32) {
  C.glowCompileShaderIncludeARB(gpCompileShaderIncludeARB, (C.GLuint)(shader), (C.GLsizei)(count), (**C.GLchar)(unsafe.Pointer(path)), (*C.GLint)(unsafe.Pointer(length)))
}
func CompressedMultiTexImage1DEXT(texunit uint32, target uint32, level int32, internalformat uint32, width int32, border int32, imageSize int32, bits unsafe.Pointer) {
  C.glowCompressedMultiTexImage1DEXT(gpCompressedMultiTexImage1DEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLint)(level), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLint)(border), (C.GLsizei)(imageSize), bits)
}
func CompressedMultiTexImage2DEXT(texunit uint32, target uint32, level int32, internalformat uint32, width int32, height int32, border int32, imageSize int32, bits unsafe.Pointer) {
  C.glowCompressedMultiTexImage2DEXT(gpCompressedMultiTexImage2DEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLint)(level), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLint)(border), (C.GLsizei)(imageSize), bits)
}
func CompressedMultiTexImage3DEXT(texunit uint32, target uint32, level int32, internalformat uint32, width int32, height int32, depth int32, border int32, imageSize int32, bits unsafe.Pointer) {
  C.glowCompressedMultiTexImage3DEXT(gpCompressedMultiTexImage3DEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLint)(level), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLsizei)(depth), (C.GLint)(border), (C.GLsizei)(imageSize), bits)
}
func CompressedMultiTexSubImage1DEXT(texunit uint32, target uint32, level int32, xoffset int32, width int32, format uint32, imageSize int32, bits unsafe.Pointer) {
  C.glowCompressedMultiTexSubImage1DEXT(gpCompressedMultiTexSubImage1DEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLsizei)(width), (C.GLenum)(format), (C.GLsizei)(imageSize), bits)
}
func CompressedMultiTexSubImage2DEXT(texunit uint32, target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, imageSize int32, bits unsafe.Pointer) {
  C.glowCompressedMultiTexSubImage2DEXT(gpCompressedMultiTexSubImage2DEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLint)(yoffset), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLenum)(format), (C.GLsizei)(imageSize), bits)
}
func CompressedMultiTexSubImage3DEXT(texunit uint32, target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, imageSize int32, bits unsafe.Pointer) {
  C.glowCompressedMultiTexSubImage3DEXT(gpCompressedMultiTexSubImage3DEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLint)(yoffset), (C.GLint)(zoffset), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLsizei)(depth), (C.GLenum)(format), (C.GLsizei)(imageSize), bits)
}
// specify a one-dimensional texture image in a compressed format
func CompressedTexImage1D(target uint32, level int32, internalformat uint32, width int32, border int32, imageSize int32, data unsafe.Pointer) {
  C.glowCompressedTexImage1D(gpCompressedTexImage1D, (C.GLenum)(target), (C.GLint)(level), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLint)(border), (C.GLsizei)(imageSize), data)
}
func CompressedTexImage1DARB(target uint32, level int32, internalformat uint32, width int32, border int32, imageSize int32, data unsafe.Pointer) {
  C.glowCompressedTexImage1DARB(gpCompressedTexImage1DARB, (C.GLenum)(target), (C.GLint)(level), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLint)(border), (C.GLsizei)(imageSize), data)
}
// specify a two-dimensional texture image in a compressed format
func CompressedTexImage2D(target uint32, level int32, internalformat uint32, width int32, height int32, border int32, imageSize int32, data unsafe.Pointer) {
  C.glowCompressedTexImage2D(gpCompressedTexImage2D, (C.GLenum)(target), (C.GLint)(level), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLint)(border), (C.GLsizei)(imageSize), data)
}
func CompressedTexImage2DARB(target uint32, level int32, internalformat uint32, width int32, height int32, border int32, imageSize int32, data unsafe.Pointer) {
  C.glowCompressedTexImage2DARB(gpCompressedTexImage2DARB, (C.GLenum)(target), (C.GLint)(level), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLint)(border), (C.GLsizei)(imageSize), data)
}
// specify a three-dimensional texture image in a compressed format
func CompressedTexImage3D(target uint32, level int32, internalformat uint32, width int32, height int32, depth int32, border int32, imageSize int32, data unsafe.Pointer) {
  C.glowCompressedTexImage3D(gpCompressedTexImage3D, (C.GLenum)(target), (C.GLint)(level), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLsizei)(depth), (C.GLint)(border), (C.GLsizei)(imageSize), data)
}
func CompressedTexImage3DARB(target uint32, level int32, internalformat uint32, width int32, height int32, depth int32, border int32, imageSize int32, data unsafe.Pointer) {
  C.glowCompressedTexImage3DARB(gpCompressedTexImage3DARB, (C.GLenum)(target), (C.GLint)(level), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLsizei)(depth), (C.GLint)(border), (C.GLsizei)(imageSize), data)
}
// specify a one-dimensional texture subimage in a compressed format
func CompressedTexSubImage1D(target uint32, level int32, xoffset int32, width int32, format uint32, imageSize int32, data unsafe.Pointer) {
  C.glowCompressedTexSubImage1D(gpCompressedTexSubImage1D, (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLsizei)(width), (C.GLenum)(format), (C.GLsizei)(imageSize), data)
}
func CompressedTexSubImage1DARB(target uint32, level int32, xoffset int32, width int32, format uint32, imageSize int32, data unsafe.Pointer) {
  C.glowCompressedTexSubImage1DARB(gpCompressedTexSubImage1DARB, (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLsizei)(width), (C.GLenum)(format), (C.GLsizei)(imageSize), data)
}
// specify a two-dimensional texture subimage in a compressed format
func CompressedTexSubImage2D(target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, imageSize int32, data unsafe.Pointer) {
  C.glowCompressedTexSubImage2D(gpCompressedTexSubImage2D, (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLint)(yoffset), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLenum)(format), (C.GLsizei)(imageSize), data)
}
func CompressedTexSubImage2DARB(target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, imageSize int32, data unsafe.Pointer) {
  C.glowCompressedTexSubImage2DARB(gpCompressedTexSubImage2DARB, (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLint)(yoffset), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLenum)(format), (C.GLsizei)(imageSize), data)
}
// specify a three-dimensional texture subimage in a compressed format
func CompressedTexSubImage3D(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, imageSize int32, data unsafe.Pointer) {
  C.glowCompressedTexSubImage3D(gpCompressedTexSubImage3D, (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLint)(yoffset), (C.GLint)(zoffset), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLsizei)(depth), (C.GLenum)(format), (C.GLsizei)(imageSize), data)
}
func CompressedTexSubImage3DARB(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, imageSize int32, data unsafe.Pointer) {
  C.glowCompressedTexSubImage3DARB(gpCompressedTexSubImage3DARB, (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLint)(yoffset), (C.GLint)(zoffset), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLsizei)(depth), (C.GLenum)(format), (C.GLsizei)(imageSize), data)
}
func CompressedTextureImage1DEXT(texture uint32, target uint32, level int32, internalformat uint32, width int32, border int32, imageSize int32, bits unsafe.Pointer) {
  C.glowCompressedTextureImage1DEXT(gpCompressedTextureImage1DEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLint)(level), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLint)(border), (C.GLsizei)(imageSize), bits)
}
func CompressedTextureImage2DEXT(texture uint32, target uint32, level int32, internalformat uint32, width int32, height int32, border int32, imageSize int32, bits unsafe.Pointer) {
  C.glowCompressedTextureImage2DEXT(gpCompressedTextureImage2DEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLint)(level), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLint)(border), (C.GLsizei)(imageSize), bits)
}
func CompressedTextureImage3DEXT(texture uint32, target uint32, level int32, internalformat uint32, width int32, height int32, depth int32, border int32, imageSize int32, bits unsafe.Pointer) {
  C.glowCompressedTextureImage3DEXT(gpCompressedTextureImage3DEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLint)(level), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLsizei)(depth), (C.GLint)(border), (C.GLsizei)(imageSize), bits)
}
func CompressedTextureSubImage1DEXT(texture uint32, target uint32, level int32, xoffset int32, width int32, format uint32, imageSize int32, bits unsafe.Pointer) {
  C.glowCompressedTextureSubImage1DEXT(gpCompressedTextureSubImage1DEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLsizei)(width), (C.GLenum)(format), (C.GLsizei)(imageSize), bits)
}
func CompressedTextureSubImage2DEXT(texture uint32, target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, imageSize int32, bits unsafe.Pointer) {
  C.glowCompressedTextureSubImage2DEXT(gpCompressedTextureSubImage2DEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLint)(yoffset), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLenum)(format), (C.GLsizei)(imageSize), bits)
}
func CompressedTextureSubImage3DEXT(texture uint32, target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, imageSize int32, bits unsafe.Pointer) {
  C.glowCompressedTextureSubImage3DEXT(gpCompressedTextureSubImage3DEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLint)(yoffset), (C.GLint)(zoffset), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLsizei)(depth), (C.GLenum)(format), (C.GLsizei)(imageSize), bits)
}
func ConvolutionFilter1DEXT(target uint32, internalformat uint32, width int32, format uint32, xtype uint32, image unsafe.Pointer) {
  C.glowConvolutionFilter1DEXT(gpConvolutionFilter1DEXT, (C.GLenum)(target), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLenum)(format), (C.GLenum)(xtype), image)
}
func ConvolutionFilter2DEXT(target uint32, internalformat uint32, width int32, height int32, format uint32, xtype uint32, image unsafe.Pointer) {
  C.glowConvolutionFilter2DEXT(gpConvolutionFilter2DEXT, (C.GLenum)(target), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLenum)(format), (C.GLenum)(xtype), image)
}
func ConvolutionParameterfEXT(target uint32, pname uint32, params float32) {
  C.glowConvolutionParameterfEXT(gpConvolutionParameterfEXT, (C.GLenum)(target), (C.GLenum)(pname), (C.GLfloat)(params))
}
func ConvolutionParameterfvEXT(target uint32, pname uint32, params *float32) {
  C.glowConvolutionParameterfvEXT(gpConvolutionParameterfvEXT, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func ConvolutionParameteriEXT(target uint32, pname uint32, params int32) {
  C.glowConvolutionParameteriEXT(gpConvolutionParameteriEXT, (C.GLenum)(target), (C.GLenum)(pname), (C.GLint)(params))
}
func ConvolutionParameterivEXT(target uint32, pname uint32, params *int32) {
  C.glowConvolutionParameterivEXT(gpConvolutionParameterivEXT, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func ConvolutionParameterxOES(target uint32, pname uint32, param int32) {
  C.glowConvolutionParameterxOES(gpConvolutionParameterxOES, (C.GLenum)(target), (C.GLenum)(pname), (C.GLfixed)(param))
}
func ConvolutionParameterxvOES(target uint32, pname uint32, params *int32) {
  C.glowConvolutionParameterxvOES(gpConvolutionParameterxvOES, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLfixed)(unsafe.Pointer(params)))
}
// copy part of the data store of a buffer object to the data store of another buffer object
func CopyBufferSubData(readTarget uint32, writeTarget uint32, readOffset int, writeOffset int, size int) {
  C.glowCopyBufferSubData(gpCopyBufferSubData, (C.GLenum)(readTarget), (C.GLenum)(writeTarget), (C.GLintptr)(readOffset), (C.GLintptr)(writeOffset), (C.GLsizeiptr)(size))
}
func CopyColorSubTableEXT(target uint32, start int32, x int32, y int32, width int32) {
  C.glowCopyColorSubTableEXT(gpCopyColorSubTableEXT, (C.GLenum)(target), (C.GLsizei)(start), (C.GLint)(x), (C.GLint)(y), (C.GLsizei)(width))
}
func CopyColorTableSGI(target uint32, internalformat uint32, x int32, y int32, width int32) {
  C.glowCopyColorTableSGI(gpCopyColorTableSGI, (C.GLenum)(target), (C.GLenum)(internalformat), (C.GLint)(x), (C.GLint)(y), (C.GLsizei)(width))
}
func CopyConvolutionFilter1DEXT(target uint32, internalformat uint32, x int32, y int32, width int32) {
  C.glowCopyConvolutionFilter1DEXT(gpCopyConvolutionFilter1DEXT, (C.GLenum)(target), (C.GLenum)(internalformat), (C.GLint)(x), (C.GLint)(y), (C.GLsizei)(width))
}
func CopyConvolutionFilter2DEXT(target uint32, internalformat uint32, x int32, y int32, width int32, height int32) {
  C.glowCopyConvolutionFilter2DEXT(gpCopyConvolutionFilter2DEXT, (C.GLenum)(target), (C.GLenum)(internalformat), (C.GLint)(x), (C.GLint)(y), (C.GLsizei)(width), (C.GLsizei)(height))
}
// perform a raw data copy between two images
func CopyImageSubData(srcName uint32, srcTarget uint32, srcLevel int32, srcX int32, srcY int32, srcZ int32, dstName uint32, dstTarget uint32, dstLevel int32, dstX int32, dstY int32, dstZ int32, srcWidth int32, srcHeight int32, srcDepth int32) {
  C.glowCopyImageSubData(gpCopyImageSubData, (C.GLuint)(srcName), (C.GLenum)(srcTarget), (C.GLint)(srcLevel), (C.GLint)(srcX), (C.GLint)(srcY), (C.GLint)(srcZ), (C.GLuint)(dstName), (C.GLenum)(dstTarget), (C.GLint)(dstLevel), (C.GLint)(dstX), (C.GLint)(dstY), (C.GLint)(dstZ), (C.GLsizei)(srcWidth), (C.GLsizei)(srcHeight), (C.GLsizei)(srcDepth))
}
func CopyImageSubDataNV(srcName uint32, srcTarget uint32, srcLevel int32, srcX int32, srcY int32, srcZ int32, dstName uint32, dstTarget uint32, dstLevel int32, dstX int32, dstY int32, dstZ int32, width int32, height int32, depth int32) {
  C.glowCopyImageSubDataNV(gpCopyImageSubDataNV, (C.GLuint)(srcName), (C.GLenum)(srcTarget), (C.GLint)(srcLevel), (C.GLint)(srcX), (C.GLint)(srcY), (C.GLint)(srcZ), (C.GLuint)(dstName), (C.GLenum)(dstTarget), (C.GLint)(dstLevel), (C.GLint)(dstX), (C.GLint)(dstY), (C.GLint)(dstZ), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLsizei)(depth))
}
func CopyMultiTexImage1DEXT(texunit uint32, target uint32, level int32, internalformat uint32, x int32, y int32, width int32, border int32) {
  C.glowCopyMultiTexImage1DEXT(gpCopyMultiTexImage1DEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLint)(level), (C.GLenum)(internalformat), (C.GLint)(x), (C.GLint)(y), (C.GLsizei)(width), (C.GLint)(border))
}
func CopyMultiTexImage2DEXT(texunit uint32, target uint32, level int32, internalformat uint32, x int32, y int32, width int32, height int32, border int32) {
  C.glowCopyMultiTexImage2DEXT(gpCopyMultiTexImage2DEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLint)(level), (C.GLenum)(internalformat), (C.GLint)(x), (C.GLint)(y), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLint)(border))
}
func CopyMultiTexSubImage1DEXT(texunit uint32, target uint32, level int32, xoffset int32, x int32, y int32, width int32) {
  C.glowCopyMultiTexSubImage1DEXT(gpCopyMultiTexSubImage1DEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLint)(x), (C.GLint)(y), (C.GLsizei)(width))
}
func CopyMultiTexSubImage2DEXT(texunit uint32, target uint32, level int32, xoffset int32, yoffset int32, x int32, y int32, width int32, height int32) {
  C.glowCopyMultiTexSubImage2DEXT(gpCopyMultiTexSubImage2DEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLint)(yoffset), (C.GLint)(x), (C.GLint)(y), (C.GLsizei)(width), (C.GLsizei)(height))
}
func CopyMultiTexSubImage3DEXT(texunit uint32, target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, x int32, y int32, width int32, height int32) {
  C.glowCopyMultiTexSubImage3DEXT(gpCopyMultiTexSubImage3DEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLint)(yoffset), (C.GLint)(zoffset), (C.GLint)(x), (C.GLint)(y), (C.GLsizei)(width), (C.GLsizei)(height))
}
func CopyPathNV(resultPath uint32, srcPath uint32) {
  C.glowCopyPathNV(gpCopyPathNV, (C.GLuint)(resultPath), (C.GLuint)(srcPath))
}
// copy pixels into a 1D texture image
func CopyTexImage1D(target uint32, level int32, internalformat uint32, x int32, y int32, width int32, border int32) {
  C.glowCopyTexImage1D(gpCopyTexImage1D, (C.GLenum)(target), (C.GLint)(level), (C.GLenum)(internalformat), (C.GLint)(x), (C.GLint)(y), (C.GLsizei)(width), (C.GLint)(border))
}
func CopyTexImage1DEXT(target uint32, level int32, internalformat uint32, x int32, y int32, width int32, border int32) {
  C.glowCopyTexImage1DEXT(gpCopyTexImage1DEXT, (C.GLenum)(target), (C.GLint)(level), (C.GLenum)(internalformat), (C.GLint)(x), (C.GLint)(y), (C.GLsizei)(width), (C.GLint)(border))
}
// copy pixels into a 2D texture image
func CopyTexImage2D(target uint32, level int32, internalformat uint32, x int32, y int32, width int32, height int32, border int32) {
  C.glowCopyTexImage2D(gpCopyTexImage2D, (C.GLenum)(target), (C.GLint)(level), (C.GLenum)(internalformat), (C.GLint)(x), (C.GLint)(y), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLint)(border))
}
func CopyTexImage2DEXT(target uint32, level int32, internalformat uint32, x int32, y int32, width int32, height int32, border int32) {
  C.glowCopyTexImage2DEXT(gpCopyTexImage2DEXT, (C.GLenum)(target), (C.GLint)(level), (C.GLenum)(internalformat), (C.GLint)(x), (C.GLint)(y), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLint)(border))
}
// copy a one-dimensional texture subimage
func CopyTexSubImage1D(target uint32, level int32, xoffset int32, x int32, y int32, width int32) {
  C.glowCopyTexSubImage1D(gpCopyTexSubImage1D, (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLint)(x), (C.GLint)(y), (C.GLsizei)(width))
}
func CopyTexSubImage1DEXT(target uint32, level int32, xoffset int32, x int32, y int32, width int32) {
  C.glowCopyTexSubImage1DEXT(gpCopyTexSubImage1DEXT, (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLint)(x), (C.GLint)(y), (C.GLsizei)(width))
}
// copy a two-dimensional texture subimage
func CopyTexSubImage2D(target uint32, level int32, xoffset int32, yoffset int32, x int32, y int32, width int32, height int32) {
  C.glowCopyTexSubImage2D(gpCopyTexSubImage2D, (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLint)(yoffset), (C.GLint)(x), (C.GLint)(y), (C.GLsizei)(width), (C.GLsizei)(height))
}
func CopyTexSubImage2DEXT(target uint32, level int32, xoffset int32, yoffset int32, x int32, y int32, width int32, height int32) {
  C.glowCopyTexSubImage2DEXT(gpCopyTexSubImage2DEXT, (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLint)(yoffset), (C.GLint)(x), (C.GLint)(y), (C.GLsizei)(width), (C.GLsizei)(height))
}
// copy a three-dimensional texture subimage
func CopyTexSubImage3D(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, x int32, y int32, width int32, height int32) {
  C.glowCopyTexSubImage3D(gpCopyTexSubImage3D, (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLint)(yoffset), (C.GLint)(zoffset), (C.GLint)(x), (C.GLint)(y), (C.GLsizei)(width), (C.GLsizei)(height))
}
func CopyTexSubImage3DEXT(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, x int32, y int32, width int32, height int32) {
  C.glowCopyTexSubImage3DEXT(gpCopyTexSubImage3DEXT, (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLint)(yoffset), (C.GLint)(zoffset), (C.GLint)(x), (C.GLint)(y), (C.GLsizei)(width), (C.GLsizei)(height))
}
func CopyTextureImage1DEXT(texture uint32, target uint32, level int32, internalformat uint32, x int32, y int32, width int32, border int32) {
  C.glowCopyTextureImage1DEXT(gpCopyTextureImage1DEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLint)(level), (C.GLenum)(internalformat), (C.GLint)(x), (C.GLint)(y), (C.GLsizei)(width), (C.GLint)(border))
}
func CopyTextureImage2DEXT(texture uint32, target uint32, level int32, internalformat uint32, x int32, y int32, width int32, height int32, border int32) {
  C.glowCopyTextureImage2DEXT(gpCopyTextureImage2DEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLint)(level), (C.GLenum)(internalformat), (C.GLint)(x), (C.GLint)(y), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLint)(border))
}
func CopyTextureSubImage1DEXT(texture uint32, target uint32, level int32, xoffset int32, x int32, y int32, width int32) {
  C.glowCopyTextureSubImage1DEXT(gpCopyTextureSubImage1DEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLint)(x), (C.GLint)(y), (C.GLsizei)(width))
}
func CopyTextureSubImage2DEXT(texture uint32, target uint32, level int32, xoffset int32, yoffset int32, x int32, y int32, width int32, height int32) {
  C.glowCopyTextureSubImage2DEXT(gpCopyTextureSubImage2DEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLint)(yoffset), (C.GLint)(x), (C.GLint)(y), (C.GLsizei)(width), (C.GLsizei)(height))
}
func CopyTextureSubImage3DEXT(texture uint32, target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, x int32, y int32, width int32, height int32) {
  C.glowCopyTextureSubImage3DEXT(gpCopyTextureSubImage3DEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLint)(yoffset), (C.GLint)(zoffset), (C.GLint)(x), (C.GLint)(y), (C.GLsizei)(width), (C.GLsizei)(height))
}
func CoverFillPathInstancedNV(numPaths int32, pathNameType uint32, paths unsafe.Pointer, pathBase uint32, coverMode uint32, transformType uint32, transformValues *float32) {
  C.glowCoverFillPathInstancedNV(gpCoverFillPathInstancedNV, (C.GLsizei)(numPaths), (C.GLenum)(pathNameType), paths, (C.GLuint)(pathBase), (C.GLenum)(coverMode), (C.GLenum)(transformType), (*C.GLfloat)(unsafe.Pointer(transformValues)))
}
func CoverFillPathNV(path uint32, coverMode uint32) {
  C.glowCoverFillPathNV(gpCoverFillPathNV, (C.GLuint)(path), (C.GLenum)(coverMode))
}
func CoverStrokePathInstancedNV(numPaths int32, pathNameType uint32, paths unsafe.Pointer, pathBase uint32, coverMode uint32, transformType uint32, transformValues *float32) {
  C.glowCoverStrokePathInstancedNV(gpCoverStrokePathInstancedNV, (C.GLsizei)(numPaths), (C.GLenum)(pathNameType), paths, (C.GLuint)(pathBase), (C.GLenum)(coverMode), (C.GLenum)(transformType), (*C.GLfloat)(unsafe.Pointer(transformValues)))
}
func CoverStrokePathNV(path uint32, coverMode uint32) {
  C.glowCoverStrokePathNV(gpCoverStrokePathNV, (C.GLuint)(path), (C.GLenum)(coverMode))
}
func CreatePerfQueryINTEL(queryId uint32, queryHandle *uint32) {
  C.glowCreatePerfQueryINTEL(gpCreatePerfQueryINTEL, (C.GLuint)(queryId), (*C.GLuint)(unsafe.Pointer(queryHandle)))
}
// Creates a program object
func CreateProgram() uint32 {
  ret := C.glowCreateProgram(gpCreateProgram)
  return (uint32)(ret)
}
func CreateProgramObjectARB() uintptr {
  ret := C.glowCreateProgramObjectARB(gpCreateProgramObjectARB)
  return (uintptr)(ret)
}
// Creates a shader object
func CreateShader(xtype uint32) uint32 {
  ret := C.glowCreateShader(gpCreateShader, (C.GLenum)(xtype))
  return (uint32)(ret)
}
func CreateShaderObjectARB(shaderType uint32) uintptr {
  ret := C.glowCreateShaderObjectARB(gpCreateShaderObjectARB, (C.GLenum)(shaderType))
  return (uintptr)(ret)
}
func CreateShaderProgramEXT(xtype uint32, xstring *int8) uint32 {
  ret := C.glowCreateShaderProgramEXT(gpCreateShaderProgramEXT, (C.GLenum)(xtype), (*C.GLchar)(unsafe.Pointer(xstring)))
  return (uint32)(ret)
}
// create a stand-alone program from an array of null-terminated source code strings
func CreateShaderProgramv(xtype uint32, count int32, strings **int8) uint32 {
  ret := C.glowCreateShaderProgramv(gpCreateShaderProgramv, (C.GLenum)(xtype), (C.GLsizei)(count), (**C.GLchar)(unsafe.Pointer(strings)))
  return (uint32)(ret)
}
func CreateShaderProgramvEXT(xtype uint32, count int32, strings **int8) uint32 {
  ret := C.glowCreateShaderProgramvEXT(gpCreateShaderProgramvEXT, (C.GLenum)(xtype), (C.GLsizei)(count), (**C.GLchar)(unsafe.Pointer(strings)))
  return (uint32)(ret)
}
func CreateSyncFromCLeventARB(context *C.struct__cl_context, event *C.struct__cl_event, flags uint32) unsafe.Pointer {
  ret := C.glowCreateSyncFromCLeventARB(gpCreateSyncFromCLeventARB, (*C.struct__cl_context)(unsafe.Pointer(context)), (*C.struct__cl_event)(unsafe.Pointer(event)), (C.GLbitfield)(flags))
  return (unsafe.Pointer)(ret)
}
// specify whether front- or back-facing facets can be culled
func CullFace(mode uint32) {
  C.glowCullFace(gpCullFace, (C.GLenum)(mode))
}
func CullParameterdvEXT(pname uint32, params *float64) {
  C.glowCullParameterdvEXT(gpCullParameterdvEXT, (C.GLenum)(pname), (*C.GLdouble)(unsafe.Pointer(params)))
}
func CullParameterfvEXT(pname uint32, params *float32) {
  C.glowCullParameterfvEXT(gpCullParameterfvEXT, (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func CurrentPaletteMatrixARB(index int32) {
  C.glowCurrentPaletteMatrixARB(gpCurrentPaletteMatrixARB, (C.GLint)(index))
}
// specify a callback to receive debugging messages from the GL
func DebugMessageCallback(callback DebugProc, userParam unsafe.Pointer) {
  userDebugCallback = callback
  C.glowDebugMessageCallback(gpDebugMessageCallback, (C.GLDEBUGPROC)(unsafe.Pointer(&callback)), userParam)
}
func DebugMessageCallbackAMD(callback C.GLDEBUGPROCAMD, userParam unsafe.Pointer) {
  C.glowDebugMessageCallbackAMD(gpDebugMessageCallbackAMD, (C.GLDEBUGPROCAMD)(callback), userParam)
}
func DebugMessageCallbackARB(callback DebugProc, userParam unsafe.Pointer) {
  userDebugCallback = callback
  C.glowDebugMessageCallbackARB(gpDebugMessageCallbackARB, (C.GLDEBUGPROCARB)(unsafe.Pointer(&callback)), userParam)
}
func DebugMessageCallbackKHR(callback DebugProc, userParam unsafe.Pointer) {
  userDebugCallback = callback
  C.glowDebugMessageCallbackKHR(gpDebugMessageCallbackKHR, (C.GLDEBUGPROCKHR)(unsafe.Pointer(&callback)), userParam)
}
// control the reporting of debug messages in a debug context
func DebugMessageControl(source uint32, xtype uint32, severity uint32, count int32, ids *uint32, enabled bool) {
  C.glowDebugMessageControl(gpDebugMessageControl, (C.GLenum)(source), (C.GLenum)(xtype), (C.GLenum)(severity), (C.GLsizei)(count), (*C.GLuint)(unsafe.Pointer(ids)), (C.GLboolean)(boolToInt(enabled)))
}
func DebugMessageControlARB(source uint32, xtype uint32, severity uint32, count int32, ids *uint32, enabled bool) {
  C.glowDebugMessageControlARB(gpDebugMessageControlARB, (C.GLenum)(source), (C.GLenum)(xtype), (C.GLenum)(severity), (C.GLsizei)(count), (*C.GLuint)(unsafe.Pointer(ids)), (C.GLboolean)(boolToInt(enabled)))
}
func DebugMessageControlKHR(source uint32, xtype uint32, severity uint32, count int32, ids *uint32, enabled bool) {
  C.glowDebugMessageControlKHR(gpDebugMessageControlKHR, (C.GLenum)(source), (C.GLenum)(xtype), (C.GLenum)(severity), (C.GLsizei)(count), (*C.GLuint)(unsafe.Pointer(ids)), (C.GLboolean)(boolToInt(enabled)))
}
func DebugMessageEnableAMD(category uint32, severity uint32, count int32, ids *uint32, enabled bool) {
  C.glowDebugMessageEnableAMD(gpDebugMessageEnableAMD, (C.GLenum)(category), (C.GLenum)(severity), (C.GLsizei)(count), (*C.GLuint)(unsafe.Pointer(ids)), (C.GLboolean)(boolToInt(enabled)))
}
// inject an application-supplied message into the debug message queue
func DebugMessageInsert(source uint32, xtype uint32, id uint32, severity uint32, length int32, buf *int8) {
  C.glowDebugMessageInsert(gpDebugMessageInsert, (C.GLenum)(source), (C.GLenum)(xtype), (C.GLuint)(id), (C.GLenum)(severity), (C.GLsizei)(length), (*C.GLchar)(unsafe.Pointer(buf)))
}
func DebugMessageInsertAMD(category uint32, severity uint32, id uint32, length int32, buf *int8) {
  C.glowDebugMessageInsertAMD(gpDebugMessageInsertAMD, (C.GLenum)(category), (C.GLenum)(severity), (C.GLuint)(id), (C.GLsizei)(length), (*C.GLchar)(unsafe.Pointer(buf)))
}
func DebugMessageInsertARB(source uint32, xtype uint32, id uint32, severity uint32, length int32, buf *int8) {
  C.glowDebugMessageInsertARB(gpDebugMessageInsertARB, (C.GLenum)(source), (C.GLenum)(xtype), (C.GLuint)(id), (C.GLenum)(severity), (C.GLsizei)(length), (*C.GLchar)(unsafe.Pointer(buf)))
}
func DebugMessageInsertKHR(source uint32, xtype uint32, id uint32, severity uint32, length int32, buf *int8) {
  C.glowDebugMessageInsertKHR(gpDebugMessageInsertKHR, (C.GLenum)(source), (C.GLenum)(xtype), (C.GLuint)(id), (C.GLenum)(severity), (C.GLsizei)(length), (*C.GLchar)(unsafe.Pointer(buf)))
}
func DeformSGIX(mask uint32) {
  C.glowDeformSGIX(gpDeformSGIX, (C.GLbitfield)(mask))
}
func DeformationMap3dSGIX(target uint32, u1 float64, u2 float64, ustride int32, uorder int32, v1 float64, v2 float64, vstride int32, vorder int32, w1 float64, w2 float64, wstride int32, worder int32, points *float64) {
  C.glowDeformationMap3dSGIX(gpDeformationMap3dSGIX, (C.GLenum)(target), (C.GLdouble)(u1), (C.GLdouble)(u2), (C.GLint)(ustride), (C.GLint)(uorder), (C.GLdouble)(v1), (C.GLdouble)(v2), (C.GLint)(vstride), (C.GLint)(vorder), (C.GLdouble)(w1), (C.GLdouble)(w2), (C.GLint)(wstride), (C.GLint)(worder), (*C.GLdouble)(unsafe.Pointer(points)))
}
func DeformationMap3fSGIX(target uint32, u1 float32, u2 float32, ustride int32, uorder int32, v1 float32, v2 float32, vstride int32, vorder int32, w1 float32, w2 float32, wstride int32, worder int32, points *float32) {
  C.glowDeformationMap3fSGIX(gpDeformationMap3fSGIX, (C.GLenum)(target), (C.GLfloat)(u1), (C.GLfloat)(u2), (C.GLint)(ustride), (C.GLint)(uorder), (C.GLfloat)(v1), (C.GLfloat)(v2), (C.GLint)(vstride), (C.GLint)(vorder), (C.GLfloat)(w1), (C.GLfloat)(w2), (C.GLint)(wstride), (C.GLint)(worder), (*C.GLfloat)(unsafe.Pointer(points)))
}
func DeleteAsyncMarkersSGIX(marker uint32, xrange int32) {
  C.glowDeleteAsyncMarkersSGIX(gpDeleteAsyncMarkersSGIX, (C.GLuint)(marker), (C.GLsizei)(xrange))
}
// delete named buffer objects
func DeleteBuffers(n int32, buffers *uint32) {
  C.glowDeleteBuffers(gpDeleteBuffers, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(buffers)))
}
func DeleteBuffersARB(n int32, buffers *uint32) {
  C.glowDeleteBuffersARB(gpDeleteBuffersARB, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(buffers)))
}
func DeleteFencesAPPLE(n int32, fences *uint32) {
  C.glowDeleteFencesAPPLE(gpDeleteFencesAPPLE, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(fences)))
}
func DeleteFencesNV(n int32, fences *uint32) {
  C.glowDeleteFencesNV(gpDeleteFencesNV, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(fences)))
}
func DeleteFragmentShaderATI(id uint32) {
  C.glowDeleteFragmentShaderATI(gpDeleteFragmentShaderATI, (C.GLuint)(id))
}
// delete framebuffer objects
func DeleteFramebuffers(n int32, framebuffers *uint32) {
  C.glowDeleteFramebuffers(gpDeleteFramebuffers, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(framebuffers)))
}
func DeleteFramebuffersEXT(n int32, framebuffers *uint32) {
  C.glowDeleteFramebuffersEXT(gpDeleteFramebuffersEXT, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(framebuffers)))
}
func DeleteNamedStringARB(namelen int32, name *int8) {
  C.glowDeleteNamedStringARB(gpDeleteNamedStringARB, (C.GLint)(namelen), (*C.GLchar)(unsafe.Pointer(name)))
}
func DeleteNamesAMD(identifier uint32, num uint32, names *uint32) {
  C.glowDeleteNamesAMD(gpDeleteNamesAMD, (C.GLenum)(identifier), (C.GLuint)(num), (*C.GLuint)(unsafe.Pointer(names)))
}
func DeleteObjectARB(obj uintptr) {
  C.glowDeleteObjectARB(gpDeleteObjectARB, (C.GLhandleARB)(obj))
}
func DeleteOcclusionQueriesNV(n int32, ids *uint32) {
  C.glowDeleteOcclusionQueriesNV(gpDeleteOcclusionQueriesNV, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(ids)))
}
func DeletePathsNV(path uint32, xrange int32) {
  C.glowDeletePathsNV(gpDeletePathsNV, (C.GLuint)(path), (C.GLsizei)(xrange))
}
func DeletePerfMonitorsAMD(n int32, monitors *uint32) {
  C.glowDeletePerfMonitorsAMD(gpDeletePerfMonitorsAMD, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(monitors)))
}
func DeletePerfQueryINTEL(queryHandle uint32) {
  C.glowDeletePerfQueryINTEL(gpDeletePerfQueryINTEL, (C.GLuint)(queryHandle))
}
// Deletes a program object
func DeleteProgram(program uint32) {
  C.glowDeleteProgram(gpDeleteProgram, (C.GLuint)(program))
}
// delete program pipeline objects
func DeleteProgramPipelines(n int32, pipelines *uint32) {
  C.glowDeleteProgramPipelines(gpDeleteProgramPipelines, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(pipelines)))
}
func DeleteProgramPipelinesEXT(n int32, pipelines *uint32) {
  C.glowDeleteProgramPipelinesEXT(gpDeleteProgramPipelinesEXT, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(pipelines)))
}
func DeleteProgramsARB(n int32, programs *uint32) {
  C.glowDeleteProgramsARB(gpDeleteProgramsARB, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(programs)))
}
func DeleteProgramsNV(n int32, programs *uint32) {
  C.glowDeleteProgramsNV(gpDeleteProgramsNV, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(programs)))
}
// delete named query objects
func DeleteQueries(n int32, ids *uint32) {
  C.glowDeleteQueries(gpDeleteQueries, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(ids)))
}
func DeleteQueriesARB(n int32, ids *uint32) {
  C.glowDeleteQueriesARB(gpDeleteQueriesARB, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(ids)))
}
// delete renderbuffer objects
func DeleteRenderbuffers(n int32, renderbuffers *uint32) {
  C.glowDeleteRenderbuffers(gpDeleteRenderbuffers, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(renderbuffers)))
}
func DeleteRenderbuffersEXT(n int32, renderbuffers *uint32) {
  C.glowDeleteRenderbuffersEXT(gpDeleteRenderbuffersEXT, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(renderbuffers)))
}
// delete named sampler objects
func DeleteSamplers(count int32, samplers *uint32) {
  C.glowDeleteSamplers(gpDeleteSamplers, (C.GLsizei)(count), (*C.GLuint)(unsafe.Pointer(samplers)))
}
// Deletes a shader object
func DeleteShader(shader uint32) {
  C.glowDeleteShader(gpDeleteShader, (C.GLuint)(shader))
}
// delete a sync object
func DeleteSync(sync unsafe.Pointer) {
  C.glowDeleteSync(gpDeleteSync, (C.GLsync)(sync))
}
// delete named textures
func DeleteTextures(n int32, textures *uint32) {
  C.glowDeleteTextures(gpDeleteTextures, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(textures)))
}
func DeleteTexturesEXT(n int32, textures *uint32) {
  C.glowDeleteTexturesEXT(gpDeleteTexturesEXT, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(textures)))
}
// delete transform feedback objects
func DeleteTransformFeedbacks(n int32, ids *uint32) {
  C.glowDeleteTransformFeedbacks(gpDeleteTransformFeedbacks, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(ids)))
}
func DeleteTransformFeedbacksNV(n int32, ids *uint32) {
  C.glowDeleteTransformFeedbacksNV(gpDeleteTransformFeedbacksNV, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(ids)))
}
// delete vertex array objects
func DeleteVertexArrays(n int32, arrays *uint32) {
  C.glowDeleteVertexArrays(gpDeleteVertexArrays, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(arrays)))
}
func DeleteVertexArraysAPPLE(n int32, arrays *uint32) {
  C.glowDeleteVertexArraysAPPLE(gpDeleteVertexArraysAPPLE, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(arrays)))
}
func DeleteVertexShaderEXT(id uint32) {
  C.glowDeleteVertexShaderEXT(gpDeleteVertexShaderEXT, (C.GLuint)(id))
}
func DepthBoundsEXT(zmin float64, zmax float64) {
  C.glowDepthBoundsEXT(gpDepthBoundsEXT, (C.GLclampd)(zmin), (C.GLclampd)(zmax))
}
func DepthBoundsdNV(zmin float64, zmax float64) {
  C.glowDepthBoundsdNV(gpDepthBoundsdNV, (C.GLdouble)(zmin), (C.GLdouble)(zmax))
}
// specify the value used for depth buffer comparisons
func DepthFunc(xfunc uint32) {
  C.glowDepthFunc(gpDepthFunc, (C.GLenum)(xfunc))
}
// enable or disable writing into the depth buffer
func DepthMask(flag bool) {
  C.glowDepthMask(gpDepthMask, (C.GLboolean)(boolToInt(flag)))
}
// specify mapping of depth values from normalized device coordinates to window coordinates
func DepthRange(near float64, far float64) {
  C.glowDepthRange(gpDepthRange, (C.GLdouble)(near), (C.GLdouble)(far))
}
func DepthRangeArrayv(first uint32, count int32, v *float64) {
  C.glowDepthRangeArrayv(gpDepthRangeArrayv, (C.GLuint)(first), (C.GLsizei)(count), (*C.GLdouble)(unsafe.Pointer(v)))
}
// specify mapping of depth values from normalized device coordinates to window coordinates for a specified viewport
func DepthRangeIndexed(index uint32, n float64, f float64) {
  C.glowDepthRangeIndexed(gpDepthRangeIndexed, (C.GLuint)(index), (C.GLdouble)(n), (C.GLdouble)(f))
}
func DepthRangedNV(zNear float64, zFar float64) {
  C.glowDepthRangedNV(gpDepthRangedNV, (C.GLdouble)(zNear), (C.GLdouble)(zFar))
}
func DepthRangef(n float32, f float32) {
  C.glowDepthRangef(gpDepthRangef, (C.GLfloat)(n), (C.GLfloat)(f))
}
func DepthRangefOES(n float32, f float32) {
  C.glowDepthRangefOES(gpDepthRangefOES, (C.GLclampf)(n), (C.GLclampf)(f))
}
func DepthRangexOES(n int32, f int32) {
  C.glowDepthRangexOES(gpDepthRangexOES, (C.GLfixed)(n), (C.GLfixed)(f))
}
func DetachObjectARB(containerObj uintptr, attachedObj uintptr) {
  C.glowDetachObjectARB(gpDetachObjectARB, (C.GLhandleARB)(containerObj), (C.GLhandleARB)(attachedObj))
}
// Detaches a shader object from a program object to which it is attached
func DetachShader(program uint32, shader uint32) {
  C.glowDetachShader(gpDetachShader, (C.GLuint)(program), (C.GLuint)(shader))
}
func DetailTexFuncSGIS(target uint32, n int32, points *float32) {
  C.glowDetailTexFuncSGIS(gpDetailTexFuncSGIS, (C.GLenum)(target), (C.GLsizei)(n), (*C.GLfloat)(unsafe.Pointer(points)))
}
func Disable(cap uint32) {
  C.glowDisable(gpDisable, (C.GLenum)(cap))
}
func DisableClientStateIndexedEXT(array uint32, index uint32) {
  C.glowDisableClientStateIndexedEXT(gpDisableClientStateIndexedEXT, (C.GLenum)(array), (C.GLuint)(index))
}
func DisableClientStateiEXT(array uint32, index uint32) {
  C.glowDisableClientStateiEXT(gpDisableClientStateiEXT, (C.GLenum)(array), (C.GLuint)(index))
}
func DisableIndexedEXT(target uint32, index uint32) {
  C.glowDisableIndexedEXT(gpDisableIndexedEXT, (C.GLenum)(target), (C.GLuint)(index))
}
func DisableVariantClientStateEXT(id uint32) {
  C.glowDisableVariantClientStateEXT(gpDisableVariantClientStateEXT, (C.GLuint)(id))
}
func DisableVertexArrayAttribEXT(vaobj uint32, index uint32) {
  C.glowDisableVertexArrayAttribEXT(gpDisableVertexArrayAttribEXT, (C.GLuint)(vaobj), (C.GLuint)(index))
}
func DisableVertexArrayEXT(vaobj uint32, array uint32) {
  C.glowDisableVertexArrayEXT(gpDisableVertexArrayEXT, (C.GLuint)(vaobj), (C.GLenum)(array))
}
func DisableVertexAttribAPPLE(index uint32, pname uint32) {
  C.glowDisableVertexAttribAPPLE(gpDisableVertexAttribAPPLE, (C.GLuint)(index), (C.GLenum)(pname))
}
// Enable or disable a generic vertex attribute array
func DisableVertexAttribArray(index uint32) {
  C.glowDisableVertexAttribArray(gpDisableVertexAttribArray, (C.GLuint)(index))
}
func DisableVertexAttribArrayARB(index uint32) {
  C.glowDisableVertexAttribArrayARB(gpDisableVertexAttribArrayARB, (C.GLuint)(index))
}
func Disablei(target uint32, index uint32) {
  C.glowDisablei(gpDisablei, (C.GLenum)(target), (C.GLuint)(index))
}
// launch one or more compute work groups
func DispatchCompute(num_groups_x uint32, num_groups_y uint32, num_groups_z uint32) {
  C.glowDispatchCompute(gpDispatchCompute, (C.GLuint)(num_groups_x), (C.GLuint)(num_groups_y), (C.GLuint)(num_groups_z))
}
func DispatchComputeGroupSizeARB(num_groups_x uint32, num_groups_y uint32, num_groups_z uint32, group_size_x uint32, group_size_y uint32, group_size_z uint32) {
  C.glowDispatchComputeGroupSizeARB(gpDispatchComputeGroupSizeARB, (C.GLuint)(num_groups_x), (C.GLuint)(num_groups_y), (C.GLuint)(num_groups_z), (C.GLuint)(group_size_x), (C.GLuint)(group_size_y), (C.GLuint)(group_size_z))
}
// launch one or more compute work groups using parameters stored in a buffer
func DispatchComputeIndirect(indirect int) {
  C.glowDispatchComputeIndirect(gpDispatchComputeIndirect, (C.GLintptr)(indirect))
}
// render primitives from array data
func DrawArrays(mode uint32, first int32, count int32) {
  C.glowDrawArrays(gpDrawArrays, (C.GLenum)(mode), (C.GLint)(first), (C.GLsizei)(count))
}
func DrawArraysEXT(mode uint32, first int32, count int32) {
  C.glowDrawArraysEXT(gpDrawArraysEXT, (C.GLenum)(mode), (C.GLint)(first), (C.GLsizei)(count))
}
// render primitives from array data, taking parameters from memory
func DrawArraysIndirect(mode uint32, indirect unsafe.Pointer) {
  C.glowDrawArraysIndirect(gpDrawArraysIndirect, (C.GLenum)(mode), indirect)
}
// draw multiple instances of a range of elements
func DrawArraysInstanced(mode uint32, first int32, count int32, instancecount int32) {
  C.glowDrawArraysInstanced(gpDrawArraysInstanced, (C.GLenum)(mode), (C.GLint)(first), (C.GLsizei)(count), (C.GLsizei)(instancecount))
}
func DrawArraysInstancedARB(mode uint32, first int32, count int32, primcount int32) {
  C.glowDrawArraysInstancedARB(gpDrawArraysInstancedARB, (C.GLenum)(mode), (C.GLint)(first), (C.GLsizei)(count), (C.GLsizei)(primcount))
}
// draw multiple instances of a range of elements with offset applied to instanced attributes
func DrawArraysInstancedBaseInstance(mode uint32, first int32, count int32, instancecount int32, baseinstance uint32) {
  C.glowDrawArraysInstancedBaseInstance(gpDrawArraysInstancedBaseInstance, (C.GLenum)(mode), (C.GLint)(first), (C.GLsizei)(count), (C.GLsizei)(instancecount), (C.GLuint)(baseinstance))
}
func DrawArraysInstancedEXT(mode uint32, start int32, count int32, primcount int32) {
  C.glowDrawArraysInstancedEXT(gpDrawArraysInstancedEXT, (C.GLenum)(mode), (C.GLint)(start), (C.GLsizei)(count), (C.GLsizei)(primcount))
}
// specify which color buffers are to be drawn into
func DrawBuffer(mode uint32) {
  C.glowDrawBuffer(gpDrawBuffer, (C.GLenum)(mode))
}
// Specifies a list of color buffers to be drawn into
func DrawBuffers(n int32, bufs *uint32) {
  C.glowDrawBuffers(gpDrawBuffers, (C.GLsizei)(n), (*C.GLenum)(unsafe.Pointer(bufs)))
}
func DrawBuffersARB(n int32, bufs *uint32) {
  C.glowDrawBuffersARB(gpDrawBuffersARB, (C.GLsizei)(n), (*C.GLenum)(unsafe.Pointer(bufs)))
}
func DrawBuffersATI(n int32, bufs *uint32) {
  C.glowDrawBuffersATI(gpDrawBuffersATI, (C.GLsizei)(n), (*C.GLenum)(unsafe.Pointer(bufs)))
}
func DrawElementArrayAPPLE(mode uint32, first int32, count int32) {
  C.glowDrawElementArrayAPPLE(gpDrawElementArrayAPPLE, (C.GLenum)(mode), (C.GLint)(first), (C.GLsizei)(count))
}
func DrawElementArrayATI(mode uint32, count int32) {
  C.glowDrawElementArrayATI(gpDrawElementArrayATI, (C.GLenum)(mode), (C.GLsizei)(count))
}
// render primitives from array data
func DrawElements(mode uint32, count int32, xtype uint32, indices unsafe.Pointer) {
  C.glowDrawElements(gpDrawElements, (C.GLenum)(mode), (C.GLsizei)(count), (C.GLenum)(xtype), indices)
}
// render primitives from array data with a per-element offset
func DrawElementsBaseVertex(mode uint32, count int32, xtype uint32, indices unsafe.Pointer, basevertex int32) {
  C.glowDrawElementsBaseVertex(gpDrawElementsBaseVertex, (C.GLenum)(mode), (C.GLsizei)(count), (C.GLenum)(xtype), indices, (C.GLint)(basevertex))
}
// render indexed primitives from array data, taking parameters from memory
func DrawElementsIndirect(mode uint32, xtype uint32, indirect unsafe.Pointer) {
  C.glowDrawElementsIndirect(gpDrawElementsIndirect, (C.GLenum)(mode), (C.GLenum)(xtype), indirect)
}
// draw multiple instances of a set of elements
func DrawElementsInstanced(mode uint32, count int32, xtype uint32, indices unsafe.Pointer, instancecount int32) {
  C.glowDrawElementsInstanced(gpDrawElementsInstanced, (C.GLenum)(mode), (C.GLsizei)(count), (C.GLenum)(xtype), indices, (C.GLsizei)(instancecount))
}
func DrawElementsInstancedARB(mode uint32, count int32, xtype uint32, indices unsafe.Pointer, primcount int32) {
  C.glowDrawElementsInstancedARB(gpDrawElementsInstancedARB, (C.GLenum)(mode), (C.GLsizei)(count), (C.GLenum)(xtype), indices, (C.GLsizei)(primcount))
}
// draw multiple instances of a set of elements with offset applied to instanced attributes
func DrawElementsInstancedBaseInstance(mode uint32, count int32, xtype uint32, indices unsafe.Pointer, instancecount int32, baseinstance uint32) {
  C.glowDrawElementsInstancedBaseInstance(gpDrawElementsInstancedBaseInstance, (C.GLenum)(mode), (C.GLsizei)(count), (C.GLenum)(xtype), indices, (C.GLsizei)(instancecount), (C.GLuint)(baseinstance))
}
// render multiple instances of a set of primitives from array data with a per-element offset
func DrawElementsInstancedBaseVertex(mode uint32, count int32, xtype uint32, indices unsafe.Pointer, instancecount int32, basevertex int32) {
  C.glowDrawElementsInstancedBaseVertex(gpDrawElementsInstancedBaseVertex, (C.GLenum)(mode), (C.GLsizei)(count), (C.GLenum)(xtype), indices, (C.GLsizei)(instancecount), (C.GLint)(basevertex))
}
// render multiple instances of a set of primitives from array data with a per-element offset
func DrawElementsInstancedBaseVertexBaseInstance(mode uint32, count int32, xtype uint32, indices unsafe.Pointer, instancecount int32, basevertex int32, baseinstance uint32) {
  C.glowDrawElementsInstancedBaseVertexBaseInstance(gpDrawElementsInstancedBaseVertexBaseInstance, (C.GLenum)(mode), (C.GLsizei)(count), (C.GLenum)(xtype), indices, (C.GLsizei)(instancecount), (C.GLint)(basevertex), (C.GLuint)(baseinstance))
}
func DrawElementsInstancedEXT(mode uint32, count int32, xtype uint32, indices unsafe.Pointer, primcount int32) {
  C.glowDrawElementsInstancedEXT(gpDrawElementsInstancedEXT, (C.GLenum)(mode), (C.GLsizei)(count), (C.GLenum)(xtype), indices, (C.GLsizei)(primcount))
}
func DrawMeshArraysSUN(mode uint32, first int32, count int32, width int32) {
  C.glowDrawMeshArraysSUN(gpDrawMeshArraysSUN, (C.GLenum)(mode), (C.GLint)(first), (C.GLsizei)(count), (C.GLsizei)(width))
}
func DrawRangeElementArrayAPPLE(mode uint32, start uint32, end uint32, first int32, count int32) {
  C.glowDrawRangeElementArrayAPPLE(gpDrawRangeElementArrayAPPLE, (C.GLenum)(mode), (C.GLuint)(start), (C.GLuint)(end), (C.GLint)(first), (C.GLsizei)(count))
}
func DrawRangeElementArrayATI(mode uint32, start uint32, end uint32, count int32) {
  C.glowDrawRangeElementArrayATI(gpDrawRangeElementArrayATI, (C.GLenum)(mode), (C.GLuint)(start), (C.GLuint)(end), (C.GLsizei)(count))
}
// render primitives from array data
func DrawRangeElements(mode uint32, start uint32, end uint32, count int32, xtype uint32, indices unsafe.Pointer) {
  C.glowDrawRangeElements(gpDrawRangeElements, (C.GLenum)(mode), (C.GLuint)(start), (C.GLuint)(end), (C.GLsizei)(count), (C.GLenum)(xtype), indices)
}
// render primitives from array data with a per-element offset
func DrawRangeElementsBaseVertex(mode uint32, start uint32, end uint32, count int32, xtype uint32, indices unsafe.Pointer, basevertex int32) {
  C.glowDrawRangeElementsBaseVertex(gpDrawRangeElementsBaseVertex, (C.GLenum)(mode), (C.GLuint)(start), (C.GLuint)(end), (C.GLsizei)(count), (C.GLenum)(xtype), indices, (C.GLint)(basevertex))
}
func DrawRangeElementsEXT(mode uint32, start uint32, end uint32, count int32, xtype uint32, indices unsafe.Pointer) {
  C.glowDrawRangeElementsEXT(gpDrawRangeElementsEXT, (C.GLenum)(mode), (C.GLuint)(start), (C.GLuint)(end), (C.GLsizei)(count), (C.GLenum)(xtype), indices)
}
func DrawTextureNV(texture uint32, sampler uint32, x0 float32, y0 float32, x1 float32, y1 float32, z float32, s0 float32, t0 float32, s1 float32, t1 float32) {
  C.glowDrawTextureNV(gpDrawTextureNV, (C.GLuint)(texture), (C.GLuint)(sampler), (C.GLfloat)(x0), (C.GLfloat)(y0), (C.GLfloat)(x1), (C.GLfloat)(y1), (C.GLfloat)(z), (C.GLfloat)(s0), (C.GLfloat)(t0), (C.GLfloat)(s1), (C.GLfloat)(t1))
}
// render primitives using a count derived from a transform feedback object
func DrawTransformFeedback(mode uint32, id uint32) {
  C.glowDrawTransformFeedback(gpDrawTransformFeedback, (C.GLenum)(mode), (C.GLuint)(id))
}
// render multiple instances of primitives using a count derived from a transform feedback object
func DrawTransformFeedbackInstanced(mode uint32, id uint32, instancecount int32) {
  C.glowDrawTransformFeedbackInstanced(gpDrawTransformFeedbackInstanced, (C.GLenum)(mode), (C.GLuint)(id), (C.GLsizei)(instancecount))
}
func DrawTransformFeedbackNV(mode uint32, id uint32) {
  C.glowDrawTransformFeedbackNV(gpDrawTransformFeedbackNV, (C.GLenum)(mode), (C.GLuint)(id))
}
// render primitives using a count derived from a specifed stream of a transform feedback object
func DrawTransformFeedbackStream(mode uint32, id uint32, stream uint32) {
  C.glowDrawTransformFeedbackStream(gpDrawTransformFeedbackStream, (C.GLenum)(mode), (C.GLuint)(id), (C.GLuint)(stream))
}
// render multiple instances of primitives using a count derived from a specifed stream of a transform feedback object
func DrawTransformFeedbackStreamInstanced(mode uint32, id uint32, stream uint32, instancecount int32) {
  C.glowDrawTransformFeedbackStreamInstanced(gpDrawTransformFeedbackStreamInstanced, (C.GLenum)(mode), (C.GLuint)(id), (C.GLuint)(stream), (C.GLsizei)(instancecount))
}
func EdgeFlagFormatNV(stride int32) {
  C.glowEdgeFlagFormatNV(gpEdgeFlagFormatNV, (C.GLsizei)(stride))
}
func EdgeFlagPointerEXT(stride int32, count int32, pointer *bool) {
  C.glowEdgeFlagPointerEXT(gpEdgeFlagPointerEXT, (C.GLsizei)(stride), (C.GLsizei)(count), (*C.GLboolean)(unsafe.Pointer(pointer)))
}
func EdgeFlagPointerListIBM(stride int32, pointer **bool, ptrstride int32) {
  C.glowEdgeFlagPointerListIBM(gpEdgeFlagPointerListIBM, (C.GLint)(stride), (**C.GLboolean)(unsafe.Pointer(pointer)), (C.GLint)(ptrstride))
}
func ElementPointerAPPLE(xtype uint32, pointer unsafe.Pointer) {
  C.glowElementPointerAPPLE(gpElementPointerAPPLE, (C.GLenum)(xtype), pointer)
}
func ElementPointerATI(xtype uint32, pointer unsafe.Pointer) {
  C.glowElementPointerATI(gpElementPointerATI, (C.GLenum)(xtype), pointer)
}
// enable or disable server-side GL capabilities
func Enable(cap uint32) {
  C.glowEnable(gpEnable, (C.GLenum)(cap))
}
func EnableClientStateIndexedEXT(array uint32, index uint32) {
  C.glowEnableClientStateIndexedEXT(gpEnableClientStateIndexedEXT, (C.GLenum)(array), (C.GLuint)(index))
}
func EnableClientStateiEXT(array uint32, index uint32) {
  C.glowEnableClientStateiEXT(gpEnableClientStateiEXT, (C.GLenum)(array), (C.GLuint)(index))
}
func EnableIndexedEXT(target uint32, index uint32) {
  C.glowEnableIndexedEXT(gpEnableIndexedEXT, (C.GLenum)(target), (C.GLuint)(index))
}
func EnableVariantClientStateEXT(id uint32) {
  C.glowEnableVariantClientStateEXT(gpEnableVariantClientStateEXT, (C.GLuint)(id))
}
func EnableVertexArrayAttribEXT(vaobj uint32, index uint32) {
  C.glowEnableVertexArrayAttribEXT(gpEnableVertexArrayAttribEXT, (C.GLuint)(vaobj), (C.GLuint)(index))
}
func EnableVertexArrayEXT(vaobj uint32, array uint32) {
  C.glowEnableVertexArrayEXT(gpEnableVertexArrayEXT, (C.GLuint)(vaobj), (C.GLenum)(array))
}
func EnableVertexAttribAPPLE(index uint32, pname uint32) {
  C.glowEnableVertexAttribAPPLE(gpEnableVertexAttribAPPLE, (C.GLuint)(index), (C.GLenum)(pname))
}
// Enable or disable a generic vertex attribute array
func EnableVertexAttribArray(index uint32) {
  C.glowEnableVertexAttribArray(gpEnableVertexAttribArray, (C.GLuint)(index))
}
func EnableVertexAttribArrayARB(index uint32) {
  C.glowEnableVertexAttribArrayARB(gpEnableVertexAttribArrayARB, (C.GLuint)(index))
}
func Enablei(target uint32, index uint32) {
  C.glowEnablei(gpEnablei, (C.GLenum)(target), (C.GLuint)(index))
}
func EndConditionalRender() {
  C.glowEndConditionalRender(gpEndConditionalRender)
}
func EndConditionalRenderNV() {
  C.glowEndConditionalRenderNV(gpEndConditionalRenderNV)
}
func EndConditionalRenderNVX() {
  C.glowEndConditionalRenderNVX(gpEndConditionalRenderNVX)
}
func EndFragmentShaderATI() {
  C.glowEndFragmentShaderATI(gpEndFragmentShaderATI)
}
func EndOcclusionQueryNV() {
  C.glowEndOcclusionQueryNV(gpEndOcclusionQueryNV)
}
func EndPerfMonitorAMD(monitor uint32) {
  C.glowEndPerfMonitorAMD(gpEndPerfMonitorAMD, (C.GLuint)(monitor))
}
func EndPerfQueryINTEL(queryHandle uint32) {
  C.glowEndPerfQueryINTEL(gpEndPerfQueryINTEL, (C.GLuint)(queryHandle))
}
func EndQuery(target uint32) {
  C.glowEndQuery(gpEndQuery, (C.GLenum)(target))
}
func EndQueryARB(target uint32) {
  C.glowEndQueryARB(gpEndQueryARB, (C.GLenum)(target))
}
func EndQueryIndexed(target uint32, index uint32) {
  C.glowEndQueryIndexed(gpEndQueryIndexed, (C.GLenum)(target), (C.GLuint)(index))
}
func EndTransformFeedback() {
  C.glowEndTransformFeedback(gpEndTransformFeedback)
}
func EndTransformFeedbackEXT() {
  C.glowEndTransformFeedbackEXT(gpEndTransformFeedbackEXT)
}
func EndTransformFeedbackNV() {
  C.glowEndTransformFeedbackNV(gpEndTransformFeedbackNV)
}
func EndVertexShaderEXT() {
  C.glowEndVertexShaderEXT(gpEndVertexShaderEXT)
}
func EndVideoCaptureNV(video_capture_slot uint32) {
  C.glowEndVideoCaptureNV(gpEndVideoCaptureNV, (C.GLuint)(video_capture_slot))
}
func EvalCoord1xOES(u int32) {
  C.glowEvalCoord1xOES(gpEvalCoord1xOES, (C.GLfixed)(u))
}
func EvalCoord1xvOES(coords *int32) {
  C.glowEvalCoord1xvOES(gpEvalCoord1xvOES, (*C.GLfixed)(unsafe.Pointer(coords)))
}
func EvalCoord2xOES(u int32, v int32) {
  C.glowEvalCoord2xOES(gpEvalCoord2xOES, (C.GLfixed)(u), (C.GLfixed)(v))
}
func EvalCoord2xvOES(coords *int32) {
  C.glowEvalCoord2xvOES(gpEvalCoord2xvOES, (*C.GLfixed)(unsafe.Pointer(coords)))
}
func EvalMapsNV(target uint32, mode uint32) {
  C.glowEvalMapsNV(gpEvalMapsNV, (C.GLenum)(target), (C.GLenum)(mode))
}
func ExecuteProgramNV(target uint32, id uint32, params *float32) {
  C.glowExecuteProgramNV(gpExecuteProgramNV, (C.GLenum)(target), (C.GLuint)(id), (*C.GLfloat)(unsafe.Pointer(params)))
}
func ExtractComponentEXT(res uint32, src uint32, num uint32) {
  C.glowExtractComponentEXT(gpExtractComponentEXT, (C.GLuint)(res), (C.GLuint)(src), (C.GLuint)(num))
}
func FeedbackBufferxOES(n int32, xtype uint32, buffer *int32) {
  C.glowFeedbackBufferxOES(gpFeedbackBufferxOES, (C.GLsizei)(n), (C.GLenum)(xtype), (*C.GLfixed)(unsafe.Pointer(buffer)))
}
// create a new sync object and insert it into the GL command stream
func FenceSync(condition uint32, flags uint32) unsafe.Pointer {
  ret := C.glowFenceSync(gpFenceSync, (C.GLenum)(condition), (C.GLbitfield)(flags))
  return (unsafe.Pointer)(ret)
}
func FinalCombinerInputNV(variable uint32, input uint32, mapping uint32, componentUsage uint32) {
  C.glowFinalCombinerInputNV(gpFinalCombinerInputNV, (C.GLenum)(variable), (C.GLenum)(input), (C.GLenum)(mapping), (C.GLenum)(componentUsage))
}
// block until all GL execution is complete
func Finish() {
  C.glowFinish(gpFinish)
}
func FinishAsyncSGIX(markerp *uint32) int32 {
  ret := C.glowFinishAsyncSGIX(gpFinishAsyncSGIX, (*C.GLuint)(unsafe.Pointer(markerp)))
  return (int32)(ret)
}
func FinishFenceAPPLE(fence uint32) {
  C.glowFinishFenceAPPLE(gpFinishFenceAPPLE, (C.GLuint)(fence))
}
func FinishFenceNV(fence uint32) {
  C.glowFinishFenceNV(gpFinishFenceNV, (C.GLuint)(fence))
}
func FinishObjectAPPLE(object uint32, name int32) {
  C.glowFinishObjectAPPLE(gpFinishObjectAPPLE, (C.GLenum)(object), (C.GLint)(name))
}
func FinishTextureSUNX() {
  C.glowFinishTextureSUNX(gpFinishTextureSUNX)
}
// force execution of GL commands in finite time
func Flush() {
  C.glowFlush(gpFlush)
}
// indicate modifications to a range of a mapped buffer
func FlushMappedBufferRange(target uint32, offset int, length int) {
  C.glowFlushMappedBufferRange(gpFlushMappedBufferRange, (C.GLenum)(target), (C.GLintptr)(offset), (C.GLsizeiptr)(length))
}
func FlushMappedBufferRangeAPPLE(target uint32, offset int, size int) {
  C.glowFlushMappedBufferRangeAPPLE(gpFlushMappedBufferRangeAPPLE, (C.GLenum)(target), (C.GLintptr)(offset), (C.GLsizeiptr)(size))
}
func FlushMappedNamedBufferRangeEXT(buffer uint32, offset int, length int) {
  C.glowFlushMappedNamedBufferRangeEXT(gpFlushMappedNamedBufferRangeEXT, (C.GLuint)(buffer), (C.GLintptr)(offset), (C.GLsizeiptr)(length))
}
func FlushPixelDataRangeNV(target uint32) {
  C.glowFlushPixelDataRangeNV(gpFlushPixelDataRangeNV, (C.GLenum)(target))
}
func FlushRasterSGIX() {
  C.glowFlushRasterSGIX(gpFlushRasterSGIX)
}
func FlushStaticDataIBM(target uint32) {
  C.glowFlushStaticDataIBM(gpFlushStaticDataIBM, (C.GLenum)(target))
}
func FlushVertexArrayRangeAPPLE(length int32, pointer unsafe.Pointer) {
  C.glowFlushVertexArrayRangeAPPLE(gpFlushVertexArrayRangeAPPLE, (C.GLsizei)(length), pointer)
}
func FlushVertexArrayRangeNV() {
  C.glowFlushVertexArrayRangeNV(gpFlushVertexArrayRangeNV)
}
func FogCoordFormatNV(xtype uint32, stride int32) {
  C.glowFogCoordFormatNV(gpFogCoordFormatNV, (C.GLenum)(xtype), (C.GLsizei)(stride))
}
func FogCoordPointerEXT(xtype uint32, stride int32, pointer unsafe.Pointer) {
  C.glowFogCoordPointerEXT(gpFogCoordPointerEXT, (C.GLenum)(xtype), (C.GLsizei)(stride), pointer)
}
func FogCoordPointerListIBM(xtype uint32, stride int32, pointer *unsafe.Pointer, ptrstride int32) {
  C.glowFogCoordPointerListIBM(gpFogCoordPointerListIBM, (C.GLenum)(xtype), (C.GLint)(stride), pointer, (C.GLint)(ptrstride))
}
func FogCoorddEXT(coord float64) {
  C.glowFogCoorddEXT(gpFogCoorddEXT, (C.GLdouble)(coord))
}
func FogCoorddvEXT(coord *float64) {
  C.glowFogCoorddvEXT(gpFogCoorddvEXT, (*C.GLdouble)(unsafe.Pointer(coord)))
}
func FogCoordfEXT(coord float32) {
  C.glowFogCoordfEXT(gpFogCoordfEXT, (C.GLfloat)(coord))
}
func FogCoordfvEXT(coord *float32) {
  C.glowFogCoordfvEXT(gpFogCoordfvEXT, (*C.GLfloat)(unsafe.Pointer(coord)))
}
func FogCoordhNV(fog uint16) {
  C.glowFogCoordhNV(gpFogCoordhNV, (C.GLhalfNV)(fog))
}
func FogCoordhvNV(fog *uint16) {
  C.glowFogCoordhvNV(gpFogCoordhvNV, (*C.GLhalfNV)(unsafe.Pointer(fog)))
}
func FogFuncSGIS(n int32, points *float32) {
  C.glowFogFuncSGIS(gpFogFuncSGIS, (C.GLsizei)(n), (*C.GLfloat)(unsafe.Pointer(points)))
}
func FogxOES(pname uint32, param int32) {
  C.glowFogxOES(gpFogxOES, (C.GLenum)(pname), (C.GLfixed)(param))
}
func FogxvOES(pname uint32, param *int32) {
  C.glowFogxvOES(gpFogxvOES, (C.GLenum)(pname), (*C.GLfixed)(unsafe.Pointer(param)))
}
func FragmentColorMaterialSGIX(face uint32, mode uint32) {
  C.glowFragmentColorMaterialSGIX(gpFragmentColorMaterialSGIX, (C.GLenum)(face), (C.GLenum)(mode))
}
func FragmentLightModelfSGIX(pname uint32, param float32) {
  C.glowFragmentLightModelfSGIX(gpFragmentLightModelfSGIX, (C.GLenum)(pname), (C.GLfloat)(param))
}
func FragmentLightModelfvSGIX(pname uint32, params *float32) {
  C.glowFragmentLightModelfvSGIX(gpFragmentLightModelfvSGIX, (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func FragmentLightModeliSGIX(pname uint32, param int32) {
  C.glowFragmentLightModeliSGIX(gpFragmentLightModeliSGIX, (C.GLenum)(pname), (C.GLint)(param))
}
func FragmentLightModelivSGIX(pname uint32, params *int32) {
  C.glowFragmentLightModelivSGIX(gpFragmentLightModelivSGIX, (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func FragmentLightfSGIX(light uint32, pname uint32, param float32) {
  C.glowFragmentLightfSGIX(gpFragmentLightfSGIX, (C.GLenum)(light), (C.GLenum)(pname), (C.GLfloat)(param))
}
func FragmentLightfvSGIX(light uint32, pname uint32, params *float32) {
  C.glowFragmentLightfvSGIX(gpFragmentLightfvSGIX, (C.GLenum)(light), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func FragmentLightiSGIX(light uint32, pname uint32, param int32) {
  C.glowFragmentLightiSGIX(gpFragmentLightiSGIX, (C.GLenum)(light), (C.GLenum)(pname), (C.GLint)(param))
}
func FragmentLightivSGIX(light uint32, pname uint32, params *int32) {
  C.glowFragmentLightivSGIX(gpFragmentLightivSGIX, (C.GLenum)(light), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func FragmentMaterialfSGIX(face uint32, pname uint32, param float32) {
  C.glowFragmentMaterialfSGIX(gpFragmentMaterialfSGIX, (C.GLenum)(face), (C.GLenum)(pname), (C.GLfloat)(param))
}
func FragmentMaterialfvSGIX(face uint32, pname uint32, params *float32) {
  C.glowFragmentMaterialfvSGIX(gpFragmentMaterialfvSGIX, (C.GLenum)(face), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func FragmentMaterialiSGIX(face uint32, pname uint32, param int32) {
  C.glowFragmentMaterialiSGIX(gpFragmentMaterialiSGIX, (C.GLenum)(face), (C.GLenum)(pname), (C.GLint)(param))
}
func FragmentMaterialivSGIX(face uint32, pname uint32, params *int32) {
  C.glowFragmentMaterialivSGIX(gpFragmentMaterialivSGIX, (C.GLenum)(face), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func FrameTerminatorGREMEDY() {
  C.glowFrameTerminatorGREMEDY(gpFrameTerminatorGREMEDY)
}
func FrameZoomSGIX(factor int32) {
  C.glowFrameZoomSGIX(gpFrameZoomSGIX, (C.GLint)(factor))
}
func FramebufferDrawBufferEXT(framebuffer uint32, mode uint32) {
  C.glowFramebufferDrawBufferEXT(gpFramebufferDrawBufferEXT, (C.GLuint)(framebuffer), (C.GLenum)(mode))
}
func FramebufferDrawBuffersEXT(framebuffer uint32, n int32, bufs *uint32) {
  C.glowFramebufferDrawBuffersEXT(gpFramebufferDrawBuffersEXT, (C.GLuint)(framebuffer), (C.GLsizei)(n), (*C.GLenum)(unsafe.Pointer(bufs)))
}
// set a named parameter of a framebuffer
func FramebufferParameteri(target uint32, pname uint32, param int32) {
  C.glowFramebufferParameteri(gpFramebufferParameteri, (C.GLenum)(target), (C.GLenum)(pname), (C.GLint)(param))
}
func FramebufferReadBufferEXT(framebuffer uint32, mode uint32) {
  C.glowFramebufferReadBufferEXT(gpFramebufferReadBufferEXT, (C.GLuint)(framebuffer), (C.GLenum)(mode))
}
// attach a renderbuffer as a logical buffer to the currently bound framebuffer object
func FramebufferRenderbuffer(target uint32, attachment uint32, renderbuffertarget uint32, renderbuffer uint32) {
  C.glowFramebufferRenderbuffer(gpFramebufferRenderbuffer, (C.GLenum)(target), (C.GLenum)(attachment), (C.GLenum)(renderbuffertarget), (C.GLuint)(renderbuffer))
}
func FramebufferRenderbufferEXT(target uint32, attachment uint32, renderbuffertarget uint32, renderbuffer uint32) {
  C.glowFramebufferRenderbufferEXT(gpFramebufferRenderbufferEXT, (C.GLenum)(target), (C.GLenum)(attachment), (C.GLenum)(renderbuffertarget), (C.GLuint)(renderbuffer))
}
// attach a level of a texture object as a logical buffer to the currently bound framebuffer object
func FramebufferTexture(target uint32, attachment uint32, texture uint32, level int32) {
  C.glowFramebufferTexture(gpFramebufferTexture, (C.GLenum)(target), (C.GLenum)(attachment), (C.GLuint)(texture), (C.GLint)(level))
}
func FramebufferTexture1D(target uint32, attachment uint32, textarget uint32, texture uint32, level int32) {
  C.glowFramebufferTexture1D(gpFramebufferTexture1D, (C.GLenum)(target), (C.GLenum)(attachment), (C.GLenum)(textarget), (C.GLuint)(texture), (C.GLint)(level))
}
func FramebufferTexture1DEXT(target uint32, attachment uint32, textarget uint32, texture uint32, level int32) {
  C.glowFramebufferTexture1DEXT(gpFramebufferTexture1DEXT, (C.GLenum)(target), (C.GLenum)(attachment), (C.GLenum)(textarget), (C.GLuint)(texture), (C.GLint)(level))
}
func FramebufferTexture2D(target uint32, attachment uint32, textarget uint32, texture uint32, level int32) {
  C.glowFramebufferTexture2D(gpFramebufferTexture2D, (C.GLenum)(target), (C.GLenum)(attachment), (C.GLenum)(textarget), (C.GLuint)(texture), (C.GLint)(level))
}
func FramebufferTexture2DEXT(target uint32, attachment uint32, textarget uint32, texture uint32, level int32) {
  C.glowFramebufferTexture2DEXT(gpFramebufferTexture2DEXT, (C.GLenum)(target), (C.GLenum)(attachment), (C.GLenum)(textarget), (C.GLuint)(texture), (C.GLint)(level))
}
func FramebufferTexture3D(target uint32, attachment uint32, textarget uint32, texture uint32, level int32, zoffset int32) {
  C.glowFramebufferTexture3D(gpFramebufferTexture3D, (C.GLenum)(target), (C.GLenum)(attachment), (C.GLenum)(textarget), (C.GLuint)(texture), (C.GLint)(level), (C.GLint)(zoffset))
}
func FramebufferTexture3DEXT(target uint32, attachment uint32, textarget uint32, texture uint32, level int32, zoffset int32) {
  C.glowFramebufferTexture3DEXT(gpFramebufferTexture3DEXT, (C.GLenum)(target), (C.GLenum)(attachment), (C.GLenum)(textarget), (C.GLuint)(texture), (C.GLint)(level), (C.GLint)(zoffset))
}
func FramebufferTextureARB(target uint32, attachment uint32, texture uint32, level int32) {
  C.glowFramebufferTextureARB(gpFramebufferTextureARB, (C.GLenum)(target), (C.GLenum)(attachment), (C.GLuint)(texture), (C.GLint)(level))
}
func FramebufferTextureEXT(target uint32, attachment uint32, texture uint32, level int32) {
  C.glowFramebufferTextureEXT(gpFramebufferTextureEXT, (C.GLenum)(target), (C.GLenum)(attachment), (C.GLuint)(texture), (C.GLint)(level))
}
func FramebufferTextureFaceARB(target uint32, attachment uint32, texture uint32, level int32, face uint32) {
  C.glowFramebufferTextureFaceARB(gpFramebufferTextureFaceARB, (C.GLenum)(target), (C.GLenum)(attachment), (C.GLuint)(texture), (C.GLint)(level), (C.GLenum)(face))
}
func FramebufferTextureFaceEXT(target uint32, attachment uint32, texture uint32, level int32, face uint32) {
  C.glowFramebufferTextureFaceEXT(gpFramebufferTextureFaceEXT, (C.GLenum)(target), (C.GLenum)(attachment), (C.GLuint)(texture), (C.GLint)(level), (C.GLenum)(face))
}
// attach a single layer of a texture to a framebuffer
func FramebufferTextureLayer(target uint32, attachment uint32, texture uint32, level int32, layer int32) {
  C.glowFramebufferTextureLayer(gpFramebufferTextureLayer, (C.GLenum)(target), (C.GLenum)(attachment), (C.GLuint)(texture), (C.GLint)(level), (C.GLint)(layer))
}
func FramebufferTextureLayerARB(target uint32, attachment uint32, texture uint32, level int32, layer int32) {
  C.glowFramebufferTextureLayerARB(gpFramebufferTextureLayerARB, (C.GLenum)(target), (C.GLenum)(attachment), (C.GLuint)(texture), (C.GLint)(level), (C.GLint)(layer))
}
func FramebufferTextureLayerEXT(target uint32, attachment uint32, texture uint32, level int32, layer int32) {
  C.glowFramebufferTextureLayerEXT(gpFramebufferTextureLayerEXT, (C.GLenum)(target), (C.GLenum)(attachment), (C.GLuint)(texture), (C.GLint)(level), (C.GLint)(layer))
}
func FreeObjectBufferATI(buffer uint32) {
  C.glowFreeObjectBufferATI(gpFreeObjectBufferATI, (C.GLuint)(buffer))
}
// define front- and back-facing polygons
func FrontFace(mode uint32) {
  C.glowFrontFace(gpFrontFace, (C.GLenum)(mode))
}
func FrustumfOES(l float32, r float32, b float32, t float32, n float32, f float32) {
  C.glowFrustumfOES(gpFrustumfOES, (C.GLfloat)(l), (C.GLfloat)(r), (C.GLfloat)(b), (C.GLfloat)(t), (C.GLfloat)(n), (C.GLfloat)(f))
}
func FrustumxOES(l int32, r int32, b int32, t int32, n int32, f int32) {
  C.glowFrustumxOES(gpFrustumxOES, (C.GLfixed)(l), (C.GLfixed)(r), (C.GLfixed)(b), (C.GLfixed)(t), (C.GLfixed)(n), (C.GLfixed)(f))
}
func GenAsyncMarkersSGIX(xrange int32) uint32 {
  ret := C.glowGenAsyncMarkersSGIX(gpGenAsyncMarkersSGIX, (C.GLsizei)(xrange))
  return (uint32)(ret)
}
// generate buffer object names
func GenBuffers(n int32, buffers *uint32) {
  C.glowGenBuffers(gpGenBuffers, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(buffers)))
}
func GenBuffersARB(n int32, buffers *uint32) {
  C.glowGenBuffersARB(gpGenBuffersARB, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(buffers)))
}
func GenFencesAPPLE(n int32, fences *uint32) {
  C.glowGenFencesAPPLE(gpGenFencesAPPLE, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(fences)))
}
func GenFencesNV(n int32, fences *uint32) {
  C.glowGenFencesNV(gpGenFencesNV, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(fences)))
}
func GenFragmentShadersATI(xrange uint32) uint32 {
  ret := C.glowGenFragmentShadersATI(gpGenFragmentShadersATI, (C.GLuint)(xrange))
  return (uint32)(ret)
}
// generate framebuffer object names
func GenFramebuffers(n int32, framebuffers *uint32) {
  C.glowGenFramebuffers(gpGenFramebuffers, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(framebuffers)))
}
func GenFramebuffersEXT(n int32, framebuffers *uint32) {
  C.glowGenFramebuffersEXT(gpGenFramebuffersEXT, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(framebuffers)))
}
func GenNamesAMD(identifier uint32, num uint32, names *uint32) {
  C.glowGenNamesAMD(gpGenNamesAMD, (C.GLenum)(identifier), (C.GLuint)(num), (*C.GLuint)(unsafe.Pointer(names)))
}
func GenOcclusionQueriesNV(n int32, ids *uint32) {
  C.glowGenOcclusionQueriesNV(gpGenOcclusionQueriesNV, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(ids)))
}
func GenPathsNV(xrange int32) uint32 {
  ret := C.glowGenPathsNV(gpGenPathsNV, (C.GLsizei)(xrange))
  return (uint32)(ret)
}
func GenPerfMonitorsAMD(n int32, monitors *uint32) {
  C.glowGenPerfMonitorsAMD(gpGenPerfMonitorsAMD, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(monitors)))
}
// reserve program pipeline object names
func GenProgramPipelines(n int32, pipelines *uint32) {
  C.glowGenProgramPipelines(gpGenProgramPipelines, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(pipelines)))
}
func GenProgramPipelinesEXT(n int32, pipelines *uint32) {
  C.glowGenProgramPipelinesEXT(gpGenProgramPipelinesEXT, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(pipelines)))
}
func GenProgramsARB(n int32, programs *uint32) {
  C.glowGenProgramsARB(gpGenProgramsARB, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(programs)))
}
func GenProgramsNV(n int32, programs *uint32) {
  C.glowGenProgramsNV(gpGenProgramsNV, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(programs)))
}
// generate query object names
func GenQueries(n int32, ids *uint32) {
  C.glowGenQueries(gpGenQueries, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(ids)))
}
func GenQueriesARB(n int32, ids *uint32) {
  C.glowGenQueriesARB(gpGenQueriesARB, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(ids)))
}
// generate renderbuffer object names
func GenRenderbuffers(n int32, renderbuffers *uint32) {
  C.glowGenRenderbuffers(gpGenRenderbuffers, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(renderbuffers)))
}
func GenRenderbuffersEXT(n int32, renderbuffers *uint32) {
  C.glowGenRenderbuffersEXT(gpGenRenderbuffersEXT, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(renderbuffers)))
}
// generate sampler object names
func GenSamplers(count int32, samplers *uint32) {
  C.glowGenSamplers(gpGenSamplers, (C.GLsizei)(count), (*C.GLuint)(unsafe.Pointer(samplers)))
}
func GenSymbolsEXT(datatype uint32, storagetype uint32, xrange uint32, components uint32) uint32 {
  ret := C.glowGenSymbolsEXT(gpGenSymbolsEXT, (C.GLenum)(datatype), (C.GLenum)(storagetype), (C.GLenum)(xrange), (C.GLuint)(components))
  return (uint32)(ret)
}
// generate texture names
func GenTextures(n int32, textures *uint32) {
  C.glowGenTextures(gpGenTextures, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(textures)))
}
func GenTexturesEXT(n int32, textures *uint32) {
  C.glowGenTexturesEXT(gpGenTexturesEXT, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(textures)))
}
// reserve transform feedback object names
func GenTransformFeedbacks(n int32, ids *uint32) {
  C.glowGenTransformFeedbacks(gpGenTransformFeedbacks, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(ids)))
}
func GenTransformFeedbacksNV(n int32, ids *uint32) {
  C.glowGenTransformFeedbacksNV(gpGenTransformFeedbacksNV, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(ids)))
}
// generate vertex array object names
func GenVertexArrays(n int32, arrays *uint32) {
  C.glowGenVertexArrays(gpGenVertexArrays, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(arrays)))
}
func GenVertexArraysAPPLE(n int32, arrays *uint32) {
  C.glowGenVertexArraysAPPLE(gpGenVertexArraysAPPLE, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(arrays)))
}
func GenVertexShadersEXT(xrange uint32) uint32 {
  ret := C.glowGenVertexShadersEXT(gpGenVertexShadersEXT, (C.GLuint)(xrange))
  return (uint32)(ret)
}
// generate mipmaps for a specified texture target
func GenerateMipmap(target uint32) {
  C.glowGenerateMipmap(gpGenerateMipmap, (C.GLenum)(target))
}
func GenerateMipmapEXT(target uint32) {
  C.glowGenerateMipmapEXT(gpGenerateMipmapEXT, (C.GLenum)(target))
}
func GenerateMultiTexMipmapEXT(texunit uint32, target uint32) {
  C.glowGenerateMultiTexMipmapEXT(gpGenerateMultiTexMipmapEXT, (C.GLenum)(texunit), (C.GLenum)(target))
}
func GenerateTextureMipmapEXT(texture uint32, target uint32) {
  C.glowGenerateTextureMipmapEXT(gpGenerateTextureMipmapEXT, (C.GLuint)(texture), (C.GLenum)(target))
}
// retrieve information about the set of active atomic counter buffers for a program
func GetActiveAtomicCounterBufferiv(program uint32, bufferIndex uint32, pname uint32, params *int32) {
  C.glowGetActiveAtomicCounterBufferiv(gpGetActiveAtomicCounterBufferiv, (C.GLuint)(program), (C.GLuint)(bufferIndex), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
// Returns information about an active attribute variable for the specified program object
func GetActiveAttrib(program uint32, index uint32, bufSize int32, length *int32, size *int32, xtype *uint32, name *int8) {
  C.glowGetActiveAttrib(gpGetActiveAttrib, (C.GLuint)(program), (C.GLuint)(index), (C.GLsizei)(bufSize), (*C.GLsizei)(unsafe.Pointer(length)), (*C.GLint)(unsafe.Pointer(size)), (*C.GLenum)(unsafe.Pointer(xtype)), (*C.GLchar)(unsafe.Pointer(name)))
}
func GetActiveAttribARB(programObj uintptr, index uint32, maxLength int32, length *int32, size *int32, xtype *uint32, name *int8) {
  C.glowGetActiveAttribARB(gpGetActiveAttribARB, (C.GLhandleARB)(programObj), (C.GLuint)(index), (C.GLsizei)(maxLength), (*C.GLsizei)(unsafe.Pointer(length)), (*C.GLint)(unsafe.Pointer(size)), (*C.GLenum)(unsafe.Pointer(xtype)), (*C.GLcharARB)(unsafe.Pointer(name)))
}
// query the name of an active shader subroutine
func GetActiveSubroutineName(program uint32, shadertype uint32, index uint32, bufsize int32, length *int32, name *int8) {
  C.glowGetActiveSubroutineName(gpGetActiveSubroutineName, (C.GLuint)(program), (C.GLenum)(shadertype), (C.GLuint)(index), (C.GLsizei)(bufsize), (*C.GLsizei)(unsafe.Pointer(length)), (*C.GLchar)(unsafe.Pointer(name)))
}
// query the name of an active shader subroutine uniform
func GetActiveSubroutineUniformName(program uint32, shadertype uint32, index uint32, bufsize int32, length *int32, name *int8) {
  C.glowGetActiveSubroutineUniformName(gpGetActiveSubroutineUniformName, (C.GLuint)(program), (C.GLenum)(shadertype), (C.GLuint)(index), (C.GLsizei)(bufsize), (*C.GLsizei)(unsafe.Pointer(length)), (*C.GLchar)(unsafe.Pointer(name)))
}
func GetActiveSubroutineUniformiv(program uint32, shadertype uint32, index uint32, pname uint32, values *int32) {
  C.glowGetActiveSubroutineUniformiv(gpGetActiveSubroutineUniformiv, (C.GLuint)(program), (C.GLenum)(shadertype), (C.GLuint)(index), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(values)))
}
// Returns information about an active uniform variable for the specified program object
func GetActiveUniform(program uint32, index uint32, bufSize int32, length *int32, size *int32, xtype *uint32, name *int8) {
  C.glowGetActiveUniform(gpGetActiveUniform, (C.GLuint)(program), (C.GLuint)(index), (C.GLsizei)(bufSize), (*C.GLsizei)(unsafe.Pointer(length)), (*C.GLint)(unsafe.Pointer(size)), (*C.GLenum)(unsafe.Pointer(xtype)), (*C.GLchar)(unsafe.Pointer(name)))
}
func GetActiveUniformARB(programObj uintptr, index uint32, maxLength int32, length *int32, size *int32, xtype *uint32, name *int8) {
  C.glowGetActiveUniformARB(gpGetActiveUniformARB, (C.GLhandleARB)(programObj), (C.GLuint)(index), (C.GLsizei)(maxLength), (*C.GLsizei)(unsafe.Pointer(length)), (*C.GLint)(unsafe.Pointer(size)), (*C.GLenum)(unsafe.Pointer(xtype)), (*C.GLcharARB)(unsafe.Pointer(name)))
}
// retrieve the name of an active uniform block
func GetActiveUniformBlockName(program uint32, uniformBlockIndex uint32, bufSize int32, length *int32, uniformBlockName *int8) {
  C.glowGetActiveUniformBlockName(gpGetActiveUniformBlockName, (C.GLuint)(program), (C.GLuint)(uniformBlockIndex), (C.GLsizei)(bufSize), (*C.GLsizei)(unsafe.Pointer(length)), (*C.GLchar)(unsafe.Pointer(uniformBlockName)))
}
func GetActiveUniformBlockiv(program uint32, uniformBlockIndex uint32, pname uint32, params *int32) {
  C.glowGetActiveUniformBlockiv(gpGetActiveUniformBlockiv, (C.GLuint)(program), (C.GLuint)(uniformBlockIndex), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
// query the name of an active uniform
func GetActiveUniformName(program uint32, uniformIndex uint32, bufSize int32, length *int32, uniformName *int8) {
  C.glowGetActiveUniformName(gpGetActiveUniformName, (C.GLuint)(program), (C.GLuint)(uniformIndex), (C.GLsizei)(bufSize), (*C.GLsizei)(unsafe.Pointer(length)), (*C.GLchar)(unsafe.Pointer(uniformName)))
}
// Returns information about several active uniform variables for the specified program object
func GetActiveUniformsiv(program uint32, uniformCount int32, uniformIndices *uint32, pname uint32, params *int32) {
  C.glowGetActiveUniformsiv(gpGetActiveUniformsiv, (C.GLuint)(program), (C.GLsizei)(uniformCount), (*C.GLuint)(unsafe.Pointer(uniformIndices)), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetActiveVaryingNV(program uint32, index uint32, bufSize int32, length *int32, size *int32, xtype *uint32, name *int8) {
  C.glowGetActiveVaryingNV(gpGetActiveVaryingNV, (C.GLuint)(program), (C.GLuint)(index), (C.GLsizei)(bufSize), (*C.GLsizei)(unsafe.Pointer(length)), (*C.GLsizei)(unsafe.Pointer(size)), (*C.GLenum)(unsafe.Pointer(xtype)), (*C.GLchar)(unsafe.Pointer(name)))
}
func GetArrayObjectfvATI(array uint32, pname uint32, params *float32) {
  C.glowGetArrayObjectfvATI(gpGetArrayObjectfvATI, (C.GLenum)(array), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetArrayObjectivATI(array uint32, pname uint32, params *int32) {
  C.glowGetArrayObjectivATI(gpGetArrayObjectivATI, (C.GLenum)(array), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetAttachedObjectsARB(containerObj uintptr, maxCount int32, count *int32, obj *uintptr) {
  C.glowGetAttachedObjectsARB(gpGetAttachedObjectsARB, (C.GLhandleARB)(containerObj), (C.GLsizei)(maxCount), (*C.GLsizei)(unsafe.Pointer(count)), (*C.GLhandleARB)(unsafe.Pointer(obj)))
}
// Returns the handles of the shader objects attached to a program object
func GetAttachedShaders(program uint32, maxCount int32, count *int32, shaders *uint32) {
  C.glowGetAttachedShaders(gpGetAttachedShaders, (C.GLuint)(program), (C.GLsizei)(maxCount), (*C.GLsizei)(unsafe.Pointer(count)), (*C.GLuint)(unsafe.Pointer(shaders)))
}
// Returns the location of an attribute variable
func GetAttribLocation(program uint32, name *int8) int32 {
  ret := C.glowGetAttribLocation(gpGetAttribLocation, (C.GLuint)(program), (*C.GLchar)(unsafe.Pointer(name)))
  return (int32)(ret)
}
func GetAttribLocationARB(programObj uintptr, name *int8) int32 {
  ret := C.glowGetAttribLocationARB(gpGetAttribLocationARB, (C.GLhandleARB)(programObj), (*C.GLcharARB)(unsafe.Pointer(name)))
  return (int32)(ret)
}
func GetBooleanIndexedvEXT(target uint32, index uint32, data *bool) {
  C.glowGetBooleanIndexedvEXT(gpGetBooleanIndexedvEXT, (C.GLenum)(target), (C.GLuint)(index), (*C.GLboolean)(unsafe.Pointer(data)))
}
func GetBooleani_v(target uint32, index uint32, data *bool) {
  C.glowGetBooleani_v(gpGetBooleani_v, (C.GLenum)(target), (C.GLuint)(index), (*C.GLboolean)(unsafe.Pointer(data)))
}
func GetBooleanv(pname uint32, data *bool) {
  C.glowGetBooleanv(gpGetBooleanv, (C.GLenum)(pname), (*C.GLboolean)(unsafe.Pointer(data)))
}
func GetBufferParameteri64v(target uint32, pname uint32, params *int64) {
  C.glowGetBufferParameteri64v(gpGetBufferParameteri64v, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint64)(unsafe.Pointer(params)))
}
// return parameters of a buffer object
func GetBufferParameteriv(target uint32, pname uint32, params *int32) {
  C.glowGetBufferParameteriv(gpGetBufferParameteriv, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetBufferParameterivARB(target uint32, pname uint32, params *int32) {
  C.glowGetBufferParameterivARB(gpGetBufferParameterivARB, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetBufferParameterui64vNV(target uint32, pname uint32, params *uint64) {
  C.glowGetBufferParameterui64vNV(gpGetBufferParameterui64vNV, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLuint64EXT)(unsafe.Pointer(params)))
}
// return the pointer to a mapped buffer object's data store
func GetBufferPointerv(target uint32, pname uint32, params *unsafe.Pointer) {
  C.glowGetBufferPointerv(gpGetBufferPointerv, (C.GLenum)(target), (C.GLenum)(pname), params)
}
func GetBufferPointervARB(target uint32, pname uint32, params *unsafe.Pointer) {
  C.glowGetBufferPointervARB(gpGetBufferPointervARB, (C.GLenum)(target), (C.GLenum)(pname), params)
}
// returns a subset of a buffer object's data store
func GetBufferSubData(target uint32, offset int, size int, data unsafe.Pointer) {
  C.glowGetBufferSubData(gpGetBufferSubData, (C.GLenum)(target), (C.GLintptr)(offset), (C.GLsizeiptr)(size), data)
}
func GetBufferSubDataARB(target uint32, offset int, size int, data unsafe.Pointer) {
  C.glowGetBufferSubDataARB(gpGetBufferSubDataARB, (C.GLenum)(target), (C.GLintptrARB)(offset), (C.GLsizeiptrARB)(size), data)
}
func GetClipPlanefOES(plane uint32, equation *float32) {
  C.glowGetClipPlanefOES(gpGetClipPlanefOES, (C.GLenum)(plane), (*C.GLfloat)(unsafe.Pointer(equation)))
}
func GetClipPlanexOES(plane uint32, equation *int32) {
  C.glowGetClipPlanexOES(gpGetClipPlanexOES, (C.GLenum)(plane), (*C.GLfixed)(unsafe.Pointer(equation)))
}
func GetColorTableEXT(target uint32, format uint32, xtype uint32, data unsafe.Pointer) {
  C.glowGetColorTableEXT(gpGetColorTableEXT, (C.GLenum)(target), (C.GLenum)(format), (C.GLenum)(xtype), data)
}
func GetColorTableParameterfvEXT(target uint32, pname uint32, params *float32) {
  C.glowGetColorTableParameterfvEXT(gpGetColorTableParameterfvEXT, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetColorTableParameterfvSGI(target uint32, pname uint32, params *float32) {
  C.glowGetColorTableParameterfvSGI(gpGetColorTableParameterfvSGI, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetColorTableParameterivEXT(target uint32, pname uint32, params *int32) {
  C.glowGetColorTableParameterivEXT(gpGetColorTableParameterivEXT, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetColorTableParameterivSGI(target uint32, pname uint32, params *int32) {
  C.glowGetColorTableParameterivSGI(gpGetColorTableParameterivSGI, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetColorTableSGI(target uint32, format uint32, xtype uint32, table unsafe.Pointer) {
  C.glowGetColorTableSGI(gpGetColorTableSGI, (C.GLenum)(target), (C.GLenum)(format), (C.GLenum)(xtype), table)
}
func GetCombinerInputParameterfvNV(stage uint32, portion uint32, variable uint32, pname uint32, params *float32) {
  C.glowGetCombinerInputParameterfvNV(gpGetCombinerInputParameterfvNV, (C.GLenum)(stage), (C.GLenum)(portion), (C.GLenum)(variable), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetCombinerInputParameterivNV(stage uint32, portion uint32, variable uint32, pname uint32, params *int32) {
  C.glowGetCombinerInputParameterivNV(gpGetCombinerInputParameterivNV, (C.GLenum)(stage), (C.GLenum)(portion), (C.GLenum)(variable), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetCombinerOutputParameterfvNV(stage uint32, portion uint32, pname uint32, params *float32) {
  C.glowGetCombinerOutputParameterfvNV(gpGetCombinerOutputParameterfvNV, (C.GLenum)(stage), (C.GLenum)(portion), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetCombinerOutputParameterivNV(stage uint32, portion uint32, pname uint32, params *int32) {
  C.glowGetCombinerOutputParameterivNV(gpGetCombinerOutputParameterivNV, (C.GLenum)(stage), (C.GLenum)(portion), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetCombinerStageParameterfvNV(stage uint32, pname uint32, params *float32) {
  C.glowGetCombinerStageParameterfvNV(gpGetCombinerStageParameterfvNV, (C.GLenum)(stage), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetCompressedMultiTexImageEXT(texunit uint32, target uint32, lod int32, img unsafe.Pointer) {
  C.glowGetCompressedMultiTexImageEXT(gpGetCompressedMultiTexImageEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLint)(lod), img)
}
// return a compressed texture image
func GetCompressedTexImage(target uint32, level int32, img unsafe.Pointer) {
  C.glowGetCompressedTexImage(gpGetCompressedTexImage, (C.GLenum)(target), (C.GLint)(level), img)
}
func GetCompressedTexImageARB(target uint32, level int32, img unsafe.Pointer) {
  C.glowGetCompressedTexImageARB(gpGetCompressedTexImageARB, (C.GLenum)(target), (C.GLint)(level), img)
}
func GetCompressedTextureImageEXT(texture uint32, target uint32, lod int32, img unsafe.Pointer) {
  C.glowGetCompressedTextureImageEXT(gpGetCompressedTextureImageEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLint)(lod), img)
}
func GetConvolutionFilterEXT(target uint32, format uint32, xtype uint32, image unsafe.Pointer) {
  C.glowGetConvolutionFilterEXT(gpGetConvolutionFilterEXT, (C.GLenum)(target), (C.GLenum)(format), (C.GLenum)(xtype), image)
}
func GetConvolutionParameterfvEXT(target uint32, pname uint32, params *float32) {
  C.glowGetConvolutionParameterfvEXT(gpGetConvolutionParameterfvEXT, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetConvolutionParameterivEXT(target uint32, pname uint32, params *int32) {
  C.glowGetConvolutionParameterivEXT(gpGetConvolutionParameterivEXT, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetConvolutionParameterxvOES(target uint32, pname uint32, params *int32) {
  C.glowGetConvolutionParameterxvOES(gpGetConvolutionParameterxvOES, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLfixed)(unsafe.Pointer(params)))
}
// retrieve messages from the debug message log
func GetDebugMessageLog(count uint32, bufSize int32, sources *uint32, types *uint32, ids *uint32, severities *uint32, lengths *int32, messageLog *int8) uint32 {
  ret := C.glowGetDebugMessageLog(gpGetDebugMessageLog, (C.GLuint)(count), (C.GLsizei)(bufSize), (*C.GLenum)(unsafe.Pointer(sources)), (*C.GLenum)(unsafe.Pointer(types)), (*C.GLuint)(unsafe.Pointer(ids)), (*C.GLenum)(unsafe.Pointer(severities)), (*C.GLsizei)(unsafe.Pointer(lengths)), (*C.GLchar)(unsafe.Pointer(messageLog)))
  return (uint32)(ret)
}
func GetDebugMessageLogAMD(count uint32, bufsize int32, categories *uint32, severities *uint32, ids *uint32, lengths *int32, message *int8) uint32 {
  ret := C.glowGetDebugMessageLogAMD(gpGetDebugMessageLogAMD, (C.GLuint)(count), (C.GLsizei)(bufsize), (*C.GLenum)(unsafe.Pointer(categories)), (*C.GLuint)(unsafe.Pointer(severities)), (*C.GLuint)(unsafe.Pointer(ids)), (*C.GLsizei)(unsafe.Pointer(lengths)), (*C.GLchar)(unsafe.Pointer(message)))
  return (uint32)(ret)
}
func GetDebugMessageLogARB(count uint32, bufSize int32, sources *uint32, types *uint32, ids *uint32, severities *uint32, lengths *int32, messageLog *int8) uint32 {
  ret := C.glowGetDebugMessageLogARB(gpGetDebugMessageLogARB, (C.GLuint)(count), (C.GLsizei)(bufSize), (*C.GLenum)(unsafe.Pointer(sources)), (*C.GLenum)(unsafe.Pointer(types)), (*C.GLuint)(unsafe.Pointer(ids)), (*C.GLenum)(unsafe.Pointer(severities)), (*C.GLsizei)(unsafe.Pointer(lengths)), (*C.GLchar)(unsafe.Pointer(messageLog)))
  return (uint32)(ret)
}
func GetDebugMessageLogKHR(count uint32, bufSize int32, sources *uint32, types *uint32, ids *uint32, severities *uint32, lengths *int32, messageLog *int8) uint32 {
  ret := C.glowGetDebugMessageLogKHR(gpGetDebugMessageLogKHR, (C.GLuint)(count), (C.GLsizei)(bufSize), (*C.GLenum)(unsafe.Pointer(sources)), (*C.GLenum)(unsafe.Pointer(types)), (*C.GLuint)(unsafe.Pointer(ids)), (*C.GLenum)(unsafe.Pointer(severities)), (*C.GLsizei)(unsafe.Pointer(lengths)), (*C.GLchar)(unsafe.Pointer(messageLog)))
  return (uint32)(ret)
}
func GetDetailTexFuncSGIS(target uint32, points *float32) {
  C.glowGetDetailTexFuncSGIS(gpGetDetailTexFuncSGIS, (C.GLenum)(target), (*C.GLfloat)(unsafe.Pointer(points)))
}
func GetDoubleIndexedvEXT(target uint32, index uint32, data *float64) {
  C.glowGetDoubleIndexedvEXT(gpGetDoubleIndexedvEXT, (C.GLenum)(target), (C.GLuint)(index), (*C.GLdouble)(unsafe.Pointer(data)))
}
func GetDoublei_v(target uint32, index uint32, data *float64) {
  C.glowGetDoublei_v(gpGetDoublei_v, (C.GLenum)(target), (C.GLuint)(index), (*C.GLdouble)(unsafe.Pointer(data)))
}
func GetDoublei_vEXT(pname uint32, index uint32, params *float64) {
  C.glowGetDoublei_vEXT(gpGetDoublei_vEXT, (C.GLenum)(pname), (C.GLuint)(index), (*C.GLdouble)(unsafe.Pointer(params)))
}
func GetDoublev(pname uint32, data *float64) {
  C.glowGetDoublev(gpGetDoublev, (C.GLenum)(pname), (*C.GLdouble)(unsafe.Pointer(data)))
}
// return error information
func GetError() uint32 {
  ret := C.glowGetError(gpGetError)
  return (uint32)(ret)
}
func GetFenceivNV(fence uint32, pname uint32, params *int32) {
  C.glowGetFenceivNV(gpGetFenceivNV, (C.GLuint)(fence), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetFinalCombinerInputParameterfvNV(variable uint32, pname uint32, params *float32) {
  C.glowGetFinalCombinerInputParameterfvNV(gpGetFinalCombinerInputParameterfvNV, (C.GLenum)(variable), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetFinalCombinerInputParameterivNV(variable uint32, pname uint32, params *int32) {
  C.glowGetFinalCombinerInputParameterivNV(gpGetFinalCombinerInputParameterivNV, (C.GLenum)(variable), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetFirstPerfQueryIdINTEL(queryId *uint32) {
  C.glowGetFirstPerfQueryIdINTEL(gpGetFirstPerfQueryIdINTEL, (*C.GLuint)(unsafe.Pointer(queryId)))
}
func GetFixedvOES(pname uint32, params *int32) {
  C.glowGetFixedvOES(gpGetFixedvOES, (C.GLenum)(pname), (*C.GLfixed)(unsafe.Pointer(params)))
}
func GetFloatIndexedvEXT(target uint32, index uint32, data *float32) {
  C.glowGetFloatIndexedvEXT(gpGetFloatIndexedvEXT, (C.GLenum)(target), (C.GLuint)(index), (*C.GLfloat)(unsafe.Pointer(data)))
}
func GetFloati_v(target uint32, index uint32, data *float32) {
  C.glowGetFloati_v(gpGetFloati_v, (C.GLenum)(target), (C.GLuint)(index), (*C.GLfloat)(unsafe.Pointer(data)))
}
func GetFloati_vEXT(pname uint32, index uint32, params *float32) {
  C.glowGetFloati_vEXT(gpGetFloati_vEXT, (C.GLenum)(pname), (C.GLuint)(index), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetFloatv(pname uint32, data *float32) {
  C.glowGetFloatv(gpGetFloatv, (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(data)))
}
func GetFogFuncSGIS(points *float32) {
  C.glowGetFogFuncSGIS(gpGetFogFuncSGIS, (*C.GLfloat)(unsafe.Pointer(points)))
}
// query the bindings of color indices to user-defined varying out variables
func GetFragDataIndex(program uint32, name *int8) int32 {
  ret := C.glowGetFragDataIndex(gpGetFragDataIndex, (C.GLuint)(program), (*C.GLchar)(unsafe.Pointer(name)))
  return (int32)(ret)
}
// query the bindings of color numbers to user-defined varying out variables
func GetFragDataLocation(program uint32, name *int8) int32 {
  ret := C.glowGetFragDataLocation(gpGetFragDataLocation, (C.GLuint)(program), (*C.GLchar)(unsafe.Pointer(name)))
  return (int32)(ret)
}
func GetFragDataLocationEXT(program uint32, name *int8) int32 {
  ret := C.glowGetFragDataLocationEXT(gpGetFragDataLocationEXT, (C.GLuint)(program), (*C.GLchar)(unsafe.Pointer(name)))
  return (int32)(ret)
}
func GetFragmentLightfvSGIX(light uint32, pname uint32, params *float32) {
  C.glowGetFragmentLightfvSGIX(gpGetFragmentLightfvSGIX, (C.GLenum)(light), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetFragmentLightivSGIX(light uint32, pname uint32, params *int32) {
  C.glowGetFragmentLightivSGIX(gpGetFragmentLightivSGIX, (C.GLenum)(light), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetFragmentMaterialfvSGIX(face uint32, pname uint32, params *float32) {
  C.glowGetFragmentMaterialfvSGIX(gpGetFragmentMaterialfvSGIX, (C.GLenum)(face), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetFragmentMaterialivSGIX(face uint32, pname uint32, params *int32) {
  C.glowGetFragmentMaterialivSGIX(gpGetFragmentMaterialivSGIX, (C.GLenum)(face), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
// retrieve information about attachments of a bound framebuffer object
func GetFramebufferAttachmentParameteriv(target uint32, attachment uint32, pname uint32, params *int32) {
  C.glowGetFramebufferAttachmentParameteriv(gpGetFramebufferAttachmentParameteriv, (C.GLenum)(target), (C.GLenum)(attachment), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetFramebufferAttachmentParameterivEXT(target uint32, attachment uint32, pname uint32, params *int32) {
  C.glowGetFramebufferAttachmentParameterivEXT(gpGetFramebufferAttachmentParameterivEXT, (C.GLenum)(target), (C.GLenum)(attachment), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetFramebufferParameteriv(target uint32, pname uint32, params *int32) {
  C.glowGetFramebufferParameteriv(gpGetFramebufferParameteriv, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetFramebufferParameterivEXT(framebuffer uint32, pname uint32, params *int32) {
  C.glowGetFramebufferParameterivEXT(gpGetFramebufferParameterivEXT, (C.GLuint)(framebuffer), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetGraphicsResetStatusARB() uint32 {
  ret := C.glowGetGraphicsResetStatusARB(gpGetGraphicsResetStatusARB)
  return (uint32)(ret)
}
func GetHandleARB(pname uint32) uintptr {
  ret := C.glowGetHandleARB(gpGetHandleARB, (C.GLenum)(pname))
  return (uintptr)(ret)
}
func GetHistogramEXT(target uint32, reset bool, format uint32, xtype uint32, values unsafe.Pointer) {
  C.glowGetHistogramEXT(gpGetHistogramEXT, (C.GLenum)(target), (C.GLboolean)(boolToInt(reset)), (C.GLenum)(format), (C.GLenum)(xtype), values)
}
func GetHistogramParameterfvEXT(target uint32, pname uint32, params *float32) {
  C.glowGetHistogramParameterfvEXT(gpGetHistogramParameterfvEXT, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetHistogramParameterivEXT(target uint32, pname uint32, params *int32) {
  C.glowGetHistogramParameterivEXT(gpGetHistogramParameterivEXT, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetHistogramParameterxvOES(target uint32, pname uint32, params *int32) {
  C.glowGetHistogramParameterxvOES(gpGetHistogramParameterxvOES, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLfixed)(unsafe.Pointer(params)))
}
func GetImageHandleARB(texture uint32, level int32, layered bool, layer int32, format uint32) uint64 {
  ret := C.glowGetImageHandleARB(gpGetImageHandleARB, (C.GLuint)(texture), (C.GLint)(level), (C.GLboolean)(boolToInt(layered)), (C.GLint)(layer), (C.GLenum)(format))
  return (uint64)(ret)
}
func GetImageHandleNV(texture uint32, level int32, layered bool, layer int32, format uint32) uint64 {
  ret := C.glowGetImageHandleNV(gpGetImageHandleNV, (C.GLuint)(texture), (C.GLint)(level), (C.GLboolean)(boolToInt(layered)), (C.GLint)(layer), (C.GLenum)(format))
  return (uint64)(ret)
}
func GetImageTransformParameterfvHP(target uint32, pname uint32, params *float32) {
  C.glowGetImageTransformParameterfvHP(gpGetImageTransformParameterfvHP, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetImageTransformParameterivHP(target uint32, pname uint32, params *int32) {
  C.glowGetImageTransformParameterivHP(gpGetImageTransformParameterivHP, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetInfoLogARB(obj uintptr, maxLength int32, length *int32, infoLog *int8) {
  C.glowGetInfoLogARB(gpGetInfoLogARB, (C.GLhandleARB)(obj), (C.GLsizei)(maxLength), (*C.GLsizei)(unsafe.Pointer(length)), (*C.GLcharARB)(unsafe.Pointer(infoLog)))
}
func GetInstrumentsSGIX() int32 {
  ret := C.glowGetInstrumentsSGIX(gpGetInstrumentsSGIX)
  return (int32)(ret)
}
func GetInteger64i_v(target uint32, index uint32, data *int64) {
  C.glowGetInteger64i_v(gpGetInteger64i_v, (C.GLenum)(target), (C.GLuint)(index), (*C.GLint64)(unsafe.Pointer(data)))
}
func GetInteger64v(pname uint32, data *int64) {
  C.glowGetInteger64v(gpGetInteger64v, (C.GLenum)(pname), (*C.GLint64)(unsafe.Pointer(data)))
}
func GetIntegerIndexedvEXT(target uint32, index uint32, data *int32) {
  C.glowGetIntegerIndexedvEXT(gpGetIntegerIndexedvEXT, (C.GLenum)(target), (C.GLuint)(index), (*C.GLint)(unsafe.Pointer(data)))
}
func GetIntegeri_v(target uint32, index uint32, data *int32) {
  C.glowGetIntegeri_v(gpGetIntegeri_v, (C.GLenum)(target), (C.GLuint)(index), (*C.GLint)(unsafe.Pointer(data)))
}
func GetIntegerui64i_vNV(value uint32, index uint32, result *uint64) {
  C.glowGetIntegerui64i_vNV(gpGetIntegerui64i_vNV, (C.GLenum)(value), (C.GLuint)(index), (*C.GLuint64EXT)(unsafe.Pointer(result)))
}
func GetIntegerui64vNV(value uint32, result *uint64) {
  C.glowGetIntegerui64vNV(gpGetIntegerui64vNV, (C.GLenum)(value), (*C.GLuint64EXT)(unsafe.Pointer(result)))
}
func GetIntegerv(pname uint32, data *int32) {
  C.glowGetIntegerv(gpGetIntegerv, (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(data)))
}
func GetInternalformati64v(target uint32, internalformat uint32, pname uint32, bufSize int32, params *int64) {
  C.glowGetInternalformati64v(gpGetInternalformati64v, (C.GLenum)(target), (C.GLenum)(internalformat), (C.GLenum)(pname), (C.GLsizei)(bufSize), (*C.GLint64)(unsafe.Pointer(params)))
}
func GetInternalformativ(target uint32, internalformat uint32, pname uint32, bufSize int32, params *int32) {
  C.glowGetInternalformativ(gpGetInternalformativ, (C.GLenum)(target), (C.GLenum)(internalformat), (C.GLenum)(pname), (C.GLsizei)(bufSize), (*C.GLint)(unsafe.Pointer(params)))
}
func GetInvariantBooleanvEXT(id uint32, value uint32, data *bool) {
  C.glowGetInvariantBooleanvEXT(gpGetInvariantBooleanvEXT, (C.GLuint)(id), (C.GLenum)(value), (*C.GLboolean)(unsafe.Pointer(data)))
}
func GetInvariantFloatvEXT(id uint32, value uint32, data *float32) {
  C.glowGetInvariantFloatvEXT(gpGetInvariantFloatvEXT, (C.GLuint)(id), (C.GLenum)(value), (*C.GLfloat)(unsafe.Pointer(data)))
}
func GetInvariantIntegervEXT(id uint32, value uint32, data *int32) {
  C.glowGetInvariantIntegervEXT(gpGetInvariantIntegervEXT, (C.GLuint)(id), (C.GLenum)(value), (*C.GLint)(unsafe.Pointer(data)))
}
func GetLightxOES(light uint32, pname uint32, params *int32) {
  C.glowGetLightxOES(gpGetLightxOES, (C.GLenum)(light), (C.GLenum)(pname), (*C.GLfixed)(unsafe.Pointer(params)))
}
func GetLightxvOES(light uint32, pname uint32, params *int32) {
  C.glowGetLightxvOES(gpGetLightxvOES, (C.GLenum)(light), (C.GLenum)(pname), (*C.GLfixed)(unsafe.Pointer(params)))
}
func GetListParameterfvSGIX(list uint32, pname uint32, params *float32) {
  C.glowGetListParameterfvSGIX(gpGetListParameterfvSGIX, (C.GLuint)(list), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetListParameterivSGIX(list uint32, pname uint32, params *int32) {
  C.glowGetListParameterivSGIX(gpGetListParameterivSGIX, (C.GLuint)(list), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetLocalConstantBooleanvEXT(id uint32, value uint32, data *bool) {
  C.glowGetLocalConstantBooleanvEXT(gpGetLocalConstantBooleanvEXT, (C.GLuint)(id), (C.GLenum)(value), (*C.GLboolean)(unsafe.Pointer(data)))
}
func GetLocalConstantFloatvEXT(id uint32, value uint32, data *float32) {
  C.glowGetLocalConstantFloatvEXT(gpGetLocalConstantFloatvEXT, (C.GLuint)(id), (C.GLenum)(value), (*C.GLfloat)(unsafe.Pointer(data)))
}
func GetLocalConstantIntegervEXT(id uint32, value uint32, data *int32) {
  C.glowGetLocalConstantIntegervEXT(gpGetLocalConstantIntegervEXT, (C.GLuint)(id), (C.GLenum)(value), (*C.GLint)(unsafe.Pointer(data)))
}
func GetMapAttribParameterfvNV(target uint32, index uint32, pname uint32, params *float32) {
  C.glowGetMapAttribParameterfvNV(gpGetMapAttribParameterfvNV, (C.GLenum)(target), (C.GLuint)(index), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetMapAttribParameterivNV(target uint32, index uint32, pname uint32, params *int32) {
  C.glowGetMapAttribParameterivNV(gpGetMapAttribParameterivNV, (C.GLenum)(target), (C.GLuint)(index), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetMapControlPointsNV(target uint32, index uint32, xtype uint32, ustride int32, vstride int32, packed bool, points unsafe.Pointer) {
  C.glowGetMapControlPointsNV(gpGetMapControlPointsNV, (C.GLenum)(target), (C.GLuint)(index), (C.GLenum)(xtype), (C.GLsizei)(ustride), (C.GLsizei)(vstride), (C.GLboolean)(boolToInt(packed)), points)
}
func GetMapParameterfvNV(target uint32, pname uint32, params *float32) {
  C.glowGetMapParameterfvNV(gpGetMapParameterfvNV, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetMapParameterivNV(target uint32, pname uint32, params *int32) {
  C.glowGetMapParameterivNV(gpGetMapParameterivNV, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetMapxvOES(target uint32, query uint32, v *int32) {
  C.glowGetMapxvOES(gpGetMapxvOES, (C.GLenum)(target), (C.GLenum)(query), (*C.GLfixed)(unsafe.Pointer(v)))
}
func GetMaterialxOES(face uint32, pname uint32, param int32) {
  C.glowGetMaterialxOES(gpGetMaterialxOES, (C.GLenum)(face), (C.GLenum)(pname), (C.GLfixed)(param))
}
func GetMaterialxvOES(face uint32, pname uint32, params *int32) {
  C.glowGetMaterialxvOES(gpGetMaterialxvOES, (C.GLenum)(face), (C.GLenum)(pname), (*C.GLfixed)(unsafe.Pointer(params)))
}
func GetMinmaxEXT(target uint32, reset bool, format uint32, xtype uint32, values unsafe.Pointer) {
  C.glowGetMinmaxEXT(gpGetMinmaxEXT, (C.GLenum)(target), (C.GLboolean)(boolToInt(reset)), (C.GLenum)(format), (C.GLenum)(xtype), values)
}
func GetMinmaxParameterfvEXT(target uint32, pname uint32, params *float32) {
  C.glowGetMinmaxParameterfvEXT(gpGetMinmaxParameterfvEXT, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetMinmaxParameterivEXT(target uint32, pname uint32, params *int32) {
  C.glowGetMinmaxParameterivEXT(gpGetMinmaxParameterivEXT, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetMultiTexEnvfvEXT(texunit uint32, target uint32, pname uint32, params *float32) {
  C.glowGetMultiTexEnvfvEXT(gpGetMultiTexEnvfvEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetMultiTexEnvivEXT(texunit uint32, target uint32, pname uint32, params *int32) {
  C.glowGetMultiTexEnvivEXT(gpGetMultiTexEnvivEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetMultiTexGendvEXT(texunit uint32, coord uint32, pname uint32, params *float64) {
  C.glowGetMultiTexGendvEXT(gpGetMultiTexGendvEXT, (C.GLenum)(texunit), (C.GLenum)(coord), (C.GLenum)(pname), (*C.GLdouble)(unsafe.Pointer(params)))
}
func GetMultiTexGenfvEXT(texunit uint32, coord uint32, pname uint32, params *float32) {
  C.glowGetMultiTexGenfvEXT(gpGetMultiTexGenfvEXT, (C.GLenum)(texunit), (C.GLenum)(coord), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetMultiTexGenivEXT(texunit uint32, coord uint32, pname uint32, params *int32) {
  C.glowGetMultiTexGenivEXT(gpGetMultiTexGenivEXT, (C.GLenum)(texunit), (C.GLenum)(coord), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetMultiTexImageEXT(texunit uint32, target uint32, level int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
  C.glowGetMultiTexImageEXT(gpGetMultiTexImageEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLint)(level), (C.GLenum)(format), (C.GLenum)(xtype), pixels)
}
func GetMultiTexLevelParameterfvEXT(texunit uint32, target uint32, level int32, pname uint32, params *float32) {
  C.glowGetMultiTexLevelParameterfvEXT(gpGetMultiTexLevelParameterfvEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLint)(level), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetMultiTexLevelParameterivEXT(texunit uint32, target uint32, level int32, pname uint32, params *int32) {
  C.glowGetMultiTexLevelParameterivEXT(gpGetMultiTexLevelParameterivEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLint)(level), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetMultiTexParameterIivEXT(texunit uint32, target uint32, pname uint32, params *int32) {
  C.glowGetMultiTexParameterIivEXT(gpGetMultiTexParameterIivEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetMultiTexParameterIuivEXT(texunit uint32, target uint32, pname uint32, params *uint32) {
  C.glowGetMultiTexParameterIuivEXT(gpGetMultiTexParameterIuivEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLenum)(pname), (*C.GLuint)(unsafe.Pointer(params)))
}
func GetMultiTexParameterfvEXT(texunit uint32, target uint32, pname uint32, params *float32) {
  C.glowGetMultiTexParameterfvEXT(gpGetMultiTexParameterfvEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetMultiTexParameterivEXT(texunit uint32, target uint32, pname uint32, params *int32) {
  C.glowGetMultiTexParameterivEXT(gpGetMultiTexParameterivEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
// retrieve the location of a sample
func GetMultisamplefv(pname uint32, index uint32, val *float32) {
  C.glowGetMultisamplefv(gpGetMultisamplefv, (C.GLenum)(pname), (C.GLuint)(index), (*C.GLfloat)(unsafe.Pointer(val)))
}
func GetMultisamplefvNV(pname uint32, index uint32, val *float32) {
  C.glowGetMultisamplefvNV(gpGetMultisamplefvNV, (C.GLenum)(pname), (C.GLuint)(index), (*C.GLfloat)(unsafe.Pointer(val)))
}
func GetNamedBufferParameterivEXT(buffer uint32, pname uint32, params *int32) {
  C.glowGetNamedBufferParameterivEXT(gpGetNamedBufferParameterivEXT, (C.GLuint)(buffer), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetNamedBufferParameterui64vNV(buffer uint32, pname uint32, params *uint64) {
  C.glowGetNamedBufferParameterui64vNV(gpGetNamedBufferParameterui64vNV, (C.GLuint)(buffer), (C.GLenum)(pname), (*C.GLuint64EXT)(unsafe.Pointer(params)))
}
func GetNamedBufferPointervEXT(buffer uint32, pname uint32, params *unsafe.Pointer) {
  C.glowGetNamedBufferPointervEXT(gpGetNamedBufferPointervEXT, (C.GLuint)(buffer), (C.GLenum)(pname), params)
}
func GetNamedBufferSubDataEXT(buffer uint32, offset int, size int, data unsafe.Pointer) {
  C.glowGetNamedBufferSubDataEXT(gpGetNamedBufferSubDataEXT, (C.GLuint)(buffer), (C.GLintptr)(offset), (C.GLsizeiptr)(size), data)
}
func GetNamedFramebufferAttachmentParameterivEXT(framebuffer uint32, attachment uint32, pname uint32, params *int32) {
  C.glowGetNamedFramebufferAttachmentParameterivEXT(gpGetNamedFramebufferAttachmentParameterivEXT, (C.GLuint)(framebuffer), (C.GLenum)(attachment), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetNamedFramebufferParameterivEXT(framebuffer uint32, pname uint32, params *int32) {
  C.glowGetNamedFramebufferParameterivEXT(gpGetNamedFramebufferParameterivEXT, (C.GLuint)(framebuffer), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetNamedProgramLocalParameterIivEXT(program uint32, target uint32, index uint32, params *int32) {
  C.glowGetNamedProgramLocalParameterIivEXT(gpGetNamedProgramLocalParameterIivEXT, (C.GLuint)(program), (C.GLenum)(target), (C.GLuint)(index), (*C.GLint)(unsafe.Pointer(params)))
}
func GetNamedProgramLocalParameterIuivEXT(program uint32, target uint32, index uint32, params *uint32) {
  C.glowGetNamedProgramLocalParameterIuivEXT(gpGetNamedProgramLocalParameterIuivEXT, (C.GLuint)(program), (C.GLenum)(target), (C.GLuint)(index), (*C.GLuint)(unsafe.Pointer(params)))
}
func GetNamedProgramLocalParameterdvEXT(program uint32, target uint32, index uint32, params *float64) {
  C.glowGetNamedProgramLocalParameterdvEXT(gpGetNamedProgramLocalParameterdvEXT, (C.GLuint)(program), (C.GLenum)(target), (C.GLuint)(index), (*C.GLdouble)(unsafe.Pointer(params)))
}
func GetNamedProgramLocalParameterfvEXT(program uint32, target uint32, index uint32, params *float32) {
  C.glowGetNamedProgramLocalParameterfvEXT(gpGetNamedProgramLocalParameterfvEXT, (C.GLuint)(program), (C.GLenum)(target), (C.GLuint)(index), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetNamedProgramStringEXT(program uint32, target uint32, pname uint32, xstring unsafe.Pointer) {
  C.glowGetNamedProgramStringEXT(gpGetNamedProgramStringEXT, (C.GLuint)(program), (C.GLenum)(target), (C.GLenum)(pname), xstring)
}
func GetNamedProgramivEXT(program uint32, target uint32, pname uint32, params *int32) {
  C.glowGetNamedProgramivEXT(gpGetNamedProgramivEXT, (C.GLuint)(program), (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetNamedRenderbufferParameterivEXT(renderbuffer uint32, pname uint32, params *int32) {
  C.glowGetNamedRenderbufferParameterivEXT(gpGetNamedRenderbufferParameterivEXT, (C.GLuint)(renderbuffer), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetNamedStringARB(namelen int32, name *int8, bufSize int32, stringlen *int32, xstring *int8) {
  C.glowGetNamedStringARB(gpGetNamedStringARB, (C.GLint)(namelen), (*C.GLchar)(unsafe.Pointer(name)), (C.GLsizei)(bufSize), (*C.GLint)(unsafe.Pointer(stringlen)), (*C.GLchar)(unsafe.Pointer(xstring)))
}
func GetNamedStringivARB(namelen int32, name *int8, pname uint32, params *int32) {
  C.glowGetNamedStringivARB(gpGetNamedStringivARB, (C.GLint)(namelen), (*C.GLchar)(unsafe.Pointer(name)), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetNextPerfQueryIdINTEL(queryId uint32, nextQueryId *uint32) {
  C.glowGetNextPerfQueryIdINTEL(gpGetNextPerfQueryIdINTEL, (C.GLuint)(queryId), (*C.GLuint)(unsafe.Pointer(nextQueryId)))
}
func GetObjectBufferfvATI(buffer uint32, pname uint32, params *float32) {
  C.glowGetObjectBufferfvATI(gpGetObjectBufferfvATI, (C.GLuint)(buffer), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetObjectBufferivATI(buffer uint32, pname uint32, params *int32) {
  C.glowGetObjectBufferivATI(gpGetObjectBufferivATI, (C.GLuint)(buffer), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
// retrieve the label of a named object identified within a namespace
func GetObjectLabel(identifier uint32, name uint32, bufSize int32, length *int32, label *int8) {
  C.glowGetObjectLabel(gpGetObjectLabel, (C.GLenum)(identifier), (C.GLuint)(name), (C.GLsizei)(bufSize), (*C.GLsizei)(unsafe.Pointer(length)), (*C.GLchar)(unsafe.Pointer(label)))
}
func GetObjectLabelEXT(xtype uint32, object uint32, bufSize int32, length *int32, label *int8) {
  C.glowGetObjectLabelEXT(gpGetObjectLabelEXT, (C.GLenum)(xtype), (C.GLuint)(object), (C.GLsizei)(bufSize), (*C.GLsizei)(unsafe.Pointer(length)), (*C.GLchar)(unsafe.Pointer(label)))
}
func GetObjectLabelKHR(identifier uint32, name uint32, bufSize int32, length *int32, label *int8) {
  C.glowGetObjectLabelKHR(gpGetObjectLabelKHR, (C.GLenum)(identifier), (C.GLuint)(name), (C.GLsizei)(bufSize), (*C.GLsizei)(unsafe.Pointer(length)), (*C.GLchar)(unsafe.Pointer(label)))
}
func GetObjectParameterfvARB(obj uintptr, pname uint32, params *float32) {
  C.glowGetObjectParameterfvARB(gpGetObjectParameterfvARB, (C.GLhandleARB)(obj), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetObjectParameterivAPPLE(objectType uint32, name uint32, pname uint32, params *int32) {
  C.glowGetObjectParameterivAPPLE(gpGetObjectParameterivAPPLE, (C.GLenum)(objectType), (C.GLuint)(name), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetObjectParameterivARB(obj uintptr, pname uint32, params *int32) {
  C.glowGetObjectParameterivARB(gpGetObjectParameterivARB, (C.GLhandleARB)(obj), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
// retrieve the label of a sync object identified by a pointer
func GetObjectPtrLabel(ptr unsafe.Pointer, bufSize int32, length *int32, label *int8) {
  C.glowGetObjectPtrLabel(gpGetObjectPtrLabel, ptr, (C.GLsizei)(bufSize), (*C.GLsizei)(unsafe.Pointer(length)), (*C.GLchar)(unsafe.Pointer(label)))
}
func GetObjectPtrLabelKHR(ptr unsafe.Pointer, bufSize int32, length *int32, label *int8) {
  C.glowGetObjectPtrLabelKHR(gpGetObjectPtrLabelKHR, ptr, (C.GLsizei)(bufSize), (*C.GLsizei)(unsafe.Pointer(length)), (*C.GLchar)(unsafe.Pointer(label)))
}
func GetOcclusionQueryivNV(id uint32, pname uint32, params *int32) {
  C.glowGetOcclusionQueryivNV(gpGetOcclusionQueryivNV, (C.GLuint)(id), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetOcclusionQueryuivNV(id uint32, pname uint32, params *uint32) {
  C.glowGetOcclusionQueryuivNV(gpGetOcclusionQueryuivNV, (C.GLuint)(id), (C.GLenum)(pname), (*C.GLuint)(unsafe.Pointer(params)))
}
func GetPathColorGenfvNV(color uint32, pname uint32, value *float32) {
  C.glowGetPathColorGenfvNV(gpGetPathColorGenfvNV, (C.GLenum)(color), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(value)))
}
func GetPathColorGenivNV(color uint32, pname uint32, value *int32) {
  C.glowGetPathColorGenivNV(gpGetPathColorGenivNV, (C.GLenum)(color), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(value)))
}
func GetPathCommandsNV(path uint32, commands *uint8) {
  C.glowGetPathCommandsNV(gpGetPathCommandsNV, (C.GLuint)(path), (*C.GLubyte)(unsafe.Pointer(commands)))
}
func GetPathCoordsNV(path uint32, coords *float32) {
  C.glowGetPathCoordsNV(gpGetPathCoordsNV, (C.GLuint)(path), (*C.GLfloat)(unsafe.Pointer(coords)))
}
func GetPathDashArrayNV(path uint32, dashArray *float32) {
  C.glowGetPathDashArrayNV(gpGetPathDashArrayNV, (C.GLuint)(path), (*C.GLfloat)(unsafe.Pointer(dashArray)))
}
func GetPathLengthNV(path uint32, startSegment int32, numSegments int32) float32 {
  ret := C.glowGetPathLengthNV(gpGetPathLengthNV, (C.GLuint)(path), (C.GLsizei)(startSegment), (C.GLsizei)(numSegments))
  return (float32)(ret)
}
func GetPathMetricRangeNV(metricQueryMask uint32, firstPathName uint32, numPaths int32, stride int32, metrics *float32) {
  C.glowGetPathMetricRangeNV(gpGetPathMetricRangeNV, (C.GLbitfield)(metricQueryMask), (C.GLuint)(firstPathName), (C.GLsizei)(numPaths), (C.GLsizei)(stride), (*C.GLfloat)(unsafe.Pointer(metrics)))
}
func GetPathMetricsNV(metricQueryMask uint32, numPaths int32, pathNameType uint32, paths unsafe.Pointer, pathBase uint32, stride int32, metrics *float32) {
  C.glowGetPathMetricsNV(gpGetPathMetricsNV, (C.GLbitfield)(metricQueryMask), (C.GLsizei)(numPaths), (C.GLenum)(pathNameType), paths, (C.GLuint)(pathBase), (C.GLsizei)(stride), (*C.GLfloat)(unsafe.Pointer(metrics)))
}
func GetPathParameterfvNV(path uint32, pname uint32, value *float32) {
  C.glowGetPathParameterfvNV(gpGetPathParameterfvNV, (C.GLuint)(path), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(value)))
}
func GetPathParameterivNV(path uint32, pname uint32, value *int32) {
  C.glowGetPathParameterivNV(gpGetPathParameterivNV, (C.GLuint)(path), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(value)))
}
func GetPathSpacingNV(pathListMode uint32, numPaths int32, pathNameType uint32, paths unsafe.Pointer, pathBase uint32, advanceScale float32, kerningScale float32, transformType uint32, returnedSpacing *float32) {
  C.glowGetPathSpacingNV(gpGetPathSpacingNV, (C.GLenum)(pathListMode), (C.GLsizei)(numPaths), (C.GLenum)(pathNameType), paths, (C.GLuint)(pathBase), (C.GLfloat)(advanceScale), (C.GLfloat)(kerningScale), (C.GLenum)(transformType), (*C.GLfloat)(unsafe.Pointer(returnedSpacing)))
}
func GetPathTexGenfvNV(texCoordSet uint32, pname uint32, value *float32) {
  C.glowGetPathTexGenfvNV(gpGetPathTexGenfvNV, (C.GLenum)(texCoordSet), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(value)))
}
func GetPathTexGenivNV(texCoordSet uint32, pname uint32, value *int32) {
  C.glowGetPathTexGenivNV(gpGetPathTexGenivNV, (C.GLenum)(texCoordSet), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(value)))
}
func GetPerfCounterInfoINTEL(queryId uint32, counterId uint32, counterNameLength uint32, counterName *int8, counterDescLength uint32, counterDesc *int8, counterOffset *uint32, counterDataSize *uint32, counterTypeEnum *uint32, counterDataTypeEnum *uint32, rawCounterMaxValue *uint64) {
  C.glowGetPerfCounterInfoINTEL(gpGetPerfCounterInfoINTEL, (C.GLuint)(queryId), (C.GLuint)(counterId), (C.GLuint)(counterNameLength), (*C.GLchar)(unsafe.Pointer(counterName)), (C.GLuint)(counterDescLength), (*C.GLchar)(unsafe.Pointer(counterDesc)), (*C.GLuint)(unsafe.Pointer(counterOffset)), (*C.GLuint)(unsafe.Pointer(counterDataSize)), (*C.GLuint)(unsafe.Pointer(counterTypeEnum)), (*C.GLuint)(unsafe.Pointer(counterDataTypeEnum)), (*C.GLuint64)(unsafe.Pointer(rawCounterMaxValue)))
}
func GetPerfMonitorCounterDataAMD(monitor uint32, pname uint32, dataSize int32, data *uint32, bytesWritten *int32) {
  C.glowGetPerfMonitorCounterDataAMD(gpGetPerfMonitorCounterDataAMD, (C.GLuint)(monitor), (C.GLenum)(pname), (C.GLsizei)(dataSize), (*C.GLuint)(unsafe.Pointer(data)), (*C.GLint)(unsafe.Pointer(bytesWritten)))
}
func GetPerfMonitorCounterInfoAMD(group uint32, counter uint32, pname uint32, data unsafe.Pointer) {
  C.glowGetPerfMonitorCounterInfoAMD(gpGetPerfMonitorCounterInfoAMD, (C.GLuint)(group), (C.GLuint)(counter), (C.GLenum)(pname), data)
}
func GetPerfMonitorCounterStringAMD(group uint32, counter uint32, bufSize int32, length *int32, counterString *int8) {
  C.glowGetPerfMonitorCounterStringAMD(gpGetPerfMonitorCounterStringAMD, (C.GLuint)(group), (C.GLuint)(counter), (C.GLsizei)(bufSize), (*C.GLsizei)(unsafe.Pointer(length)), (*C.GLchar)(unsafe.Pointer(counterString)))
}
func GetPerfMonitorCountersAMD(group uint32, numCounters *int32, maxActiveCounters *int32, counterSize int32, counters *uint32) {
  C.glowGetPerfMonitorCountersAMD(gpGetPerfMonitorCountersAMD, (C.GLuint)(group), (*C.GLint)(unsafe.Pointer(numCounters)), (*C.GLint)(unsafe.Pointer(maxActiveCounters)), (C.GLsizei)(counterSize), (*C.GLuint)(unsafe.Pointer(counters)))
}
func GetPerfMonitorGroupStringAMD(group uint32, bufSize int32, length *int32, groupString *int8) {
  C.glowGetPerfMonitorGroupStringAMD(gpGetPerfMonitorGroupStringAMD, (C.GLuint)(group), (C.GLsizei)(bufSize), (*C.GLsizei)(unsafe.Pointer(length)), (*C.GLchar)(unsafe.Pointer(groupString)))
}
func GetPerfMonitorGroupsAMD(numGroups *int32, groupsSize int32, groups *uint32) {
  C.glowGetPerfMonitorGroupsAMD(gpGetPerfMonitorGroupsAMD, (*C.GLint)(unsafe.Pointer(numGroups)), (C.GLsizei)(groupsSize), (*C.GLuint)(unsafe.Pointer(groups)))
}
func GetPerfQueryDataINTEL(queryHandle uint32, flags uint32, dataSize int32, data unsafe.Pointer, bytesWritten *uint32) {
  C.glowGetPerfQueryDataINTEL(gpGetPerfQueryDataINTEL, (C.GLuint)(queryHandle), (C.GLuint)(flags), (C.GLsizei)(dataSize), data, (*C.GLuint)(unsafe.Pointer(bytesWritten)))
}
func GetPerfQueryIdByNameINTEL(queryName *int8, queryId *uint32) {
  C.glowGetPerfQueryIdByNameINTEL(gpGetPerfQueryIdByNameINTEL, (*C.GLchar)(unsafe.Pointer(queryName)), (*C.GLuint)(unsafe.Pointer(queryId)))
}
func GetPerfQueryInfoINTEL(queryId uint32, queryNameLength uint32, queryName *int8, dataSize *uint32, noCounters *uint32, noInstances *uint32, capsMask *uint32) {
  C.glowGetPerfQueryInfoINTEL(gpGetPerfQueryInfoINTEL, (C.GLuint)(queryId), (C.GLuint)(queryNameLength), (*C.GLchar)(unsafe.Pointer(queryName)), (*C.GLuint)(unsafe.Pointer(dataSize)), (*C.GLuint)(unsafe.Pointer(noCounters)), (*C.GLuint)(unsafe.Pointer(noInstances)), (*C.GLuint)(unsafe.Pointer(capsMask)))
}
func GetPixelMapxv(xmap uint32, size int32, values *int32) {
  C.glowGetPixelMapxv(gpGetPixelMapxv, (C.GLenum)(xmap), (C.GLint)(size), (*C.GLfixed)(unsafe.Pointer(values)))
}
func GetPixelTexGenParameterfvSGIS(pname uint32, params *float32) {
  C.glowGetPixelTexGenParameterfvSGIS(gpGetPixelTexGenParameterfvSGIS, (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetPixelTexGenParameterivSGIS(pname uint32, params *int32) {
  C.glowGetPixelTexGenParameterivSGIS(gpGetPixelTexGenParameterivSGIS, (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetPixelTransformParameterfvEXT(target uint32, pname uint32, params *float32) {
  C.glowGetPixelTransformParameterfvEXT(gpGetPixelTransformParameterfvEXT, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetPixelTransformParameterivEXT(target uint32, pname uint32, params *int32) {
  C.glowGetPixelTransformParameterivEXT(gpGetPixelTransformParameterivEXT, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetPointerIndexedvEXT(target uint32, index uint32, data *unsafe.Pointer) {
  C.glowGetPointerIndexedvEXT(gpGetPointerIndexedvEXT, (C.GLenum)(target), (C.GLuint)(index), data)
}
func GetPointeri_vEXT(pname uint32, index uint32, params *unsafe.Pointer) {
  C.glowGetPointeri_vEXT(gpGetPointeri_vEXT, (C.GLenum)(pname), (C.GLuint)(index), params)
}
// return the address of the specified pointer
func GetPointerv(pname uint32, params *unsafe.Pointer) {
  C.glowGetPointerv(gpGetPointerv, (C.GLenum)(pname), params)
}
func GetPointervEXT(pname uint32, params *unsafe.Pointer) {
  C.glowGetPointervEXT(gpGetPointervEXT, (C.GLenum)(pname), params)
}
func GetPointervKHR(pname uint32, params *unsafe.Pointer) {
  C.glowGetPointervKHR(gpGetPointervKHR, (C.GLenum)(pname), params)
}
// return a binary representation of a program object's compiled and linked executable source
func GetProgramBinary(program uint32, bufSize int32, length *int32, binaryFormat *uint32, binary unsafe.Pointer) {
  C.glowGetProgramBinary(gpGetProgramBinary, (C.GLuint)(program), (C.GLsizei)(bufSize), (*C.GLsizei)(unsafe.Pointer(length)), (*C.GLenum)(unsafe.Pointer(binaryFormat)), binary)
}
func GetProgramEnvParameterIivNV(target uint32, index uint32, params *int32) {
  C.glowGetProgramEnvParameterIivNV(gpGetProgramEnvParameterIivNV, (C.GLenum)(target), (C.GLuint)(index), (*C.GLint)(unsafe.Pointer(params)))
}
func GetProgramEnvParameterIuivNV(target uint32, index uint32, params *uint32) {
  C.glowGetProgramEnvParameterIuivNV(gpGetProgramEnvParameterIuivNV, (C.GLenum)(target), (C.GLuint)(index), (*C.GLuint)(unsafe.Pointer(params)))
}
func GetProgramEnvParameterdvARB(target uint32, index uint32, params *float64) {
  C.glowGetProgramEnvParameterdvARB(gpGetProgramEnvParameterdvARB, (C.GLenum)(target), (C.GLuint)(index), (*C.GLdouble)(unsafe.Pointer(params)))
}
func GetProgramEnvParameterfvARB(target uint32, index uint32, params *float32) {
  C.glowGetProgramEnvParameterfvARB(gpGetProgramEnvParameterfvARB, (C.GLenum)(target), (C.GLuint)(index), (*C.GLfloat)(unsafe.Pointer(params)))
}
// Returns the information log for a program object
func GetProgramInfoLog(program uint32, bufSize int32, length *int32, infoLog *int8) {
  C.glowGetProgramInfoLog(gpGetProgramInfoLog, (C.GLuint)(program), (C.GLsizei)(bufSize), (*C.GLsizei)(unsafe.Pointer(length)), (*C.GLchar)(unsafe.Pointer(infoLog)))
}
func GetProgramInterfaceiv(program uint32, programInterface uint32, pname uint32, params *int32) {
  C.glowGetProgramInterfaceiv(gpGetProgramInterfaceiv, (C.GLuint)(program), (C.GLenum)(programInterface), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetProgramLocalParameterIivNV(target uint32, index uint32, params *int32) {
  C.glowGetProgramLocalParameterIivNV(gpGetProgramLocalParameterIivNV, (C.GLenum)(target), (C.GLuint)(index), (*C.GLint)(unsafe.Pointer(params)))
}
func GetProgramLocalParameterIuivNV(target uint32, index uint32, params *uint32) {
  C.glowGetProgramLocalParameterIuivNV(gpGetProgramLocalParameterIuivNV, (C.GLenum)(target), (C.GLuint)(index), (*C.GLuint)(unsafe.Pointer(params)))
}
func GetProgramLocalParameterdvARB(target uint32, index uint32, params *float64) {
  C.glowGetProgramLocalParameterdvARB(gpGetProgramLocalParameterdvARB, (C.GLenum)(target), (C.GLuint)(index), (*C.GLdouble)(unsafe.Pointer(params)))
}
func GetProgramLocalParameterfvARB(target uint32, index uint32, params *float32) {
  C.glowGetProgramLocalParameterfvARB(gpGetProgramLocalParameterfvARB, (C.GLenum)(target), (C.GLuint)(index), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetProgramNamedParameterdvNV(id uint32, len int32, name *uint8, params *float64) {
  C.glowGetProgramNamedParameterdvNV(gpGetProgramNamedParameterdvNV, (C.GLuint)(id), (C.GLsizei)(len), (*C.GLubyte)(unsafe.Pointer(name)), (*C.GLdouble)(unsafe.Pointer(params)))
}
func GetProgramNamedParameterfvNV(id uint32, len int32, name *uint8, params *float32) {
  C.glowGetProgramNamedParameterfvNV(gpGetProgramNamedParameterfvNV, (C.GLuint)(id), (C.GLsizei)(len), (*C.GLubyte)(unsafe.Pointer(name)), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetProgramParameterdvNV(target uint32, index uint32, pname uint32, params *float64) {
  C.glowGetProgramParameterdvNV(gpGetProgramParameterdvNV, (C.GLenum)(target), (C.GLuint)(index), (C.GLenum)(pname), (*C.GLdouble)(unsafe.Pointer(params)))
}
func GetProgramParameterfvNV(target uint32, index uint32, pname uint32, params *float32) {
  C.glowGetProgramParameterfvNV(gpGetProgramParameterfvNV, (C.GLenum)(target), (C.GLuint)(index), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
// retrieve the info log string from a program pipeline object
func GetProgramPipelineInfoLog(pipeline uint32, bufSize int32, length *int32, infoLog *int8) {
  C.glowGetProgramPipelineInfoLog(gpGetProgramPipelineInfoLog, (C.GLuint)(pipeline), (C.GLsizei)(bufSize), (*C.GLsizei)(unsafe.Pointer(length)), (*C.GLchar)(unsafe.Pointer(infoLog)))
}
func GetProgramPipelineInfoLogEXT(pipeline uint32, bufSize int32, length *int32, infoLog *int8) {
  C.glowGetProgramPipelineInfoLogEXT(gpGetProgramPipelineInfoLogEXT, (C.GLuint)(pipeline), (C.GLsizei)(bufSize), (*C.GLsizei)(unsafe.Pointer(length)), (*C.GLchar)(unsafe.Pointer(infoLog)))
}
func GetProgramPipelineiv(pipeline uint32, pname uint32, params *int32) {
  C.glowGetProgramPipelineiv(gpGetProgramPipelineiv, (C.GLuint)(pipeline), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetProgramPipelineivEXT(pipeline uint32, pname uint32, params *int32) {
  C.glowGetProgramPipelineivEXT(gpGetProgramPipelineivEXT, (C.GLuint)(pipeline), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
// query the index of a named resource within a program
func GetProgramResourceIndex(program uint32, programInterface uint32, name *int8) uint32 {
  ret := C.glowGetProgramResourceIndex(gpGetProgramResourceIndex, (C.GLuint)(program), (C.GLenum)(programInterface), (*C.GLchar)(unsafe.Pointer(name)))
  return (uint32)(ret)
}
// query the location of a named resource within a program
func GetProgramResourceLocation(program uint32, programInterface uint32, name *int8) int32 {
  ret := C.glowGetProgramResourceLocation(gpGetProgramResourceLocation, (C.GLuint)(program), (C.GLenum)(programInterface), (*C.GLchar)(unsafe.Pointer(name)))
  return (int32)(ret)
}
// query the fragment color index of a named variable within a program
func GetProgramResourceLocationIndex(program uint32, programInterface uint32, name *int8) int32 {
  ret := C.glowGetProgramResourceLocationIndex(gpGetProgramResourceLocationIndex, (C.GLuint)(program), (C.GLenum)(programInterface), (*C.GLchar)(unsafe.Pointer(name)))
  return (int32)(ret)
}
// query the name of an indexed resource within a program
func GetProgramResourceName(program uint32, programInterface uint32, index uint32, bufSize int32, length *int32, name *int8) {
  C.glowGetProgramResourceName(gpGetProgramResourceName, (C.GLuint)(program), (C.GLenum)(programInterface), (C.GLuint)(index), (C.GLsizei)(bufSize), (*C.GLsizei)(unsafe.Pointer(length)), (*C.GLchar)(unsafe.Pointer(name)))
}
func GetProgramResourceiv(program uint32, programInterface uint32, index uint32, propCount int32, props *uint32, bufSize int32, length *int32, params *int32) {
  C.glowGetProgramResourceiv(gpGetProgramResourceiv, (C.GLuint)(program), (C.GLenum)(programInterface), (C.GLuint)(index), (C.GLsizei)(propCount), (*C.GLenum)(unsafe.Pointer(props)), (C.GLsizei)(bufSize), (*C.GLsizei)(unsafe.Pointer(length)), (*C.GLint)(unsafe.Pointer(params)))
}
func GetProgramStageiv(program uint32, shadertype uint32, pname uint32, values *int32) {
  C.glowGetProgramStageiv(gpGetProgramStageiv, (C.GLuint)(program), (C.GLenum)(shadertype), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(values)))
}
func GetProgramStringARB(target uint32, pname uint32, xstring unsafe.Pointer) {
  C.glowGetProgramStringARB(gpGetProgramStringARB, (C.GLenum)(target), (C.GLenum)(pname), xstring)
}
func GetProgramStringNV(id uint32, pname uint32, program *uint8) {
  C.glowGetProgramStringNV(gpGetProgramStringNV, (C.GLuint)(id), (C.GLenum)(pname), (*C.GLubyte)(unsafe.Pointer(program)))
}
func GetProgramSubroutineParameteruivNV(target uint32, index uint32, param *uint32) {
  C.glowGetProgramSubroutineParameteruivNV(gpGetProgramSubroutineParameteruivNV, (C.GLenum)(target), (C.GLuint)(index), (*C.GLuint)(unsafe.Pointer(param)))
}
// Returns a parameter from a program object
func GetProgramiv(program uint32, pname uint32, params *int32) {
  C.glowGetProgramiv(gpGetProgramiv, (C.GLuint)(program), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetProgramivARB(target uint32, pname uint32, params *int32) {
  C.glowGetProgramivARB(gpGetProgramivARB, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetProgramivNV(id uint32, pname uint32, params *int32) {
  C.glowGetProgramivNV(gpGetProgramivNV, (C.GLuint)(id), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
// return parameters of an indexed query object target
func GetQueryIndexediv(target uint32, index uint32, pname uint32, params *int32) {
  C.glowGetQueryIndexediv(gpGetQueryIndexediv, (C.GLenum)(target), (C.GLuint)(index), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetQueryObjecti64v(id uint32, pname uint32, params *int64) {
  C.glowGetQueryObjecti64v(gpGetQueryObjecti64v, (C.GLuint)(id), (C.GLenum)(pname), (*C.GLint64)(unsafe.Pointer(params)))
}
func GetQueryObjecti64vEXT(id uint32, pname uint32, params *int64) {
  C.glowGetQueryObjecti64vEXT(gpGetQueryObjecti64vEXT, (C.GLuint)(id), (C.GLenum)(pname), (*C.GLint64)(unsafe.Pointer(params)))
}
func GetQueryObjectiv(id uint32, pname uint32, params *int32) {
  C.glowGetQueryObjectiv(gpGetQueryObjectiv, (C.GLuint)(id), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetQueryObjectivARB(id uint32, pname uint32, params *int32) {
  C.glowGetQueryObjectivARB(gpGetQueryObjectivARB, (C.GLuint)(id), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetQueryObjectui64v(id uint32, pname uint32, params *uint64) {
  C.glowGetQueryObjectui64v(gpGetQueryObjectui64v, (C.GLuint)(id), (C.GLenum)(pname), (*C.GLuint64)(unsafe.Pointer(params)))
}
func GetQueryObjectui64vEXT(id uint32, pname uint32, params *uint64) {
  C.glowGetQueryObjectui64vEXT(gpGetQueryObjectui64vEXT, (C.GLuint)(id), (C.GLenum)(pname), (*C.GLuint64)(unsafe.Pointer(params)))
}
func GetQueryObjectuiv(id uint32, pname uint32, params *uint32) {
  C.glowGetQueryObjectuiv(gpGetQueryObjectuiv, (C.GLuint)(id), (C.GLenum)(pname), (*C.GLuint)(unsafe.Pointer(params)))
}
func GetQueryObjectuivARB(id uint32, pname uint32, params *uint32) {
  C.glowGetQueryObjectuivARB(gpGetQueryObjectuivARB, (C.GLuint)(id), (C.GLenum)(pname), (*C.GLuint)(unsafe.Pointer(params)))
}
// return parameters of a query object target
func GetQueryiv(target uint32, pname uint32, params *int32) {
  C.glowGetQueryiv(gpGetQueryiv, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetQueryivARB(target uint32, pname uint32, params *int32) {
  C.glowGetQueryivARB(gpGetQueryivARB, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
// retrieve information about a bound renderbuffer object
func GetRenderbufferParameteriv(target uint32, pname uint32, params *int32) {
  C.glowGetRenderbufferParameteriv(gpGetRenderbufferParameteriv, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetRenderbufferParameterivEXT(target uint32, pname uint32, params *int32) {
  C.glowGetRenderbufferParameterivEXT(gpGetRenderbufferParameterivEXT, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetSamplerParameterIiv(sampler uint32, pname uint32, params *int32) {
  C.glowGetSamplerParameterIiv(gpGetSamplerParameterIiv, (C.GLuint)(sampler), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetSamplerParameterIuiv(sampler uint32, pname uint32, params *uint32) {
  C.glowGetSamplerParameterIuiv(gpGetSamplerParameterIuiv, (C.GLuint)(sampler), (C.GLenum)(pname), (*C.GLuint)(unsafe.Pointer(params)))
}
func GetSamplerParameterfv(sampler uint32, pname uint32, params *float32) {
  C.glowGetSamplerParameterfv(gpGetSamplerParameterfv, (C.GLuint)(sampler), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetSamplerParameteriv(sampler uint32, pname uint32, params *int32) {
  C.glowGetSamplerParameteriv(gpGetSamplerParameteriv, (C.GLuint)(sampler), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetSeparableFilterEXT(target uint32, format uint32, xtype uint32, row unsafe.Pointer, column unsafe.Pointer, span unsafe.Pointer) {
  C.glowGetSeparableFilterEXT(gpGetSeparableFilterEXT, (C.GLenum)(target), (C.GLenum)(format), (C.GLenum)(xtype), row, column, span)
}
// Returns the information log for a shader object
func GetShaderInfoLog(shader uint32, bufSize int32, length *int32, infoLog *int8) {
  C.glowGetShaderInfoLog(gpGetShaderInfoLog, (C.GLuint)(shader), (C.GLsizei)(bufSize), (*C.GLsizei)(unsafe.Pointer(length)), (*C.GLchar)(unsafe.Pointer(infoLog)))
}
// retrieve the range and precision for numeric formats supported by the shader compiler
func GetShaderPrecisionFormat(shadertype uint32, precisiontype uint32, xrange *int32, precision *int32) {
  C.glowGetShaderPrecisionFormat(gpGetShaderPrecisionFormat, (C.GLenum)(shadertype), (C.GLenum)(precisiontype), (*C.GLint)(unsafe.Pointer(xrange)), (*C.GLint)(unsafe.Pointer(precision)))
}
// Returns the source code string from a shader object
func GetShaderSource(shader uint32, bufSize int32, length *int32, source *int8) {
  C.glowGetShaderSource(gpGetShaderSource, (C.GLuint)(shader), (C.GLsizei)(bufSize), (*C.GLsizei)(unsafe.Pointer(length)), (*C.GLchar)(unsafe.Pointer(source)))
}
func GetShaderSourceARB(obj uintptr, maxLength int32, length *int32, source *int8) {
  C.glowGetShaderSourceARB(gpGetShaderSourceARB, (C.GLhandleARB)(obj), (C.GLsizei)(maxLength), (*C.GLsizei)(unsafe.Pointer(length)), (*C.GLcharARB)(unsafe.Pointer(source)))
}
// Returns a parameter from a shader object
func GetShaderiv(shader uint32, pname uint32, params *int32) {
  C.glowGetShaderiv(gpGetShaderiv, (C.GLuint)(shader), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetSharpenTexFuncSGIS(target uint32, points *float32) {
  C.glowGetSharpenTexFuncSGIS(gpGetSharpenTexFuncSGIS, (C.GLenum)(target), (*C.GLfloat)(unsafe.Pointer(points)))
}
// return a string describing the current GL connection
func GetString(name uint32) *uint8 {
  ret := C.glowGetString(gpGetString, (C.GLenum)(name))
  return (*uint8)(ret)
}
func GetStringi(name uint32, index uint32) *uint8 {
  ret := C.glowGetStringi(gpGetStringi, (C.GLenum)(name), (C.GLuint)(index))
  return (*uint8)(ret)
}
// retrieve the index of a subroutine uniform of a given shader stage within a program
func GetSubroutineIndex(program uint32, shadertype uint32, name *int8) uint32 {
  ret := C.glowGetSubroutineIndex(gpGetSubroutineIndex, (C.GLuint)(program), (C.GLenum)(shadertype), (*C.GLchar)(unsafe.Pointer(name)))
  return (uint32)(ret)
}
// retrieve the location of a subroutine uniform of a given shader stage within a program
func GetSubroutineUniformLocation(program uint32, shadertype uint32, name *int8) int32 {
  ret := C.glowGetSubroutineUniformLocation(gpGetSubroutineUniformLocation, (C.GLuint)(program), (C.GLenum)(shadertype), (*C.GLchar)(unsafe.Pointer(name)))
  return (int32)(ret)
}
// query the properties of a sync object
func GetSynciv(sync unsafe.Pointer, pname uint32, bufSize int32, length *int32, values *int32) {
  C.glowGetSynciv(gpGetSynciv, (C.GLsync)(sync), (C.GLenum)(pname), (C.GLsizei)(bufSize), (*C.GLsizei)(unsafe.Pointer(length)), (*C.GLint)(unsafe.Pointer(values)))
}
func GetTexBumpParameterfvATI(pname uint32, param *float32) {
  C.glowGetTexBumpParameterfvATI(gpGetTexBumpParameterfvATI, (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(param)))
}
func GetTexBumpParameterivATI(pname uint32, param *int32) {
  C.glowGetTexBumpParameterivATI(gpGetTexBumpParameterivATI, (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(param)))
}
func GetTexEnvxvOES(target uint32, pname uint32, params *int32) {
  C.glowGetTexEnvxvOES(gpGetTexEnvxvOES, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLfixed)(unsafe.Pointer(params)))
}
func GetTexFilterFuncSGIS(target uint32, filter uint32, weights *float32) {
  C.glowGetTexFilterFuncSGIS(gpGetTexFilterFuncSGIS, (C.GLenum)(target), (C.GLenum)(filter), (*C.GLfloat)(unsafe.Pointer(weights)))
}
func GetTexGenxvOES(coord uint32, pname uint32, params *int32) {
  C.glowGetTexGenxvOES(gpGetTexGenxvOES, (C.GLenum)(coord), (C.GLenum)(pname), (*C.GLfixed)(unsafe.Pointer(params)))
}
// return a texture image
func GetTexImage(target uint32, level int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
  C.glowGetTexImage(gpGetTexImage, (C.GLenum)(target), (C.GLint)(level), (C.GLenum)(format), (C.GLenum)(xtype), pixels)
}
func GetTexLevelParameterfv(target uint32, level int32, pname uint32, params *float32) {
  C.glowGetTexLevelParameterfv(gpGetTexLevelParameterfv, (C.GLenum)(target), (C.GLint)(level), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetTexLevelParameteriv(target uint32, level int32, pname uint32, params *int32) {
  C.glowGetTexLevelParameteriv(gpGetTexLevelParameteriv, (C.GLenum)(target), (C.GLint)(level), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetTexLevelParameterxvOES(target uint32, level int32, pname uint32, params *int32) {
  C.glowGetTexLevelParameterxvOES(gpGetTexLevelParameterxvOES, (C.GLenum)(target), (C.GLint)(level), (C.GLenum)(pname), (*C.GLfixed)(unsafe.Pointer(params)))
}
func GetTexParameterIiv(target uint32, pname uint32, params *int32) {
  C.glowGetTexParameterIiv(gpGetTexParameterIiv, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetTexParameterIivEXT(target uint32, pname uint32, params *int32) {
  C.glowGetTexParameterIivEXT(gpGetTexParameterIivEXT, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetTexParameterIuiv(target uint32, pname uint32, params *uint32) {
  C.glowGetTexParameterIuiv(gpGetTexParameterIuiv, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLuint)(unsafe.Pointer(params)))
}
func GetTexParameterIuivEXT(target uint32, pname uint32, params *uint32) {
  C.glowGetTexParameterIuivEXT(gpGetTexParameterIuivEXT, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLuint)(unsafe.Pointer(params)))
}
func GetTexParameterPointervAPPLE(target uint32, pname uint32, params *unsafe.Pointer) {
  C.glowGetTexParameterPointervAPPLE(gpGetTexParameterPointervAPPLE, (C.GLenum)(target), (C.GLenum)(pname), params)
}
func GetTexParameterfv(target uint32, pname uint32, params *float32) {
  C.glowGetTexParameterfv(gpGetTexParameterfv, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetTexParameteriv(target uint32, pname uint32, params *int32) {
  C.glowGetTexParameteriv(gpGetTexParameteriv, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetTexParameterxvOES(target uint32, pname uint32, params *int32) {
  C.glowGetTexParameterxvOES(gpGetTexParameterxvOES, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLfixed)(unsafe.Pointer(params)))
}
func GetTextureHandleARB(texture uint32) uint64 {
  ret := C.glowGetTextureHandleARB(gpGetTextureHandleARB, (C.GLuint)(texture))
  return (uint64)(ret)
}
func GetTextureHandleNV(texture uint32) uint64 {
  ret := C.glowGetTextureHandleNV(gpGetTextureHandleNV, (C.GLuint)(texture))
  return (uint64)(ret)
}
func GetTextureImageEXT(texture uint32, target uint32, level int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
  C.glowGetTextureImageEXT(gpGetTextureImageEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLint)(level), (C.GLenum)(format), (C.GLenum)(xtype), pixels)
}
func GetTextureLevelParameterfvEXT(texture uint32, target uint32, level int32, pname uint32, params *float32) {
  C.glowGetTextureLevelParameterfvEXT(gpGetTextureLevelParameterfvEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLint)(level), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetTextureLevelParameterivEXT(texture uint32, target uint32, level int32, pname uint32, params *int32) {
  C.glowGetTextureLevelParameterivEXT(gpGetTextureLevelParameterivEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLint)(level), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetTextureParameterIivEXT(texture uint32, target uint32, pname uint32, params *int32) {
  C.glowGetTextureParameterIivEXT(gpGetTextureParameterIivEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetTextureParameterIuivEXT(texture uint32, target uint32, pname uint32, params *uint32) {
  C.glowGetTextureParameterIuivEXT(gpGetTextureParameterIuivEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLenum)(pname), (*C.GLuint)(unsafe.Pointer(params)))
}
func GetTextureParameterfvEXT(texture uint32, target uint32, pname uint32, params *float32) {
  C.glowGetTextureParameterfvEXT(gpGetTextureParameterfvEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetTextureParameterivEXT(texture uint32, target uint32, pname uint32, params *int32) {
  C.glowGetTextureParameterivEXT(gpGetTextureParameterivEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetTextureSamplerHandleARB(texture uint32, sampler uint32) uint64 {
  ret := C.glowGetTextureSamplerHandleARB(gpGetTextureSamplerHandleARB, (C.GLuint)(texture), (C.GLuint)(sampler))
  return (uint64)(ret)
}
func GetTextureSamplerHandleNV(texture uint32, sampler uint32) uint64 {
  ret := C.glowGetTextureSamplerHandleNV(gpGetTextureSamplerHandleNV, (C.GLuint)(texture), (C.GLuint)(sampler))
  return (uint64)(ret)
}
func GetTrackMatrixivNV(target uint32, address uint32, pname uint32, params *int32) {
  C.glowGetTrackMatrixivNV(gpGetTrackMatrixivNV, (C.GLenum)(target), (C.GLuint)(address), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
// retrieve information about varying variables selected for transform feedback
func GetTransformFeedbackVarying(program uint32, index uint32, bufSize int32, length *int32, size *int32, xtype *uint32, name *int8) {
  C.glowGetTransformFeedbackVarying(gpGetTransformFeedbackVarying, (C.GLuint)(program), (C.GLuint)(index), (C.GLsizei)(bufSize), (*C.GLsizei)(unsafe.Pointer(length)), (*C.GLsizei)(unsafe.Pointer(size)), (*C.GLenum)(unsafe.Pointer(xtype)), (*C.GLchar)(unsafe.Pointer(name)))
}
func GetTransformFeedbackVaryingEXT(program uint32, index uint32, bufSize int32, length *int32, size *int32, xtype *uint32, name *int8) {
  C.glowGetTransformFeedbackVaryingEXT(gpGetTransformFeedbackVaryingEXT, (C.GLuint)(program), (C.GLuint)(index), (C.GLsizei)(bufSize), (*C.GLsizei)(unsafe.Pointer(length)), (*C.GLsizei)(unsafe.Pointer(size)), (*C.GLenum)(unsafe.Pointer(xtype)), (*C.GLchar)(unsafe.Pointer(name)))
}
func GetTransformFeedbackVaryingNV(program uint32, index uint32, location *int32) {
  C.glowGetTransformFeedbackVaryingNV(gpGetTransformFeedbackVaryingNV, (C.GLuint)(program), (C.GLuint)(index), (*C.GLint)(unsafe.Pointer(location)))
}
// retrieve the index of a named uniform block
func GetUniformBlockIndex(program uint32, uniformBlockName *int8) uint32 {
  ret := C.glowGetUniformBlockIndex(gpGetUniformBlockIndex, (C.GLuint)(program), (*C.GLchar)(unsafe.Pointer(uniformBlockName)))
  return (uint32)(ret)
}
func GetUniformBufferSizeEXT(program uint32, location int32) int32 {
  ret := C.glowGetUniformBufferSizeEXT(gpGetUniformBufferSizeEXT, (C.GLuint)(program), (C.GLint)(location))
  return (int32)(ret)
}
// retrieve the index of a named uniform block
func GetUniformIndices(program uint32, uniformCount int32, uniformNames **int8, uniformIndices *uint32) {
  C.glowGetUniformIndices(gpGetUniformIndices, (C.GLuint)(program), (C.GLsizei)(uniformCount), (**C.GLchar)(unsafe.Pointer(uniformNames)), (*C.GLuint)(unsafe.Pointer(uniformIndices)))
}
// Returns the location of a uniform variable
func GetUniformLocation(program uint32, name *int8) int32 {
  ret := C.glowGetUniformLocation(gpGetUniformLocation, (C.GLuint)(program), (*C.GLchar)(unsafe.Pointer(name)))
  return (int32)(ret)
}
func GetUniformLocationARB(programObj uintptr, name *int8) int32 {
  ret := C.glowGetUniformLocationARB(gpGetUniformLocationARB, (C.GLhandleARB)(programObj), (*C.GLcharARB)(unsafe.Pointer(name)))
  return (int32)(ret)
}
func GetUniformOffsetEXT(program uint32, location int32) int {
  ret := C.glowGetUniformOffsetEXT(gpGetUniformOffsetEXT, (C.GLuint)(program), (C.GLint)(location))
  return (int)(ret)
}
func GetUniformSubroutineuiv(shadertype uint32, location int32, params *uint32) {
  C.glowGetUniformSubroutineuiv(gpGetUniformSubroutineuiv, (C.GLenum)(shadertype), (C.GLint)(location), (*C.GLuint)(unsafe.Pointer(params)))
}
func GetUniformdv(program uint32, location int32, params *float64) {
  C.glowGetUniformdv(gpGetUniformdv, (C.GLuint)(program), (C.GLint)(location), (*C.GLdouble)(unsafe.Pointer(params)))
}
// Returns the value of a uniform variable
func GetUniformfv(program uint32, location int32, params *float32) {
  C.glowGetUniformfv(gpGetUniformfv, (C.GLuint)(program), (C.GLint)(location), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetUniformfvARB(programObj uintptr, location int32, params *float32) {
  C.glowGetUniformfvARB(gpGetUniformfvARB, (C.GLhandleARB)(programObj), (C.GLint)(location), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetUniformi64vNV(program uint32, location int32, params *int64) {
  C.glowGetUniformi64vNV(gpGetUniformi64vNV, (C.GLuint)(program), (C.GLint)(location), (*C.GLint64EXT)(unsafe.Pointer(params)))
}
// Returns the value of a uniform variable
func GetUniformiv(program uint32, location int32, params *int32) {
  C.glowGetUniformiv(gpGetUniformiv, (C.GLuint)(program), (C.GLint)(location), (*C.GLint)(unsafe.Pointer(params)))
}
func GetUniformivARB(programObj uintptr, location int32, params *int32) {
  C.glowGetUniformivARB(gpGetUniformivARB, (C.GLhandleARB)(programObj), (C.GLint)(location), (*C.GLint)(unsafe.Pointer(params)))
}
func GetUniformui64vNV(program uint32, location int32, params *uint64) {
  C.glowGetUniformui64vNV(gpGetUniformui64vNV, (C.GLuint)(program), (C.GLint)(location), (*C.GLuint64EXT)(unsafe.Pointer(params)))
}
func GetUniformuiv(program uint32, location int32, params *uint32) {
  C.glowGetUniformuiv(gpGetUniformuiv, (C.GLuint)(program), (C.GLint)(location), (*C.GLuint)(unsafe.Pointer(params)))
}
func GetUniformuivEXT(program uint32, location int32, params *uint32) {
  C.glowGetUniformuivEXT(gpGetUniformuivEXT, (C.GLuint)(program), (C.GLint)(location), (*C.GLuint)(unsafe.Pointer(params)))
}
func GetVariantArrayObjectfvATI(id uint32, pname uint32, params *float32) {
  C.glowGetVariantArrayObjectfvATI(gpGetVariantArrayObjectfvATI, (C.GLuint)(id), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetVariantArrayObjectivATI(id uint32, pname uint32, params *int32) {
  C.glowGetVariantArrayObjectivATI(gpGetVariantArrayObjectivATI, (C.GLuint)(id), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetVariantBooleanvEXT(id uint32, value uint32, data *bool) {
  C.glowGetVariantBooleanvEXT(gpGetVariantBooleanvEXT, (C.GLuint)(id), (C.GLenum)(value), (*C.GLboolean)(unsafe.Pointer(data)))
}
func GetVariantFloatvEXT(id uint32, value uint32, data *float32) {
  C.glowGetVariantFloatvEXT(gpGetVariantFloatvEXT, (C.GLuint)(id), (C.GLenum)(value), (*C.GLfloat)(unsafe.Pointer(data)))
}
func GetVariantIntegervEXT(id uint32, value uint32, data *int32) {
  C.glowGetVariantIntegervEXT(gpGetVariantIntegervEXT, (C.GLuint)(id), (C.GLenum)(value), (*C.GLint)(unsafe.Pointer(data)))
}
func GetVariantPointervEXT(id uint32, value uint32, data *unsafe.Pointer) {
  C.glowGetVariantPointervEXT(gpGetVariantPointervEXT, (C.GLuint)(id), (C.GLenum)(value), data)
}
func GetVaryingLocationNV(program uint32, name *int8) int32 {
  ret := C.glowGetVaryingLocationNV(gpGetVaryingLocationNV, (C.GLuint)(program), (*C.GLchar)(unsafe.Pointer(name)))
  return (int32)(ret)
}
func GetVertexArrayIntegeri_vEXT(vaobj uint32, index uint32, pname uint32, param *int32) {
  C.glowGetVertexArrayIntegeri_vEXT(gpGetVertexArrayIntegeri_vEXT, (C.GLuint)(vaobj), (C.GLuint)(index), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(param)))
}
func GetVertexArrayIntegervEXT(vaobj uint32, pname uint32, param *int32) {
  C.glowGetVertexArrayIntegervEXT(gpGetVertexArrayIntegervEXT, (C.GLuint)(vaobj), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(param)))
}
func GetVertexArrayPointeri_vEXT(vaobj uint32, index uint32, pname uint32, param *unsafe.Pointer) {
  C.glowGetVertexArrayPointeri_vEXT(gpGetVertexArrayPointeri_vEXT, (C.GLuint)(vaobj), (C.GLuint)(index), (C.GLenum)(pname), param)
}
func GetVertexArrayPointervEXT(vaobj uint32, pname uint32, param *unsafe.Pointer) {
  C.glowGetVertexArrayPointervEXT(gpGetVertexArrayPointervEXT, (C.GLuint)(vaobj), (C.GLenum)(pname), param)
}
func GetVertexAttribArrayObjectfvATI(index uint32, pname uint32, params *float32) {
  C.glowGetVertexAttribArrayObjectfvATI(gpGetVertexAttribArrayObjectfvATI, (C.GLuint)(index), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetVertexAttribArrayObjectivATI(index uint32, pname uint32, params *int32) {
  C.glowGetVertexAttribArrayObjectivATI(gpGetVertexAttribArrayObjectivATI, (C.GLuint)(index), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
// Return a generic vertex attribute parameter
func GetVertexAttribIiv(index uint32, pname uint32, params *int32) {
  C.glowGetVertexAttribIiv(gpGetVertexAttribIiv, (C.GLuint)(index), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetVertexAttribIivEXT(index uint32, pname uint32, params *int32) {
  C.glowGetVertexAttribIivEXT(gpGetVertexAttribIivEXT, (C.GLuint)(index), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
// Return a generic vertex attribute parameter
func GetVertexAttribIuiv(index uint32, pname uint32, params *uint32) {
  C.glowGetVertexAttribIuiv(gpGetVertexAttribIuiv, (C.GLuint)(index), (C.GLenum)(pname), (*C.GLuint)(unsafe.Pointer(params)))
}
func GetVertexAttribIuivEXT(index uint32, pname uint32, params *uint32) {
  C.glowGetVertexAttribIuivEXT(gpGetVertexAttribIuivEXT, (C.GLuint)(index), (C.GLenum)(pname), (*C.GLuint)(unsafe.Pointer(params)))
}
// Return a generic vertex attribute parameter
func GetVertexAttribLdv(index uint32, pname uint32, params *float64) {
  C.glowGetVertexAttribLdv(gpGetVertexAttribLdv, (C.GLuint)(index), (C.GLenum)(pname), (*C.GLdouble)(unsafe.Pointer(params)))
}
func GetVertexAttribLdvEXT(index uint32, pname uint32, params *float64) {
  C.glowGetVertexAttribLdvEXT(gpGetVertexAttribLdvEXT, (C.GLuint)(index), (C.GLenum)(pname), (*C.GLdouble)(unsafe.Pointer(params)))
}
func GetVertexAttribLi64vNV(index uint32, pname uint32, params *int64) {
  C.glowGetVertexAttribLi64vNV(gpGetVertexAttribLi64vNV, (C.GLuint)(index), (C.GLenum)(pname), (*C.GLint64EXT)(unsafe.Pointer(params)))
}
func GetVertexAttribLui64vARB(index uint32, pname uint32, params *uint64) {
  C.glowGetVertexAttribLui64vARB(gpGetVertexAttribLui64vARB, (C.GLuint)(index), (C.GLenum)(pname), (*C.GLuint64EXT)(unsafe.Pointer(params)))
}
func GetVertexAttribLui64vNV(index uint32, pname uint32, params *uint64) {
  C.glowGetVertexAttribLui64vNV(gpGetVertexAttribLui64vNV, (C.GLuint)(index), (C.GLenum)(pname), (*C.GLuint64EXT)(unsafe.Pointer(params)))
}
// return the address of the specified generic vertex attribute pointer
func GetVertexAttribPointerv(index uint32, pname uint32, pointer *unsafe.Pointer) {
  C.glowGetVertexAttribPointerv(gpGetVertexAttribPointerv, (C.GLuint)(index), (C.GLenum)(pname), pointer)
}
func GetVertexAttribPointervARB(index uint32, pname uint32, pointer *unsafe.Pointer) {
  C.glowGetVertexAttribPointervARB(gpGetVertexAttribPointervARB, (C.GLuint)(index), (C.GLenum)(pname), pointer)
}
func GetVertexAttribPointervNV(index uint32, pname uint32, pointer *unsafe.Pointer) {
  C.glowGetVertexAttribPointervNV(gpGetVertexAttribPointervNV, (C.GLuint)(index), (C.GLenum)(pname), pointer)
}
// Return a generic vertex attribute parameter
func GetVertexAttribdv(index uint32, pname uint32, params *float64) {
  C.glowGetVertexAttribdv(gpGetVertexAttribdv, (C.GLuint)(index), (C.GLenum)(pname), (*C.GLdouble)(unsafe.Pointer(params)))
}
func GetVertexAttribdvARB(index uint32, pname uint32, params *float64) {
  C.glowGetVertexAttribdvARB(gpGetVertexAttribdvARB, (C.GLuint)(index), (C.GLenum)(pname), (*C.GLdouble)(unsafe.Pointer(params)))
}
func GetVertexAttribdvNV(index uint32, pname uint32, params *float64) {
  C.glowGetVertexAttribdvNV(gpGetVertexAttribdvNV, (C.GLuint)(index), (C.GLenum)(pname), (*C.GLdouble)(unsafe.Pointer(params)))
}
// Return a generic vertex attribute parameter
func GetVertexAttribfv(index uint32, pname uint32, params *float32) {
  C.glowGetVertexAttribfv(gpGetVertexAttribfv, (C.GLuint)(index), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetVertexAttribfvARB(index uint32, pname uint32, params *float32) {
  C.glowGetVertexAttribfvARB(gpGetVertexAttribfvARB, (C.GLuint)(index), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetVertexAttribfvNV(index uint32, pname uint32, params *float32) {
  C.glowGetVertexAttribfvNV(gpGetVertexAttribfvNV, (C.GLuint)(index), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
// Return a generic vertex attribute parameter
func GetVertexAttribiv(index uint32, pname uint32, params *int32) {
  C.glowGetVertexAttribiv(gpGetVertexAttribiv, (C.GLuint)(index), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetVertexAttribivARB(index uint32, pname uint32, params *int32) {
  C.glowGetVertexAttribivARB(gpGetVertexAttribivARB, (C.GLuint)(index), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetVertexAttribivNV(index uint32, pname uint32, params *int32) {
  C.glowGetVertexAttribivNV(gpGetVertexAttribivNV, (C.GLuint)(index), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetVideoCaptureStreamdvNV(video_capture_slot uint32, stream uint32, pname uint32, params *float64) {
  C.glowGetVideoCaptureStreamdvNV(gpGetVideoCaptureStreamdvNV, (C.GLuint)(video_capture_slot), (C.GLuint)(stream), (C.GLenum)(pname), (*C.GLdouble)(unsafe.Pointer(params)))
}
func GetVideoCaptureStreamfvNV(video_capture_slot uint32, stream uint32, pname uint32, params *float32) {
  C.glowGetVideoCaptureStreamfvNV(gpGetVideoCaptureStreamfvNV, (C.GLuint)(video_capture_slot), (C.GLuint)(stream), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetVideoCaptureStreamivNV(video_capture_slot uint32, stream uint32, pname uint32, params *int32) {
  C.glowGetVideoCaptureStreamivNV(gpGetVideoCaptureStreamivNV, (C.GLuint)(video_capture_slot), (C.GLuint)(stream), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetVideoCaptureivNV(video_capture_slot uint32, pname uint32, params *int32) {
  C.glowGetVideoCaptureivNV(gpGetVideoCaptureivNV, (C.GLuint)(video_capture_slot), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetVideoi64vNV(video_slot uint32, pname uint32, params *int64) {
  C.glowGetVideoi64vNV(gpGetVideoi64vNV, (C.GLuint)(video_slot), (C.GLenum)(pname), (*C.GLint64EXT)(unsafe.Pointer(params)))
}
func GetVideoivNV(video_slot uint32, pname uint32, params *int32) {
  C.glowGetVideoivNV(gpGetVideoivNV, (C.GLuint)(video_slot), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetVideoui64vNV(video_slot uint32, pname uint32, params *uint64) {
  C.glowGetVideoui64vNV(gpGetVideoui64vNV, (C.GLuint)(video_slot), (C.GLenum)(pname), (*C.GLuint64EXT)(unsafe.Pointer(params)))
}
func GetVideouivNV(video_slot uint32, pname uint32, params *uint32) {
  C.glowGetVideouivNV(gpGetVideouivNV, (C.GLuint)(video_slot), (C.GLenum)(pname), (*C.GLuint)(unsafe.Pointer(params)))
}
func GetnCompressedTexImageARB(target uint32, lod int32, bufSize int32, img unsafe.Pointer) {
  C.glowGetnCompressedTexImageARB(gpGetnCompressedTexImageARB, (C.GLenum)(target), (C.GLint)(lod), (C.GLsizei)(bufSize), img)
}
func GetnTexImageARB(target uint32, level int32, format uint32, xtype uint32, bufSize int32, img unsafe.Pointer) {
  C.glowGetnTexImageARB(gpGetnTexImageARB, (C.GLenum)(target), (C.GLint)(level), (C.GLenum)(format), (C.GLenum)(xtype), (C.GLsizei)(bufSize), img)
}
func GetnUniformdvARB(program uint32, location int32, bufSize int32, params *float64) {
  C.glowGetnUniformdvARB(gpGetnUniformdvARB, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(bufSize), (*C.GLdouble)(unsafe.Pointer(params)))
}
func GetnUniformfvARB(program uint32, location int32, bufSize int32, params *float32) {
  C.glowGetnUniformfvARB(gpGetnUniformfvARB, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(bufSize), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetnUniformivARB(program uint32, location int32, bufSize int32, params *int32) {
  C.glowGetnUniformivARB(gpGetnUniformivARB, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(bufSize), (*C.GLint)(unsafe.Pointer(params)))
}
func GetnUniformuivARB(program uint32, location int32, bufSize int32, params *uint32) {
  C.glowGetnUniformuivARB(gpGetnUniformuivARB, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(bufSize), (*C.GLuint)(unsafe.Pointer(params)))
}
func GlobalAlphaFactorbSUN(factor int8) {
  C.glowGlobalAlphaFactorbSUN(gpGlobalAlphaFactorbSUN, (C.GLbyte)(factor))
}
func GlobalAlphaFactordSUN(factor float64) {
  C.glowGlobalAlphaFactordSUN(gpGlobalAlphaFactordSUN, (C.GLdouble)(factor))
}
func GlobalAlphaFactorfSUN(factor float32) {
  C.glowGlobalAlphaFactorfSUN(gpGlobalAlphaFactorfSUN, (C.GLfloat)(factor))
}
func GlobalAlphaFactoriSUN(factor int32) {
  C.glowGlobalAlphaFactoriSUN(gpGlobalAlphaFactoriSUN, (C.GLint)(factor))
}
func GlobalAlphaFactorsSUN(factor int16) {
  C.glowGlobalAlphaFactorsSUN(gpGlobalAlphaFactorsSUN, (C.GLshort)(factor))
}
func GlobalAlphaFactorubSUN(factor uint8) {
  C.glowGlobalAlphaFactorubSUN(gpGlobalAlphaFactorubSUN, (C.GLubyte)(factor))
}
func GlobalAlphaFactoruiSUN(factor uint32) {
  C.glowGlobalAlphaFactoruiSUN(gpGlobalAlphaFactoruiSUN, (C.GLuint)(factor))
}
func GlobalAlphaFactorusSUN(factor uint16) {
  C.glowGlobalAlphaFactorusSUN(gpGlobalAlphaFactorusSUN, (C.GLushort)(factor))
}
// specify implementation-specific hints
func Hint(target uint32, mode uint32) {
  C.glowHint(gpHint, (C.GLenum)(target), (C.GLenum)(mode))
}
func HintPGI(target uint32, mode int32) {
  C.glowHintPGI(gpHintPGI, (C.GLenum)(target), (C.GLint)(mode))
}
func HistogramEXT(target uint32, width int32, internalformat uint32, sink bool) {
  C.glowHistogramEXT(gpHistogramEXT, (C.GLenum)(target), (C.GLsizei)(width), (C.GLenum)(internalformat), (C.GLboolean)(boolToInt(sink)))
}
func IglooInterfaceSGIX(pname uint32, params unsafe.Pointer) {
  C.glowIglooInterfaceSGIX(gpIglooInterfaceSGIX, (C.GLenum)(pname), params)
}
func ImageTransformParameterfHP(target uint32, pname uint32, param float32) {
  C.glowImageTransformParameterfHP(gpImageTransformParameterfHP, (C.GLenum)(target), (C.GLenum)(pname), (C.GLfloat)(param))
}
func ImageTransformParameterfvHP(target uint32, pname uint32, params *float32) {
  C.glowImageTransformParameterfvHP(gpImageTransformParameterfvHP, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func ImageTransformParameteriHP(target uint32, pname uint32, param int32) {
  C.glowImageTransformParameteriHP(gpImageTransformParameteriHP, (C.GLenum)(target), (C.GLenum)(pname), (C.GLint)(param))
}
func ImageTransformParameterivHP(target uint32, pname uint32, params *int32) {
  C.glowImageTransformParameterivHP(gpImageTransformParameterivHP, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func ImportSyncEXT(external_sync_type uint32, external_sync int, flags uint32) unsafe.Pointer {
  ret := C.glowImportSyncEXT(gpImportSyncEXT, (C.GLenum)(external_sync_type), (C.GLintptr)(external_sync), (C.GLbitfield)(flags))
  return (unsafe.Pointer)(ret)
}
func IndexFormatNV(xtype uint32, stride int32) {
  C.glowIndexFormatNV(gpIndexFormatNV, (C.GLenum)(xtype), (C.GLsizei)(stride))
}
func IndexFuncEXT(xfunc uint32, ref float32) {
  C.glowIndexFuncEXT(gpIndexFuncEXT, (C.GLenum)(xfunc), (C.GLclampf)(ref))
}
func IndexMaterialEXT(face uint32, mode uint32) {
  C.glowIndexMaterialEXT(gpIndexMaterialEXT, (C.GLenum)(face), (C.GLenum)(mode))
}
func IndexPointerEXT(xtype uint32, stride int32, count int32, pointer unsafe.Pointer) {
  C.glowIndexPointerEXT(gpIndexPointerEXT, (C.GLenum)(xtype), (C.GLsizei)(stride), (C.GLsizei)(count), pointer)
}
func IndexPointerListIBM(xtype uint32, stride int32, pointer *unsafe.Pointer, ptrstride int32) {
  C.glowIndexPointerListIBM(gpIndexPointerListIBM, (C.GLenum)(xtype), (C.GLint)(stride), pointer, (C.GLint)(ptrstride))
}
func IndexxOES(component int32) {
  C.glowIndexxOES(gpIndexxOES, (C.GLfixed)(component))
}
func IndexxvOES(component *int32) {
  C.glowIndexxvOES(gpIndexxvOES, (*C.GLfixed)(unsafe.Pointer(component)))
}
func InsertComponentEXT(res uint32, src uint32, num uint32) {
  C.glowInsertComponentEXT(gpInsertComponentEXT, (C.GLuint)(res), (C.GLuint)(src), (C.GLuint)(num))
}
func InsertEventMarkerEXT(length int32, marker *int8) {
  C.glowInsertEventMarkerEXT(gpInsertEventMarkerEXT, (C.GLsizei)(length), (*C.GLchar)(unsafe.Pointer(marker)))
}
func InstrumentsBufferSGIX(size int32, buffer *int32) {
  C.glowInstrumentsBufferSGIX(gpInstrumentsBufferSGIX, (C.GLsizei)(size), (*C.GLint)(unsafe.Pointer(buffer)))
}
func InterpolatePathsNV(resultPath uint32, pathA uint32, pathB uint32, weight float32) {
  C.glowInterpolatePathsNV(gpInterpolatePathsNV, (C.GLuint)(resultPath), (C.GLuint)(pathA), (C.GLuint)(pathB), (C.GLfloat)(weight))
}
// invalidate the content of a buffer object's data store
func InvalidateBufferData(buffer uint32) {
  C.glowInvalidateBufferData(gpInvalidateBufferData, (C.GLuint)(buffer))
}
// invalidate a region of a buffer object's data store
func InvalidateBufferSubData(buffer uint32, offset int, length int) {
  C.glowInvalidateBufferSubData(gpInvalidateBufferSubData, (C.GLuint)(buffer), (C.GLintptr)(offset), (C.GLsizeiptr)(length))
}
// invalidate the content some or all of a framebuffer object's attachments
func InvalidateFramebuffer(target uint32, numAttachments int32, attachments *uint32) {
  C.glowInvalidateFramebuffer(gpInvalidateFramebuffer, (C.GLenum)(target), (C.GLsizei)(numAttachments), (*C.GLenum)(unsafe.Pointer(attachments)))
}
// invalidate the content of a region of some or all of a framebuffer object's attachments
func InvalidateSubFramebuffer(target uint32, numAttachments int32, attachments *uint32, x int32, y int32, width int32, height int32) {
  C.glowInvalidateSubFramebuffer(gpInvalidateSubFramebuffer, (C.GLenum)(target), (C.GLsizei)(numAttachments), (*C.GLenum)(unsafe.Pointer(attachments)), (C.GLint)(x), (C.GLint)(y), (C.GLsizei)(width), (C.GLsizei)(height))
}
// invalidate the entirety a texture image
func InvalidateTexImage(texture uint32, level int32) {
  C.glowInvalidateTexImage(gpInvalidateTexImage, (C.GLuint)(texture), (C.GLint)(level))
}
// invalidate a region of a texture image
func InvalidateTexSubImage(texture uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32) {
  C.glowInvalidateTexSubImage(gpInvalidateTexSubImage, (C.GLuint)(texture), (C.GLint)(level), (C.GLint)(xoffset), (C.GLint)(yoffset), (C.GLint)(zoffset), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLsizei)(depth))
}
func IsAsyncMarkerSGIX(marker uint32) bool {
  ret := C.glowIsAsyncMarkerSGIX(gpIsAsyncMarkerSGIX, (C.GLuint)(marker))
  return ret == TRUE
}
// determine if a name corresponds to a buffer object
func IsBuffer(buffer uint32) bool {
  ret := C.glowIsBuffer(gpIsBuffer, (C.GLuint)(buffer))
  return ret == TRUE
}
func IsBufferARB(buffer uint32) bool {
  ret := C.glowIsBufferARB(gpIsBufferARB, (C.GLuint)(buffer))
  return ret == TRUE
}
func IsBufferResidentNV(target uint32) bool {
  ret := C.glowIsBufferResidentNV(gpIsBufferResidentNV, (C.GLenum)(target))
  return ret == TRUE
}
func IsEnabled(cap uint32) bool {
  ret := C.glowIsEnabled(gpIsEnabled, (C.GLenum)(cap))
  return ret == TRUE
}
func IsEnabledIndexedEXT(target uint32, index uint32) bool {
  ret := C.glowIsEnabledIndexedEXT(gpIsEnabledIndexedEXT, (C.GLenum)(target), (C.GLuint)(index))
  return ret == TRUE
}
func IsEnabledi(target uint32, index uint32) bool {
  ret := C.glowIsEnabledi(gpIsEnabledi, (C.GLenum)(target), (C.GLuint)(index))
  return ret == TRUE
}
func IsFenceAPPLE(fence uint32) bool {
  ret := C.glowIsFenceAPPLE(gpIsFenceAPPLE, (C.GLuint)(fence))
  return ret == TRUE
}
func IsFenceNV(fence uint32) bool {
  ret := C.glowIsFenceNV(gpIsFenceNV, (C.GLuint)(fence))
  return ret == TRUE
}
// determine if a name corresponds to a framebuffer object
func IsFramebuffer(framebuffer uint32) bool {
  ret := C.glowIsFramebuffer(gpIsFramebuffer, (C.GLuint)(framebuffer))
  return ret == TRUE
}
func IsFramebufferEXT(framebuffer uint32) bool {
  ret := C.glowIsFramebufferEXT(gpIsFramebufferEXT, (C.GLuint)(framebuffer))
  return ret == TRUE
}
func IsImageHandleResidentARB(handle uint64) bool {
  ret := C.glowIsImageHandleResidentARB(gpIsImageHandleResidentARB, (C.GLuint64)(handle))
  return ret == TRUE
}
func IsImageHandleResidentNV(handle uint64) bool {
  ret := C.glowIsImageHandleResidentNV(gpIsImageHandleResidentNV, (C.GLuint64)(handle))
  return ret == TRUE
}
func IsNameAMD(identifier uint32, name uint32) bool {
  ret := C.glowIsNameAMD(gpIsNameAMD, (C.GLenum)(identifier), (C.GLuint)(name))
  return ret == TRUE
}
func IsNamedBufferResidentNV(buffer uint32) bool {
  ret := C.glowIsNamedBufferResidentNV(gpIsNamedBufferResidentNV, (C.GLuint)(buffer))
  return ret == TRUE
}
func IsNamedStringARB(namelen int32, name *int8) bool {
  ret := C.glowIsNamedStringARB(gpIsNamedStringARB, (C.GLint)(namelen), (*C.GLchar)(unsafe.Pointer(name)))
  return ret == TRUE
}
func IsObjectBufferATI(buffer uint32) bool {
  ret := C.glowIsObjectBufferATI(gpIsObjectBufferATI, (C.GLuint)(buffer))
  return ret == TRUE
}
func IsOcclusionQueryNV(id uint32) bool {
  ret := C.glowIsOcclusionQueryNV(gpIsOcclusionQueryNV, (C.GLuint)(id))
  return ret == TRUE
}
func IsPathNV(path uint32) bool {
  ret := C.glowIsPathNV(gpIsPathNV, (C.GLuint)(path))
  return ret == TRUE
}
func IsPointInFillPathNV(path uint32, mask uint32, x float32, y float32) bool {
  ret := C.glowIsPointInFillPathNV(gpIsPointInFillPathNV, (C.GLuint)(path), (C.GLuint)(mask), (C.GLfloat)(x), (C.GLfloat)(y))
  return ret == TRUE
}
func IsPointInStrokePathNV(path uint32, x float32, y float32) bool {
  ret := C.glowIsPointInStrokePathNV(gpIsPointInStrokePathNV, (C.GLuint)(path), (C.GLfloat)(x), (C.GLfloat)(y))
  return ret == TRUE
}
// Determines if a name corresponds to a program object
func IsProgram(program uint32) bool {
  ret := C.glowIsProgram(gpIsProgram, (C.GLuint)(program))
  return ret == TRUE
}
func IsProgramARB(program uint32) bool {
  ret := C.glowIsProgramARB(gpIsProgramARB, (C.GLuint)(program))
  return ret == TRUE
}
func IsProgramNV(id uint32) bool {
  ret := C.glowIsProgramNV(gpIsProgramNV, (C.GLuint)(id))
  return ret == TRUE
}
// determine if a name corresponds to a program pipeline object
func IsProgramPipeline(pipeline uint32) bool {
  ret := C.glowIsProgramPipeline(gpIsProgramPipeline, (C.GLuint)(pipeline))
  return ret == TRUE
}
func IsProgramPipelineEXT(pipeline uint32) bool {
  ret := C.glowIsProgramPipelineEXT(gpIsProgramPipelineEXT, (C.GLuint)(pipeline))
  return ret == TRUE
}
// determine if a name corresponds to a query object
func IsQuery(id uint32) bool {
  ret := C.glowIsQuery(gpIsQuery, (C.GLuint)(id))
  return ret == TRUE
}
func IsQueryARB(id uint32) bool {
  ret := C.glowIsQueryARB(gpIsQueryARB, (C.GLuint)(id))
  return ret == TRUE
}
// determine if a name corresponds to a renderbuffer object
func IsRenderbuffer(renderbuffer uint32) bool {
  ret := C.glowIsRenderbuffer(gpIsRenderbuffer, (C.GLuint)(renderbuffer))
  return ret == TRUE
}
func IsRenderbufferEXT(renderbuffer uint32) bool {
  ret := C.glowIsRenderbufferEXT(gpIsRenderbufferEXT, (C.GLuint)(renderbuffer))
  return ret == TRUE
}
// determine if a name corresponds to a sampler object
func IsSampler(sampler uint32) bool {
  ret := C.glowIsSampler(gpIsSampler, (C.GLuint)(sampler))
  return ret == TRUE
}
// Determines if a name corresponds to a shader object
func IsShader(shader uint32) bool {
  ret := C.glowIsShader(gpIsShader, (C.GLuint)(shader))
  return ret == TRUE
}
// determine if a name corresponds to a sync object
func IsSync(sync unsafe.Pointer) bool {
  ret := C.glowIsSync(gpIsSync, (C.GLsync)(sync))
  return ret == TRUE
}
// determine if a name corresponds to a texture
func IsTexture(texture uint32) bool {
  ret := C.glowIsTexture(gpIsTexture, (C.GLuint)(texture))
  return ret == TRUE
}
func IsTextureEXT(texture uint32) bool {
  ret := C.glowIsTextureEXT(gpIsTextureEXT, (C.GLuint)(texture))
  return ret == TRUE
}
func IsTextureHandleResidentARB(handle uint64) bool {
  ret := C.glowIsTextureHandleResidentARB(gpIsTextureHandleResidentARB, (C.GLuint64)(handle))
  return ret == TRUE
}
func IsTextureHandleResidentNV(handle uint64) bool {
  ret := C.glowIsTextureHandleResidentNV(gpIsTextureHandleResidentNV, (C.GLuint64)(handle))
  return ret == TRUE
}
// determine if a name corresponds to a transform feedback object
func IsTransformFeedback(id uint32) bool {
  ret := C.glowIsTransformFeedback(gpIsTransformFeedback, (C.GLuint)(id))
  return ret == TRUE
}
func IsTransformFeedbackNV(id uint32) bool {
  ret := C.glowIsTransformFeedbackNV(gpIsTransformFeedbackNV, (C.GLuint)(id))
  return ret == TRUE
}
func IsVariantEnabledEXT(id uint32, cap uint32) bool {
  ret := C.glowIsVariantEnabledEXT(gpIsVariantEnabledEXT, (C.GLuint)(id), (C.GLenum)(cap))
  return ret == TRUE
}
// determine if a name corresponds to a vertex array object
func IsVertexArray(array uint32) bool {
  ret := C.glowIsVertexArray(gpIsVertexArray, (C.GLuint)(array))
  return ret == TRUE
}
func IsVertexArrayAPPLE(array uint32) bool {
  ret := C.glowIsVertexArrayAPPLE(gpIsVertexArrayAPPLE, (C.GLuint)(array))
  return ret == TRUE
}
func IsVertexAttribEnabledAPPLE(index uint32, pname uint32) bool {
  ret := C.glowIsVertexAttribEnabledAPPLE(gpIsVertexAttribEnabledAPPLE, (C.GLuint)(index), (C.GLenum)(pname))
  return ret == TRUE
}
func LabelObjectEXT(xtype uint32, object uint32, length int32, label *int8) {
  C.glowLabelObjectEXT(gpLabelObjectEXT, (C.GLenum)(xtype), (C.GLuint)(object), (C.GLsizei)(length), (*C.GLchar)(unsafe.Pointer(label)))
}
func LightEnviSGIX(pname uint32, param int32) {
  C.glowLightEnviSGIX(gpLightEnviSGIX, (C.GLenum)(pname), (C.GLint)(param))
}
func LightModelxOES(pname uint32, param int32) {
  C.glowLightModelxOES(gpLightModelxOES, (C.GLenum)(pname), (C.GLfixed)(param))
}
func LightModelxvOES(pname uint32, param *int32) {
  C.glowLightModelxvOES(gpLightModelxvOES, (C.GLenum)(pname), (*C.GLfixed)(unsafe.Pointer(param)))
}
func LightxOES(light uint32, pname uint32, param int32) {
  C.glowLightxOES(gpLightxOES, (C.GLenum)(light), (C.GLenum)(pname), (C.GLfixed)(param))
}
func LightxvOES(light uint32, pname uint32, params *int32) {
  C.glowLightxvOES(gpLightxvOES, (C.GLenum)(light), (C.GLenum)(pname), (*C.GLfixed)(unsafe.Pointer(params)))
}
// specify the width of rasterized lines
func LineWidth(width float32) {
  C.glowLineWidth(gpLineWidth, (C.GLfloat)(width))
}
func LineWidthxOES(width int32) {
  C.glowLineWidthxOES(gpLineWidthxOES, (C.GLfixed)(width))
}
// Links a program object
func LinkProgram(program uint32) {
  C.glowLinkProgram(gpLinkProgram, (C.GLuint)(program))
}
func LinkProgramARB(programObj uintptr) {
  C.glowLinkProgramARB(gpLinkProgramARB, (C.GLhandleARB)(programObj))
}
func ListParameterfSGIX(list uint32, pname uint32, param float32) {
  C.glowListParameterfSGIX(gpListParameterfSGIX, (C.GLuint)(list), (C.GLenum)(pname), (C.GLfloat)(param))
}
func ListParameterfvSGIX(list uint32, pname uint32, params *float32) {
  C.glowListParameterfvSGIX(gpListParameterfvSGIX, (C.GLuint)(list), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func ListParameteriSGIX(list uint32, pname uint32, param int32) {
  C.glowListParameteriSGIX(gpListParameteriSGIX, (C.GLuint)(list), (C.GLenum)(pname), (C.GLint)(param))
}
func ListParameterivSGIX(list uint32, pname uint32, params *int32) {
  C.glowListParameterivSGIX(gpListParameterivSGIX, (C.GLuint)(list), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func LoadIdentityDeformationMapSGIX(mask uint32) {
  C.glowLoadIdentityDeformationMapSGIX(gpLoadIdentityDeformationMapSGIX, (C.GLbitfield)(mask))
}
func LoadMatrixxOES(m *int32) {
  C.glowLoadMatrixxOES(gpLoadMatrixxOES, (*C.GLfixed)(unsafe.Pointer(m)))
}
func LoadProgramNV(target uint32, id uint32, len int32, program *uint8) {
  C.glowLoadProgramNV(gpLoadProgramNV, (C.GLenum)(target), (C.GLuint)(id), (C.GLsizei)(len), (*C.GLubyte)(unsafe.Pointer(program)))
}
func LoadTransposeMatrixdARB(m *float64) {
  C.glowLoadTransposeMatrixdARB(gpLoadTransposeMatrixdARB, (*C.GLdouble)(unsafe.Pointer(m)))
}
func LoadTransposeMatrixfARB(m *float32) {
  C.glowLoadTransposeMatrixfARB(gpLoadTransposeMatrixfARB, (*C.GLfloat)(unsafe.Pointer(m)))
}
func LoadTransposeMatrixxOES(m *int32) {
  C.glowLoadTransposeMatrixxOES(gpLoadTransposeMatrixxOES, (*C.GLfixed)(unsafe.Pointer(m)))
}
func LockArraysEXT(first int32, count int32) {
  C.glowLockArraysEXT(gpLockArraysEXT, (C.GLint)(first), (C.GLsizei)(count))
}
// specify a logical pixel operation for rendering
func LogicOp(opcode uint32) {
  C.glowLogicOp(gpLogicOp, (C.GLenum)(opcode))
}
func MakeBufferNonResidentNV(target uint32) {
  C.glowMakeBufferNonResidentNV(gpMakeBufferNonResidentNV, (C.GLenum)(target))
}
func MakeBufferResidentNV(target uint32, access uint32) {
  C.glowMakeBufferResidentNV(gpMakeBufferResidentNV, (C.GLenum)(target), (C.GLenum)(access))
}
func MakeImageHandleNonResidentARB(handle uint64) {
  C.glowMakeImageHandleNonResidentARB(gpMakeImageHandleNonResidentARB, (C.GLuint64)(handle))
}
func MakeImageHandleNonResidentNV(handle uint64) {
  C.glowMakeImageHandleNonResidentNV(gpMakeImageHandleNonResidentNV, (C.GLuint64)(handle))
}
func MakeImageHandleResidentARB(handle uint64, access uint32) {
  C.glowMakeImageHandleResidentARB(gpMakeImageHandleResidentARB, (C.GLuint64)(handle), (C.GLenum)(access))
}
func MakeImageHandleResidentNV(handle uint64, access uint32) {
  C.glowMakeImageHandleResidentNV(gpMakeImageHandleResidentNV, (C.GLuint64)(handle), (C.GLenum)(access))
}
func MakeNamedBufferNonResidentNV(buffer uint32) {
  C.glowMakeNamedBufferNonResidentNV(gpMakeNamedBufferNonResidentNV, (C.GLuint)(buffer))
}
func MakeNamedBufferResidentNV(buffer uint32, access uint32) {
  C.glowMakeNamedBufferResidentNV(gpMakeNamedBufferResidentNV, (C.GLuint)(buffer), (C.GLenum)(access))
}
func MakeTextureHandleNonResidentARB(handle uint64) {
  C.glowMakeTextureHandleNonResidentARB(gpMakeTextureHandleNonResidentARB, (C.GLuint64)(handle))
}
func MakeTextureHandleNonResidentNV(handle uint64) {
  C.glowMakeTextureHandleNonResidentNV(gpMakeTextureHandleNonResidentNV, (C.GLuint64)(handle))
}
func MakeTextureHandleResidentARB(handle uint64) {
  C.glowMakeTextureHandleResidentARB(gpMakeTextureHandleResidentARB, (C.GLuint64)(handle))
}
func MakeTextureHandleResidentNV(handle uint64) {
  C.glowMakeTextureHandleResidentNV(gpMakeTextureHandleResidentNV, (C.GLuint64)(handle))
}
func Map1xOES(target uint32, u1 int32, u2 int32, stride int32, order int32, points int32) {
  C.glowMap1xOES(gpMap1xOES, (C.GLenum)(target), (C.GLfixed)(u1), (C.GLfixed)(u2), (C.GLint)(stride), (C.GLint)(order), (C.GLfixed)(points))
}
func Map2xOES(target uint32, u1 int32, u2 int32, ustride int32, uorder int32, v1 int32, v2 int32, vstride int32, vorder int32, points int32) {
  C.glowMap2xOES(gpMap2xOES, (C.GLenum)(target), (C.GLfixed)(u1), (C.GLfixed)(u2), (C.GLint)(ustride), (C.GLint)(uorder), (C.GLfixed)(v1), (C.GLfixed)(v2), (C.GLint)(vstride), (C.GLint)(vorder), (C.GLfixed)(points))
}
// map a buffer object's data store
func MapBuffer(target uint32, access uint32) unsafe.Pointer {
  ret := C.glowMapBuffer(gpMapBuffer, (C.GLenum)(target), (C.GLenum)(access))
  return (unsafe.Pointer)(ret)
}
func MapBufferARB(target uint32, access uint32) unsafe.Pointer {
  ret := C.glowMapBufferARB(gpMapBufferARB, (C.GLenum)(target), (C.GLenum)(access))
  return (unsafe.Pointer)(ret)
}
// map a section of a buffer object's data store
func MapBufferRange(target uint32, offset int, length int, access uint32) unsafe.Pointer {
  ret := C.glowMapBufferRange(gpMapBufferRange, (C.GLenum)(target), (C.GLintptr)(offset), (C.GLsizeiptr)(length), (C.GLbitfield)(access))
  return (unsafe.Pointer)(ret)
}
func MapControlPointsNV(target uint32, index uint32, xtype uint32, ustride int32, vstride int32, uorder int32, vorder int32, packed bool, points unsafe.Pointer) {
  C.glowMapControlPointsNV(gpMapControlPointsNV, (C.GLenum)(target), (C.GLuint)(index), (C.GLenum)(xtype), (C.GLsizei)(ustride), (C.GLsizei)(vstride), (C.GLint)(uorder), (C.GLint)(vorder), (C.GLboolean)(boolToInt(packed)), points)
}
func MapGrid1xOES(n int32, u1 int32, u2 int32) {
  C.glowMapGrid1xOES(gpMapGrid1xOES, (C.GLint)(n), (C.GLfixed)(u1), (C.GLfixed)(u2))
}
func MapGrid2xOES(n int32, u1 int32, u2 int32, v1 int32, v2 int32) {
  C.glowMapGrid2xOES(gpMapGrid2xOES, (C.GLint)(n), (C.GLfixed)(u1), (C.GLfixed)(u2), (C.GLfixed)(v1), (C.GLfixed)(v2))
}
func MapNamedBufferEXT(buffer uint32, access uint32) unsafe.Pointer {
  ret := C.glowMapNamedBufferEXT(gpMapNamedBufferEXT, (C.GLuint)(buffer), (C.GLenum)(access))
  return (unsafe.Pointer)(ret)
}
func MapNamedBufferRangeEXT(buffer uint32, offset int, length int, access uint32) unsafe.Pointer {
  ret := C.glowMapNamedBufferRangeEXT(gpMapNamedBufferRangeEXT, (C.GLuint)(buffer), (C.GLintptr)(offset), (C.GLsizeiptr)(length), (C.GLbitfield)(access))
  return (unsafe.Pointer)(ret)
}
func MapObjectBufferATI(buffer uint32) unsafe.Pointer {
  ret := C.glowMapObjectBufferATI(gpMapObjectBufferATI, (C.GLuint)(buffer))
  return (unsafe.Pointer)(ret)
}
func MapParameterfvNV(target uint32, pname uint32, params *float32) {
  C.glowMapParameterfvNV(gpMapParameterfvNV, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func MapParameterivNV(target uint32, pname uint32, params *int32) {
  C.glowMapParameterivNV(gpMapParameterivNV, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func MapTexture2DINTEL(texture uint32, level int32, access uint32, stride *int32, layout *uint32) unsafe.Pointer {
  ret := C.glowMapTexture2DINTEL(gpMapTexture2DINTEL, (C.GLuint)(texture), (C.GLint)(level), (C.GLbitfield)(access), (*C.GLint)(unsafe.Pointer(stride)), (*C.GLenum)(unsafe.Pointer(layout)))
  return (unsafe.Pointer)(ret)
}
func MapVertexAttrib1dAPPLE(index uint32, size uint32, u1 float64, u2 float64, stride int32, order int32, points *float64) {
  C.glowMapVertexAttrib1dAPPLE(gpMapVertexAttrib1dAPPLE, (C.GLuint)(index), (C.GLuint)(size), (C.GLdouble)(u1), (C.GLdouble)(u2), (C.GLint)(stride), (C.GLint)(order), (*C.GLdouble)(unsafe.Pointer(points)))
}
func MapVertexAttrib1fAPPLE(index uint32, size uint32, u1 float32, u2 float32, stride int32, order int32, points *float32) {
  C.glowMapVertexAttrib1fAPPLE(gpMapVertexAttrib1fAPPLE, (C.GLuint)(index), (C.GLuint)(size), (C.GLfloat)(u1), (C.GLfloat)(u2), (C.GLint)(stride), (C.GLint)(order), (*C.GLfloat)(unsafe.Pointer(points)))
}
func MapVertexAttrib2dAPPLE(index uint32, size uint32, u1 float64, u2 float64, ustride int32, uorder int32, v1 float64, v2 float64, vstride int32, vorder int32, points *float64) {
  C.glowMapVertexAttrib2dAPPLE(gpMapVertexAttrib2dAPPLE, (C.GLuint)(index), (C.GLuint)(size), (C.GLdouble)(u1), (C.GLdouble)(u2), (C.GLint)(ustride), (C.GLint)(uorder), (C.GLdouble)(v1), (C.GLdouble)(v2), (C.GLint)(vstride), (C.GLint)(vorder), (*C.GLdouble)(unsafe.Pointer(points)))
}
func MapVertexAttrib2fAPPLE(index uint32, size uint32, u1 float32, u2 float32, ustride int32, uorder int32, v1 float32, v2 float32, vstride int32, vorder int32, points *float32) {
  C.glowMapVertexAttrib2fAPPLE(gpMapVertexAttrib2fAPPLE, (C.GLuint)(index), (C.GLuint)(size), (C.GLfloat)(u1), (C.GLfloat)(u2), (C.GLint)(ustride), (C.GLint)(uorder), (C.GLfloat)(v1), (C.GLfloat)(v2), (C.GLint)(vstride), (C.GLint)(vorder), (*C.GLfloat)(unsafe.Pointer(points)))
}
func MaterialxOES(face uint32, pname uint32, param int32) {
  C.glowMaterialxOES(gpMaterialxOES, (C.GLenum)(face), (C.GLenum)(pname), (C.GLfixed)(param))
}
func MaterialxvOES(face uint32, pname uint32, param *int32) {
  C.glowMaterialxvOES(gpMaterialxvOES, (C.GLenum)(face), (C.GLenum)(pname), (*C.GLfixed)(unsafe.Pointer(param)))
}
func MatrixFrustumEXT(mode uint32, left float64, right float64, bottom float64, top float64, zNear float64, zFar float64) {
  C.glowMatrixFrustumEXT(gpMatrixFrustumEXT, (C.GLenum)(mode), (C.GLdouble)(left), (C.GLdouble)(right), (C.GLdouble)(bottom), (C.GLdouble)(top), (C.GLdouble)(zNear), (C.GLdouble)(zFar))
}
func MatrixIndexPointerARB(size int32, xtype uint32, stride int32, pointer unsafe.Pointer) {
  C.glowMatrixIndexPointerARB(gpMatrixIndexPointerARB, (C.GLint)(size), (C.GLenum)(xtype), (C.GLsizei)(stride), pointer)
}
func MatrixIndexubvARB(size int32, indices *uint8) {
  C.glowMatrixIndexubvARB(gpMatrixIndexubvARB, (C.GLint)(size), (*C.GLubyte)(unsafe.Pointer(indices)))
}
func MatrixIndexuivARB(size int32, indices *uint32) {
  C.glowMatrixIndexuivARB(gpMatrixIndexuivARB, (C.GLint)(size), (*C.GLuint)(unsafe.Pointer(indices)))
}
func MatrixIndexusvARB(size int32, indices *uint16) {
  C.glowMatrixIndexusvARB(gpMatrixIndexusvARB, (C.GLint)(size), (*C.GLushort)(unsafe.Pointer(indices)))
}
func MatrixLoadIdentityEXT(mode uint32) {
  C.glowMatrixLoadIdentityEXT(gpMatrixLoadIdentityEXT, (C.GLenum)(mode))
}
func MatrixLoadTransposedEXT(mode uint32, m *float64) {
  C.glowMatrixLoadTransposedEXT(gpMatrixLoadTransposedEXT, (C.GLenum)(mode), (*C.GLdouble)(unsafe.Pointer(m)))
}
func MatrixLoadTransposefEXT(mode uint32, m *float32) {
  C.glowMatrixLoadTransposefEXT(gpMatrixLoadTransposefEXT, (C.GLenum)(mode), (*C.GLfloat)(unsafe.Pointer(m)))
}
func MatrixLoaddEXT(mode uint32, m *float64) {
  C.glowMatrixLoaddEXT(gpMatrixLoaddEXT, (C.GLenum)(mode), (*C.GLdouble)(unsafe.Pointer(m)))
}
func MatrixLoadfEXT(mode uint32, m *float32) {
  C.glowMatrixLoadfEXT(gpMatrixLoadfEXT, (C.GLenum)(mode), (*C.GLfloat)(unsafe.Pointer(m)))
}
func MatrixMultTransposedEXT(mode uint32, m *float64) {
  C.glowMatrixMultTransposedEXT(gpMatrixMultTransposedEXT, (C.GLenum)(mode), (*C.GLdouble)(unsafe.Pointer(m)))
}
func MatrixMultTransposefEXT(mode uint32, m *float32) {
  C.glowMatrixMultTransposefEXT(gpMatrixMultTransposefEXT, (C.GLenum)(mode), (*C.GLfloat)(unsafe.Pointer(m)))
}
func MatrixMultdEXT(mode uint32, m *float64) {
  C.glowMatrixMultdEXT(gpMatrixMultdEXT, (C.GLenum)(mode), (*C.GLdouble)(unsafe.Pointer(m)))
}
func MatrixMultfEXT(mode uint32, m *float32) {
  C.glowMatrixMultfEXT(gpMatrixMultfEXT, (C.GLenum)(mode), (*C.GLfloat)(unsafe.Pointer(m)))
}
func MatrixOrthoEXT(mode uint32, left float64, right float64, bottom float64, top float64, zNear float64, zFar float64) {
  C.glowMatrixOrthoEXT(gpMatrixOrthoEXT, (C.GLenum)(mode), (C.GLdouble)(left), (C.GLdouble)(right), (C.GLdouble)(bottom), (C.GLdouble)(top), (C.GLdouble)(zNear), (C.GLdouble)(zFar))
}
func MatrixPopEXT(mode uint32) {
  C.glowMatrixPopEXT(gpMatrixPopEXT, (C.GLenum)(mode))
}
func MatrixPushEXT(mode uint32) {
  C.glowMatrixPushEXT(gpMatrixPushEXT, (C.GLenum)(mode))
}
func MatrixRotatedEXT(mode uint32, angle float64, x float64, y float64, z float64) {
  C.glowMatrixRotatedEXT(gpMatrixRotatedEXT, (C.GLenum)(mode), (C.GLdouble)(angle), (C.GLdouble)(x), (C.GLdouble)(y), (C.GLdouble)(z))
}
func MatrixRotatefEXT(mode uint32, angle float32, x float32, y float32, z float32) {
  C.glowMatrixRotatefEXT(gpMatrixRotatefEXT, (C.GLenum)(mode), (C.GLfloat)(angle), (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z))
}
func MatrixScaledEXT(mode uint32, x float64, y float64, z float64) {
  C.glowMatrixScaledEXT(gpMatrixScaledEXT, (C.GLenum)(mode), (C.GLdouble)(x), (C.GLdouble)(y), (C.GLdouble)(z))
}
func MatrixScalefEXT(mode uint32, x float32, y float32, z float32) {
  C.glowMatrixScalefEXT(gpMatrixScalefEXT, (C.GLenum)(mode), (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z))
}
func MatrixTranslatedEXT(mode uint32, x float64, y float64, z float64) {
  C.glowMatrixTranslatedEXT(gpMatrixTranslatedEXT, (C.GLenum)(mode), (C.GLdouble)(x), (C.GLdouble)(y), (C.GLdouble)(z))
}
func MatrixTranslatefEXT(mode uint32, x float32, y float32, z float32) {
  C.glowMatrixTranslatefEXT(gpMatrixTranslatefEXT, (C.GLenum)(mode), (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z))
}
// defines a barrier ordering memory transactions
func MemoryBarrier(barriers uint32) {
  C.glowMemoryBarrier(gpMemoryBarrier, (C.GLbitfield)(barriers))
}
func MemoryBarrierEXT(barriers uint32) {
  C.glowMemoryBarrierEXT(gpMemoryBarrierEXT, (C.GLbitfield)(barriers))
}
func MinSampleShadingARB(value float32) {
  C.glowMinSampleShadingARB(gpMinSampleShadingARB, (C.GLfloat)(value))
}
func MinmaxEXT(target uint32, internalformat uint32, sink bool) {
  C.glowMinmaxEXT(gpMinmaxEXT, (C.GLenum)(target), (C.GLenum)(internalformat), (C.GLboolean)(boolToInt(sink)))
}
func MultMatrixxOES(m *int32) {
  C.glowMultMatrixxOES(gpMultMatrixxOES, (*C.GLfixed)(unsafe.Pointer(m)))
}
func MultTransposeMatrixdARB(m *float64) {
  C.glowMultTransposeMatrixdARB(gpMultTransposeMatrixdARB, (*C.GLdouble)(unsafe.Pointer(m)))
}
func MultTransposeMatrixfARB(m *float32) {
  C.glowMultTransposeMatrixfARB(gpMultTransposeMatrixfARB, (*C.GLfloat)(unsafe.Pointer(m)))
}
func MultTransposeMatrixxOES(m *int32) {
  C.glowMultTransposeMatrixxOES(gpMultTransposeMatrixxOES, (*C.GLfixed)(unsafe.Pointer(m)))
}
// render multiple sets of primitives from array data
func MultiDrawArrays(mode uint32, first *int32, count *int32, drawcount int32) {
  C.glowMultiDrawArrays(gpMultiDrawArrays, (C.GLenum)(mode), (*C.GLint)(unsafe.Pointer(first)), (*C.GLsizei)(unsafe.Pointer(count)), (C.GLsizei)(drawcount))
}
func MultiDrawArraysEXT(mode uint32, first *int32, count *int32, primcount int32) {
  C.glowMultiDrawArraysEXT(gpMultiDrawArraysEXT, (C.GLenum)(mode), (*C.GLint)(unsafe.Pointer(first)), (*C.GLsizei)(unsafe.Pointer(count)), (C.GLsizei)(primcount))
}
// render multiple sets of primitives from array data, taking parameters from memory
func MultiDrawArraysIndirect(mode uint32, indirect unsafe.Pointer, drawcount int32, stride int32) {
  C.glowMultiDrawArraysIndirect(gpMultiDrawArraysIndirect, (C.GLenum)(mode), indirect, (C.GLsizei)(drawcount), (C.GLsizei)(stride))
}
func MultiDrawArraysIndirectAMD(mode uint32, indirect unsafe.Pointer, primcount int32, stride int32) {
  C.glowMultiDrawArraysIndirectAMD(gpMultiDrawArraysIndirectAMD, (C.GLenum)(mode), indirect, (C.GLsizei)(primcount), (C.GLsizei)(stride))
}
func MultiDrawArraysIndirectBindlessNV(mode uint32, indirect unsafe.Pointer, drawCount int32, stride int32, vertexBufferCount int32) {
  C.glowMultiDrawArraysIndirectBindlessNV(gpMultiDrawArraysIndirectBindlessNV, (C.GLenum)(mode), indirect, (C.GLsizei)(drawCount), (C.GLsizei)(stride), (C.GLint)(vertexBufferCount))
}
func MultiDrawArraysIndirectCountARB(mode uint32, indirect int, drawcount int, maxdrawcount int32, stride int32) {
  C.glowMultiDrawArraysIndirectCountARB(gpMultiDrawArraysIndirectCountARB, (C.GLenum)(mode), (C.GLintptr)(indirect), (C.GLintptr)(drawcount), (C.GLsizei)(maxdrawcount), (C.GLsizei)(stride))
}
func MultiDrawElementArrayAPPLE(mode uint32, first *int32, count *int32, primcount int32) {
  C.glowMultiDrawElementArrayAPPLE(gpMultiDrawElementArrayAPPLE, (C.GLenum)(mode), (*C.GLint)(unsafe.Pointer(first)), (*C.GLsizei)(unsafe.Pointer(count)), (C.GLsizei)(primcount))
}
// render multiple sets of primitives by specifying indices of array data elements
func MultiDrawElements(mode uint32, count *int32, xtype uint32, indices *unsafe.Pointer, drawcount int32) {
  C.glowMultiDrawElements(gpMultiDrawElements, (C.GLenum)(mode), (*C.GLsizei)(unsafe.Pointer(count)), (C.GLenum)(xtype), indices, (C.GLsizei)(drawcount))
}
// render multiple sets of primitives by specifying indices of array data elements and an index to apply to each index
func MultiDrawElementsBaseVertex(mode uint32, count *int32, xtype uint32, indices *unsafe.Pointer, drawcount int32, basevertex *int32) {
  C.glowMultiDrawElementsBaseVertex(gpMultiDrawElementsBaseVertex, (C.GLenum)(mode), (*C.GLsizei)(unsafe.Pointer(count)), (C.GLenum)(xtype), indices, (C.GLsizei)(drawcount), (*C.GLint)(unsafe.Pointer(basevertex)))
}
func MultiDrawElementsEXT(mode uint32, count *int32, xtype uint32, indices *unsafe.Pointer, primcount int32) {
  C.glowMultiDrawElementsEXT(gpMultiDrawElementsEXT, (C.GLenum)(mode), (*C.GLsizei)(unsafe.Pointer(count)), (C.GLenum)(xtype), indices, (C.GLsizei)(primcount))
}
// render indexed primitives from array data, taking parameters from memory
func MultiDrawElementsIndirect(mode uint32, xtype uint32, indirect unsafe.Pointer, drawcount int32, stride int32) {
  C.glowMultiDrawElementsIndirect(gpMultiDrawElementsIndirect, (C.GLenum)(mode), (C.GLenum)(xtype), indirect, (C.GLsizei)(drawcount), (C.GLsizei)(stride))
}
func MultiDrawElementsIndirectAMD(mode uint32, xtype uint32, indirect unsafe.Pointer, primcount int32, stride int32) {
  C.glowMultiDrawElementsIndirectAMD(gpMultiDrawElementsIndirectAMD, (C.GLenum)(mode), (C.GLenum)(xtype), indirect, (C.GLsizei)(primcount), (C.GLsizei)(stride))
}
func MultiDrawElementsIndirectBindlessNV(mode uint32, xtype uint32, indirect unsafe.Pointer, drawCount int32, stride int32, vertexBufferCount int32) {
  C.glowMultiDrawElementsIndirectBindlessNV(gpMultiDrawElementsIndirectBindlessNV, (C.GLenum)(mode), (C.GLenum)(xtype), indirect, (C.GLsizei)(drawCount), (C.GLsizei)(stride), (C.GLint)(vertexBufferCount))
}
func MultiDrawElementsIndirectCountARB(mode uint32, xtype uint32, indirect int, drawcount int, maxdrawcount int32, stride int32) {
  C.glowMultiDrawElementsIndirectCountARB(gpMultiDrawElementsIndirectCountARB, (C.GLenum)(mode), (C.GLenum)(xtype), (C.GLintptr)(indirect), (C.GLintptr)(drawcount), (C.GLsizei)(maxdrawcount), (C.GLsizei)(stride))
}
func MultiDrawRangeElementArrayAPPLE(mode uint32, start uint32, end uint32, first *int32, count *int32, primcount int32) {
  C.glowMultiDrawRangeElementArrayAPPLE(gpMultiDrawRangeElementArrayAPPLE, (C.GLenum)(mode), (C.GLuint)(start), (C.GLuint)(end), (*C.GLint)(unsafe.Pointer(first)), (*C.GLsizei)(unsafe.Pointer(count)), (C.GLsizei)(primcount))
}
func MultiModeDrawArraysIBM(mode *uint32, first *int32, count *int32, primcount int32, modestride int32) {
  C.glowMultiModeDrawArraysIBM(gpMultiModeDrawArraysIBM, (*C.GLenum)(unsafe.Pointer(mode)), (*C.GLint)(unsafe.Pointer(first)), (*C.GLsizei)(unsafe.Pointer(count)), (C.GLsizei)(primcount), (C.GLint)(modestride))
}
func MultiModeDrawElementsIBM(mode *uint32, count *int32, xtype uint32, indices *unsafe.Pointer, primcount int32, modestride int32) {
  C.glowMultiModeDrawElementsIBM(gpMultiModeDrawElementsIBM, (*C.GLenum)(unsafe.Pointer(mode)), (*C.GLsizei)(unsafe.Pointer(count)), (C.GLenum)(xtype), indices, (C.GLsizei)(primcount), (C.GLint)(modestride))
}
func MultiTexBufferEXT(texunit uint32, target uint32, internalformat uint32, buffer uint32) {
  C.glowMultiTexBufferEXT(gpMultiTexBufferEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLenum)(internalformat), (C.GLuint)(buffer))
}
func MultiTexCoord1bOES(texture uint32, s int8) {
  C.glowMultiTexCoord1bOES(gpMultiTexCoord1bOES, (C.GLenum)(texture), (C.GLbyte)(s))
}
func MultiTexCoord1bvOES(texture uint32, coords *int8) {
  C.glowMultiTexCoord1bvOES(gpMultiTexCoord1bvOES, (C.GLenum)(texture), (*C.GLbyte)(unsafe.Pointer(coords)))
}
func MultiTexCoord1dARB(target uint32, s float64) {
  C.glowMultiTexCoord1dARB(gpMultiTexCoord1dARB, (C.GLenum)(target), (C.GLdouble)(s))
}
func MultiTexCoord1dvARB(target uint32, v *float64) {
  C.glowMultiTexCoord1dvARB(gpMultiTexCoord1dvARB, (C.GLenum)(target), (*C.GLdouble)(unsafe.Pointer(v)))
}
func MultiTexCoord1fARB(target uint32, s float32) {
  C.glowMultiTexCoord1fARB(gpMultiTexCoord1fARB, (C.GLenum)(target), (C.GLfloat)(s))
}
func MultiTexCoord1fvARB(target uint32, v *float32) {
  C.glowMultiTexCoord1fvARB(gpMultiTexCoord1fvARB, (C.GLenum)(target), (*C.GLfloat)(unsafe.Pointer(v)))
}
func MultiTexCoord1hNV(target uint32, s uint16) {
  C.glowMultiTexCoord1hNV(gpMultiTexCoord1hNV, (C.GLenum)(target), (C.GLhalfNV)(s))
}
func MultiTexCoord1hvNV(target uint32, v *uint16) {
  C.glowMultiTexCoord1hvNV(gpMultiTexCoord1hvNV, (C.GLenum)(target), (*C.GLhalfNV)(unsafe.Pointer(v)))
}
func MultiTexCoord1iARB(target uint32, s int32) {
  C.glowMultiTexCoord1iARB(gpMultiTexCoord1iARB, (C.GLenum)(target), (C.GLint)(s))
}
func MultiTexCoord1ivARB(target uint32, v *int32) {
  C.glowMultiTexCoord1ivARB(gpMultiTexCoord1ivARB, (C.GLenum)(target), (*C.GLint)(unsafe.Pointer(v)))
}
func MultiTexCoord1sARB(target uint32, s int16) {
  C.glowMultiTexCoord1sARB(gpMultiTexCoord1sARB, (C.GLenum)(target), (C.GLshort)(s))
}
func MultiTexCoord1svARB(target uint32, v *int16) {
  C.glowMultiTexCoord1svARB(gpMultiTexCoord1svARB, (C.GLenum)(target), (*C.GLshort)(unsafe.Pointer(v)))
}
func MultiTexCoord1xOES(texture uint32, s int32) {
  C.glowMultiTexCoord1xOES(gpMultiTexCoord1xOES, (C.GLenum)(texture), (C.GLfixed)(s))
}
func MultiTexCoord1xvOES(texture uint32, coords *int32) {
  C.glowMultiTexCoord1xvOES(gpMultiTexCoord1xvOES, (C.GLenum)(texture), (*C.GLfixed)(unsafe.Pointer(coords)))
}
func MultiTexCoord2bOES(texture uint32, s int8, t int8) {
  C.glowMultiTexCoord2bOES(gpMultiTexCoord2bOES, (C.GLenum)(texture), (C.GLbyte)(s), (C.GLbyte)(t))
}
func MultiTexCoord2bvOES(texture uint32, coords *int8) {
  C.glowMultiTexCoord2bvOES(gpMultiTexCoord2bvOES, (C.GLenum)(texture), (*C.GLbyte)(unsafe.Pointer(coords)))
}
func MultiTexCoord2dARB(target uint32, s float64, t float64) {
  C.glowMultiTexCoord2dARB(gpMultiTexCoord2dARB, (C.GLenum)(target), (C.GLdouble)(s), (C.GLdouble)(t))
}
func MultiTexCoord2dvARB(target uint32, v *float64) {
  C.glowMultiTexCoord2dvARB(gpMultiTexCoord2dvARB, (C.GLenum)(target), (*C.GLdouble)(unsafe.Pointer(v)))
}
func MultiTexCoord2fARB(target uint32, s float32, t float32) {
  C.glowMultiTexCoord2fARB(gpMultiTexCoord2fARB, (C.GLenum)(target), (C.GLfloat)(s), (C.GLfloat)(t))
}
func MultiTexCoord2fvARB(target uint32, v *float32) {
  C.glowMultiTexCoord2fvARB(gpMultiTexCoord2fvARB, (C.GLenum)(target), (*C.GLfloat)(unsafe.Pointer(v)))
}
func MultiTexCoord2hNV(target uint32, s uint16, t uint16) {
  C.glowMultiTexCoord2hNV(gpMultiTexCoord2hNV, (C.GLenum)(target), (C.GLhalfNV)(s), (C.GLhalfNV)(t))
}
func MultiTexCoord2hvNV(target uint32, v *uint16) {
  C.glowMultiTexCoord2hvNV(gpMultiTexCoord2hvNV, (C.GLenum)(target), (*C.GLhalfNV)(unsafe.Pointer(v)))
}
func MultiTexCoord2iARB(target uint32, s int32, t int32) {
  C.glowMultiTexCoord2iARB(gpMultiTexCoord2iARB, (C.GLenum)(target), (C.GLint)(s), (C.GLint)(t))
}
func MultiTexCoord2ivARB(target uint32, v *int32) {
  C.glowMultiTexCoord2ivARB(gpMultiTexCoord2ivARB, (C.GLenum)(target), (*C.GLint)(unsafe.Pointer(v)))
}
func MultiTexCoord2sARB(target uint32, s int16, t int16) {
  C.glowMultiTexCoord2sARB(gpMultiTexCoord2sARB, (C.GLenum)(target), (C.GLshort)(s), (C.GLshort)(t))
}
func MultiTexCoord2svARB(target uint32, v *int16) {
  C.glowMultiTexCoord2svARB(gpMultiTexCoord2svARB, (C.GLenum)(target), (*C.GLshort)(unsafe.Pointer(v)))
}
func MultiTexCoord2xOES(texture uint32, s int32, t int32) {
  C.glowMultiTexCoord2xOES(gpMultiTexCoord2xOES, (C.GLenum)(texture), (C.GLfixed)(s), (C.GLfixed)(t))
}
func MultiTexCoord2xvOES(texture uint32, coords *int32) {
  C.glowMultiTexCoord2xvOES(gpMultiTexCoord2xvOES, (C.GLenum)(texture), (*C.GLfixed)(unsafe.Pointer(coords)))
}
func MultiTexCoord3bOES(texture uint32, s int8, t int8, r int8) {
  C.glowMultiTexCoord3bOES(gpMultiTexCoord3bOES, (C.GLenum)(texture), (C.GLbyte)(s), (C.GLbyte)(t), (C.GLbyte)(r))
}
func MultiTexCoord3bvOES(texture uint32, coords *int8) {
  C.glowMultiTexCoord3bvOES(gpMultiTexCoord3bvOES, (C.GLenum)(texture), (*C.GLbyte)(unsafe.Pointer(coords)))
}
func MultiTexCoord3dARB(target uint32, s float64, t float64, r float64) {
  C.glowMultiTexCoord3dARB(gpMultiTexCoord3dARB, (C.GLenum)(target), (C.GLdouble)(s), (C.GLdouble)(t), (C.GLdouble)(r))
}
func MultiTexCoord3dvARB(target uint32, v *float64) {
  C.glowMultiTexCoord3dvARB(gpMultiTexCoord3dvARB, (C.GLenum)(target), (*C.GLdouble)(unsafe.Pointer(v)))
}
func MultiTexCoord3fARB(target uint32, s float32, t float32, r float32) {
  C.glowMultiTexCoord3fARB(gpMultiTexCoord3fARB, (C.GLenum)(target), (C.GLfloat)(s), (C.GLfloat)(t), (C.GLfloat)(r))
}
func MultiTexCoord3fvARB(target uint32, v *float32) {
  C.glowMultiTexCoord3fvARB(gpMultiTexCoord3fvARB, (C.GLenum)(target), (*C.GLfloat)(unsafe.Pointer(v)))
}
func MultiTexCoord3hNV(target uint32, s uint16, t uint16, r uint16) {
  C.glowMultiTexCoord3hNV(gpMultiTexCoord3hNV, (C.GLenum)(target), (C.GLhalfNV)(s), (C.GLhalfNV)(t), (C.GLhalfNV)(r))
}
func MultiTexCoord3hvNV(target uint32, v *uint16) {
  C.glowMultiTexCoord3hvNV(gpMultiTexCoord3hvNV, (C.GLenum)(target), (*C.GLhalfNV)(unsafe.Pointer(v)))
}
func MultiTexCoord3iARB(target uint32, s int32, t int32, r int32) {
  C.glowMultiTexCoord3iARB(gpMultiTexCoord3iARB, (C.GLenum)(target), (C.GLint)(s), (C.GLint)(t), (C.GLint)(r))
}
func MultiTexCoord3ivARB(target uint32, v *int32) {
  C.glowMultiTexCoord3ivARB(gpMultiTexCoord3ivARB, (C.GLenum)(target), (*C.GLint)(unsafe.Pointer(v)))
}
func MultiTexCoord3sARB(target uint32, s int16, t int16, r int16) {
  C.glowMultiTexCoord3sARB(gpMultiTexCoord3sARB, (C.GLenum)(target), (C.GLshort)(s), (C.GLshort)(t), (C.GLshort)(r))
}
func MultiTexCoord3svARB(target uint32, v *int16) {
  C.glowMultiTexCoord3svARB(gpMultiTexCoord3svARB, (C.GLenum)(target), (*C.GLshort)(unsafe.Pointer(v)))
}
func MultiTexCoord3xOES(texture uint32, s int32, t int32, r int32) {
  C.glowMultiTexCoord3xOES(gpMultiTexCoord3xOES, (C.GLenum)(texture), (C.GLfixed)(s), (C.GLfixed)(t), (C.GLfixed)(r))
}
func MultiTexCoord3xvOES(texture uint32, coords *int32) {
  C.glowMultiTexCoord3xvOES(gpMultiTexCoord3xvOES, (C.GLenum)(texture), (*C.GLfixed)(unsafe.Pointer(coords)))
}
func MultiTexCoord4bOES(texture uint32, s int8, t int8, r int8, q int8) {
  C.glowMultiTexCoord4bOES(gpMultiTexCoord4bOES, (C.GLenum)(texture), (C.GLbyte)(s), (C.GLbyte)(t), (C.GLbyte)(r), (C.GLbyte)(q))
}
func MultiTexCoord4bvOES(texture uint32, coords *int8) {
  C.glowMultiTexCoord4bvOES(gpMultiTexCoord4bvOES, (C.GLenum)(texture), (*C.GLbyte)(unsafe.Pointer(coords)))
}
func MultiTexCoord4dARB(target uint32, s float64, t float64, r float64, q float64) {
  C.glowMultiTexCoord4dARB(gpMultiTexCoord4dARB, (C.GLenum)(target), (C.GLdouble)(s), (C.GLdouble)(t), (C.GLdouble)(r), (C.GLdouble)(q))
}
func MultiTexCoord4dvARB(target uint32, v *float64) {
  C.glowMultiTexCoord4dvARB(gpMultiTexCoord4dvARB, (C.GLenum)(target), (*C.GLdouble)(unsafe.Pointer(v)))
}
func MultiTexCoord4fARB(target uint32, s float32, t float32, r float32, q float32) {
  C.glowMultiTexCoord4fARB(gpMultiTexCoord4fARB, (C.GLenum)(target), (C.GLfloat)(s), (C.GLfloat)(t), (C.GLfloat)(r), (C.GLfloat)(q))
}
func MultiTexCoord4fvARB(target uint32, v *float32) {
  C.glowMultiTexCoord4fvARB(gpMultiTexCoord4fvARB, (C.GLenum)(target), (*C.GLfloat)(unsafe.Pointer(v)))
}
func MultiTexCoord4hNV(target uint32, s uint16, t uint16, r uint16, q uint16) {
  C.glowMultiTexCoord4hNV(gpMultiTexCoord4hNV, (C.GLenum)(target), (C.GLhalfNV)(s), (C.GLhalfNV)(t), (C.GLhalfNV)(r), (C.GLhalfNV)(q))
}
func MultiTexCoord4hvNV(target uint32, v *uint16) {
  C.glowMultiTexCoord4hvNV(gpMultiTexCoord4hvNV, (C.GLenum)(target), (*C.GLhalfNV)(unsafe.Pointer(v)))
}
func MultiTexCoord4iARB(target uint32, s int32, t int32, r int32, q int32) {
  C.glowMultiTexCoord4iARB(gpMultiTexCoord4iARB, (C.GLenum)(target), (C.GLint)(s), (C.GLint)(t), (C.GLint)(r), (C.GLint)(q))
}
func MultiTexCoord4ivARB(target uint32, v *int32) {
  C.glowMultiTexCoord4ivARB(gpMultiTexCoord4ivARB, (C.GLenum)(target), (*C.GLint)(unsafe.Pointer(v)))
}
func MultiTexCoord4sARB(target uint32, s int16, t int16, r int16, q int16) {
  C.glowMultiTexCoord4sARB(gpMultiTexCoord4sARB, (C.GLenum)(target), (C.GLshort)(s), (C.GLshort)(t), (C.GLshort)(r), (C.GLshort)(q))
}
func MultiTexCoord4svARB(target uint32, v *int16) {
  C.glowMultiTexCoord4svARB(gpMultiTexCoord4svARB, (C.GLenum)(target), (*C.GLshort)(unsafe.Pointer(v)))
}
func MultiTexCoord4xOES(texture uint32, s int32, t int32, r int32, q int32) {
  C.glowMultiTexCoord4xOES(gpMultiTexCoord4xOES, (C.GLenum)(texture), (C.GLfixed)(s), (C.GLfixed)(t), (C.GLfixed)(r), (C.GLfixed)(q))
}
func MultiTexCoord4xvOES(texture uint32, coords *int32) {
  C.glowMultiTexCoord4xvOES(gpMultiTexCoord4xvOES, (C.GLenum)(texture), (*C.GLfixed)(unsafe.Pointer(coords)))
}
func MultiTexCoordPointerEXT(texunit uint32, size int32, xtype uint32, stride int32, pointer unsafe.Pointer) {
  C.glowMultiTexCoordPointerEXT(gpMultiTexCoordPointerEXT, (C.GLenum)(texunit), (C.GLint)(size), (C.GLenum)(xtype), (C.GLsizei)(stride), pointer)
}
func MultiTexEnvfEXT(texunit uint32, target uint32, pname uint32, param float32) {
  C.glowMultiTexEnvfEXT(gpMultiTexEnvfEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLenum)(pname), (C.GLfloat)(param))
}
func MultiTexEnvfvEXT(texunit uint32, target uint32, pname uint32, params *float32) {
  C.glowMultiTexEnvfvEXT(gpMultiTexEnvfvEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func MultiTexEnviEXT(texunit uint32, target uint32, pname uint32, param int32) {
  C.glowMultiTexEnviEXT(gpMultiTexEnviEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLenum)(pname), (C.GLint)(param))
}
func MultiTexEnvivEXT(texunit uint32, target uint32, pname uint32, params *int32) {
  C.glowMultiTexEnvivEXT(gpMultiTexEnvivEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func MultiTexGendEXT(texunit uint32, coord uint32, pname uint32, param float64) {
  C.glowMultiTexGendEXT(gpMultiTexGendEXT, (C.GLenum)(texunit), (C.GLenum)(coord), (C.GLenum)(pname), (C.GLdouble)(param))
}
func MultiTexGendvEXT(texunit uint32, coord uint32, pname uint32, params *float64) {
  C.glowMultiTexGendvEXT(gpMultiTexGendvEXT, (C.GLenum)(texunit), (C.GLenum)(coord), (C.GLenum)(pname), (*C.GLdouble)(unsafe.Pointer(params)))
}
func MultiTexGenfEXT(texunit uint32, coord uint32, pname uint32, param float32) {
  C.glowMultiTexGenfEXT(gpMultiTexGenfEXT, (C.GLenum)(texunit), (C.GLenum)(coord), (C.GLenum)(pname), (C.GLfloat)(param))
}
func MultiTexGenfvEXT(texunit uint32, coord uint32, pname uint32, params *float32) {
  C.glowMultiTexGenfvEXT(gpMultiTexGenfvEXT, (C.GLenum)(texunit), (C.GLenum)(coord), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func MultiTexGeniEXT(texunit uint32, coord uint32, pname uint32, param int32) {
  C.glowMultiTexGeniEXT(gpMultiTexGeniEXT, (C.GLenum)(texunit), (C.GLenum)(coord), (C.GLenum)(pname), (C.GLint)(param))
}
func MultiTexGenivEXT(texunit uint32, coord uint32, pname uint32, params *int32) {
  C.glowMultiTexGenivEXT(gpMultiTexGenivEXT, (C.GLenum)(texunit), (C.GLenum)(coord), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func MultiTexImage1DEXT(texunit uint32, target uint32, level int32, internalformat int32, width int32, border int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
  C.glowMultiTexImage1DEXT(gpMultiTexImage1DEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLint)(level), (C.GLint)(internalformat), (C.GLsizei)(width), (C.GLint)(border), (C.GLenum)(format), (C.GLenum)(xtype), pixels)
}
func MultiTexImage2DEXT(texunit uint32, target uint32, level int32, internalformat int32, width int32, height int32, border int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
  C.glowMultiTexImage2DEXT(gpMultiTexImage2DEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLint)(level), (C.GLint)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLint)(border), (C.GLenum)(format), (C.GLenum)(xtype), pixels)
}
func MultiTexImage3DEXT(texunit uint32, target uint32, level int32, internalformat int32, width int32, height int32, depth int32, border int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
  C.glowMultiTexImage3DEXT(gpMultiTexImage3DEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLint)(level), (C.GLint)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLsizei)(depth), (C.GLint)(border), (C.GLenum)(format), (C.GLenum)(xtype), pixels)
}
func MultiTexParameterIivEXT(texunit uint32, target uint32, pname uint32, params *int32) {
  C.glowMultiTexParameterIivEXT(gpMultiTexParameterIivEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func MultiTexParameterIuivEXT(texunit uint32, target uint32, pname uint32, params *uint32) {
  C.glowMultiTexParameterIuivEXT(gpMultiTexParameterIuivEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLenum)(pname), (*C.GLuint)(unsafe.Pointer(params)))
}
func MultiTexParameterfEXT(texunit uint32, target uint32, pname uint32, param float32) {
  C.glowMultiTexParameterfEXT(gpMultiTexParameterfEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLenum)(pname), (C.GLfloat)(param))
}
func MultiTexParameterfvEXT(texunit uint32, target uint32, pname uint32, params *float32) {
  C.glowMultiTexParameterfvEXT(gpMultiTexParameterfvEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func MultiTexParameteriEXT(texunit uint32, target uint32, pname uint32, param int32) {
  C.glowMultiTexParameteriEXT(gpMultiTexParameteriEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLenum)(pname), (C.GLint)(param))
}
func MultiTexParameterivEXT(texunit uint32, target uint32, pname uint32, params *int32) {
  C.glowMultiTexParameterivEXT(gpMultiTexParameterivEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func MultiTexRenderbufferEXT(texunit uint32, target uint32, renderbuffer uint32) {
  C.glowMultiTexRenderbufferEXT(gpMultiTexRenderbufferEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLuint)(renderbuffer))
}
func MultiTexSubImage1DEXT(texunit uint32, target uint32, level int32, xoffset int32, width int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
  C.glowMultiTexSubImage1DEXT(gpMultiTexSubImage1DEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLsizei)(width), (C.GLenum)(format), (C.GLenum)(xtype), pixels)
}
func MultiTexSubImage2DEXT(texunit uint32, target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
  C.glowMultiTexSubImage2DEXT(gpMultiTexSubImage2DEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLint)(yoffset), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLenum)(format), (C.GLenum)(xtype), pixels)
}
func MultiTexSubImage3DEXT(texunit uint32, target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
  C.glowMultiTexSubImage3DEXT(gpMultiTexSubImage3DEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLint)(yoffset), (C.GLint)(zoffset), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLsizei)(depth), (C.GLenum)(format), (C.GLenum)(xtype), pixels)
}
func NamedBufferDataEXT(buffer uint32, size int, data unsafe.Pointer, usage uint32) {
  C.glowNamedBufferDataEXT(gpNamedBufferDataEXT, (C.GLuint)(buffer), (C.GLsizeiptr)(size), data, (C.GLenum)(usage))
}
func NamedBufferStorageEXT(buffer uint32, size int, data unsafe.Pointer, flags uint32) {
  C.glowNamedBufferStorageEXT(gpNamedBufferStorageEXT, (C.GLuint)(buffer), (C.GLsizeiptr)(size), data, (C.GLbitfield)(flags))
}
func NamedBufferSubDataEXT(buffer uint32, offset int, size int, data unsafe.Pointer) {
  C.glowNamedBufferSubDataEXT(gpNamedBufferSubDataEXT, (C.GLuint)(buffer), (C.GLintptr)(offset), (C.GLsizeiptr)(size), data)
}
func NamedCopyBufferSubDataEXT(readBuffer uint32, writeBuffer uint32, readOffset int, writeOffset int, size int) {
  C.glowNamedCopyBufferSubDataEXT(gpNamedCopyBufferSubDataEXT, (C.GLuint)(readBuffer), (C.GLuint)(writeBuffer), (C.GLintptr)(readOffset), (C.GLintptr)(writeOffset), (C.GLsizeiptr)(size))
}
func NamedFramebufferParameteriEXT(framebuffer uint32, pname uint32, param int32) {
  C.glowNamedFramebufferParameteriEXT(gpNamedFramebufferParameteriEXT, (C.GLuint)(framebuffer), (C.GLenum)(pname), (C.GLint)(param))
}
func NamedFramebufferRenderbufferEXT(framebuffer uint32, attachment uint32, renderbuffertarget uint32, renderbuffer uint32) {
  C.glowNamedFramebufferRenderbufferEXT(gpNamedFramebufferRenderbufferEXT, (C.GLuint)(framebuffer), (C.GLenum)(attachment), (C.GLenum)(renderbuffertarget), (C.GLuint)(renderbuffer))
}
func NamedFramebufferTexture1DEXT(framebuffer uint32, attachment uint32, textarget uint32, texture uint32, level int32) {
  C.glowNamedFramebufferTexture1DEXT(gpNamedFramebufferTexture1DEXT, (C.GLuint)(framebuffer), (C.GLenum)(attachment), (C.GLenum)(textarget), (C.GLuint)(texture), (C.GLint)(level))
}
func NamedFramebufferTexture2DEXT(framebuffer uint32, attachment uint32, textarget uint32, texture uint32, level int32) {
  C.glowNamedFramebufferTexture2DEXT(gpNamedFramebufferTexture2DEXT, (C.GLuint)(framebuffer), (C.GLenum)(attachment), (C.GLenum)(textarget), (C.GLuint)(texture), (C.GLint)(level))
}
func NamedFramebufferTexture3DEXT(framebuffer uint32, attachment uint32, textarget uint32, texture uint32, level int32, zoffset int32) {
  C.glowNamedFramebufferTexture3DEXT(gpNamedFramebufferTexture3DEXT, (C.GLuint)(framebuffer), (C.GLenum)(attachment), (C.GLenum)(textarget), (C.GLuint)(texture), (C.GLint)(level), (C.GLint)(zoffset))
}
func NamedFramebufferTextureEXT(framebuffer uint32, attachment uint32, texture uint32, level int32) {
  C.glowNamedFramebufferTextureEXT(gpNamedFramebufferTextureEXT, (C.GLuint)(framebuffer), (C.GLenum)(attachment), (C.GLuint)(texture), (C.GLint)(level))
}
func NamedFramebufferTextureFaceEXT(framebuffer uint32, attachment uint32, texture uint32, level int32, face uint32) {
  C.glowNamedFramebufferTextureFaceEXT(gpNamedFramebufferTextureFaceEXT, (C.GLuint)(framebuffer), (C.GLenum)(attachment), (C.GLuint)(texture), (C.GLint)(level), (C.GLenum)(face))
}
func NamedFramebufferTextureLayerEXT(framebuffer uint32, attachment uint32, texture uint32, level int32, layer int32) {
  C.glowNamedFramebufferTextureLayerEXT(gpNamedFramebufferTextureLayerEXT, (C.GLuint)(framebuffer), (C.GLenum)(attachment), (C.GLuint)(texture), (C.GLint)(level), (C.GLint)(layer))
}
func NamedProgramLocalParameter4dEXT(program uint32, target uint32, index uint32, x float64, y float64, z float64, w float64) {
  C.glowNamedProgramLocalParameter4dEXT(gpNamedProgramLocalParameter4dEXT, (C.GLuint)(program), (C.GLenum)(target), (C.GLuint)(index), (C.GLdouble)(x), (C.GLdouble)(y), (C.GLdouble)(z), (C.GLdouble)(w))
}
func NamedProgramLocalParameter4dvEXT(program uint32, target uint32, index uint32, params *float64) {
  C.glowNamedProgramLocalParameter4dvEXT(gpNamedProgramLocalParameter4dvEXT, (C.GLuint)(program), (C.GLenum)(target), (C.GLuint)(index), (*C.GLdouble)(unsafe.Pointer(params)))
}
func NamedProgramLocalParameter4fEXT(program uint32, target uint32, index uint32, x float32, y float32, z float32, w float32) {
  C.glowNamedProgramLocalParameter4fEXT(gpNamedProgramLocalParameter4fEXT, (C.GLuint)(program), (C.GLenum)(target), (C.GLuint)(index), (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z), (C.GLfloat)(w))
}
func NamedProgramLocalParameter4fvEXT(program uint32, target uint32, index uint32, params *float32) {
  C.glowNamedProgramLocalParameter4fvEXT(gpNamedProgramLocalParameter4fvEXT, (C.GLuint)(program), (C.GLenum)(target), (C.GLuint)(index), (*C.GLfloat)(unsafe.Pointer(params)))
}
func NamedProgramLocalParameterI4iEXT(program uint32, target uint32, index uint32, x int32, y int32, z int32, w int32) {
  C.glowNamedProgramLocalParameterI4iEXT(gpNamedProgramLocalParameterI4iEXT, (C.GLuint)(program), (C.GLenum)(target), (C.GLuint)(index), (C.GLint)(x), (C.GLint)(y), (C.GLint)(z), (C.GLint)(w))
}
func NamedProgramLocalParameterI4ivEXT(program uint32, target uint32, index uint32, params *int32) {
  C.glowNamedProgramLocalParameterI4ivEXT(gpNamedProgramLocalParameterI4ivEXT, (C.GLuint)(program), (C.GLenum)(target), (C.GLuint)(index), (*C.GLint)(unsafe.Pointer(params)))
}
func NamedProgramLocalParameterI4uiEXT(program uint32, target uint32, index uint32, x uint32, y uint32, z uint32, w uint32) {
  C.glowNamedProgramLocalParameterI4uiEXT(gpNamedProgramLocalParameterI4uiEXT, (C.GLuint)(program), (C.GLenum)(target), (C.GLuint)(index), (C.GLuint)(x), (C.GLuint)(y), (C.GLuint)(z), (C.GLuint)(w))
}
func NamedProgramLocalParameterI4uivEXT(program uint32, target uint32, index uint32, params *uint32) {
  C.glowNamedProgramLocalParameterI4uivEXT(gpNamedProgramLocalParameterI4uivEXT, (C.GLuint)(program), (C.GLenum)(target), (C.GLuint)(index), (*C.GLuint)(unsafe.Pointer(params)))
}
func NamedProgramLocalParameters4fvEXT(program uint32, target uint32, index uint32, count int32, params *float32) {
  C.glowNamedProgramLocalParameters4fvEXT(gpNamedProgramLocalParameters4fvEXT, (C.GLuint)(program), (C.GLenum)(target), (C.GLuint)(index), (C.GLsizei)(count), (*C.GLfloat)(unsafe.Pointer(params)))
}
func NamedProgramLocalParametersI4ivEXT(program uint32, target uint32, index uint32, count int32, params *int32) {
  C.glowNamedProgramLocalParametersI4ivEXT(gpNamedProgramLocalParametersI4ivEXT, (C.GLuint)(program), (C.GLenum)(target), (C.GLuint)(index), (C.GLsizei)(count), (*C.GLint)(unsafe.Pointer(params)))
}
func NamedProgramLocalParametersI4uivEXT(program uint32, target uint32, index uint32, count int32, params *uint32) {
  C.glowNamedProgramLocalParametersI4uivEXT(gpNamedProgramLocalParametersI4uivEXT, (C.GLuint)(program), (C.GLenum)(target), (C.GLuint)(index), (C.GLsizei)(count), (*C.GLuint)(unsafe.Pointer(params)))
}
func NamedProgramStringEXT(program uint32, target uint32, format uint32, len int32, xstring unsafe.Pointer) {
  C.glowNamedProgramStringEXT(gpNamedProgramStringEXT, (C.GLuint)(program), (C.GLenum)(target), (C.GLenum)(format), (C.GLsizei)(len), xstring)
}
func NamedRenderbufferStorageEXT(renderbuffer uint32, internalformat uint32, width int32, height int32) {
  C.glowNamedRenderbufferStorageEXT(gpNamedRenderbufferStorageEXT, (C.GLuint)(renderbuffer), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height))
}
func NamedRenderbufferStorageMultisampleCoverageEXT(renderbuffer uint32, coverageSamples int32, colorSamples int32, internalformat uint32, width int32, height int32) {
  C.glowNamedRenderbufferStorageMultisampleCoverageEXT(gpNamedRenderbufferStorageMultisampleCoverageEXT, (C.GLuint)(renderbuffer), (C.GLsizei)(coverageSamples), (C.GLsizei)(colorSamples), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height))
}
func NamedRenderbufferStorageMultisampleEXT(renderbuffer uint32, samples int32, internalformat uint32, width int32, height int32) {
  C.glowNamedRenderbufferStorageMultisampleEXT(gpNamedRenderbufferStorageMultisampleEXT, (C.GLuint)(renderbuffer), (C.GLsizei)(samples), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height))
}
func NamedStringARB(xtype uint32, namelen int32, name *int8, stringlen int32, xstring *int8) {
  C.glowNamedStringARB(gpNamedStringARB, (C.GLenum)(xtype), (C.GLint)(namelen), (*C.GLchar)(unsafe.Pointer(name)), (C.GLint)(stringlen), (*C.GLchar)(unsafe.Pointer(xstring)))
}
func NewObjectBufferATI(size int32, pointer unsafe.Pointer, usage uint32) uint32 {
  ret := C.glowNewObjectBufferATI(gpNewObjectBufferATI, (C.GLsizei)(size), pointer, (C.GLenum)(usage))
  return (uint32)(ret)
}
func Normal3fVertex3fSUN(nx float32, ny float32, nz float32, x float32, y float32, z float32) {
  C.glowNormal3fVertex3fSUN(gpNormal3fVertex3fSUN, (C.GLfloat)(nx), (C.GLfloat)(ny), (C.GLfloat)(nz), (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z))
}
func Normal3fVertex3fvSUN(n *float32, v *float32) {
  C.glowNormal3fVertex3fvSUN(gpNormal3fVertex3fvSUN, (*C.GLfloat)(unsafe.Pointer(n)), (*C.GLfloat)(unsafe.Pointer(v)))
}
func Normal3hNV(nx uint16, ny uint16, nz uint16) {
  C.glowNormal3hNV(gpNormal3hNV, (C.GLhalfNV)(nx), (C.GLhalfNV)(ny), (C.GLhalfNV)(nz))
}
func Normal3hvNV(v *uint16) {
  C.glowNormal3hvNV(gpNormal3hvNV, (*C.GLhalfNV)(unsafe.Pointer(v)))
}
func Normal3xOES(nx int32, ny int32, nz int32) {
  C.glowNormal3xOES(gpNormal3xOES, (C.GLfixed)(nx), (C.GLfixed)(ny), (C.GLfixed)(nz))
}
func Normal3xvOES(coords *int32) {
  C.glowNormal3xvOES(gpNormal3xvOES, (*C.GLfixed)(unsafe.Pointer(coords)))
}
func NormalFormatNV(xtype uint32, stride int32) {
  C.glowNormalFormatNV(gpNormalFormatNV, (C.GLenum)(xtype), (C.GLsizei)(stride))
}
func NormalPointerEXT(xtype uint32, stride int32, count int32, pointer unsafe.Pointer) {
  C.glowNormalPointerEXT(gpNormalPointerEXT, (C.GLenum)(xtype), (C.GLsizei)(stride), (C.GLsizei)(count), pointer)
}
func NormalPointerListIBM(xtype uint32, stride int32, pointer *unsafe.Pointer, ptrstride int32) {
  C.glowNormalPointerListIBM(gpNormalPointerListIBM, (C.GLenum)(xtype), (C.GLint)(stride), pointer, (C.GLint)(ptrstride))
}
func NormalPointervINTEL(xtype uint32, pointer *unsafe.Pointer) {
  C.glowNormalPointervINTEL(gpNormalPointervINTEL, (C.GLenum)(xtype), pointer)
}
func NormalStream3bATI(stream uint32, nx int8, ny int8, nz int8) {
  C.glowNormalStream3bATI(gpNormalStream3bATI, (C.GLenum)(stream), (C.GLbyte)(nx), (C.GLbyte)(ny), (C.GLbyte)(nz))
}
func NormalStream3bvATI(stream uint32, coords *int8) {
  C.glowNormalStream3bvATI(gpNormalStream3bvATI, (C.GLenum)(stream), (*C.GLbyte)(unsafe.Pointer(coords)))
}
func NormalStream3dATI(stream uint32, nx float64, ny float64, nz float64) {
  C.glowNormalStream3dATI(gpNormalStream3dATI, (C.GLenum)(stream), (C.GLdouble)(nx), (C.GLdouble)(ny), (C.GLdouble)(nz))
}
func NormalStream3dvATI(stream uint32, coords *float64) {
  C.glowNormalStream3dvATI(gpNormalStream3dvATI, (C.GLenum)(stream), (*C.GLdouble)(unsafe.Pointer(coords)))
}
func NormalStream3fATI(stream uint32, nx float32, ny float32, nz float32) {
  C.glowNormalStream3fATI(gpNormalStream3fATI, (C.GLenum)(stream), (C.GLfloat)(nx), (C.GLfloat)(ny), (C.GLfloat)(nz))
}
func NormalStream3fvATI(stream uint32, coords *float32) {
  C.glowNormalStream3fvATI(gpNormalStream3fvATI, (C.GLenum)(stream), (*C.GLfloat)(unsafe.Pointer(coords)))
}
func NormalStream3iATI(stream uint32, nx int32, ny int32, nz int32) {
  C.glowNormalStream3iATI(gpNormalStream3iATI, (C.GLenum)(stream), (C.GLint)(nx), (C.GLint)(ny), (C.GLint)(nz))
}
func NormalStream3ivATI(stream uint32, coords *int32) {
  C.glowNormalStream3ivATI(gpNormalStream3ivATI, (C.GLenum)(stream), (*C.GLint)(unsafe.Pointer(coords)))
}
func NormalStream3sATI(stream uint32, nx int16, ny int16, nz int16) {
  C.glowNormalStream3sATI(gpNormalStream3sATI, (C.GLenum)(stream), (C.GLshort)(nx), (C.GLshort)(ny), (C.GLshort)(nz))
}
func NormalStream3svATI(stream uint32, coords *int16) {
  C.glowNormalStream3svATI(gpNormalStream3svATI, (C.GLenum)(stream), (*C.GLshort)(unsafe.Pointer(coords)))
}
// label a named object identified within a namespace
func ObjectLabel(identifier uint32, name uint32, length int32, label *int8) {
  C.glowObjectLabel(gpObjectLabel, (C.GLenum)(identifier), (C.GLuint)(name), (C.GLsizei)(length), (*C.GLchar)(unsafe.Pointer(label)))
}
func ObjectLabelKHR(identifier uint32, name uint32, length int32, label *int8) {
  C.glowObjectLabelKHR(gpObjectLabelKHR, (C.GLenum)(identifier), (C.GLuint)(name), (C.GLsizei)(length), (*C.GLchar)(unsafe.Pointer(label)))
}
// label a a sync object identified by a pointer
func ObjectPtrLabel(ptr unsafe.Pointer, length int32, label *int8) {
  C.glowObjectPtrLabel(gpObjectPtrLabel, ptr, (C.GLsizei)(length), (*C.GLchar)(unsafe.Pointer(label)))
}
func ObjectPtrLabelKHR(ptr unsafe.Pointer, length int32, label *int8) {
  C.glowObjectPtrLabelKHR(gpObjectPtrLabelKHR, ptr, (C.GLsizei)(length), (*C.GLchar)(unsafe.Pointer(label)))
}
func ObjectPurgeableAPPLE(objectType uint32, name uint32, option uint32) uint32 {
  ret := C.glowObjectPurgeableAPPLE(gpObjectPurgeableAPPLE, (C.GLenum)(objectType), (C.GLuint)(name), (C.GLenum)(option))
  return (uint32)(ret)
}
func ObjectUnpurgeableAPPLE(objectType uint32, name uint32, option uint32) uint32 {
  ret := C.glowObjectUnpurgeableAPPLE(gpObjectUnpurgeableAPPLE, (C.GLenum)(objectType), (C.GLuint)(name), (C.GLenum)(option))
  return (uint32)(ret)
}
func OrthofOES(l float32, r float32, b float32, t float32, n float32, f float32) {
  C.glowOrthofOES(gpOrthofOES, (C.GLfloat)(l), (C.GLfloat)(r), (C.GLfloat)(b), (C.GLfloat)(t), (C.GLfloat)(n), (C.GLfloat)(f))
}
func OrthoxOES(l int32, r int32, b int32, t int32, n int32, f int32) {
  C.glowOrthoxOES(gpOrthoxOES, (C.GLfixed)(l), (C.GLfixed)(r), (C.GLfixed)(b), (C.GLfixed)(t), (C.GLfixed)(n), (C.GLfixed)(f))
}
func PNTrianglesfATI(pname uint32, param float32) {
  C.glowPNTrianglesfATI(gpPNTrianglesfATI, (C.GLenum)(pname), (C.GLfloat)(param))
}
func PNTrianglesiATI(pname uint32, param int32) {
  C.glowPNTrianglesiATI(gpPNTrianglesiATI, (C.GLenum)(pname), (C.GLint)(param))
}
func PassTexCoordATI(dst uint32, coord uint32, swizzle uint32) {
  C.glowPassTexCoordATI(gpPassTexCoordATI, (C.GLuint)(dst), (C.GLuint)(coord), (C.GLenum)(swizzle))
}
func PassThroughxOES(token int32) {
  C.glowPassThroughxOES(gpPassThroughxOES, (C.GLfixed)(token))
}
func PatchParameterfv(pname uint32, values *float32) {
  C.glowPatchParameterfv(gpPatchParameterfv, (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(values)))
}
func PatchParameteri(pname uint32, value int32) {
  C.glowPatchParameteri(gpPatchParameteri, (C.GLenum)(pname), (C.GLint)(value))
}
func PathColorGenNV(color uint32, genMode uint32, colorFormat uint32, coeffs *float32) {
  C.glowPathColorGenNV(gpPathColorGenNV, (C.GLenum)(color), (C.GLenum)(genMode), (C.GLenum)(colorFormat), (*C.GLfloat)(unsafe.Pointer(coeffs)))
}
func PathCommandsNV(path uint32, numCommands int32, commands *uint8, numCoords int32, coordType uint32, coords unsafe.Pointer) {
  C.glowPathCommandsNV(gpPathCommandsNV, (C.GLuint)(path), (C.GLsizei)(numCommands), (*C.GLubyte)(unsafe.Pointer(commands)), (C.GLsizei)(numCoords), (C.GLenum)(coordType), coords)
}
func PathCoordsNV(path uint32, numCoords int32, coordType uint32, coords unsafe.Pointer) {
  C.glowPathCoordsNV(gpPathCoordsNV, (C.GLuint)(path), (C.GLsizei)(numCoords), (C.GLenum)(coordType), coords)
}
func PathCoverDepthFuncNV(xfunc uint32) {
  C.glowPathCoverDepthFuncNV(gpPathCoverDepthFuncNV, (C.GLenum)(xfunc))
}
func PathDashArrayNV(path uint32, dashCount int32, dashArray *float32) {
  C.glowPathDashArrayNV(gpPathDashArrayNV, (C.GLuint)(path), (C.GLsizei)(dashCount), (*C.GLfloat)(unsafe.Pointer(dashArray)))
}
func PathFogGenNV(genMode uint32) {
  C.glowPathFogGenNV(gpPathFogGenNV, (C.GLenum)(genMode))
}
func PathGlyphRangeNV(firstPathName uint32, fontTarget uint32, fontName unsafe.Pointer, fontStyle uint32, firstGlyph uint32, numGlyphs int32, handleMissingGlyphs uint32, pathParameterTemplate uint32, emScale float32) {
  C.glowPathGlyphRangeNV(gpPathGlyphRangeNV, (C.GLuint)(firstPathName), (C.GLenum)(fontTarget), fontName, (C.GLbitfield)(fontStyle), (C.GLuint)(firstGlyph), (C.GLsizei)(numGlyphs), (C.GLenum)(handleMissingGlyphs), (C.GLuint)(pathParameterTemplate), (C.GLfloat)(emScale))
}
func PathGlyphsNV(firstPathName uint32, fontTarget uint32, fontName unsafe.Pointer, fontStyle uint32, numGlyphs int32, xtype uint32, charcodes unsafe.Pointer, handleMissingGlyphs uint32, pathParameterTemplate uint32, emScale float32) {
  C.glowPathGlyphsNV(gpPathGlyphsNV, (C.GLuint)(firstPathName), (C.GLenum)(fontTarget), fontName, (C.GLbitfield)(fontStyle), (C.GLsizei)(numGlyphs), (C.GLenum)(xtype), charcodes, (C.GLenum)(handleMissingGlyphs), (C.GLuint)(pathParameterTemplate), (C.GLfloat)(emScale))
}
func PathParameterfNV(path uint32, pname uint32, value float32) {
  C.glowPathParameterfNV(gpPathParameterfNV, (C.GLuint)(path), (C.GLenum)(pname), (C.GLfloat)(value))
}
func PathParameterfvNV(path uint32, pname uint32, value *float32) {
  C.glowPathParameterfvNV(gpPathParameterfvNV, (C.GLuint)(path), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(value)))
}
func PathParameteriNV(path uint32, pname uint32, value int32) {
  C.glowPathParameteriNV(gpPathParameteriNV, (C.GLuint)(path), (C.GLenum)(pname), (C.GLint)(value))
}
func PathParameterivNV(path uint32, pname uint32, value *int32) {
  C.glowPathParameterivNV(gpPathParameterivNV, (C.GLuint)(path), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(value)))
}
func PathStencilDepthOffsetNV(factor float32, units float32) {
  C.glowPathStencilDepthOffsetNV(gpPathStencilDepthOffsetNV, (C.GLfloat)(factor), (C.GLfloat)(units))
}
func PathStencilFuncNV(xfunc uint32, ref int32, mask uint32) {
  C.glowPathStencilFuncNV(gpPathStencilFuncNV, (C.GLenum)(xfunc), (C.GLint)(ref), (C.GLuint)(mask))
}
func PathStringNV(path uint32, format uint32, length int32, pathString unsafe.Pointer) {
  C.glowPathStringNV(gpPathStringNV, (C.GLuint)(path), (C.GLenum)(format), (C.GLsizei)(length), pathString)
}
func PathSubCommandsNV(path uint32, commandStart int32, commandsToDelete int32, numCommands int32, commands *uint8, numCoords int32, coordType uint32, coords unsafe.Pointer) {
  C.glowPathSubCommandsNV(gpPathSubCommandsNV, (C.GLuint)(path), (C.GLsizei)(commandStart), (C.GLsizei)(commandsToDelete), (C.GLsizei)(numCommands), (*C.GLubyte)(unsafe.Pointer(commands)), (C.GLsizei)(numCoords), (C.GLenum)(coordType), coords)
}
func PathSubCoordsNV(path uint32, coordStart int32, numCoords int32, coordType uint32, coords unsafe.Pointer) {
  C.glowPathSubCoordsNV(gpPathSubCoordsNV, (C.GLuint)(path), (C.GLsizei)(coordStart), (C.GLsizei)(numCoords), (C.GLenum)(coordType), coords)
}
func PathTexGenNV(texCoordSet uint32, genMode uint32, components int32, coeffs *float32) {
  C.glowPathTexGenNV(gpPathTexGenNV, (C.GLenum)(texCoordSet), (C.GLenum)(genMode), (C.GLint)(components), (*C.GLfloat)(unsafe.Pointer(coeffs)))
}
// pause transform feedback operations
func PauseTransformFeedback() {
  C.glowPauseTransformFeedback(gpPauseTransformFeedback)
}
func PauseTransformFeedbackNV() {
  C.glowPauseTransformFeedbackNV(gpPauseTransformFeedbackNV)
}
func PixelDataRangeNV(target uint32, length int32, pointer unsafe.Pointer) {
  C.glowPixelDataRangeNV(gpPixelDataRangeNV, (C.GLenum)(target), (C.GLsizei)(length), pointer)
}
func PixelMapx(xmap uint32, size int32, values *int32) {
  C.glowPixelMapx(gpPixelMapx, (C.GLenum)(xmap), (C.GLint)(size), (*C.GLfixed)(unsafe.Pointer(values)))
}
func PixelStoref(pname uint32, param float32) {
  C.glowPixelStoref(gpPixelStoref, (C.GLenum)(pname), (C.GLfloat)(param))
}
func PixelStorei(pname uint32, param int32) {
  C.glowPixelStorei(gpPixelStorei, (C.GLenum)(pname), (C.GLint)(param))
}
func PixelStorex(pname uint32, param int32) {
  C.glowPixelStorex(gpPixelStorex, (C.GLenum)(pname), (C.GLfixed)(param))
}
func PixelTexGenParameterfSGIS(pname uint32, param float32) {
  C.glowPixelTexGenParameterfSGIS(gpPixelTexGenParameterfSGIS, (C.GLenum)(pname), (C.GLfloat)(param))
}
func PixelTexGenParameterfvSGIS(pname uint32, params *float32) {
  C.glowPixelTexGenParameterfvSGIS(gpPixelTexGenParameterfvSGIS, (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func PixelTexGenParameteriSGIS(pname uint32, param int32) {
  C.glowPixelTexGenParameteriSGIS(gpPixelTexGenParameteriSGIS, (C.GLenum)(pname), (C.GLint)(param))
}
func PixelTexGenParameterivSGIS(pname uint32, params *int32) {
  C.glowPixelTexGenParameterivSGIS(gpPixelTexGenParameterivSGIS, (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func PixelTexGenSGIX(mode uint32) {
  C.glowPixelTexGenSGIX(gpPixelTexGenSGIX, (C.GLenum)(mode))
}
func PixelTransferxOES(pname uint32, param int32) {
  C.glowPixelTransferxOES(gpPixelTransferxOES, (C.GLenum)(pname), (C.GLfixed)(param))
}
func PixelTransformParameterfEXT(target uint32, pname uint32, param float32) {
  C.glowPixelTransformParameterfEXT(gpPixelTransformParameterfEXT, (C.GLenum)(target), (C.GLenum)(pname), (C.GLfloat)(param))
}
func PixelTransformParameterfvEXT(target uint32, pname uint32, params *float32) {
  C.glowPixelTransformParameterfvEXT(gpPixelTransformParameterfvEXT, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func PixelTransformParameteriEXT(target uint32, pname uint32, param int32) {
  C.glowPixelTransformParameteriEXT(gpPixelTransformParameteriEXT, (C.GLenum)(target), (C.GLenum)(pname), (C.GLint)(param))
}
func PixelTransformParameterivEXT(target uint32, pname uint32, params *int32) {
  C.glowPixelTransformParameterivEXT(gpPixelTransformParameterivEXT, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func PixelZoomxOES(xfactor int32, yfactor int32) {
  C.glowPixelZoomxOES(gpPixelZoomxOES, (C.GLfixed)(xfactor), (C.GLfixed)(yfactor))
}
func PointAlongPathNV(path uint32, startSegment int32, numSegments int32, distance float32, x *float32, y *float32, tangentX *float32, tangentY *float32) bool {
  ret := C.glowPointAlongPathNV(gpPointAlongPathNV, (C.GLuint)(path), (C.GLsizei)(startSegment), (C.GLsizei)(numSegments), (C.GLfloat)(distance), (*C.GLfloat)(unsafe.Pointer(x)), (*C.GLfloat)(unsafe.Pointer(y)), (*C.GLfloat)(unsafe.Pointer(tangentX)), (*C.GLfloat)(unsafe.Pointer(tangentY)))
  return ret == TRUE
}
func PointParameterf(pname uint32, param float32) {
  C.glowPointParameterf(gpPointParameterf, (C.GLenum)(pname), (C.GLfloat)(param))
}
func PointParameterfARB(pname uint32, param float32) {
  C.glowPointParameterfARB(gpPointParameterfARB, (C.GLenum)(pname), (C.GLfloat)(param))
}
func PointParameterfEXT(pname uint32, param float32) {
  C.glowPointParameterfEXT(gpPointParameterfEXT, (C.GLenum)(pname), (C.GLfloat)(param))
}
func PointParameterfSGIS(pname uint32, param float32) {
  C.glowPointParameterfSGIS(gpPointParameterfSGIS, (C.GLenum)(pname), (C.GLfloat)(param))
}
func PointParameterfv(pname uint32, params *float32) {
  C.glowPointParameterfv(gpPointParameterfv, (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func PointParameterfvARB(pname uint32, params *float32) {
  C.glowPointParameterfvARB(gpPointParameterfvARB, (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func PointParameterfvEXT(pname uint32, params *float32) {
  C.glowPointParameterfvEXT(gpPointParameterfvEXT, (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func PointParameterfvSGIS(pname uint32, params *float32) {
  C.glowPointParameterfvSGIS(gpPointParameterfvSGIS, (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func PointParameteri(pname uint32, param int32) {
  C.glowPointParameteri(gpPointParameteri, (C.GLenum)(pname), (C.GLint)(param))
}
func PointParameteriNV(pname uint32, param int32) {
  C.glowPointParameteriNV(gpPointParameteriNV, (C.GLenum)(pname), (C.GLint)(param))
}
func PointParameteriv(pname uint32, params *int32) {
  C.glowPointParameteriv(gpPointParameteriv, (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func PointParameterivNV(pname uint32, params *int32) {
  C.glowPointParameterivNV(gpPointParameterivNV, (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func PointParameterxOES(pname uint32, param int32) {
  C.glowPointParameterxOES(gpPointParameterxOES, (C.GLenum)(pname), (C.GLfixed)(param))
}
func PointParameterxvOES(pname uint32, params *int32) {
  C.glowPointParameterxvOES(gpPointParameterxvOES, (C.GLenum)(pname), (*C.GLfixed)(unsafe.Pointer(params)))
}
// specify the diameter of rasterized points
func PointSize(size float32) {
  C.glowPointSize(gpPointSize, (C.GLfloat)(size))
}
func PointSizexOES(size int32) {
  C.glowPointSizexOES(gpPointSizexOES, (C.GLfixed)(size))
}
func PollAsyncSGIX(markerp *uint32) int32 {
  ret := C.glowPollAsyncSGIX(gpPollAsyncSGIX, (*C.GLuint)(unsafe.Pointer(markerp)))
  return (int32)(ret)
}
func PollInstrumentsSGIX(marker_p *int32) int32 {
  ret := C.glowPollInstrumentsSGIX(gpPollInstrumentsSGIX, (*C.GLint)(unsafe.Pointer(marker_p)))
  return (int32)(ret)
}
// select a polygon rasterization mode
func PolygonMode(face uint32, mode uint32) {
  C.glowPolygonMode(gpPolygonMode, (C.GLenum)(face), (C.GLenum)(mode))
}
// set the scale and units used to calculate depth values
func PolygonOffset(factor float32, units float32) {
  C.glowPolygonOffset(gpPolygonOffset, (C.GLfloat)(factor), (C.GLfloat)(units))
}
func PolygonOffsetEXT(factor float32, bias float32) {
  C.glowPolygonOffsetEXT(gpPolygonOffsetEXT, (C.GLfloat)(factor), (C.GLfloat)(bias))
}
func PolygonOffsetxOES(factor int32, units int32) {
  C.glowPolygonOffsetxOES(gpPolygonOffsetxOES, (C.GLfixed)(factor), (C.GLfixed)(units))
}
// pop the active debug group
func PopDebugGroup() {
  C.glowPopDebugGroup(gpPopDebugGroup)
}
func PopDebugGroupKHR() {
  C.glowPopDebugGroupKHR(gpPopDebugGroupKHR)
}
func PopGroupMarkerEXT() {
  C.glowPopGroupMarkerEXT(gpPopGroupMarkerEXT)
}
func PresentFrameDualFillNV(video_slot uint32, minPresentTime uint64, beginPresentTimeId uint32, presentDurationId uint32, xtype uint32, target0 uint32, fill0 uint32, target1 uint32, fill1 uint32, target2 uint32, fill2 uint32, target3 uint32, fill3 uint32) {
  C.glowPresentFrameDualFillNV(gpPresentFrameDualFillNV, (C.GLuint)(video_slot), (C.GLuint64EXT)(minPresentTime), (C.GLuint)(beginPresentTimeId), (C.GLuint)(presentDurationId), (C.GLenum)(xtype), (C.GLenum)(target0), (C.GLuint)(fill0), (C.GLenum)(target1), (C.GLuint)(fill1), (C.GLenum)(target2), (C.GLuint)(fill2), (C.GLenum)(target3), (C.GLuint)(fill3))
}
func PresentFrameKeyedNV(video_slot uint32, minPresentTime uint64, beginPresentTimeId uint32, presentDurationId uint32, xtype uint32, target0 uint32, fill0 uint32, key0 uint32, target1 uint32, fill1 uint32, key1 uint32) {
  C.glowPresentFrameKeyedNV(gpPresentFrameKeyedNV, (C.GLuint)(video_slot), (C.GLuint64EXT)(minPresentTime), (C.GLuint)(beginPresentTimeId), (C.GLuint)(presentDurationId), (C.GLenum)(xtype), (C.GLenum)(target0), (C.GLuint)(fill0), (C.GLuint)(key0), (C.GLenum)(target1), (C.GLuint)(fill1), (C.GLuint)(key1))
}
// specify the primitive restart index
func PrimitiveRestartIndex(index uint32) {
  C.glowPrimitiveRestartIndex(gpPrimitiveRestartIndex, (C.GLuint)(index))
}
func PrimitiveRestartIndexNV(index uint32) {
  C.glowPrimitiveRestartIndexNV(gpPrimitiveRestartIndexNV, (C.GLuint)(index))
}
func PrimitiveRestartNV() {
  C.glowPrimitiveRestartNV(gpPrimitiveRestartNV)
}
func PrioritizeTexturesEXT(n int32, textures *uint32, priorities *float32) {
  C.glowPrioritizeTexturesEXT(gpPrioritizeTexturesEXT, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(textures)), (*C.GLclampf)(unsafe.Pointer(priorities)))
}
func PrioritizeTexturesxOES(n int32, textures *uint32, priorities *int32) {
  C.glowPrioritizeTexturesxOES(gpPrioritizeTexturesxOES, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(textures)), (*C.GLfixed)(unsafe.Pointer(priorities)))
}
// load a program object with a program binary
func ProgramBinary(program uint32, binaryFormat uint32, binary unsafe.Pointer, length int32) {
  C.glowProgramBinary(gpProgramBinary, (C.GLuint)(program), (C.GLenum)(binaryFormat), binary, (C.GLsizei)(length))
}
func ProgramBufferParametersIivNV(target uint32, bindingIndex uint32, wordIndex uint32, count int32, params *int32) {
  C.glowProgramBufferParametersIivNV(gpProgramBufferParametersIivNV, (C.GLenum)(target), (C.GLuint)(bindingIndex), (C.GLuint)(wordIndex), (C.GLsizei)(count), (*C.GLint)(unsafe.Pointer(params)))
}
func ProgramBufferParametersIuivNV(target uint32, bindingIndex uint32, wordIndex uint32, count int32, params *uint32) {
  C.glowProgramBufferParametersIuivNV(gpProgramBufferParametersIuivNV, (C.GLenum)(target), (C.GLuint)(bindingIndex), (C.GLuint)(wordIndex), (C.GLsizei)(count), (*C.GLuint)(unsafe.Pointer(params)))
}
func ProgramBufferParametersfvNV(target uint32, bindingIndex uint32, wordIndex uint32, count int32, params *float32) {
  C.glowProgramBufferParametersfvNV(gpProgramBufferParametersfvNV, (C.GLenum)(target), (C.GLuint)(bindingIndex), (C.GLuint)(wordIndex), (C.GLsizei)(count), (*C.GLfloat)(unsafe.Pointer(params)))
}
func ProgramEnvParameter4dARB(target uint32, index uint32, x float64, y float64, z float64, w float64) {
  C.glowProgramEnvParameter4dARB(gpProgramEnvParameter4dARB, (C.GLenum)(target), (C.GLuint)(index), (C.GLdouble)(x), (C.GLdouble)(y), (C.GLdouble)(z), (C.GLdouble)(w))
}
func ProgramEnvParameter4dvARB(target uint32, index uint32, params *float64) {
  C.glowProgramEnvParameter4dvARB(gpProgramEnvParameter4dvARB, (C.GLenum)(target), (C.GLuint)(index), (*C.GLdouble)(unsafe.Pointer(params)))
}
func ProgramEnvParameter4fARB(target uint32, index uint32, x float32, y float32, z float32, w float32) {
  C.glowProgramEnvParameter4fARB(gpProgramEnvParameter4fARB, (C.GLenum)(target), (C.GLuint)(index), (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z), (C.GLfloat)(w))
}
func ProgramEnvParameter4fvARB(target uint32, index uint32, params *float32) {
  C.glowProgramEnvParameter4fvARB(gpProgramEnvParameter4fvARB, (C.GLenum)(target), (C.GLuint)(index), (*C.GLfloat)(unsafe.Pointer(params)))
}
func ProgramEnvParameterI4iNV(target uint32, index uint32, x int32, y int32, z int32, w int32) {
  C.glowProgramEnvParameterI4iNV(gpProgramEnvParameterI4iNV, (C.GLenum)(target), (C.GLuint)(index), (C.GLint)(x), (C.GLint)(y), (C.GLint)(z), (C.GLint)(w))
}
func ProgramEnvParameterI4ivNV(target uint32, index uint32, params *int32) {
  C.glowProgramEnvParameterI4ivNV(gpProgramEnvParameterI4ivNV, (C.GLenum)(target), (C.GLuint)(index), (*C.GLint)(unsafe.Pointer(params)))
}
func ProgramEnvParameterI4uiNV(target uint32, index uint32, x uint32, y uint32, z uint32, w uint32) {
  C.glowProgramEnvParameterI4uiNV(gpProgramEnvParameterI4uiNV, (C.GLenum)(target), (C.GLuint)(index), (C.GLuint)(x), (C.GLuint)(y), (C.GLuint)(z), (C.GLuint)(w))
}
func ProgramEnvParameterI4uivNV(target uint32, index uint32, params *uint32) {
  C.glowProgramEnvParameterI4uivNV(gpProgramEnvParameterI4uivNV, (C.GLenum)(target), (C.GLuint)(index), (*C.GLuint)(unsafe.Pointer(params)))
}
func ProgramEnvParameters4fvEXT(target uint32, index uint32, count int32, params *float32) {
  C.glowProgramEnvParameters4fvEXT(gpProgramEnvParameters4fvEXT, (C.GLenum)(target), (C.GLuint)(index), (C.GLsizei)(count), (*C.GLfloat)(unsafe.Pointer(params)))
}
func ProgramEnvParametersI4ivNV(target uint32, index uint32, count int32, params *int32) {
  C.glowProgramEnvParametersI4ivNV(gpProgramEnvParametersI4ivNV, (C.GLenum)(target), (C.GLuint)(index), (C.GLsizei)(count), (*C.GLint)(unsafe.Pointer(params)))
}
func ProgramEnvParametersI4uivNV(target uint32, index uint32, count int32, params *uint32) {
  C.glowProgramEnvParametersI4uivNV(gpProgramEnvParametersI4uivNV, (C.GLenum)(target), (C.GLuint)(index), (C.GLsizei)(count), (*C.GLuint)(unsafe.Pointer(params)))
}
func ProgramLocalParameter4dARB(target uint32, index uint32, x float64, y float64, z float64, w float64) {
  C.glowProgramLocalParameter4dARB(gpProgramLocalParameter4dARB, (C.GLenum)(target), (C.GLuint)(index), (C.GLdouble)(x), (C.GLdouble)(y), (C.GLdouble)(z), (C.GLdouble)(w))
}
func ProgramLocalParameter4dvARB(target uint32, index uint32, params *float64) {
  C.glowProgramLocalParameter4dvARB(gpProgramLocalParameter4dvARB, (C.GLenum)(target), (C.GLuint)(index), (*C.GLdouble)(unsafe.Pointer(params)))
}
func ProgramLocalParameter4fARB(target uint32, index uint32, x float32, y float32, z float32, w float32) {
  C.glowProgramLocalParameter4fARB(gpProgramLocalParameter4fARB, (C.GLenum)(target), (C.GLuint)(index), (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z), (C.GLfloat)(w))
}
func ProgramLocalParameter4fvARB(target uint32, index uint32, params *float32) {
  C.glowProgramLocalParameter4fvARB(gpProgramLocalParameter4fvARB, (C.GLenum)(target), (C.GLuint)(index), (*C.GLfloat)(unsafe.Pointer(params)))
}
func ProgramLocalParameterI4iNV(target uint32, index uint32, x int32, y int32, z int32, w int32) {
  C.glowProgramLocalParameterI4iNV(gpProgramLocalParameterI4iNV, (C.GLenum)(target), (C.GLuint)(index), (C.GLint)(x), (C.GLint)(y), (C.GLint)(z), (C.GLint)(w))
}
func ProgramLocalParameterI4ivNV(target uint32, index uint32, params *int32) {
  C.glowProgramLocalParameterI4ivNV(gpProgramLocalParameterI4ivNV, (C.GLenum)(target), (C.GLuint)(index), (*C.GLint)(unsafe.Pointer(params)))
}
func ProgramLocalParameterI4uiNV(target uint32, index uint32, x uint32, y uint32, z uint32, w uint32) {
  C.glowProgramLocalParameterI4uiNV(gpProgramLocalParameterI4uiNV, (C.GLenum)(target), (C.GLuint)(index), (C.GLuint)(x), (C.GLuint)(y), (C.GLuint)(z), (C.GLuint)(w))
}
func ProgramLocalParameterI4uivNV(target uint32, index uint32, params *uint32) {
  C.glowProgramLocalParameterI4uivNV(gpProgramLocalParameterI4uivNV, (C.GLenum)(target), (C.GLuint)(index), (*C.GLuint)(unsafe.Pointer(params)))
}
func ProgramLocalParameters4fvEXT(target uint32, index uint32, count int32, params *float32) {
  C.glowProgramLocalParameters4fvEXT(gpProgramLocalParameters4fvEXT, (C.GLenum)(target), (C.GLuint)(index), (C.GLsizei)(count), (*C.GLfloat)(unsafe.Pointer(params)))
}
func ProgramLocalParametersI4ivNV(target uint32, index uint32, count int32, params *int32) {
  C.glowProgramLocalParametersI4ivNV(gpProgramLocalParametersI4ivNV, (C.GLenum)(target), (C.GLuint)(index), (C.GLsizei)(count), (*C.GLint)(unsafe.Pointer(params)))
}
func ProgramLocalParametersI4uivNV(target uint32, index uint32, count int32, params *uint32) {
  C.glowProgramLocalParametersI4uivNV(gpProgramLocalParametersI4uivNV, (C.GLenum)(target), (C.GLuint)(index), (C.GLsizei)(count), (*C.GLuint)(unsafe.Pointer(params)))
}
func ProgramNamedParameter4dNV(id uint32, len int32, name *uint8, x float64, y float64, z float64, w float64) {
  C.glowProgramNamedParameter4dNV(gpProgramNamedParameter4dNV, (C.GLuint)(id), (C.GLsizei)(len), (*C.GLubyte)(unsafe.Pointer(name)), (C.GLdouble)(x), (C.GLdouble)(y), (C.GLdouble)(z), (C.GLdouble)(w))
}
func ProgramNamedParameter4dvNV(id uint32, len int32, name *uint8, v *float64) {
  C.glowProgramNamedParameter4dvNV(gpProgramNamedParameter4dvNV, (C.GLuint)(id), (C.GLsizei)(len), (*C.GLubyte)(unsafe.Pointer(name)), (*C.GLdouble)(unsafe.Pointer(v)))
}
func ProgramNamedParameter4fNV(id uint32, len int32, name *uint8, x float32, y float32, z float32, w float32) {
  C.glowProgramNamedParameter4fNV(gpProgramNamedParameter4fNV, (C.GLuint)(id), (C.GLsizei)(len), (*C.GLubyte)(unsafe.Pointer(name)), (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z), (C.GLfloat)(w))
}
func ProgramNamedParameter4fvNV(id uint32, len int32, name *uint8, v *float32) {
  C.glowProgramNamedParameter4fvNV(gpProgramNamedParameter4fvNV, (C.GLuint)(id), (C.GLsizei)(len), (*C.GLubyte)(unsafe.Pointer(name)), (*C.GLfloat)(unsafe.Pointer(v)))
}
func ProgramParameter4dNV(target uint32, index uint32, x float64, y float64, z float64, w float64) {
  C.glowProgramParameter4dNV(gpProgramParameter4dNV, (C.GLenum)(target), (C.GLuint)(index), (C.GLdouble)(x), (C.GLdouble)(y), (C.GLdouble)(z), (C.GLdouble)(w))
}
func ProgramParameter4dvNV(target uint32, index uint32, v *float64) {
  C.glowProgramParameter4dvNV(gpProgramParameter4dvNV, (C.GLenum)(target), (C.GLuint)(index), (*C.GLdouble)(unsafe.Pointer(v)))
}
func ProgramParameter4fNV(target uint32, index uint32, x float32, y float32, z float32, w float32) {
  C.glowProgramParameter4fNV(gpProgramParameter4fNV, (C.GLenum)(target), (C.GLuint)(index), (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z), (C.GLfloat)(w))
}
func ProgramParameter4fvNV(target uint32, index uint32, v *float32) {
  C.glowProgramParameter4fvNV(gpProgramParameter4fvNV, (C.GLenum)(target), (C.GLuint)(index), (*C.GLfloat)(unsafe.Pointer(v)))
}
func ProgramParameteri(program uint32, pname uint32, value int32) {
  C.glowProgramParameteri(gpProgramParameteri, (C.GLuint)(program), (C.GLenum)(pname), (C.GLint)(value))
}
func ProgramParameteriARB(program uint32, pname uint32, value int32) {
  C.glowProgramParameteriARB(gpProgramParameteriARB, (C.GLuint)(program), (C.GLenum)(pname), (C.GLint)(value))
}
func ProgramParameteriEXT(program uint32, pname uint32, value int32) {
  C.glowProgramParameteriEXT(gpProgramParameteriEXT, (C.GLuint)(program), (C.GLenum)(pname), (C.GLint)(value))
}
func ProgramParameters4dvNV(target uint32, index uint32, count int32, v *float64) {
  C.glowProgramParameters4dvNV(gpProgramParameters4dvNV, (C.GLenum)(target), (C.GLuint)(index), (C.GLsizei)(count), (*C.GLdouble)(unsafe.Pointer(v)))
}
func ProgramParameters4fvNV(target uint32, index uint32, count int32, v *float32) {
  C.glowProgramParameters4fvNV(gpProgramParameters4fvNV, (C.GLenum)(target), (C.GLuint)(index), (C.GLsizei)(count), (*C.GLfloat)(unsafe.Pointer(v)))
}
func ProgramStringARB(target uint32, format uint32, len int32, xstring unsafe.Pointer) {
  C.glowProgramStringARB(gpProgramStringARB, (C.GLenum)(target), (C.GLenum)(format), (C.GLsizei)(len), xstring)
}
func ProgramSubroutineParametersuivNV(target uint32, count int32, params *uint32) {
  C.glowProgramSubroutineParametersuivNV(gpProgramSubroutineParametersuivNV, (C.GLenum)(target), (C.GLsizei)(count), (*C.GLuint)(unsafe.Pointer(params)))
}
func ProgramUniform1d(program uint32, location int32, v0 float64) {
  C.glowProgramUniform1d(gpProgramUniform1d, (C.GLuint)(program), (C.GLint)(location), (C.GLdouble)(v0))
}
func ProgramUniform1dEXT(program uint32, location int32, x float64) {
  C.glowProgramUniform1dEXT(gpProgramUniform1dEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLdouble)(x))
}
func ProgramUniform1dv(program uint32, location int32, count int32, value *float64) {
  C.glowProgramUniform1dv(gpProgramUniform1dv, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLdouble)(unsafe.Pointer(value)))
}
func ProgramUniform1dvEXT(program uint32, location int32, count int32, value *float64) {
  C.glowProgramUniform1dvEXT(gpProgramUniform1dvEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLdouble)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for a specified program object
func ProgramUniform1f(program uint32, location int32, v0 float32) {
  C.glowProgramUniform1f(gpProgramUniform1f, (C.GLuint)(program), (C.GLint)(location), (C.GLfloat)(v0))
}
func ProgramUniform1fEXT(program uint32, location int32, v0 float32) {
  C.glowProgramUniform1fEXT(gpProgramUniform1fEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLfloat)(v0))
}
// Specify the value of a uniform variable for a specified program object
func ProgramUniform1fv(program uint32, location int32, count int32, value *float32) {
  C.glowProgramUniform1fv(gpProgramUniform1fv, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLfloat)(unsafe.Pointer(value)))
}
func ProgramUniform1fvEXT(program uint32, location int32, count int32, value *float32) {
  C.glowProgramUniform1fvEXT(gpProgramUniform1fvEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLfloat)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for a specified program object
func ProgramUniform1i(program uint32, location int32, v0 int32) {
  C.glowProgramUniform1i(gpProgramUniform1i, (C.GLuint)(program), (C.GLint)(location), (C.GLint)(v0))
}
func ProgramUniform1i64NV(program uint32, location int32, x int64) {
  C.glowProgramUniform1i64NV(gpProgramUniform1i64NV, (C.GLuint)(program), (C.GLint)(location), (C.GLint64EXT)(x))
}
func ProgramUniform1i64vNV(program uint32, location int32, count int32, value *int64) {
  C.glowProgramUniform1i64vNV(gpProgramUniform1i64vNV, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLint64EXT)(unsafe.Pointer(value)))
}
func ProgramUniform1iEXT(program uint32, location int32, v0 int32) {
  C.glowProgramUniform1iEXT(gpProgramUniform1iEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLint)(v0))
}
// Specify the value of a uniform variable for a specified program object
func ProgramUniform1iv(program uint32, location int32, count int32, value *int32) {
  C.glowProgramUniform1iv(gpProgramUniform1iv, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLint)(unsafe.Pointer(value)))
}
func ProgramUniform1ivEXT(program uint32, location int32, count int32, value *int32) {
  C.glowProgramUniform1ivEXT(gpProgramUniform1ivEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLint)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for a specified program object
func ProgramUniform1ui(program uint32, location int32, v0 uint32) {
  C.glowProgramUniform1ui(gpProgramUniform1ui, (C.GLuint)(program), (C.GLint)(location), (C.GLuint)(v0))
}
func ProgramUniform1ui64NV(program uint32, location int32, x uint64) {
  C.glowProgramUniform1ui64NV(gpProgramUniform1ui64NV, (C.GLuint)(program), (C.GLint)(location), (C.GLuint64EXT)(x))
}
func ProgramUniform1ui64vNV(program uint32, location int32, count int32, value *uint64) {
  C.glowProgramUniform1ui64vNV(gpProgramUniform1ui64vNV, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLuint64EXT)(unsafe.Pointer(value)))
}
func ProgramUniform1uiEXT(program uint32, location int32, v0 uint32) {
  C.glowProgramUniform1uiEXT(gpProgramUniform1uiEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLuint)(v0))
}
// Specify the value of a uniform variable for a specified program object
func ProgramUniform1uiv(program uint32, location int32, count int32, value *uint32) {
  C.glowProgramUniform1uiv(gpProgramUniform1uiv, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLuint)(unsafe.Pointer(value)))
}
func ProgramUniform1uivEXT(program uint32, location int32, count int32, value *uint32) {
  C.glowProgramUniform1uivEXT(gpProgramUniform1uivEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLuint)(unsafe.Pointer(value)))
}
func ProgramUniform2d(program uint32, location int32, v0 float64, v1 float64) {
  C.glowProgramUniform2d(gpProgramUniform2d, (C.GLuint)(program), (C.GLint)(location), (C.GLdouble)(v0), (C.GLdouble)(v1))
}
func ProgramUniform2dEXT(program uint32, location int32, x float64, y float64) {
  C.glowProgramUniform2dEXT(gpProgramUniform2dEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLdouble)(x), (C.GLdouble)(y))
}
func ProgramUniform2dv(program uint32, location int32, count int32, value *float64) {
  C.glowProgramUniform2dv(gpProgramUniform2dv, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLdouble)(unsafe.Pointer(value)))
}
func ProgramUniform2dvEXT(program uint32, location int32, count int32, value *float64) {
  C.glowProgramUniform2dvEXT(gpProgramUniform2dvEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLdouble)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for a specified program object
func ProgramUniform2f(program uint32, location int32, v0 float32, v1 float32) {
  C.glowProgramUniform2f(gpProgramUniform2f, (C.GLuint)(program), (C.GLint)(location), (C.GLfloat)(v0), (C.GLfloat)(v1))
}
func ProgramUniform2fEXT(program uint32, location int32, v0 float32, v1 float32) {
  C.glowProgramUniform2fEXT(gpProgramUniform2fEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLfloat)(v0), (C.GLfloat)(v1))
}
// Specify the value of a uniform variable for a specified program object
func ProgramUniform2fv(program uint32, location int32, count int32, value *float32) {
  C.glowProgramUniform2fv(gpProgramUniform2fv, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLfloat)(unsafe.Pointer(value)))
}
func ProgramUniform2fvEXT(program uint32, location int32, count int32, value *float32) {
  C.glowProgramUniform2fvEXT(gpProgramUniform2fvEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLfloat)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for a specified program object
func ProgramUniform2i(program uint32, location int32, v0 int32, v1 int32) {
  C.glowProgramUniform2i(gpProgramUniform2i, (C.GLuint)(program), (C.GLint)(location), (C.GLint)(v0), (C.GLint)(v1))
}
func ProgramUniform2i64NV(program uint32, location int32, x int64, y int64) {
  C.glowProgramUniform2i64NV(gpProgramUniform2i64NV, (C.GLuint)(program), (C.GLint)(location), (C.GLint64EXT)(x), (C.GLint64EXT)(y))
}
func ProgramUniform2i64vNV(program uint32, location int32, count int32, value *int64) {
  C.glowProgramUniform2i64vNV(gpProgramUniform2i64vNV, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLint64EXT)(unsafe.Pointer(value)))
}
func ProgramUniform2iEXT(program uint32, location int32, v0 int32, v1 int32) {
  C.glowProgramUniform2iEXT(gpProgramUniform2iEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLint)(v0), (C.GLint)(v1))
}
// Specify the value of a uniform variable for a specified program object
func ProgramUniform2iv(program uint32, location int32, count int32, value *int32) {
  C.glowProgramUniform2iv(gpProgramUniform2iv, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLint)(unsafe.Pointer(value)))
}
func ProgramUniform2ivEXT(program uint32, location int32, count int32, value *int32) {
  C.glowProgramUniform2ivEXT(gpProgramUniform2ivEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLint)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for a specified program object
func ProgramUniform2ui(program uint32, location int32, v0 uint32, v1 uint32) {
  C.glowProgramUniform2ui(gpProgramUniform2ui, (C.GLuint)(program), (C.GLint)(location), (C.GLuint)(v0), (C.GLuint)(v1))
}
func ProgramUniform2ui64NV(program uint32, location int32, x uint64, y uint64) {
  C.glowProgramUniform2ui64NV(gpProgramUniform2ui64NV, (C.GLuint)(program), (C.GLint)(location), (C.GLuint64EXT)(x), (C.GLuint64EXT)(y))
}
func ProgramUniform2ui64vNV(program uint32, location int32, count int32, value *uint64) {
  C.glowProgramUniform2ui64vNV(gpProgramUniform2ui64vNV, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLuint64EXT)(unsafe.Pointer(value)))
}
func ProgramUniform2uiEXT(program uint32, location int32, v0 uint32, v1 uint32) {
  C.glowProgramUniform2uiEXT(gpProgramUniform2uiEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLuint)(v0), (C.GLuint)(v1))
}
// Specify the value of a uniform variable for a specified program object
func ProgramUniform2uiv(program uint32, location int32, count int32, value *uint32) {
  C.glowProgramUniform2uiv(gpProgramUniform2uiv, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLuint)(unsafe.Pointer(value)))
}
func ProgramUniform2uivEXT(program uint32, location int32, count int32, value *uint32) {
  C.glowProgramUniform2uivEXT(gpProgramUniform2uivEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLuint)(unsafe.Pointer(value)))
}
func ProgramUniform3d(program uint32, location int32, v0 float64, v1 float64, v2 float64) {
  C.glowProgramUniform3d(gpProgramUniform3d, (C.GLuint)(program), (C.GLint)(location), (C.GLdouble)(v0), (C.GLdouble)(v1), (C.GLdouble)(v2))
}
func ProgramUniform3dEXT(program uint32, location int32, x float64, y float64, z float64) {
  C.glowProgramUniform3dEXT(gpProgramUniform3dEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLdouble)(x), (C.GLdouble)(y), (C.GLdouble)(z))
}
func ProgramUniform3dv(program uint32, location int32, count int32, value *float64) {
  C.glowProgramUniform3dv(gpProgramUniform3dv, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLdouble)(unsafe.Pointer(value)))
}
func ProgramUniform3dvEXT(program uint32, location int32, count int32, value *float64) {
  C.glowProgramUniform3dvEXT(gpProgramUniform3dvEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLdouble)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for a specified program object
func ProgramUniform3f(program uint32, location int32, v0 float32, v1 float32, v2 float32) {
  C.glowProgramUniform3f(gpProgramUniform3f, (C.GLuint)(program), (C.GLint)(location), (C.GLfloat)(v0), (C.GLfloat)(v1), (C.GLfloat)(v2))
}
func ProgramUniform3fEXT(program uint32, location int32, v0 float32, v1 float32, v2 float32) {
  C.glowProgramUniform3fEXT(gpProgramUniform3fEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLfloat)(v0), (C.GLfloat)(v1), (C.GLfloat)(v2))
}
// Specify the value of a uniform variable for a specified program object
func ProgramUniform3fv(program uint32, location int32, count int32, value *float32) {
  C.glowProgramUniform3fv(gpProgramUniform3fv, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLfloat)(unsafe.Pointer(value)))
}
func ProgramUniform3fvEXT(program uint32, location int32, count int32, value *float32) {
  C.glowProgramUniform3fvEXT(gpProgramUniform3fvEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLfloat)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for a specified program object
func ProgramUniform3i(program uint32, location int32, v0 int32, v1 int32, v2 int32) {
  C.glowProgramUniform3i(gpProgramUniform3i, (C.GLuint)(program), (C.GLint)(location), (C.GLint)(v0), (C.GLint)(v1), (C.GLint)(v2))
}
func ProgramUniform3i64NV(program uint32, location int32, x int64, y int64, z int64) {
  C.glowProgramUniform3i64NV(gpProgramUniform3i64NV, (C.GLuint)(program), (C.GLint)(location), (C.GLint64EXT)(x), (C.GLint64EXT)(y), (C.GLint64EXT)(z))
}
func ProgramUniform3i64vNV(program uint32, location int32, count int32, value *int64) {
  C.glowProgramUniform3i64vNV(gpProgramUniform3i64vNV, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLint64EXT)(unsafe.Pointer(value)))
}
func ProgramUniform3iEXT(program uint32, location int32, v0 int32, v1 int32, v2 int32) {
  C.glowProgramUniform3iEXT(gpProgramUniform3iEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLint)(v0), (C.GLint)(v1), (C.GLint)(v2))
}
// Specify the value of a uniform variable for a specified program object
func ProgramUniform3iv(program uint32, location int32, count int32, value *int32) {
  C.glowProgramUniform3iv(gpProgramUniform3iv, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLint)(unsafe.Pointer(value)))
}
func ProgramUniform3ivEXT(program uint32, location int32, count int32, value *int32) {
  C.glowProgramUniform3ivEXT(gpProgramUniform3ivEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLint)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for a specified program object
func ProgramUniform3ui(program uint32, location int32, v0 uint32, v1 uint32, v2 uint32) {
  C.glowProgramUniform3ui(gpProgramUniform3ui, (C.GLuint)(program), (C.GLint)(location), (C.GLuint)(v0), (C.GLuint)(v1), (C.GLuint)(v2))
}
func ProgramUniform3ui64NV(program uint32, location int32, x uint64, y uint64, z uint64) {
  C.glowProgramUniform3ui64NV(gpProgramUniform3ui64NV, (C.GLuint)(program), (C.GLint)(location), (C.GLuint64EXT)(x), (C.GLuint64EXT)(y), (C.GLuint64EXT)(z))
}
func ProgramUniform3ui64vNV(program uint32, location int32, count int32, value *uint64) {
  C.glowProgramUniform3ui64vNV(gpProgramUniform3ui64vNV, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLuint64EXT)(unsafe.Pointer(value)))
}
func ProgramUniform3uiEXT(program uint32, location int32, v0 uint32, v1 uint32, v2 uint32) {
  C.glowProgramUniform3uiEXT(gpProgramUniform3uiEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLuint)(v0), (C.GLuint)(v1), (C.GLuint)(v2))
}
// Specify the value of a uniform variable for a specified program object
func ProgramUniform3uiv(program uint32, location int32, count int32, value *uint32) {
  C.glowProgramUniform3uiv(gpProgramUniform3uiv, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLuint)(unsafe.Pointer(value)))
}
func ProgramUniform3uivEXT(program uint32, location int32, count int32, value *uint32) {
  C.glowProgramUniform3uivEXT(gpProgramUniform3uivEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLuint)(unsafe.Pointer(value)))
}
func ProgramUniform4d(program uint32, location int32, v0 float64, v1 float64, v2 float64, v3 float64) {
  C.glowProgramUniform4d(gpProgramUniform4d, (C.GLuint)(program), (C.GLint)(location), (C.GLdouble)(v0), (C.GLdouble)(v1), (C.GLdouble)(v2), (C.GLdouble)(v3))
}
func ProgramUniform4dEXT(program uint32, location int32, x float64, y float64, z float64, w float64) {
  C.glowProgramUniform4dEXT(gpProgramUniform4dEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLdouble)(x), (C.GLdouble)(y), (C.GLdouble)(z), (C.GLdouble)(w))
}
func ProgramUniform4dv(program uint32, location int32, count int32, value *float64) {
  C.glowProgramUniform4dv(gpProgramUniform4dv, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLdouble)(unsafe.Pointer(value)))
}
func ProgramUniform4dvEXT(program uint32, location int32, count int32, value *float64) {
  C.glowProgramUniform4dvEXT(gpProgramUniform4dvEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLdouble)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for a specified program object
func ProgramUniform4f(program uint32, location int32, v0 float32, v1 float32, v2 float32, v3 float32) {
  C.glowProgramUniform4f(gpProgramUniform4f, (C.GLuint)(program), (C.GLint)(location), (C.GLfloat)(v0), (C.GLfloat)(v1), (C.GLfloat)(v2), (C.GLfloat)(v3))
}
func ProgramUniform4fEXT(program uint32, location int32, v0 float32, v1 float32, v2 float32, v3 float32) {
  C.glowProgramUniform4fEXT(gpProgramUniform4fEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLfloat)(v0), (C.GLfloat)(v1), (C.GLfloat)(v2), (C.GLfloat)(v3))
}
// Specify the value of a uniform variable for a specified program object
func ProgramUniform4fv(program uint32, location int32, count int32, value *float32) {
  C.glowProgramUniform4fv(gpProgramUniform4fv, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLfloat)(unsafe.Pointer(value)))
}
func ProgramUniform4fvEXT(program uint32, location int32, count int32, value *float32) {
  C.glowProgramUniform4fvEXT(gpProgramUniform4fvEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLfloat)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for a specified program object
func ProgramUniform4i(program uint32, location int32, v0 int32, v1 int32, v2 int32, v3 int32) {
  C.glowProgramUniform4i(gpProgramUniform4i, (C.GLuint)(program), (C.GLint)(location), (C.GLint)(v0), (C.GLint)(v1), (C.GLint)(v2), (C.GLint)(v3))
}
func ProgramUniform4i64NV(program uint32, location int32, x int64, y int64, z int64, w int64) {
  C.glowProgramUniform4i64NV(gpProgramUniform4i64NV, (C.GLuint)(program), (C.GLint)(location), (C.GLint64EXT)(x), (C.GLint64EXT)(y), (C.GLint64EXT)(z), (C.GLint64EXT)(w))
}
func ProgramUniform4i64vNV(program uint32, location int32, count int32, value *int64) {
  C.glowProgramUniform4i64vNV(gpProgramUniform4i64vNV, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLint64EXT)(unsafe.Pointer(value)))
}
func ProgramUniform4iEXT(program uint32, location int32, v0 int32, v1 int32, v2 int32, v3 int32) {
  C.glowProgramUniform4iEXT(gpProgramUniform4iEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLint)(v0), (C.GLint)(v1), (C.GLint)(v2), (C.GLint)(v3))
}
// Specify the value of a uniform variable for a specified program object
func ProgramUniform4iv(program uint32, location int32, count int32, value *int32) {
  C.glowProgramUniform4iv(gpProgramUniform4iv, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLint)(unsafe.Pointer(value)))
}
func ProgramUniform4ivEXT(program uint32, location int32, count int32, value *int32) {
  C.glowProgramUniform4ivEXT(gpProgramUniform4ivEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLint)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for a specified program object
func ProgramUniform4ui(program uint32, location int32, v0 uint32, v1 uint32, v2 uint32, v3 uint32) {
  C.glowProgramUniform4ui(gpProgramUniform4ui, (C.GLuint)(program), (C.GLint)(location), (C.GLuint)(v0), (C.GLuint)(v1), (C.GLuint)(v2), (C.GLuint)(v3))
}
func ProgramUniform4ui64NV(program uint32, location int32, x uint64, y uint64, z uint64, w uint64) {
  C.glowProgramUniform4ui64NV(gpProgramUniform4ui64NV, (C.GLuint)(program), (C.GLint)(location), (C.GLuint64EXT)(x), (C.GLuint64EXT)(y), (C.GLuint64EXT)(z), (C.GLuint64EXT)(w))
}
func ProgramUniform4ui64vNV(program uint32, location int32, count int32, value *uint64) {
  C.glowProgramUniform4ui64vNV(gpProgramUniform4ui64vNV, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLuint64EXT)(unsafe.Pointer(value)))
}
func ProgramUniform4uiEXT(program uint32, location int32, v0 uint32, v1 uint32, v2 uint32, v3 uint32) {
  C.glowProgramUniform4uiEXT(gpProgramUniform4uiEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLuint)(v0), (C.GLuint)(v1), (C.GLuint)(v2), (C.GLuint)(v3))
}
// Specify the value of a uniform variable for a specified program object
func ProgramUniform4uiv(program uint32, location int32, count int32, value *uint32) {
  C.glowProgramUniform4uiv(gpProgramUniform4uiv, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLuint)(unsafe.Pointer(value)))
}
func ProgramUniform4uivEXT(program uint32, location int32, count int32, value *uint32) {
  C.glowProgramUniform4uivEXT(gpProgramUniform4uivEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLuint)(unsafe.Pointer(value)))
}
func ProgramUniformHandleui64ARB(program uint32, location int32, value uint64) {
  C.glowProgramUniformHandleui64ARB(gpProgramUniformHandleui64ARB, (C.GLuint)(program), (C.GLint)(location), (C.GLuint64)(value))
}
func ProgramUniformHandleui64NV(program uint32, location int32, value uint64) {
  C.glowProgramUniformHandleui64NV(gpProgramUniformHandleui64NV, (C.GLuint)(program), (C.GLint)(location), (C.GLuint64)(value))
}
func ProgramUniformHandleui64vARB(program uint32, location int32, count int32, values *uint64) {
  C.glowProgramUniformHandleui64vARB(gpProgramUniformHandleui64vARB, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLuint64)(unsafe.Pointer(values)))
}
func ProgramUniformHandleui64vNV(program uint32, location int32, count int32, values *uint64) {
  C.glowProgramUniformHandleui64vNV(gpProgramUniformHandleui64vNV, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLuint64)(unsafe.Pointer(values)))
}
func ProgramUniformMatrix2dv(program uint32, location int32, count int32, transpose bool, value *float64) {
  C.glowProgramUniformMatrix2dv(gpProgramUniformMatrix2dv, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLdouble)(unsafe.Pointer(value)))
}
func ProgramUniformMatrix2dvEXT(program uint32, location int32, count int32, transpose bool, value *float64) {
  C.glowProgramUniformMatrix2dvEXT(gpProgramUniformMatrix2dvEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLdouble)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for a specified program object
func ProgramUniformMatrix2fv(program uint32, location int32, count int32, transpose bool, value *float32) {
  C.glowProgramUniformMatrix2fv(gpProgramUniformMatrix2fv, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLfloat)(unsafe.Pointer(value)))
}
func ProgramUniformMatrix2fvEXT(program uint32, location int32, count int32, transpose bool, value *float32) {
  C.glowProgramUniformMatrix2fvEXT(gpProgramUniformMatrix2fvEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLfloat)(unsafe.Pointer(value)))
}
func ProgramUniformMatrix2x3dv(program uint32, location int32, count int32, transpose bool, value *float64) {
  C.glowProgramUniformMatrix2x3dv(gpProgramUniformMatrix2x3dv, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLdouble)(unsafe.Pointer(value)))
}
func ProgramUniformMatrix2x3dvEXT(program uint32, location int32, count int32, transpose bool, value *float64) {
  C.glowProgramUniformMatrix2x3dvEXT(gpProgramUniformMatrix2x3dvEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLdouble)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for a specified program object
func ProgramUniformMatrix2x3fv(program uint32, location int32, count int32, transpose bool, value *float32) {
  C.glowProgramUniformMatrix2x3fv(gpProgramUniformMatrix2x3fv, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLfloat)(unsafe.Pointer(value)))
}
func ProgramUniformMatrix2x3fvEXT(program uint32, location int32, count int32, transpose bool, value *float32) {
  C.glowProgramUniformMatrix2x3fvEXT(gpProgramUniformMatrix2x3fvEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLfloat)(unsafe.Pointer(value)))
}
func ProgramUniformMatrix2x4dv(program uint32, location int32, count int32, transpose bool, value *float64) {
  C.glowProgramUniformMatrix2x4dv(gpProgramUniformMatrix2x4dv, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLdouble)(unsafe.Pointer(value)))
}
func ProgramUniformMatrix2x4dvEXT(program uint32, location int32, count int32, transpose bool, value *float64) {
  C.glowProgramUniformMatrix2x4dvEXT(gpProgramUniformMatrix2x4dvEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLdouble)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for a specified program object
func ProgramUniformMatrix2x4fv(program uint32, location int32, count int32, transpose bool, value *float32) {
  C.glowProgramUniformMatrix2x4fv(gpProgramUniformMatrix2x4fv, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLfloat)(unsafe.Pointer(value)))
}
func ProgramUniformMatrix2x4fvEXT(program uint32, location int32, count int32, transpose bool, value *float32) {
  C.glowProgramUniformMatrix2x4fvEXT(gpProgramUniformMatrix2x4fvEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLfloat)(unsafe.Pointer(value)))
}
func ProgramUniformMatrix3dv(program uint32, location int32, count int32, transpose bool, value *float64) {
  C.glowProgramUniformMatrix3dv(gpProgramUniformMatrix3dv, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLdouble)(unsafe.Pointer(value)))
}
func ProgramUniformMatrix3dvEXT(program uint32, location int32, count int32, transpose bool, value *float64) {
  C.glowProgramUniformMatrix3dvEXT(gpProgramUniformMatrix3dvEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLdouble)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for a specified program object
func ProgramUniformMatrix3fv(program uint32, location int32, count int32, transpose bool, value *float32) {
  C.glowProgramUniformMatrix3fv(gpProgramUniformMatrix3fv, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLfloat)(unsafe.Pointer(value)))
}
func ProgramUniformMatrix3fvEXT(program uint32, location int32, count int32, transpose bool, value *float32) {
  C.glowProgramUniformMatrix3fvEXT(gpProgramUniformMatrix3fvEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLfloat)(unsafe.Pointer(value)))
}
func ProgramUniformMatrix3x2dv(program uint32, location int32, count int32, transpose bool, value *float64) {
  C.glowProgramUniformMatrix3x2dv(gpProgramUniformMatrix3x2dv, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLdouble)(unsafe.Pointer(value)))
}
func ProgramUniformMatrix3x2dvEXT(program uint32, location int32, count int32, transpose bool, value *float64) {
  C.glowProgramUniformMatrix3x2dvEXT(gpProgramUniformMatrix3x2dvEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLdouble)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for a specified program object
func ProgramUniformMatrix3x2fv(program uint32, location int32, count int32, transpose bool, value *float32) {
  C.glowProgramUniformMatrix3x2fv(gpProgramUniformMatrix3x2fv, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLfloat)(unsafe.Pointer(value)))
}
func ProgramUniformMatrix3x2fvEXT(program uint32, location int32, count int32, transpose bool, value *float32) {
  C.glowProgramUniformMatrix3x2fvEXT(gpProgramUniformMatrix3x2fvEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLfloat)(unsafe.Pointer(value)))
}
func ProgramUniformMatrix3x4dv(program uint32, location int32, count int32, transpose bool, value *float64) {
  C.glowProgramUniformMatrix3x4dv(gpProgramUniformMatrix3x4dv, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLdouble)(unsafe.Pointer(value)))
}
func ProgramUniformMatrix3x4dvEXT(program uint32, location int32, count int32, transpose bool, value *float64) {
  C.glowProgramUniformMatrix3x4dvEXT(gpProgramUniformMatrix3x4dvEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLdouble)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for a specified program object
func ProgramUniformMatrix3x4fv(program uint32, location int32, count int32, transpose bool, value *float32) {
  C.glowProgramUniformMatrix3x4fv(gpProgramUniformMatrix3x4fv, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLfloat)(unsafe.Pointer(value)))
}
func ProgramUniformMatrix3x4fvEXT(program uint32, location int32, count int32, transpose bool, value *float32) {
  C.glowProgramUniformMatrix3x4fvEXT(gpProgramUniformMatrix3x4fvEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLfloat)(unsafe.Pointer(value)))
}
func ProgramUniformMatrix4dv(program uint32, location int32, count int32, transpose bool, value *float64) {
  C.glowProgramUniformMatrix4dv(gpProgramUniformMatrix4dv, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLdouble)(unsafe.Pointer(value)))
}
func ProgramUniformMatrix4dvEXT(program uint32, location int32, count int32, transpose bool, value *float64) {
  C.glowProgramUniformMatrix4dvEXT(gpProgramUniformMatrix4dvEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLdouble)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for a specified program object
func ProgramUniformMatrix4fv(program uint32, location int32, count int32, transpose bool, value *float32) {
  C.glowProgramUniformMatrix4fv(gpProgramUniformMatrix4fv, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLfloat)(unsafe.Pointer(value)))
}
func ProgramUniformMatrix4fvEXT(program uint32, location int32, count int32, transpose bool, value *float32) {
  C.glowProgramUniformMatrix4fvEXT(gpProgramUniformMatrix4fvEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLfloat)(unsafe.Pointer(value)))
}
func ProgramUniformMatrix4x2dv(program uint32, location int32, count int32, transpose bool, value *float64) {
  C.glowProgramUniformMatrix4x2dv(gpProgramUniformMatrix4x2dv, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLdouble)(unsafe.Pointer(value)))
}
func ProgramUniformMatrix4x2dvEXT(program uint32, location int32, count int32, transpose bool, value *float64) {
  C.glowProgramUniformMatrix4x2dvEXT(gpProgramUniformMatrix4x2dvEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLdouble)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for a specified program object
func ProgramUniformMatrix4x2fv(program uint32, location int32, count int32, transpose bool, value *float32) {
  C.glowProgramUniformMatrix4x2fv(gpProgramUniformMatrix4x2fv, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLfloat)(unsafe.Pointer(value)))
}
func ProgramUniformMatrix4x2fvEXT(program uint32, location int32, count int32, transpose bool, value *float32) {
  C.glowProgramUniformMatrix4x2fvEXT(gpProgramUniformMatrix4x2fvEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLfloat)(unsafe.Pointer(value)))
}
func ProgramUniformMatrix4x3dv(program uint32, location int32, count int32, transpose bool, value *float64) {
  C.glowProgramUniformMatrix4x3dv(gpProgramUniformMatrix4x3dv, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLdouble)(unsafe.Pointer(value)))
}
func ProgramUniformMatrix4x3dvEXT(program uint32, location int32, count int32, transpose bool, value *float64) {
  C.glowProgramUniformMatrix4x3dvEXT(gpProgramUniformMatrix4x3dvEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLdouble)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for a specified program object
func ProgramUniformMatrix4x3fv(program uint32, location int32, count int32, transpose bool, value *float32) {
  C.glowProgramUniformMatrix4x3fv(gpProgramUniformMatrix4x3fv, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLfloat)(unsafe.Pointer(value)))
}
func ProgramUniformMatrix4x3fvEXT(program uint32, location int32, count int32, transpose bool, value *float32) {
  C.glowProgramUniformMatrix4x3fvEXT(gpProgramUniformMatrix4x3fvEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLfloat)(unsafe.Pointer(value)))
}
func ProgramUniformui64NV(program uint32, location int32, value uint64) {
  C.glowProgramUniformui64NV(gpProgramUniformui64NV, (C.GLuint)(program), (C.GLint)(location), (C.GLuint64EXT)(value))
}
func ProgramUniformui64vNV(program uint32, location int32, count int32, value *uint64) {
  C.glowProgramUniformui64vNV(gpProgramUniformui64vNV, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLuint64EXT)(unsafe.Pointer(value)))
}
func ProgramVertexLimitNV(target uint32, limit int32) {
  C.glowProgramVertexLimitNV(gpProgramVertexLimitNV, (C.GLenum)(target), (C.GLint)(limit))
}
// specifiy the vertex to be used as the source of data for flat shaded varyings
func ProvokingVertex(mode uint32) {
  C.glowProvokingVertex(gpProvokingVertex, (C.GLenum)(mode))
}
func ProvokingVertexEXT(mode uint32) {
  C.glowProvokingVertexEXT(gpProvokingVertexEXT, (C.GLenum)(mode))
}
func PushClientAttribDefaultEXT(mask uint32) {
  C.glowPushClientAttribDefaultEXT(gpPushClientAttribDefaultEXT, (C.GLbitfield)(mask))
}
// push a named debug group into the command stream
func PushDebugGroup(source uint32, id uint32, length int32, message *int8) {
  C.glowPushDebugGroup(gpPushDebugGroup, (C.GLenum)(source), (C.GLuint)(id), (C.GLsizei)(length), (*C.GLchar)(unsafe.Pointer(message)))
}
func PushDebugGroupKHR(source uint32, id uint32, length int32, message *int8) {
  C.glowPushDebugGroupKHR(gpPushDebugGroupKHR, (C.GLenum)(source), (C.GLuint)(id), (C.GLsizei)(length), (*C.GLchar)(unsafe.Pointer(message)))
}
func PushGroupMarkerEXT(length int32, marker *int8) {
  C.glowPushGroupMarkerEXT(gpPushGroupMarkerEXT, (C.GLsizei)(length), (*C.GLchar)(unsafe.Pointer(marker)))
}
// record the GL time into a query object after all previous commands have reached the GL server but have not yet necessarily executed.
func QueryCounter(id uint32, target uint32) {
  C.glowQueryCounter(gpQueryCounter, (C.GLuint)(id), (C.GLenum)(target))
}
func QueryMatrixxOES(mantissa *int32, exponent *int32) uint32 {
  ret := C.glowQueryMatrixxOES(gpQueryMatrixxOES, (*C.GLfixed)(unsafe.Pointer(mantissa)), (*C.GLint)(unsafe.Pointer(exponent)))
  return (uint32)(ret)
}
func QueryObjectParameteruiAMD(target uint32, id uint32, pname uint32, param uint32) {
  C.glowQueryObjectParameteruiAMD(gpQueryObjectParameteruiAMD, (C.GLenum)(target), (C.GLuint)(id), (C.GLenum)(pname), (C.GLuint)(param))
}
func RasterPos2xOES(x int32, y int32) {
  C.glowRasterPos2xOES(gpRasterPos2xOES, (C.GLfixed)(x), (C.GLfixed)(y))
}
func RasterPos2xvOES(coords *int32) {
  C.glowRasterPos2xvOES(gpRasterPos2xvOES, (*C.GLfixed)(unsafe.Pointer(coords)))
}
func RasterPos3xOES(x int32, y int32, z int32) {
  C.glowRasterPos3xOES(gpRasterPos3xOES, (C.GLfixed)(x), (C.GLfixed)(y), (C.GLfixed)(z))
}
func RasterPos3xvOES(coords *int32) {
  C.glowRasterPos3xvOES(gpRasterPos3xvOES, (*C.GLfixed)(unsafe.Pointer(coords)))
}
func RasterPos4xOES(x int32, y int32, z int32, w int32) {
  C.glowRasterPos4xOES(gpRasterPos4xOES, (C.GLfixed)(x), (C.GLfixed)(y), (C.GLfixed)(z), (C.GLfixed)(w))
}
func RasterPos4xvOES(coords *int32) {
  C.glowRasterPos4xvOES(gpRasterPos4xvOES, (*C.GLfixed)(unsafe.Pointer(coords)))
}
// select a color buffer source for pixels
func ReadBuffer(mode uint32) {
  C.glowReadBuffer(gpReadBuffer, (C.GLenum)(mode))
}
func ReadInstrumentsSGIX(marker int32) {
  C.glowReadInstrumentsSGIX(gpReadInstrumentsSGIX, (C.GLint)(marker))
}
// read a block of pixels from the frame buffer
func ReadPixels(x int32, y int32, width int32, height int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
  C.glowReadPixels(gpReadPixels, (C.GLint)(x), (C.GLint)(y), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLenum)(format), (C.GLenum)(xtype), pixels)
}
func ReadnPixelsARB(x int32, y int32, width int32, height int32, format uint32, xtype uint32, bufSize int32, data unsafe.Pointer) {
  C.glowReadnPixelsARB(gpReadnPixelsARB, (C.GLint)(x), (C.GLint)(y), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLenum)(format), (C.GLenum)(xtype), (C.GLsizei)(bufSize), data)
}
func RectxOES(x1 int32, y1 int32, x2 int32, y2 int32) {
  C.glowRectxOES(gpRectxOES, (C.GLfixed)(x1), (C.GLfixed)(y1), (C.GLfixed)(x2), (C.GLfixed)(y2))
}
func RectxvOES(v1 *int32, v2 *int32) {
  C.glowRectxvOES(gpRectxvOES, (*C.GLfixed)(unsafe.Pointer(v1)), (*C.GLfixed)(unsafe.Pointer(v2)))
}
func ReferencePlaneSGIX(equation *float64) {
  C.glowReferencePlaneSGIX(gpReferencePlaneSGIX, (*C.GLdouble)(unsafe.Pointer(equation)))
}
// release resources consumed by the implementation's shader compiler
func ReleaseShaderCompiler() {
  C.glowReleaseShaderCompiler(gpReleaseShaderCompiler)
}
// establish data storage, format and dimensions of a renderbuffer object's image
func RenderbufferStorage(target uint32, internalformat uint32, width int32, height int32) {
  C.glowRenderbufferStorage(gpRenderbufferStorage, (C.GLenum)(target), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height))
}
func RenderbufferStorageEXT(target uint32, internalformat uint32, width int32, height int32) {
  C.glowRenderbufferStorageEXT(gpRenderbufferStorageEXT, (C.GLenum)(target), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height))
}
// establish data storage, format, dimensions and sample count of a renderbuffer object's image
func RenderbufferStorageMultisample(target uint32, samples int32, internalformat uint32, width int32, height int32) {
  C.glowRenderbufferStorageMultisample(gpRenderbufferStorageMultisample, (C.GLenum)(target), (C.GLsizei)(samples), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height))
}
func RenderbufferStorageMultisampleCoverageNV(target uint32, coverageSamples int32, colorSamples int32, internalformat uint32, width int32, height int32) {
  C.glowRenderbufferStorageMultisampleCoverageNV(gpRenderbufferStorageMultisampleCoverageNV, (C.GLenum)(target), (C.GLsizei)(coverageSamples), (C.GLsizei)(colorSamples), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height))
}
func RenderbufferStorageMultisampleEXT(target uint32, samples int32, internalformat uint32, width int32, height int32) {
  C.glowRenderbufferStorageMultisampleEXT(gpRenderbufferStorageMultisampleEXT, (C.GLenum)(target), (C.GLsizei)(samples), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height))
}
func ReplacementCodePointerSUN(xtype uint32, stride int32, pointer *unsafe.Pointer) {
  C.glowReplacementCodePointerSUN(gpReplacementCodePointerSUN, (C.GLenum)(xtype), (C.GLsizei)(stride), pointer)
}
func ReplacementCodeubSUN(code uint8) {
  C.glowReplacementCodeubSUN(gpReplacementCodeubSUN, (C.GLubyte)(code))
}
func ReplacementCodeubvSUN(code *uint8) {
  C.glowReplacementCodeubvSUN(gpReplacementCodeubvSUN, (*C.GLubyte)(unsafe.Pointer(code)))
}
func ReplacementCodeuiColor3fVertex3fSUN(rc uint32, r float32, g float32, b float32, x float32, y float32, z float32) {
  C.glowReplacementCodeuiColor3fVertex3fSUN(gpReplacementCodeuiColor3fVertex3fSUN, (C.GLuint)(rc), (C.GLfloat)(r), (C.GLfloat)(g), (C.GLfloat)(b), (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z))
}
func ReplacementCodeuiColor3fVertex3fvSUN(rc *uint32, c *float32, v *float32) {
  C.glowReplacementCodeuiColor3fVertex3fvSUN(gpReplacementCodeuiColor3fVertex3fvSUN, (*C.GLuint)(unsafe.Pointer(rc)), (*C.GLfloat)(unsafe.Pointer(c)), (*C.GLfloat)(unsafe.Pointer(v)))
}
func ReplacementCodeuiColor4fNormal3fVertex3fSUN(rc uint32, r float32, g float32, b float32, a float32, nx float32, ny float32, nz float32, x float32, y float32, z float32) {
  C.glowReplacementCodeuiColor4fNormal3fVertex3fSUN(gpReplacementCodeuiColor4fNormal3fVertex3fSUN, (C.GLuint)(rc), (C.GLfloat)(r), (C.GLfloat)(g), (C.GLfloat)(b), (C.GLfloat)(a), (C.GLfloat)(nx), (C.GLfloat)(ny), (C.GLfloat)(nz), (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z))
}
func ReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc *uint32, c *float32, n *float32, v *float32) {
  C.glowReplacementCodeuiColor4fNormal3fVertex3fvSUN(gpReplacementCodeuiColor4fNormal3fVertex3fvSUN, (*C.GLuint)(unsafe.Pointer(rc)), (*C.GLfloat)(unsafe.Pointer(c)), (*C.GLfloat)(unsafe.Pointer(n)), (*C.GLfloat)(unsafe.Pointer(v)))
}
func ReplacementCodeuiColor4ubVertex3fSUN(rc uint32, r uint8, g uint8, b uint8, a uint8, x float32, y float32, z float32) {
  C.glowReplacementCodeuiColor4ubVertex3fSUN(gpReplacementCodeuiColor4ubVertex3fSUN, (C.GLuint)(rc), (C.GLubyte)(r), (C.GLubyte)(g), (C.GLubyte)(b), (C.GLubyte)(a), (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z))
}
func ReplacementCodeuiColor4ubVertex3fvSUN(rc *uint32, c *uint8, v *float32) {
  C.glowReplacementCodeuiColor4ubVertex3fvSUN(gpReplacementCodeuiColor4ubVertex3fvSUN, (*C.GLuint)(unsafe.Pointer(rc)), (*C.GLubyte)(unsafe.Pointer(c)), (*C.GLfloat)(unsafe.Pointer(v)))
}
func ReplacementCodeuiNormal3fVertex3fSUN(rc uint32, nx float32, ny float32, nz float32, x float32, y float32, z float32) {
  C.glowReplacementCodeuiNormal3fVertex3fSUN(gpReplacementCodeuiNormal3fVertex3fSUN, (C.GLuint)(rc), (C.GLfloat)(nx), (C.GLfloat)(ny), (C.GLfloat)(nz), (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z))
}
func ReplacementCodeuiNormal3fVertex3fvSUN(rc *uint32, n *float32, v *float32) {
  C.glowReplacementCodeuiNormal3fVertex3fvSUN(gpReplacementCodeuiNormal3fVertex3fvSUN, (*C.GLuint)(unsafe.Pointer(rc)), (*C.GLfloat)(unsafe.Pointer(n)), (*C.GLfloat)(unsafe.Pointer(v)))
}
func ReplacementCodeuiSUN(code uint32) {
  C.glowReplacementCodeuiSUN(gpReplacementCodeuiSUN, (C.GLuint)(code))
}
func ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(rc uint32, s float32, t float32, r float32, g float32, b float32, a float32, nx float32, ny float32, nz float32, x float32, y float32, z float32) {
  C.glowReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(gpReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN, (C.GLuint)(rc), (C.GLfloat)(s), (C.GLfloat)(t), (C.GLfloat)(r), (C.GLfloat)(g), (C.GLfloat)(b), (C.GLfloat)(a), (C.GLfloat)(nx), (C.GLfloat)(ny), (C.GLfloat)(nz), (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z))
}
func ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc *uint32, tc *float32, c *float32, n *float32, v *float32) {
  C.glowReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(gpReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN, (*C.GLuint)(unsafe.Pointer(rc)), (*C.GLfloat)(unsafe.Pointer(tc)), (*C.GLfloat)(unsafe.Pointer(c)), (*C.GLfloat)(unsafe.Pointer(n)), (*C.GLfloat)(unsafe.Pointer(v)))
}
func ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(rc uint32, s float32, t float32, nx float32, ny float32, nz float32, x float32, y float32, z float32) {
  C.glowReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(gpReplacementCodeuiTexCoord2fNormal3fVertex3fSUN, (C.GLuint)(rc), (C.GLfloat)(s), (C.GLfloat)(t), (C.GLfloat)(nx), (C.GLfloat)(ny), (C.GLfloat)(nz), (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z))
}
func ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc *uint32, tc *float32, n *float32, v *float32) {
  C.glowReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(gpReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN, (*C.GLuint)(unsafe.Pointer(rc)), (*C.GLfloat)(unsafe.Pointer(tc)), (*C.GLfloat)(unsafe.Pointer(n)), (*C.GLfloat)(unsafe.Pointer(v)))
}
func ReplacementCodeuiTexCoord2fVertex3fSUN(rc uint32, s float32, t float32, x float32, y float32, z float32) {
  C.glowReplacementCodeuiTexCoord2fVertex3fSUN(gpReplacementCodeuiTexCoord2fVertex3fSUN, (C.GLuint)(rc), (C.GLfloat)(s), (C.GLfloat)(t), (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z))
}
func ReplacementCodeuiTexCoord2fVertex3fvSUN(rc *uint32, tc *float32, v *float32) {
  C.glowReplacementCodeuiTexCoord2fVertex3fvSUN(gpReplacementCodeuiTexCoord2fVertex3fvSUN, (*C.GLuint)(unsafe.Pointer(rc)), (*C.GLfloat)(unsafe.Pointer(tc)), (*C.GLfloat)(unsafe.Pointer(v)))
}
func ReplacementCodeuiVertex3fSUN(rc uint32, x float32, y float32, z float32) {
  C.glowReplacementCodeuiVertex3fSUN(gpReplacementCodeuiVertex3fSUN, (C.GLuint)(rc), (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z))
}
func ReplacementCodeuiVertex3fvSUN(rc *uint32, v *float32) {
  C.glowReplacementCodeuiVertex3fvSUN(gpReplacementCodeuiVertex3fvSUN, (*C.GLuint)(unsafe.Pointer(rc)), (*C.GLfloat)(unsafe.Pointer(v)))
}
func ReplacementCodeuivSUN(code *uint32) {
  C.glowReplacementCodeuivSUN(gpReplacementCodeuivSUN, (*C.GLuint)(unsafe.Pointer(code)))
}
func ReplacementCodeusSUN(code uint16) {
  C.glowReplacementCodeusSUN(gpReplacementCodeusSUN, (C.GLushort)(code))
}
func ReplacementCodeusvSUN(code *uint16) {
  C.glowReplacementCodeusvSUN(gpReplacementCodeusvSUN, (*C.GLushort)(unsafe.Pointer(code)))
}
func RequestResidentProgramsNV(n int32, programs *uint32) {
  C.glowRequestResidentProgramsNV(gpRequestResidentProgramsNV, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(programs)))
}
func ResetHistogramEXT(target uint32) {
  C.glowResetHistogramEXT(gpResetHistogramEXT, (C.GLenum)(target))
}
func ResetMinmaxEXT(target uint32) {
  C.glowResetMinmaxEXT(gpResetMinmaxEXT, (C.GLenum)(target))
}
func ResizeBuffersMESA() {
  C.glowResizeBuffersMESA(gpResizeBuffersMESA)
}
// resume transform feedback operations
func ResumeTransformFeedback() {
  C.glowResumeTransformFeedback(gpResumeTransformFeedback)
}
func ResumeTransformFeedbackNV() {
  C.glowResumeTransformFeedbackNV(gpResumeTransformFeedbackNV)
}
func RotatexOES(angle int32, x int32, y int32, z int32) {
  C.glowRotatexOES(gpRotatexOES, (C.GLfixed)(angle), (C.GLfixed)(x), (C.GLfixed)(y), (C.GLfixed)(z))
}
// specify multisample coverage parameters
func SampleCoverage(value float32, invert bool) {
  C.glowSampleCoverage(gpSampleCoverage, (C.GLfloat)(value), (C.GLboolean)(boolToInt(invert)))
}
func SampleCoverageARB(value float32, invert bool) {
  C.glowSampleCoverageARB(gpSampleCoverageARB, (C.GLfloat)(value), (C.GLboolean)(boolToInt(invert)))
}
func SampleCoverageOES(value int32, invert bool) {
  C.glowSampleCoverageOES(gpSampleCoverageOES, (C.GLfixed)(value), (C.GLboolean)(boolToInt(invert)))
}
func SampleCoveragexOES(value int32, invert bool) {
  C.glowSampleCoveragexOES(gpSampleCoveragexOES, (C.GLclampx)(value), (C.GLboolean)(boolToInt(invert)))
}
func SampleMapATI(dst uint32, interp uint32, swizzle uint32) {
  C.glowSampleMapATI(gpSampleMapATI, (C.GLuint)(dst), (C.GLuint)(interp), (C.GLenum)(swizzle))
}
func SampleMaskEXT(value float32, invert bool) {
  C.glowSampleMaskEXT(gpSampleMaskEXT, (C.GLclampf)(value), (C.GLboolean)(boolToInt(invert)))
}
func SampleMaskIndexedNV(index uint32, mask uint32) {
  C.glowSampleMaskIndexedNV(gpSampleMaskIndexedNV, (C.GLuint)(index), (C.GLbitfield)(mask))
}
func SampleMaskSGIS(value float32, invert bool) {
  C.glowSampleMaskSGIS(gpSampleMaskSGIS, (C.GLclampf)(value), (C.GLboolean)(boolToInt(invert)))
}
// set the value of a sub-word of the sample mask
func SampleMaski(maskNumber uint32, mask uint32) {
  C.glowSampleMaski(gpSampleMaski, (C.GLuint)(maskNumber), (C.GLbitfield)(mask))
}
func SamplePatternEXT(pattern uint32) {
  C.glowSamplePatternEXT(gpSamplePatternEXT, (C.GLenum)(pattern))
}
func SamplePatternSGIS(pattern uint32) {
  C.glowSamplePatternSGIS(gpSamplePatternSGIS, (C.GLenum)(pattern))
}
func SamplerParameterIiv(sampler uint32, pname uint32, param *int32) {
  C.glowSamplerParameterIiv(gpSamplerParameterIiv, (C.GLuint)(sampler), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(param)))
}
func SamplerParameterIuiv(sampler uint32, pname uint32, param *uint32) {
  C.glowSamplerParameterIuiv(gpSamplerParameterIuiv, (C.GLuint)(sampler), (C.GLenum)(pname), (*C.GLuint)(unsafe.Pointer(param)))
}
func SamplerParameterf(sampler uint32, pname uint32, param float32) {
  C.glowSamplerParameterf(gpSamplerParameterf, (C.GLuint)(sampler), (C.GLenum)(pname), (C.GLfloat)(param))
}
func SamplerParameterfv(sampler uint32, pname uint32, param *float32) {
  C.glowSamplerParameterfv(gpSamplerParameterfv, (C.GLuint)(sampler), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(param)))
}
func SamplerParameteri(sampler uint32, pname uint32, param int32) {
  C.glowSamplerParameteri(gpSamplerParameteri, (C.GLuint)(sampler), (C.GLenum)(pname), (C.GLint)(param))
}
func SamplerParameteriv(sampler uint32, pname uint32, param *int32) {
  C.glowSamplerParameteriv(gpSamplerParameteriv, (C.GLuint)(sampler), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(param)))
}
func ScalexOES(x int32, y int32, z int32) {
  C.glowScalexOES(gpScalexOES, (C.GLfixed)(x), (C.GLfixed)(y), (C.GLfixed)(z))
}
// define the scissor box
func Scissor(x int32, y int32, width int32, height int32) {
  C.glowScissor(gpScissor, (C.GLint)(x), (C.GLint)(y), (C.GLsizei)(width), (C.GLsizei)(height))
}
func ScissorArrayv(first uint32, count int32, v *int32) {
  C.glowScissorArrayv(gpScissorArrayv, (C.GLuint)(first), (C.GLsizei)(count), (*C.GLint)(unsafe.Pointer(v)))
}
// define the scissor box for a specific viewport
func ScissorIndexed(index uint32, left int32, bottom int32, width int32, height int32) {
  C.glowScissorIndexed(gpScissorIndexed, (C.GLuint)(index), (C.GLint)(left), (C.GLint)(bottom), (C.GLsizei)(width), (C.GLsizei)(height))
}
func ScissorIndexedv(index uint32, v *int32) {
  C.glowScissorIndexedv(gpScissorIndexedv, (C.GLuint)(index), (*C.GLint)(unsafe.Pointer(v)))
}
func SecondaryColor3bEXT(red int8, green int8, blue int8) {
  C.glowSecondaryColor3bEXT(gpSecondaryColor3bEXT, (C.GLbyte)(red), (C.GLbyte)(green), (C.GLbyte)(blue))
}
func SecondaryColor3bvEXT(v *int8) {
  C.glowSecondaryColor3bvEXT(gpSecondaryColor3bvEXT, (*C.GLbyte)(unsafe.Pointer(v)))
}
func SecondaryColor3dEXT(red float64, green float64, blue float64) {
  C.glowSecondaryColor3dEXT(gpSecondaryColor3dEXT, (C.GLdouble)(red), (C.GLdouble)(green), (C.GLdouble)(blue))
}
func SecondaryColor3dvEXT(v *float64) {
  C.glowSecondaryColor3dvEXT(gpSecondaryColor3dvEXT, (*C.GLdouble)(unsafe.Pointer(v)))
}
func SecondaryColor3fEXT(red float32, green float32, blue float32) {
  C.glowSecondaryColor3fEXT(gpSecondaryColor3fEXT, (C.GLfloat)(red), (C.GLfloat)(green), (C.GLfloat)(blue))
}
func SecondaryColor3fvEXT(v *float32) {
  C.glowSecondaryColor3fvEXT(gpSecondaryColor3fvEXT, (*C.GLfloat)(unsafe.Pointer(v)))
}
func SecondaryColor3hNV(red uint16, green uint16, blue uint16) {
  C.glowSecondaryColor3hNV(gpSecondaryColor3hNV, (C.GLhalfNV)(red), (C.GLhalfNV)(green), (C.GLhalfNV)(blue))
}
func SecondaryColor3hvNV(v *uint16) {
  C.glowSecondaryColor3hvNV(gpSecondaryColor3hvNV, (*C.GLhalfNV)(unsafe.Pointer(v)))
}
func SecondaryColor3iEXT(red int32, green int32, blue int32) {
  C.glowSecondaryColor3iEXT(gpSecondaryColor3iEXT, (C.GLint)(red), (C.GLint)(green), (C.GLint)(blue))
}
func SecondaryColor3ivEXT(v *int32) {
  C.glowSecondaryColor3ivEXT(gpSecondaryColor3ivEXT, (*C.GLint)(unsafe.Pointer(v)))
}
func SecondaryColor3sEXT(red int16, green int16, blue int16) {
  C.glowSecondaryColor3sEXT(gpSecondaryColor3sEXT, (C.GLshort)(red), (C.GLshort)(green), (C.GLshort)(blue))
}
func SecondaryColor3svEXT(v *int16) {
  C.glowSecondaryColor3svEXT(gpSecondaryColor3svEXT, (*C.GLshort)(unsafe.Pointer(v)))
}
func SecondaryColor3ubEXT(red uint8, green uint8, blue uint8) {
  C.glowSecondaryColor3ubEXT(gpSecondaryColor3ubEXT, (C.GLubyte)(red), (C.GLubyte)(green), (C.GLubyte)(blue))
}
func SecondaryColor3ubvEXT(v *uint8) {
  C.glowSecondaryColor3ubvEXT(gpSecondaryColor3ubvEXT, (*C.GLubyte)(unsafe.Pointer(v)))
}
func SecondaryColor3uiEXT(red uint32, green uint32, blue uint32) {
  C.glowSecondaryColor3uiEXT(gpSecondaryColor3uiEXT, (C.GLuint)(red), (C.GLuint)(green), (C.GLuint)(blue))
}
func SecondaryColor3uivEXT(v *uint32) {
  C.glowSecondaryColor3uivEXT(gpSecondaryColor3uivEXT, (*C.GLuint)(unsafe.Pointer(v)))
}
func SecondaryColor3usEXT(red uint16, green uint16, blue uint16) {
  C.glowSecondaryColor3usEXT(gpSecondaryColor3usEXT, (C.GLushort)(red), (C.GLushort)(green), (C.GLushort)(blue))
}
func SecondaryColor3usvEXT(v *uint16) {
  C.glowSecondaryColor3usvEXT(gpSecondaryColor3usvEXT, (*C.GLushort)(unsafe.Pointer(v)))
}
func SecondaryColorFormatNV(size int32, xtype uint32, stride int32) {
  C.glowSecondaryColorFormatNV(gpSecondaryColorFormatNV, (C.GLint)(size), (C.GLenum)(xtype), (C.GLsizei)(stride))
}
func SecondaryColorPointerEXT(size int32, xtype uint32, stride int32, pointer unsafe.Pointer) {
  C.glowSecondaryColorPointerEXT(gpSecondaryColorPointerEXT, (C.GLint)(size), (C.GLenum)(xtype), (C.GLsizei)(stride), pointer)
}
func SecondaryColorPointerListIBM(size int32, xtype uint32, stride int32, pointer *unsafe.Pointer, ptrstride int32) {
  C.glowSecondaryColorPointerListIBM(gpSecondaryColorPointerListIBM, (C.GLint)(size), (C.GLenum)(xtype), (C.GLint)(stride), pointer, (C.GLint)(ptrstride))
}
func SelectPerfMonitorCountersAMD(monitor uint32, enable bool, group uint32, numCounters int32, counterList *uint32) {
  C.glowSelectPerfMonitorCountersAMD(gpSelectPerfMonitorCountersAMD, (C.GLuint)(monitor), (C.GLboolean)(boolToInt(enable)), (C.GLuint)(group), (C.GLint)(numCounters), (*C.GLuint)(unsafe.Pointer(counterList)))
}
func SeparableFilter2DEXT(target uint32, internalformat uint32, width int32, height int32, format uint32, xtype uint32, row unsafe.Pointer, column unsafe.Pointer) {
  C.glowSeparableFilter2DEXT(gpSeparableFilter2DEXT, (C.GLenum)(target), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLenum)(format), (C.GLenum)(xtype), row, column)
}
func SetFenceAPPLE(fence uint32) {
  C.glowSetFenceAPPLE(gpSetFenceAPPLE, (C.GLuint)(fence))
}
func SetFenceNV(fence uint32, condition uint32) {
  C.glowSetFenceNV(gpSetFenceNV, (C.GLuint)(fence), (C.GLenum)(condition))
}
func SetFragmentShaderConstantATI(dst uint32, value *float32) {
  C.glowSetFragmentShaderConstantATI(gpSetFragmentShaderConstantATI, (C.GLuint)(dst), (*C.GLfloat)(unsafe.Pointer(value)))
}
func SetInvariantEXT(id uint32, xtype uint32, addr unsafe.Pointer) {
  C.glowSetInvariantEXT(gpSetInvariantEXT, (C.GLuint)(id), (C.GLenum)(xtype), addr)
}
func SetLocalConstantEXT(id uint32, xtype uint32, addr unsafe.Pointer) {
  C.glowSetLocalConstantEXT(gpSetLocalConstantEXT, (C.GLuint)(id), (C.GLenum)(xtype), addr)
}
func SetMultisamplefvAMD(pname uint32, index uint32, val *float32) {
  C.glowSetMultisamplefvAMD(gpSetMultisamplefvAMD, (C.GLenum)(pname), (C.GLuint)(index), (*C.GLfloat)(unsafe.Pointer(val)))
}
// load pre-compiled shader binaries
func ShaderBinary(count int32, shaders *uint32, binaryformat uint32, binary unsafe.Pointer, length int32) {
  C.glowShaderBinary(gpShaderBinary, (C.GLsizei)(count), (*C.GLuint)(unsafe.Pointer(shaders)), (C.GLenum)(binaryformat), binary, (C.GLsizei)(length))
}
func ShaderOp1EXT(op uint32, res uint32, arg1 uint32) {
  C.glowShaderOp1EXT(gpShaderOp1EXT, (C.GLenum)(op), (C.GLuint)(res), (C.GLuint)(arg1))
}
func ShaderOp2EXT(op uint32, res uint32, arg1 uint32, arg2 uint32) {
  C.glowShaderOp2EXT(gpShaderOp2EXT, (C.GLenum)(op), (C.GLuint)(res), (C.GLuint)(arg1), (C.GLuint)(arg2))
}
func ShaderOp3EXT(op uint32, res uint32, arg1 uint32, arg2 uint32, arg3 uint32) {
  C.glowShaderOp3EXT(gpShaderOp3EXT, (C.GLenum)(op), (C.GLuint)(res), (C.GLuint)(arg1), (C.GLuint)(arg2), (C.GLuint)(arg3))
}
// Replaces the source code in a shader object
func ShaderSource(shader uint32, count int32, xstring **int8, length *int32) {
  C.glowShaderSource(gpShaderSource, (C.GLuint)(shader), (C.GLsizei)(count), (**C.GLchar)(unsafe.Pointer(xstring)), (*C.GLint)(unsafe.Pointer(length)))
}
func ShaderSourceARB(shaderObj uintptr, count int32, xstring **int8, length *int32) {
  C.glowShaderSourceARB(gpShaderSourceARB, (C.GLhandleARB)(shaderObj), (C.GLsizei)(count), (**C.GLcharARB)(unsafe.Pointer(xstring)), (*C.GLint)(unsafe.Pointer(length)))
}
// change an active shader storage block binding
func ShaderStorageBlockBinding(program uint32, storageBlockIndex uint32, storageBlockBinding uint32) {
  C.glowShaderStorageBlockBinding(gpShaderStorageBlockBinding, (C.GLuint)(program), (C.GLuint)(storageBlockIndex), (C.GLuint)(storageBlockBinding))
}
func SharpenTexFuncSGIS(target uint32, n int32, points *float32) {
  C.glowSharpenTexFuncSGIS(gpSharpenTexFuncSGIS, (C.GLenum)(target), (C.GLsizei)(n), (*C.GLfloat)(unsafe.Pointer(points)))
}
func SpriteParameterfSGIX(pname uint32, param float32) {
  C.glowSpriteParameterfSGIX(gpSpriteParameterfSGIX, (C.GLenum)(pname), (C.GLfloat)(param))
}
func SpriteParameterfvSGIX(pname uint32, params *float32) {
  C.glowSpriteParameterfvSGIX(gpSpriteParameterfvSGIX, (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func SpriteParameteriSGIX(pname uint32, param int32) {
  C.glowSpriteParameteriSGIX(gpSpriteParameteriSGIX, (C.GLenum)(pname), (C.GLint)(param))
}
func SpriteParameterivSGIX(pname uint32, params *int32) {
  C.glowSpriteParameterivSGIX(gpSpriteParameterivSGIX, (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func StartInstrumentsSGIX() {
  C.glowStartInstrumentsSGIX(gpStartInstrumentsSGIX)
}
func StencilClearTagEXT(stencilTagBits int32, stencilClearTag uint32) {
  C.glowStencilClearTagEXT(gpStencilClearTagEXT, (C.GLsizei)(stencilTagBits), (C.GLuint)(stencilClearTag))
}
func StencilFillPathInstancedNV(numPaths int32, pathNameType uint32, paths unsafe.Pointer, pathBase uint32, fillMode uint32, mask uint32, transformType uint32, transformValues *float32) {
  C.glowStencilFillPathInstancedNV(gpStencilFillPathInstancedNV, (C.GLsizei)(numPaths), (C.GLenum)(pathNameType), paths, (C.GLuint)(pathBase), (C.GLenum)(fillMode), (C.GLuint)(mask), (C.GLenum)(transformType), (*C.GLfloat)(unsafe.Pointer(transformValues)))
}
func StencilFillPathNV(path uint32, fillMode uint32, mask uint32) {
  C.glowStencilFillPathNV(gpStencilFillPathNV, (C.GLuint)(path), (C.GLenum)(fillMode), (C.GLuint)(mask))
}
// set front and back function and reference value for stencil testing
func StencilFunc(xfunc uint32, ref int32, mask uint32) {
  C.glowStencilFunc(gpStencilFunc, (C.GLenum)(xfunc), (C.GLint)(ref), (C.GLuint)(mask))
}
// set front and/or back function and reference value for stencil testing
func StencilFuncSeparate(face uint32, xfunc uint32, ref int32, mask uint32) {
  C.glowStencilFuncSeparate(gpStencilFuncSeparate, (C.GLenum)(face), (C.GLenum)(xfunc), (C.GLint)(ref), (C.GLuint)(mask))
}
func StencilFuncSeparateATI(frontfunc uint32, backfunc uint32, ref int32, mask uint32) {
  C.glowStencilFuncSeparateATI(gpStencilFuncSeparateATI, (C.GLenum)(frontfunc), (C.GLenum)(backfunc), (C.GLint)(ref), (C.GLuint)(mask))
}
// control the front and back writing of individual bits in the stencil planes
func StencilMask(mask uint32) {
  C.glowStencilMask(gpStencilMask, (C.GLuint)(mask))
}
// control the front and/or back writing of individual bits in the stencil planes
func StencilMaskSeparate(face uint32, mask uint32) {
  C.glowStencilMaskSeparate(gpStencilMaskSeparate, (C.GLenum)(face), (C.GLuint)(mask))
}
// set front and back stencil test actions
func StencilOp(fail uint32, zfail uint32, zpass uint32) {
  C.glowStencilOp(gpStencilOp, (C.GLenum)(fail), (C.GLenum)(zfail), (C.GLenum)(zpass))
}
// set front and/or back stencil test actions
func StencilOpSeparate(face uint32, sfail uint32, dpfail uint32, dppass uint32) {
  C.glowStencilOpSeparate(gpStencilOpSeparate, (C.GLenum)(face), (C.GLenum)(sfail), (C.GLenum)(dpfail), (C.GLenum)(dppass))
}
func StencilOpSeparateATI(face uint32, sfail uint32, dpfail uint32, dppass uint32) {
  C.glowStencilOpSeparateATI(gpStencilOpSeparateATI, (C.GLenum)(face), (C.GLenum)(sfail), (C.GLenum)(dpfail), (C.GLenum)(dppass))
}
func StencilOpValueAMD(face uint32, value uint32) {
  C.glowStencilOpValueAMD(gpStencilOpValueAMD, (C.GLenum)(face), (C.GLuint)(value))
}
func StencilStrokePathInstancedNV(numPaths int32, pathNameType uint32, paths unsafe.Pointer, pathBase uint32, reference int32, mask uint32, transformType uint32, transformValues *float32) {
  C.glowStencilStrokePathInstancedNV(gpStencilStrokePathInstancedNV, (C.GLsizei)(numPaths), (C.GLenum)(pathNameType), paths, (C.GLuint)(pathBase), (C.GLint)(reference), (C.GLuint)(mask), (C.GLenum)(transformType), (*C.GLfloat)(unsafe.Pointer(transformValues)))
}
func StencilStrokePathNV(path uint32, reference int32, mask uint32) {
  C.glowStencilStrokePathNV(gpStencilStrokePathNV, (C.GLuint)(path), (C.GLint)(reference), (C.GLuint)(mask))
}
func StopInstrumentsSGIX(marker int32) {
  C.glowStopInstrumentsSGIX(gpStopInstrumentsSGIX, (C.GLint)(marker))
}
func StringMarkerGREMEDY(len int32, xstring unsafe.Pointer) {
  C.glowStringMarkerGREMEDY(gpStringMarkerGREMEDY, (C.GLsizei)(len), xstring)
}
func SwizzleEXT(res uint32, in uint32, outX uint32, outY uint32, outZ uint32, outW uint32) {
  C.glowSwizzleEXT(gpSwizzleEXT, (C.GLuint)(res), (C.GLuint)(in), (C.GLenum)(outX), (C.GLenum)(outY), (C.GLenum)(outZ), (C.GLenum)(outW))
}
func SyncTextureINTEL(texture uint32) {
  C.glowSyncTextureINTEL(gpSyncTextureINTEL, (C.GLuint)(texture))
}
func TagSampleBufferSGIX() {
  C.glowTagSampleBufferSGIX(gpTagSampleBufferSGIX)
}
func Tangent3bEXT(tx int8, ty int8, tz int8) {
  C.glowTangent3bEXT(gpTangent3bEXT, (C.GLbyte)(tx), (C.GLbyte)(ty), (C.GLbyte)(tz))
}
func Tangent3bvEXT(v *int8) {
  C.glowTangent3bvEXT(gpTangent3bvEXT, (*C.GLbyte)(unsafe.Pointer(v)))
}
func Tangent3dEXT(tx float64, ty float64, tz float64) {
  C.glowTangent3dEXT(gpTangent3dEXT, (C.GLdouble)(tx), (C.GLdouble)(ty), (C.GLdouble)(tz))
}
func Tangent3dvEXT(v *float64) {
  C.glowTangent3dvEXT(gpTangent3dvEXT, (*C.GLdouble)(unsafe.Pointer(v)))
}
func Tangent3fEXT(tx float32, ty float32, tz float32) {
  C.glowTangent3fEXT(gpTangent3fEXT, (C.GLfloat)(tx), (C.GLfloat)(ty), (C.GLfloat)(tz))
}
func Tangent3fvEXT(v *float32) {
  C.glowTangent3fvEXT(gpTangent3fvEXT, (*C.GLfloat)(unsafe.Pointer(v)))
}
func Tangent3iEXT(tx int32, ty int32, tz int32) {
  C.glowTangent3iEXT(gpTangent3iEXT, (C.GLint)(tx), (C.GLint)(ty), (C.GLint)(tz))
}
func Tangent3ivEXT(v *int32) {
  C.glowTangent3ivEXT(gpTangent3ivEXT, (*C.GLint)(unsafe.Pointer(v)))
}
func Tangent3sEXT(tx int16, ty int16, tz int16) {
  C.glowTangent3sEXT(gpTangent3sEXT, (C.GLshort)(tx), (C.GLshort)(ty), (C.GLshort)(tz))
}
func Tangent3svEXT(v *int16) {
  C.glowTangent3svEXT(gpTangent3svEXT, (*C.GLshort)(unsafe.Pointer(v)))
}
func TangentPointerEXT(xtype uint32, stride int32, pointer unsafe.Pointer) {
  C.glowTangentPointerEXT(gpTangentPointerEXT, (C.GLenum)(xtype), (C.GLsizei)(stride), pointer)
}
func TbufferMask3DFX(mask uint32) {
  C.glowTbufferMask3DFX(gpTbufferMask3DFX, (C.GLuint)(mask))
}
func TessellationFactorAMD(factor float32) {
  C.glowTessellationFactorAMD(gpTessellationFactorAMD, (C.GLfloat)(factor))
}
func TessellationModeAMD(mode uint32) {
  C.glowTessellationModeAMD(gpTessellationModeAMD, (C.GLenum)(mode))
}
func TestFenceAPPLE(fence uint32) bool {
  ret := C.glowTestFenceAPPLE(gpTestFenceAPPLE, (C.GLuint)(fence))
  return ret == TRUE
}
func TestFenceNV(fence uint32) bool {
  ret := C.glowTestFenceNV(gpTestFenceNV, (C.GLuint)(fence))
  return ret == TRUE
}
func TestObjectAPPLE(object uint32, name uint32) bool {
  ret := C.glowTestObjectAPPLE(gpTestObjectAPPLE, (C.GLenum)(object), (C.GLuint)(name))
  return ret == TRUE
}
// attach the storage for a buffer object to the active buffer texture
func TexBuffer(target uint32, internalformat uint32, buffer uint32) {
  C.glowTexBuffer(gpTexBuffer, (C.GLenum)(target), (C.GLenum)(internalformat), (C.GLuint)(buffer))
}
func TexBufferARB(target uint32, internalformat uint32, buffer uint32) {
  C.glowTexBufferARB(gpTexBufferARB, (C.GLenum)(target), (C.GLenum)(internalformat), (C.GLuint)(buffer))
}
func TexBufferEXT(target uint32, internalformat uint32, buffer uint32) {
  C.glowTexBufferEXT(gpTexBufferEXT, (C.GLenum)(target), (C.GLenum)(internalformat), (C.GLuint)(buffer))
}
// bind a range of a buffer's data store to a buffer texture
func TexBufferRange(target uint32, internalformat uint32, buffer uint32, offset int, size int) {
  C.glowTexBufferRange(gpTexBufferRange, (C.GLenum)(target), (C.GLenum)(internalformat), (C.GLuint)(buffer), (C.GLintptr)(offset), (C.GLsizeiptr)(size))
}
func TexBumpParameterfvATI(pname uint32, param *float32) {
  C.glowTexBumpParameterfvATI(gpTexBumpParameterfvATI, (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(param)))
}
func TexBumpParameterivATI(pname uint32, param *int32) {
  C.glowTexBumpParameterivATI(gpTexBumpParameterivATI, (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(param)))
}
func TexCoord1bOES(s int8) {
  C.glowTexCoord1bOES(gpTexCoord1bOES, (C.GLbyte)(s))
}
func TexCoord1bvOES(coords *int8) {
  C.glowTexCoord1bvOES(gpTexCoord1bvOES, (*C.GLbyte)(unsafe.Pointer(coords)))
}
func TexCoord1hNV(s uint16) {
  C.glowTexCoord1hNV(gpTexCoord1hNV, (C.GLhalfNV)(s))
}
func TexCoord1hvNV(v *uint16) {
  C.glowTexCoord1hvNV(gpTexCoord1hvNV, (*C.GLhalfNV)(unsafe.Pointer(v)))
}
func TexCoord1xOES(s int32) {
  C.glowTexCoord1xOES(gpTexCoord1xOES, (C.GLfixed)(s))
}
func TexCoord1xvOES(coords *int32) {
  C.glowTexCoord1xvOES(gpTexCoord1xvOES, (*C.GLfixed)(unsafe.Pointer(coords)))
}
func TexCoord2bOES(s int8, t int8) {
  C.glowTexCoord2bOES(gpTexCoord2bOES, (C.GLbyte)(s), (C.GLbyte)(t))
}
func TexCoord2bvOES(coords *int8) {
  C.glowTexCoord2bvOES(gpTexCoord2bvOES, (*C.GLbyte)(unsafe.Pointer(coords)))
}
func TexCoord2fColor3fVertex3fSUN(s float32, t float32, r float32, g float32, b float32, x float32, y float32, z float32) {
  C.glowTexCoord2fColor3fVertex3fSUN(gpTexCoord2fColor3fVertex3fSUN, (C.GLfloat)(s), (C.GLfloat)(t), (C.GLfloat)(r), (C.GLfloat)(g), (C.GLfloat)(b), (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z))
}
func TexCoord2fColor3fVertex3fvSUN(tc *float32, c *float32, v *float32) {
  C.glowTexCoord2fColor3fVertex3fvSUN(gpTexCoord2fColor3fVertex3fvSUN, (*C.GLfloat)(unsafe.Pointer(tc)), (*C.GLfloat)(unsafe.Pointer(c)), (*C.GLfloat)(unsafe.Pointer(v)))
}
func TexCoord2fColor4fNormal3fVertex3fSUN(s float32, t float32, r float32, g float32, b float32, a float32, nx float32, ny float32, nz float32, x float32, y float32, z float32) {
  C.glowTexCoord2fColor4fNormal3fVertex3fSUN(gpTexCoord2fColor4fNormal3fVertex3fSUN, (C.GLfloat)(s), (C.GLfloat)(t), (C.GLfloat)(r), (C.GLfloat)(g), (C.GLfloat)(b), (C.GLfloat)(a), (C.GLfloat)(nx), (C.GLfloat)(ny), (C.GLfloat)(nz), (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z))
}
func TexCoord2fColor4fNormal3fVertex3fvSUN(tc *float32, c *float32, n *float32, v *float32) {
  C.glowTexCoord2fColor4fNormal3fVertex3fvSUN(gpTexCoord2fColor4fNormal3fVertex3fvSUN, (*C.GLfloat)(unsafe.Pointer(tc)), (*C.GLfloat)(unsafe.Pointer(c)), (*C.GLfloat)(unsafe.Pointer(n)), (*C.GLfloat)(unsafe.Pointer(v)))
}
func TexCoord2fColor4ubVertex3fSUN(s float32, t float32, r uint8, g uint8, b uint8, a uint8, x float32, y float32, z float32) {
  C.glowTexCoord2fColor4ubVertex3fSUN(gpTexCoord2fColor4ubVertex3fSUN, (C.GLfloat)(s), (C.GLfloat)(t), (C.GLubyte)(r), (C.GLubyte)(g), (C.GLubyte)(b), (C.GLubyte)(a), (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z))
}
func TexCoord2fColor4ubVertex3fvSUN(tc *float32, c *uint8, v *float32) {
  C.glowTexCoord2fColor4ubVertex3fvSUN(gpTexCoord2fColor4ubVertex3fvSUN, (*C.GLfloat)(unsafe.Pointer(tc)), (*C.GLubyte)(unsafe.Pointer(c)), (*C.GLfloat)(unsafe.Pointer(v)))
}
func TexCoord2fNormal3fVertex3fSUN(s float32, t float32, nx float32, ny float32, nz float32, x float32, y float32, z float32) {
  C.glowTexCoord2fNormal3fVertex3fSUN(gpTexCoord2fNormal3fVertex3fSUN, (C.GLfloat)(s), (C.GLfloat)(t), (C.GLfloat)(nx), (C.GLfloat)(ny), (C.GLfloat)(nz), (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z))
}
func TexCoord2fNormal3fVertex3fvSUN(tc *float32, n *float32, v *float32) {
  C.glowTexCoord2fNormal3fVertex3fvSUN(gpTexCoord2fNormal3fVertex3fvSUN, (*C.GLfloat)(unsafe.Pointer(tc)), (*C.GLfloat)(unsafe.Pointer(n)), (*C.GLfloat)(unsafe.Pointer(v)))
}
func TexCoord2fVertex3fSUN(s float32, t float32, x float32, y float32, z float32) {
  C.glowTexCoord2fVertex3fSUN(gpTexCoord2fVertex3fSUN, (C.GLfloat)(s), (C.GLfloat)(t), (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z))
}
func TexCoord2fVertex3fvSUN(tc *float32, v *float32) {
  C.glowTexCoord2fVertex3fvSUN(gpTexCoord2fVertex3fvSUN, (*C.GLfloat)(unsafe.Pointer(tc)), (*C.GLfloat)(unsafe.Pointer(v)))
}
func TexCoord2hNV(s uint16, t uint16) {
  C.glowTexCoord2hNV(gpTexCoord2hNV, (C.GLhalfNV)(s), (C.GLhalfNV)(t))
}
func TexCoord2hvNV(v *uint16) {
  C.glowTexCoord2hvNV(gpTexCoord2hvNV, (*C.GLhalfNV)(unsafe.Pointer(v)))
}
func TexCoord2xOES(s int32, t int32) {
  C.glowTexCoord2xOES(gpTexCoord2xOES, (C.GLfixed)(s), (C.GLfixed)(t))
}
func TexCoord2xvOES(coords *int32) {
  C.glowTexCoord2xvOES(gpTexCoord2xvOES, (*C.GLfixed)(unsafe.Pointer(coords)))
}
func TexCoord3bOES(s int8, t int8, r int8) {
  C.glowTexCoord3bOES(gpTexCoord3bOES, (C.GLbyte)(s), (C.GLbyte)(t), (C.GLbyte)(r))
}
func TexCoord3bvOES(coords *int8) {
  C.glowTexCoord3bvOES(gpTexCoord3bvOES, (*C.GLbyte)(unsafe.Pointer(coords)))
}
func TexCoord3hNV(s uint16, t uint16, r uint16) {
  C.glowTexCoord3hNV(gpTexCoord3hNV, (C.GLhalfNV)(s), (C.GLhalfNV)(t), (C.GLhalfNV)(r))
}
func TexCoord3hvNV(v *uint16) {
  C.glowTexCoord3hvNV(gpTexCoord3hvNV, (*C.GLhalfNV)(unsafe.Pointer(v)))
}
func TexCoord3xOES(s int32, t int32, r int32) {
  C.glowTexCoord3xOES(gpTexCoord3xOES, (C.GLfixed)(s), (C.GLfixed)(t), (C.GLfixed)(r))
}
func TexCoord3xvOES(coords *int32) {
  C.glowTexCoord3xvOES(gpTexCoord3xvOES, (*C.GLfixed)(unsafe.Pointer(coords)))
}
func TexCoord4bOES(s int8, t int8, r int8, q int8) {
  C.glowTexCoord4bOES(gpTexCoord4bOES, (C.GLbyte)(s), (C.GLbyte)(t), (C.GLbyte)(r), (C.GLbyte)(q))
}
func TexCoord4bvOES(coords *int8) {
  C.glowTexCoord4bvOES(gpTexCoord4bvOES, (*C.GLbyte)(unsafe.Pointer(coords)))
}
func TexCoord4fColor4fNormal3fVertex4fSUN(s float32, t float32, p float32, q float32, r float32, g float32, b float32, a float32, nx float32, ny float32, nz float32, x float32, y float32, z float32, w float32) {
  C.glowTexCoord4fColor4fNormal3fVertex4fSUN(gpTexCoord4fColor4fNormal3fVertex4fSUN, (C.GLfloat)(s), (C.GLfloat)(t), (C.GLfloat)(p), (C.GLfloat)(q), (C.GLfloat)(r), (C.GLfloat)(g), (C.GLfloat)(b), (C.GLfloat)(a), (C.GLfloat)(nx), (C.GLfloat)(ny), (C.GLfloat)(nz), (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z), (C.GLfloat)(w))
}
func TexCoord4fColor4fNormal3fVertex4fvSUN(tc *float32, c *float32, n *float32, v *float32) {
  C.glowTexCoord4fColor4fNormal3fVertex4fvSUN(gpTexCoord4fColor4fNormal3fVertex4fvSUN, (*C.GLfloat)(unsafe.Pointer(tc)), (*C.GLfloat)(unsafe.Pointer(c)), (*C.GLfloat)(unsafe.Pointer(n)), (*C.GLfloat)(unsafe.Pointer(v)))
}
func TexCoord4fVertex4fSUN(s float32, t float32, p float32, q float32, x float32, y float32, z float32, w float32) {
  C.glowTexCoord4fVertex4fSUN(gpTexCoord4fVertex4fSUN, (C.GLfloat)(s), (C.GLfloat)(t), (C.GLfloat)(p), (C.GLfloat)(q), (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z), (C.GLfloat)(w))
}
func TexCoord4fVertex4fvSUN(tc *float32, v *float32) {
  C.glowTexCoord4fVertex4fvSUN(gpTexCoord4fVertex4fvSUN, (*C.GLfloat)(unsafe.Pointer(tc)), (*C.GLfloat)(unsafe.Pointer(v)))
}
func TexCoord4hNV(s uint16, t uint16, r uint16, q uint16) {
  C.glowTexCoord4hNV(gpTexCoord4hNV, (C.GLhalfNV)(s), (C.GLhalfNV)(t), (C.GLhalfNV)(r), (C.GLhalfNV)(q))
}
func TexCoord4hvNV(v *uint16) {
  C.glowTexCoord4hvNV(gpTexCoord4hvNV, (*C.GLhalfNV)(unsafe.Pointer(v)))
}
func TexCoord4xOES(s int32, t int32, r int32, q int32) {
  C.glowTexCoord4xOES(gpTexCoord4xOES, (C.GLfixed)(s), (C.GLfixed)(t), (C.GLfixed)(r), (C.GLfixed)(q))
}
func TexCoord4xvOES(coords *int32) {
  C.glowTexCoord4xvOES(gpTexCoord4xvOES, (*C.GLfixed)(unsafe.Pointer(coords)))
}
func TexCoordFormatNV(size int32, xtype uint32, stride int32) {
  C.glowTexCoordFormatNV(gpTexCoordFormatNV, (C.GLint)(size), (C.GLenum)(xtype), (C.GLsizei)(stride))
}
func TexCoordPointerEXT(size int32, xtype uint32, stride int32, count int32, pointer unsafe.Pointer) {
  C.glowTexCoordPointerEXT(gpTexCoordPointerEXT, (C.GLint)(size), (C.GLenum)(xtype), (C.GLsizei)(stride), (C.GLsizei)(count), pointer)
}
func TexCoordPointerListIBM(size int32, xtype uint32, stride int32, pointer *unsafe.Pointer, ptrstride int32) {
  C.glowTexCoordPointerListIBM(gpTexCoordPointerListIBM, (C.GLint)(size), (C.GLenum)(xtype), (C.GLint)(stride), pointer, (C.GLint)(ptrstride))
}
func TexCoordPointervINTEL(size int32, xtype uint32, pointer *unsafe.Pointer) {
  C.glowTexCoordPointervINTEL(gpTexCoordPointervINTEL, (C.GLint)(size), (C.GLenum)(xtype), pointer)
}
func TexEnvxOES(target uint32, pname uint32, param int32) {
  C.glowTexEnvxOES(gpTexEnvxOES, (C.GLenum)(target), (C.GLenum)(pname), (C.GLfixed)(param))
}
func TexEnvxvOES(target uint32, pname uint32, params *int32) {
  C.glowTexEnvxvOES(gpTexEnvxvOES, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLfixed)(unsafe.Pointer(params)))
}
func TexFilterFuncSGIS(target uint32, filter uint32, n int32, weights *float32) {
  C.glowTexFilterFuncSGIS(gpTexFilterFuncSGIS, (C.GLenum)(target), (C.GLenum)(filter), (C.GLsizei)(n), (*C.GLfloat)(unsafe.Pointer(weights)))
}
func TexGenxOES(coord uint32, pname uint32, param int32) {
  C.glowTexGenxOES(gpTexGenxOES, (C.GLenum)(coord), (C.GLenum)(pname), (C.GLfixed)(param))
}
func TexGenxvOES(coord uint32, pname uint32, params *int32) {
  C.glowTexGenxvOES(gpTexGenxvOES, (C.GLenum)(coord), (C.GLenum)(pname), (*C.GLfixed)(unsafe.Pointer(params)))
}
// specify a one-dimensional texture image
func TexImage1D(target uint32, level int32, internalformat int32, width int32, border int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
  C.glowTexImage1D(gpTexImage1D, (C.GLenum)(target), (C.GLint)(level), (C.GLint)(internalformat), (C.GLsizei)(width), (C.GLint)(border), (C.GLenum)(format), (C.GLenum)(xtype), pixels)
}
// specify a two-dimensional texture image
func TexImage2D(target uint32, level int32, internalformat int32, width int32, height int32, border int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
  C.glowTexImage2D(gpTexImage2D, (C.GLenum)(target), (C.GLint)(level), (C.GLint)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLint)(border), (C.GLenum)(format), (C.GLenum)(xtype), pixels)
}
// establish the data storage, format, dimensions, and number of samples of a multisample texture's image
func TexImage2DMultisample(target uint32, samples int32, internalformat uint32, width int32, height int32, fixedsamplelocations bool) {
  C.glowTexImage2DMultisample(gpTexImage2DMultisample, (C.GLenum)(target), (C.GLsizei)(samples), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLboolean)(boolToInt(fixedsamplelocations)))
}
func TexImage2DMultisampleCoverageNV(target uint32, coverageSamples int32, colorSamples int32, internalFormat int32, width int32, height int32, fixedSampleLocations bool) {
  C.glowTexImage2DMultisampleCoverageNV(gpTexImage2DMultisampleCoverageNV, (C.GLenum)(target), (C.GLsizei)(coverageSamples), (C.GLsizei)(colorSamples), (C.GLint)(internalFormat), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLboolean)(boolToInt(fixedSampleLocations)))
}
// specify a three-dimensional texture image
func TexImage3D(target uint32, level int32, internalformat int32, width int32, height int32, depth int32, border int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
  C.glowTexImage3D(gpTexImage3D, (C.GLenum)(target), (C.GLint)(level), (C.GLint)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLsizei)(depth), (C.GLint)(border), (C.GLenum)(format), (C.GLenum)(xtype), pixels)
}
func TexImage3DEXT(target uint32, level int32, internalformat uint32, width int32, height int32, depth int32, border int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
  C.glowTexImage3DEXT(gpTexImage3DEXT, (C.GLenum)(target), (C.GLint)(level), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLsizei)(depth), (C.GLint)(border), (C.GLenum)(format), (C.GLenum)(xtype), pixels)
}
// establish the data storage, format, dimensions, and number of samples of a multisample texture's image
func TexImage3DMultisample(target uint32, samples int32, internalformat uint32, width int32, height int32, depth int32, fixedsamplelocations bool) {
  C.glowTexImage3DMultisample(gpTexImage3DMultisample, (C.GLenum)(target), (C.GLsizei)(samples), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLsizei)(depth), (C.GLboolean)(boolToInt(fixedsamplelocations)))
}
func TexImage3DMultisampleCoverageNV(target uint32, coverageSamples int32, colorSamples int32, internalFormat int32, width int32, height int32, depth int32, fixedSampleLocations bool) {
  C.glowTexImage3DMultisampleCoverageNV(gpTexImage3DMultisampleCoverageNV, (C.GLenum)(target), (C.GLsizei)(coverageSamples), (C.GLsizei)(colorSamples), (C.GLint)(internalFormat), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLsizei)(depth), (C.GLboolean)(boolToInt(fixedSampleLocations)))
}
func TexImage4DSGIS(target uint32, level int32, internalformat uint32, width int32, height int32, depth int32, size4d int32, border int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
  C.glowTexImage4DSGIS(gpTexImage4DSGIS, (C.GLenum)(target), (C.GLint)(level), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLsizei)(depth), (C.GLsizei)(size4d), (C.GLint)(border), (C.GLenum)(format), (C.GLenum)(xtype), pixels)
}
func TexPageCommitmentARB(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, resident bool) {
  C.glowTexPageCommitmentARB(gpTexPageCommitmentARB, (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLint)(yoffset), (C.GLint)(zoffset), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLsizei)(depth), (C.GLboolean)(boolToInt(resident)))
}
func TexParameterIiv(target uint32, pname uint32, params *int32) {
  C.glowTexParameterIiv(gpTexParameterIiv, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func TexParameterIivEXT(target uint32, pname uint32, params *int32) {
  C.glowTexParameterIivEXT(gpTexParameterIivEXT, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func TexParameterIuiv(target uint32, pname uint32, params *uint32) {
  C.glowTexParameterIuiv(gpTexParameterIuiv, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLuint)(unsafe.Pointer(params)))
}
func TexParameterIuivEXT(target uint32, pname uint32, params *uint32) {
  C.glowTexParameterIuivEXT(gpTexParameterIuivEXT, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLuint)(unsafe.Pointer(params)))
}
func TexParameterf(target uint32, pname uint32, param float32) {
  C.glowTexParameterf(gpTexParameterf, (C.GLenum)(target), (C.GLenum)(pname), (C.GLfloat)(param))
}
func TexParameterfv(target uint32, pname uint32, params *float32) {
  C.glowTexParameterfv(gpTexParameterfv, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func TexParameteri(target uint32, pname uint32, param int32) {
  C.glowTexParameteri(gpTexParameteri, (C.GLenum)(target), (C.GLenum)(pname), (C.GLint)(param))
}
func TexParameteriv(target uint32, pname uint32, params *int32) {
  C.glowTexParameteriv(gpTexParameteriv, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func TexParameterxOES(target uint32, pname uint32, param int32) {
  C.glowTexParameterxOES(gpTexParameterxOES, (C.GLenum)(target), (C.GLenum)(pname), (C.GLfixed)(param))
}
func TexParameterxvOES(target uint32, pname uint32, params *int32) {
  C.glowTexParameterxvOES(gpTexParameterxvOES, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLfixed)(unsafe.Pointer(params)))
}
func TexRenderbufferNV(target uint32, renderbuffer uint32) {
  C.glowTexRenderbufferNV(gpTexRenderbufferNV, (C.GLenum)(target), (C.GLuint)(renderbuffer))
}
// simultaneously specify storage for all levels of a one-dimensional texture
func TexStorage1D(target uint32, levels int32, internalformat uint32, width int32) {
  C.glowTexStorage1D(gpTexStorage1D, (C.GLenum)(target), (C.GLsizei)(levels), (C.GLenum)(internalformat), (C.GLsizei)(width))
}
// simultaneously specify storage for all levels of a two-dimensional or one-dimensional array texture
func TexStorage2D(target uint32, levels int32, internalformat uint32, width int32, height int32) {
  C.glowTexStorage2D(gpTexStorage2D, (C.GLenum)(target), (C.GLsizei)(levels), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height))
}
// specify storage for a two-dimensional multisample texture
func TexStorage2DMultisample(target uint32, samples int32, internalformat uint32, width int32, height int32, fixedsamplelocations bool) {
  C.glowTexStorage2DMultisample(gpTexStorage2DMultisample, (C.GLenum)(target), (C.GLsizei)(samples), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLboolean)(boolToInt(fixedsamplelocations)))
}
// simultaneously specify storage for all levels of a three-dimensional, two-dimensional array or cube-map array texture
func TexStorage3D(target uint32, levels int32, internalformat uint32, width int32, height int32, depth int32) {
  C.glowTexStorage3D(gpTexStorage3D, (C.GLenum)(target), (C.GLsizei)(levels), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLsizei)(depth))
}
// specify storage for a two-dimensional multisample array texture
func TexStorage3DMultisample(target uint32, samples int32, internalformat uint32, width int32, height int32, depth int32, fixedsamplelocations bool) {
  C.glowTexStorage3DMultisample(gpTexStorage3DMultisample, (C.GLenum)(target), (C.GLsizei)(samples), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLsizei)(depth), (C.GLboolean)(boolToInt(fixedsamplelocations)))
}
func TexStorageSparseAMD(target uint32, internalFormat uint32, width int32, height int32, depth int32, layers int32, flags uint32) {
  C.glowTexStorageSparseAMD(gpTexStorageSparseAMD, (C.GLenum)(target), (C.GLenum)(internalFormat), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLsizei)(depth), (C.GLsizei)(layers), (C.GLbitfield)(flags))
}
// specify a one-dimensional texture subimage
func TexSubImage1D(target uint32, level int32, xoffset int32, width int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
  C.glowTexSubImage1D(gpTexSubImage1D, (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLsizei)(width), (C.GLenum)(format), (C.GLenum)(xtype), pixels)
}
func TexSubImage1DEXT(target uint32, level int32, xoffset int32, width int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
  C.glowTexSubImage1DEXT(gpTexSubImage1DEXT, (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLsizei)(width), (C.GLenum)(format), (C.GLenum)(xtype), pixels)
}
// specify a two-dimensional texture subimage
func TexSubImage2D(target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
  C.glowTexSubImage2D(gpTexSubImage2D, (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLint)(yoffset), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLenum)(format), (C.GLenum)(xtype), pixels)
}
func TexSubImage2DEXT(target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
  C.glowTexSubImage2DEXT(gpTexSubImage2DEXT, (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLint)(yoffset), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLenum)(format), (C.GLenum)(xtype), pixels)
}
// specify a three-dimensional texture subimage
func TexSubImage3D(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
  C.glowTexSubImage3D(gpTexSubImage3D, (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLint)(yoffset), (C.GLint)(zoffset), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLsizei)(depth), (C.GLenum)(format), (C.GLenum)(xtype), pixels)
}
func TexSubImage3DEXT(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
  C.glowTexSubImage3DEXT(gpTexSubImage3DEXT, (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLint)(yoffset), (C.GLint)(zoffset), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLsizei)(depth), (C.GLenum)(format), (C.GLenum)(xtype), pixels)
}
func TexSubImage4DSGIS(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, woffset int32, width int32, height int32, depth int32, size4d int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
  C.glowTexSubImage4DSGIS(gpTexSubImage4DSGIS, (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLint)(yoffset), (C.GLint)(zoffset), (C.GLint)(woffset), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLsizei)(depth), (C.GLsizei)(size4d), (C.GLenum)(format), (C.GLenum)(xtype), pixels)
}
func TextureBarrierNV() {
  C.glowTextureBarrierNV(gpTextureBarrierNV)
}
func TextureBufferEXT(texture uint32, target uint32, internalformat uint32, buffer uint32) {
  C.glowTextureBufferEXT(gpTextureBufferEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLenum)(internalformat), (C.GLuint)(buffer))
}
func TextureBufferRangeEXT(texture uint32, target uint32, internalformat uint32, buffer uint32, offset int, size int) {
  C.glowTextureBufferRangeEXT(gpTextureBufferRangeEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLenum)(internalformat), (C.GLuint)(buffer), (C.GLintptr)(offset), (C.GLsizeiptr)(size))
}
func TextureColorMaskSGIS(red bool, green bool, blue bool, alpha bool) {
  C.glowTextureColorMaskSGIS(gpTextureColorMaskSGIS, (C.GLboolean)(boolToInt(red)), (C.GLboolean)(boolToInt(green)), (C.GLboolean)(boolToInt(blue)), (C.GLboolean)(boolToInt(alpha)))
}
func TextureImage1DEXT(texture uint32, target uint32, level int32, internalformat int32, width int32, border int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
  C.glowTextureImage1DEXT(gpTextureImage1DEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLint)(level), (C.GLint)(internalformat), (C.GLsizei)(width), (C.GLint)(border), (C.GLenum)(format), (C.GLenum)(xtype), pixels)
}
func TextureImage2DEXT(texture uint32, target uint32, level int32, internalformat int32, width int32, height int32, border int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
  C.glowTextureImage2DEXT(gpTextureImage2DEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLint)(level), (C.GLint)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLint)(border), (C.GLenum)(format), (C.GLenum)(xtype), pixels)
}
func TextureImage2DMultisampleCoverageNV(texture uint32, target uint32, coverageSamples int32, colorSamples int32, internalFormat int32, width int32, height int32, fixedSampleLocations bool) {
  C.glowTextureImage2DMultisampleCoverageNV(gpTextureImage2DMultisampleCoverageNV, (C.GLuint)(texture), (C.GLenum)(target), (C.GLsizei)(coverageSamples), (C.GLsizei)(colorSamples), (C.GLint)(internalFormat), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLboolean)(boolToInt(fixedSampleLocations)))
}
func TextureImage2DMultisampleNV(texture uint32, target uint32, samples int32, internalFormat int32, width int32, height int32, fixedSampleLocations bool) {
  C.glowTextureImage2DMultisampleNV(gpTextureImage2DMultisampleNV, (C.GLuint)(texture), (C.GLenum)(target), (C.GLsizei)(samples), (C.GLint)(internalFormat), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLboolean)(boolToInt(fixedSampleLocations)))
}
func TextureImage3DEXT(texture uint32, target uint32, level int32, internalformat int32, width int32, height int32, depth int32, border int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
  C.glowTextureImage3DEXT(gpTextureImage3DEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLint)(level), (C.GLint)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLsizei)(depth), (C.GLint)(border), (C.GLenum)(format), (C.GLenum)(xtype), pixels)
}
func TextureImage3DMultisampleCoverageNV(texture uint32, target uint32, coverageSamples int32, colorSamples int32, internalFormat int32, width int32, height int32, depth int32, fixedSampleLocations bool) {
  C.glowTextureImage3DMultisampleCoverageNV(gpTextureImage3DMultisampleCoverageNV, (C.GLuint)(texture), (C.GLenum)(target), (C.GLsizei)(coverageSamples), (C.GLsizei)(colorSamples), (C.GLint)(internalFormat), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLsizei)(depth), (C.GLboolean)(boolToInt(fixedSampleLocations)))
}
func TextureImage3DMultisampleNV(texture uint32, target uint32, samples int32, internalFormat int32, width int32, height int32, depth int32, fixedSampleLocations bool) {
  C.glowTextureImage3DMultisampleNV(gpTextureImage3DMultisampleNV, (C.GLuint)(texture), (C.GLenum)(target), (C.GLsizei)(samples), (C.GLint)(internalFormat), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLsizei)(depth), (C.GLboolean)(boolToInt(fixedSampleLocations)))
}
func TextureLightEXT(pname uint32) {
  C.glowTextureLightEXT(gpTextureLightEXT, (C.GLenum)(pname))
}
func TextureMaterialEXT(face uint32, mode uint32) {
  C.glowTextureMaterialEXT(gpTextureMaterialEXT, (C.GLenum)(face), (C.GLenum)(mode))
}
func TextureNormalEXT(mode uint32) {
  C.glowTextureNormalEXT(gpTextureNormalEXT, (C.GLenum)(mode))
}
func TexturePageCommitmentEXT(texture uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, resident bool) {
  C.glowTexturePageCommitmentEXT(gpTexturePageCommitmentEXT, (C.GLuint)(texture), (C.GLint)(level), (C.GLint)(xoffset), (C.GLint)(yoffset), (C.GLint)(zoffset), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLsizei)(depth), (C.GLboolean)(boolToInt(resident)))
}
func TextureParameterIivEXT(texture uint32, target uint32, pname uint32, params *int32) {
  C.glowTextureParameterIivEXT(gpTextureParameterIivEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func TextureParameterIuivEXT(texture uint32, target uint32, pname uint32, params *uint32) {
  C.glowTextureParameterIuivEXT(gpTextureParameterIuivEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLenum)(pname), (*C.GLuint)(unsafe.Pointer(params)))
}
func TextureParameterfEXT(texture uint32, target uint32, pname uint32, param float32) {
  C.glowTextureParameterfEXT(gpTextureParameterfEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLenum)(pname), (C.GLfloat)(param))
}
func TextureParameterfvEXT(texture uint32, target uint32, pname uint32, params *float32) {
  C.glowTextureParameterfvEXT(gpTextureParameterfvEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func TextureParameteriEXT(texture uint32, target uint32, pname uint32, param int32) {
  C.glowTextureParameteriEXT(gpTextureParameteriEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLenum)(pname), (C.GLint)(param))
}
func TextureParameterivEXT(texture uint32, target uint32, pname uint32, params *int32) {
  C.glowTextureParameterivEXT(gpTextureParameterivEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func TextureRangeAPPLE(target uint32, length int32, pointer unsafe.Pointer) {
  C.glowTextureRangeAPPLE(gpTextureRangeAPPLE, (C.GLenum)(target), (C.GLsizei)(length), pointer)
}
func TextureRenderbufferEXT(texture uint32, target uint32, renderbuffer uint32) {
  C.glowTextureRenderbufferEXT(gpTextureRenderbufferEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLuint)(renderbuffer))
}
func TextureStorage1DEXT(texture uint32, target uint32, levels int32, internalformat uint32, width int32) {
  C.glowTextureStorage1DEXT(gpTextureStorage1DEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLsizei)(levels), (C.GLenum)(internalformat), (C.GLsizei)(width))
}
func TextureStorage2DEXT(texture uint32, target uint32, levels int32, internalformat uint32, width int32, height int32) {
  C.glowTextureStorage2DEXT(gpTextureStorage2DEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLsizei)(levels), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height))
}
func TextureStorage2DMultisampleEXT(texture uint32, target uint32, samples int32, internalformat uint32, width int32, height int32, fixedsamplelocations bool) {
  C.glowTextureStorage2DMultisampleEXT(gpTextureStorage2DMultisampleEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLsizei)(samples), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLboolean)(boolToInt(fixedsamplelocations)))
}
func TextureStorage3DEXT(texture uint32, target uint32, levels int32, internalformat uint32, width int32, height int32, depth int32) {
  C.glowTextureStorage3DEXT(gpTextureStorage3DEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLsizei)(levels), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLsizei)(depth))
}
func TextureStorage3DMultisampleEXT(texture uint32, target uint32, samples int32, internalformat uint32, width int32, height int32, depth int32, fixedsamplelocations bool) {
  C.glowTextureStorage3DMultisampleEXT(gpTextureStorage3DMultisampleEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLsizei)(samples), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLsizei)(depth), (C.GLboolean)(boolToInt(fixedsamplelocations)))
}
func TextureStorageSparseAMD(texture uint32, target uint32, internalFormat uint32, width int32, height int32, depth int32, layers int32, flags uint32) {
  C.glowTextureStorageSparseAMD(gpTextureStorageSparseAMD, (C.GLuint)(texture), (C.GLenum)(target), (C.GLenum)(internalFormat), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLsizei)(depth), (C.GLsizei)(layers), (C.GLbitfield)(flags))
}
func TextureSubImage1DEXT(texture uint32, target uint32, level int32, xoffset int32, width int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
  C.glowTextureSubImage1DEXT(gpTextureSubImage1DEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLsizei)(width), (C.GLenum)(format), (C.GLenum)(xtype), pixels)
}
func TextureSubImage2DEXT(texture uint32, target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
  C.glowTextureSubImage2DEXT(gpTextureSubImage2DEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLint)(yoffset), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLenum)(format), (C.GLenum)(xtype), pixels)
}
func TextureSubImage3DEXT(texture uint32, target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
  C.glowTextureSubImage3DEXT(gpTextureSubImage3DEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLint)(yoffset), (C.GLint)(zoffset), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLsizei)(depth), (C.GLenum)(format), (C.GLenum)(xtype), pixels)
}
// initialize a texture as a data alias of another texture's data store
func TextureView(texture uint32, target uint32, origtexture uint32, internalformat uint32, minlevel uint32, numlevels uint32, minlayer uint32, numlayers uint32) {
  C.glowTextureView(gpTextureView, (C.GLuint)(texture), (C.GLenum)(target), (C.GLuint)(origtexture), (C.GLenum)(internalformat), (C.GLuint)(minlevel), (C.GLuint)(numlevels), (C.GLuint)(minlayer), (C.GLuint)(numlayers))
}
func TrackMatrixNV(target uint32, address uint32, matrix uint32, transform uint32) {
  C.glowTrackMatrixNV(gpTrackMatrixNV, (C.GLenum)(target), (C.GLuint)(address), (C.GLenum)(matrix), (C.GLenum)(transform))
}
func TransformFeedbackAttribsNV(count int32, attribs *int32, bufferMode uint32) {
  C.glowTransformFeedbackAttribsNV(gpTransformFeedbackAttribsNV, (C.GLsizei)(count), (*C.GLint)(unsafe.Pointer(attribs)), (C.GLenum)(bufferMode))
}
func TransformFeedbackStreamAttribsNV(count int32, attribs *int32, nbuffers int32, bufstreams *int32, bufferMode uint32) {
  C.glowTransformFeedbackStreamAttribsNV(gpTransformFeedbackStreamAttribsNV, (C.GLsizei)(count), (*C.GLint)(unsafe.Pointer(attribs)), (C.GLsizei)(nbuffers), (*C.GLint)(unsafe.Pointer(bufstreams)), (C.GLenum)(bufferMode))
}
// specify values to record in transform feedback buffers
func TransformFeedbackVaryings(program uint32, count int32, varyings **int8, bufferMode uint32) {
  C.glowTransformFeedbackVaryings(gpTransformFeedbackVaryings, (C.GLuint)(program), (C.GLsizei)(count), (**C.GLchar)(unsafe.Pointer(varyings)), (C.GLenum)(bufferMode))
}
func TransformFeedbackVaryingsEXT(program uint32, count int32, varyings **int8, bufferMode uint32) {
  C.glowTransformFeedbackVaryingsEXT(gpTransformFeedbackVaryingsEXT, (C.GLuint)(program), (C.GLsizei)(count), (**C.GLchar)(unsafe.Pointer(varyings)), (C.GLenum)(bufferMode))
}
func TransformFeedbackVaryingsNV(program uint32, count int32, locations *int32, bufferMode uint32) {
  C.glowTransformFeedbackVaryingsNV(gpTransformFeedbackVaryingsNV, (C.GLuint)(program), (C.GLsizei)(count), (*C.GLint)(unsafe.Pointer(locations)), (C.GLenum)(bufferMode))
}
func TransformPathNV(resultPath uint32, srcPath uint32, transformType uint32, transformValues *float32) {
  C.glowTransformPathNV(gpTransformPathNV, (C.GLuint)(resultPath), (C.GLuint)(srcPath), (C.GLenum)(transformType), (*C.GLfloat)(unsafe.Pointer(transformValues)))
}
func TranslatexOES(x int32, y int32, z int32) {
  C.glowTranslatexOES(gpTranslatexOES, (C.GLfixed)(x), (C.GLfixed)(y), (C.GLfixed)(z))
}
func Uniform1d(location int32, x float64) {
  C.glowUniform1d(gpUniform1d, (C.GLint)(location), (C.GLdouble)(x))
}
func Uniform1dv(location int32, count int32, value *float64) {
  C.glowUniform1dv(gpUniform1dv, (C.GLint)(location), (C.GLsizei)(count), (*C.GLdouble)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for the current program object
func Uniform1f(location int32, v0 float32) {
  C.glowUniform1f(gpUniform1f, (C.GLint)(location), (C.GLfloat)(v0))
}
func Uniform1fARB(location int32, v0 float32) {
  C.glowUniform1fARB(gpUniform1fARB, (C.GLint)(location), (C.GLfloat)(v0))
}
// Specify the value of a uniform variable for the current program object
func Uniform1fv(location int32, count int32, value *float32) {
  C.glowUniform1fv(gpUniform1fv, (C.GLint)(location), (C.GLsizei)(count), (*C.GLfloat)(unsafe.Pointer(value)))
}
func Uniform1fvARB(location int32, count int32, value *float32) {
  C.glowUniform1fvARB(gpUniform1fvARB, (C.GLint)(location), (C.GLsizei)(count), (*C.GLfloat)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for the current program object
func Uniform1i(location int32, v0 int32) {
  C.glowUniform1i(gpUniform1i, (C.GLint)(location), (C.GLint)(v0))
}
func Uniform1i64NV(location int32, x int64) {
  C.glowUniform1i64NV(gpUniform1i64NV, (C.GLint)(location), (C.GLint64EXT)(x))
}
func Uniform1i64vNV(location int32, count int32, value *int64) {
  C.glowUniform1i64vNV(gpUniform1i64vNV, (C.GLint)(location), (C.GLsizei)(count), (*C.GLint64EXT)(unsafe.Pointer(value)))
}
func Uniform1iARB(location int32, v0 int32) {
  C.glowUniform1iARB(gpUniform1iARB, (C.GLint)(location), (C.GLint)(v0))
}
// Specify the value of a uniform variable for the current program object
func Uniform1iv(location int32, count int32, value *int32) {
  C.glowUniform1iv(gpUniform1iv, (C.GLint)(location), (C.GLsizei)(count), (*C.GLint)(unsafe.Pointer(value)))
}
func Uniform1ivARB(location int32, count int32, value *int32) {
  C.glowUniform1ivARB(gpUniform1ivARB, (C.GLint)(location), (C.GLsizei)(count), (*C.GLint)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for the current program object
func Uniform1ui(location int32, v0 uint32) {
  C.glowUniform1ui(gpUniform1ui, (C.GLint)(location), (C.GLuint)(v0))
}
func Uniform1ui64NV(location int32, x uint64) {
  C.glowUniform1ui64NV(gpUniform1ui64NV, (C.GLint)(location), (C.GLuint64EXT)(x))
}
func Uniform1ui64vNV(location int32, count int32, value *uint64) {
  C.glowUniform1ui64vNV(gpUniform1ui64vNV, (C.GLint)(location), (C.GLsizei)(count), (*C.GLuint64EXT)(unsafe.Pointer(value)))
}
func Uniform1uiEXT(location int32, v0 uint32) {
  C.glowUniform1uiEXT(gpUniform1uiEXT, (C.GLint)(location), (C.GLuint)(v0))
}
// Specify the value of a uniform variable for the current program object
func Uniform1uiv(location int32, count int32, value *uint32) {
  C.glowUniform1uiv(gpUniform1uiv, (C.GLint)(location), (C.GLsizei)(count), (*C.GLuint)(unsafe.Pointer(value)))
}
func Uniform1uivEXT(location int32, count int32, value *uint32) {
  C.glowUniform1uivEXT(gpUniform1uivEXT, (C.GLint)(location), (C.GLsizei)(count), (*C.GLuint)(unsafe.Pointer(value)))
}
func Uniform2d(location int32, x float64, y float64) {
  C.glowUniform2d(gpUniform2d, (C.GLint)(location), (C.GLdouble)(x), (C.GLdouble)(y))
}
func Uniform2dv(location int32, count int32, value *float64) {
  C.glowUniform2dv(gpUniform2dv, (C.GLint)(location), (C.GLsizei)(count), (*C.GLdouble)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for the current program object
func Uniform2f(location int32, v0 float32, v1 float32) {
  C.glowUniform2f(gpUniform2f, (C.GLint)(location), (C.GLfloat)(v0), (C.GLfloat)(v1))
}
func Uniform2fARB(location int32, v0 float32, v1 float32) {
  C.glowUniform2fARB(gpUniform2fARB, (C.GLint)(location), (C.GLfloat)(v0), (C.GLfloat)(v1))
}
// Specify the value of a uniform variable for the current program object
func Uniform2fv(location int32, count int32, value *float32) {
  C.glowUniform2fv(gpUniform2fv, (C.GLint)(location), (C.GLsizei)(count), (*C.GLfloat)(unsafe.Pointer(value)))
}
func Uniform2fvARB(location int32, count int32, value *float32) {
  C.glowUniform2fvARB(gpUniform2fvARB, (C.GLint)(location), (C.GLsizei)(count), (*C.GLfloat)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for the current program object
func Uniform2i(location int32, v0 int32, v1 int32) {
  C.glowUniform2i(gpUniform2i, (C.GLint)(location), (C.GLint)(v0), (C.GLint)(v1))
}
func Uniform2i64NV(location int32, x int64, y int64) {
  C.glowUniform2i64NV(gpUniform2i64NV, (C.GLint)(location), (C.GLint64EXT)(x), (C.GLint64EXT)(y))
}
func Uniform2i64vNV(location int32, count int32, value *int64) {
  C.glowUniform2i64vNV(gpUniform2i64vNV, (C.GLint)(location), (C.GLsizei)(count), (*C.GLint64EXT)(unsafe.Pointer(value)))
}
func Uniform2iARB(location int32, v0 int32, v1 int32) {
  C.glowUniform2iARB(gpUniform2iARB, (C.GLint)(location), (C.GLint)(v0), (C.GLint)(v1))
}
// Specify the value of a uniform variable for the current program object
func Uniform2iv(location int32, count int32, value *int32) {
  C.glowUniform2iv(gpUniform2iv, (C.GLint)(location), (C.GLsizei)(count), (*C.GLint)(unsafe.Pointer(value)))
}
func Uniform2ivARB(location int32, count int32, value *int32) {
  C.glowUniform2ivARB(gpUniform2ivARB, (C.GLint)(location), (C.GLsizei)(count), (*C.GLint)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for the current program object
func Uniform2ui(location int32, v0 uint32, v1 uint32) {
  C.glowUniform2ui(gpUniform2ui, (C.GLint)(location), (C.GLuint)(v0), (C.GLuint)(v1))
}
func Uniform2ui64NV(location int32, x uint64, y uint64) {
  C.glowUniform2ui64NV(gpUniform2ui64NV, (C.GLint)(location), (C.GLuint64EXT)(x), (C.GLuint64EXT)(y))
}
func Uniform2ui64vNV(location int32, count int32, value *uint64) {
  C.glowUniform2ui64vNV(gpUniform2ui64vNV, (C.GLint)(location), (C.GLsizei)(count), (*C.GLuint64EXT)(unsafe.Pointer(value)))
}
func Uniform2uiEXT(location int32, v0 uint32, v1 uint32) {
  C.glowUniform2uiEXT(gpUniform2uiEXT, (C.GLint)(location), (C.GLuint)(v0), (C.GLuint)(v1))
}
// Specify the value of a uniform variable for the current program object
func Uniform2uiv(location int32, count int32, value *uint32) {
  C.glowUniform2uiv(gpUniform2uiv, (C.GLint)(location), (C.GLsizei)(count), (*C.GLuint)(unsafe.Pointer(value)))
}
func Uniform2uivEXT(location int32, count int32, value *uint32) {
  C.glowUniform2uivEXT(gpUniform2uivEXT, (C.GLint)(location), (C.GLsizei)(count), (*C.GLuint)(unsafe.Pointer(value)))
}
func Uniform3d(location int32, x float64, y float64, z float64) {
  C.glowUniform3d(gpUniform3d, (C.GLint)(location), (C.GLdouble)(x), (C.GLdouble)(y), (C.GLdouble)(z))
}
func Uniform3dv(location int32, count int32, value *float64) {
  C.glowUniform3dv(gpUniform3dv, (C.GLint)(location), (C.GLsizei)(count), (*C.GLdouble)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for the current program object
func Uniform3f(location int32, v0 float32, v1 float32, v2 float32) {
  C.glowUniform3f(gpUniform3f, (C.GLint)(location), (C.GLfloat)(v0), (C.GLfloat)(v1), (C.GLfloat)(v2))
}
func Uniform3fARB(location int32, v0 float32, v1 float32, v2 float32) {
  C.glowUniform3fARB(gpUniform3fARB, (C.GLint)(location), (C.GLfloat)(v0), (C.GLfloat)(v1), (C.GLfloat)(v2))
}
// Specify the value of a uniform variable for the current program object
func Uniform3fv(location int32, count int32, value *float32) {
  C.glowUniform3fv(gpUniform3fv, (C.GLint)(location), (C.GLsizei)(count), (*C.GLfloat)(unsafe.Pointer(value)))
}
func Uniform3fvARB(location int32, count int32, value *float32) {
  C.glowUniform3fvARB(gpUniform3fvARB, (C.GLint)(location), (C.GLsizei)(count), (*C.GLfloat)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for the current program object
func Uniform3i(location int32, v0 int32, v1 int32, v2 int32) {
  C.glowUniform3i(gpUniform3i, (C.GLint)(location), (C.GLint)(v0), (C.GLint)(v1), (C.GLint)(v2))
}
func Uniform3i64NV(location int32, x int64, y int64, z int64) {
  C.glowUniform3i64NV(gpUniform3i64NV, (C.GLint)(location), (C.GLint64EXT)(x), (C.GLint64EXT)(y), (C.GLint64EXT)(z))
}
func Uniform3i64vNV(location int32, count int32, value *int64) {
  C.glowUniform3i64vNV(gpUniform3i64vNV, (C.GLint)(location), (C.GLsizei)(count), (*C.GLint64EXT)(unsafe.Pointer(value)))
}
func Uniform3iARB(location int32, v0 int32, v1 int32, v2 int32) {
  C.glowUniform3iARB(gpUniform3iARB, (C.GLint)(location), (C.GLint)(v0), (C.GLint)(v1), (C.GLint)(v2))
}
// Specify the value of a uniform variable for the current program object
func Uniform3iv(location int32, count int32, value *int32) {
  C.glowUniform3iv(gpUniform3iv, (C.GLint)(location), (C.GLsizei)(count), (*C.GLint)(unsafe.Pointer(value)))
}
func Uniform3ivARB(location int32, count int32, value *int32) {
  C.glowUniform3ivARB(gpUniform3ivARB, (C.GLint)(location), (C.GLsizei)(count), (*C.GLint)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for the current program object
func Uniform3ui(location int32, v0 uint32, v1 uint32, v2 uint32) {
  C.glowUniform3ui(gpUniform3ui, (C.GLint)(location), (C.GLuint)(v0), (C.GLuint)(v1), (C.GLuint)(v2))
}
func Uniform3ui64NV(location int32, x uint64, y uint64, z uint64) {
  C.glowUniform3ui64NV(gpUniform3ui64NV, (C.GLint)(location), (C.GLuint64EXT)(x), (C.GLuint64EXT)(y), (C.GLuint64EXT)(z))
}
func Uniform3ui64vNV(location int32, count int32, value *uint64) {
  C.glowUniform3ui64vNV(gpUniform3ui64vNV, (C.GLint)(location), (C.GLsizei)(count), (*C.GLuint64EXT)(unsafe.Pointer(value)))
}
func Uniform3uiEXT(location int32, v0 uint32, v1 uint32, v2 uint32) {
  C.glowUniform3uiEXT(gpUniform3uiEXT, (C.GLint)(location), (C.GLuint)(v0), (C.GLuint)(v1), (C.GLuint)(v2))
}
// Specify the value of a uniform variable for the current program object
func Uniform3uiv(location int32, count int32, value *uint32) {
  C.glowUniform3uiv(gpUniform3uiv, (C.GLint)(location), (C.GLsizei)(count), (*C.GLuint)(unsafe.Pointer(value)))
}
func Uniform3uivEXT(location int32, count int32, value *uint32) {
  C.glowUniform3uivEXT(gpUniform3uivEXT, (C.GLint)(location), (C.GLsizei)(count), (*C.GLuint)(unsafe.Pointer(value)))
}
func Uniform4d(location int32, x float64, y float64, z float64, w float64) {
  C.glowUniform4d(gpUniform4d, (C.GLint)(location), (C.GLdouble)(x), (C.GLdouble)(y), (C.GLdouble)(z), (C.GLdouble)(w))
}
func Uniform4dv(location int32, count int32, value *float64) {
  C.glowUniform4dv(gpUniform4dv, (C.GLint)(location), (C.GLsizei)(count), (*C.GLdouble)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for the current program object
func Uniform4f(location int32, v0 float32, v1 float32, v2 float32, v3 float32) {
  C.glowUniform4f(gpUniform4f, (C.GLint)(location), (C.GLfloat)(v0), (C.GLfloat)(v1), (C.GLfloat)(v2), (C.GLfloat)(v3))
}
func Uniform4fARB(location int32, v0 float32, v1 float32, v2 float32, v3 float32) {
  C.glowUniform4fARB(gpUniform4fARB, (C.GLint)(location), (C.GLfloat)(v0), (C.GLfloat)(v1), (C.GLfloat)(v2), (C.GLfloat)(v3))
}
// Specify the value of a uniform variable for the current program object
func Uniform4fv(location int32, count int32, value *float32) {
  C.glowUniform4fv(gpUniform4fv, (C.GLint)(location), (C.GLsizei)(count), (*C.GLfloat)(unsafe.Pointer(value)))
}
func Uniform4fvARB(location int32, count int32, value *float32) {
  C.glowUniform4fvARB(gpUniform4fvARB, (C.GLint)(location), (C.GLsizei)(count), (*C.GLfloat)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for the current program object
func Uniform4i(location int32, v0 int32, v1 int32, v2 int32, v3 int32) {
  C.glowUniform4i(gpUniform4i, (C.GLint)(location), (C.GLint)(v0), (C.GLint)(v1), (C.GLint)(v2), (C.GLint)(v3))
}
func Uniform4i64NV(location int32, x int64, y int64, z int64, w int64) {
  C.glowUniform4i64NV(gpUniform4i64NV, (C.GLint)(location), (C.GLint64EXT)(x), (C.GLint64EXT)(y), (C.GLint64EXT)(z), (C.GLint64EXT)(w))
}
func Uniform4i64vNV(location int32, count int32, value *int64) {
  C.glowUniform4i64vNV(gpUniform4i64vNV, (C.GLint)(location), (C.GLsizei)(count), (*C.GLint64EXT)(unsafe.Pointer(value)))
}
func Uniform4iARB(location int32, v0 int32, v1 int32, v2 int32, v3 int32) {
  C.glowUniform4iARB(gpUniform4iARB, (C.GLint)(location), (C.GLint)(v0), (C.GLint)(v1), (C.GLint)(v2), (C.GLint)(v3))
}
// Specify the value of a uniform variable for the current program object
func Uniform4iv(location int32, count int32, value *int32) {
  C.glowUniform4iv(gpUniform4iv, (C.GLint)(location), (C.GLsizei)(count), (*C.GLint)(unsafe.Pointer(value)))
}
func Uniform4ivARB(location int32, count int32, value *int32) {
  C.glowUniform4ivARB(gpUniform4ivARB, (C.GLint)(location), (C.GLsizei)(count), (*C.GLint)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for the current program object
func Uniform4ui(location int32, v0 uint32, v1 uint32, v2 uint32, v3 uint32) {
  C.glowUniform4ui(gpUniform4ui, (C.GLint)(location), (C.GLuint)(v0), (C.GLuint)(v1), (C.GLuint)(v2), (C.GLuint)(v3))
}
func Uniform4ui64NV(location int32, x uint64, y uint64, z uint64, w uint64) {
  C.glowUniform4ui64NV(gpUniform4ui64NV, (C.GLint)(location), (C.GLuint64EXT)(x), (C.GLuint64EXT)(y), (C.GLuint64EXT)(z), (C.GLuint64EXT)(w))
}
func Uniform4ui64vNV(location int32, count int32, value *uint64) {
  C.glowUniform4ui64vNV(gpUniform4ui64vNV, (C.GLint)(location), (C.GLsizei)(count), (*C.GLuint64EXT)(unsafe.Pointer(value)))
}
func Uniform4uiEXT(location int32, v0 uint32, v1 uint32, v2 uint32, v3 uint32) {
  C.glowUniform4uiEXT(gpUniform4uiEXT, (C.GLint)(location), (C.GLuint)(v0), (C.GLuint)(v1), (C.GLuint)(v2), (C.GLuint)(v3))
}
// Specify the value of a uniform variable for the current program object
func Uniform4uiv(location int32, count int32, value *uint32) {
  C.glowUniform4uiv(gpUniform4uiv, (C.GLint)(location), (C.GLsizei)(count), (*C.GLuint)(unsafe.Pointer(value)))
}
func Uniform4uivEXT(location int32, count int32, value *uint32) {
  C.glowUniform4uivEXT(gpUniform4uivEXT, (C.GLint)(location), (C.GLsizei)(count), (*C.GLuint)(unsafe.Pointer(value)))
}
// assign a binding point to an active uniform block
func UniformBlockBinding(program uint32, uniformBlockIndex uint32, uniformBlockBinding uint32) {
  C.glowUniformBlockBinding(gpUniformBlockBinding, (C.GLuint)(program), (C.GLuint)(uniformBlockIndex), (C.GLuint)(uniformBlockBinding))
}
func UniformBufferEXT(program uint32, location int32, buffer uint32) {
  C.glowUniformBufferEXT(gpUniformBufferEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLuint)(buffer))
}
func UniformHandleui64ARB(location int32, value uint64) {
  C.glowUniformHandleui64ARB(gpUniformHandleui64ARB, (C.GLint)(location), (C.GLuint64)(value))
}
func UniformHandleui64NV(location int32, value uint64) {
  C.glowUniformHandleui64NV(gpUniformHandleui64NV, (C.GLint)(location), (C.GLuint64)(value))
}
func UniformHandleui64vARB(location int32, count int32, value *uint64) {
  C.glowUniformHandleui64vARB(gpUniformHandleui64vARB, (C.GLint)(location), (C.GLsizei)(count), (*C.GLuint64)(unsafe.Pointer(value)))
}
func UniformHandleui64vNV(location int32, count int32, value *uint64) {
  C.glowUniformHandleui64vNV(gpUniformHandleui64vNV, (C.GLint)(location), (C.GLsizei)(count), (*C.GLuint64)(unsafe.Pointer(value)))
}
func UniformMatrix2dv(location int32, count int32, transpose bool, value *float64) {
  C.glowUniformMatrix2dv(gpUniformMatrix2dv, (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLdouble)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for the current program object
func UniformMatrix2fv(location int32, count int32, transpose bool, value *float32) {
  C.glowUniformMatrix2fv(gpUniformMatrix2fv, (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLfloat)(unsafe.Pointer(value)))
}
func UniformMatrix2fvARB(location int32, count int32, transpose bool, value *float32) {
  C.glowUniformMatrix2fvARB(gpUniformMatrix2fvARB, (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLfloat)(unsafe.Pointer(value)))
}
func UniformMatrix2x3dv(location int32, count int32, transpose bool, value *float64) {
  C.glowUniformMatrix2x3dv(gpUniformMatrix2x3dv, (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLdouble)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for the current program object
func UniformMatrix2x3fv(location int32, count int32, transpose bool, value *float32) {
  C.glowUniformMatrix2x3fv(gpUniformMatrix2x3fv, (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLfloat)(unsafe.Pointer(value)))
}
func UniformMatrix2x4dv(location int32, count int32, transpose bool, value *float64) {
  C.glowUniformMatrix2x4dv(gpUniformMatrix2x4dv, (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLdouble)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for the current program object
func UniformMatrix2x4fv(location int32, count int32, transpose bool, value *float32) {
  C.glowUniformMatrix2x4fv(gpUniformMatrix2x4fv, (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLfloat)(unsafe.Pointer(value)))
}
func UniformMatrix3dv(location int32, count int32, transpose bool, value *float64) {
  C.glowUniformMatrix3dv(gpUniformMatrix3dv, (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLdouble)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for the current program object
func UniformMatrix3fv(location int32, count int32, transpose bool, value *float32) {
  C.glowUniformMatrix3fv(gpUniformMatrix3fv, (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLfloat)(unsafe.Pointer(value)))
}
func UniformMatrix3fvARB(location int32, count int32, transpose bool, value *float32) {
  C.glowUniformMatrix3fvARB(gpUniformMatrix3fvARB, (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLfloat)(unsafe.Pointer(value)))
}
func UniformMatrix3x2dv(location int32, count int32, transpose bool, value *float64) {
  C.glowUniformMatrix3x2dv(gpUniformMatrix3x2dv, (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLdouble)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for the current program object
func UniformMatrix3x2fv(location int32, count int32, transpose bool, value *float32) {
  C.glowUniformMatrix3x2fv(gpUniformMatrix3x2fv, (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLfloat)(unsafe.Pointer(value)))
}
func UniformMatrix3x4dv(location int32, count int32, transpose bool, value *float64) {
  C.glowUniformMatrix3x4dv(gpUniformMatrix3x4dv, (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLdouble)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for the current program object
func UniformMatrix3x4fv(location int32, count int32, transpose bool, value *float32) {
  C.glowUniformMatrix3x4fv(gpUniformMatrix3x4fv, (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLfloat)(unsafe.Pointer(value)))
}
func UniformMatrix4dv(location int32, count int32, transpose bool, value *float64) {
  C.glowUniformMatrix4dv(gpUniformMatrix4dv, (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLdouble)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for the current program object
func UniformMatrix4fv(location int32, count int32, transpose bool, value *float32) {
  C.glowUniformMatrix4fv(gpUniformMatrix4fv, (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLfloat)(unsafe.Pointer(value)))
}
func UniformMatrix4fvARB(location int32, count int32, transpose bool, value *float32) {
  C.glowUniformMatrix4fvARB(gpUniformMatrix4fvARB, (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLfloat)(unsafe.Pointer(value)))
}
func UniformMatrix4x2dv(location int32, count int32, transpose bool, value *float64) {
  C.glowUniformMatrix4x2dv(gpUniformMatrix4x2dv, (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLdouble)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for the current program object
func UniformMatrix4x2fv(location int32, count int32, transpose bool, value *float32) {
  C.glowUniformMatrix4x2fv(gpUniformMatrix4x2fv, (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLfloat)(unsafe.Pointer(value)))
}
func UniformMatrix4x3dv(location int32, count int32, transpose bool, value *float64) {
  C.glowUniformMatrix4x3dv(gpUniformMatrix4x3dv, (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLdouble)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for the current program object
func UniformMatrix4x3fv(location int32, count int32, transpose bool, value *float32) {
  C.glowUniformMatrix4x3fv(gpUniformMatrix4x3fv, (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLfloat)(unsafe.Pointer(value)))
}
func UniformSubroutinesuiv(shadertype uint32, count int32, indices *uint32) {
  C.glowUniformSubroutinesuiv(gpUniformSubroutinesuiv, (C.GLenum)(shadertype), (C.GLsizei)(count), (*C.GLuint)(unsafe.Pointer(indices)))
}
func Uniformui64NV(location int32, value uint64) {
  C.glowUniformui64NV(gpUniformui64NV, (C.GLint)(location), (C.GLuint64EXT)(value))
}
func Uniformui64vNV(location int32, count int32, value *uint64) {
  C.glowUniformui64vNV(gpUniformui64vNV, (C.GLint)(location), (C.GLsizei)(count), (*C.GLuint64EXT)(unsafe.Pointer(value)))
}
func UnlockArraysEXT() {
  C.glowUnlockArraysEXT(gpUnlockArraysEXT)
}
func UnmapBuffer(target uint32) bool {
  ret := C.glowUnmapBuffer(gpUnmapBuffer, (C.GLenum)(target))
  return ret == TRUE
}
func UnmapBufferARB(target uint32) bool {
  ret := C.glowUnmapBufferARB(gpUnmapBufferARB, (C.GLenum)(target))
  return ret == TRUE
}
func UnmapNamedBufferEXT(buffer uint32) bool {
  ret := C.glowUnmapNamedBufferEXT(gpUnmapNamedBufferEXT, (C.GLuint)(buffer))
  return ret == TRUE
}
func UnmapObjectBufferATI(buffer uint32) {
  C.glowUnmapObjectBufferATI(gpUnmapObjectBufferATI, (C.GLuint)(buffer))
}
func UnmapTexture2DINTEL(texture uint32, level int32) {
  C.glowUnmapTexture2DINTEL(gpUnmapTexture2DINTEL, (C.GLuint)(texture), (C.GLint)(level))
}
func UpdateObjectBufferATI(buffer uint32, offset uint32, size int32, pointer unsafe.Pointer, preserve uint32) {
  C.glowUpdateObjectBufferATI(gpUpdateObjectBufferATI, (C.GLuint)(buffer), (C.GLuint)(offset), (C.GLsizei)(size), pointer, (C.GLenum)(preserve))
}
// Installs a program object as part of current rendering state
func UseProgram(program uint32) {
  C.glowUseProgram(gpUseProgram, (C.GLuint)(program))
}
func UseProgramObjectARB(programObj uintptr) {
  C.glowUseProgramObjectARB(gpUseProgramObjectARB, (C.GLhandleARB)(programObj))
}
// bind stages of a program object to a program pipeline
func UseProgramStages(pipeline uint32, stages uint32, program uint32) {
  C.glowUseProgramStages(gpUseProgramStages, (C.GLuint)(pipeline), (C.GLbitfield)(stages), (C.GLuint)(program))
}
func UseProgramStagesEXT(pipeline uint32, stages uint32, program uint32) {
  C.glowUseProgramStagesEXT(gpUseProgramStagesEXT, (C.GLuint)(pipeline), (C.GLbitfield)(stages), (C.GLuint)(program))
}
func UseShaderProgramEXT(xtype uint32, program uint32) {
  C.glowUseShaderProgramEXT(gpUseShaderProgramEXT, (C.GLenum)(xtype), (C.GLuint)(program))
}
func VDPAUFiniNV() {
  C.glowVDPAUFiniNV(gpVDPAUFiniNV)
}
func VDPAUGetSurfaceivNV(surface uintptr, pname uint32, bufSize int32, length *int32, values *int32) {
  C.glowVDPAUGetSurfaceivNV(gpVDPAUGetSurfaceivNV, (C.GLvdpauSurfaceNV)(surface), (C.GLenum)(pname), (C.GLsizei)(bufSize), (*C.GLsizei)(unsafe.Pointer(length)), (*C.GLint)(unsafe.Pointer(values)))
}
func VDPAUInitNV(vdpDevice unsafe.Pointer, getProcAddress unsafe.Pointer) {
  C.glowVDPAUInitNV(gpVDPAUInitNV, vdpDevice, getProcAddress)
}
func VDPAUIsSurfaceNV(surface uintptr) bool {
  ret := C.glowVDPAUIsSurfaceNV(gpVDPAUIsSurfaceNV, (C.GLvdpauSurfaceNV)(surface))
  return ret == TRUE
}
func VDPAUMapSurfacesNV(numSurfaces int32, surfaces *uintptr) {
  C.glowVDPAUMapSurfacesNV(gpVDPAUMapSurfacesNV, (C.GLsizei)(numSurfaces), (*C.GLvdpauSurfaceNV)(unsafe.Pointer(surfaces)))
}
func VDPAURegisterOutputSurfaceNV(vdpSurface unsafe.Pointer, target uint32, numTextureNames int32, textureNames *uint32) uintptr {
  ret := C.glowVDPAURegisterOutputSurfaceNV(gpVDPAURegisterOutputSurfaceNV, vdpSurface, (C.GLenum)(target), (C.GLsizei)(numTextureNames), (*C.GLuint)(unsafe.Pointer(textureNames)))
  return (uintptr)(ret)
}
func VDPAURegisterVideoSurfaceNV(vdpSurface unsafe.Pointer, target uint32, numTextureNames int32, textureNames *uint32) uintptr {
  ret := C.glowVDPAURegisterVideoSurfaceNV(gpVDPAURegisterVideoSurfaceNV, vdpSurface, (C.GLenum)(target), (C.GLsizei)(numTextureNames), (*C.GLuint)(unsafe.Pointer(textureNames)))
  return (uintptr)(ret)
}
func VDPAUSurfaceAccessNV(surface uintptr, access uint32) {
  C.glowVDPAUSurfaceAccessNV(gpVDPAUSurfaceAccessNV, (C.GLvdpauSurfaceNV)(surface), (C.GLenum)(access))
}
func VDPAUUnmapSurfacesNV(numSurface int32, surfaces *uintptr) {
  C.glowVDPAUUnmapSurfacesNV(gpVDPAUUnmapSurfacesNV, (C.GLsizei)(numSurface), (*C.GLvdpauSurfaceNV)(unsafe.Pointer(surfaces)))
}
func VDPAUUnregisterSurfaceNV(surface uintptr) {
  C.glowVDPAUUnregisterSurfaceNV(gpVDPAUUnregisterSurfaceNV, (C.GLvdpauSurfaceNV)(surface))
}
// Validates a program object
func ValidateProgram(program uint32) {
  C.glowValidateProgram(gpValidateProgram, (C.GLuint)(program))
}
func ValidateProgramARB(programObj uintptr) {
  C.glowValidateProgramARB(gpValidateProgramARB, (C.GLhandleARB)(programObj))
}
// validate a program pipeline object against current GL state
func ValidateProgramPipeline(pipeline uint32) {
  C.glowValidateProgramPipeline(gpValidateProgramPipeline, (C.GLuint)(pipeline))
}
func ValidateProgramPipelineEXT(pipeline uint32) {
  C.glowValidateProgramPipelineEXT(gpValidateProgramPipelineEXT, (C.GLuint)(pipeline))
}
func VariantArrayObjectATI(id uint32, xtype uint32, stride int32, buffer uint32, offset uint32) {
  C.glowVariantArrayObjectATI(gpVariantArrayObjectATI, (C.GLuint)(id), (C.GLenum)(xtype), (C.GLsizei)(stride), (C.GLuint)(buffer), (C.GLuint)(offset))
}
func VariantPointerEXT(id uint32, xtype uint32, stride uint32, addr unsafe.Pointer) {
  C.glowVariantPointerEXT(gpVariantPointerEXT, (C.GLuint)(id), (C.GLenum)(xtype), (C.GLuint)(stride), addr)
}
func VariantbvEXT(id uint32, addr *int8) {
  C.glowVariantbvEXT(gpVariantbvEXT, (C.GLuint)(id), (*C.GLbyte)(unsafe.Pointer(addr)))
}
func VariantdvEXT(id uint32, addr *float64) {
  C.glowVariantdvEXT(gpVariantdvEXT, (C.GLuint)(id), (*C.GLdouble)(unsafe.Pointer(addr)))
}
func VariantfvEXT(id uint32, addr *float32) {
  C.glowVariantfvEXT(gpVariantfvEXT, (C.GLuint)(id), (*C.GLfloat)(unsafe.Pointer(addr)))
}
func VariantivEXT(id uint32, addr *int32) {
  C.glowVariantivEXT(gpVariantivEXT, (C.GLuint)(id), (*C.GLint)(unsafe.Pointer(addr)))
}
func VariantsvEXT(id uint32, addr *int16) {
  C.glowVariantsvEXT(gpVariantsvEXT, (C.GLuint)(id), (*C.GLshort)(unsafe.Pointer(addr)))
}
func VariantubvEXT(id uint32, addr *uint8) {
  C.glowVariantubvEXT(gpVariantubvEXT, (C.GLuint)(id), (*C.GLubyte)(unsafe.Pointer(addr)))
}
func VariantuivEXT(id uint32, addr *uint32) {
  C.glowVariantuivEXT(gpVariantuivEXT, (C.GLuint)(id), (*C.GLuint)(unsafe.Pointer(addr)))
}
func VariantusvEXT(id uint32, addr *uint16) {
  C.glowVariantusvEXT(gpVariantusvEXT, (C.GLuint)(id), (*C.GLushort)(unsafe.Pointer(addr)))
}
func Vertex2bOES(x int8, y int8) {
  C.glowVertex2bOES(gpVertex2bOES, (C.GLbyte)(x), (C.GLbyte)(y))
}
func Vertex2bvOES(coords *int8) {
  C.glowVertex2bvOES(gpVertex2bvOES, (*C.GLbyte)(unsafe.Pointer(coords)))
}
func Vertex2hNV(x uint16, y uint16) {
  C.glowVertex2hNV(gpVertex2hNV, (C.GLhalfNV)(x), (C.GLhalfNV)(y))
}
func Vertex2hvNV(v *uint16) {
  C.glowVertex2hvNV(gpVertex2hvNV, (*C.GLhalfNV)(unsafe.Pointer(v)))
}
func Vertex2xOES(x int32) {
  C.glowVertex2xOES(gpVertex2xOES, (C.GLfixed)(x))
}
func Vertex2xvOES(coords *int32) {
  C.glowVertex2xvOES(gpVertex2xvOES, (*C.GLfixed)(unsafe.Pointer(coords)))
}
func Vertex3bOES(x int8, y int8, z int8) {
  C.glowVertex3bOES(gpVertex3bOES, (C.GLbyte)(x), (C.GLbyte)(y), (C.GLbyte)(z))
}
func Vertex3bvOES(coords *int8) {
  C.glowVertex3bvOES(gpVertex3bvOES, (*C.GLbyte)(unsafe.Pointer(coords)))
}
func Vertex3hNV(x uint16, y uint16, z uint16) {
  C.glowVertex3hNV(gpVertex3hNV, (C.GLhalfNV)(x), (C.GLhalfNV)(y), (C.GLhalfNV)(z))
}
func Vertex3hvNV(v *uint16) {
  C.glowVertex3hvNV(gpVertex3hvNV, (*C.GLhalfNV)(unsafe.Pointer(v)))
}
func Vertex3xOES(x int32, y int32) {
  C.glowVertex3xOES(gpVertex3xOES, (C.GLfixed)(x), (C.GLfixed)(y))
}
func Vertex3xvOES(coords *int32) {
  C.glowVertex3xvOES(gpVertex3xvOES, (*C.GLfixed)(unsafe.Pointer(coords)))
}
func Vertex4bOES(x int8, y int8, z int8, w int8) {
  C.glowVertex4bOES(gpVertex4bOES, (C.GLbyte)(x), (C.GLbyte)(y), (C.GLbyte)(z), (C.GLbyte)(w))
}
func Vertex4bvOES(coords *int8) {
  C.glowVertex4bvOES(gpVertex4bvOES, (*C.GLbyte)(unsafe.Pointer(coords)))
}
func Vertex4hNV(x uint16, y uint16, z uint16, w uint16) {
  C.glowVertex4hNV(gpVertex4hNV, (C.GLhalfNV)(x), (C.GLhalfNV)(y), (C.GLhalfNV)(z), (C.GLhalfNV)(w))
}
func Vertex4hvNV(v *uint16) {
  C.glowVertex4hvNV(gpVertex4hvNV, (*C.GLhalfNV)(unsafe.Pointer(v)))
}
func Vertex4xOES(x int32, y int32, z int32) {
  C.glowVertex4xOES(gpVertex4xOES, (C.GLfixed)(x), (C.GLfixed)(y), (C.GLfixed)(z))
}
func Vertex4xvOES(coords *int32) {
  C.glowVertex4xvOES(gpVertex4xvOES, (*C.GLfixed)(unsafe.Pointer(coords)))
}
func VertexArrayBindVertexBufferEXT(vaobj uint32, bindingindex uint32, buffer uint32, offset int, stride int32) {
  C.glowVertexArrayBindVertexBufferEXT(gpVertexArrayBindVertexBufferEXT, (C.GLuint)(vaobj), (C.GLuint)(bindingindex), (C.GLuint)(buffer), (C.GLintptr)(offset), (C.GLsizei)(stride))
}
func VertexArrayColorOffsetEXT(vaobj uint32, buffer uint32, size int32, xtype uint32, stride int32, offset int) {
  C.glowVertexArrayColorOffsetEXT(gpVertexArrayColorOffsetEXT, (C.GLuint)(vaobj), (C.GLuint)(buffer), (C.GLint)(size), (C.GLenum)(xtype), (C.GLsizei)(stride), (C.GLintptr)(offset))
}
func VertexArrayEdgeFlagOffsetEXT(vaobj uint32, buffer uint32, stride int32, offset int) {
  C.glowVertexArrayEdgeFlagOffsetEXT(gpVertexArrayEdgeFlagOffsetEXT, (C.GLuint)(vaobj), (C.GLuint)(buffer), (C.GLsizei)(stride), (C.GLintptr)(offset))
}
func VertexArrayFogCoordOffsetEXT(vaobj uint32, buffer uint32, xtype uint32, stride int32, offset int) {
  C.glowVertexArrayFogCoordOffsetEXT(gpVertexArrayFogCoordOffsetEXT, (C.GLuint)(vaobj), (C.GLuint)(buffer), (C.GLenum)(xtype), (C.GLsizei)(stride), (C.GLintptr)(offset))
}
func VertexArrayIndexOffsetEXT(vaobj uint32, buffer uint32, xtype uint32, stride int32, offset int) {
  C.glowVertexArrayIndexOffsetEXT(gpVertexArrayIndexOffsetEXT, (C.GLuint)(vaobj), (C.GLuint)(buffer), (C.GLenum)(xtype), (C.GLsizei)(stride), (C.GLintptr)(offset))
}
func VertexArrayMultiTexCoordOffsetEXT(vaobj uint32, buffer uint32, texunit uint32, size int32, xtype uint32, stride int32, offset int) {
  C.glowVertexArrayMultiTexCoordOffsetEXT(gpVertexArrayMultiTexCoordOffsetEXT, (C.GLuint)(vaobj), (C.GLuint)(buffer), (C.GLenum)(texunit), (C.GLint)(size), (C.GLenum)(xtype), (C.GLsizei)(stride), (C.GLintptr)(offset))
}
func VertexArrayNormalOffsetEXT(vaobj uint32, buffer uint32, xtype uint32, stride int32, offset int) {
  C.glowVertexArrayNormalOffsetEXT(gpVertexArrayNormalOffsetEXT, (C.GLuint)(vaobj), (C.GLuint)(buffer), (C.GLenum)(xtype), (C.GLsizei)(stride), (C.GLintptr)(offset))
}
func VertexArrayParameteriAPPLE(pname uint32, param int32) {
  C.glowVertexArrayParameteriAPPLE(gpVertexArrayParameteriAPPLE, (C.GLenum)(pname), (C.GLint)(param))
}
func VertexArrayRangeAPPLE(length int32, pointer unsafe.Pointer) {
  C.glowVertexArrayRangeAPPLE(gpVertexArrayRangeAPPLE, (C.GLsizei)(length), pointer)
}
func VertexArrayRangeNV(length int32, pointer unsafe.Pointer) {
  C.glowVertexArrayRangeNV(gpVertexArrayRangeNV, (C.GLsizei)(length), pointer)
}
func VertexArraySecondaryColorOffsetEXT(vaobj uint32, buffer uint32, size int32, xtype uint32, stride int32, offset int) {
  C.glowVertexArraySecondaryColorOffsetEXT(gpVertexArraySecondaryColorOffsetEXT, (C.GLuint)(vaobj), (C.GLuint)(buffer), (C.GLint)(size), (C.GLenum)(xtype), (C.GLsizei)(stride), (C.GLintptr)(offset))
}
func VertexArrayTexCoordOffsetEXT(vaobj uint32, buffer uint32, size int32, xtype uint32, stride int32, offset int) {
  C.glowVertexArrayTexCoordOffsetEXT(gpVertexArrayTexCoordOffsetEXT, (C.GLuint)(vaobj), (C.GLuint)(buffer), (C.GLint)(size), (C.GLenum)(xtype), (C.GLsizei)(stride), (C.GLintptr)(offset))
}
func VertexArrayVertexAttribBindingEXT(vaobj uint32, attribindex uint32, bindingindex uint32) {
  C.glowVertexArrayVertexAttribBindingEXT(gpVertexArrayVertexAttribBindingEXT, (C.GLuint)(vaobj), (C.GLuint)(attribindex), (C.GLuint)(bindingindex))
}
func VertexArrayVertexAttribDivisorEXT(vaobj uint32, index uint32, divisor uint32) {
  C.glowVertexArrayVertexAttribDivisorEXT(gpVertexArrayVertexAttribDivisorEXT, (C.GLuint)(vaobj), (C.GLuint)(index), (C.GLuint)(divisor))
}
func VertexArrayVertexAttribFormatEXT(vaobj uint32, attribindex uint32, size int32, xtype uint32, normalized bool, relativeoffset uint32) {
  C.glowVertexArrayVertexAttribFormatEXT(gpVertexArrayVertexAttribFormatEXT, (C.GLuint)(vaobj), (C.GLuint)(attribindex), (C.GLint)(size), (C.GLenum)(xtype), (C.GLboolean)(boolToInt(normalized)), (C.GLuint)(relativeoffset))
}
func VertexArrayVertexAttribIFormatEXT(vaobj uint32, attribindex uint32, size int32, xtype uint32, relativeoffset uint32) {
  C.glowVertexArrayVertexAttribIFormatEXT(gpVertexArrayVertexAttribIFormatEXT, (C.GLuint)(vaobj), (C.GLuint)(attribindex), (C.GLint)(size), (C.GLenum)(xtype), (C.GLuint)(relativeoffset))
}
func VertexArrayVertexAttribIOffsetEXT(vaobj uint32, buffer uint32, index uint32, size int32, xtype uint32, stride int32, offset int) {
  C.glowVertexArrayVertexAttribIOffsetEXT(gpVertexArrayVertexAttribIOffsetEXT, (C.GLuint)(vaobj), (C.GLuint)(buffer), (C.GLuint)(index), (C.GLint)(size), (C.GLenum)(xtype), (C.GLsizei)(stride), (C.GLintptr)(offset))
}
func VertexArrayVertexAttribLFormatEXT(vaobj uint32, attribindex uint32, size int32, xtype uint32, relativeoffset uint32) {
  C.glowVertexArrayVertexAttribLFormatEXT(gpVertexArrayVertexAttribLFormatEXT, (C.GLuint)(vaobj), (C.GLuint)(attribindex), (C.GLint)(size), (C.GLenum)(xtype), (C.GLuint)(relativeoffset))
}
func VertexArrayVertexAttribLOffsetEXT(vaobj uint32, buffer uint32, index uint32, size int32, xtype uint32, stride int32, offset int) {
  C.glowVertexArrayVertexAttribLOffsetEXT(gpVertexArrayVertexAttribLOffsetEXT, (C.GLuint)(vaobj), (C.GLuint)(buffer), (C.GLuint)(index), (C.GLint)(size), (C.GLenum)(xtype), (C.GLsizei)(stride), (C.GLintptr)(offset))
}
func VertexArrayVertexAttribOffsetEXT(vaobj uint32, buffer uint32, index uint32, size int32, xtype uint32, normalized bool, stride int32, offset int) {
  C.glowVertexArrayVertexAttribOffsetEXT(gpVertexArrayVertexAttribOffsetEXT, (C.GLuint)(vaobj), (C.GLuint)(buffer), (C.GLuint)(index), (C.GLint)(size), (C.GLenum)(xtype), (C.GLboolean)(boolToInt(normalized)), (C.GLsizei)(stride), (C.GLintptr)(offset))
}
func VertexArrayVertexBindingDivisorEXT(vaobj uint32, bindingindex uint32, divisor uint32) {
  C.glowVertexArrayVertexBindingDivisorEXT(gpVertexArrayVertexBindingDivisorEXT, (C.GLuint)(vaobj), (C.GLuint)(bindingindex), (C.GLuint)(divisor))
}
func VertexArrayVertexOffsetEXT(vaobj uint32, buffer uint32, size int32, xtype uint32, stride int32, offset int) {
  C.glowVertexArrayVertexOffsetEXT(gpVertexArrayVertexOffsetEXT, (C.GLuint)(vaobj), (C.GLuint)(buffer), (C.GLint)(size), (C.GLenum)(xtype), (C.GLsizei)(stride), (C.GLintptr)(offset))
}
func VertexAttrib1d(index uint32, x float64) {
  C.glowVertexAttrib1d(gpVertexAttrib1d, (C.GLuint)(index), (C.GLdouble)(x))
}
func VertexAttrib1dARB(index uint32, x float64) {
  C.glowVertexAttrib1dARB(gpVertexAttrib1dARB, (C.GLuint)(index), (C.GLdouble)(x))
}
func VertexAttrib1dNV(index uint32, x float64) {
  C.glowVertexAttrib1dNV(gpVertexAttrib1dNV, (C.GLuint)(index), (C.GLdouble)(x))
}
func VertexAttrib1dv(index uint32, v *float64) {
  C.glowVertexAttrib1dv(gpVertexAttrib1dv, (C.GLuint)(index), (*C.GLdouble)(unsafe.Pointer(v)))
}
func VertexAttrib1dvARB(index uint32, v *float64) {
  C.glowVertexAttrib1dvARB(gpVertexAttrib1dvARB, (C.GLuint)(index), (*C.GLdouble)(unsafe.Pointer(v)))
}
func VertexAttrib1dvNV(index uint32, v *float64) {
  C.glowVertexAttrib1dvNV(gpVertexAttrib1dvNV, (C.GLuint)(index), (*C.GLdouble)(unsafe.Pointer(v)))
}
func VertexAttrib1f(index uint32, x float32) {
  C.glowVertexAttrib1f(gpVertexAttrib1f, (C.GLuint)(index), (C.GLfloat)(x))
}
func VertexAttrib1fARB(index uint32, x float32) {
  C.glowVertexAttrib1fARB(gpVertexAttrib1fARB, (C.GLuint)(index), (C.GLfloat)(x))
}
func VertexAttrib1fNV(index uint32, x float32) {
  C.glowVertexAttrib1fNV(gpVertexAttrib1fNV, (C.GLuint)(index), (C.GLfloat)(x))
}
func VertexAttrib1fv(index uint32, v *float32) {
  C.glowVertexAttrib1fv(gpVertexAttrib1fv, (C.GLuint)(index), (*C.GLfloat)(unsafe.Pointer(v)))
}
func VertexAttrib1fvARB(index uint32, v *float32) {
  C.glowVertexAttrib1fvARB(gpVertexAttrib1fvARB, (C.GLuint)(index), (*C.GLfloat)(unsafe.Pointer(v)))
}
func VertexAttrib1fvNV(index uint32, v *float32) {
  C.glowVertexAttrib1fvNV(gpVertexAttrib1fvNV, (C.GLuint)(index), (*C.GLfloat)(unsafe.Pointer(v)))
}
func VertexAttrib1hNV(index uint32, x uint16) {
  C.glowVertexAttrib1hNV(gpVertexAttrib1hNV, (C.GLuint)(index), (C.GLhalfNV)(x))
}
func VertexAttrib1hvNV(index uint32, v *uint16) {
  C.glowVertexAttrib1hvNV(gpVertexAttrib1hvNV, (C.GLuint)(index), (*C.GLhalfNV)(unsafe.Pointer(v)))
}
func VertexAttrib1s(index uint32, x int16) {
  C.glowVertexAttrib1s(gpVertexAttrib1s, (C.GLuint)(index), (C.GLshort)(x))
}
func VertexAttrib1sARB(index uint32, x int16) {
  C.glowVertexAttrib1sARB(gpVertexAttrib1sARB, (C.GLuint)(index), (C.GLshort)(x))
}
func VertexAttrib1sNV(index uint32, x int16) {
  C.glowVertexAttrib1sNV(gpVertexAttrib1sNV, (C.GLuint)(index), (C.GLshort)(x))
}
func VertexAttrib1sv(index uint32, v *int16) {
  C.glowVertexAttrib1sv(gpVertexAttrib1sv, (C.GLuint)(index), (*C.GLshort)(unsafe.Pointer(v)))
}
func VertexAttrib1svARB(index uint32, v *int16) {
  C.glowVertexAttrib1svARB(gpVertexAttrib1svARB, (C.GLuint)(index), (*C.GLshort)(unsafe.Pointer(v)))
}
func VertexAttrib1svNV(index uint32, v *int16) {
  C.glowVertexAttrib1svNV(gpVertexAttrib1svNV, (C.GLuint)(index), (*C.GLshort)(unsafe.Pointer(v)))
}
func VertexAttrib2d(index uint32, x float64, y float64) {
  C.glowVertexAttrib2d(gpVertexAttrib2d, (C.GLuint)(index), (C.GLdouble)(x), (C.GLdouble)(y))
}
func VertexAttrib2dARB(index uint32, x float64, y float64) {
  C.glowVertexAttrib2dARB(gpVertexAttrib2dARB, (C.GLuint)(index), (C.GLdouble)(x), (C.GLdouble)(y))
}
func VertexAttrib2dNV(index uint32, x float64, y float64) {
  C.glowVertexAttrib2dNV(gpVertexAttrib2dNV, (C.GLuint)(index), (C.GLdouble)(x), (C.GLdouble)(y))
}
func VertexAttrib2dv(index uint32, v *float64) {
  C.glowVertexAttrib2dv(gpVertexAttrib2dv, (C.GLuint)(index), (*C.GLdouble)(unsafe.Pointer(v)))
}
func VertexAttrib2dvARB(index uint32, v *float64) {
  C.glowVertexAttrib2dvARB(gpVertexAttrib2dvARB, (C.GLuint)(index), (*C.GLdouble)(unsafe.Pointer(v)))
}
func VertexAttrib2dvNV(index uint32, v *float64) {
  C.glowVertexAttrib2dvNV(gpVertexAttrib2dvNV, (C.GLuint)(index), (*C.GLdouble)(unsafe.Pointer(v)))
}
func VertexAttrib2f(index uint32, x float32, y float32) {
  C.glowVertexAttrib2f(gpVertexAttrib2f, (C.GLuint)(index), (C.GLfloat)(x), (C.GLfloat)(y))
}
func VertexAttrib2fARB(index uint32, x float32, y float32) {
  C.glowVertexAttrib2fARB(gpVertexAttrib2fARB, (C.GLuint)(index), (C.GLfloat)(x), (C.GLfloat)(y))
}
func VertexAttrib2fNV(index uint32, x float32, y float32) {
  C.glowVertexAttrib2fNV(gpVertexAttrib2fNV, (C.GLuint)(index), (C.GLfloat)(x), (C.GLfloat)(y))
}
func VertexAttrib2fv(index uint32, v *float32) {
  C.glowVertexAttrib2fv(gpVertexAttrib2fv, (C.GLuint)(index), (*C.GLfloat)(unsafe.Pointer(v)))
}
func VertexAttrib2fvARB(index uint32, v *float32) {
  C.glowVertexAttrib2fvARB(gpVertexAttrib2fvARB, (C.GLuint)(index), (*C.GLfloat)(unsafe.Pointer(v)))
}
func VertexAttrib2fvNV(index uint32, v *float32) {
  C.glowVertexAttrib2fvNV(gpVertexAttrib2fvNV, (C.GLuint)(index), (*C.GLfloat)(unsafe.Pointer(v)))
}
func VertexAttrib2hNV(index uint32, x uint16, y uint16) {
  C.glowVertexAttrib2hNV(gpVertexAttrib2hNV, (C.GLuint)(index), (C.GLhalfNV)(x), (C.GLhalfNV)(y))
}
func VertexAttrib2hvNV(index uint32, v *uint16) {
  C.glowVertexAttrib2hvNV(gpVertexAttrib2hvNV, (C.GLuint)(index), (*C.GLhalfNV)(unsafe.Pointer(v)))
}
func VertexAttrib2s(index uint32, x int16, y int16) {
  C.glowVertexAttrib2s(gpVertexAttrib2s, (C.GLuint)(index), (C.GLshort)(x), (C.GLshort)(y))
}
func VertexAttrib2sARB(index uint32, x int16, y int16) {
  C.glowVertexAttrib2sARB(gpVertexAttrib2sARB, (C.GLuint)(index), (C.GLshort)(x), (C.GLshort)(y))
}
func VertexAttrib2sNV(index uint32, x int16, y int16) {
  C.glowVertexAttrib2sNV(gpVertexAttrib2sNV, (C.GLuint)(index), (C.GLshort)(x), (C.GLshort)(y))
}
func VertexAttrib2sv(index uint32, v *int16) {
  C.glowVertexAttrib2sv(gpVertexAttrib2sv, (C.GLuint)(index), (*C.GLshort)(unsafe.Pointer(v)))
}
func VertexAttrib2svARB(index uint32, v *int16) {
  C.glowVertexAttrib2svARB(gpVertexAttrib2svARB, (C.GLuint)(index), (*C.GLshort)(unsafe.Pointer(v)))
}
func VertexAttrib2svNV(index uint32, v *int16) {
  C.glowVertexAttrib2svNV(gpVertexAttrib2svNV, (C.GLuint)(index), (*C.GLshort)(unsafe.Pointer(v)))
}
func VertexAttrib3d(index uint32, x float64, y float64, z float64) {
  C.glowVertexAttrib3d(gpVertexAttrib3d, (C.GLuint)(index), (C.GLdouble)(x), (C.GLdouble)(y), (C.GLdouble)(z))
}
func VertexAttrib3dARB(index uint32, x float64, y float64, z float64) {
  C.glowVertexAttrib3dARB(gpVertexAttrib3dARB, (C.GLuint)(index), (C.GLdouble)(x), (C.GLdouble)(y), (C.GLdouble)(z))
}
func VertexAttrib3dNV(index uint32, x float64, y float64, z float64) {
  C.glowVertexAttrib3dNV(gpVertexAttrib3dNV, (C.GLuint)(index), (C.GLdouble)(x), (C.GLdouble)(y), (C.GLdouble)(z))
}
func VertexAttrib3dv(index uint32, v *float64) {
  C.glowVertexAttrib3dv(gpVertexAttrib3dv, (C.GLuint)(index), (*C.GLdouble)(unsafe.Pointer(v)))
}
func VertexAttrib3dvARB(index uint32, v *float64) {
  C.glowVertexAttrib3dvARB(gpVertexAttrib3dvARB, (C.GLuint)(index), (*C.GLdouble)(unsafe.Pointer(v)))
}
func VertexAttrib3dvNV(index uint32, v *float64) {
  C.glowVertexAttrib3dvNV(gpVertexAttrib3dvNV, (C.GLuint)(index), (*C.GLdouble)(unsafe.Pointer(v)))
}
func VertexAttrib3f(index uint32, x float32, y float32, z float32) {
  C.glowVertexAttrib3f(gpVertexAttrib3f, (C.GLuint)(index), (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z))
}
func VertexAttrib3fARB(index uint32, x float32, y float32, z float32) {
  C.glowVertexAttrib3fARB(gpVertexAttrib3fARB, (C.GLuint)(index), (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z))
}
func VertexAttrib3fNV(index uint32, x float32, y float32, z float32) {
  C.glowVertexAttrib3fNV(gpVertexAttrib3fNV, (C.GLuint)(index), (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z))
}
func VertexAttrib3fv(index uint32, v *float32) {
  C.glowVertexAttrib3fv(gpVertexAttrib3fv, (C.GLuint)(index), (*C.GLfloat)(unsafe.Pointer(v)))
}
func VertexAttrib3fvARB(index uint32, v *float32) {
  C.glowVertexAttrib3fvARB(gpVertexAttrib3fvARB, (C.GLuint)(index), (*C.GLfloat)(unsafe.Pointer(v)))
}
func VertexAttrib3fvNV(index uint32, v *float32) {
  C.glowVertexAttrib3fvNV(gpVertexAttrib3fvNV, (C.GLuint)(index), (*C.GLfloat)(unsafe.Pointer(v)))
}
func VertexAttrib3hNV(index uint32, x uint16, y uint16, z uint16) {
  C.glowVertexAttrib3hNV(gpVertexAttrib3hNV, (C.GLuint)(index), (C.GLhalfNV)(x), (C.GLhalfNV)(y), (C.GLhalfNV)(z))
}
func VertexAttrib3hvNV(index uint32, v *uint16) {
  C.glowVertexAttrib3hvNV(gpVertexAttrib3hvNV, (C.GLuint)(index), (*C.GLhalfNV)(unsafe.Pointer(v)))
}
func VertexAttrib3s(index uint32, x int16, y int16, z int16) {
  C.glowVertexAttrib3s(gpVertexAttrib3s, (C.GLuint)(index), (C.GLshort)(x), (C.GLshort)(y), (C.GLshort)(z))
}
func VertexAttrib3sARB(index uint32, x int16, y int16, z int16) {
  C.glowVertexAttrib3sARB(gpVertexAttrib3sARB, (C.GLuint)(index), (C.GLshort)(x), (C.GLshort)(y), (C.GLshort)(z))
}
func VertexAttrib3sNV(index uint32, x int16, y int16, z int16) {
  C.glowVertexAttrib3sNV(gpVertexAttrib3sNV, (C.GLuint)(index), (C.GLshort)(x), (C.GLshort)(y), (C.GLshort)(z))
}
func VertexAttrib3sv(index uint32, v *int16) {
  C.glowVertexAttrib3sv(gpVertexAttrib3sv, (C.GLuint)(index), (*C.GLshort)(unsafe.Pointer(v)))
}
func VertexAttrib3svARB(index uint32, v *int16) {
  C.glowVertexAttrib3svARB(gpVertexAttrib3svARB, (C.GLuint)(index), (*C.GLshort)(unsafe.Pointer(v)))
}
func VertexAttrib3svNV(index uint32, v *int16) {
  C.glowVertexAttrib3svNV(gpVertexAttrib3svNV, (C.GLuint)(index), (*C.GLshort)(unsafe.Pointer(v)))
}
func VertexAttrib4Nbv(index uint32, v *int8) {
  C.glowVertexAttrib4Nbv(gpVertexAttrib4Nbv, (C.GLuint)(index), (*C.GLbyte)(unsafe.Pointer(v)))
}
func VertexAttrib4NbvARB(index uint32, v *int8) {
  C.glowVertexAttrib4NbvARB(gpVertexAttrib4NbvARB, (C.GLuint)(index), (*C.GLbyte)(unsafe.Pointer(v)))
}
func VertexAttrib4Niv(index uint32, v *int32) {
  C.glowVertexAttrib4Niv(gpVertexAttrib4Niv, (C.GLuint)(index), (*C.GLint)(unsafe.Pointer(v)))
}
func VertexAttrib4NivARB(index uint32, v *int32) {
  C.glowVertexAttrib4NivARB(gpVertexAttrib4NivARB, (C.GLuint)(index), (*C.GLint)(unsafe.Pointer(v)))
}
func VertexAttrib4Nsv(index uint32, v *int16) {
  C.glowVertexAttrib4Nsv(gpVertexAttrib4Nsv, (C.GLuint)(index), (*C.GLshort)(unsafe.Pointer(v)))
}
func VertexAttrib4NsvARB(index uint32, v *int16) {
  C.glowVertexAttrib4NsvARB(gpVertexAttrib4NsvARB, (C.GLuint)(index), (*C.GLshort)(unsafe.Pointer(v)))
}
func VertexAttrib4Nub(index uint32, x uint8, y uint8, z uint8, w uint8) {
  C.glowVertexAttrib4Nub(gpVertexAttrib4Nub, (C.GLuint)(index), (C.GLubyte)(x), (C.GLubyte)(y), (C.GLubyte)(z), (C.GLubyte)(w))
}
func VertexAttrib4NubARB(index uint32, x uint8, y uint8, z uint8, w uint8) {
  C.glowVertexAttrib4NubARB(gpVertexAttrib4NubARB, (C.GLuint)(index), (C.GLubyte)(x), (C.GLubyte)(y), (C.GLubyte)(z), (C.GLubyte)(w))
}
func VertexAttrib4Nubv(index uint32, v *uint8) {
  C.glowVertexAttrib4Nubv(gpVertexAttrib4Nubv, (C.GLuint)(index), (*C.GLubyte)(unsafe.Pointer(v)))
}
func VertexAttrib4NubvARB(index uint32, v *uint8) {
  C.glowVertexAttrib4NubvARB(gpVertexAttrib4NubvARB, (C.GLuint)(index), (*C.GLubyte)(unsafe.Pointer(v)))
}
func VertexAttrib4Nuiv(index uint32, v *uint32) {
  C.glowVertexAttrib4Nuiv(gpVertexAttrib4Nuiv, (C.GLuint)(index), (*C.GLuint)(unsafe.Pointer(v)))
}
func VertexAttrib4NuivARB(index uint32, v *uint32) {
  C.glowVertexAttrib4NuivARB(gpVertexAttrib4NuivARB, (C.GLuint)(index), (*C.GLuint)(unsafe.Pointer(v)))
}
func VertexAttrib4Nusv(index uint32, v *uint16) {
  C.glowVertexAttrib4Nusv(gpVertexAttrib4Nusv, (C.GLuint)(index), (*C.GLushort)(unsafe.Pointer(v)))
}
func VertexAttrib4NusvARB(index uint32, v *uint16) {
  C.glowVertexAttrib4NusvARB(gpVertexAttrib4NusvARB, (C.GLuint)(index), (*C.GLushort)(unsafe.Pointer(v)))
}
func VertexAttrib4bv(index uint32, v *int8) {
  C.glowVertexAttrib4bv(gpVertexAttrib4bv, (C.GLuint)(index), (*C.GLbyte)(unsafe.Pointer(v)))
}
func VertexAttrib4bvARB(index uint32, v *int8) {
  C.glowVertexAttrib4bvARB(gpVertexAttrib4bvARB, (C.GLuint)(index), (*C.GLbyte)(unsafe.Pointer(v)))
}
func VertexAttrib4d(index uint32, x float64, y float64, z float64, w float64) {
  C.glowVertexAttrib4d(gpVertexAttrib4d, (C.GLuint)(index), (C.GLdouble)(x), (C.GLdouble)(y), (C.GLdouble)(z), (C.GLdouble)(w))
}
func VertexAttrib4dARB(index uint32, x float64, y float64, z float64, w float64) {
  C.glowVertexAttrib4dARB(gpVertexAttrib4dARB, (C.GLuint)(index), (C.GLdouble)(x), (C.GLdouble)(y), (C.GLdouble)(z), (C.GLdouble)(w))
}
func VertexAttrib4dNV(index uint32, x float64, y float64, z float64, w float64) {
  C.glowVertexAttrib4dNV(gpVertexAttrib4dNV, (C.GLuint)(index), (C.GLdouble)(x), (C.GLdouble)(y), (C.GLdouble)(z), (C.GLdouble)(w))
}
func VertexAttrib4dv(index uint32, v *float64) {
  C.glowVertexAttrib4dv(gpVertexAttrib4dv, (C.GLuint)(index), (*C.GLdouble)(unsafe.Pointer(v)))
}
func VertexAttrib4dvARB(index uint32, v *float64) {
  C.glowVertexAttrib4dvARB(gpVertexAttrib4dvARB, (C.GLuint)(index), (*C.GLdouble)(unsafe.Pointer(v)))
}
func VertexAttrib4dvNV(index uint32, v *float64) {
  C.glowVertexAttrib4dvNV(gpVertexAttrib4dvNV, (C.GLuint)(index), (*C.GLdouble)(unsafe.Pointer(v)))
}
func VertexAttrib4f(index uint32, x float32, y float32, z float32, w float32) {
  C.glowVertexAttrib4f(gpVertexAttrib4f, (C.GLuint)(index), (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z), (C.GLfloat)(w))
}
func VertexAttrib4fARB(index uint32, x float32, y float32, z float32, w float32) {
  C.glowVertexAttrib4fARB(gpVertexAttrib4fARB, (C.GLuint)(index), (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z), (C.GLfloat)(w))
}
func VertexAttrib4fNV(index uint32, x float32, y float32, z float32, w float32) {
  C.glowVertexAttrib4fNV(gpVertexAttrib4fNV, (C.GLuint)(index), (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z), (C.GLfloat)(w))
}
func VertexAttrib4fv(index uint32, v *float32) {
  C.glowVertexAttrib4fv(gpVertexAttrib4fv, (C.GLuint)(index), (*C.GLfloat)(unsafe.Pointer(v)))
}
func VertexAttrib4fvARB(index uint32, v *float32) {
  C.glowVertexAttrib4fvARB(gpVertexAttrib4fvARB, (C.GLuint)(index), (*C.GLfloat)(unsafe.Pointer(v)))
}
func VertexAttrib4fvNV(index uint32, v *float32) {
  C.glowVertexAttrib4fvNV(gpVertexAttrib4fvNV, (C.GLuint)(index), (*C.GLfloat)(unsafe.Pointer(v)))
}
func VertexAttrib4hNV(index uint32, x uint16, y uint16, z uint16, w uint16) {
  C.glowVertexAttrib4hNV(gpVertexAttrib4hNV, (C.GLuint)(index), (C.GLhalfNV)(x), (C.GLhalfNV)(y), (C.GLhalfNV)(z), (C.GLhalfNV)(w))
}
func VertexAttrib4hvNV(index uint32, v *uint16) {
  C.glowVertexAttrib4hvNV(gpVertexAttrib4hvNV, (C.GLuint)(index), (*C.GLhalfNV)(unsafe.Pointer(v)))
}
func VertexAttrib4iv(index uint32, v *int32) {
  C.glowVertexAttrib4iv(gpVertexAttrib4iv, (C.GLuint)(index), (*C.GLint)(unsafe.Pointer(v)))
}
func VertexAttrib4ivARB(index uint32, v *int32) {
  C.glowVertexAttrib4ivARB(gpVertexAttrib4ivARB, (C.GLuint)(index), (*C.GLint)(unsafe.Pointer(v)))
}
func VertexAttrib4s(index uint32, x int16, y int16, z int16, w int16) {
  C.glowVertexAttrib4s(gpVertexAttrib4s, (C.GLuint)(index), (C.GLshort)(x), (C.GLshort)(y), (C.GLshort)(z), (C.GLshort)(w))
}
func VertexAttrib4sARB(index uint32, x int16, y int16, z int16, w int16) {
  C.glowVertexAttrib4sARB(gpVertexAttrib4sARB, (C.GLuint)(index), (C.GLshort)(x), (C.GLshort)(y), (C.GLshort)(z), (C.GLshort)(w))
}
func VertexAttrib4sNV(index uint32, x int16, y int16, z int16, w int16) {
  C.glowVertexAttrib4sNV(gpVertexAttrib4sNV, (C.GLuint)(index), (C.GLshort)(x), (C.GLshort)(y), (C.GLshort)(z), (C.GLshort)(w))
}
func VertexAttrib4sv(index uint32, v *int16) {
  C.glowVertexAttrib4sv(gpVertexAttrib4sv, (C.GLuint)(index), (*C.GLshort)(unsafe.Pointer(v)))
}
func VertexAttrib4svARB(index uint32, v *int16) {
  C.glowVertexAttrib4svARB(gpVertexAttrib4svARB, (C.GLuint)(index), (*C.GLshort)(unsafe.Pointer(v)))
}
func VertexAttrib4svNV(index uint32, v *int16) {
  C.glowVertexAttrib4svNV(gpVertexAttrib4svNV, (C.GLuint)(index), (*C.GLshort)(unsafe.Pointer(v)))
}
func VertexAttrib4ubNV(index uint32, x uint8, y uint8, z uint8, w uint8) {
  C.glowVertexAttrib4ubNV(gpVertexAttrib4ubNV, (C.GLuint)(index), (C.GLubyte)(x), (C.GLubyte)(y), (C.GLubyte)(z), (C.GLubyte)(w))
}
func VertexAttrib4ubv(index uint32, v *uint8) {
  C.glowVertexAttrib4ubv(gpVertexAttrib4ubv, (C.GLuint)(index), (*C.GLubyte)(unsafe.Pointer(v)))
}
func VertexAttrib4ubvARB(index uint32, v *uint8) {
  C.glowVertexAttrib4ubvARB(gpVertexAttrib4ubvARB, (C.GLuint)(index), (*C.GLubyte)(unsafe.Pointer(v)))
}
func VertexAttrib4ubvNV(index uint32, v *uint8) {
  C.glowVertexAttrib4ubvNV(gpVertexAttrib4ubvNV, (C.GLuint)(index), (*C.GLubyte)(unsafe.Pointer(v)))
}
func VertexAttrib4uiv(index uint32, v *uint32) {
  C.glowVertexAttrib4uiv(gpVertexAttrib4uiv, (C.GLuint)(index), (*C.GLuint)(unsafe.Pointer(v)))
}
func VertexAttrib4uivARB(index uint32, v *uint32) {
  C.glowVertexAttrib4uivARB(gpVertexAttrib4uivARB, (C.GLuint)(index), (*C.GLuint)(unsafe.Pointer(v)))
}
func VertexAttrib4usv(index uint32, v *uint16) {
  C.glowVertexAttrib4usv(gpVertexAttrib4usv, (C.GLuint)(index), (*C.GLushort)(unsafe.Pointer(v)))
}
func VertexAttrib4usvARB(index uint32, v *uint16) {
  C.glowVertexAttrib4usvARB(gpVertexAttrib4usvARB, (C.GLuint)(index), (*C.GLushort)(unsafe.Pointer(v)))
}
func VertexAttribArrayObjectATI(index uint32, size int32, xtype uint32, normalized bool, stride int32, buffer uint32, offset uint32) {
  C.glowVertexAttribArrayObjectATI(gpVertexAttribArrayObjectATI, (C.GLuint)(index), (C.GLint)(size), (C.GLenum)(xtype), (C.GLboolean)(boolToInt(normalized)), (C.GLsizei)(stride), (C.GLuint)(buffer), (C.GLuint)(offset))
}
// associate a vertex attribute and a vertex buffer binding
func VertexAttribBinding(attribindex uint32, bindingindex uint32) {
  C.glowVertexAttribBinding(gpVertexAttribBinding, (C.GLuint)(attribindex), (C.GLuint)(bindingindex))
}
// modify the rate at which generic vertex attributes advance during instanced rendering
func VertexAttribDivisor(index uint32, divisor uint32) {
  C.glowVertexAttribDivisor(gpVertexAttribDivisor, (C.GLuint)(index), (C.GLuint)(divisor))
}
func VertexAttribDivisorARB(index uint32, divisor uint32) {
  C.glowVertexAttribDivisorARB(gpVertexAttribDivisorARB, (C.GLuint)(index), (C.GLuint)(divisor))
}
// specify the organization of vertex arrays
func VertexAttribFormat(attribindex uint32, size int32, xtype uint32, normalized bool, relativeoffset uint32) {
  C.glowVertexAttribFormat(gpVertexAttribFormat, (C.GLuint)(attribindex), (C.GLint)(size), (C.GLenum)(xtype), (C.GLboolean)(boolToInt(normalized)), (C.GLuint)(relativeoffset))
}
func VertexAttribFormatNV(index uint32, size int32, xtype uint32, normalized bool, stride int32) {
  C.glowVertexAttribFormatNV(gpVertexAttribFormatNV, (C.GLuint)(index), (C.GLint)(size), (C.GLenum)(xtype), (C.GLboolean)(boolToInt(normalized)), (C.GLsizei)(stride))
}
func VertexAttribI1i(index uint32, x int32) {
  C.glowVertexAttribI1i(gpVertexAttribI1i, (C.GLuint)(index), (C.GLint)(x))
}
func VertexAttribI1iEXT(index uint32, x int32) {
  C.glowVertexAttribI1iEXT(gpVertexAttribI1iEXT, (C.GLuint)(index), (C.GLint)(x))
}
func VertexAttribI1iv(index uint32, v *int32) {
  C.glowVertexAttribI1iv(gpVertexAttribI1iv, (C.GLuint)(index), (*C.GLint)(unsafe.Pointer(v)))
}
func VertexAttribI1ivEXT(index uint32, v *int32) {
  C.glowVertexAttribI1ivEXT(gpVertexAttribI1ivEXT, (C.GLuint)(index), (*C.GLint)(unsafe.Pointer(v)))
}
func VertexAttribI1ui(index uint32, x uint32) {
  C.glowVertexAttribI1ui(gpVertexAttribI1ui, (C.GLuint)(index), (C.GLuint)(x))
}
func VertexAttribI1uiEXT(index uint32, x uint32) {
  C.glowVertexAttribI1uiEXT(gpVertexAttribI1uiEXT, (C.GLuint)(index), (C.GLuint)(x))
}
func VertexAttribI1uiv(index uint32, v *uint32) {
  C.glowVertexAttribI1uiv(gpVertexAttribI1uiv, (C.GLuint)(index), (*C.GLuint)(unsafe.Pointer(v)))
}
func VertexAttribI1uivEXT(index uint32, v *uint32) {
  C.glowVertexAttribI1uivEXT(gpVertexAttribI1uivEXT, (C.GLuint)(index), (*C.GLuint)(unsafe.Pointer(v)))
}
func VertexAttribI2i(index uint32, x int32, y int32) {
  C.glowVertexAttribI2i(gpVertexAttribI2i, (C.GLuint)(index), (C.GLint)(x), (C.GLint)(y))
}
func VertexAttribI2iEXT(index uint32, x int32, y int32) {
  C.glowVertexAttribI2iEXT(gpVertexAttribI2iEXT, (C.GLuint)(index), (C.GLint)(x), (C.GLint)(y))
}
func VertexAttribI2iv(index uint32, v *int32) {
  C.glowVertexAttribI2iv(gpVertexAttribI2iv, (C.GLuint)(index), (*C.GLint)(unsafe.Pointer(v)))
}
func VertexAttribI2ivEXT(index uint32, v *int32) {
  C.glowVertexAttribI2ivEXT(gpVertexAttribI2ivEXT, (C.GLuint)(index), (*C.GLint)(unsafe.Pointer(v)))
}
func VertexAttribI2ui(index uint32, x uint32, y uint32) {
  C.glowVertexAttribI2ui(gpVertexAttribI2ui, (C.GLuint)(index), (C.GLuint)(x), (C.GLuint)(y))
}
func VertexAttribI2uiEXT(index uint32, x uint32, y uint32) {
  C.glowVertexAttribI2uiEXT(gpVertexAttribI2uiEXT, (C.GLuint)(index), (C.GLuint)(x), (C.GLuint)(y))
}
func VertexAttribI2uiv(index uint32, v *uint32) {
  C.glowVertexAttribI2uiv(gpVertexAttribI2uiv, (C.GLuint)(index), (*C.GLuint)(unsafe.Pointer(v)))
}
func VertexAttribI2uivEXT(index uint32, v *uint32) {
  C.glowVertexAttribI2uivEXT(gpVertexAttribI2uivEXT, (C.GLuint)(index), (*C.GLuint)(unsafe.Pointer(v)))
}
func VertexAttribI3i(index uint32, x int32, y int32, z int32) {
  C.glowVertexAttribI3i(gpVertexAttribI3i, (C.GLuint)(index), (C.GLint)(x), (C.GLint)(y), (C.GLint)(z))
}
func VertexAttribI3iEXT(index uint32, x int32, y int32, z int32) {
  C.glowVertexAttribI3iEXT(gpVertexAttribI3iEXT, (C.GLuint)(index), (C.GLint)(x), (C.GLint)(y), (C.GLint)(z))
}
func VertexAttribI3iv(index uint32, v *int32) {
  C.glowVertexAttribI3iv(gpVertexAttribI3iv, (C.GLuint)(index), (*C.GLint)(unsafe.Pointer(v)))
}
func VertexAttribI3ivEXT(index uint32, v *int32) {
  C.glowVertexAttribI3ivEXT(gpVertexAttribI3ivEXT, (C.GLuint)(index), (*C.GLint)(unsafe.Pointer(v)))
}
func VertexAttribI3ui(index uint32, x uint32, y uint32, z uint32) {
  C.glowVertexAttribI3ui(gpVertexAttribI3ui, (C.GLuint)(index), (C.GLuint)(x), (C.GLuint)(y), (C.GLuint)(z))
}
func VertexAttribI3uiEXT(index uint32, x uint32, y uint32, z uint32) {
  C.glowVertexAttribI3uiEXT(gpVertexAttribI3uiEXT, (C.GLuint)(index), (C.GLuint)(x), (C.GLuint)(y), (C.GLuint)(z))
}
func VertexAttribI3uiv(index uint32, v *uint32) {
  C.glowVertexAttribI3uiv(gpVertexAttribI3uiv, (C.GLuint)(index), (*C.GLuint)(unsafe.Pointer(v)))
}
func VertexAttribI3uivEXT(index uint32, v *uint32) {
  C.glowVertexAttribI3uivEXT(gpVertexAttribI3uivEXT, (C.GLuint)(index), (*C.GLuint)(unsafe.Pointer(v)))
}
func VertexAttribI4bv(index uint32, v *int8) {
  C.glowVertexAttribI4bv(gpVertexAttribI4bv, (C.GLuint)(index), (*C.GLbyte)(unsafe.Pointer(v)))
}
func VertexAttribI4bvEXT(index uint32, v *int8) {
  C.glowVertexAttribI4bvEXT(gpVertexAttribI4bvEXT, (C.GLuint)(index), (*C.GLbyte)(unsafe.Pointer(v)))
}
func VertexAttribI4i(index uint32, x int32, y int32, z int32, w int32) {
  C.glowVertexAttribI4i(gpVertexAttribI4i, (C.GLuint)(index), (C.GLint)(x), (C.GLint)(y), (C.GLint)(z), (C.GLint)(w))
}
func VertexAttribI4iEXT(index uint32, x int32, y int32, z int32, w int32) {
  C.glowVertexAttribI4iEXT(gpVertexAttribI4iEXT, (C.GLuint)(index), (C.GLint)(x), (C.GLint)(y), (C.GLint)(z), (C.GLint)(w))
}
func VertexAttribI4iv(index uint32, v *int32) {
  C.glowVertexAttribI4iv(gpVertexAttribI4iv, (C.GLuint)(index), (*C.GLint)(unsafe.Pointer(v)))
}
func VertexAttribI4ivEXT(index uint32, v *int32) {
  C.glowVertexAttribI4ivEXT(gpVertexAttribI4ivEXT, (C.GLuint)(index), (*C.GLint)(unsafe.Pointer(v)))
}
func VertexAttribI4sv(index uint32, v *int16) {
  C.glowVertexAttribI4sv(gpVertexAttribI4sv, (C.GLuint)(index), (*C.GLshort)(unsafe.Pointer(v)))
}
func VertexAttribI4svEXT(index uint32, v *int16) {
  C.glowVertexAttribI4svEXT(gpVertexAttribI4svEXT, (C.GLuint)(index), (*C.GLshort)(unsafe.Pointer(v)))
}
func VertexAttribI4ubv(index uint32, v *uint8) {
  C.glowVertexAttribI4ubv(gpVertexAttribI4ubv, (C.GLuint)(index), (*C.GLubyte)(unsafe.Pointer(v)))
}
func VertexAttribI4ubvEXT(index uint32, v *uint8) {
  C.glowVertexAttribI4ubvEXT(gpVertexAttribI4ubvEXT, (C.GLuint)(index), (*C.GLubyte)(unsafe.Pointer(v)))
}
func VertexAttribI4ui(index uint32, x uint32, y uint32, z uint32, w uint32) {
  C.glowVertexAttribI4ui(gpVertexAttribI4ui, (C.GLuint)(index), (C.GLuint)(x), (C.GLuint)(y), (C.GLuint)(z), (C.GLuint)(w))
}
func VertexAttribI4uiEXT(index uint32, x uint32, y uint32, z uint32, w uint32) {
  C.glowVertexAttribI4uiEXT(gpVertexAttribI4uiEXT, (C.GLuint)(index), (C.GLuint)(x), (C.GLuint)(y), (C.GLuint)(z), (C.GLuint)(w))
}
func VertexAttribI4uiv(index uint32, v *uint32) {
  C.glowVertexAttribI4uiv(gpVertexAttribI4uiv, (C.GLuint)(index), (*C.GLuint)(unsafe.Pointer(v)))
}
func VertexAttribI4uivEXT(index uint32, v *uint32) {
  C.glowVertexAttribI4uivEXT(gpVertexAttribI4uivEXT, (C.GLuint)(index), (*C.GLuint)(unsafe.Pointer(v)))
}
func VertexAttribI4usv(index uint32, v *uint16) {
  C.glowVertexAttribI4usv(gpVertexAttribI4usv, (C.GLuint)(index), (*C.GLushort)(unsafe.Pointer(v)))
}
func VertexAttribI4usvEXT(index uint32, v *uint16) {
  C.glowVertexAttribI4usvEXT(gpVertexAttribI4usvEXT, (C.GLuint)(index), (*C.GLushort)(unsafe.Pointer(v)))
}
func VertexAttribIFormat(attribindex uint32, size int32, xtype uint32, relativeoffset uint32) {
  C.glowVertexAttribIFormat(gpVertexAttribIFormat, (C.GLuint)(attribindex), (C.GLint)(size), (C.GLenum)(xtype), (C.GLuint)(relativeoffset))
}
func VertexAttribIFormatNV(index uint32, size int32, xtype uint32, stride int32) {
  C.glowVertexAttribIFormatNV(gpVertexAttribIFormatNV, (C.GLuint)(index), (C.GLint)(size), (C.GLenum)(xtype), (C.GLsizei)(stride))
}
func VertexAttribIPointer(index uint32, size int32, xtype uint32, stride int32, pointer unsafe.Pointer) {
  C.glowVertexAttribIPointer(gpVertexAttribIPointer, (C.GLuint)(index), (C.GLint)(size), (C.GLenum)(xtype), (C.GLsizei)(stride), pointer)
}
func VertexAttribIPointerEXT(index uint32, size int32, xtype uint32, stride int32, pointer unsafe.Pointer) {
  C.glowVertexAttribIPointerEXT(gpVertexAttribIPointerEXT, (C.GLuint)(index), (C.GLint)(size), (C.GLenum)(xtype), (C.GLsizei)(stride), pointer)
}
func VertexAttribL1d(index uint32, x float64) {
  C.glowVertexAttribL1d(gpVertexAttribL1d, (C.GLuint)(index), (C.GLdouble)(x))
}
func VertexAttribL1dEXT(index uint32, x float64) {
  C.glowVertexAttribL1dEXT(gpVertexAttribL1dEXT, (C.GLuint)(index), (C.GLdouble)(x))
}
func VertexAttribL1dv(index uint32, v *float64) {
  C.glowVertexAttribL1dv(gpVertexAttribL1dv, (C.GLuint)(index), (*C.GLdouble)(unsafe.Pointer(v)))
}
func VertexAttribL1dvEXT(index uint32, v *float64) {
  C.glowVertexAttribL1dvEXT(gpVertexAttribL1dvEXT, (C.GLuint)(index), (*C.GLdouble)(unsafe.Pointer(v)))
}
func VertexAttribL1i64NV(index uint32, x int64) {
  C.glowVertexAttribL1i64NV(gpVertexAttribL1i64NV, (C.GLuint)(index), (C.GLint64EXT)(x))
}
func VertexAttribL1i64vNV(index uint32, v *int64) {
  C.glowVertexAttribL1i64vNV(gpVertexAttribL1i64vNV, (C.GLuint)(index), (*C.GLint64EXT)(unsafe.Pointer(v)))
}
func VertexAttribL1ui64ARB(index uint32, x uint64) {
  C.glowVertexAttribL1ui64ARB(gpVertexAttribL1ui64ARB, (C.GLuint)(index), (C.GLuint64EXT)(x))
}
func VertexAttribL1ui64NV(index uint32, x uint64) {
  C.glowVertexAttribL1ui64NV(gpVertexAttribL1ui64NV, (C.GLuint)(index), (C.GLuint64EXT)(x))
}
func VertexAttribL1ui64vARB(index uint32, v *uint64) {
  C.glowVertexAttribL1ui64vARB(gpVertexAttribL1ui64vARB, (C.GLuint)(index), (*C.GLuint64EXT)(unsafe.Pointer(v)))
}
func VertexAttribL1ui64vNV(index uint32, v *uint64) {
  C.glowVertexAttribL1ui64vNV(gpVertexAttribL1ui64vNV, (C.GLuint)(index), (*C.GLuint64EXT)(unsafe.Pointer(v)))
}
func VertexAttribL2d(index uint32, x float64, y float64) {
  C.glowVertexAttribL2d(gpVertexAttribL2d, (C.GLuint)(index), (C.GLdouble)(x), (C.GLdouble)(y))
}
func VertexAttribL2dEXT(index uint32, x float64, y float64) {
  C.glowVertexAttribL2dEXT(gpVertexAttribL2dEXT, (C.GLuint)(index), (C.GLdouble)(x), (C.GLdouble)(y))
}
func VertexAttribL2dv(index uint32, v *float64) {
  C.glowVertexAttribL2dv(gpVertexAttribL2dv, (C.GLuint)(index), (*C.GLdouble)(unsafe.Pointer(v)))
}
func VertexAttribL2dvEXT(index uint32, v *float64) {
  C.glowVertexAttribL2dvEXT(gpVertexAttribL2dvEXT, (C.GLuint)(index), (*C.GLdouble)(unsafe.Pointer(v)))
}
func VertexAttribL2i64NV(index uint32, x int64, y int64) {
  C.glowVertexAttribL2i64NV(gpVertexAttribL2i64NV, (C.GLuint)(index), (C.GLint64EXT)(x), (C.GLint64EXT)(y))
}
func VertexAttribL2i64vNV(index uint32, v *int64) {
  C.glowVertexAttribL2i64vNV(gpVertexAttribL2i64vNV, (C.GLuint)(index), (*C.GLint64EXT)(unsafe.Pointer(v)))
}
func VertexAttribL2ui64NV(index uint32, x uint64, y uint64) {
  C.glowVertexAttribL2ui64NV(gpVertexAttribL2ui64NV, (C.GLuint)(index), (C.GLuint64EXT)(x), (C.GLuint64EXT)(y))
}
func VertexAttribL2ui64vNV(index uint32, v *uint64) {
  C.glowVertexAttribL2ui64vNV(gpVertexAttribL2ui64vNV, (C.GLuint)(index), (*C.GLuint64EXT)(unsafe.Pointer(v)))
}
func VertexAttribL3d(index uint32, x float64, y float64, z float64) {
  C.glowVertexAttribL3d(gpVertexAttribL3d, (C.GLuint)(index), (C.GLdouble)(x), (C.GLdouble)(y), (C.GLdouble)(z))
}
func VertexAttribL3dEXT(index uint32, x float64, y float64, z float64) {
  C.glowVertexAttribL3dEXT(gpVertexAttribL3dEXT, (C.GLuint)(index), (C.GLdouble)(x), (C.GLdouble)(y), (C.GLdouble)(z))
}
func VertexAttribL3dv(index uint32, v *float64) {
  C.glowVertexAttribL3dv(gpVertexAttribL3dv, (C.GLuint)(index), (*C.GLdouble)(unsafe.Pointer(v)))
}
func VertexAttribL3dvEXT(index uint32, v *float64) {
  C.glowVertexAttribL3dvEXT(gpVertexAttribL3dvEXT, (C.GLuint)(index), (*C.GLdouble)(unsafe.Pointer(v)))
}
func VertexAttribL3i64NV(index uint32, x int64, y int64, z int64) {
  C.glowVertexAttribL3i64NV(gpVertexAttribL3i64NV, (C.GLuint)(index), (C.GLint64EXT)(x), (C.GLint64EXT)(y), (C.GLint64EXT)(z))
}
func VertexAttribL3i64vNV(index uint32, v *int64) {
  C.glowVertexAttribL3i64vNV(gpVertexAttribL3i64vNV, (C.GLuint)(index), (*C.GLint64EXT)(unsafe.Pointer(v)))
}
func VertexAttribL3ui64NV(index uint32, x uint64, y uint64, z uint64) {
  C.glowVertexAttribL3ui64NV(gpVertexAttribL3ui64NV, (C.GLuint)(index), (C.GLuint64EXT)(x), (C.GLuint64EXT)(y), (C.GLuint64EXT)(z))
}
func VertexAttribL3ui64vNV(index uint32, v *uint64) {
  C.glowVertexAttribL3ui64vNV(gpVertexAttribL3ui64vNV, (C.GLuint)(index), (*C.GLuint64EXT)(unsafe.Pointer(v)))
}
func VertexAttribL4d(index uint32, x float64, y float64, z float64, w float64) {
  C.glowVertexAttribL4d(gpVertexAttribL4d, (C.GLuint)(index), (C.GLdouble)(x), (C.GLdouble)(y), (C.GLdouble)(z), (C.GLdouble)(w))
}
func VertexAttribL4dEXT(index uint32, x float64, y float64, z float64, w float64) {
  C.glowVertexAttribL4dEXT(gpVertexAttribL4dEXT, (C.GLuint)(index), (C.GLdouble)(x), (C.GLdouble)(y), (C.GLdouble)(z), (C.GLdouble)(w))
}
func VertexAttribL4dv(index uint32, v *float64) {
  C.glowVertexAttribL4dv(gpVertexAttribL4dv, (C.GLuint)(index), (*C.GLdouble)(unsafe.Pointer(v)))
}
func VertexAttribL4dvEXT(index uint32, v *float64) {
  C.glowVertexAttribL4dvEXT(gpVertexAttribL4dvEXT, (C.GLuint)(index), (*C.GLdouble)(unsafe.Pointer(v)))
}
func VertexAttribL4i64NV(index uint32, x int64, y int64, z int64, w int64) {
  C.glowVertexAttribL4i64NV(gpVertexAttribL4i64NV, (C.GLuint)(index), (C.GLint64EXT)(x), (C.GLint64EXT)(y), (C.GLint64EXT)(z), (C.GLint64EXT)(w))
}
func VertexAttribL4i64vNV(index uint32, v *int64) {
  C.glowVertexAttribL4i64vNV(gpVertexAttribL4i64vNV, (C.GLuint)(index), (*C.GLint64EXT)(unsafe.Pointer(v)))
}
func VertexAttribL4ui64NV(index uint32, x uint64, y uint64, z uint64, w uint64) {
  C.glowVertexAttribL4ui64NV(gpVertexAttribL4ui64NV, (C.GLuint)(index), (C.GLuint64EXT)(x), (C.GLuint64EXT)(y), (C.GLuint64EXT)(z), (C.GLuint64EXT)(w))
}
func VertexAttribL4ui64vNV(index uint32, v *uint64) {
  C.glowVertexAttribL4ui64vNV(gpVertexAttribL4ui64vNV, (C.GLuint)(index), (*C.GLuint64EXT)(unsafe.Pointer(v)))
}
func VertexAttribLFormat(attribindex uint32, size int32, xtype uint32, relativeoffset uint32) {
  C.glowVertexAttribLFormat(gpVertexAttribLFormat, (C.GLuint)(attribindex), (C.GLint)(size), (C.GLenum)(xtype), (C.GLuint)(relativeoffset))
}
func VertexAttribLFormatNV(index uint32, size int32, xtype uint32, stride int32) {
  C.glowVertexAttribLFormatNV(gpVertexAttribLFormatNV, (C.GLuint)(index), (C.GLint)(size), (C.GLenum)(xtype), (C.GLsizei)(stride))
}
func VertexAttribLPointer(index uint32, size int32, xtype uint32, stride int32, pointer unsafe.Pointer) {
  C.glowVertexAttribLPointer(gpVertexAttribLPointer, (C.GLuint)(index), (C.GLint)(size), (C.GLenum)(xtype), (C.GLsizei)(stride), pointer)
}
func VertexAttribLPointerEXT(index uint32, size int32, xtype uint32, stride int32, pointer unsafe.Pointer) {
  C.glowVertexAttribLPointerEXT(gpVertexAttribLPointerEXT, (C.GLuint)(index), (C.GLint)(size), (C.GLenum)(xtype), (C.GLsizei)(stride), pointer)
}
func VertexAttribP1ui(index uint32, xtype uint32, normalized bool, value uint32) {
  C.glowVertexAttribP1ui(gpVertexAttribP1ui, (C.GLuint)(index), (C.GLenum)(xtype), (C.GLboolean)(boolToInt(normalized)), (C.GLuint)(value))
}
func VertexAttribP1uiv(index uint32, xtype uint32, normalized bool, value *uint32) {
  C.glowVertexAttribP1uiv(gpVertexAttribP1uiv, (C.GLuint)(index), (C.GLenum)(xtype), (C.GLboolean)(boolToInt(normalized)), (*C.GLuint)(unsafe.Pointer(value)))
}
func VertexAttribP2ui(index uint32, xtype uint32, normalized bool, value uint32) {
  C.glowVertexAttribP2ui(gpVertexAttribP2ui, (C.GLuint)(index), (C.GLenum)(xtype), (C.GLboolean)(boolToInt(normalized)), (C.GLuint)(value))
}
func VertexAttribP2uiv(index uint32, xtype uint32, normalized bool, value *uint32) {
  C.glowVertexAttribP2uiv(gpVertexAttribP2uiv, (C.GLuint)(index), (C.GLenum)(xtype), (C.GLboolean)(boolToInt(normalized)), (*C.GLuint)(unsafe.Pointer(value)))
}
func VertexAttribP3ui(index uint32, xtype uint32, normalized bool, value uint32) {
  C.glowVertexAttribP3ui(gpVertexAttribP3ui, (C.GLuint)(index), (C.GLenum)(xtype), (C.GLboolean)(boolToInt(normalized)), (C.GLuint)(value))
}
func VertexAttribP3uiv(index uint32, xtype uint32, normalized bool, value *uint32) {
  C.glowVertexAttribP3uiv(gpVertexAttribP3uiv, (C.GLuint)(index), (C.GLenum)(xtype), (C.GLboolean)(boolToInt(normalized)), (*C.GLuint)(unsafe.Pointer(value)))
}
func VertexAttribP4ui(index uint32, xtype uint32, normalized bool, value uint32) {
  C.glowVertexAttribP4ui(gpVertexAttribP4ui, (C.GLuint)(index), (C.GLenum)(xtype), (C.GLboolean)(boolToInt(normalized)), (C.GLuint)(value))
}
func VertexAttribP4uiv(index uint32, xtype uint32, normalized bool, value *uint32) {
  C.glowVertexAttribP4uiv(gpVertexAttribP4uiv, (C.GLuint)(index), (C.GLenum)(xtype), (C.GLboolean)(boolToInt(normalized)), (*C.GLuint)(unsafe.Pointer(value)))
}
func VertexAttribParameteriAMD(index uint32, pname uint32, param int32) {
  C.glowVertexAttribParameteriAMD(gpVertexAttribParameteriAMD, (C.GLuint)(index), (C.GLenum)(pname), (C.GLint)(param))
}
// define an array of generic vertex attribute data
func VertexAttribPointer(index uint32, size int32, xtype uint32, normalized bool, stride int32, pointer unsafe.Pointer) {
  C.glowVertexAttribPointer(gpVertexAttribPointer, (C.GLuint)(index), (C.GLint)(size), (C.GLenum)(xtype), (C.GLboolean)(boolToInt(normalized)), (C.GLsizei)(stride), pointer)
}
func VertexAttribPointerARB(index uint32, size int32, xtype uint32, normalized bool, stride int32, pointer unsafe.Pointer) {
  C.glowVertexAttribPointerARB(gpVertexAttribPointerARB, (C.GLuint)(index), (C.GLint)(size), (C.GLenum)(xtype), (C.GLboolean)(boolToInt(normalized)), (C.GLsizei)(stride), pointer)
}
func VertexAttribPointerNV(index uint32, fsize int32, xtype uint32, stride int32, pointer unsafe.Pointer) {
  C.glowVertexAttribPointerNV(gpVertexAttribPointerNV, (C.GLuint)(index), (C.GLint)(fsize), (C.GLenum)(xtype), (C.GLsizei)(stride), pointer)
}
func VertexAttribs1dvNV(index uint32, count int32, v *float64) {
  C.glowVertexAttribs1dvNV(gpVertexAttribs1dvNV, (C.GLuint)(index), (C.GLsizei)(count), (*C.GLdouble)(unsafe.Pointer(v)))
}
func VertexAttribs1fvNV(index uint32, count int32, v *float32) {
  C.glowVertexAttribs1fvNV(gpVertexAttribs1fvNV, (C.GLuint)(index), (C.GLsizei)(count), (*C.GLfloat)(unsafe.Pointer(v)))
}
func VertexAttribs1hvNV(index uint32, n int32, v *uint16) {
  C.glowVertexAttribs1hvNV(gpVertexAttribs1hvNV, (C.GLuint)(index), (C.GLsizei)(n), (*C.GLhalfNV)(unsafe.Pointer(v)))
}
func VertexAttribs1svNV(index uint32, count int32, v *int16) {
  C.glowVertexAttribs1svNV(gpVertexAttribs1svNV, (C.GLuint)(index), (C.GLsizei)(count), (*C.GLshort)(unsafe.Pointer(v)))
}
func VertexAttribs2dvNV(index uint32, count int32, v *float64) {
  C.glowVertexAttribs2dvNV(gpVertexAttribs2dvNV, (C.GLuint)(index), (C.GLsizei)(count), (*C.GLdouble)(unsafe.Pointer(v)))
}
func VertexAttribs2fvNV(index uint32, count int32, v *float32) {
  C.glowVertexAttribs2fvNV(gpVertexAttribs2fvNV, (C.GLuint)(index), (C.GLsizei)(count), (*C.GLfloat)(unsafe.Pointer(v)))
}
func VertexAttribs2hvNV(index uint32, n int32, v *uint16) {
  C.glowVertexAttribs2hvNV(gpVertexAttribs2hvNV, (C.GLuint)(index), (C.GLsizei)(n), (*C.GLhalfNV)(unsafe.Pointer(v)))
}
func VertexAttribs2svNV(index uint32, count int32, v *int16) {
  C.glowVertexAttribs2svNV(gpVertexAttribs2svNV, (C.GLuint)(index), (C.GLsizei)(count), (*C.GLshort)(unsafe.Pointer(v)))
}
func VertexAttribs3dvNV(index uint32, count int32, v *float64) {
  C.glowVertexAttribs3dvNV(gpVertexAttribs3dvNV, (C.GLuint)(index), (C.GLsizei)(count), (*C.GLdouble)(unsafe.Pointer(v)))
}
func VertexAttribs3fvNV(index uint32, count int32, v *float32) {
  C.glowVertexAttribs3fvNV(gpVertexAttribs3fvNV, (C.GLuint)(index), (C.GLsizei)(count), (*C.GLfloat)(unsafe.Pointer(v)))
}
func VertexAttribs3hvNV(index uint32, n int32, v *uint16) {
  C.glowVertexAttribs3hvNV(gpVertexAttribs3hvNV, (C.GLuint)(index), (C.GLsizei)(n), (*C.GLhalfNV)(unsafe.Pointer(v)))
}
func VertexAttribs3svNV(index uint32, count int32, v *int16) {
  C.glowVertexAttribs3svNV(gpVertexAttribs3svNV, (C.GLuint)(index), (C.GLsizei)(count), (*C.GLshort)(unsafe.Pointer(v)))
}
func VertexAttribs4dvNV(index uint32, count int32, v *float64) {
  C.glowVertexAttribs4dvNV(gpVertexAttribs4dvNV, (C.GLuint)(index), (C.GLsizei)(count), (*C.GLdouble)(unsafe.Pointer(v)))
}
func VertexAttribs4fvNV(index uint32, count int32, v *float32) {
  C.glowVertexAttribs4fvNV(gpVertexAttribs4fvNV, (C.GLuint)(index), (C.GLsizei)(count), (*C.GLfloat)(unsafe.Pointer(v)))
}
func VertexAttribs4hvNV(index uint32, n int32, v *uint16) {
  C.glowVertexAttribs4hvNV(gpVertexAttribs4hvNV, (C.GLuint)(index), (C.GLsizei)(n), (*C.GLhalfNV)(unsafe.Pointer(v)))
}
func VertexAttribs4svNV(index uint32, count int32, v *int16) {
  C.glowVertexAttribs4svNV(gpVertexAttribs4svNV, (C.GLuint)(index), (C.GLsizei)(count), (*C.GLshort)(unsafe.Pointer(v)))
}
func VertexAttribs4ubvNV(index uint32, count int32, v *uint8) {
  C.glowVertexAttribs4ubvNV(gpVertexAttribs4ubvNV, (C.GLuint)(index), (C.GLsizei)(count), (*C.GLubyte)(unsafe.Pointer(v)))
}
// modify the rate at which generic vertex attributes advance
func VertexBindingDivisor(bindingindex uint32, divisor uint32) {
  C.glowVertexBindingDivisor(gpVertexBindingDivisor, (C.GLuint)(bindingindex), (C.GLuint)(divisor))
}
func VertexBlendARB(count int32) {
  C.glowVertexBlendARB(gpVertexBlendARB, (C.GLint)(count))
}
func VertexBlendEnvfATI(pname uint32, param float32) {
  C.glowVertexBlendEnvfATI(gpVertexBlendEnvfATI, (C.GLenum)(pname), (C.GLfloat)(param))
}
func VertexBlendEnviATI(pname uint32, param int32) {
  C.glowVertexBlendEnviATI(gpVertexBlendEnviATI, (C.GLenum)(pname), (C.GLint)(param))
}
func VertexFormatNV(size int32, xtype uint32, stride int32) {
  C.glowVertexFormatNV(gpVertexFormatNV, (C.GLint)(size), (C.GLenum)(xtype), (C.GLsizei)(stride))
}
func VertexPointerEXT(size int32, xtype uint32, stride int32, count int32, pointer unsafe.Pointer) {
  C.glowVertexPointerEXT(gpVertexPointerEXT, (C.GLint)(size), (C.GLenum)(xtype), (C.GLsizei)(stride), (C.GLsizei)(count), pointer)
}
func VertexPointerListIBM(size int32, xtype uint32, stride int32, pointer *unsafe.Pointer, ptrstride int32) {
  C.glowVertexPointerListIBM(gpVertexPointerListIBM, (C.GLint)(size), (C.GLenum)(xtype), (C.GLint)(stride), pointer, (C.GLint)(ptrstride))
}
func VertexPointervINTEL(size int32, xtype uint32, pointer *unsafe.Pointer) {
  C.glowVertexPointervINTEL(gpVertexPointervINTEL, (C.GLint)(size), (C.GLenum)(xtype), pointer)
}
func VertexStream1dATI(stream uint32, x float64) {
  C.glowVertexStream1dATI(gpVertexStream1dATI, (C.GLenum)(stream), (C.GLdouble)(x))
}
func VertexStream1dvATI(stream uint32, coords *float64) {
  C.glowVertexStream1dvATI(gpVertexStream1dvATI, (C.GLenum)(stream), (*C.GLdouble)(unsafe.Pointer(coords)))
}
func VertexStream1fATI(stream uint32, x float32) {
  C.glowVertexStream1fATI(gpVertexStream1fATI, (C.GLenum)(stream), (C.GLfloat)(x))
}
func VertexStream1fvATI(stream uint32, coords *float32) {
  C.glowVertexStream1fvATI(gpVertexStream1fvATI, (C.GLenum)(stream), (*C.GLfloat)(unsafe.Pointer(coords)))
}
func VertexStream1iATI(stream uint32, x int32) {
  C.glowVertexStream1iATI(gpVertexStream1iATI, (C.GLenum)(stream), (C.GLint)(x))
}
func VertexStream1ivATI(stream uint32, coords *int32) {
  C.glowVertexStream1ivATI(gpVertexStream1ivATI, (C.GLenum)(stream), (*C.GLint)(unsafe.Pointer(coords)))
}
func VertexStream1sATI(stream uint32, x int16) {
  C.glowVertexStream1sATI(gpVertexStream1sATI, (C.GLenum)(stream), (C.GLshort)(x))
}
func VertexStream1svATI(stream uint32, coords *int16) {
  C.glowVertexStream1svATI(gpVertexStream1svATI, (C.GLenum)(stream), (*C.GLshort)(unsafe.Pointer(coords)))
}
func VertexStream2dATI(stream uint32, x float64, y float64) {
  C.glowVertexStream2dATI(gpVertexStream2dATI, (C.GLenum)(stream), (C.GLdouble)(x), (C.GLdouble)(y))
}
func VertexStream2dvATI(stream uint32, coords *float64) {
  C.glowVertexStream2dvATI(gpVertexStream2dvATI, (C.GLenum)(stream), (*C.GLdouble)(unsafe.Pointer(coords)))
}
func VertexStream2fATI(stream uint32, x float32, y float32) {
  C.glowVertexStream2fATI(gpVertexStream2fATI, (C.GLenum)(stream), (C.GLfloat)(x), (C.GLfloat)(y))
}
func VertexStream2fvATI(stream uint32, coords *float32) {
  C.glowVertexStream2fvATI(gpVertexStream2fvATI, (C.GLenum)(stream), (*C.GLfloat)(unsafe.Pointer(coords)))
}
func VertexStream2iATI(stream uint32, x int32, y int32) {
  C.glowVertexStream2iATI(gpVertexStream2iATI, (C.GLenum)(stream), (C.GLint)(x), (C.GLint)(y))
}
func VertexStream2ivATI(stream uint32, coords *int32) {
  C.glowVertexStream2ivATI(gpVertexStream2ivATI, (C.GLenum)(stream), (*C.GLint)(unsafe.Pointer(coords)))
}
func VertexStream2sATI(stream uint32, x int16, y int16) {
  C.glowVertexStream2sATI(gpVertexStream2sATI, (C.GLenum)(stream), (C.GLshort)(x), (C.GLshort)(y))
}
func VertexStream2svATI(stream uint32, coords *int16) {
  C.glowVertexStream2svATI(gpVertexStream2svATI, (C.GLenum)(stream), (*C.GLshort)(unsafe.Pointer(coords)))
}
func VertexStream3dATI(stream uint32, x float64, y float64, z float64) {
  C.glowVertexStream3dATI(gpVertexStream3dATI, (C.GLenum)(stream), (C.GLdouble)(x), (C.GLdouble)(y), (C.GLdouble)(z))
}
func VertexStream3dvATI(stream uint32, coords *float64) {
  C.glowVertexStream3dvATI(gpVertexStream3dvATI, (C.GLenum)(stream), (*C.GLdouble)(unsafe.Pointer(coords)))
}
func VertexStream3fATI(stream uint32, x float32, y float32, z float32) {
  C.glowVertexStream3fATI(gpVertexStream3fATI, (C.GLenum)(stream), (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z))
}
func VertexStream3fvATI(stream uint32, coords *float32) {
  C.glowVertexStream3fvATI(gpVertexStream3fvATI, (C.GLenum)(stream), (*C.GLfloat)(unsafe.Pointer(coords)))
}
func VertexStream3iATI(stream uint32, x int32, y int32, z int32) {
  C.glowVertexStream3iATI(gpVertexStream3iATI, (C.GLenum)(stream), (C.GLint)(x), (C.GLint)(y), (C.GLint)(z))
}
func VertexStream3ivATI(stream uint32, coords *int32) {
  C.glowVertexStream3ivATI(gpVertexStream3ivATI, (C.GLenum)(stream), (*C.GLint)(unsafe.Pointer(coords)))
}
func VertexStream3sATI(stream uint32, x int16, y int16, z int16) {
  C.glowVertexStream3sATI(gpVertexStream3sATI, (C.GLenum)(stream), (C.GLshort)(x), (C.GLshort)(y), (C.GLshort)(z))
}
func VertexStream3svATI(stream uint32, coords *int16) {
  C.glowVertexStream3svATI(gpVertexStream3svATI, (C.GLenum)(stream), (*C.GLshort)(unsafe.Pointer(coords)))
}
func VertexStream4dATI(stream uint32, x float64, y float64, z float64, w float64) {
  C.glowVertexStream4dATI(gpVertexStream4dATI, (C.GLenum)(stream), (C.GLdouble)(x), (C.GLdouble)(y), (C.GLdouble)(z), (C.GLdouble)(w))
}
func VertexStream4dvATI(stream uint32, coords *float64) {
  C.glowVertexStream4dvATI(gpVertexStream4dvATI, (C.GLenum)(stream), (*C.GLdouble)(unsafe.Pointer(coords)))
}
func VertexStream4fATI(stream uint32, x float32, y float32, z float32, w float32) {
  C.glowVertexStream4fATI(gpVertexStream4fATI, (C.GLenum)(stream), (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z), (C.GLfloat)(w))
}
func VertexStream4fvATI(stream uint32, coords *float32) {
  C.glowVertexStream4fvATI(gpVertexStream4fvATI, (C.GLenum)(stream), (*C.GLfloat)(unsafe.Pointer(coords)))
}
func VertexStream4iATI(stream uint32, x int32, y int32, z int32, w int32) {
  C.glowVertexStream4iATI(gpVertexStream4iATI, (C.GLenum)(stream), (C.GLint)(x), (C.GLint)(y), (C.GLint)(z), (C.GLint)(w))
}
func VertexStream4ivATI(stream uint32, coords *int32) {
  C.glowVertexStream4ivATI(gpVertexStream4ivATI, (C.GLenum)(stream), (*C.GLint)(unsafe.Pointer(coords)))
}
func VertexStream4sATI(stream uint32, x int16, y int16, z int16, w int16) {
  C.glowVertexStream4sATI(gpVertexStream4sATI, (C.GLenum)(stream), (C.GLshort)(x), (C.GLshort)(y), (C.GLshort)(z), (C.GLshort)(w))
}
func VertexStream4svATI(stream uint32, coords *int16) {
  C.glowVertexStream4svATI(gpVertexStream4svATI, (C.GLenum)(stream), (*C.GLshort)(unsafe.Pointer(coords)))
}
func VertexWeightPointerEXT(size int32, xtype uint32, stride int32, pointer unsafe.Pointer) {
  C.glowVertexWeightPointerEXT(gpVertexWeightPointerEXT, (C.GLint)(size), (C.GLenum)(xtype), (C.GLsizei)(stride), pointer)
}
func VertexWeightfEXT(weight float32) {
  C.glowVertexWeightfEXT(gpVertexWeightfEXT, (C.GLfloat)(weight))
}
func VertexWeightfvEXT(weight *float32) {
  C.glowVertexWeightfvEXT(gpVertexWeightfvEXT, (*C.GLfloat)(unsafe.Pointer(weight)))
}
func VertexWeighthNV(weight uint16) {
  C.glowVertexWeighthNV(gpVertexWeighthNV, (C.GLhalfNV)(weight))
}
func VertexWeighthvNV(weight *uint16) {
  C.glowVertexWeighthvNV(gpVertexWeighthvNV, (*C.GLhalfNV)(unsafe.Pointer(weight)))
}
func VideoCaptureNV(video_capture_slot uint32, sequence_num *uint32, capture_time *uint64) uint32 {
  ret := C.glowVideoCaptureNV(gpVideoCaptureNV, (C.GLuint)(video_capture_slot), (*C.GLuint)(unsafe.Pointer(sequence_num)), (*C.GLuint64EXT)(unsafe.Pointer(capture_time)))
  return (uint32)(ret)
}
func VideoCaptureStreamParameterdvNV(video_capture_slot uint32, stream uint32, pname uint32, params *float64) {
  C.glowVideoCaptureStreamParameterdvNV(gpVideoCaptureStreamParameterdvNV, (C.GLuint)(video_capture_slot), (C.GLuint)(stream), (C.GLenum)(pname), (*C.GLdouble)(unsafe.Pointer(params)))
}
func VideoCaptureStreamParameterfvNV(video_capture_slot uint32, stream uint32, pname uint32, params *float32) {
  C.glowVideoCaptureStreamParameterfvNV(gpVideoCaptureStreamParameterfvNV, (C.GLuint)(video_capture_slot), (C.GLuint)(stream), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func VideoCaptureStreamParameterivNV(video_capture_slot uint32, stream uint32, pname uint32, params *int32) {
  C.glowVideoCaptureStreamParameterivNV(gpVideoCaptureStreamParameterivNV, (C.GLuint)(video_capture_slot), (C.GLuint)(stream), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
// set the viewport
func Viewport(x int32, y int32, width int32, height int32) {
  C.glowViewport(gpViewport, (C.GLint)(x), (C.GLint)(y), (C.GLsizei)(width), (C.GLsizei)(height))
}
func ViewportArrayv(first uint32, count int32, v *float32) {
  C.glowViewportArrayv(gpViewportArrayv, (C.GLuint)(first), (C.GLsizei)(count), (*C.GLfloat)(unsafe.Pointer(v)))
}
func ViewportIndexedf(index uint32, x float32, y float32, w float32, h float32) {
  C.glowViewportIndexedf(gpViewportIndexedf, (C.GLuint)(index), (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(w), (C.GLfloat)(h))
}
func ViewportIndexedfv(index uint32, v *float32) {
  C.glowViewportIndexedfv(gpViewportIndexedfv, (C.GLuint)(index), (*C.GLfloat)(unsafe.Pointer(v)))
}
// instruct the GL server to block until the specified sync object becomes signaled
func WaitSync(sync unsafe.Pointer, flags uint32, timeout uint64) {
  C.glowWaitSync(gpWaitSync, (C.GLsync)(sync), (C.GLbitfield)(flags), (C.GLuint64)(timeout))
}
func WeightPathsNV(resultPath uint32, numPaths int32, paths *uint32, weights *float32) {
  C.glowWeightPathsNV(gpWeightPathsNV, (C.GLuint)(resultPath), (C.GLsizei)(numPaths), (*C.GLuint)(unsafe.Pointer(paths)), (*C.GLfloat)(unsafe.Pointer(weights)))
}
func WeightPointerARB(size int32, xtype uint32, stride int32, pointer unsafe.Pointer) {
  C.glowWeightPointerARB(gpWeightPointerARB, (C.GLint)(size), (C.GLenum)(xtype), (C.GLsizei)(stride), pointer)
}
func WeightbvARB(size int32, weights *int8) {
  C.glowWeightbvARB(gpWeightbvARB, (C.GLint)(size), (*C.GLbyte)(unsafe.Pointer(weights)))
}
func WeightdvARB(size int32, weights *float64) {
  C.glowWeightdvARB(gpWeightdvARB, (C.GLint)(size), (*C.GLdouble)(unsafe.Pointer(weights)))
}
func WeightfvARB(size int32, weights *float32) {
  C.glowWeightfvARB(gpWeightfvARB, (C.GLint)(size), (*C.GLfloat)(unsafe.Pointer(weights)))
}
func WeightivARB(size int32, weights *int32) {
  C.glowWeightivARB(gpWeightivARB, (C.GLint)(size), (*C.GLint)(unsafe.Pointer(weights)))
}
func WeightsvARB(size int32, weights *int16) {
  C.glowWeightsvARB(gpWeightsvARB, (C.GLint)(size), (*C.GLshort)(unsafe.Pointer(weights)))
}
func WeightubvARB(size int32, weights *uint8) {
  C.glowWeightubvARB(gpWeightubvARB, (C.GLint)(size), (*C.GLubyte)(unsafe.Pointer(weights)))
}
func WeightuivARB(size int32, weights *uint32) {
  C.glowWeightuivARB(gpWeightuivARB, (C.GLint)(size), (*C.GLuint)(unsafe.Pointer(weights)))
}
func WeightusvARB(size int32, weights *uint16) {
  C.glowWeightusvARB(gpWeightusvARB, (C.GLint)(size), (*C.GLushort)(unsafe.Pointer(weights)))
}
func WindowPos2dARB(x float64, y float64) {
  C.glowWindowPos2dARB(gpWindowPos2dARB, (C.GLdouble)(x), (C.GLdouble)(y))
}
func WindowPos2dMESA(x float64, y float64) {
  C.glowWindowPos2dMESA(gpWindowPos2dMESA, (C.GLdouble)(x), (C.GLdouble)(y))
}
func WindowPos2dvARB(v *float64) {
  C.glowWindowPos2dvARB(gpWindowPos2dvARB, (*C.GLdouble)(unsafe.Pointer(v)))
}
func WindowPos2dvMESA(v *float64) {
  C.glowWindowPos2dvMESA(gpWindowPos2dvMESA, (*C.GLdouble)(unsafe.Pointer(v)))
}
func WindowPos2fARB(x float32, y float32) {
  C.glowWindowPos2fARB(gpWindowPos2fARB, (C.GLfloat)(x), (C.GLfloat)(y))
}
func WindowPos2fMESA(x float32, y float32) {
  C.glowWindowPos2fMESA(gpWindowPos2fMESA, (C.GLfloat)(x), (C.GLfloat)(y))
}
func WindowPos2fvARB(v *float32) {
  C.glowWindowPos2fvARB(gpWindowPos2fvARB, (*C.GLfloat)(unsafe.Pointer(v)))
}
func WindowPos2fvMESA(v *float32) {
  C.glowWindowPos2fvMESA(gpWindowPos2fvMESA, (*C.GLfloat)(unsafe.Pointer(v)))
}
func WindowPos2iARB(x int32, y int32) {
  C.glowWindowPos2iARB(gpWindowPos2iARB, (C.GLint)(x), (C.GLint)(y))
}
func WindowPos2iMESA(x int32, y int32) {
  C.glowWindowPos2iMESA(gpWindowPos2iMESA, (C.GLint)(x), (C.GLint)(y))
}
func WindowPos2ivARB(v *int32) {
  C.glowWindowPos2ivARB(gpWindowPos2ivARB, (*C.GLint)(unsafe.Pointer(v)))
}
func WindowPos2ivMESA(v *int32) {
  C.glowWindowPos2ivMESA(gpWindowPos2ivMESA, (*C.GLint)(unsafe.Pointer(v)))
}
func WindowPos2sARB(x int16, y int16) {
  C.glowWindowPos2sARB(gpWindowPos2sARB, (C.GLshort)(x), (C.GLshort)(y))
}
func WindowPos2sMESA(x int16, y int16) {
  C.glowWindowPos2sMESA(gpWindowPos2sMESA, (C.GLshort)(x), (C.GLshort)(y))
}
func WindowPos2svARB(v *int16) {
  C.glowWindowPos2svARB(gpWindowPos2svARB, (*C.GLshort)(unsafe.Pointer(v)))
}
func WindowPos2svMESA(v *int16) {
  C.glowWindowPos2svMESA(gpWindowPos2svMESA, (*C.GLshort)(unsafe.Pointer(v)))
}
func WindowPos3dARB(x float64, y float64, z float64) {
  C.glowWindowPos3dARB(gpWindowPos3dARB, (C.GLdouble)(x), (C.GLdouble)(y), (C.GLdouble)(z))
}
func WindowPos3dMESA(x float64, y float64, z float64) {
  C.glowWindowPos3dMESA(gpWindowPos3dMESA, (C.GLdouble)(x), (C.GLdouble)(y), (C.GLdouble)(z))
}
func WindowPos3dvARB(v *float64) {
  C.glowWindowPos3dvARB(gpWindowPos3dvARB, (*C.GLdouble)(unsafe.Pointer(v)))
}
func WindowPos3dvMESA(v *float64) {
  C.glowWindowPos3dvMESA(gpWindowPos3dvMESA, (*C.GLdouble)(unsafe.Pointer(v)))
}
func WindowPos3fARB(x float32, y float32, z float32) {
  C.glowWindowPos3fARB(gpWindowPos3fARB, (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z))
}
func WindowPos3fMESA(x float32, y float32, z float32) {
  C.glowWindowPos3fMESA(gpWindowPos3fMESA, (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z))
}
func WindowPos3fvARB(v *float32) {
  C.glowWindowPos3fvARB(gpWindowPos3fvARB, (*C.GLfloat)(unsafe.Pointer(v)))
}
func WindowPos3fvMESA(v *float32) {
  C.glowWindowPos3fvMESA(gpWindowPos3fvMESA, (*C.GLfloat)(unsafe.Pointer(v)))
}
func WindowPos3iARB(x int32, y int32, z int32) {
  C.glowWindowPos3iARB(gpWindowPos3iARB, (C.GLint)(x), (C.GLint)(y), (C.GLint)(z))
}
func WindowPos3iMESA(x int32, y int32, z int32) {
  C.glowWindowPos3iMESA(gpWindowPos3iMESA, (C.GLint)(x), (C.GLint)(y), (C.GLint)(z))
}
func WindowPos3ivARB(v *int32) {
  C.glowWindowPos3ivARB(gpWindowPos3ivARB, (*C.GLint)(unsafe.Pointer(v)))
}
func WindowPos3ivMESA(v *int32) {
  C.glowWindowPos3ivMESA(gpWindowPos3ivMESA, (*C.GLint)(unsafe.Pointer(v)))
}
func WindowPos3sARB(x int16, y int16, z int16) {
  C.glowWindowPos3sARB(gpWindowPos3sARB, (C.GLshort)(x), (C.GLshort)(y), (C.GLshort)(z))
}
func WindowPos3sMESA(x int16, y int16, z int16) {
  C.glowWindowPos3sMESA(gpWindowPos3sMESA, (C.GLshort)(x), (C.GLshort)(y), (C.GLshort)(z))
}
func WindowPos3svARB(v *int16) {
  C.glowWindowPos3svARB(gpWindowPos3svARB, (*C.GLshort)(unsafe.Pointer(v)))
}
func WindowPos3svMESA(v *int16) {
  C.glowWindowPos3svMESA(gpWindowPos3svMESA, (*C.GLshort)(unsafe.Pointer(v)))
}
func WindowPos4dMESA(x float64, y float64, z float64, w float64) {
  C.glowWindowPos4dMESA(gpWindowPos4dMESA, (C.GLdouble)(x), (C.GLdouble)(y), (C.GLdouble)(z), (C.GLdouble)(w))
}
func WindowPos4dvMESA(v *float64) {
  C.glowWindowPos4dvMESA(gpWindowPos4dvMESA, (*C.GLdouble)(unsafe.Pointer(v)))
}
func WindowPos4fMESA(x float32, y float32, z float32, w float32) {
  C.glowWindowPos4fMESA(gpWindowPos4fMESA, (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z), (C.GLfloat)(w))
}
func WindowPos4fvMESA(v *float32) {
  C.glowWindowPos4fvMESA(gpWindowPos4fvMESA, (*C.GLfloat)(unsafe.Pointer(v)))
}
func WindowPos4iMESA(x int32, y int32, z int32, w int32) {
  C.glowWindowPos4iMESA(gpWindowPos4iMESA, (C.GLint)(x), (C.GLint)(y), (C.GLint)(z), (C.GLint)(w))
}
func WindowPos4ivMESA(v *int32) {
  C.glowWindowPos4ivMESA(gpWindowPos4ivMESA, (*C.GLint)(unsafe.Pointer(v)))
}
func WindowPos4sMESA(x int16, y int16, z int16, w int16) {
  C.glowWindowPos4sMESA(gpWindowPos4sMESA, (C.GLshort)(x), (C.GLshort)(y), (C.GLshort)(z), (C.GLshort)(w))
}
func WindowPos4svMESA(v *int16) {
  C.glowWindowPos4svMESA(gpWindowPos4svMESA, (*C.GLshort)(unsafe.Pointer(v)))
}
func WriteMaskEXT(res uint32, in uint32, outX uint32, outY uint32, outZ uint32, outW uint32) {
  C.glowWriteMaskEXT(gpWriteMaskEXT, (C.GLuint)(res), (C.GLuint)(in), (C.GLenum)(outX), (C.GLenum)(outY), (C.GLenum)(outZ), (C.GLenum)(outW))
}
func Init() error {
  return InitWithProcAddrFunc(auto.GetProcAddress)
}
func InitWithProcAddrFunc(getProcAddr procaddr.GetProcAddressFunc) error {
  if gpAccumxOES = (C.GPACCUMXOES)(getProcAddr("glAccumxOES")); gpAccumxOES == nil {
    OES_fixed_point = false
  }
  if gpActiveProgramEXT = (C.GPACTIVEPROGRAMEXT)(getProcAddr("glActiveProgramEXT")); gpActiveProgramEXT == nil {
    EXT_separate_shader_objects = false
  }
  if gpActiveShaderProgram = (C.GPACTIVESHADERPROGRAM)(getProcAddr("glActiveShaderProgram")); gpActiveShaderProgram == nil {
    ARB_separate_shader_objects = false
  }
  if gpActiveShaderProgramEXT = (C.GPACTIVESHADERPROGRAMEXT)(getProcAddr("glActiveShaderProgramEXT")); gpActiveShaderProgramEXT == nil {
    EXT_separate_shader_objects = false
  }
  if gpActiveStencilFaceEXT = (C.GPACTIVESTENCILFACEEXT)(getProcAddr("glActiveStencilFaceEXT")); gpActiveStencilFaceEXT == nil {
    EXT_stencil_two_side = false
  }
  if gpActiveTexture = (C.GPACTIVETEXTURE)(getProcAddr("glActiveTexture")); gpActiveTexture == nil {
    return errors.New("glActiveTexture")
  }
  if gpActiveTextureARB = (C.GPACTIVETEXTUREARB)(getProcAddr("glActiveTextureARB")); gpActiveTextureARB == nil {
    ARB_multitexture = false
  }
  if gpActiveVaryingNV = (C.GPACTIVEVARYINGNV)(getProcAddr("glActiveVaryingNV")); gpActiveVaryingNV == nil {
    NV_transform_feedback = false
  }
  if gpAlphaFragmentOp1ATI = (C.GPALPHAFRAGMENTOP1ATI)(getProcAddr("glAlphaFragmentOp1ATI")); gpAlphaFragmentOp1ATI == nil {
    ATI_fragment_shader = false
  }
  if gpAlphaFragmentOp2ATI = (C.GPALPHAFRAGMENTOP2ATI)(getProcAddr("glAlphaFragmentOp2ATI")); gpAlphaFragmentOp2ATI == nil {
    ATI_fragment_shader = false
  }
  if gpAlphaFragmentOp3ATI = (C.GPALPHAFRAGMENTOP3ATI)(getProcAddr("glAlphaFragmentOp3ATI")); gpAlphaFragmentOp3ATI == nil {
    ATI_fragment_shader = false
  }
  if gpAlphaFuncxOES = (C.GPALPHAFUNCXOES)(getProcAddr("glAlphaFuncxOES")); gpAlphaFuncxOES == nil {
    OES_fixed_point = false
  }
  if gpApplyTextureEXT = (C.GPAPPLYTEXTUREEXT)(getProcAddr("glApplyTextureEXT")); gpApplyTextureEXT == nil {
    EXT_light_texture = false
  }
  if gpAreProgramsResidentNV = (C.GPAREPROGRAMSRESIDENTNV)(getProcAddr("glAreProgramsResidentNV")); gpAreProgramsResidentNV == nil {
    NV_vertex_program = false
  }
  if gpAreTexturesResidentEXT = (C.GPARETEXTURESRESIDENTEXT)(getProcAddr("glAreTexturesResidentEXT")); gpAreTexturesResidentEXT == nil {
    EXT_texture_object = false
  }
  if gpArrayElementEXT = (C.GPARRAYELEMENTEXT)(getProcAddr("glArrayElementEXT")); gpArrayElementEXT == nil {
    EXT_vertex_array = false
  }
  if gpArrayObjectATI = (C.GPARRAYOBJECTATI)(getProcAddr("glArrayObjectATI")); gpArrayObjectATI == nil {
    ATI_vertex_array_object = false
  }
  if gpAsyncMarkerSGIX = (C.GPASYNCMARKERSGIX)(getProcAddr("glAsyncMarkerSGIX")); gpAsyncMarkerSGIX == nil {
    SGIX_async = false
  }
  if gpAttachObjectARB = (C.GPATTACHOBJECTARB)(getProcAddr("glAttachObjectARB")); gpAttachObjectARB == nil {
    ARB_shader_objects = false
  }
  if gpAttachShader = (C.GPATTACHSHADER)(getProcAddr("glAttachShader")); gpAttachShader == nil {
    return errors.New("glAttachShader")
  }
  if gpBeginConditionalRender = (C.GPBEGINCONDITIONALRENDER)(getProcAddr("glBeginConditionalRender")); gpBeginConditionalRender == nil {
    return errors.New("glBeginConditionalRender")
  }
  if gpBeginConditionalRenderNV = (C.GPBEGINCONDITIONALRENDERNV)(getProcAddr("glBeginConditionalRenderNV")); gpBeginConditionalRenderNV == nil {
    NV_conditional_render = false
  }
  if gpBeginConditionalRenderNVX = (C.GPBEGINCONDITIONALRENDERNVX)(getProcAddr("glBeginConditionalRenderNVX")); gpBeginConditionalRenderNVX == nil {
    NVX_conditional_render = false
  }
  if gpBeginFragmentShaderATI = (C.GPBEGINFRAGMENTSHADERATI)(getProcAddr("glBeginFragmentShaderATI")); gpBeginFragmentShaderATI == nil {
    ATI_fragment_shader = false
  }
  if gpBeginOcclusionQueryNV = (C.GPBEGINOCCLUSIONQUERYNV)(getProcAddr("glBeginOcclusionQueryNV")); gpBeginOcclusionQueryNV == nil {
    NV_occlusion_query = false
  }
  if gpBeginPerfMonitorAMD = (C.GPBEGINPERFMONITORAMD)(getProcAddr("glBeginPerfMonitorAMD")); gpBeginPerfMonitorAMD == nil {
    AMD_performance_monitor = false
  }
  if gpBeginPerfQueryINTEL = (C.GPBEGINPERFQUERYINTEL)(getProcAddr("glBeginPerfQueryINTEL")); gpBeginPerfQueryINTEL == nil {
    INTEL_performance_query = false
  }
  if gpBeginQuery = (C.GPBEGINQUERY)(getProcAddr("glBeginQuery")); gpBeginQuery == nil {
    return errors.New("glBeginQuery")
  }
  if gpBeginQueryARB = (C.GPBEGINQUERYARB)(getProcAddr("glBeginQueryARB")); gpBeginQueryARB == nil {
    ARB_occlusion_query = false
  }
  if gpBeginQueryIndexed = (C.GPBEGINQUERYINDEXED)(getProcAddr("glBeginQueryIndexed")); gpBeginQueryIndexed == nil {
    ARB_transform_feedback3 = false
  }
  if gpBeginTransformFeedback = (C.GPBEGINTRANSFORMFEEDBACK)(getProcAddr("glBeginTransformFeedback")); gpBeginTransformFeedback == nil {
    return errors.New("glBeginTransformFeedback")
  }
  if gpBeginTransformFeedbackEXT = (C.GPBEGINTRANSFORMFEEDBACKEXT)(getProcAddr("glBeginTransformFeedbackEXT")); gpBeginTransformFeedbackEXT == nil {
    EXT_transform_feedback = false
  }
  if gpBeginTransformFeedbackNV = (C.GPBEGINTRANSFORMFEEDBACKNV)(getProcAddr("glBeginTransformFeedbackNV")); gpBeginTransformFeedbackNV == nil {
    NV_transform_feedback = false
  }
  if gpBeginVertexShaderEXT = (C.GPBEGINVERTEXSHADEREXT)(getProcAddr("glBeginVertexShaderEXT")); gpBeginVertexShaderEXT == nil {
    EXT_vertex_shader = false
  }
  if gpBeginVideoCaptureNV = (C.GPBEGINVIDEOCAPTURENV)(getProcAddr("glBeginVideoCaptureNV")); gpBeginVideoCaptureNV == nil {
    NV_video_capture = false
  }
  if gpBindAttribLocation = (C.GPBINDATTRIBLOCATION)(getProcAddr("glBindAttribLocation")); gpBindAttribLocation == nil {
    return errors.New("glBindAttribLocation")
  }
  if gpBindAttribLocationARB = (C.GPBINDATTRIBLOCATIONARB)(getProcAddr("glBindAttribLocationARB")); gpBindAttribLocationARB == nil {
    ARB_vertex_shader = false
  }
  if gpBindBuffer = (C.GPBINDBUFFER)(getProcAddr("glBindBuffer")); gpBindBuffer == nil {
    return errors.New("glBindBuffer")
  }
  if gpBindBufferARB = (C.GPBINDBUFFERARB)(getProcAddr("glBindBufferARB")); gpBindBufferARB == nil {
    ARB_vertex_buffer_object = false
  }
  if gpBindBufferBase = (C.GPBINDBUFFERBASE)(getProcAddr("glBindBufferBase")); gpBindBufferBase == nil {
    return errors.New("glBindBufferBase")
  }
  if gpBindBufferBaseEXT = (C.GPBINDBUFFERBASEEXT)(getProcAddr("glBindBufferBaseEXT")); gpBindBufferBaseEXT == nil {
    EXT_transform_feedback = false
  }
  if gpBindBufferBaseNV = (C.GPBINDBUFFERBASENV)(getProcAddr("glBindBufferBaseNV")); gpBindBufferBaseNV == nil {
    NV_transform_feedback = false
  }
  if gpBindBufferOffsetEXT = (C.GPBINDBUFFEROFFSETEXT)(getProcAddr("glBindBufferOffsetEXT")); gpBindBufferOffsetEXT == nil {
    EXT_transform_feedback = false
  }
  if gpBindBufferOffsetNV = (C.GPBINDBUFFEROFFSETNV)(getProcAddr("glBindBufferOffsetNV")); gpBindBufferOffsetNV == nil {
    NV_transform_feedback = false
  }
  if gpBindBufferRange = (C.GPBINDBUFFERRANGE)(getProcAddr("glBindBufferRange")); gpBindBufferRange == nil {
    return errors.New("glBindBufferRange")
  }
  if gpBindBufferRangeEXT = (C.GPBINDBUFFERRANGEEXT)(getProcAddr("glBindBufferRangeEXT")); gpBindBufferRangeEXT == nil {
    EXT_transform_feedback = false
  }
  if gpBindBufferRangeNV = (C.GPBINDBUFFERRANGENV)(getProcAddr("glBindBufferRangeNV")); gpBindBufferRangeNV == nil {
    NV_transform_feedback = false
  }
  if gpBindBuffersBase = (C.GPBINDBUFFERSBASE)(getProcAddr("glBindBuffersBase")); gpBindBuffersBase == nil {
    ARB_multi_bind = false
  }
  if gpBindBuffersRange = (C.GPBINDBUFFERSRANGE)(getProcAddr("glBindBuffersRange")); gpBindBuffersRange == nil {
    ARB_multi_bind = false
  }
  if gpBindFragDataLocation = (C.GPBINDFRAGDATALOCATION)(getProcAddr("glBindFragDataLocation")); gpBindFragDataLocation == nil {
    return errors.New("glBindFragDataLocation")
  }
  if gpBindFragDataLocationEXT = (C.GPBINDFRAGDATALOCATIONEXT)(getProcAddr("glBindFragDataLocationEXT")); gpBindFragDataLocationEXT == nil {
    EXT_gpu_shader4 = false
  }
  if gpBindFragDataLocationIndexed = (C.GPBINDFRAGDATALOCATIONINDEXED)(getProcAddr("glBindFragDataLocationIndexed")); gpBindFragDataLocationIndexed == nil {
    ARB_blend_func_extended = false
    return errors.New("glBindFragDataLocationIndexed")
  }
  if gpBindFragmentShaderATI = (C.GPBINDFRAGMENTSHADERATI)(getProcAddr("glBindFragmentShaderATI")); gpBindFragmentShaderATI == nil {
    ATI_fragment_shader = false
  }
  if gpBindFramebuffer = (C.GPBINDFRAMEBUFFER)(getProcAddr("glBindFramebuffer")); gpBindFramebuffer == nil {
    ARB_framebuffer_object = false
    return errors.New("glBindFramebuffer")
  }
  if gpBindFramebufferEXT = (C.GPBINDFRAMEBUFFEREXT)(getProcAddr("glBindFramebufferEXT")); gpBindFramebufferEXT == nil {
    EXT_framebuffer_object = false
  }
  if gpBindImageTexture = (C.GPBINDIMAGETEXTURE)(getProcAddr("glBindImageTexture")); gpBindImageTexture == nil {
    ARB_shader_image_load_store = false
  }
  if gpBindImageTextureEXT = (C.GPBINDIMAGETEXTUREEXT)(getProcAddr("glBindImageTextureEXT")); gpBindImageTextureEXT == nil {
    EXT_shader_image_load_store = false
  }
  if gpBindImageTextures = (C.GPBINDIMAGETEXTURES)(getProcAddr("glBindImageTextures")); gpBindImageTextures == nil {
    ARB_multi_bind = false
  }
  if gpBindLightParameterEXT = (C.GPBINDLIGHTPARAMETEREXT)(getProcAddr("glBindLightParameterEXT")); gpBindLightParameterEXT == nil {
    EXT_vertex_shader = false
  }
  if gpBindMaterialParameterEXT = (C.GPBINDMATERIALPARAMETEREXT)(getProcAddr("glBindMaterialParameterEXT")); gpBindMaterialParameterEXT == nil {
    EXT_vertex_shader = false
  }
  if gpBindMultiTextureEXT = (C.GPBINDMULTITEXTUREEXT)(getProcAddr("glBindMultiTextureEXT")); gpBindMultiTextureEXT == nil {
    EXT_direct_state_access = false
  }
  if gpBindParameterEXT = (C.GPBINDPARAMETEREXT)(getProcAddr("glBindParameterEXT")); gpBindParameterEXT == nil {
    EXT_vertex_shader = false
  }
  if gpBindProgramARB = (C.GPBINDPROGRAMARB)(getProcAddr("glBindProgramARB")); gpBindProgramARB == nil {
    ARB_fragment_program = false
    ARB_vertex_program = false
  }
  if gpBindProgramNV = (C.GPBINDPROGRAMNV)(getProcAddr("glBindProgramNV")); gpBindProgramNV == nil {
    NV_vertex_program = false
  }
  if gpBindProgramPipeline = (C.GPBINDPROGRAMPIPELINE)(getProcAddr("glBindProgramPipeline")); gpBindProgramPipeline == nil {
    ARB_separate_shader_objects = false
  }
  if gpBindProgramPipelineEXT = (C.GPBINDPROGRAMPIPELINEEXT)(getProcAddr("glBindProgramPipelineEXT")); gpBindProgramPipelineEXT == nil {
    EXT_separate_shader_objects = false
  }
  if gpBindRenderbuffer = (C.GPBINDRENDERBUFFER)(getProcAddr("glBindRenderbuffer")); gpBindRenderbuffer == nil {
    ARB_framebuffer_object = false
    return errors.New("glBindRenderbuffer")
  }
  if gpBindRenderbufferEXT = (C.GPBINDRENDERBUFFEREXT)(getProcAddr("glBindRenderbufferEXT")); gpBindRenderbufferEXT == nil {
    EXT_framebuffer_object = false
  }
  if gpBindSampler = (C.GPBINDSAMPLER)(getProcAddr("glBindSampler")); gpBindSampler == nil {
    ARB_sampler_objects = false
    return errors.New("glBindSampler")
  }
  if gpBindSamplers = (C.GPBINDSAMPLERS)(getProcAddr("glBindSamplers")); gpBindSamplers == nil {
    ARB_multi_bind = false
  }
  if gpBindTexGenParameterEXT = (C.GPBINDTEXGENPARAMETEREXT)(getProcAddr("glBindTexGenParameterEXT")); gpBindTexGenParameterEXT == nil {
    EXT_vertex_shader = false
  }
  if gpBindTexture = (C.GPBINDTEXTURE)(getProcAddr("glBindTexture")); gpBindTexture == nil {
    return errors.New("glBindTexture")
  }
  if gpBindTextureEXT = (C.GPBINDTEXTUREEXT)(getProcAddr("glBindTextureEXT")); gpBindTextureEXT == nil {
    EXT_texture_object = false
  }
  if gpBindTextureUnitParameterEXT = (C.GPBINDTEXTUREUNITPARAMETEREXT)(getProcAddr("glBindTextureUnitParameterEXT")); gpBindTextureUnitParameterEXT == nil {
    EXT_vertex_shader = false
  }
  if gpBindTextures = (C.GPBINDTEXTURES)(getProcAddr("glBindTextures")); gpBindTextures == nil {
    ARB_multi_bind = false
  }
  if gpBindTransformFeedback = (C.GPBINDTRANSFORMFEEDBACK)(getProcAddr("glBindTransformFeedback")); gpBindTransformFeedback == nil {
    ARB_transform_feedback2 = false
  }
  if gpBindTransformFeedbackNV = (C.GPBINDTRANSFORMFEEDBACKNV)(getProcAddr("glBindTransformFeedbackNV")); gpBindTransformFeedbackNV == nil {
    NV_transform_feedback2 = false
  }
  if gpBindVertexArray = (C.GPBINDVERTEXARRAY)(getProcAddr("glBindVertexArray")); gpBindVertexArray == nil {
    ARB_vertex_array_object = false
    return errors.New("glBindVertexArray")
  }
  if gpBindVertexArrayAPPLE = (C.GPBINDVERTEXARRAYAPPLE)(getProcAddr("glBindVertexArrayAPPLE")); gpBindVertexArrayAPPLE == nil {
    APPLE_vertex_array_object = false
  }
  if gpBindVertexBuffer = (C.GPBINDVERTEXBUFFER)(getProcAddr("glBindVertexBuffer")); gpBindVertexBuffer == nil {
    ARB_vertex_attrib_binding = false
  }
  if gpBindVertexBuffers = (C.GPBINDVERTEXBUFFERS)(getProcAddr("glBindVertexBuffers")); gpBindVertexBuffers == nil {
    ARB_multi_bind = false
  }
  if gpBindVertexShaderEXT = (C.GPBINDVERTEXSHADEREXT)(getProcAddr("glBindVertexShaderEXT")); gpBindVertexShaderEXT == nil {
    EXT_vertex_shader = false
  }
  if gpBindVideoCaptureStreamBufferNV = (C.GPBINDVIDEOCAPTURESTREAMBUFFERNV)(getProcAddr("glBindVideoCaptureStreamBufferNV")); gpBindVideoCaptureStreamBufferNV == nil {
    NV_video_capture = false
  }
  if gpBindVideoCaptureStreamTextureNV = (C.GPBINDVIDEOCAPTURESTREAMTEXTURENV)(getProcAddr("glBindVideoCaptureStreamTextureNV")); gpBindVideoCaptureStreamTextureNV == nil {
    NV_video_capture = false
  }
  if gpBinormal3bEXT = (C.GPBINORMAL3BEXT)(getProcAddr("glBinormal3bEXT")); gpBinormal3bEXT == nil {
    EXT_coordinate_frame = false
  }
  if gpBinormal3bvEXT = (C.GPBINORMAL3BVEXT)(getProcAddr("glBinormal3bvEXT")); gpBinormal3bvEXT == nil {
    EXT_coordinate_frame = false
  }
  if gpBinormal3dEXT = (C.GPBINORMAL3DEXT)(getProcAddr("glBinormal3dEXT")); gpBinormal3dEXT == nil {
    EXT_coordinate_frame = false
  }
  if gpBinormal3dvEXT = (C.GPBINORMAL3DVEXT)(getProcAddr("glBinormal3dvEXT")); gpBinormal3dvEXT == nil {
    EXT_coordinate_frame = false
  }
  if gpBinormal3fEXT = (C.GPBINORMAL3FEXT)(getProcAddr("glBinormal3fEXT")); gpBinormal3fEXT == nil {
    EXT_coordinate_frame = false
  }
  if gpBinormal3fvEXT = (C.GPBINORMAL3FVEXT)(getProcAddr("glBinormal3fvEXT")); gpBinormal3fvEXT == nil {
    EXT_coordinate_frame = false
  }
  if gpBinormal3iEXT = (C.GPBINORMAL3IEXT)(getProcAddr("glBinormal3iEXT")); gpBinormal3iEXT == nil {
    EXT_coordinate_frame = false
  }
  if gpBinormal3ivEXT = (C.GPBINORMAL3IVEXT)(getProcAddr("glBinormal3ivEXT")); gpBinormal3ivEXT == nil {
    EXT_coordinate_frame = false
  }
  if gpBinormal3sEXT = (C.GPBINORMAL3SEXT)(getProcAddr("glBinormal3sEXT")); gpBinormal3sEXT == nil {
    EXT_coordinate_frame = false
  }
  if gpBinormal3svEXT = (C.GPBINORMAL3SVEXT)(getProcAddr("glBinormal3svEXT")); gpBinormal3svEXT == nil {
    EXT_coordinate_frame = false
  }
  if gpBinormalPointerEXT = (C.GPBINORMALPOINTEREXT)(getProcAddr("glBinormalPointerEXT")); gpBinormalPointerEXT == nil {
    EXT_coordinate_frame = false
  }
  if gpBitmapxOES = (C.GPBITMAPXOES)(getProcAddr("glBitmapxOES")); gpBitmapxOES == nil {
    OES_fixed_point = false
  }
  if gpBlendBarrierNV = (C.GPBLENDBARRIERNV)(getProcAddr("glBlendBarrierNV")); gpBlendBarrierNV == nil {
    NV_blend_equation_advanced = false
  }
  if gpBlendColor = (C.GPBLENDCOLOR)(getProcAddr("glBlendColor")); gpBlendColor == nil {
    ARB_imaging = false
    return errors.New("glBlendColor")
  }
  if gpBlendColorEXT = (C.GPBLENDCOLOREXT)(getProcAddr("glBlendColorEXT")); gpBlendColorEXT == nil {
    EXT_blend_color = false
  }
  if gpBlendColorxOES = (C.GPBLENDCOLORXOES)(getProcAddr("glBlendColorxOES")); gpBlendColorxOES == nil {
    OES_fixed_point = false
  }
  if gpBlendEquation = (C.GPBLENDEQUATION)(getProcAddr("glBlendEquation")); gpBlendEquation == nil {
    ARB_imaging = false
    return errors.New("glBlendEquation")
  }
  if gpBlendEquationEXT = (C.GPBLENDEQUATIONEXT)(getProcAddr("glBlendEquationEXT")); gpBlendEquationEXT == nil {
    EXT_blend_minmax = false
  }
  if gpBlendEquationIndexedAMD = (C.GPBLENDEQUATIONINDEXEDAMD)(getProcAddr("glBlendEquationIndexedAMD")); gpBlendEquationIndexedAMD == nil {
    AMD_draw_buffers_blend = false
  }
  if gpBlendEquationSeparate = (C.GPBLENDEQUATIONSEPARATE)(getProcAddr("glBlendEquationSeparate")); gpBlendEquationSeparate == nil {
    return errors.New("glBlendEquationSeparate")
  }
  if gpBlendEquationSeparateEXT = (C.GPBLENDEQUATIONSEPARATEEXT)(getProcAddr("glBlendEquationSeparateEXT")); gpBlendEquationSeparateEXT == nil {
    EXT_blend_equation_separate = false
  }
  if gpBlendEquationSeparateIndexedAMD = (C.GPBLENDEQUATIONSEPARATEINDEXEDAMD)(getProcAddr("glBlendEquationSeparateIndexedAMD")); gpBlendEquationSeparateIndexedAMD == nil {
    AMD_draw_buffers_blend = false
  }
  if gpBlendEquationSeparateiARB = (C.GPBLENDEQUATIONSEPARATEIARB)(getProcAddr("glBlendEquationSeparateiARB")); gpBlendEquationSeparateiARB == nil {
    ARB_draw_buffers_blend = false
  }
  if gpBlendEquationiARB = (C.GPBLENDEQUATIONIARB)(getProcAddr("glBlendEquationiARB")); gpBlendEquationiARB == nil {
    ARB_draw_buffers_blend = false
  }
  if gpBlendFunc = (C.GPBLENDFUNC)(getProcAddr("glBlendFunc")); gpBlendFunc == nil {
    return errors.New("glBlendFunc")
  }
  if gpBlendFuncIndexedAMD = (C.GPBLENDFUNCINDEXEDAMD)(getProcAddr("glBlendFuncIndexedAMD")); gpBlendFuncIndexedAMD == nil {
    AMD_draw_buffers_blend = false
  }
  if gpBlendFuncSeparate = (C.GPBLENDFUNCSEPARATE)(getProcAddr("glBlendFuncSeparate")); gpBlendFuncSeparate == nil {
    return errors.New("glBlendFuncSeparate")
  }
  if gpBlendFuncSeparateEXT = (C.GPBLENDFUNCSEPARATEEXT)(getProcAddr("glBlendFuncSeparateEXT")); gpBlendFuncSeparateEXT == nil {
    EXT_blend_func_separate = false
  }
  if gpBlendFuncSeparateINGR = (C.GPBLENDFUNCSEPARATEINGR)(getProcAddr("glBlendFuncSeparateINGR")); gpBlendFuncSeparateINGR == nil {
    INGR_blend_func_separate = false
  }
  if gpBlendFuncSeparateIndexedAMD = (C.GPBLENDFUNCSEPARATEINDEXEDAMD)(getProcAddr("glBlendFuncSeparateIndexedAMD")); gpBlendFuncSeparateIndexedAMD == nil {
    AMD_draw_buffers_blend = false
  }
  if gpBlendFuncSeparateiARB = (C.GPBLENDFUNCSEPARATEIARB)(getProcAddr("glBlendFuncSeparateiARB")); gpBlendFuncSeparateiARB == nil {
    ARB_draw_buffers_blend = false
  }
  if gpBlendFunciARB = (C.GPBLENDFUNCIARB)(getProcAddr("glBlendFunciARB")); gpBlendFunciARB == nil {
    ARB_draw_buffers_blend = false
  }
  if gpBlendParameteriNV = (C.GPBLENDPARAMETERINV)(getProcAddr("glBlendParameteriNV")); gpBlendParameteriNV == nil {
    NV_blend_equation_advanced = false
  }
  if gpBlitFramebuffer = (C.GPBLITFRAMEBUFFER)(getProcAddr("glBlitFramebuffer")); gpBlitFramebuffer == nil {
    ARB_framebuffer_object = false
    return errors.New("glBlitFramebuffer")
  }
  if gpBlitFramebufferEXT = (C.GPBLITFRAMEBUFFEREXT)(getProcAddr("glBlitFramebufferEXT")); gpBlitFramebufferEXT == nil {
    EXT_framebuffer_blit = false
  }
  if gpBufferAddressRangeNV = (C.GPBUFFERADDRESSRANGENV)(getProcAddr("glBufferAddressRangeNV")); gpBufferAddressRangeNV == nil {
    NV_vertex_buffer_unified_memory = false
  }
  if gpBufferData = (C.GPBUFFERDATA)(getProcAddr("glBufferData")); gpBufferData == nil {
    return errors.New("glBufferData")
  }
  if gpBufferDataARB = (C.GPBUFFERDATAARB)(getProcAddr("glBufferDataARB")); gpBufferDataARB == nil {
    ARB_vertex_buffer_object = false
  }
  if gpBufferParameteriAPPLE = (C.GPBUFFERPARAMETERIAPPLE)(getProcAddr("glBufferParameteriAPPLE")); gpBufferParameteriAPPLE == nil {
    APPLE_flush_buffer_range = false
  }
  if gpBufferStorage = (C.GPBUFFERSTORAGE)(getProcAddr("glBufferStorage")); gpBufferStorage == nil {
    ARB_buffer_storage = false
  }
  if gpBufferSubData = (C.GPBUFFERSUBDATA)(getProcAddr("glBufferSubData")); gpBufferSubData == nil {
    return errors.New("glBufferSubData")
  }
  if gpBufferSubDataARB = (C.GPBUFFERSUBDATAARB)(getProcAddr("glBufferSubDataARB")); gpBufferSubDataARB == nil {
    ARB_vertex_buffer_object = false
  }
  if gpCheckFramebufferStatus = (C.GPCHECKFRAMEBUFFERSTATUS)(getProcAddr("glCheckFramebufferStatus")); gpCheckFramebufferStatus == nil {
    ARB_framebuffer_object = false
    return errors.New("glCheckFramebufferStatus")
  }
  if gpCheckFramebufferStatusEXT = (C.GPCHECKFRAMEBUFFERSTATUSEXT)(getProcAddr("glCheckFramebufferStatusEXT")); gpCheckFramebufferStatusEXT == nil {
    EXT_framebuffer_object = false
  }
  if gpCheckNamedFramebufferStatusEXT = (C.GPCHECKNAMEDFRAMEBUFFERSTATUSEXT)(getProcAddr("glCheckNamedFramebufferStatusEXT")); gpCheckNamedFramebufferStatusEXT == nil {
    EXT_direct_state_access = false
  }
  if gpClampColor = (C.GPCLAMPCOLOR)(getProcAddr("glClampColor")); gpClampColor == nil {
    return errors.New("glClampColor")
  }
  if gpClampColorARB = (C.GPCLAMPCOLORARB)(getProcAddr("glClampColorARB")); gpClampColorARB == nil {
    ARB_color_buffer_float = false
  }
  if gpClear = (C.GPCLEAR)(getProcAddr("glClear")); gpClear == nil {
    return errors.New("glClear")
  }
  if gpClearAccumxOES = (C.GPCLEARACCUMXOES)(getProcAddr("glClearAccumxOES")); gpClearAccumxOES == nil {
    OES_fixed_point = false
  }
  if gpClearBufferData = (C.GPCLEARBUFFERDATA)(getProcAddr("glClearBufferData")); gpClearBufferData == nil {
    ARB_clear_buffer_object = false
  }
  if gpClearBufferSubData = (C.GPCLEARBUFFERSUBDATA)(getProcAddr("glClearBufferSubData")); gpClearBufferSubData == nil {
    ARB_clear_buffer_object = false
  }
  if gpClearBufferfi = (C.GPCLEARBUFFERFI)(getProcAddr("glClearBufferfi")); gpClearBufferfi == nil {
    return errors.New("glClearBufferfi")
  }
  if gpClearBufferfv = (C.GPCLEARBUFFERFV)(getProcAddr("glClearBufferfv")); gpClearBufferfv == nil {
    return errors.New("glClearBufferfv")
  }
  if gpClearBufferiv = (C.GPCLEARBUFFERIV)(getProcAddr("glClearBufferiv")); gpClearBufferiv == nil {
    return errors.New("glClearBufferiv")
  }
  if gpClearBufferuiv = (C.GPCLEARBUFFERUIV)(getProcAddr("glClearBufferuiv")); gpClearBufferuiv == nil {
    return errors.New("glClearBufferuiv")
  }
  if gpClearColor = (C.GPCLEARCOLOR)(getProcAddr("glClearColor")); gpClearColor == nil {
    return errors.New("glClearColor")
  }
  if gpClearColorIiEXT = (C.GPCLEARCOLORIIEXT)(getProcAddr("glClearColorIiEXT")); gpClearColorIiEXT == nil {
    EXT_texture_integer = false
  }
  if gpClearColorIuiEXT = (C.GPCLEARCOLORIUIEXT)(getProcAddr("glClearColorIuiEXT")); gpClearColorIuiEXT == nil {
    EXT_texture_integer = false
  }
  if gpClearColorxOES = (C.GPCLEARCOLORXOES)(getProcAddr("glClearColorxOES")); gpClearColorxOES == nil {
    OES_fixed_point = false
  }
  if gpClearDepth = (C.GPCLEARDEPTH)(getProcAddr("glClearDepth")); gpClearDepth == nil {
    return errors.New("glClearDepth")
  }
  if gpClearDepthdNV = (C.GPCLEARDEPTHDNV)(getProcAddr("glClearDepthdNV")); gpClearDepthdNV == nil {
    NV_depth_buffer_float = false
  }
  if gpClearDepthf = (C.GPCLEARDEPTHF)(getProcAddr("glClearDepthf")); gpClearDepthf == nil {
    ARB_ES2_compatibility = false
  }
  if gpClearDepthfOES = (C.GPCLEARDEPTHFOES)(getProcAddr("glClearDepthfOES")); gpClearDepthfOES == nil {
    OES_single_precision = false
  }
  if gpClearDepthxOES = (C.GPCLEARDEPTHXOES)(getProcAddr("glClearDepthxOES")); gpClearDepthxOES == nil {
    OES_fixed_point = false
  }
  if gpClearNamedBufferDataEXT = (C.GPCLEARNAMEDBUFFERDATAEXT)(getProcAddr("glClearNamedBufferDataEXT")); gpClearNamedBufferDataEXT == nil {
    EXT_direct_state_access = false
  }
  if gpClearNamedBufferSubDataEXT = (C.GPCLEARNAMEDBUFFERSUBDATAEXT)(getProcAddr("glClearNamedBufferSubDataEXT")); gpClearNamedBufferSubDataEXT == nil {
    EXT_direct_state_access = false
  }
  if gpClearStencil = (C.GPCLEARSTENCIL)(getProcAddr("glClearStencil")); gpClearStencil == nil {
    return errors.New("glClearStencil")
  }
  if gpClearTexImage = (C.GPCLEARTEXIMAGE)(getProcAddr("glClearTexImage")); gpClearTexImage == nil {
    ARB_clear_texture = false
  }
  if gpClearTexSubImage = (C.GPCLEARTEXSUBIMAGE)(getProcAddr("glClearTexSubImage")); gpClearTexSubImage == nil {
    ARB_clear_texture = false
  }
  if gpClientActiveTextureARB = (C.GPCLIENTACTIVETEXTUREARB)(getProcAddr("glClientActiveTextureARB")); gpClientActiveTextureARB == nil {
    ARB_multitexture = false
  }
  if gpClientActiveVertexStreamATI = (C.GPCLIENTACTIVEVERTEXSTREAMATI)(getProcAddr("glClientActiveVertexStreamATI")); gpClientActiveVertexStreamATI == nil {
    ATI_vertex_streams = false
  }
  if gpClientAttribDefaultEXT = (C.GPCLIENTATTRIBDEFAULTEXT)(getProcAddr("glClientAttribDefaultEXT")); gpClientAttribDefaultEXT == nil {
    EXT_direct_state_access = false
  }
  if gpClientWaitSync = (C.GPCLIENTWAITSYNC)(getProcAddr("glClientWaitSync")); gpClientWaitSync == nil {
    ARB_sync = false
    return errors.New("glClientWaitSync")
  }
  if gpClipPlanefOES = (C.GPCLIPPLANEFOES)(getProcAddr("glClipPlanefOES")); gpClipPlanefOES == nil {
    OES_single_precision = false
  }
  if gpClipPlanexOES = (C.GPCLIPPLANEXOES)(getProcAddr("glClipPlanexOES")); gpClipPlanexOES == nil {
    OES_fixed_point = false
  }
  if gpColor3fVertex3fSUN = (C.GPCOLOR3FVERTEX3FSUN)(getProcAddr("glColor3fVertex3fSUN")); gpColor3fVertex3fSUN == nil {
    SUN_vertex = false
  }
  if gpColor3fVertex3fvSUN = (C.GPCOLOR3FVERTEX3FVSUN)(getProcAddr("glColor3fVertex3fvSUN")); gpColor3fVertex3fvSUN == nil {
    SUN_vertex = false
  }
  if gpColor3hNV = (C.GPCOLOR3HNV)(getProcAddr("glColor3hNV")); gpColor3hNV == nil {
    NV_half_float = false
  }
  if gpColor3hvNV = (C.GPCOLOR3HVNV)(getProcAddr("glColor3hvNV")); gpColor3hvNV == nil {
    NV_half_float = false
  }
  if gpColor3xOES = (C.GPCOLOR3XOES)(getProcAddr("glColor3xOES")); gpColor3xOES == nil {
    OES_fixed_point = false
  }
  if gpColor3xvOES = (C.GPCOLOR3XVOES)(getProcAddr("glColor3xvOES")); gpColor3xvOES == nil {
    OES_fixed_point = false
  }
  if gpColor4fNormal3fVertex3fSUN = (C.GPCOLOR4FNORMAL3FVERTEX3FSUN)(getProcAddr("glColor4fNormal3fVertex3fSUN")); gpColor4fNormal3fVertex3fSUN == nil {
    SUN_vertex = false
  }
  if gpColor4fNormal3fVertex3fvSUN = (C.GPCOLOR4FNORMAL3FVERTEX3FVSUN)(getProcAddr("glColor4fNormal3fVertex3fvSUN")); gpColor4fNormal3fVertex3fvSUN == nil {
    SUN_vertex = false
  }
  if gpColor4hNV = (C.GPCOLOR4HNV)(getProcAddr("glColor4hNV")); gpColor4hNV == nil {
    NV_half_float = false
  }
  if gpColor4hvNV = (C.GPCOLOR4HVNV)(getProcAddr("glColor4hvNV")); gpColor4hvNV == nil {
    NV_half_float = false
  }
  if gpColor4ubVertex2fSUN = (C.GPCOLOR4UBVERTEX2FSUN)(getProcAddr("glColor4ubVertex2fSUN")); gpColor4ubVertex2fSUN == nil {
    SUN_vertex = false
  }
  if gpColor4ubVertex2fvSUN = (C.GPCOLOR4UBVERTEX2FVSUN)(getProcAddr("glColor4ubVertex2fvSUN")); gpColor4ubVertex2fvSUN == nil {
    SUN_vertex = false
  }
  if gpColor4ubVertex3fSUN = (C.GPCOLOR4UBVERTEX3FSUN)(getProcAddr("glColor4ubVertex3fSUN")); gpColor4ubVertex3fSUN == nil {
    SUN_vertex = false
  }
  if gpColor4ubVertex3fvSUN = (C.GPCOLOR4UBVERTEX3FVSUN)(getProcAddr("glColor4ubVertex3fvSUN")); gpColor4ubVertex3fvSUN == nil {
    SUN_vertex = false
  }
  if gpColor4xOES = (C.GPCOLOR4XOES)(getProcAddr("glColor4xOES")); gpColor4xOES == nil {
    OES_fixed_point = false
  }
  if gpColor4xvOES = (C.GPCOLOR4XVOES)(getProcAddr("glColor4xvOES")); gpColor4xvOES == nil {
    OES_fixed_point = false
  }
  if gpColorFormatNV = (C.GPCOLORFORMATNV)(getProcAddr("glColorFormatNV")); gpColorFormatNV == nil {
    NV_vertex_buffer_unified_memory = false
  }
  if gpColorFragmentOp1ATI = (C.GPCOLORFRAGMENTOP1ATI)(getProcAddr("glColorFragmentOp1ATI")); gpColorFragmentOp1ATI == nil {
    ATI_fragment_shader = false
  }
  if gpColorFragmentOp2ATI = (C.GPCOLORFRAGMENTOP2ATI)(getProcAddr("glColorFragmentOp2ATI")); gpColorFragmentOp2ATI == nil {
    ATI_fragment_shader = false
  }
  if gpColorFragmentOp3ATI = (C.GPCOLORFRAGMENTOP3ATI)(getProcAddr("glColorFragmentOp3ATI")); gpColorFragmentOp3ATI == nil {
    ATI_fragment_shader = false
  }
  if gpColorMask = (C.GPCOLORMASK)(getProcAddr("glColorMask")); gpColorMask == nil {
    return errors.New("glColorMask")
  }
  if gpColorMaskIndexedEXT = (C.GPCOLORMASKINDEXEDEXT)(getProcAddr("glColorMaskIndexedEXT")); gpColorMaskIndexedEXT == nil {
    EXT_draw_buffers2 = false
  }
  if gpColorMaski = (C.GPCOLORMASKI)(getProcAddr("glColorMaski")); gpColorMaski == nil {
    return errors.New("glColorMaski")
  }
  if gpColorPointerEXT = (C.GPCOLORPOINTEREXT)(getProcAddr("glColorPointerEXT")); gpColorPointerEXT == nil {
    EXT_vertex_array = false
  }
  if gpColorPointerListIBM = (C.GPCOLORPOINTERLISTIBM)(getProcAddr("glColorPointerListIBM")); gpColorPointerListIBM == nil {
    IBM_vertex_array_lists = false
  }
  if gpColorPointervINTEL = (C.GPCOLORPOINTERVINTEL)(getProcAddr("glColorPointervINTEL")); gpColorPointervINTEL == nil {
    INTEL_parallel_arrays = false
  }
  if gpColorSubTableEXT = (C.GPCOLORSUBTABLEEXT)(getProcAddr("glColorSubTableEXT")); gpColorSubTableEXT == nil {
    EXT_color_subtable = false
  }
  if gpColorTableEXT = (C.GPCOLORTABLEEXT)(getProcAddr("glColorTableEXT")); gpColorTableEXT == nil {
    EXT_paletted_texture = false
  }
  if gpColorTableParameterfvSGI = (C.GPCOLORTABLEPARAMETERFVSGI)(getProcAddr("glColorTableParameterfvSGI")); gpColorTableParameterfvSGI == nil {
    SGI_color_table = false
  }
  if gpColorTableParameterivSGI = (C.GPCOLORTABLEPARAMETERIVSGI)(getProcAddr("glColorTableParameterivSGI")); gpColorTableParameterivSGI == nil {
    SGI_color_table = false
  }
  if gpColorTableSGI = (C.GPCOLORTABLESGI)(getProcAddr("glColorTableSGI")); gpColorTableSGI == nil {
    SGI_color_table = false
  }
  if gpCombinerInputNV = (C.GPCOMBINERINPUTNV)(getProcAddr("glCombinerInputNV")); gpCombinerInputNV == nil {
    NV_register_combiners = false
  }
  if gpCombinerOutputNV = (C.GPCOMBINEROUTPUTNV)(getProcAddr("glCombinerOutputNV")); gpCombinerOutputNV == nil {
    NV_register_combiners = false
  }
  if gpCombinerParameterfNV = (C.GPCOMBINERPARAMETERFNV)(getProcAddr("glCombinerParameterfNV")); gpCombinerParameterfNV == nil {
    NV_register_combiners = false
  }
  if gpCombinerParameterfvNV = (C.GPCOMBINERPARAMETERFVNV)(getProcAddr("glCombinerParameterfvNV")); gpCombinerParameterfvNV == nil {
    NV_register_combiners = false
  }
  if gpCombinerParameteriNV = (C.GPCOMBINERPARAMETERINV)(getProcAddr("glCombinerParameteriNV")); gpCombinerParameteriNV == nil {
    NV_register_combiners = false
  }
  if gpCombinerParameterivNV = (C.GPCOMBINERPARAMETERIVNV)(getProcAddr("glCombinerParameterivNV")); gpCombinerParameterivNV == nil {
    NV_register_combiners = false
  }
  if gpCombinerStageParameterfvNV = (C.GPCOMBINERSTAGEPARAMETERFVNV)(getProcAddr("glCombinerStageParameterfvNV")); gpCombinerStageParameterfvNV == nil {
    NV_register_combiners2 = false
  }
  if gpCompileShader = (C.GPCOMPILESHADER)(getProcAddr("glCompileShader")); gpCompileShader == nil {
    return errors.New("glCompileShader")
  }
  if gpCompileShaderARB = (C.GPCOMPILESHADERARB)(getProcAddr("glCompileShaderARB")); gpCompileShaderARB == nil {
    ARB_shader_objects = false
  }
  if gpCompileShaderIncludeARB = (C.GPCOMPILESHADERINCLUDEARB)(getProcAddr("glCompileShaderIncludeARB")); gpCompileShaderIncludeARB == nil {
    ARB_shading_language_include = false
  }
  if gpCompressedMultiTexImage1DEXT = (C.GPCOMPRESSEDMULTITEXIMAGE1DEXT)(getProcAddr("glCompressedMultiTexImage1DEXT")); gpCompressedMultiTexImage1DEXT == nil {
    EXT_direct_state_access = false
  }
  if gpCompressedMultiTexImage2DEXT = (C.GPCOMPRESSEDMULTITEXIMAGE2DEXT)(getProcAddr("glCompressedMultiTexImage2DEXT")); gpCompressedMultiTexImage2DEXT == nil {
    EXT_direct_state_access = false
  }
  if gpCompressedMultiTexImage3DEXT = (C.GPCOMPRESSEDMULTITEXIMAGE3DEXT)(getProcAddr("glCompressedMultiTexImage3DEXT")); gpCompressedMultiTexImage3DEXT == nil {
    EXT_direct_state_access = false
  }
  if gpCompressedMultiTexSubImage1DEXT = (C.GPCOMPRESSEDMULTITEXSUBIMAGE1DEXT)(getProcAddr("glCompressedMultiTexSubImage1DEXT")); gpCompressedMultiTexSubImage1DEXT == nil {
    EXT_direct_state_access = false
  }
  if gpCompressedMultiTexSubImage2DEXT = (C.GPCOMPRESSEDMULTITEXSUBIMAGE2DEXT)(getProcAddr("glCompressedMultiTexSubImage2DEXT")); gpCompressedMultiTexSubImage2DEXT == nil {
    EXT_direct_state_access = false
  }
  if gpCompressedMultiTexSubImage3DEXT = (C.GPCOMPRESSEDMULTITEXSUBIMAGE3DEXT)(getProcAddr("glCompressedMultiTexSubImage3DEXT")); gpCompressedMultiTexSubImage3DEXT == nil {
    EXT_direct_state_access = false
  }
  if gpCompressedTexImage1D = (C.GPCOMPRESSEDTEXIMAGE1D)(getProcAddr("glCompressedTexImage1D")); gpCompressedTexImage1D == nil {
    return errors.New("glCompressedTexImage1D")
  }
  if gpCompressedTexImage1DARB = (C.GPCOMPRESSEDTEXIMAGE1DARB)(getProcAddr("glCompressedTexImage1DARB")); gpCompressedTexImage1DARB == nil {
    ARB_texture_compression = false
  }
  if gpCompressedTexImage2D = (C.GPCOMPRESSEDTEXIMAGE2D)(getProcAddr("glCompressedTexImage2D")); gpCompressedTexImage2D == nil {
    return errors.New("glCompressedTexImage2D")
  }
  if gpCompressedTexImage2DARB = (C.GPCOMPRESSEDTEXIMAGE2DARB)(getProcAddr("glCompressedTexImage2DARB")); gpCompressedTexImage2DARB == nil {
    ARB_texture_compression = false
  }
  if gpCompressedTexImage3D = (C.GPCOMPRESSEDTEXIMAGE3D)(getProcAddr("glCompressedTexImage3D")); gpCompressedTexImage3D == nil {
    return errors.New("glCompressedTexImage3D")
  }
  if gpCompressedTexImage3DARB = (C.GPCOMPRESSEDTEXIMAGE3DARB)(getProcAddr("glCompressedTexImage3DARB")); gpCompressedTexImage3DARB == nil {
    ARB_texture_compression = false
  }
  if gpCompressedTexSubImage1D = (C.GPCOMPRESSEDTEXSUBIMAGE1D)(getProcAddr("glCompressedTexSubImage1D")); gpCompressedTexSubImage1D == nil {
    return errors.New("glCompressedTexSubImage1D")
  }
  if gpCompressedTexSubImage1DARB = (C.GPCOMPRESSEDTEXSUBIMAGE1DARB)(getProcAddr("glCompressedTexSubImage1DARB")); gpCompressedTexSubImage1DARB == nil {
    ARB_texture_compression = false
  }
  if gpCompressedTexSubImage2D = (C.GPCOMPRESSEDTEXSUBIMAGE2D)(getProcAddr("glCompressedTexSubImage2D")); gpCompressedTexSubImage2D == nil {
    return errors.New("glCompressedTexSubImage2D")
  }
  if gpCompressedTexSubImage2DARB = (C.GPCOMPRESSEDTEXSUBIMAGE2DARB)(getProcAddr("glCompressedTexSubImage2DARB")); gpCompressedTexSubImage2DARB == nil {
    ARB_texture_compression = false
  }
  if gpCompressedTexSubImage3D = (C.GPCOMPRESSEDTEXSUBIMAGE3D)(getProcAddr("glCompressedTexSubImage3D")); gpCompressedTexSubImage3D == nil {
    return errors.New("glCompressedTexSubImage3D")
  }
  if gpCompressedTexSubImage3DARB = (C.GPCOMPRESSEDTEXSUBIMAGE3DARB)(getProcAddr("glCompressedTexSubImage3DARB")); gpCompressedTexSubImage3DARB == nil {
    ARB_texture_compression = false
  }
  if gpCompressedTextureImage1DEXT = (C.GPCOMPRESSEDTEXTUREIMAGE1DEXT)(getProcAddr("glCompressedTextureImage1DEXT")); gpCompressedTextureImage1DEXT == nil {
    EXT_direct_state_access = false
  }
  if gpCompressedTextureImage2DEXT = (C.GPCOMPRESSEDTEXTUREIMAGE2DEXT)(getProcAddr("glCompressedTextureImage2DEXT")); gpCompressedTextureImage2DEXT == nil {
    EXT_direct_state_access = false
  }
  if gpCompressedTextureImage3DEXT = (C.GPCOMPRESSEDTEXTUREIMAGE3DEXT)(getProcAddr("glCompressedTextureImage3DEXT")); gpCompressedTextureImage3DEXT == nil {
    EXT_direct_state_access = false
  }
  if gpCompressedTextureSubImage1DEXT = (C.GPCOMPRESSEDTEXTURESUBIMAGE1DEXT)(getProcAddr("glCompressedTextureSubImage1DEXT")); gpCompressedTextureSubImage1DEXT == nil {
    EXT_direct_state_access = false
  }
  if gpCompressedTextureSubImage2DEXT = (C.GPCOMPRESSEDTEXTURESUBIMAGE2DEXT)(getProcAddr("glCompressedTextureSubImage2DEXT")); gpCompressedTextureSubImage2DEXT == nil {
    EXT_direct_state_access = false
  }
  if gpCompressedTextureSubImage3DEXT = (C.GPCOMPRESSEDTEXTURESUBIMAGE3DEXT)(getProcAddr("glCompressedTextureSubImage3DEXT")); gpCompressedTextureSubImage3DEXT == nil {
    EXT_direct_state_access = false
  }
  if gpConvolutionFilter1DEXT = (C.GPCONVOLUTIONFILTER1DEXT)(getProcAddr("glConvolutionFilter1DEXT")); gpConvolutionFilter1DEXT == nil {
    EXT_convolution = false
  }
  if gpConvolutionFilter2DEXT = (C.GPCONVOLUTIONFILTER2DEXT)(getProcAddr("glConvolutionFilter2DEXT")); gpConvolutionFilter2DEXT == nil {
    EXT_convolution = false
  }
  if gpConvolutionParameterfEXT = (C.GPCONVOLUTIONPARAMETERFEXT)(getProcAddr("glConvolutionParameterfEXT")); gpConvolutionParameterfEXT == nil {
    EXT_convolution = false
  }
  if gpConvolutionParameterfvEXT = (C.GPCONVOLUTIONPARAMETERFVEXT)(getProcAddr("glConvolutionParameterfvEXT")); gpConvolutionParameterfvEXT == nil {
    EXT_convolution = false
  }
  if gpConvolutionParameteriEXT = (C.GPCONVOLUTIONPARAMETERIEXT)(getProcAddr("glConvolutionParameteriEXT")); gpConvolutionParameteriEXT == nil {
    EXT_convolution = false
  }
  if gpConvolutionParameterivEXT = (C.GPCONVOLUTIONPARAMETERIVEXT)(getProcAddr("glConvolutionParameterivEXT")); gpConvolutionParameterivEXT == nil {
    EXT_convolution = false
  }
  if gpConvolutionParameterxOES = (C.GPCONVOLUTIONPARAMETERXOES)(getProcAddr("glConvolutionParameterxOES")); gpConvolutionParameterxOES == nil {
    OES_fixed_point = false
  }
  if gpConvolutionParameterxvOES = (C.GPCONVOLUTIONPARAMETERXVOES)(getProcAddr("glConvolutionParameterxvOES")); gpConvolutionParameterxvOES == nil {
    OES_fixed_point = false
  }
  if gpCopyBufferSubData = (C.GPCOPYBUFFERSUBDATA)(getProcAddr("glCopyBufferSubData")); gpCopyBufferSubData == nil {
    ARB_copy_buffer = false
    return errors.New("glCopyBufferSubData")
  }
  if gpCopyColorSubTableEXT = (C.GPCOPYCOLORSUBTABLEEXT)(getProcAddr("glCopyColorSubTableEXT")); gpCopyColorSubTableEXT == nil {
    EXT_color_subtable = false
  }
  if gpCopyColorTableSGI = (C.GPCOPYCOLORTABLESGI)(getProcAddr("glCopyColorTableSGI")); gpCopyColorTableSGI == nil {
    SGI_color_table = false
  }
  if gpCopyConvolutionFilter1DEXT = (C.GPCOPYCONVOLUTIONFILTER1DEXT)(getProcAddr("glCopyConvolutionFilter1DEXT")); gpCopyConvolutionFilter1DEXT == nil {
    EXT_convolution = false
  }
  if gpCopyConvolutionFilter2DEXT = (C.GPCOPYCONVOLUTIONFILTER2DEXT)(getProcAddr("glCopyConvolutionFilter2DEXT")); gpCopyConvolutionFilter2DEXT == nil {
    EXT_convolution = false
  }
  if gpCopyImageSubData = (C.GPCOPYIMAGESUBDATA)(getProcAddr("glCopyImageSubData")); gpCopyImageSubData == nil {
    ARB_copy_image = false
  }
  if gpCopyImageSubDataNV = (C.GPCOPYIMAGESUBDATANV)(getProcAddr("glCopyImageSubDataNV")); gpCopyImageSubDataNV == nil {
    NV_copy_image = false
  }
  if gpCopyMultiTexImage1DEXT = (C.GPCOPYMULTITEXIMAGE1DEXT)(getProcAddr("glCopyMultiTexImage1DEXT")); gpCopyMultiTexImage1DEXT == nil {
    EXT_direct_state_access = false
  }
  if gpCopyMultiTexImage2DEXT = (C.GPCOPYMULTITEXIMAGE2DEXT)(getProcAddr("glCopyMultiTexImage2DEXT")); gpCopyMultiTexImage2DEXT == nil {
    EXT_direct_state_access = false
  }
  if gpCopyMultiTexSubImage1DEXT = (C.GPCOPYMULTITEXSUBIMAGE1DEXT)(getProcAddr("glCopyMultiTexSubImage1DEXT")); gpCopyMultiTexSubImage1DEXT == nil {
    EXT_direct_state_access = false
  }
  if gpCopyMultiTexSubImage2DEXT = (C.GPCOPYMULTITEXSUBIMAGE2DEXT)(getProcAddr("glCopyMultiTexSubImage2DEXT")); gpCopyMultiTexSubImage2DEXT == nil {
    EXT_direct_state_access = false
  }
  if gpCopyMultiTexSubImage3DEXT = (C.GPCOPYMULTITEXSUBIMAGE3DEXT)(getProcAddr("glCopyMultiTexSubImage3DEXT")); gpCopyMultiTexSubImage3DEXT == nil {
    EXT_direct_state_access = false
  }
  if gpCopyPathNV = (C.GPCOPYPATHNV)(getProcAddr("glCopyPathNV")); gpCopyPathNV == nil {
    NV_path_rendering = false
  }
  if gpCopyTexImage1D = (C.GPCOPYTEXIMAGE1D)(getProcAddr("glCopyTexImage1D")); gpCopyTexImage1D == nil {
    return errors.New("glCopyTexImage1D")
  }
  if gpCopyTexImage1DEXT = (C.GPCOPYTEXIMAGE1DEXT)(getProcAddr("glCopyTexImage1DEXT")); gpCopyTexImage1DEXT == nil {
    EXT_copy_texture = false
  }
  if gpCopyTexImage2D = (C.GPCOPYTEXIMAGE2D)(getProcAddr("glCopyTexImage2D")); gpCopyTexImage2D == nil {
    return errors.New("glCopyTexImage2D")
  }
  if gpCopyTexImage2DEXT = (C.GPCOPYTEXIMAGE2DEXT)(getProcAddr("glCopyTexImage2DEXT")); gpCopyTexImage2DEXT == nil {
    EXT_copy_texture = false
  }
  if gpCopyTexSubImage1D = (C.GPCOPYTEXSUBIMAGE1D)(getProcAddr("glCopyTexSubImage1D")); gpCopyTexSubImage1D == nil {
    return errors.New("glCopyTexSubImage1D")
  }
  if gpCopyTexSubImage1DEXT = (C.GPCOPYTEXSUBIMAGE1DEXT)(getProcAddr("glCopyTexSubImage1DEXT")); gpCopyTexSubImage1DEXT == nil {
    EXT_copy_texture = false
  }
  if gpCopyTexSubImage2D = (C.GPCOPYTEXSUBIMAGE2D)(getProcAddr("glCopyTexSubImage2D")); gpCopyTexSubImage2D == nil {
    return errors.New("glCopyTexSubImage2D")
  }
  if gpCopyTexSubImage2DEXT = (C.GPCOPYTEXSUBIMAGE2DEXT)(getProcAddr("glCopyTexSubImage2DEXT")); gpCopyTexSubImage2DEXT == nil {
    EXT_copy_texture = false
  }
  if gpCopyTexSubImage3D = (C.GPCOPYTEXSUBIMAGE3D)(getProcAddr("glCopyTexSubImage3D")); gpCopyTexSubImage3D == nil {
    return errors.New("glCopyTexSubImage3D")
  }
  if gpCopyTexSubImage3DEXT = (C.GPCOPYTEXSUBIMAGE3DEXT)(getProcAddr("glCopyTexSubImage3DEXT")); gpCopyTexSubImage3DEXT == nil {
    EXT_copy_texture = false
  }
  if gpCopyTextureImage1DEXT = (C.GPCOPYTEXTUREIMAGE1DEXT)(getProcAddr("glCopyTextureImage1DEXT")); gpCopyTextureImage1DEXT == nil {
    EXT_direct_state_access = false
  }
  if gpCopyTextureImage2DEXT = (C.GPCOPYTEXTUREIMAGE2DEXT)(getProcAddr("glCopyTextureImage2DEXT")); gpCopyTextureImage2DEXT == nil {
    EXT_direct_state_access = false
  }
  if gpCopyTextureSubImage1DEXT = (C.GPCOPYTEXTURESUBIMAGE1DEXT)(getProcAddr("glCopyTextureSubImage1DEXT")); gpCopyTextureSubImage1DEXT == nil {
    EXT_direct_state_access = false
  }
  if gpCopyTextureSubImage2DEXT = (C.GPCOPYTEXTURESUBIMAGE2DEXT)(getProcAddr("glCopyTextureSubImage2DEXT")); gpCopyTextureSubImage2DEXT == nil {
    EXT_direct_state_access = false
  }
  if gpCopyTextureSubImage3DEXT = (C.GPCOPYTEXTURESUBIMAGE3DEXT)(getProcAddr("glCopyTextureSubImage3DEXT")); gpCopyTextureSubImage3DEXT == nil {
    EXT_direct_state_access = false
  }
  if gpCoverFillPathInstancedNV = (C.GPCOVERFILLPATHINSTANCEDNV)(getProcAddr("glCoverFillPathInstancedNV")); gpCoverFillPathInstancedNV == nil {
    NV_path_rendering = false
  }
  if gpCoverFillPathNV = (C.GPCOVERFILLPATHNV)(getProcAddr("glCoverFillPathNV")); gpCoverFillPathNV == nil {
    NV_path_rendering = false
  }
  if gpCoverStrokePathInstancedNV = (C.GPCOVERSTROKEPATHINSTANCEDNV)(getProcAddr("glCoverStrokePathInstancedNV")); gpCoverStrokePathInstancedNV == nil {
    NV_path_rendering = false
  }
  if gpCoverStrokePathNV = (C.GPCOVERSTROKEPATHNV)(getProcAddr("glCoverStrokePathNV")); gpCoverStrokePathNV == nil {
    NV_path_rendering = false
  }
  if gpCreatePerfQueryINTEL = (C.GPCREATEPERFQUERYINTEL)(getProcAddr("glCreatePerfQueryINTEL")); gpCreatePerfQueryINTEL == nil {
    INTEL_performance_query = false
  }
  if gpCreateProgram = (C.GPCREATEPROGRAM)(getProcAddr("glCreateProgram")); gpCreateProgram == nil {
    return errors.New("glCreateProgram")
  }
  if gpCreateProgramObjectARB = (C.GPCREATEPROGRAMOBJECTARB)(getProcAddr("glCreateProgramObjectARB")); gpCreateProgramObjectARB == nil {
    ARB_shader_objects = false
  }
  if gpCreateShader = (C.GPCREATESHADER)(getProcAddr("glCreateShader")); gpCreateShader == nil {
    return errors.New("glCreateShader")
  }
  if gpCreateShaderObjectARB = (C.GPCREATESHADEROBJECTARB)(getProcAddr("glCreateShaderObjectARB")); gpCreateShaderObjectARB == nil {
    ARB_shader_objects = false
  }
  if gpCreateShaderProgramEXT = (C.GPCREATESHADERPROGRAMEXT)(getProcAddr("glCreateShaderProgramEXT")); gpCreateShaderProgramEXT == nil {
    EXT_separate_shader_objects = false
  }
  if gpCreateShaderProgramv = (C.GPCREATESHADERPROGRAMV)(getProcAddr("glCreateShaderProgramv")); gpCreateShaderProgramv == nil {
    ARB_separate_shader_objects = false
  }
  if gpCreateShaderProgramvEXT = (C.GPCREATESHADERPROGRAMVEXT)(getProcAddr("glCreateShaderProgramvEXT")); gpCreateShaderProgramvEXT == nil {
    EXT_separate_shader_objects = false
  }
  if gpCreateSyncFromCLeventARB = (C.GPCREATESYNCFROMCLEVENTARB)(getProcAddr("glCreateSyncFromCLeventARB")); gpCreateSyncFromCLeventARB == nil {
    ARB_cl_event = false
  }
  if gpCullFace = (C.GPCULLFACE)(getProcAddr("glCullFace")); gpCullFace == nil {
    return errors.New("glCullFace")
  }
  if gpCullParameterdvEXT = (C.GPCULLPARAMETERDVEXT)(getProcAddr("glCullParameterdvEXT")); gpCullParameterdvEXT == nil {
    EXT_cull_vertex = false
  }
  if gpCullParameterfvEXT = (C.GPCULLPARAMETERFVEXT)(getProcAddr("glCullParameterfvEXT")); gpCullParameterfvEXT == nil {
    EXT_cull_vertex = false
  }
  if gpCurrentPaletteMatrixARB = (C.GPCURRENTPALETTEMATRIXARB)(getProcAddr("glCurrentPaletteMatrixARB")); gpCurrentPaletteMatrixARB == nil {
    ARB_matrix_palette = false
  }
  if gpDebugMessageCallback = (C.GPDEBUGMESSAGECALLBACK)(getProcAddr("glDebugMessageCallback")); gpDebugMessageCallback == nil {
    KHR_debug = false
  }
  if gpDebugMessageCallbackAMD = (C.GPDEBUGMESSAGECALLBACKAMD)(getProcAddr("glDebugMessageCallbackAMD")); gpDebugMessageCallbackAMD == nil {
    AMD_debug_output = false
  }
  if gpDebugMessageCallbackARB = (C.GPDEBUGMESSAGECALLBACKARB)(getProcAddr("glDebugMessageCallbackARB")); gpDebugMessageCallbackARB == nil {
    ARB_debug_output = false
  }
  if gpDebugMessageCallbackKHR = (C.GPDEBUGMESSAGECALLBACKKHR)(getProcAddr("glDebugMessageCallbackKHR")); gpDebugMessageCallbackKHR == nil {
    KHR_debug = false
  }
  if gpDebugMessageControl = (C.GPDEBUGMESSAGECONTROL)(getProcAddr("glDebugMessageControl")); gpDebugMessageControl == nil {
    KHR_debug = false
  }
  if gpDebugMessageControlARB = (C.GPDEBUGMESSAGECONTROLARB)(getProcAddr("glDebugMessageControlARB")); gpDebugMessageControlARB == nil {
    ARB_debug_output = false
  }
  if gpDebugMessageControlKHR = (C.GPDEBUGMESSAGECONTROLKHR)(getProcAddr("glDebugMessageControlKHR")); gpDebugMessageControlKHR == nil {
    KHR_debug = false
  }
  if gpDebugMessageEnableAMD = (C.GPDEBUGMESSAGEENABLEAMD)(getProcAddr("glDebugMessageEnableAMD")); gpDebugMessageEnableAMD == nil {
    AMD_debug_output = false
  }
  if gpDebugMessageInsert = (C.GPDEBUGMESSAGEINSERT)(getProcAddr("glDebugMessageInsert")); gpDebugMessageInsert == nil {
    KHR_debug = false
  }
  if gpDebugMessageInsertAMD = (C.GPDEBUGMESSAGEINSERTAMD)(getProcAddr("glDebugMessageInsertAMD")); gpDebugMessageInsertAMD == nil {
    AMD_debug_output = false
  }
  if gpDebugMessageInsertARB = (C.GPDEBUGMESSAGEINSERTARB)(getProcAddr("glDebugMessageInsertARB")); gpDebugMessageInsertARB == nil {
    ARB_debug_output = false
  }
  if gpDebugMessageInsertKHR = (C.GPDEBUGMESSAGEINSERTKHR)(getProcAddr("glDebugMessageInsertKHR")); gpDebugMessageInsertKHR == nil {
    KHR_debug = false
  }
  if gpDeformSGIX = (C.GPDEFORMSGIX)(getProcAddr("glDeformSGIX")); gpDeformSGIX == nil {
    SGIX_polynomial_ffd = false
  }
  if gpDeformationMap3dSGIX = (C.GPDEFORMATIONMAP3DSGIX)(getProcAddr("glDeformationMap3dSGIX")); gpDeformationMap3dSGIX == nil {
    SGIX_polynomial_ffd = false
  }
  if gpDeformationMap3fSGIX = (C.GPDEFORMATIONMAP3FSGIX)(getProcAddr("glDeformationMap3fSGIX")); gpDeformationMap3fSGIX == nil {
    SGIX_polynomial_ffd = false
  }
  if gpDeleteAsyncMarkersSGIX = (C.GPDELETEASYNCMARKERSSGIX)(getProcAddr("glDeleteAsyncMarkersSGIX")); gpDeleteAsyncMarkersSGIX == nil {
    SGIX_async = false
  }
  if gpDeleteBuffers = (C.GPDELETEBUFFERS)(getProcAddr("glDeleteBuffers")); gpDeleteBuffers == nil {
    return errors.New("glDeleteBuffers")
  }
  if gpDeleteBuffersARB = (C.GPDELETEBUFFERSARB)(getProcAddr("glDeleteBuffersARB")); gpDeleteBuffersARB == nil {
    ARB_vertex_buffer_object = false
  }
  if gpDeleteFencesAPPLE = (C.GPDELETEFENCESAPPLE)(getProcAddr("glDeleteFencesAPPLE")); gpDeleteFencesAPPLE == nil {
    APPLE_fence = false
  }
  if gpDeleteFencesNV = (C.GPDELETEFENCESNV)(getProcAddr("glDeleteFencesNV")); gpDeleteFencesNV == nil {
    NV_fence = false
  }
  if gpDeleteFragmentShaderATI = (C.GPDELETEFRAGMENTSHADERATI)(getProcAddr("glDeleteFragmentShaderATI")); gpDeleteFragmentShaderATI == nil {
    ATI_fragment_shader = false
  }
  if gpDeleteFramebuffers = (C.GPDELETEFRAMEBUFFERS)(getProcAddr("glDeleteFramebuffers")); gpDeleteFramebuffers == nil {
    ARB_framebuffer_object = false
    return errors.New("glDeleteFramebuffers")
  }
  if gpDeleteFramebuffersEXT = (C.GPDELETEFRAMEBUFFERSEXT)(getProcAddr("glDeleteFramebuffersEXT")); gpDeleteFramebuffersEXT == nil {
    EXT_framebuffer_object = false
  }
  if gpDeleteNamedStringARB = (C.GPDELETENAMEDSTRINGARB)(getProcAddr("glDeleteNamedStringARB")); gpDeleteNamedStringARB == nil {
    ARB_shading_language_include = false
  }
  if gpDeleteNamesAMD = (C.GPDELETENAMESAMD)(getProcAddr("glDeleteNamesAMD")); gpDeleteNamesAMD == nil {
    AMD_name_gen_delete = false
  }
  if gpDeleteObjectARB = (C.GPDELETEOBJECTARB)(getProcAddr("glDeleteObjectARB")); gpDeleteObjectARB == nil {
    ARB_shader_objects = false
  }
  if gpDeleteOcclusionQueriesNV = (C.GPDELETEOCCLUSIONQUERIESNV)(getProcAddr("glDeleteOcclusionQueriesNV")); gpDeleteOcclusionQueriesNV == nil {
    NV_occlusion_query = false
  }
  if gpDeletePathsNV = (C.GPDELETEPATHSNV)(getProcAddr("glDeletePathsNV")); gpDeletePathsNV == nil {
    NV_path_rendering = false
  }
  if gpDeletePerfMonitorsAMD = (C.GPDELETEPERFMONITORSAMD)(getProcAddr("glDeletePerfMonitorsAMD")); gpDeletePerfMonitorsAMD == nil {
    AMD_performance_monitor = false
  }
  if gpDeletePerfQueryINTEL = (C.GPDELETEPERFQUERYINTEL)(getProcAddr("glDeletePerfQueryINTEL")); gpDeletePerfQueryINTEL == nil {
    INTEL_performance_query = false
  }
  if gpDeleteProgram = (C.GPDELETEPROGRAM)(getProcAddr("glDeleteProgram")); gpDeleteProgram == nil {
    return errors.New("glDeleteProgram")
  }
  if gpDeleteProgramPipelines = (C.GPDELETEPROGRAMPIPELINES)(getProcAddr("glDeleteProgramPipelines")); gpDeleteProgramPipelines == nil {
    ARB_separate_shader_objects = false
  }
  if gpDeleteProgramPipelinesEXT = (C.GPDELETEPROGRAMPIPELINESEXT)(getProcAddr("glDeleteProgramPipelinesEXT")); gpDeleteProgramPipelinesEXT == nil {
    EXT_separate_shader_objects = false
  }
  if gpDeleteProgramsARB = (C.GPDELETEPROGRAMSARB)(getProcAddr("glDeleteProgramsARB")); gpDeleteProgramsARB == nil {
    ARB_fragment_program = false
    ARB_vertex_program = false
  }
  if gpDeleteProgramsNV = (C.GPDELETEPROGRAMSNV)(getProcAddr("glDeleteProgramsNV")); gpDeleteProgramsNV == nil {
    NV_vertex_program = false
  }
  if gpDeleteQueries = (C.GPDELETEQUERIES)(getProcAddr("glDeleteQueries")); gpDeleteQueries == nil {
    return errors.New("glDeleteQueries")
  }
  if gpDeleteQueriesARB = (C.GPDELETEQUERIESARB)(getProcAddr("glDeleteQueriesARB")); gpDeleteQueriesARB == nil {
    ARB_occlusion_query = false
  }
  if gpDeleteRenderbuffers = (C.GPDELETERENDERBUFFERS)(getProcAddr("glDeleteRenderbuffers")); gpDeleteRenderbuffers == nil {
    ARB_framebuffer_object = false
    return errors.New("glDeleteRenderbuffers")
  }
  if gpDeleteRenderbuffersEXT = (C.GPDELETERENDERBUFFERSEXT)(getProcAddr("glDeleteRenderbuffersEXT")); gpDeleteRenderbuffersEXT == nil {
    EXT_framebuffer_object = false
  }
  if gpDeleteSamplers = (C.GPDELETESAMPLERS)(getProcAddr("glDeleteSamplers")); gpDeleteSamplers == nil {
    ARB_sampler_objects = false
    return errors.New("glDeleteSamplers")
  }
  if gpDeleteShader = (C.GPDELETESHADER)(getProcAddr("glDeleteShader")); gpDeleteShader == nil {
    return errors.New("glDeleteShader")
  }
  if gpDeleteSync = (C.GPDELETESYNC)(getProcAddr("glDeleteSync")); gpDeleteSync == nil {
    ARB_sync = false
    return errors.New("glDeleteSync")
  }
  if gpDeleteTextures = (C.GPDELETETEXTURES)(getProcAddr("glDeleteTextures")); gpDeleteTextures == nil {
    return errors.New("glDeleteTextures")
  }
  if gpDeleteTexturesEXT = (C.GPDELETETEXTURESEXT)(getProcAddr("glDeleteTexturesEXT")); gpDeleteTexturesEXT == nil {
    EXT_texture_object = false
  }
  if gpDeleteTransformFeedbacks = (C.GPDELETETRANSFORMFEEDBACKS)(getProcAddr("glDeleteTransformFeedbacks")); gpDeleteTransformFeedbacks == nil {
    ARB_transform_feedback2 = false
  }
  if gpDeleteTransformFeedbacksNV = (C.GPDELETETRANSFORMFEEDBACKSNV)(getProcAddr("glDeleteTransformFeedbacksNV")); gpDeleteTransformFeedbacksNV == nil {
    NV_transform_feedback2 = false
  }
  if gpDeleteVertexArrays = (C.GPDELETEVERTEXARRAYS)(getProcAddr("glDeleteVertexArrays")); gpDeleteVertexArrays == nil {
    ARB_vertex_array_object = false
    return errors.New("glDeleteVertexArrays")
  }
  if gpDeleteVertexArraysAPPLE = (C.GPDELETEVERTEXARRAYSAPPLE)(getProcAddr("glDeleteVertexArraysAPPLE")); gpDeleteVertexArraysAPPLE == nil {
    APPLE_vertex_array_object = false
  }
  if gpDeleteVertexShaderEXT = (C.GPDELETEVERTEXSHADEREXT)(getProcAddr("glDeleteVertexShaderEXT")); gpDeleteVertexShaderEXT == nil {
    EXT_vertex_shader = false
  }
  if gpDepthBoundsEXT = (C.GPDEPTHBOUNDSEXT)(getProcAddr("glDepthBoundsEXT")); gpDepthBoundsEXT == nil {
    EXT_depth_bounds_test = false
  }
  if gpDepthBoundsdNV = (C.GPDEPTHBOUNDSDNV)(getProcAddr("glDepthBoundsdNV")); gpDepthBoundsdNV == nil {
    NV_depth_buffer_float = false
  }
  if gpDepthFunc = (C.GPDEPTHFUNC)(getProcAddr("glDepthFunc")); gpDepthFunc == nil {
    return errors.New("glDepthFunc")
  }
  if gpDepthMask = (C.GPDEPTHMASK)(getProcAddr("glDepthMask")); gpDepthMask == nil {
    return errors.New("glDepthMask")
  }
  if gpDepthRange = (C.GPDEPTHRANGE)(getProcAddr("glDepthRange")); gpDepthRange == nil {
    return errors.New("glDepthRange")
  }
  if gpDepthRangeArrayv = (C.GPDEPTHRANGEARRAYV)(getProcAddr("glDepthRangeArrayv")); gpDepthRangeArrayv == nil {
    ARB_viewport_array = false
  }
  if gpDepthRangeIndexed = (C.GPDEPTHRANGEINDEXED)(getProcAddr("glDepthRangeIndexed")); gpDepthRangeIndexed == nil {
    ARB_viewport_array = false
  }
  if gpDepthRangedNV = (C.GPDEPTHRANGEDNV)(getProcAddr("glDepthRangedNV")); gpDepthRangedNV == nil {
    NV_depth_buffer_float = false
  }
  if gpDepthRangef = (C.GPDEPTHRANGEF)(getProcAddr("glDepthRangef")); gpDepthRangef == nil {
    ARB_ES2_compatibility = false
  }
  if gpDepthRangefOES = (C.GPDEPTHRANGEFOES)(getProcAddr("glDepthRangefOES")); gpDepthRangefOES == nil {
    OES_single_precision = false
  }
  if gpDepthRangexOES = (C.GPDEPTHRANGEXOES)(getProcAddr("glDepthRangexOES")); gpDepthRangexOES == nil {
    OES_fixed_point = false
  }
  if gpDetachObjectARB = (C.GPDETACHOBJECTARB)(getProcAddr("glDetachObjectARB")); gpDetachObjectARB == nil {
    ARB_shader_objects = false
  }
  if gpDetachShader = (C.GPDETACHSHADER)(getProcAddr("glDetachShader")); gpDetachShader == nil {
    return errors.New("glDetachShader")
  }
  if gpDetailTexFuncSGIS = (C.GPDETAILTEXFUNCSGIS)(getProcAddr("glDetailTexFuncSGIS")); gpDetailTexFuncSGIS == nil {
    SGIS_detail_texture = false
  }
  if gpDisable = (C.GPDISABLE)(getProcAddr("glDisable")); gpDisable == nil {
    return errors.New("glDisable")
  }
  if gpDisableClientStateIndexedEXT = (C.GPDISABLECLIENTSTATEINDEXEDEXT)(getProcAddr("glDisableClientStateIndexedEXT")); gpDisableClientStateIndexedEXT == nil {
    EXT_direct_state_access = false
  }
  if gpDisableClientStateiEXT = (C.GPDISABLECLIENTSTATEIEXT)(getProcAddr("glDisableClientStateiEXT")); gpDisableClientStateiEXT == nil {
    EXT_direct_state_access = false
  }
  if gpDisableIndexedEXT = (C.GPDISABLEINDEXEDEXT)(getProcAddr("glDisableIndexedEXT")); gpDisableIndexedEXT == nil {
    EXT_direct_state_access = false
    EXT_draw_buffers2 = false
  }
  if gpDisableVariantClientStateEXT = (C.GPDISABLEVARIANTCLIENTSTATEEXT)(getProcAddr("glDisableVariantClientStateEXT")); gpDisableVariantClientStateEXT == nil {
    EXT_vertex_shader = false
  }
  if gpDisableVertexArrayAttribEXT = (C.GPDISABLEVERTEXARRAYATTRIBEXT)(getProcAddr("glDisableVertexArrayAttribEXT")); gpDisableVertexArrayAttribEXT == nil {
    EXT_direct_state_access = false
  }
  if gpDisableVertexArrayEXT = (C.GPDISABLEVERTEXARRAYEXT)(getProcAddr("glDisableVertexArrayEXT")); gpDisableVertexArrayEXT == nil {
    EXT_direct_state_access = false
  }
  if gpDisableVertexAttribAPPLE = (C.GPDISABLEVERTEXATTRIBAPPLE)(getProcAddr("glDisableVertexAttribAPPLE")); gpDisableVertexAttribAPPLE == nil {
    APPLE_vertex_program_evaluators = false
  }
  if gpDisableVertexAttribArray = (C.GPDISABLEVERTEXATTRIBARRAY)(getProcAddr("glDisableVertexAttribArray")); gpDisableVertexAttribArray == nil {
    return errors.New("glDisableVertexAttribArray")
  }
  if gpDisableVertexAttribArrayARB = (C.GPDISABLEVERTEXATTRIBARRAYARB)(getProcAddr("glDisableVertexAttribArrayARB")); gpDisableVertexAttribArrayARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if gpDisablei = (C.GPDISABLEI)(getProcAddr("glDisablei")); gpDisablei == nil {
    return errors.New("glDisablei")
  }
  if gpDispatchCompute = (C.GPDISPATCHCOMPUTE)(getProcAddr("glDispatchCompute")); gpDispatchCompute == nil {
    ARB_compute_shader = false
  }
  if gpDispatchComputeGroupSizeARB = (C.GPDISPATCHCOMPUTEGROUPSIZEARB)(getProcAddr("glDispatchComputeGroupSizeARB")); gpDispatchComputeGroupSizeARB == nil {
    ARB_compute_variable_group_size = false
  }
  if gpDispatchComputeIndirect = (C.GPDISPATCHCOMPUTEINDIRECT)(getProcAddr("glDispatchComputeIndirect")); gpDispatchComputeIndirect == nil {
    ARB_compute_shader = false
  }
  if gpDrawArrays = (C.GPDRAWARRAYS)(getProcAddr("glDrawArrays")); gpDrawArrays == nil {
    return errors.New("glDrawArrays")
  }
  if gpDrawArraysEXT = (C.GPDRAWARRAYSEXT)(getProcAddr("glDrawArraysEXT")); gpDrawArraysEXT == nil {
    EXT_vertex_array = false
  }
  if gpDrawArraysIndirect = (C.GPDRAWARRAYSINDIRECT)(getProcAddr("glDrawArraysIndirect")); gpDrawArraysIndirect == nil {
    ARB_draw_indirect = false
  }
  if gpDrawArraysInstanced = (C.GPDRAWARRAYSINSTANCED)(getProcAddr("glDrawArraysInstanced")); gpDrawArraysInstanced == nil {
    return errors.New("glDrawArraysInstanced")
  }
  if gpDrawArraysInstancedARB = (C.GPDRAWARRAYSINSTANCEDARB)(getProcAddr("glDrawArraysInstancedARB")); gpDrawArraysInstancedARB == nil {
    ARB_draw_instanced = false
  }
  if gpDrawArraysInstancedBaseInstance = (C.GPDRAWARRAYSINSTANCEDBASEINSTANCE)(getProcAddr("glDrawArraysInstancedBaseInstance")); gpDrawArraysInstancedBaseInstance == nil {
    ARB_base_instance = false
  }
  if gpDrawArraysInstancedEXT = (C.GPDRAWARRAYSINSTANCEDEXT)(getProcAddr("glDrawArraysInstancedEXT")); gpDrawArraysInstancedEXT == nil {
    EXT_draw_instanced = false
  }
  if gpDrawBuffer = (C.GPDRAWBUFFER)(getProcAddr("glDrawBuffer")); gpDrawBuffer == nil {
    return errors.New("glDrawBuffer")
  }
  if gpDrawBuffers = (C.GPDRAWBUFFERS)(getProcAddr("glDrawBuffers")); gpDrawBuffers == nil {
    return errors.New("glDrawBuffers")
  }
  if gpDrawBuffersARB = (C.GPDRAWBUFFERSARB)(getProcAddr("glDrawBuffersARB")); gpDrawBuffersARB == nil {
    ARB_draw_buffers = false
  }
  if gpDrawBuffersATI = (C.GPDRAWBUFFERSATI)(getProcAddr("glDrawBuffersATI")); gpDrawBuffersATI == nil {
    ATI_draw_buffers = false
  }
  if gpDrawElementArrayAPPLE = (C.GPDRAWELEMENTARRAYAPPLE)(getProcAddr("glDrawElementArrayAPPLE")); gpDrawElementArrayAPPLE == nil {
    APPLE_element_array = false
  }
  if gpDrawElementArrayATI = (C.GPDRAWELEMENTARRAYATI)(getProcAddr("glDrawElementArrayATI")); gpDrawElementArrayATI == nil {
    ATI_element_array = false
  }
  if gpDrawElements = (C.GPDRAWELEMENTS)(getProcAddr("glDrawElements")); gpDrawElements == nil {
    return errors.New("glDrawElements")
  }
  if gpDrawElementsBaseVertex = (C.GPDRAWELEMENTSBASEVERTEX)(getProcAddr("glDrawElementsBaseVertex")); gpDrawElementsBaseVertex == nil {
    ARB_draw_elements_base_vertex = false
    return errors.New("glDrawElementsBaseVertex")
  }
  if gpDrawElementsIndirect = (C.GPDRAWELEMENTSINDIRECT)(getProcAddr("glDrawElementsIndirect")); gpDrawElementsIndirect == nil {
    ARB_draw_indirect = false
  }
  if gpDrawElementsInstanced = (C.GPDRAWELEMENTSINSTANCED)(getProcAddr("glDrawElementsInstanced")); gpDrawElementsInstanced == nil {
    return errors.New("glDrawElementsInstanced")
  }
  if gpDrawElementsInstancedARB = (C.GPDRAWELEMENTSINSTANCEDARB)(getProcAddr("glDrawElementsInstancedARB")); gpDrawElementsInstancedARB == nil {
    ARB_draw_instanced = false
  }
  if gpDrawElementsInstancedBaseInstance = (C.GPDRAWELEMENTSINSTANCEDBASEINSTANCE)(getProcAddr("glDrawElementsInstancedBaseInstance")); gpDrawElementsInstancedBaseInstance == nil {
    ARB_base_instance = false
  }
  if gpDrawElementsInstancedBaseVertex = (C.GPDRAWELEMENTSINSTANCEDBASEVERTEX)(getProcAddr("glDrawElementsInstancedBaseVertex")); gpDrawElementsInstancedBaseVertex == nil {
    ARB_draw_elements_base_vertex = false
    return errors.New("glDrawElementsInstancedBaseVertex")
  }
  if gpDrawElementsInstancedBaseVertexBaseInstance = (C.GPDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCE)(getProcAddr("glDrawElementsInstancedBaseVertexBaseInstance")); gpDrawElementsInstancedBaseVertexBaseInstance == nil {
    ARB_base_instance = false
  }
  if gpDrawElementsInstancedEXT = (C.GPDRAWELEMENTSINSTANCEDEXT)(getProcAddr("glDrawElementsInstancedEXT")); gpDrawElementsInstancedEXT == nil {
    EXT_draw_instanced = false
  }
  if gpDrawMeshArraysSUN = (C.GPDRAWMESHARRAYSSUN)(getProcAddr("glDrawMeshArraysSUN")); gpDrawMeshArraysSUN == nil {
    SUN_mesh_array = false
  }
  if gpDrawRangeElementArrayAPPLE = (C.GPDRAWRANGEELEMENTARRAYAPPLE)(getProcAddr("glDrawRangeElementArrayAPPLE")); gpDrawRangeElementArrayAPPLE == nil {
    APPLE_element_array = false
  }
  if gpDrawRangeElementArrayATI = (C.GPDRAWRANGEELEMENTARRAYATI)(getProcAddr("glDrawRangeElementArrayATI")); gpDrawRangeElementArrayATI == nil {
    ATI_element_array = false
  }
  if gpDrawRangeElements = (C.GPDRAWRANGEELEMENTS)(getProcAddr("glDrawRangeElements")); gpDrawRangeElements == nil {
    return errors.New("glDrawRangeElements")
  }
  if gpDrawRangeElementsBaseVertex = (C.GPDRAWRANGEELEMENTSBASEVERTEX)(getProcAddr("glDrawRangeElementsBaseVertex")); gpDrawRangeElementsBaseVertex == nil {
    ARB_draw_elements_base_vertex = false
    return errors.New("glDrawRangeElementsBaseVertex")
  }
  if gpDrawRangeElementsEXT = (C.GPDRAWRANGEELEMENTSEXT)(getProcAddr("glDrawRangeElementsEXT")); gpDrawRangeElementsEXT == nil {
    EXT_draw_range_elements = false
  }
  if gpDrawTextureNV = (C.GPDRAWTEXTURENV)(getProcAddr("glDrawTextureNV")); gpDrawTextureNV == nil {
    NV_draw_texture = false
  }
  if gpDrawTransformFeedback = (C.GPDRAWTRANSFORMFEEDBACK)(getProcAddr("glDrawTransformFeedback")); gpDrawTransformFeedback == nil {
    ARB_transform_feedback2 = false
  }
  if gpDrawTransformFeedbackInstanced = (C.GPDRAWTRANSFORMFEEDBACKINSTANCED)(getProcAddr("glDrawTransformFeedbackInstanced")); gpDrawTransformFeedbackInstanced == nil {
    ARB_transform_feedback_instanced = false
  }
  if gpDrawTransformFeedbackNV = (C.GPDRAWTRANSFORMFEEDBACKNV)(getProcAddr("glDrawTransformFeedbackNV")); gpDrawTransformFeedbackNV == nil {
    NV_transform_feedback2 = false
  }
  if gpDrawTransformFeedbackStream = (C.GPDRAWTRANSFORMFEEDBACKSTREAM)(getProcAddr("glDrawTransformFeedbackStream")); gpDrawTransformFeedbackStream == nil {
    ARB_transform_feedback3 = false
  }
  if gpDrawTransformFeedbackStreamInstanced = (C.GPDRAWTRANSFORMFEEDBACKSTREAMINSTANCED)(getProcAddr("glDrawTransformFeedbackStreamInstanced")); gpDrawTransformFeedbackStreamInstanced == nil {
    ARB_transform_feedback_instanced = false
  }
  if gpEdgeFlagFormatNV = (C.GPEDGEFLAGFORMATNV)(getProcAddr("glEdgeFlagFormatNV")); gpEdgeFlagFormatNV == nil {
    NV_vertex_buffer_unified_memory = false
  }
  if gpEdgeFlagPointerEXT = (C.GPEDGEFLAGPOINTEREXT)(getProcAddr("glEdgeFlagPointerEXT")); gpEdgeFlagPointerEXT == nil {
    EXT_vertex_array = false
  }
  if gpEdgeFlagPointerListIBM = (C.GPEDGEFLAGPOINTERLISTIBM)(getProcAddr("glEdgeFlagPointerListIBM")); gpEdgeFlagPointerListIBM == nil {
    IBM_vertex_array_lists = false
  }
  if gpElementPointerAPPLE = (C.GPELEMENTPOINTERAPPLE)(getProcAddr("glElementPointerAPPLE")); gpElementPointerAPPLE == nil {
    APPLE_element_array = false
  }
  if gpElementPointerATI = (C.GPELEMENTPOINTERATI)(getProcAddr("glElementPointerATI")); gpElementPointerATI == nil {
    ATI_element_array = false
  }
  if gpEnable = (C.GPENABLE)(getProcAddr("glEnable")); gpEnable == nil {
    return errors.New("glEnable")
  }
  if gpEnableClientStateIndexedEXT = (C.GPENABLECLIENTSTATEINDEXEDEXT)(getProcAddr("glEnableClientStateIndexedEXT")); gpEnableClientStateIndexedEXT == nil {
    EXT_direct_state_access = false
  }
  if gpEnableClientStateiEXT = (C.GPENABLECLIENTSTATEIEXT)(getProcAddr("glEnableClientStateiEXT")); gpEnableClientStateiEXT == nil {
    EXT_direct_state_access = false
  }
  if gpEnableIndexedEXT = (C.GPENABLEINDEXEDEXT)(getProcAddr("glEnableIndexedEXT")); gpEnableIndexedEXT == nil {
    EXT_direct_state_access = false
    EXT_draw_buffers2 = false
  }
  if gpEnableVariantClientStateEXT = (C.GPENABLEVARIANTCLIENTSTATEEXT)(getProcAddr("glEnableVariantClientStateEXT")); gpEnableVariantClientStateEXT == nil {
    EXT_vertex_shader = false
  }
  if gpEnableVertexArrayAttribEXT = (C.GPENABLEVERTEXARRAYATTRIBEXT)(getProcAddr("glEnableVertexArrayAttribEXT")); gpEnableVertexArrayAttribEXT == nil {
    EXT_direct_state_access = false
  }
  if gpEnableVertexArrayEXT = (C.GPENABLEVERTEXARRAYEXT)(getProcAddr("glEnableVertexArrayEXT")); gpEnableVertexArrayEXT == nil {
    EXT_direct_state_access = false
  }
  if gpEnableVertexAttribAPPLE = (C.GPENABLEVERTEXATTRIBAPPLE)(getProcAddr("glEnableVertexAttribAPPLE")); gpEnableVertexAttribAPPLE == nil {
    APPLE_vertex_program_evaluators = false
  }
  if gpEnableVertexAttribArray = (C.GPENABLEVERTEXATTRIBARRAY)(getProcAddr("glEnableVertexAttribArray")); gpEnableVertexAttribArray == nil {
    return errors.New("glEnableVertexAttribArray")
  }
  if gpEnableVertexAttribArrayARB = (C.GPENABLEVERTEXATTRIBARRAYARB)(getProcAddr("glEnableVertexAttribArrayARB")); gpEnableVertexAttribArrayARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if gpEnablei = (C.GPENABLEI)(getProcAddr("glEnablei")); gpEnablei == nil {
    return errors.New("glEnablei")
  }
  if gpEndConditionalRender = (C.GPENDCONDITIONALRENDER)(getProcAddr("glEndConditionalRender")); gpEndConditionalRender == nil {
    return errors.New("glEndConditionalRender")
  }
  if gpEndConditionalRenderNV = (C.GPENDCONDITIONALRENDERNV)(getProcAddr("glEndConditionalRenderNV")); gpEndConditionalRenderNV == nil {
    NV_conditional_render = false
  }
  if gpEndConditionalRenderNVX = (C.GPENDCONDITIONALRENDERNVX)(getProcAddr("glEndConditionalRenderNVX")); gpEndConditionalRenderNVX == nil {
    NVX_conditional_render = false
  }
  if gpEndFragmentShaderATI = (C.GPENDFRAGMENTSHADERATI)(getProcAddr("glEndFragmentShaderATI")); gpEndFragmentShaderATI == nil {
    ATI_fragment_shader = false
  }
  if gpEndOcclusionQueryNV = (C.GPENDOCCLUSIONQUERYNV)(getProcAddr("glEndOcclusionQueryNV")); gpEndOcclusionQueryNV == nil {
    NV_occlusion_query = false
  }
  if gpEndPerfMonitorAMD = (C.GPENDPERFMONITORAMD)(getProcAddr("glEndPerfMonitorAMD")); gpEndPerfMonitorAMD == nil {
    AMD_performance_monitor = false
  }
  if gpEndPerfQueryINTEL = (C.GPENDPERFQUERYINTEL)(getProcAddr("glEndPerfQueryINTEL")); gpEndPerfQueryINTEL == nil {
    INTEL_performance_query = false
  }
  if gpEndQuery = (C.GPENDQUERY)(getProcAddr("glEndQuery")); gpEndQuery == nil {
    return errors.New("glEndQuery")
  }
  if gpEndQueryARB = (C.GPENDQUERYARB)(getProcAddr("glEndQueryARB")); gpEndQueryARB == nil {
    ARB_occlusion_query = false
  }
  if gpEndQueryIndexed = (C.GPENDQUERYINDEXED)(getProcAddr("glEndQueryIndexed")); gpEndQueryIndexed == nil {
    ARB_transform_feedback3 = false
  }
  if gpEndTransformFeedback = (C.GPENDTRANSFORMFEEDBACK)(getProcAddr("glEndTransformFeedback")); gpEndTransformFeedback == nil {
    return errors.New("glEndTransformFeedback")
  }
  if gpEndTransformFeedbackEXT = (C.GPENDTRANSFORMFEEDBACKEXT)(getProcAddr("glEndTransformFeedbackEXT")); gpEndTransformFeedbackEXT == nil {
    EXT_transform_feedback = false
  }
  if gpEndTransformFeedbackNV = (C.GPENDTRANSFORMFEEDBACKNV)(getProcAddr("glEndTransformFeedbackNV")); gpEndTransformFeedbackNV == nil {
    NV_transform_feedback = false
  }
  if gpEndVertexShaderEXT = (C.GPENDVERTEXSHADEREXT)(getProcAddr("glEndVertexShaderEXT")); gpEndVertexShaderEXT == nil {
    EXT_vertex_shader = false
  }
  if gpEndVideoCaptureNV = (C.GPENDVIDEOCAPTURENV)(getProcAddr("glEndVideoCaptureNV")); gpEndVideoCaptureNV == nil {
    NV_video_capture = false
  }
  if gpEvalCoord1xOES = (C.GPEVALCOORD1XOES)(getProcAddr("glEvalCoord1xOES")); gpEvalCoord1xOES == nil {
    OES_fixed_point = false
  }
  if gpEvalCoord1xvOES = (C.GPEVALCOORD1XVOES)(getProcAddr("glEvalCoord1xvOES")); gpEvalCoord1xvOES == nil {
    OES_fixed_point = false
  }
  if gpEvalCoord2xOES = (C.GPEVALCOORD2XOES)(getProcAddr("glEvalCoord2xOES")); gpEvalCoord2xOES == nil {
    OES_fixed_point = false
  }
  if gpEvalCoord2xvOES = (C.GPEVALCOORD2XVOES)(getProcAddr("glEvalCoord2xvOES")); gpEvalCoord2xvOES == nil {
    OES_fixed_point = false
  }
  if gpEvalMapsNV = (C.GPEVALMAPSNV)(getProcAddr("glEvalMapsNV")); gpEvalMapsNV == nil {
    NV_evaluators = false
  }
  if gpExecuteProgramNV = (C.GPEXECUTEPROGRAMNV)(getProcAddr("glExecuteProgramNV")); gpExecuteProgramNV == nil {
    NV_vertex_program = false
  }
  if gpExtractComponentEXT = (C.GPEXTRACTCOMPONENTEXT)(getProcAddr("glExtractComponentEXT")); gpExtractComponentEXT == nil {
    EXT_vertex_shader = false
  }
  if gpFeedbackBufferxOES = (C.GPFEEDBACKBUFFERXOES)(getProcAddr("glFeedbackBufferxOES")); gpFeedbackBufferxOES == nil {
    OES_fixed_point = false
  }
  if gpFenceSync = (C.GPFENCESYNC)(getProcAddr("glFenceSync")); gpFenceSync == nil {
    ARB_sync = false
    return errors.New("glFenceSync")
  }
  if gpFinalCombinerInputNV = (C.GPFINALCOMBINERINPUTNV)(getProcAddr("glFinalCombinerInputNV")); gpFinalCombinerInputNV == nil {
    NV_register_combiners = false
  }
  if gpFinish = (C.GPFINISH)(getProcAddr("glFinish")); gpFinish == nil {
    return errors.New("glFinish")
  }
  if gpFinishAsyncSGIX = (C.GPFINISHASYNCSGIX)(getProcAddr("glFinishAsyncSGIX")); gpFinishAsyncSGIX == nil {
    SGIX_async = false
  }
  if gpFinishFenceAPPLE = (C.GPFINISHFENCEAPPLE)(getProcAddr("glFinishFenceAPPLE")); gpFinishFenceAPPLE == nil {
    APPLE_fence = false
  }
  if gpFinishFenceNV = (C.GPFINISHFENCENV)(getProcAddr("glFinishFenceNV")); gpFinishFenceNV == nil {
    NV_fence = false
  }
  if gpFinishObjectAPPLE = (C.GPFINISHOBJECTAPPLE)(getProcAddr("glFinishObjectAPPLE")); gpFinishObjectAPPLE == nil {
    APPLE_fence = false
  }
  if gpFinishTextureSUNX = (C.GPFINISHTEXTURESUNX)(getProcAddr("glFinishTextureSUNX")); gpFinishTextureSUNX == nil {
    SUNX_constant_data = false
  }
  if gpFlush = (C.GPFLUSH)(getProcAddr("glFlush")); gpFlush == nil {
    return errors.New("glFlush")
  }
  if gpFlushMappedBufferRange = (C.GPFLUSHMAPPEDBUFFERRANGE)(getProcAddr("glFlushMappedBufferRange")); gpFlushMappedBufferRange == nil {
    ARB_map_buffer_range = false
    return errors.New("glFlushMappedBufferRange")
  }
  if gpFlushMappedBufferRangeAPPLE = (C.GPFLUSHMAPPEDBUFFERRANGEAPPLE)(getProcAddr("glFlushMappedBufferRangeAPPLE")); gpFlushMappedBufferRangeAPPLE == nil {
    APPLE_flush_buffer_range = false
  }
  if gpFlushMappedNamedBufferRangeEXT = (C.GPFLUSHMAPPEDNAMEDBUFFERRANGEEXT)(getProcAddr("glFlushMappedNamedBufferRangeEXT")); gpFlushMappedNamedBufferRangeEXT == nil {
    EXT_direct_state_access = false
  }
  if gpFlushPixelDataRangeNV = (C.GPFLUSHPIXELDATARANGENV)(getProcAddr("glFlushPixelDataRangeNV")); gpFlushPixelDataRangeNV == nil {
    NV_pixel_data_range = false
  }
  if gpFlushRasterSGIX = (C.GPFLUSHRASTERSGIX)(getProcAddr("glFlushRasterSGIX")); gpFlushRasterSGIX == nil {
    SGIX_flush_raster = false
  }
  if gpFlushStaticDataIBM = (C.GPFLUSHSTATICDATAIBM)(getProcAddr("glFlushStaticDataIBM")); gpFlushStaticDataIBM == nil {
    IBM_static_data = false
  }
  if gpFlushVertexArrayRangeAPPLE = (C.GPFLUSHVERTEXARRAYRANGEAPPLE)(getProcAddr("glFlushVertexArrayRangeAPPLE")); gpFlushVertexArrayRangeAPPLE == nil {
    APPLE_vertex_array_range = false
  }
  if gpFlushVertexArrayRangeNV = (C.GPFLUSHVERTEXARRAYRANGENV)(getProcAddr("glFlushVertexArrayRangeNV")); gpFlushVertexArrayRangeNV == nil {
    NV_vertex_array_range = false
  }
  if gpFogCoordFormatNV = (C.GPFOGCOORDFORMATNV)(getProcAddr("glFogCoordFormatNV")); gpFogCoordFormatNV == nil {
    NV_vertex_buffer_unified_memory = false
  }
  if gpFogCoordPointerEXT = (C.GPFOGCOORDPOINTEREXT)(getProcAddr("glFogCoordPointerEXT")); gpFogCoordPointerEXT == nil {
    EXT_fog_coord = false
  }
  if gpFogCoordPointerListIBM = (C.GPFOGCOORDPOINTERLISTIBM)(getProcAddr("glFogCoordPointerListIBM")); gpFogCoordPointerListIBM == nil {
    IBM_vertex_array_lists = false
  }
  if gpFogCoorddEXT = (C.GPFOGCOORDDEXT)(getProcAddr("glFogCoorddEXT")); gpFogCoorddEXT == nil {
    EXT_fog_coord = false
  }
  if gpFogCoorddvEXT = (C.GPFOGCOORDDVEXT)(getProcAddr("glFogCoorddvEXT")); gpFogCoorddvEXT == nil {
    EXT_fog_coord = false
  }
  if gpFogCoordfEXT = (C.GPFOGCOORDFEXT)(getProcAddr("glFogCoordfEXT")); gpFogCoordfEXT == nil {
    EXT_fog_coord = false
  }
  if gpFogCoordfvEXT = (C.GPFOGCOORDFVEXT)(getProcAddr("glFogCoordfvEXT")); gpFogCoordfvEXT == nil {
    EXT_fog_coord = false
  }
  if gpFogCoordhNV = (C.GPFOGCOORDHNV)(getProcAddr("glFogCoordhNV")); gpFogCoordhNV == nil {
    NV_half_float = false
  }
  if gpFogCoordhvNV = (C.GPFOGCOORDHVNV)(getProcAddr("glFogCoordhvNV")); gpFogCoordhvNV == nil {
    NV_half_float = false
  }
  if gpFogFuncSGIS = (C.GPFOGFUNCSGIS)(getProcAddr("glFogFuncSGIS")); gpFogFuncSGIS == nil {
    SGIS_fog_function = false
  }
  if gpFogxOES = (C.GPFOGXOES)(getProcAddr("glFogxOES")); gpFogxOES == nil {
    OES_fixed_point = false
  }
  if gpFogxvOES = (C.GPFOGXVOES)(getProcAddr("glFogxvOES")); gpFogxvOES == nil {
    OES_fixed_point = false
  }
  if gpFragmentColorMaterialSGIX = (C.GPFRAGMENTCOLORMATERIALSGIX)(getProcAddr("glFragmentColorMaterialSGIX")); gpFragmentColorMaterialSGIX == nil {
    SGIX_fragment_lighting = false
  }
  if gpFragmentLightModelfSGIX = (C.GPFRAGMENTLIGHTMODELFSGIX)(getProcAddr("glFragmentLightModelfSGIX")); gpFragmentLightModelfSGIX == nil {
    SGIX_fragment_lighting = false
  }
  if gpFragmentLightModelfvSGIX = (C.GPFRAGMENTLIGHTMODELFVSGIX)(getProcAddr("glFragmentLightModelfvSGIX")); gpFragmentLightModelfvSGIX == nil {
    SGIX_fragment_lighting = false
  }
  if gpFragmentLightModeliSGIX = (C.GPFRAGMENTLIGHTMODELISGIX)(getProcAddr("glFragmentLightModeliSGIX")); gpFragmentLightModeliSGIX == nil {
    SGIX_fragment_lighting = false
  }
  if gpFragmentLightModelivSGIX = (C.GPFRAGMENTLIGHTMODELIVSGIX)(getProcAddr("glFragmentLightModelivSGIX")); gpFragmentLightModelivSGIX == nil {
    SGIX_fragment_lighting = false
  }
  if gpFragmentLightfSGIX = (C.GPFRAGMENTLIGHTFSGIX)(getProcAddr("glFragmentLightfSGIX")); gpFragmentLightfSGIX == nil {
    SGIX_fragment_lighting = false
  }
  if gpFragmentLightfvSGIX = (C.GPFRAGMENTLIGHTFVSGIX)(getProcAddr("glFragmentLightfvSGIX")); gpFragmentLightfvSGIX == nil {
    SGIX_fragment_lighting = false
  }
  if gpFragmentLightiSGIX = (C.GPFRAGMENTLIGHTISGIX)(getProcAddr("glFragmentLightiSGIX")); gpFragmentLightiSGIX == nil {
    SGIX_fragment_lighting = false
  }
  if gpFragmentLightivSGIX = (C.GPFRAGMENTLIGHTIVSGIX)(getProcAddr("glFragmentLightivSGIX")); gpFragmentLightivSGIX == nil {
    SGIX_fragment_lighting = false
  }
  if gpFragmentMaterialfSGIX = (C.GPFRAGMENTMATERIALFSGIX)(getProcAddr("glFragmentMaterialfSGIX")); gpFragmentMaterialfSGIX == nil {
    SGIX_fragment_lighting = false
  }
  if gpFragmentMaterialfvSGIX = (C.GPFRAGMENTMATERIALFVSGIX)(getProcAddr("glFragmentMaterialfvSGIX")); gpFragmentMaterialfvSGIX == nil {
    SGIX_fragment_lighting = false
  }
  if gpFragmentMaterialiSGIX = (C.GPFRAGMENTMATERIALISGIX)(getProcAddr("glFragmentMaterialiSGIX")); gpFragmentMaterialiSGIX == nil {
    SGIX_fragment_lighting = false
  }
  if gpFragmentMaterialivSGIX = (C.GPFRAGMENTMATERIALIVSGIX)(getProcAddr("glFragmentMaterialivSGIX")); gpFragmentMaterialivSGIX == nil {
    SGIX_fragment_lighting = false
  }
  if gpFrameTerminatorGREMEDY = (C.GPFRAMETERMINATORGREMEDY)(getProcAddr("glFrameTerminatorGREMEDY")); gpFrameTerminatorGREMEDY == nil {
    GREMEDY_frame_terminator = false
  }
  if gpFrameZoomSGIX = (C.GPFRAMEZOOMSGIX)(getProcAddr("glFrameZoomSGIX")); gpFrameZoomSGIX == nil {
    SGIX_framezoom = false
  }
  if gpFramebufferDrawBufferEXT = (C.GPFRAMEBUFFERDRAWBUFFEREXT)(getProcAddr("glFramebufferDrawBufferEXT")); gpFramebufferDrawBufferEXT == nil {
    EXT_direct_state_access = false
  }
  if gpFramebufferDrawBuffersEXT = (C.GPFRAMEBUFFERDRAWBUFFERSEXT)(getProcAddr("glFramebufferDrawBuffersEXT")); gpFramebufferDrawBuffersEXT == nil {
    EXT_direct_state_access = false
  }
  if gpFramebufferParameteri = (C.GPFRAMEBUFFERPARAMETERI)(getProcAddr("glFramebufferParameteri")); gpFramebufferParameteri == nil {
    ARB_framebuffer_no_attachments = false
  }
  if gpFramebufferReadBufferEXT = (C.GPFRAMEBUFFERREADBUFFEREXT)(getProcAddr("glFramebufferReadBufferEXT")); gpFramebufferReadBufferEXT == nil {
    EXT_direct_state_access = false
  }
  if gpFramebufferRenderbuffer = (C.GPFRAMEBUFFERRENDERBUFFER)(getProcAddr("glFramebufferRenderbuffer")); gpFramebufferRenderbuffer == nil {
    ARB_framebuffer_object = false
    return errors.New("glFramebufferRenderbuffer")
  }
  if gpFramebufferRenderbufferEXT = (C.GPFRAMEBUFFERRENDERBUFFEREXT)(getProcAddr("glFramebufferRenderbufferEXT")); gpFramebufferRenderbufferEXT == nil {
    EXT_framebuffer_object = false
  }
  if gpFramebufferTexture = (C.GPFRAMEBUFFERTEXTURE)(getProcAddr("glFramebufferTexture")); gpFramebufferTexture == nil {
    return errors.New("glFramebufferTexture")
  }
  if gpFramebufferTexture1D = (C.GPFRAMEBUFFERTEXTURE1D)(getProcAddr("glFramebufferTexture1D")); gpFramebufferTexture1D == nil {
    ARB_framebuffer_object = false
    return errors.New("glFramebufferTexture1D")
  }
  if gpFramebufferTexture1DEXT = (C.GPFRAMEBUFFERTEXTURE1DEXT)(getProcAddr("glFramebufferTexture1DEXT")); gpFramebufferTexture1DEXT == nil {
    EXT_framebuffer_object = false
  }
  if gpFramebufferTexture2D = (C.GPFRAMEBUFFERTEXTURE2D)(getProcAddr("glFramebufferTexture2D")); gpFramebufferTexture2D == nil {
    ARB_framebuffer_object = false
    return errors.New("glFramebufferTexture2D")
  }
  if gpFramebufferTexture2DEXT = (C.GPFRAMEBUFFERTEXTURE2DEXT)(getProcAddr("glFramebufferTexture2DEXT")); gpFramebufferTexture2DEXT == nil {
    EXT_framebuffer_object = false
  }
  if gpFramebufferTexture3D = (C.GPFRAMEBUFFERTEXTURE3D)(getProcAddr("glFramebufferTexture3D")); gpFramebufferTexture3D == nil {
    ARB_framebuffer_object = false
    return errors.New("glFramebufferTexture3D")
  }
  if gpFramebufferTexture3DEXT = (C.GPFRAMEBUFFERTEXTURE3DEXT)(getProcAddr("glFramebufferTexture3DEXT")); gpFramebufferTexture3DEXT == nil {
    EXT_framebuffer_object = false
  }
  if gpFramebufferTextureARB = (C.GPFRAMEBUFFERTEXTUREARB)(getProcAddr("glFramebufferTextureARB")); gpFramebufferTextureARB == nil {
    ARB_geometry_shader4 = false
  }
  if gpFramebufferTextureEXT = (C.GPFRAMEBUFFERTEXTUREEXT)(getProcAddr("glFramebufferTextureEXT")); gpFramebufferTextureEXT == nil {
    NV_geometry_program4 = false
  }
  if gpFramebufferTextureFaceARB = (C.GPFRAMEBUFFERTEXTUREFACEARB)(getProcAddr("glFramebufferTextureFaceARB")); gpFramebufferTextureFaceARB == nil {
    ARB_geometry_shader4 = false
  }
  if gpFramebufferTextureFaceEXT = (C.GPFRAMEBUFFERTEXTUREFACEEXT)(getProcAddr("glFramebufferTextureFaceEXT")); gpFramebufferTextureFaceEXT == nil {
    NV_geometry_program4 = false
  }
  if gpFramebufferTextureLayer = (C.GPFRAMEBUFFERTEXTURELAYER)(getProcAddr("glFramebufferTextureLayer")); gpFramebufferTextureLayer == nil {
    ARB_framebuffer_object = false
    return errors.New("glFramebufferTextureLayer")
  }
  if gpFramebufferTextureLayerARB = (C.GPFRAMEBUFFERTEXTURELAYERARB)(getProcAddr("glFramebufferTextureLayerARB")); gpFramebufferTextureLayerARB == nil {
    ARB_geometry_shader4 = false
  }
  if gpFramebufferTextureLayerEXT = (C.GPFRAMEBUFFERTEXTURELAYEREXT)(getProcAddr("glFramebufferTextureLayerEXT")); gpFramebufferTextureLayerEXT == nil {
    EXT_texture_array = false
    NV_geometry_program4 = false
  }
  if gpFreeObjectBufferATI = (C.GPFREEOBJECTBUFFERATI)(getProcAddr("glFreeObjectBufferATI")); gpFreeObjectBufferATI == nil {
    ATI_vertex_array_object = false
  }
  if gpFrontFace = (C.GPFRONTFACE)(getProcAddr("glFrontFace")); gpFrontFace == nil {
    return errors.New("glFrontFace")
  }
  if gpFrustumfOES = (C.GPFRUSTUMFOES)(getProcAddr("glFrustumfOES")); gpFrustumfOES == nil {
    OES_single_precision = false
  }
  if gpFrustumxOES = (C.GPFRUSTUMXOES)(getProcAddr("glFrustumxOES")); gpFrustumxOES == nil {
    OES_fixed_point = false
  }
  if gpGenAsyncMarkersSGIX = (C.GPGENASYNCMARKERSSGIX)(getProcAddr("glGenAsyncMarkersSGIX")); gpGenAsyncMarkersSGIX == nil {
    SGIX_async = false
  }
  if gpGenBuffers = (C.GPGENBUFFERS)(getProcAddr("glGenBuffers")); gpGenBuffers == nil {
    return errors.New("glGenBuffers")
  }
  if gpGenBuffersARB = (C.GPGENBUFFERSARB)(getProcAddr("glGenBuffersARB")); gpGenBuffersARB == nil {
    ARB_vertex_buffer_object = false
  }
  if gpGenFencesAPPLE = (C.GPGENFENCESAPPLE)(getProcAddr("glGenFencesAPPLE")); gpGenFencesAPPLE == nil {
    APPLE_fence = false
  }
  if gpGenFencesNV = (C.GPGENFENCESNV)(getProcAddr("glGenFencesNV")); gpGenFencesNV == nil {
    NV_fence = false
  }
  if gpGenFragmentShadersATI = (C.GPGENFRAGMENTSHADERSATI)(getProcAddr("glGenFragmentShadersATI")); gpGenFragmentShadersATI == nil {
    ATI_fragment_shader = false
  }
  if gpGenFramebuffers = (C.GPGENFRAMEBUFFERS)(getProcAddr("glGenFramebuffers")); gpGenFramebuffers == nil {
    ARB_framebuffer_object = false
    return errors.New("glGenFramebuffers")
  }
  if gpGenFramebuffersEXT = (C.GPGENFRAMEBUFFERSEXT)(getProcAddr("glGenFramebuffersEXT")); gpGenFramebuffersEXT == nil {
    EXT_framebuffer_object = false
  }
  if gpGenNamesAMD = (C.GPGENNAMESAMD)(getProcAddr("glGenNamesAMD")); gpGenNamesAMD == nil {
    AMD_name_gen_delete = false
  }
  if gpGenOcclusionQueriesNV = (C.GPGENOCCLUSIONQUERIESNV)(getProcAddr("glGenOcclusionQueriesNV")); gpGenOcclusionQueriesNV == nil {
    NV_occlusion_query = false
  }
  if gpGenPathsNV = (C.GPGENPATHSNV)(getProcAddr("glGenPathsNV")); gpGenPathsNV == nil {
    NV_path_rendering = false
  }
  if gpGenPerfMonitorsAMD = (C.GPGENPERFMONITORSAMD)(getProcAddr("glGenPerfMonitorsAMD")); gpGenPerfMonitorsAMD == nil {
    AMD_performance_monitor = false
  }
  if gpGenProgramPipelines = (C.GPGENPROGRAMPIPELINES)(getProcAddr("glGenProgramPipelines")); gpGenProgramPipelines == nil {
    ARB_separate_shader_objects = false
  }
  if gpGenProgramPipelinesEXT = (C.GPGENPROGRAMPIPELINESEXT)(getProcAddr("glGenProgramPipelinesEXT")); gpGenProgramPipelinesEXT == nil {
    EXT_separate_shader_objects = false
  }
  if gpGenProgramsARB = (C.GPGENPROGRAMSARB)(getProcAddr("glGenProgramsARB")); gpGenProgramsARB == nil {
    ARB_fragment_program = false
    ARB_vertex_program = false
  }
  if gpGenProgramsNV = (C.GPGENPROGRAMSNV)(getProcAddr("glGenProgramsNV")); gpGenProgramsNV == nil {
    NV_vertex_program = false
  }
  if gpGenQueries = (C.GPGENQUERIES)(getProcAddr("glGenQueries")); gpGenQueries == nil {
    return errors.New("glGenQueries")
  }
  if gpGenQueriesARB = (C.GPGENQUERIESARB)(getProcAddr("glGenQueriesARB")); gpGenQueriesARB == nil {
    ARB_occlusion_query = false
  }
  if gpGenRenderbuffers = (C.GPGENRENDERBUFFERS)(getProcAddr("glGenRenderbuffers")); gpGenRenderbuffers == nil {
    ARB_framebuffer_object = false
    return errors.New("glGenRenderbuffers")
  }
  if gpGenRenderbuffersEXT = (C.GPGENRENDERBUFFERSEXT)(getProcAddr("glGenRenderbuffersEXT")); gpGenRenderbuffersEXT == nil {
    EXT_framebuffer_object = false
  }
  if gpGenSamplers = (C.GPGENSAMPLERS)(getProcAddr("glGenSamplers")); gpGenSamplers == nil {
    ARB_sampler_objects = false
    return errors.New("glGenSamplers")
  }
  if gpGenSymbolsEXT = (C.GPGENSYMBOLSEXT)(getProcAddr("glGenSymbolsEXT")); gpGenSymbolsEXT == nil {
    EXT_vertex_shader = false
  }
  if gpGenTextures = (C.GPGENTEXTURES)(getProcAddr("glGenTextures")); gpGenTextures == nil {
    return errors.New("glGenTextures")
  }
  if gpGenTexturesEXT = (C.GPGENTEXTURESEXT)(getProcAddr("glGenTexturesEXT")); gpGenTexturesEXT == nil {
    EXT_texture_object = false
  }
  if gpGenTransformFeedbacks = (C.GPGENTRANSFORMFEEDBACKS)(getProcAddr("glGenTransformFeedbacks")); gpGenTransformFeedbacks == nil {
    ARB_transform_feedback2 = false
  }
  if gpGenTransformFeedbacksNV = (C.GPGENTRANSFORMFEEDBACKSNV)(getProcAddr("glGenTransformFeedbacksNV")); gpGenTransformFeedbacksNV == nil {
    NV_transform_feedback2 = false
  }
  if gpGenVertexArrays = (C.GPGENVERTEXARRAYS)(getProcAddr("glGenVertexArrays")); gpGenVertexArrays == nil {
    ARB_vertex_array_object = false
    return errors.New("glGenVertexArrays")
  }
  if gpGenVertexArraysAPPLE = (C.GPGENVERTEXARRAYSAPPLE)(getProcAddr("glGenVertexArraysAPPLE")); gpGenVertexArraysAPPLE == nil {
    APPLE_vertex_array_object = false
  }
  if gpGenVertexShadersEXT = (C.GPGENVERTEXSHADERSEXT)(getProcAddr("glGenVertexShadersEXT")); gpGenVertexShadersEXT == nil {
    EXT_vertex_shader = false
  }
  if gpGenerateMipmap = (C.GPGENERATEMIPMAP)(getProcAddr("glGenerateMipmap")); gpGenerateMipmap == nil {
    ARB_framebuffer_object = false
    return errors.New("glGenerateMipmap")
  }
  if gpGenerateMipmapEXT = (C.GPGENERATEMIPMAPEXT)(getProcAddr("glGenerateMipmapEXT")); gpGenerateMipmapEXT == nil {
    EXT_framebuffer_object = false
  }
  if gpGenerateMultiTexMipmapEXT = (C.GPGENERATEMULTITEXMIPMAPEXT)(getProcAddr("glGenerateMultiTexMipmapEXT")); gpGenerateMultiTexMipmapEXT == nil {
    EXT_direct_state_access = false
  }
  if gpGenerateTextureMipmapEXT = (C.GPGENERATETEXTUREMIPMAPEXT)(getProcAddr("glGenerateTextureMipmapEXT")); gpGenerateTextureMipmapEXT == nil {
    EXT_direct_state_access = false
  }
  if gpGetActiveAtomicCounterBufferiv = (C.GPGETACTIVEATOMICCOUNTERBUFFERIV)(getProcAddr("glGetActiveAtomicCounterBufferiv")); gpGetActiveAtomicCounterBufferiv == nil {
    ARB_shader_atomic_counters = false
  }
  if gpGetActiveAttrib = (C.GPGETACTIVEATTRIB)(getProcAddr("glGetActiveAttrib")); gpGetActiveAttrib == nil {
    return errors.New("glGetActiveAttrib")
  }
  if gpGetActiveAttribARB = (C.GPGETACTIVEATTRIBARB)(getProcAddr("glGetActiveAttribARB")); gpGetActiveAttribARB == nil {
    ARB_vertex_shader = false
  }
  if gpGetActiveSubroutineName = (C.GPGETACTIVESUBROUTINENAME)(getProcAddr("glGetActiveSubroutineName")); gpGetActiveSubroutineName == nil {
    ARB_shader_subroutine = false
  }
  if gpGetActiveSubroutineUniformName = (C.GPGETACTIVESUBROUTINEUNIFORMNAME)(getProcAddr("glGetActiveSubroutineUniformName")); gpGetActiveSubroutineUniformName == nil {
    ARB_shader_subroutine = false
  }
  if gpGetActiveSubroutineUniformiv = (C.GPGETACTIVESUBROUTINEUNIFORMIV)(getProcAddr("glGetActiveSubroutineUniformiv")); gpGetActiveSubroutineUniformiv == nil {
    ARB_shader_subroutine = false
  }
  if gpGetActiveUniform = (C.GPGETACTIVEUNIFORM)(getProcAddr("glGetActiveUniform")); gpGetActiveUniform == nil {
    return errors.New("glGetActiveUniform")
  }
  if gpGetActiveUniformARB = (C.GPGETACTIVEUNIFORMARB)(getProcAddr("glGetActiveUniformARB")); gpGetActiveUniformARB == nil {
    ARB_shader_objects = false
  }
  if gpGetActiveUniformBlockName = (C.GPGETACTIVEUNIFORMBLOCKNAME)(getProcAddr("glGetActiveUniformBlockName")); gpGetActiveUniformBlockName == nil {
    ARB_uniform_buffer_object = false
    return errors.New("glGetActiveUniformBlockName")
  }
  if gpGetActiveUniformBlockiv = (C.GPGETACTIVEUNIFORMBLOCKIV)(getProcAddr("glGetActiveUniformBlockiv")); gpGetActiveUniformBlockiv == nil {
    ARB_uniform_buffer_object = false
    return errors.New("glGetActiveUniformBlockiv")
  }
  if gpGetActiveUniformName = (C.GPGETACTIVEUNIFORMNAME)(getProcAddr("glGetActiveUniformName")); gpGetActiveUniformName == nil {
    ARB_uniform_buffer_object = false
    return errors.New("glGetActiveUniformName")
  }
  if gpGetActiveUniformsiv = (C.GPGETACTIVEUNIFORMSIV)(getProcAddr("glGetActiveUniformsiv")); gpGetActiveUniformsiv == nil {
    ARB_uniform_buffer_object = false
    return errors.New("glGetActiveUniformsiv")
  }
  if gpGetActiveVaryingNV = (C.GPGETACTIVEVARYINGNV)(getProcAddr("glGetActiveVaryingNV")); gpGetActiveVaryingNV == nil {
    NV_transform_feedback = false
  }
  if gpGetArrayObjectfvATI = (C.GPGETARRAYOBJECTFVATI)(getProcAddr("glGetArrayObjectfvATI")); gpGetArrayObjectfvATI == nil {
    ATI_vertex_array_object = false
  }
  if gpGetArrayObjectivATI = (C.GPGETARRAYOBJECTIVATI)(getProcAddr("glGetArrayObjectivATI")); gpGetArrayObjectivATI == nil {
    ATI_vertex_array_object = false
  }
  if gpGetAttachedObjectsARB = (C.GPGETATTACHEDOBJECTSARB)(getProcAddr("glGetAttachedObjectsARB")); gpGetAttachedObjectsARB == nil {
    ARB_shader_objects = false
  }
  if gpGetAttachedShaders = (C.GPGETATTACHEDSHADERS)(getProcAddr("glGetAttachedShaders")); gpGetAttachedShaders == nil {
    return errors.New("glGetAttachedShaders")
  }
  if gpGetAttribLocation = (C.GPGETATTRIBLOCATION)(getProcAddr("glGetAttribLocation")); gpGetAttribLocation == nil {
    return errors.New("glGetAttribLocation")
  }
  if gpGetAttribLocationARB = (C.GPGETATTRIBLOCATIONARB)(getProcAddr("glGetAttribLocationARB")); gpGetAttribLocationARB == nil {
    ARB_vertex_shader = false
  }
  if gpGetBooleanIndexedvEXT = (C.GPGETBOOLEANINDEXEDVEXT)(getProcAddr("glGetBooleanIndexedvEXT")); gpGetBooleanIndexedvEXT == nil {
    EXT_direct_state_access = false
    EXT_draw_buffers2 = false
  }
  if gpGetBooleani_v = (C.GPGETBOOLEANI_V)(getProcAddr("glGetBooleani_v")); gpGetBooleani_v == nil {
    return errors.New("glGetBooleani_v")
  }
  if gpGetBooleanv = (C.GPGETBOOLEANV)(getProcAddr("glGetBooleanv")); gpGetBooleanv == nil {
    return errors.New("glGetBooleanv")
  }
  if gpGetBufferParameteri64v = (C.GPGETBUFFERPARAMETERI64V)(getProcAddr("glGetBufferParameteri64v")); gpGetBufferParameteri64v == nil {
    return errors.New("glGetBufferParameteri64v")
  }
  if gpGetBufferParameteriv = (C.GPGETBUFFERPARAMETERIV)(getProcAddr("glGetBufferParameteriv")); gpGetBufferParameteriv == nil {
    return errors.New("glGetBufferParameteriv")
  }
  if gpGetBufferParameterivARB = (C.GPGETBUFFERPARAMETERIVARB)(getProcAddr("glGetBufferParameterivARB")); gpGetBufferParameterivARB == nil {
    ARB_vertex_buffer_object = false
  }
  if gpGetBufferParameterui64vNV = (C.GPGETBUFFERPARAMETERUI64VNV)(getProcAddr("glGetBufferParameterui64vNV")); gpGetBufferParameterui64vNV == nil {
    NV_shader_buffer_load = false
  }
  if gpGetBufferPointerv = (C.GPGETBUFFERPOINTERV)(getProcAddr("glGetBufferPointerv")); gpGetBufferPointerv == nil {
    return errors.New("glGetBufferPointerv")
  }
  if gpGetBufferPointervARB = (C.GPGETBUFFERPOINTERVARB)(getProcAddr("glGetBufferPointervARB")); gpGetBufferPointervARB == nil {
    ARB_vertex_buffer_object = false
  }
  if gpGetBufferSubData = (C.GPGETBUFFERSUBDATA)(getProcAddr("glGetBufferSubData")); gpGetBufferSubData == nil {
    return errors.New("glGetBufferSubData")
  }
  if gpGetBufferSubDataARB = (C.GPGETBUFFERSUBDATAARB)(getProcAddr("glGetBufferSubDataARB")); gpGetBufferSubDataARB == nil {
    ARB_vertex_buffer_object = false
  }
  if gpGetClipPlanefOES = (C.GPGETCLIPPLANEFOES)(getProcAddr("glGetClipPlanefOES")); gpGetClipPlanefOES == nil {
    OES_single_precision = false
  }
  if gpGetClipPlanexOES = (C.GPGETCLIPPLANEXOES)(getProcAddr("glGetClipPlanexOES")); gpGetClipPlanexOES == nil {
    OES_fixed_point = false
  }
  if gpGetColorTableEXT = (C.GPGETCOLORTABLEEXT)(getProcAddr("glGetColorTableEXT")); gpGetColorTableEXT == nil {
    EXT_paletted_texture = false
  }
  if gpGetColorTableParameterfvEXT = (C.GPGETCOLORTABLEPARAMETERFVEXT)(getProcAddr("glGetColorTableParameterfvEXT")); gpGetColorTableParameterfvEXT == nil {
    EXT_paletted_texture = false
  }
  if gpGetColorTableParameterfvSGI = (C.GPGETCOLORTABLEPARAMETERFVSGI)(getProcAddr("glGetColorTableParameterfvSGI")); gpGetColorTableParameterfvSGI == nil {
    SGI_color_table = false
  }
  if gpGetColorTableParameterivEXT = (C.GPGETCOLORTABLEPARAMETERIVEXT)(getProcAddr("glGetColorTableParameterivEXT")); gpGetColorTableParameterivEXT == nil {
    EXT_paletted_texture = false
  }
  if gpGetColorTableParameterivSGI = (C.GPGETCOLORTABLEPARAMETERIVSGI)(getProcAddr("glGetColorTableParameterivSGI")); gpGetColorTableParameterivSGI == nil {
    SGI_color_table = false
  }
  if gpGetColorTableSGI = (C.GPGETCOLORTABLESGI)(getProcAddr("glGetColorTableSGI")); gpGetColorTableSGI == nil {
    SGI_color_table = false
  }
  if gpGetCombinerInputParameterfvNV = (C.GPGETCOMBINERINPUTPARAMETERFVNV)(getProcAddr("glGetCombinerInputParameterfvNV")); gpGetCombinerInputParameterfvNV == nil {
    NV_register_combiners = false
  }
  if gpGetCombinerInputParameterivNV = (C.GPGETCOMBINERINPUTPARAMETERIVNV)(getProcAddr("glGetCombinerInputParameterivNV")); gpGetCombinerInputParameterivNV == nil {
    NV_register_combiners = false
  }
  if gpGetCombinerOutputParameterfvNV = (C.GPGETCOMBINEROUTPUTPARAMETERFVNV)(getProcAddr("glGetCombinerOutputParameterfvNV")); gpGetCombinerOutputParameterfvNV == nil {
    NV_register_combiners = false
  }
  if gpGetCombinerOutputParameterivNV = (C.GPGETCOMBINEROUTPUTPARAMETERIVNV)(getProcAddr("glGetCombinerOutputParameterivNV")); gpGetCombinerOutputParameterivNV == nil {
    NV_register_combiners = false
  }
  if gpGetCombinerStageParameterfvNV = (C.GPGETCOMBINERSTAGEPARAMETERFVNV)(getProcAddr("glGetCombinerStageParameterfvNV")); gpGetCombinerStageParameterfvNV == nil {
    NV_register_combiners2 = false
  }
  if gpGetCompressedMultiTexImageEXT = (C.GPGETCOMPRESSEDMULTITEXIMAGEEXT)(getProcAddr("glGetCompressedMultiTexImageEXT")); gpGetCompressedMultiTexImageEXT == nil {
    EXT_direct_state_access = false
  }
  if gpGetCompressedTexImage = (C.GPGETCOMPRESSEDTEXIMAGE)(getProcAddr("glGetCompressedTexImage")); gpGetCompressedTexImage == nil {
    return errors.New("glGetCompressedTexImage")
  }
  if gpGetCompressedTexImageARB = (C.GPGETCOMPRESSEDTEXIMAGEARB)(getProcAddr("glGetCompressedTexImageARB")); gpGetCompressedTexImageARB == nil {
    ARB_texture_compression = false
  }
  if gpGetCompressedTextureImageEXT = (C.GPGETCOMPRESSEDTEXTUREIMAGEEXT)(getProcAddr("glGetCompressedTextureImageEXT")); gpGetCompressedTextureImageEXT == nil {
    EXT_direct_state_access = false
  }
  if gpGetConvolutionFilterEXT = (C.GPGETCONVOLUTIONFILTEREXT)(getProcAddr("glGetConvolutionFilterEXT")); gpGetConvolutionFilterEXT == nil {
    EXT_convolution = false
  }
  if gpGetConvolutionParameterfvEXT = (C.GPGETCONVOLUTIONPARAMETERFVEXT)(getProcAddr("glGetConvolutionParameterfvEXT")); gpGetConvolutionParameterfvEXT == nil {
    EXT_convolution = false
  }
  if gpGetConvolutionParameterivEXT = (C.GPGETCONVOLUTIONPARAMETERIVEXT)(getProcAddr("glGetConvolutionParameterivEXT")); gpGetConvolutionParameterivEXT == nil {
    EXT_convolution = false
  }
  if gpGetConvolutionParameterxvOES = (C.GPGETCONVOLUTIONPARAMETERXVOES)(getProcAddr("glGetConvolutionParameterxvOES")); gpGetConvolutionParameterxvOES == nil {
    OES_fixed_point = false
  }
  if gpGetDebugMessageLog = (C.GPGETDEBUGMESSAGELOG)(getProcAddr("glGetDebugMessageLog")); gpGetDebugMessageLog == nil {
    KHR_debug = false
  }
  if gpGetDebugMessageLogAMD = (C.GPGETDEBUGMESSAGELOGAMD)(getProcAddr("glGetDebugMessageLogAMD")); gpGetDebugMessageLogAMD == nil {
    AMD_debug_output = false
  }
  if gpGetDebugMessageLogARB = (C.GPGETDEBUGMESSAGELOGARB)(getProcAddr("glGetDebugMessageLogARB")); gpGetDebugMessageLogARB == nil {
    ARB_debug_output = false
  }
  if gpGetDebugMessageLogKHR = (C.GPGETDEBUGMESSAGELOGKHR)(getProcAddr("glGetDebugMessageLogKHR")); gpGetDebugMessageLogKHR == nil {
    KHR_debug = false
  }
  if gpGetDetailTexFuncSGIS = (C.GPGETDETAILTEXFUNCSGIS)(getProcAddr("glGetDetailTexFuncSGIS")); gpGetDetailTexFuncSGIS == nil {
    SGIS_detail_texture = false
  }
  if gpGetDoubleIndexedvEXT = (C.GPGETDOUBLEINDEXEDVEXT)(getProcAddr("glGetDoubleIndexedvEXT")); gpGetDoubleIndexedvEXT == nil {
    EXT_direct_state_access = false
  }
  if gpGetDoublei_v = (C.GPGETDOUBLEI_V)(getProcAddr("glGetDoublei_v")); gpGetDoublei_v == nil {
    ARB_viewport_array = false
  }
  if gpGetDoublei_vEXT = (C.GPGETDOUBLEI_VEXT)(getProcAddr("glGetDoublei_vEXT")); gpGetDoublei_vEXT == nil {
    EXT_direct_state_access = false
  }
  if gpGetDoublev = (C.GPGETDOUBLEV)(getProcAddr("glGetDoublev")); gpGetDoublev == nil {
    return errors.New("glGetDoublev")
  }
  if gpGetError = (C.GPGETERROR)(getProcAddr("glGetError")); gpGetError == nil {
    return errors.New("glGetError")
  }
  if gpGetFenceivNV = (C.GPGETFENCEIVNV)(getProcAddr("glGetFenceivNV")); gpGetFenceivNV == nil {
    NV_fence = false
  }
  if gpGetFinalCombinerInputParameterfvNV = (C.GPGETFINALCOMBINERINPUTPARAMETERFVNV)(getProcAddr("glGetFinalCombinerInputParameterfvNV")); gpGetFinalCombinerInputParameterfvNV == nil {
    NV_register_combiners = false
  }
  if gpGetFinalCombinerInputParameterivNV = (C.GPGETFINALCOMBINERINPUTPARAMETERIVNV)(getProcAddr("glGetFinalCombinerInputParameterivNV")); gpGetFinalCombinerInputParameterivNV == nil {
    NV_register_combiners = false
  }
  if gpGetFirstPerfQueryIdINTEL = (C.GPGETFIRSTPERFQUERYIDINTEL)(getProcAddr("glGetFirstPerfQueryIdINTEL")); gpGetFirstPerfQueryIdINTEL == nil {
    INTEL_performance_query = false
  }
  if gpGetFixedvOES = (C.GPGETFIXEDVOES)(getProcAddr("glGetFixedvOES")); gpGetFixedvOES == nil {
    OES_fixed_point = false
  }
  if gpGetFloatIndexedvEXT = (C.GPGETFLOATINDEXEDVEXT)(getProcAddr("glGetFloatIndexedvEXT")); gpGetFloatIndexedvEXT == nil {
    EXT_direct_state_access = false
  }
  if gpGetFloati_v = (C.GPGETFLOATI_V)(getProcAddr("glGetFloati_v")); gpGetFloati_v == nil {
    ARB_viewport_array = false
  }
  if gpGetFloati_vEXT = (C.GPGETFLOATI_VEXT)(getProcAddr("glGetFloati_vEXT")); gpGetFloati_vEXT == nil {
    EXT_direct_state_access = false
  }
  if gpGetFloatv = (C.GPGETFLOATV)(getProcAddr("glGetFloatv")); gpGetFloatv == nil {
    return errors.New("glGetFloatv")
  }
  if gpGetFogFuncSGIS = (C.GPGETFOGFUNCSGIS)(getProcAddr("glGetFogFuncSGIS")); gpGetFogFuncSGIS == nil {
    SGIS_fog_function = false
  }
  if gpGetFragDataIndex = (C.GPGETFRAGDATAINDEX)(getProcAddr("glGetFragDataIndex")); gpGetFragDataIndex == nil {
    ARB_blend_func_extended = false
    return errors.New("glGetFragDataIndex")
  }
  if gpGetFragDataLocation = (C.GPGETFRAGDATALOCATION)(getProcAddr("glGetFragDataLocation")); gpGetFragDataLocation == nil {
    return errors.New("glGetFragDataLocation")
  }
  if gpGetFragDataLocationEXT = (C.GPGETFRAGDATALOCATIONEXT)(getProcAddr("glGetFragDataLocationEXT")); gpGetFragDataLocationEXT == nil {
    EXT_gpu_shader4 = false
  }
  if gpGetFragmentLightfvSGIX = (C.GPGETFRAGMENTLIGHTFVSGIX)(getProcAddr("glGetFragmentLightfvSGIX")); gpGetFragmentLightfvSGIX == nil {
    SGIX_fragment_lighting = false
  }
  if gpGetFragmentLightivSGIX = (C.GPGETFRAGMENTLIGHTIVSGIX)(getProcAddr("glGetFragmentLightivSGIX")); gpGetFragmentLightivSGIX == nil {
    SGIX_fragment_lighting = false
  }
  if gpGetFragmentMaterialfvSGIX = (C.GPGETFRAGMENTMATERIALFVSGIX)(getProcAddr("glGetFragmentMaterialfvSGIX")); gpGetFragmentMaterialfvSGIX == nil {
    SGIX_fragment_lighting = false
  }
  if gpGetFragmentMaterialivSGIX = (C.GPGETFRAGMENTMATERIALIVSGIX)(getProcAddr("glGetFragmentMaterialivSGIX")); gpGetFragmentMaterialivSGIX == nil {
    SGIX_fragment_lighting = false
  }
  if gpGetFramebufferAttachmentParameteriv = (C.GPGETFRAMEBUFFERATTACHMENTPARAMETERIV)(getProcAddr("glGetFramebufferAttachmentParameteriv")); gpGetFramebufferAttachmentParameteriv == nil {
    ARB_framebuffer_object = false
    return errors.New("glGetFramebufferAttachmentParameteriv")
  }
  if gpGetFramebufferAttachmentParameterivEXT = (C.GPGETFRAMEBUFFERATTACHMENTPARAMETERIVEXT)(getProcAddr("glGetFramebufferAttachmentParameterivEXT")); gpGetFramebufferAttachmentParameterivEXT == nil {
    EXT_framebuffer_object = false
  }
  if gpGetFramebufferParameteriv = (C.GPGETFRAMEBUFFERPARAMETERIV)(getProcAddr("glGetFramebufferParameteriv")); gpGetFramebufferParameteriv == nil {
    ARB_framebuffer_no_attachments = false
  }
  if gpGetFramebufferParameterivEXT = (C.GPGETFRAMEBUFFERPARAMETERIVEXT)(getProcAddr("glGetFramebufferParameterivEXT")); gpGetFramebufferParameterivEXT == nil {
    EXT_direct_state_access = false
  }
  if gpGetGraphicsResetStatusARB = (C.GPGETGRAPHICSRESETSTATUSARB)(getProcAddr("glGetGraphicsResetStatusARB")); gpGetGraphicsResetStatusARB == nil {
    ARB_robustness = false
  }
  if gpGetHandleARB = (C.GPGETHANDLEARB)(getProcAddr("glGetHandleARB")); gpGetHandleARB == nil {
    ARB_shader_objects = false
  }
  if gpGetHistogramEXT = (C.GPGETHISTOGRAMEXT)(getProcAddr("glGetHistogramEXT")); gpGetHistogramEXT == nil {
    EXT_histogram = false
  }
  if gpGetHistogramParameterfvEXT = (C.GPGETHISTOGRAMPARAMETERFVEXT)(getProcAddr("glGetHistogramParameterfvEXT")); gpGetHistogramParameterfvEXT == nil {
    EXT_histogram = false
  }
  if gpGetHistogramParameterivEXT = (C.GPGETHISTOGRAMPARAMETERIVEXT)(getProcAddr("glGetHistogramParameterivEXT")); gpGetHistogramParameterivEXT == nil {
    EXT_histogram = false
  }
  if gpGetHistogramParameterxvOES = (C.GPGETHISTOGRAMPARAMETERXVOES)(getProcAddr("glGetHistogramParameterxvOES")); gpGetHistogramParameterxvOES == nil {
    OES_fixed_point = false
  }
  if gpGetImageHandleARB = (C.GPGETIMAGEHANDLEARB)(getProcAddr("glGetImageHandleARB")); gpGetImageHandleARB == nil {
    ARB_bindless_texture = false
  }
  if gpGetImageHandleNV = (C.GPGETIMAGEHANDLENV)(getProcAddr("glGetImageHandleNV")); gpGetImageHandleNV == nil {
    NV_bindless_texture = false
  }
  if gpGetImageTransformParameterfvHP = (C.GPGETIMAGETRANSFORMPARAMETERFVHP)(getProcAddr("glGetImageTransformParameterfvHP")); gpGetImageTransformParameterfvHP == nil {
    HP_image_transform = false
  }
  if gpGetImageTransformParameterivHP = (C.GPGETIMAGETRANSFORMPARAMETERIVHP)(getProcAddr("glGetImageTransformParameterivHP")); gpGetImageTransformParameterivHP == nil {
    HP_image_transform = false
  }
  if gpGetInfoLogARB = (C.GPGETINFOLOGARB)(getProcAddr("glGetInfoLogARB")); gpGetInfoLogARB == nil {
    ARB_shader_objects = false
  }
  if gpGetInstrumentsSGIX = (C.GPGETINSTRUMENTSSGIX)(getProcAddr("glGetInstrumentsSGIX")); gpGetInstrumentsSGIX == nil {
    SGIX_instruments = false
  }
  if gpGetInteger64i_v = (C.GPGETINTEGER64I_V)(getProcAddr("glGetInteger64i_v")); gpGetInteger64i_v == nil {
    return errors.New("glGetInteger64i_v")
  }
  if gpGetInteger64v = (C.GPGETINTEGER64V)(getProcAddr("glGetInteger64v")); gpGetInteger64v == nil {
    ARB_sync = false
    return errors.New("glGetInteger64v")
  }
  if gpGetIntegerIndexedvEXT = (C.GPGETINTEGERINDEXEDVEXT)(getProcAddr("glGetIntegerIndexedvEXT")); gpGetIntegerIndexedvEXT == nil {
    EXT_direct_state_access = false
    EXT_draw_buffers2 = false
  }
  if gpGetIntegeri_v = (C.GPGETINTEGERI_V)(getProcAddr("glGetIntegeri_v")); gpGetIntegeri_v == nil {
    return errors.New("glGetIntegeri_v")
  }
  if gpGetIntegerui64i_vNV = (C.GPGETINTEGERUI64I_VNV)(getProcAddr("glGetIntegerui64i_vNV")); gpGetIntegerui64i_vNV == nil {
    NV_vertex_buffer_unified_memory = false
  }
  if gpGetIntegerui64vNV = (C.GPGETINTEGERUI64VNV)(getProcAddr("glGetIntegerui64vNV")); gpGetIntegerui64vNV == nil {
    NV_shader_buffer_load = false
  }
  if gpGetIntegerv = (C.GPGETINTEGERV)(getProcAddr("glGetIntegerv")); gpGetIntegerv == nil {
    return errors.New("glGetIntegerv")
  }
  if gpGetInternalformati64v = (C.GPGETINTERNALFORMATI64V)(getProcAddr("glGetInternalformati64v")); gpGetInternalformati64v == nil {
    ARB_internalformat_query2 = false
  }
  if gpGetInternalformativ = (C.GPGETINTERNALFORMATIV)(getProcAddr("glGetInternalformativ")); gpGetInternalformativ == nil {
    ARB_internalformat_query = false
  }
  if gpGetInvariantBooleanvEXT = (C.GPGETINVARIANTBOOLEANVEXT)(getProcAddr("glGetInvariantBooleanvEXT")); gpGetInvariantBooleanvEXT == nil {
    EXT_vertex_shader = false
  }
  if gpGetInvariantFloatvEXT = (C.GPGETINVARIANTFLOATVEXT)(getProcAddr("glGetInvariantFloatvEXT")); gpGetInvariantFloatvEXT == nil {
    EXT_vertex_shader = false
  }
  if gpGetInvariantIntegervEXT = (C.GPGETINVARIANTINTEGERVEXT)(getProcAddr("glGetInvariantIntegervEXT")); gpGetInvariantIntegervEXT == nil {
    EXT_vertex_shader = false
  }
  if gpGetLightxOES = (C.GPGETLIGHTXOES)(getProcAddr("glGetLightxOES")); gpGetLightxOES == nil {
    OES_fixed_point = false
  }
  if gpGetLightxvOES = (C.GPGETLIGHTXVOES)(getProcAddr("glGetLightxvOES")); gpGetLightxvOES == nil {
    OES_fixed_point = false
  }
  if gpGetListParameterfvSGIX = (C.GPGETLISTPARAMETERFVSGIX)(getProcAddr("glGetListParameterfvSGIX")); gpGetListParameterfvSGIX == nil {
    SGIX_list_priority = false
  }
  if gpGetListParameterivSGIX = (C.GPGETLISTPARAMETERIVSGIX)(getProcAddr("glGetListParameterivSGIX")); gpGetListParameterivSGIX == nil {
    SGIX_list_priority = false
  }
  if gpGetLocalConstantBooleanvEXT = (C.GPGETLOCALCONSTANTBOOLEANVEXT)(getProcAddr("glGetLocalConstantBooleanvEXT")); gpGetLocalConstantBooleanvEXT == nil {
    EXT_vertex_shader = false
  }
  if gpGetLocalConstantFloatvEXT = (C.GPGETLOCALCONSTANTFLOATVEXT)(getProcAddr("glGetLocalConstantFloatvEXT")); gpGetLocalConstantFloatvEXT == nil {
    EXT_vertex_shader = false
  }
  if gpGetLocalConstantIntegervEXT = (C.GPGETLOCALCONSTANTINTEGERVEXT)(getProcAddr("glGetLocalConstantIntegervEXT")); gpGetLocalConstantIntegervEXT == nil {
    EXT_vertex_shader = false
  }
  if gpGetMapAttribParameterfvNV = (C.GPGETMAPATTRIBPARAMETERFVNV)(getProcAddr("glGetMapAttribParameterfvNV")); gpGetMapAttribParameterfvNV == nil {
    NV_evaluators = false
  }
  if gpGetMapAttribParameterivNV = (C.GPGETMAPATTRIBPARAMETERIVNV)(getProcAddr("glGetMapAttribParameterivNV")); gpGetMapAttribParameterivNV == nil {
    NV_evaluators = false
  }
  if gpGetMapControlPointsNV = (C.GPGETMAPCONTROLPOINTSNV)(getProcAddr("glGetMapControlPointsNV")); gpGetMapControlPointsNV == nil {
    NV_evaluators = false
  }
  if gpGetMapParameterfvNV = (C.GPGETMAPPARAMETERFVNV)(getProcAddr("glGetMapParameterfvNV")); gpGetMapParameterfvNV == nil {
    NV_evaluators = false
  }
  if gpGetMapParameterivNV = (C.GPGETMAPPARAMETERIVNV)(getProcAddr("glGetMapParameterivNV")); gpGetMapParameterivNV == nil {
    NV_evaluators = false
  }
  if gpGetMapxvOES = (C.GPGETMAPXVOES)(getProcAddr("glGetMapxvOES")); gpGetMapxvOES == nil {
    OES_fixed_point = false
  }
  if gpGetMaterialxOES = (C.GPGETMATERIALXOES)(getProcAddr("glGetMaterialxOES")); gpGetMaterialxOES == nil {
    OES_fixed_point = false
  }
  if gpGetMaterialxvOES = (C.GPGETMATERIALXVOES)(getProcAddr("glGetMaterialxvOES")); gpGetMaterialxvOES == nil {
    OES_fixed_point = false
  }
  if gpGetMinmaxEXT = (C.GPGETMINMAXEXT)(getProcAddr("glGetMinmaxEXT")); gpGetMinmaxEXT == nil {
    EXT_histogram = false
  }
  if gpGetMinmaxParameterfvEXT = (C.GPGETMINMAXPARAMETERFVEXT)(getProcAddr("glGetMinmaxParameterfvEXT")); gpGetMinmaxParameterfvEXT == nil {
    EXT_histogram = false
  }
  if gpGetMinmaxParameterivEXT = (C.GPGETMINMAXPARAMETERIVEXT)(getProcAddr("glGetMinmaxParameterivEXT")); gpGetMinmaxParameterivEXT == nil {
    EXT_histogram = false
  }
  if gpGetMultiTexEnvfvEXT = (C.GPGETMULTITEXENVFVEXT)(getProcAddr("glGetMultiTexEnvfvEXT")); gpGetMultiTexEnvfvEXT == nil {
    EXT_direct_state_access = false
  }
  if gpGetMultiTexEnvivEXT = (C.GPGETMULTITEXENVIVEXT)(getProcAddr("glGetMultiTexEnvivEXT")); gpGetMultiTexEnvivEXT == nil {
    EXT_direct_state_access = false
  }
  if gpGetMultiTexGendvEXT = (C.GPGETMULTITEXGENDVEXT)(getProcAddr("glGetMultiTexGendvEXT")); gpGetMultiTexGendvEXT == nil {
    EXT_direct_state_access = false
  }
  if gpGetMultiTexGenfvEXT = (C.GPGETMULTITEXGENFVEXT)(getProcAddr("glGetMultiTexGenfvEXT")); gpGetMultiTexGenfvEXT == nil {
    EXT_direct_state_access = false
  }
  if gpGetMultiTexGenivEXT = (C.GPGETMULTITEXGENIVEXT)(getProcAddr("glGetMultiTexGenivEXT")); gpGetMultiTexGenivEXT == nil {
    EXT_direct_state_access = false
  }
  if gpGetMultiTexImageEXT = (C.GPGETMULTITEXIMAGEEXT)(getProcAddr("glGetMultiTexImageEXT")); gpGetMultiTexImageEXT == nil {
    EXT_direct_state_access = false
  }
  if gpGetMultiTexLevelParameterfvEXT = (C.GPGETMULTITEXLEVELPARAMETERFVEXT)(getProcAddr("glGetMultiTexLevelParameterfvEXT")); gpGetMultiTexLevelParameterfvEXT == nil {
    EXT_direct_state_access = false
  }
  if gpGetMultiTexLevelParameterivEXT = (C.GPGETMULTITEXLEVELPARAMETERIVEXT)(getProcAddr("glGetMultiTexLevelParameterivEXT")); gpGetMultiTexLevelParameterivEXT == nil {
    EXT_direct_state_access = false
  }
  if gpGetMultiTexParameterIivEXT = (C.GPGETMULTITEXPARAMETERIIVEXT)(getProcAddr("glGetMultiTexParameterIivEXT")); gpGetMultiTexParameterIivEXT == nil {
    EXT_direct_state_access = false
  }
  if gpGetMultiTexParameterIuivEXT = (C.GPGETMULTITEXPARAMETERIUIVEXT)(getProcAddr("glGetMultiTexParameterIuivEXT")); gpGetMultiTexParameterIuivEXT == nil {
    EXT_direct_state_access = false
  }
  if gpGetMultiTexParameterfvEXT = (C.GPGETMULTITEXPARAMETERFVEXT)(getProcAddr("glGetMultiTexParameterfvEXT")); gpGetMultiTexParameterfvEXT == nil {
    EXT_direct_state_access = false
  }
  if gpGetMultiTexParameterivEXT = (C.GPGETMULTITEXPARAMETERIVEXT)(getProcAddr("glGetMultiTexParameterivEXT")); gpGetMultiTexParameterivEXT == nil {
    EXT_direct_state_access = false
  }
  if gpGetMultisamplefv = (C.GPGETMULTISAMPLEFV)(getProcAddr("glGetMultisamplefv")); gpGetMultisamplefv == nil {
    ARB_texture_multisample = false
    return errors.New("glGetMultisamplefv")
  }
  if gpGetMultisamplefvNV = (C.GPGETMULTISAMPLEFVNV)(getProcAddr("glGetMultisamplefvNV")); gpGetMultisamplefvNV == nil {
    NV_explicit_multisample = false
  }
  if gpGetNamedBufferParameterivEXT = (C.GPGETNAMEDBUFFERPARAMETERIVEXT)(getProcAddr("glGetNamedBufferParameterivEXT")); gpGetNamedBufferParameterivEXT == nil {
    EXT_direct_state_access = false
  }
  if gpGetNamedBufferParameterui64vNV = (C.GPGETNAMEDBUFFERPARAMETERUI64VNV)(getProcAddr("glGetNamedBufferParameterui64vNV")); gpGetNamedBufferParameterui64vNV == nil {
    NV_shader_buffer_load = false
  }
  if gpGetNamedBufferPointervEXT = (C.GPGETNAMEDBUFFERPOINTERVEXT)(getProcAddr("glGetNamedBufferPointervEXT")); gpGetNamedBufferPointervEXT == nil {
    EXT_direct_state_access = false
  }
  if gpGetNamedBufferSubDataEXT = (C.GPGETNAMEDBUFFERSUBDATAEXT)(getProcAddr("glGetNamedBufferSubDataEXT")); gpGetNamedBufferSubDataEXT == nil {
    EXT_direct_state_access = false
  }
  if gpGetNamedFramebufferAttachmentParameterivEXT = (C.GPGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXT)(getProcAddr("glGetNamedFramebufferAttachmentParameterivEXT")); gpGetNamedFramebufferAttachmentParameterivEXT == nil {
    EXT_direct_state_access = false
  }
  if gpGetNamedFramebufferParameterivEXT = (C.GPGETNAMEDFRAMEBUFFERPARAMETERIVEXT)(getProcAddr("glGetNamedFramebufferParameterivEXT")); gpGetNamedFramebufferParameterivEXT == nil {
    EXT_direct_state_access = false
  }
  if gpGetNamedProgramLocalParameterIivEXT = (C.GPGETNAMEDPROGRAMLOCALPARAMETERIIVEXT)(getProcAddr("glGetNamedProgramLocalParameterIivEXT")); gpGetNamedProgramLocalParameterIivEXT == nil {
    EXT_direct_state_access = false
  }
  if gpGetNamedProgramLocalParameterIuivEXT = (C.GPGETNAMEDPROGRAMLOCALPARAMETERIUIVEXT)(getProcAddr("glGetNamedProgramLocalParameterIuivEXT")); gpGetNamedProgramLocalParameterIuivEXT == nil {
    EXT_direct_state_access = false
  }
  if gpGetNamedProgramLocalParameterdvEXT = (C.GPGETNAMEDPROGRAMLOCALPARAMETERDVEXT)(getProcAddr("glGetNamedProgramLocalParameterdvEXT")); gpGetNamedProgramLocalParameterdvEXT == nil {
    EXT_direct_state_access = false
  }
  if gpGetNamedProgramLocalParameterfvEXT = (C.GPGETNAMEDPROGRAMLOCALPARAMETERFVEXT)(getProcAddr("glGetNamedProgramLocalParameterfvEXT")); gpGetNamedProgramLocalParameterfvEXT == nil {
    EXT_direct_state_access = false
  }
  if gpGetNamedProgramStringEXT = (C.GPGETNAMEDPROGRAMSTRINGEXT)(getProcAddr("glGetNamedProgramStringEXT")); gpGetNamedProgramStringEXT == nil {
    EXT_direct_state_access = false
  }
  if gpGetNamedProgramivEXT = (C.GPGETNAMEDPROGRAMIVEXT)(getProcAddr("glGetNamedProgramivEXT")); gpGetNamedProgramivEXT == nil {
    EXT_direct_state_access = false
  }
  if gpGetNamedRenderbufferParameterivEXT = (C.GPGETNAMEDRENDERBUFFERPARAMETERIVEXT)(getProcAddr("glGetNamedRenderbufferParameterivEXT")); gpGetNamedRenderbufferParameterivEXT == nil {
    EXT_direct_state_access = false
  }
  if gpGetNamedStringARB = (C.GPGETNAMEDSTRINGARB)(getProcAddr("glGetNamedStringARB")); gpGetNamedStringARB == nil {
    ARB_shading_language_include = false
  }
  if gpGetNamedStringivARB = (C.GPGETNAMEDSTRINGIVARB)(getProcAddr("glGetNamedStringivARB")); gpGetNamedStringivARB == nil {
    ARB_shading_language_include = false
  }
  if gpGetNextPerfQueryIdINTEL = (C.GPGETNEXTPERFQUERYIDINTEL)(getProcAddr("glGetNextPerfQueryIdINTEL")); gpGetNextPerfQueryIdINTEL == nil {
    INTEL_performance_query = false
  }
  if gpGetObjectBufferfvATI = (C.GPGETOBJECTBUFFERFVATI)(getProcAddr("glGetObjectBufferfvATI")); gpGetObjectBufferfvATI == nil {
    ATI_vertex_array_object = false
  }
  if gpGetObjectBufferivATI = (C.GPGETOBJECTBUFFERIVATI)(getProcAddr("glGetObjectBufferivATI")); gpGetObjectBufferivATI == nil {
    ATI_vertex_array_object = false
  }
  if gpGetObjectLabel = (C.GPGETOBJECTLABEL)(getProcAddr("glGetObjectLabel")); gpGetObjectLabel == nil {
    KHR_debug = false
  }
  if gpGetObjectLabelEXT = (C.GPGETOBJECTLABELEXT)(getProcAddr("glGetObjectLabelEXT")); gpGetObjectLabelEXT == nil {
    EXT_debug_label = false
  }
  if gpGetObjectLabelKHR = (C.GPGETOBJECTLABELKHR)(getProcAddr("glGetObjectLabelKHR")); gpGetObjectLabelKHR == nil {
    KHR_debug = false
  }
  if gpGetObjectParameterfvARB = (C.GPGETOBJECTPARAMETERFVARB)(getProcAddr("glGetObjectParameterfvARB")); gpGetObjectParameterfvARB == nil {
    ARB_shader_objects = false
  }
  if gpGetObjectParameterivAPPLE = (C.GPGETOBJECTPARAMETERIVAPPLE)(getProcAddr("glGetObjectParameterivAPPLE")); gpGetObjectParameterivAPPLE == nil {
    APPLE_object_purgeable = false
  }
  if gpGetObjectParameterivARB = (C.GPGETOBJECTPARAMETERIVARB)(getProcAddr("glGetObjectParameterivARB")); gpGetObjectParameterivARB == nil {
    ARB_shader_objects = false
  }
  if gpGetObjectPtrLabel = (C.GPGETOBJECTPTRLABEL)(getProcAddr("glGetObjectPtrLabel")); gpGetObjectPtrLabel == nil {
    KHR_debug = false
  }
  if gpGetObjectPtrLabelKHR = (C.GPGETOBJECTPTRLABELKHR)(getProcAddr("glGetObjectPtrLabelKHR")); gpGetObjectPtrLabelKHR == nil {
    KHR_debug = false
  }
  if gpGetOcclusionQueryivNV = (C.GPGETOCCLUSIONQUERYIVNV)(getProcAddr("glGetOcclusionQueryivNV")); gpGetOcclusionQueryivNV == nil {
    NV_occlusion_query = false
  }
  if gpGetOcclusionQueryuivNV = (C.GPGETOCCLUSIONQUERYUIVNV)(getProcAddr("glGetOcclusionQueryuivNV")); gpGetOcclusionQueryuivNV == nil {
    NV_occlusion_query = false
  }
  if gpGetPathColorGenfvNV = (C.GPGETPATHCOLORGENFVNV)(getProcAddr("glGetPathColorGenfvNV")); gpGetPathColorGenfvNV == nil {
    NV_path_rendering = false
  }
  if gpGetPathColorGenivNV = (C.GPGETPATHCOLORGENIVNV)(getProcAddr("glGetPathColorGenivNV")); gpGetPathColorGenivNV == nil {
    NV_path_rendering = false
  }
  if gpGetPathCommandsNV = (C.GPGETPATHCOMMANDSNV)(getProcAddr("glGetPathCommandsNV")); gpGetPathCommandsNV == nil {
    NV_path_rendering = false
  }
  if gpGetPathCoordsNV = (C.GPGETPATHCOORDSNV)(getProcAddr("glGetPathCoordsNV")); gpGetPathCoordsNV == nil {
    NV_path_rendering = false
  }
  if gpGetPathDashArrayNV = (C.GPGETPATHDASHARRAYNV)(getProcAddr("glGetPathDashArrayNV")); gpGetPathDashArrayNV == nil {
    NV_path_rendering = false
  }
  if gpGetPathLengthNV = (C.GPGETPATHLENGTHNV)(getProcAddr("glGetPathLengthNV")); gpGetPathLengthNV == nil {
    NV_path_rendering = false
  }
  if gpGetPathMetricRangeNV = (C.GPGETPATHMETRICRANGENV)(getProcAddr("glGetPathMetricRangeNV")); gpGetPathMetricRangeNV == nil {
    NV_path_rendering = false
  }
  if gpGetPathMetricsNV = (C.GPGETPATHMETRICSNV)(getProcAddr("glGetPathMetricsNV")); gpGetPathMetricsNV == nil {
    NV_path_rendering = false
  }
  if gpGetPathParameterfvNV = (C.GPGETPATHPARAMETERFVNV)(getProcAddr("glGetPathParameterfvNV")); gpGetPathParameterfvNV == nil {
    NV_path_rendering = false
  }
  if gpGetPathParameterivNV = (C.GPGETPATHPARAMETERIVNV)(getProcAddr("glGetPathParameterivNV")); gpGetPathParameterivNV == nil {
    NV_path_rendering = false
  }
  if gpGetPathSpacingNV = (C.GPGETPATHSPACINGNV)(getProcAddr("glGetPathSpacingNV")); gpGetPathSpacingNV == nil {
    NV_path_rendering = false
  }
  if gpGetPathTexGenfvNV = (C.GPGETPATHTEXGENFVNV)(getProcAddr("glGetPathTexGenfvNV")); gpGetPathTexGenfvNV == nil {
    NV_path_rendering = false
  }
  if gpGetPathTexGenivNV = (C.GPGETPATHTEXGENIVNV)(getProcAddr("glGetPathTexGenivNV")); gpGetPathTexGenivNV == nil {
    NV_path_rendering = false
  }
  if gpGetPerfCounterInfoINTEL = (C.GPGETPERFCOUNTERINFOINTEL)(getProcAddr("glGetPerfCounterInfoINTEL")); gpGetPerfCounterInfoINTEL == nil {
    INTEL_performance_query = false
  }
  if gpGetPerfMonitorCounterDataAMD = (C.GPGETPERFMONITORCOUNTERDATAAMD)(getProcAddr("glGetPerfMonitorCounterDataAMD")); gpGetPerfMonitorCounterDataAMD == nil {
    AMD_performance_monitor = false
  }
  if gpGetPerfMonitorCounterInfoAMD = (C.GPGETPERFMONITORCOUNTERINFOAMD)(getProcAddr("glGetPerfMonitorCounterInfoAMD")); gpGetPerfMonitorCounterInfoAMD == nil {
    AMD_performance_monitor = false
  }
  if gpGetPerfMonitorCounterStringAMD = (C.GPGETPERFMONITORCOUNTERSTRINGAMD)(getProcAddr("glGetPerfMonitorCounterStringAMD")); gpGetPerfMonitorCounterStringAMD == nil {
    AMD_performance_monitor = false
  }
  if gpGetPerfMonitorCountersAMD = (C.GPGETPERFMONITORCOUNTERSAMD)(getProcAddr("glGetPerfMonitorCountersAMD")); gpGetPerfMonitorCountersAMD == nil {
    AMD_performance_monitor = false
  }
  if gpGetPerfMonitorGroupStringAMD = (C.GPGETPERFMONITORGROUPSTRINGAMD)(getProcAddr("glGetPerfMonitorGroupStringAMD")); gpGetPerfMonitorGroupStringAMD == nil {
    AMD_performance_monitor = false
  }
  if gpGetPerfMonitorGroupsAMD = (C.GPGETPERFMONITORGROUPSAMD)(getProcAddr("glGetPerfMonitorGroupsAMD")); gpGetPerfMonitorGroupsAMD == nil {
    AMD_performance_monitor = false
  }
  if gpGetPerfQueryDataINTEL = (C.GPGETPERFQUERYDATAINTEL)(getProcAddr("glGetPerfQueryDataINTEL")); gpGetPerfQueryDataINTEL == nil {
    INTEL_performance_query = false
  }
  if gpGetPerfQueryIdByNameINTEL = (C.GPGETPERFQUERYIDBYNAMEINTEL)(getProcAddr("glGetPerfQueryIdByNameINTEL")); gpGetPerfQueryIdByNameINTEL == nil {
    INTEL_performance_query = false
  }
  if gpGetPerfQueryInfoINTEL = (C.GPGETPERFQUERYINFOINTEL)(getProcAddr("glGetPerfQueryInfoINTEL")); gpGetPerfQueryInfoINTEL == nil {
    INTEL_performance_query = false
  }
  if gpGetPixelMapxv = (C.GPGETPIXELMAPXV)(getProcAddr("glGetPixelMapxv")); gpGetPixelMapxv == nil {
    OES_fixed_point = false
  }
  if gpGetPixelTexGenParameterfvSGIS = (C.GPGETPIXELTEXGENPARAMETERFVSGIS)(getProcAddr("glGetPixelTexGenParameterfvSGIS")); gpGetPixelTexGenParameterfvSGIS == nil {
    SGIS_pixel_texture = false
  }
  if gpGetPixelTexGenParameterivSGIS = (C.GPGETPIXELTEXGENPARAMETERIVSGIS)(getProcAddr("glGetPixelTexGenParameterivSGIS")); gpGetPixelTexGenParameterivSGIS == nil {
    SGIS_pixel_texture = false
  }
  if gpGetPixelTransformParameterfvEXT = (C.GPGETPIXELTRANSFORMPARAMETERFVEXT)(getProcAddr("glGetPixelTransformParameterfvEXT")); gpGetPixelTransformParameterfvEXT == nil {
    EXT_pixel_transform = false
  }
  if gpGetPixelTransformParameterivEXT = (C.GPGETPIXELTRANSFORMPARAMETERIVEXT)(getProcAddr("glGetPixelTransformParameterivEXT")); gpGetPixelTransformParameterivEXT == nil {
    EXT_pixel_transform = false
  }
  if gpGetPointerIndexedvEXT = (C.GPGETPOINTERINDEXEDVEXT)(getProcAddr("glGetPointerIndexedvEXT")); gpGetPointerIndexedvEXT == nil {
    EXT_direct_state_access = false
  }
  if gpGetPointeri_vEXT = (C.GPGETPOINTERI_VEXT)(getProcAddr("glGetPointeri_vEXT")); gpGetPointeri_vEXT == nil {
    EXT_direct_state_access = false
  }
  if gpGetPointerv = (C.GPGETPOINTERV)(getProcAddr("glGetPointerv")); gpGetPointerv == nil {
    KHR_debug = false
  }
  if gpGetPointervEXT = (C.GPGETPOINTERVEXT)(getProcAddr("glGetPointervEXT")); gpGetPointervEXT == nil {
    EXT_vertex_array = false
  }
  if gpGetPointervKHR = (C.GPGETPOINTERVKHR)(getProcAddr("glGetPointervKHR")); gpGetPointervKHR == nil {
    KHR_debug = false
  }
  if gpGetProgramBinary = (C.GPGETPROGRAMBINARY)(getProcAddr("glGetProgramBinary")); gpGetProgramBinary == nil {
    ARB_get_program_binary = false
  }
  if gpGetProgramEnvParameterIivNV = (C.GPGETPROGRAMENVPARAMETERIIVNV)(getProcAddr("glGetProgramEnvParameterIivNV")); gpGetProgramEnvParameterIivNV == nil {
    NV_gpu_program4 = false
  }
  if gpGetProgramEnvParameterIuivNV = (C.GPGETPROGRAMENVPARAMETERIUIVNV)(getProcAddr("glGetProgramEnvParameterIuivNV")); gpGetProgramEnvParameterIuivNV == nil {
    NV_gpu_program4 = false
  }
  if gpGetProgramEnvParameterdvARB = (C.GPGETPROGRAMENVPARAMETERDVARB)(getProcAddr("glGetProgramEnvParameterdvARB")); gpGetProgramEnvParameterdvARB == nil {
    ARB_fragment_program = false
    ARB_vertex_program = false
  }
  if gpGetProgramEnvParameterfvARB = (C.GPGETPROGRAMENVPARAMETERFVARB)(getProcAddr("glGetProgramEnvParameterfvARB")); gpGetProgramEnvParameterfvARB == nil {
    ARB_fragment_program = false
    ARB_vertex_program = false
  }
  if gpGetProgramInfoLog = (C.GPGETPROGRAMINFOLOG)(getProcAddr("glGetProgramInfoLog")); gpGetProgramInfoLog == nil {
    return errors.New("glGetProgramInfoLog")
  }
  if gpGetProgramInterfaceiv = (C.GPGETPROGRAMINTERFACEIV)(getProcAddr("glGetProgramInterfaceiv")); gpGetProgramInterfaceiv == nil {
    ARB_program_interface_query = false
  }
  if gpGetProgramLocalParameterIivNV = (C.GPGETPROGRAMLOCALPARAMETERIIVNV)(getProcAddr("glGetProgramLocalParameterIivNV")); gpGetProgramLocalParameterIivNV == nil {
    NV_gpu_program4 = false
  }
  if gpGetProgramLocalParameterIuivNV = (C.GPGETPROGRAMLOCALPARAMETERIUIVNV)(getProcAddr("glGetProgramLocalParameterIuivNV")); gpGetProgramLocalParameterIuivNV == nil {
    NV_gpu_program4 = false
  }
  if gpGetProgramLocalParameterdvARB = (C.GPGETPROGRAMLOCALPARAMETERDVARB)(getProcAddr("glGetProgramLocalParameterdvARB")); gpGetProgramLocalParameterdvARB == nil {
    ARB_fragment_program = false
    ARB_vertex_program = false
  }
  if gpGetProgramLocalParameterfvARB = (C.GPGETPROGRAMLOCALPARAMETERFVARB)(getProcAddr("glGetProgramLocalParameterfvARB")); gpGetProgramLocalParameterfvARB == nil {
    ARB_fragment_program = false
    ARB_vertex_program = false
  }
  if gpGetProgramNamedParameterdvNV = (C.GPGETPROGRAMNAMEDPARAMETERDVNV)(getProcAddr("glGetProgramNamedParameterdvNV")); gpGetProgramNamedParameterdvNV == nil {
    NV_fragment_program = false
  }
  if gpGetProgramNamedParameterfvNV = (C.GPGETPROGRAMNAMEDPARAMETERFVNV)(getProcAddr("glGetProgramNamedParameterfvNV")); gpGetProgramNamedParameterfvNV == nil {
    NV_fragment_program = false
  }
  if gpGetProgramParameterdvNV = (C.GPGETPROGRAMPARAMETERDVNV)(getProcAddr("glGetProgramParameterdvNV")); gpGetProgramParameterdvNV == nil {
    NV_vertex_program = false
  }
  if gpGetProgramParameterfvNV = (C.GPGETPROGRAMPARAMETERFVNV)(getProcAddr("glGetProgramParameterfvNV")); gpGetProgramParameterfvNV == nil {
    NV_vertex_program = false
  }
  if gpGetProgramPipelineInfoLog = (C.GPGETPROGRAMPIPELINEINFOLOG)(getProcAddr("glGetProgramPipelineInfoLog")); gpGetProgramPipelineInfoLog == nil {
    ARB_separate_shader_objects = false
  }
  if gpGetProgramPipelineInfoLogEXT = (C.GPGETPROGRAMPIPELINEINFOLOGEXT)(getProcAddr("glGetProgramPipelineInfoLogEXT")); gpGetProgramPipelineInfoLogEXT == nil {
    EXT_separate_shader_objects = false
  }
  if gpGetProgramPipelineiv = (C.GPGETPROGRAMPIPELINEIV)(getProcAddr("glGetProgramPipelineiv")); gpGetProgramPipelineiv == nil {
    ARB_separate_shader_objects = false
  }
  if gpGetProgramPipelineivEXT = (C.GPGETPROGRAMPIPELINEIVEXT)(getProcAddr("glGetProgramPipelineivEXT")); gpGetProgramPipelineivEXT == nil {
    EXT_separate_shader_objects = false
  }
  if gpGetProgramResourceIndex = (C.GPGETPROGRAMRESOURCEINDEX)(getProcAddr("glGetProgramResourceIndex")); gpGetProgramResourceIndex == nil {
    ARB_program_interface_query = false
  }
  if gpGetProgramResourceLocation = (C.GPGETPROGRAMRESOURCELOCATION)(getProcAddr("glGetProgramResourceLocation")); gpGetProgramResourceLocation == nil {
    ARB_program_interface_query = false
  }
  if gpGetProgramResourceLocationIndex = (C.GPGETPROGRAMRESOURCELOCATIONINDEX)(getProcAddr("glGetProgramResourceLocationIndex")); gpGetProgramResourceLocationIndex == nil {
    ARB_program_interface_query = false
  }
  if gpGetProgramResourceName = (C.GPGETPROGRAMRESOURCENAME)(getProcAddr("glGetProgramResourceName")); gpGetProgramResourceName == nil {
    ARB_program_interface_query = false
  }
  if gpGetProgramResourceiv = (C.GPGETPROGRAMRESOURCEIV)(getProcAddr("glGetProgramResourceiv")); gpGetProgramResourceiv == nil {
    ARB_program_interface_query = false
  }
  if gpGetProgramStageiv = (C.GPGETPROGRAMSTAGEIV)(getProcAddr("glGetProgramStageiv")); gpGetProgramStageiv == nil {
    ARB_shader_subroutine = false
  }
  if gpGetProgramStringARB = (C.GPGETPROGRAMSTRINGARB)(getProcAddr("glGetProgramStringARB")); gpGetProgramStringARB == nil {
    ARB_fragment_program = false
    ARB_vertex_program = false
  }
  if gpGetProgramStringNV = (C.GPGETPROGRAMSTRINGNV)(getProcAddr("glGetProgramStringNV")); gpGetProgramStringNV == nil {
    NV_vertex_program = false
  }
  if gpGetProgramSubroutineParameteruivNV = (C.GPGETPROGRAMSUBROUTINEPARAMETERUIVNV)(getProcAddr("glGetProgramSubroutineParameteruivNV")); gpGetProgramSubroutineParameteruivNV == nil {
    NV_gpu_program5 = false
  }
  if gpGetProgramiv = (C.GPGETPROGRAMIV)(getProcAddr("glGetProgramiv")); gpGetProgramiv == nil {
    return errors.New("glGetProgramiv")
  }
  if gpGetProgramivARB = (C.GPGETPROGRAMIVARB)(getProcAddr("glGetProgramivARB")); gpGetProgramivARB == nil {
    ARB_fragment_program = false
    ARB_vertex_program = false
  }
  if gpGetProgramivNV = (C.GPGETPROGRAMIVNV)(getProcAddr("glGetProgramivNV")); gpGetProgramivNV == nil {
    NV_vertex_program = false
  }
  if gpGetQueryIndexediv = (C.GPGETQUERYINDEXEDIV)(getProcAddr("glGetQueryIndexediv")); gpGetQueryIndexediv == nil {
    ARB_transform_feedback3 = false
  }
  if gpGetQueryObjecti64v = (C.GPGETQUERYOBJECTI64V)(getProcAddr("glGetQueryObjecti64v")); gpGetQueryObjecti64v == nil {
    ARB_timer_query = false
    return errors.New("glGetQueryObjecti64v")
  }
  if gpGetQueryObjecti64vEXT = (C.GPGETQUERYOBJECTI64VEXT)(getProcAddr("glGetQueryObjecti64vEXT")); gpGetQueryObjecti64vEXT == nil {
    EXT_timer_query = false
  }
  if gpGetQueryObjectiv = (C.GPGETQUERYOBJECTIV)(getProcAddr("glGetQueryObjectiv")); gpGetQueryObjectiv == nil {
    return errors.New("glGetQueryObjectiv")
  }
  if gpGetQueryObjectivARB = (C.GPGETQUERYOBJECTIVARB)(getProcAddr("glGetQueryObjectivARB")); gpGetQueryObjectivARB == nil {
    ARB_occlusion_query = false
  }
  if gpGetQueryObjectui64v = (C.GPGETQUERYOBJECTUI64V)(getProcAddr("glGetQueryObjectui64v")); gpGetQueryObjectui64v == nil {
    ARB_timer_query = false
    return errors.New("glGetQueryObjectui64v")
  }
  if gpGetQueryObjectui64vEXT = (C.GPGETQUERYOBJECTUI64VEXT)(getProcAddr("glGetQueryObjectui64vEXT")); gpGetQueryObjectui64vEXT == nil {
    EXT_timer_query = false
  }
  if gpGetQueryObjectuiv = (C.GPGETQUERYOBJECTUIV)(getProcAddr("glGetQueryObjectuiv")); gpGetQueryObjectuiv == nil {
    return errors.New("glGetQueryObjectuiv")
  }
  if gpGetQueryObjectuivARB = (C.GPGETQUERYOBJECTUIVARB)(getProcAddr("glGetQueryObjectuivARB")); gpGetQueryObjectuivARB == nil {
    ARB_occlusion_query = false
  }
  if gpGetQueryiv = (C.GPGETQUERYIV)(getProcAddr("glGetQueryiv")); gpGetQueryiv == nil {
    return errors.New("glGetQueryiv")
  }
  if gpGetQueryivARB = (C.GPGETQUERYIVARB)(getProcAddr("glGetQueryivARB")); gpGetQueryivARB == nil {
    ARB_occlusion_query = false
  }
  if gpGetRenderbufferParameteriv = (C.GPGETRENDERBUFFERPARAMETERIV)(getProcAddr("glGetRenderbufferParameteriv")); gpGetRenderbufferParameteriv == nil {
    ARB_framebuffer_object = false
    return errors.New("glGetRenderbufferParameteriv")
  }
  if gpGetRenderbufferParameterivEXT = (C.GPGETRENDERBUFFERPARAMETERIVEXT)(getProcAddr("glGetRenderbufferParameterivEXT")); gpGetRenderbufferParameterivEXT == nil {
    EXT_framebuffer_object = false
  }
  if gpGetSamplerParameterIiv = (C.GPGETSAMPLERPARAMETERIIV)(getProcAddr("glGetSamplerParameterIiv")); gpGetSamplerParameterIiv == nil {
    ARB_sampler_objects = false
    return errors.New("glGetSamplerParameterIiv")
  }
  if gpGetSamplerParameterIuiv = (C.GPGETSAMPLERPARAMETERIUIV)(getProcAddr("glGetSamplerParameterIuiv")); gpGetSamplerParameterIuiv == nil {
    ARB_sampler_objects = false
    return errors.New("glGetSamplerParameterIuiv")
  }
  if gpGetSamplerParameterfv = (C.GPGETSAMPLERPARAMETERFV)(getProcAddr("glGetSamplerParameterfv")); gpGetSamplerParameterfv == nil {
    ARB_sampler_objects = false
    return errors.New("glGetSamplerParameterfv")
  }
  if gpGetSamplerParameteriv = (C.GPGETSAMPLERPARAMETERIV)(getProcAddr("glGetSamplerParameteriv")); gpGetSamplerParameteriv == nil {
    ARB_sampler_objects = false
    return errors.New("glGetSamplerParameteriv")
  }
  if gpGetSeparableFilterEXT = (C.GPGETSEPARABLEFILTEREXT)(getProcAddr("glGetSeparableFilterEXT")); gpGetSeparableFilterEXT == nil {
    EXT_convolution = false
  }
  if gpGetShaderInfoLog = (C.GPGETSHADERINFOLOG)(getProcAddr("glGetShaderInfoLog")); gpGetShaderInfoLog == nil {
    return errors.New("glGetShaderInfoLog")
  }
  if gpGetShaderPrecisionFormat = (C.GPGETSHADERPRECISIONFORMAT)(getProcAddr("glGetShaderPrecisionFormat")); gpGetShaderPrecisionFormat == nil {
    ARB_ES2_compatibility = false
  }
  if gpGetShaderSource = (C.GPGETSHADERSOURCE)(getProcAddr("glGetShaderSource")); gpGetShaderSource == nil {
    return errors.New("glGetShaderSource")
  }
  if gpGetShaderSourceARB = (C.GPGETSHADERSOURCEARB)(getProcAddr("glGetShaderSourceARB")); gpGetShaderSourceARB == nil {
    ARB_shader_objects = false
  }
  if gpGetShaderiv = (C.GPGETSHADERIV)(getProcAddr("glGetShaderiv")); gpGetShaderiv == nil {
    return errors.New("glGetShaderiv")
  }
  if gpGetSharpenTexFuncSGIS = (C.GPGETSHARPENTEXFUNCSGIS)(getProcAddr("glGetSharpenTexFuncSGIS")); gpGetSharpenTexFuncSGIS == nil {
    SGIS_sharpen_texture = false
  }
  if gpGetString = (C.GPGETSTRING)(getProcAddr("glGetString")); gpGetString == nil {
    return errors.New("glGetString")
  }
  if gpGetStringi = (C.GPGETSTRINGI)(getProcAddr("glGetStringi")); gpGetStringi == nil {
    return errors.New("glGetStringi")
  }
  if gpGetSubroutineIndex = (C.GPGETSUBROUTINEINDEX)(getProcAddr("glGetSubroutineIndex")); gpGetSubroutineIndex == nil {
    ARB_shader_subroutine = false
  }
  if gpGetSubroutineUniformLocation = (C.GPGETSUBROUTINEUNIFORMLOCATION)(getProcAddr("glGetSubroutineUniformLocation")); gpGetSubroutineUniformLocation == nil {
    ARB_shader_subroutine = false
  }
  if gpGetSynciv = (C.GPGETSYNCIV)(getProcAddr("glGetSynciv")); gpGetSynciv == nil {
    ARB_sync = false
    return errors.New("glGetSynciv")
  }
  if gpGetTexBumpParameterfvATI = (C.GPGETTEXBUMPPARAMETERFVATI)(getProcAddr("glGetTexBumpParameterfvATI")); gpGetTexBumpParameterfvATI == nil {
    ATI_envmap_bumpmap = false
  }
  if gpGetTexBumpParameterivATI = (C.GPGETTEXBUMPPARAMETERIVATI)(getProcAddr("glGetTexBumpParameterivATI")); gpGetTexBumpParameterivATI == nil {
    ATI_envmap_bumpmap = false
  }
  if gpGetTexEnvxvOES = (C.GPGETTEXENVXVOES)(getProcAddr("glGetTexEnvxvOES")); gpGetTexEnvxvOES == nil {
    OES_fixed_point = false
  }
  if gpGetTexFilterFuncSGIS = (C.GPGETTEXFILTERFUNCSGIS)(getProcAddr("glGetTexFilterFuncSGIS")); gpGetTexFilterFuncSGIS == nil {
    SGIS_texture_filter4 = false
  }
  if gpGetTexGenxvOES = (C.GPGETTEXGENXVOES)(getProcAddr("glGetTexGenxvOES")); gpGetTexGenxvOES == nil {
    OES_fixed_point = false
  }
  if gpGetTexImage = (C.GPGETTEXIMAGE)(getProcAddr("glGetTexImage")); gpGetTexImage == nil {
    return errors.New("glGetTexImage")
  }
  if gpGetTexLevelParameterfv = (C.GPGETTEXLEVELPARAMETERFV)(getProcAddr("glGetTexLevelParameterfv")); gpGetTexLevelParameterfv == nil {
    return errors.New("glGetTexLevelParameterfv")
  }
  if gpGetTexLevelParameteriv = (C.GPGETTEXLEVELPARAMETERIV)(getProcAddr("glGetTexLevelParameteriv")); gpGetTexLevelParameteriv == nil {
    return errors.New("glGetTexLevelParameteriv")
  }
  if gpGetTexLevelParameterxvOES = (C.GPGETTEXLEVELPARAMETERXVOES)(getProcAddr("glGetTexLevelParameterxvOES")); gpGetTexLevelParameterxvOES == nil {
    OES_fixed_point = false
  }
  if gpGetTexParameterIiv = (C.GPGETTEXPARAMETERIIV)(getProcAddr("glGetTexParameterIiv")); gpGetTexParameterIiv == nil {
    return errors.New("glGetTexParameterIiv")
  }
  if gpGetTexParameterIivEXT = (C.GPGETTEXPARAMETERIIVEXT)(getProcAddr("glGetTexParameterIivEXT")); gpGetTexParameterIivEXT == nil {
    EXT_texture_integer = false
  }
  if gpGetTexParameterIuiv = (C.GPGETTEXPARAMETERIUIV)(getProcAddr("glGetTexParameterIuiv")); gpGetTexParameterIuiv == nil {
    return errors.New("glGetTexParameterIuiv")
  }
  if gpGetTexParameterIuivEXT = (C.GPGETTEXPARAMETERIUIVEXT)(getProcAddr("glGetTexParameterIuivEXT")); gpGetTexParameterIuivEXT == nil {
    EXT_texture_integer = false
  }
  if gpGetTexParameterPointervAPPLE = (C.GPGETTEXPARAMETERPOINTERVAPPLE)(getProcAddr("glGetTexParameterPointervAPPLE")); gpGetTexParameterPointervAPPLE == nil {
    APPLE_texture_range = false
  }
  if gpGetTexParameterfv = (C.GPGETTEXPARAMETERFV)(getProcAddr("glGetTexParameterfv")); gpGetTexParameterfv == nil {
    return errors.New("glGetTexParameterfv")
  }
  if gpGetTexParameteriv = (C.GPGETTEXPARAMETERIV)(getProcAddr("glGetTexParameteriv")); gpGetTexParameteriv == nil {
    return errors.New("glGetTexParameteriv")
  }
  if gpGetTexParameterxvOES = (C.GPGETTEXPARAMETERXVOES)(getProcAddr("glGetTexParameterxvOES")); gpGetTexParameterxvOES == nil {
    OES_fixed_point = false
  }
  if gpGetTextureHandleARB = (C.GPGETTEXTUREHANDLEARB)(getProcAddr("glGetTextureHandleARB")); gpGetTextureHandleARB == nil {
    ARB_bindless_texture = false
  }
  if gpGetTextureHandleNV = (C.GPGETTEXTUREHANDLENV)(getProcAddr("glGetTextureHandleNV")); gpGetTextureHandleNV == nil {
    NV_bindless_texture = false
  }
  if gpGetTextureImageEXT = (C.GPGETTEXTUREIMAGEEXT)(getProcAddr("glGetTextureImageEXT")); gpGetTextureImageEXT == nil {
    EXT_direct_state_access = false
  }
  if gpGetTextureLevelParameterfvEXT = (C.GPGETTEXTURELEVELPARAMETERFVEXT)(getProcAddr("glGetTextureLevelParameterfvEXT")); gpGetTextureLevelParameterfvEXT == nil {
    EXT_direct_state_access = false
  }
  if gpGetTextureLevelParameterivEXT = (C.GPGETTEXTURELEVELPARAMETERIVEXT)(getProcAddr("glGetTextureLevelParameterivEXT")); gpGetTextureLevelParameterivEXT == nil {
    EXT_direct_state_access = false
  }
  if gpGetTextureParameterIivEXT = (C.GPGETTEXTUREPARAMETERIIVEXT)(getProcAddr("glGetTextureParameterIivEXT")); gpGetTextureParameterIivEXT == nil {
    EXT_direct_state_access = false
  }
  if gpGetTextureParameterIuivEXT = (C.GPGETTEXTUREPARAMETERIUIVEXT)(getProcAddr("glGetTextureParameterIuivEXT")); gpGetTextureParameterIuivEXT == nil {
    EXT_direct_state_access = false
  }
  if gpGetTextureParameterfvEXT = (C.GPGETTEXTUREPARAMETERFVEXT)(getProcAddr("glGetTextureParameterfvEXT")); gpGetTextureParameterfvEXT == nil {
    EXT_direct_state_access = false
  }
  if gpGetTextureParameterivEXT = (C.GPGETTEXTUREPARAMETERIVEXT)(getProcAddr("glGetTextureParameterivEXT")); gpGetTextureParameterivEXT == nil {
    EXT_direct_state_access = false
  }
  if gpGetTextureSamplerHandleARB = (C.GPGETTEXTURESAMPLERHANDLEARB)(getProcAddr("glGetTextureSamplerHandleARB")); gpGetTextureSamplerHandleARB == nil {
    ARB_bindless_texture = false
  }
  if gpGetTextureSamplerHandleNV = (C.GPGETTEXTURESAMPLERHANDLENV)(getProcAddr("glGetTextureSamplerHandleNV")); gpGetTextureSamplerHandleNV == nil {
    NV_bindless_texture = false
  }
  if gpGetTrackMatrixivNV = (C.GPGETTRACKMATRIXIVNV)(getProcAddr("glGetTrackMatrixivNV")); gpGetTrackMatrixivNV == nil {
    NV_vertex_program = false
  }
  if gpGetTransformFeedbackVarying = (C.GPGETTRANSFORMFEEDBACKVARYING)(getProcAddr("glGetTransformFeedbackVarying")); gpGetTransformFeedbackVarying == nil {
    return errors.New("glGetTransformFeedbackVarying")
  }
  if gpGetTransformFeedbackVaryingEXT = (C.GPGETTRANSFORMFEEDBACKVARYINGEXT)(getProcAddr("glGetTransformFeedbackVaryingEXT")); gpGetTransformFeedbackVaryingEXT == nil {
    EXT_transform_feedback = false
  }
  if gpGetTransformFeedbackVaryingNV = (C.GPGETTRANSFORMFEEDBACKVARYINGNV)(getProcAddr("glGetTransformFeedbackVaryingNV")); gpGetTransformFeedbackVaryingNV == nil {
    NV_transform_feedback = false
  }
  if gpGetUniformBlockIndex = (C.GPGETUNIFORMBLOCKINDEX)(getProcAddr("glGetUniformBlockIndex")); gpGetUniformBlockIndex == nil {
    ARB_uniform_buffer_object = false
    return errors.New("glGetUniformBlockIndex")
  }
  if gpGetUniformBufferSizeEXT = (C.GPGETUNIFORMBUFFERSIZEEXT)(getProcAddr("glGetUniformBufferSizeEXT")); gpGetUniformBufferSizeEXT == nil {
    EXT_bindable_uniform = false
  }
  if gpGetUniformIndices = (C.GPGETUNIFORMINDICES)(getProcAddr("glGetUniformIndices")); gpGetUniformIndices == nil {
    ARB_uniform_buffer_object = false
    return errors.New("glGetUniformIndices")
  }
  if gpGetUniformLocation = (C.GPGETUNIFORMLOCATION)(getProcAddr("glGetUniformLocation")); gpGetUniformLocation == nil {
    return errors.New("glGetUniformLocation")
  }
  if gpGetUniformLocationARB = (C.GPGETUNIFORMLOCATIONARB)(getProcAddr("glGetUniformLocationARB")); gpGetUniformLocationARB == nil {
    ARB_shader_objects = false
  }
  if gpGetUniformOffsetEXT = (C.GPGETUNIFORMOFFSETEXT)(getProcAddr("glGetUniformOffsetEXT")); gpGetUniformOffsetEXT == nil {
    EXT_bindable_uniform = false
  }
  if gpGetUniformSubroutineuiv = (C.GPGETUNIFORMSUBROUTINEUIV)(getProcAddr("glGetUniformSubroutineuiv")); gpGetUniformSubroutineuiv == nil {
    ARB_shader_subroutine = false
  }
  if gpGetUniformdv = (C.GPGETUNIFORMDV)(getProcAddr("glGetUniformdv")); gpGetUniformdv == nil {
    ARB_gpu_shader_fp64 = false
  }
  if gpGetUniformfv = (C.GPGETUNIFORMFV)(getProcAddr("glGetUniformfv")); gpGetUniformfv == nil {
    return errors.New("glGetUniformfv")
  }
  if gpGetUniformfvARB = (C.GPGETUNIFORMFVARB)(getProcAddr("glGetUniformfvARB")); gpGetUniformfvARB == nil {
    ARB_shader_objects = false
  }
  if gpGetUniformi64vNV = (C.GPGETUNIFORMI64VNV)(getProcAddr("glGetUniformi64vNV")); gpGetUniformi64vNV == nil {
    AMD_gpu_shader_int64 = false
    NV_gpu_shader5 = false
  }
  if gpGetUniformiv = (C.GPGETUNIFORMIV)(getProcAddr("glGetUniformiv")); gpGetUniformiv == nil {
    return errors.New("glGetUniformiv")
  }
  if gpGetUniformivARB = (C.GPGETUNIFORMIVARB)(getProcAddr("glGetUniformivARB")); gpGetUniformivARB == nil {
    ARB_shader_objects = false
  }
  if gpGetUniformui64vNV = (C.GPGETUNIFORMUI64VNV)(getProcAddr("glGetUniformui64vNV")); gpGetUniformui64vNV == nil {
    AMD_gpu_shader_int64 = false
    NV_shader_buffer_load = false
  }
  if gpGetUniformuiv = (C.GPGETUNIFORMUIV)(getProcAddr("glGetUniformuiv")); gpGetUniformuiv == nil {
    return errors.New("glGetUniformuiv")
  }
  if gpGetUniformuivEXT = (C.GPGETUNIFORMUIVEXT)(getProcAddr("glGetUniformuivEXT")); gpGetUniformuivEXT == nil {
    EXT_gpu_shader4 = false
  }
  if gpGetVariantArrayObjectfvATI = (C.GPGETVARIANTARRAYOBJECTFVATI)(getProcAddr("glGetVariantArrayObjectfvATI")); gpGetVariantArrayObjectfvATI == nil {
    ATI_vertex_array_object = false
  }
  if gpGetVariantArrayObjectivATI = (C.GPGETVARIANTARRAYOBJECTIVATI)(getProcAddr("glGetVariantArrayObjectivATI")); gpGetVariantArrayObjectivATI == nil {
    ATI_vertex_array_object = false
  }
  if gpGetVariantBooleanvEXT = (C.GPGETVARIANTBOOLEANVEXT)(getProcAddr("glGetVariantBooleanvEXT")); gpGetVariantBooleanvEXT == nil {
    EXT_vertex_shader = false
  }
  if gpGetVariantFloatvEXT = (C.GPGETVARIANTFLOATVEXT)(getProcAddr("glGetVariantFloatvEXT")); gpGetVariantFloatvEXT == nil {
    EXT_vertex_shader = false
  }
  if gpGetVariantIntegervEXT = (C.GPGETVARIANTINTEGERVEXT)(getProcAddr("glGetVariantIntegervEXT")); gpGetVariantIntegervEXT == nil {
    EXT_vertex_shader = false
  }
  if gpGetVariantPointervEXT = (C.GPGETVARIANTPOINTERVEXT)(getProcAddr("glGetVariantPointervEXT")); gpGetVariantPointervEXT == nil {
    EXT_vertex_shader = false
  }
  if gpGetVaryingLocationNV = (C.GPGETVARYINGLOCATIONNV)(getProcAddr("glGetVaryingLocationNV")); gpGetVaryingLocationNV == nil {
    NV_transform_feedback = false
  }
  if gpGetVertexArrayIntegeri_vEXT = (C.GPGETVERTEXARRAYINTEGERI_VEXT)(getProcAddr("glGetVertexArrayIntegeri_vEXT")); gpGetVertexArrayIntegeri_vEXT == nil {
    EXT_direct_state_access = false
  }
  if gpGetVertexArrayIntegervEXT = (C.GPGETVERTEXARRAYINTEGERVEXT)(getProcAddr("glGetVertexArrayIntegervEXT")); gpGetVertexArrayIntegervEXT == nil {
    EXT_direct_state_access = false
  }
  if gpGetVertexArrayPointeri_vEXT = (C.GPGETVERTEXARRAYPOINTERI_VEXT)(getProcAddr("glGetVertexArrayPointeri_vEXT")); gpGetVertexArrayPointeri_vEXT == nil {
    EXT_direct_state_access = false
  }
  if gpGetVertexArrayPointervEXT = (C.GPGETVERTEXARRAYPOINTERVEXT)(getProcAddr("glGetVertexArrayPointervEXT")); gpGetVertexArrayPointervEXT == nil {
    EXT_direct_state_access = false
  }
  if gpGetVertexAttribArrayObjectfvATI = (C.GPGETVERTEXATTRIBARRAYOBJECTFVATI)(getProcAddr("glGetVertexAttribArrayObjectfvATI")); gpGetVertexAttribArrayObjectfvATI == nil {
    ATI_vertex_attrib_array_object = false
  }
  if gpGetVertexAttribArrayObjectivATI = (C.GPGETVERTEXATTRIBARRAYOBJECTIVATI)(getProcAddr("glGetVertexAttribArrayObjectivATI")); gpGetVertexAttribArrayObjectivATI == nil {
    ATI_vertex_attrib_array_object = false
  }
  if gpGetVertexAttribIiv = (C.GPGETVERTEXATTRIBIIV)(getProcAddr("glGetVertexAttribIiv")); gpGetVertexAttribIiv == nil {
    return errors.New("glGetVertexAttribIiv")
  }
  if gpGetVertexAttribIivEXT = (C.GPGETVERTEXATTRIBIIVEXT)(getProcAddr("glGetVertexAttribIivEXT")); gpGetVertexAttribIivEXT == nil {
    NV_vertex_program4 = false
  }
  if gpGetVertexAttribIuiv = (C.GPGETVERTEXATTRIBIUIV)(getProcAddr("glGetVertexAttribIuiv")); gpGetVertexAttribIuiv == nil {
    return errors.New("glGetVertexAttribIuiv")
  }
  if gpGetVertexAttribIuivEXT = (C.GPGETVERTEXATTRIBIUIVEXT)(getProcAddr("glGetVertexAttribIuivEXT")); gpGetVertexAttribIuivEXT == nil {
    NV_vertex_program4 = false
  }
  if gpGetVertexAttribLdv = (C.GPGETVERTEXATTRIBLDV)(getProcAddr("glGetVertexAttribLdv")); gpGetVertexAttribLdv == nil {
    ARB_vertex_attrib_64bit = false
  }
  if gpGetVertexAttribLdvEXT = (C.GPGETVERTEXATTRIBLDVEXT)(getProcAddr("glGetVertexAttribLdvEXT")); gpGetVertexAttribLdvEXT == nil {
    EXT_vertex_attrib_64bit = false
  }
  if gpGetVertexAttribLi64vNV = (C.GPGETVERTEXATTRIBLI64VNV)(getProcAddr("glGetVertexAttribLi64vNV")); gpGetVertexAttribLi64vNV == nil {
    NV_vertex_attrib_integer_64bit = false
  }
  if gpGetVertexAttribLui64vARB = (C.GPGETVERTEXATTRIBLUI64VARB)(getProcAddr("glGetVertexAttribLui64vARB")); gpGetVertexAttribLui64vARB == nil {
    ARB_bindless_texture = false
  }
  if gpGetVertexAttribLui64vNV = (C.GPGETVERTEXATTRIBLUI64VNV)(getProcAddr("glGetVertexAttribLui64vNV")); gpGetVertexAttribLui64vNV == nil {
    NV_vertex_attrib_integer_64bit = false
  }
  if gpGetVertexAttribPointerv = (C.GPGETVERTEXATTRIBPOINTERV)(getProcAddr("glGetVertexAttribPointerv")); gpGetVertexAttribPointerv == nil {
    return errors.New("glGetVertexAttribPointerv")
  }
  if gpGetVertexAttribPointervARB = (C.GPGETVERTEXATTRIBPOINTERVARB)(getProcAddr("glGetVertexAttribPointervARB")); gpGetVertexAttribPointervARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if gpGetVertexAttribPointervNV = (C.GPGETVERTEXATTRIBPOINTERVNV)(getProcAddr("glGetVertexAttribPointervNV")); gpGetVertexAttribPointervNV == nil {
    NV_vertex_program = false
  }
  if gpGetVertexAttribdv = (C.GPGETVERTEXATTRIBDV)(getProcAddr("glGetVertexAttribdv")); gpGetVertexAttribdv == nil {
    return errors.New("glGetVertexAttribdv")
  }
  if gpGetVertexAttribdvARB = (C.GPGETVERTEXATTRIBDVARB)(getProcAddr("glGetVertexAttribdvARB")); gpGetVertexAttribdvARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if gpGetVertexAttribdvNV = (C.GPGETVERTEXATTRIBDVNV)(getProcAddr("glGetVertexAttribdvNV")); gpGetVertexAttribdvNV == nil {
    NV_vertex_program = false
  }
  if gpGetVertexAttribfv = (C.GPGETVERTEXATTRIBFV)(getProcAddr("glGetVertexAttribfv")); gpGetVertexAttribfv == nil {
    return errors.New("glGetVertexAttribfv")
  }
  if gpGetVertexAttribfvARB = (C.GPGETVERTEXATTRIBFVARB)(getProcAddr("glGetVertexAttribfvARB")); gpGetVertexAttribfvARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if gpGetVertexAttribfvNV = (C.GPGETVERTEXATTRIBFVNV)(getProcAddr("glGetVertexAttribfvNV")); gpGetVertexAttribfvNV == nil {
    NV_vertex_program = false
  }
  if gpGetVertexAttribiv = (C.GPGETVERTEXATTRIBIV)(getProcAddr("glGetVertexAttribiv")); gpGetVertexAttribiv == nil {
    return errors.New("glGetVertexAttribiv")
  }
  if gpGetVertexAttribivARB = (C.GPGETVERTEXATTRIBIVARB)(getProcAddr("glGetVertexAttribivARB")); gpGetVertexAttribivARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if gpGetVertexAttribivNV = (C.GPGETVERTEXATTRIBIVNV)(getProcAddr("glGetVertexAttribivNV")); gpGetVertexAttribivNV == nil {
    NV_vertex_program = false
  }
  if gpGetVideoCaptureStreamdvNV = (C.GPGETVIDEOCAPTURESTREAMDVNV)(getProcAddr("glGetVideoCaptureStreamdvNV")); gpGetVideoCaptureStreamdvNV == nil {
    NV_video_capture = false
  }
  if gpGetVideoCaptureStreamfvNV = (C.GPGETVIDEOCAPTURESTREAMFVNV)(getProcAddr("glGetVideoCaptureStreamfvNV")); gpGetVideoCaptureStreamfvNV == nil {
    NV_video_capture = false
  }
  if gpGetVideoCaptureStreamivNV = (C.GPGETVIDEOCAPTURESTREAMIVNV)(getProcAddr("glGetVideoCaptureStreamivNV")); gpGetVideoCaptureStreamivNV == nil {
    NV_video_capture = false
  }
  if gpGetVideoCaptureivNV = (C.GPGETVIDEOCAPTUREIVNV)(getProcAddr("glGetVideoCaptureivNV")); gpGetVideoCaptureivNV == nil {
    NV_video_capture = false
  }
  if gpGetVideoi64vNV = (C.GPGETVIDEOI64VNV)(getProcAddr("glGetVideoi64vNV")); gpGetVideoi64vNV == nil {
    NV_present_video = false
  }
  if gpGetVideoivNV = (C.GPGETVIDEOIVNV)(getProcAddr("glGetVideoivNV")); gpGetVideoivNV == nil {
    NV_present_video = false
  }
  if gpGetVideoui64vNV = (C.GPGETVIDEOUI64VNV)(getProcAddr("glGetVideoui64vNV")); gpGetVideoui64vNV == nil {
    NV_present_video = false
  }
  if gpGetVideouivNV = (C.GPGETVIDEOUIVNV)(getProcAddr("glGetVideouivNV")); gpGetVideouivNV == nil {
    NV_present_video = false
  }
  if gpGetnCompressedTexImageARB = (C.GPGETNCOMPRESSEDTEXIMAGEARB)(getProcAddr("glGetnCompressedTexImageARB")); gpGetnCompressedTexImageARB == nil {
    ARB_robustness = false
  }
  if gpGetnTexImageARB = (C.GPGETNTEXIMAGEARB)(getProcAddr("glGetnTexImageARB")); gpGetnTexImageARB == nil {
    ARB_robustness = false
  }
  if gpGetnUniformdvARB = (C.GPGETNUNIFORMDVARB)(getProcAddr("glGetnUniformdvARB")); gpGetnUniformdvARB == nil {
    ARB_robustness = false
  }
  if gpGetnUniformfvARB = (C.GPGETNUNIFORMFVARB)(getProcAddr("glGetnUniformfvARB")); gpGetnUniformfvARB == nil {
    ARB_robustness = false
  }
  if gpGetnUniformivARB = (C.GPGETNUNIFORMIVARB)(getProcAddr("glGetnUniformivARB")); gpGetnUniformivARB == nil {
    ARB_robustness = false
  }
  if gpGetnUniformuivARB = (C.GPGETNUNIFORMUIVARB)(getProcAddr("glGetnUniformuivARB")); gpGetnUniformuivARB == nil {
    ARB_robustness = false
  }
  if gpGlobalAlphaFactorbSUN = (C.GPGLOBALALPHAFACTORBSUN)(getProcAddr("glGlobalAlphaFactorbSUN")); gpGlobalAlphaFactorbSUN == nil {
    SUN_global_alpha = false
  }
  if gpGlobalAlphaFactordSUN = (C.GPGLOBALALPHAFACTORDSUN)(getProcAddr("glGlobalAlphaFactordSUN")); gpGlobalAlphaFactordSUN == nil {
    SUN_global_alpha = false
  }
  if gpGlobalAlphaFactorfSUN = (C.GPGLOBALALPHAFACTORFSUN)(getProcAddr("glGlobalAlphaFactorfSUN")); gpGlobalAlphaFactorfSUN == nil {
    SUN_global_alpha = false
  }
  if gpGlobalAlphaFactoriSUN = (C.GPGLOBALALPHAFACTORISUN)(getProcAddr("glGlobalAlphaFactoriSUN")); gpGlobalAlphaFactoriSUN == nil {
    SUN_global_alpha = false
  }
  if gpGlobalAlphaFactorsSUN = (C.GPGLOBALALPHAFACTORSSUN)(getProcAddr("glGlobalAlphaFactorsSUN")); gpGlobalAlphaFactorsSUN == nil {
    SUN_global_alpha = false
  }
  if gpGlobalAlphaFactorubSUN = (C.GPGLOBALALPHAFACTORUBSUN)(getProcAddr("glGlobalAlphaFactorubSUN")); gpGlobalAlphaFactorubSUN == nil {
    SUN_global_alpha = false
  }
  if gpGlobalAlphaFactoruiSUN = (C.GPGLOBALALPHAFACTORUISUN)(getProcAddr("glGlobalAlphaFactoruiSUN")); gpGlobalAlphaFactoruiSUN == nil {
    SUN_global_alpha = false
  }
  if gpGlobalAlphaFactorusSUN = (C.GPGLOBALALPHAFACTORUSSUN)(getProcAddr("glGlobalAlphaFactorusSUN")); gpGlobalAlphaFactorusSUN == nil {
    SUN_global_alpha = false
  }
  if gpHint = (C.GPHINT)(getProcAddr("glHint")); gpHint == nil {
    return errors.New("glHint")
  }
  if gpHintPGI = (C.GPHINTPGI)(getProcAddr("glHintPGI")); gpHintPGI == nil {
    PGI_misc_hints = false
  }
  if gpHistogramEXT = (C.GPHISTOGRAMEXT)(getProcAddr("glHistogramEXT")); gpHistogramEXT == nil {
    EXT_histogram = false
  }
  if gpIglooInterfaceSGIX = (C.GPIGLOOINTERFACESGIX)(getProcAddr("glIglooInterfaceSGIX")); gpIglooInterfaceSGIX == nil {
    SGIX_igloo_interface = false
  }
  if gpImageTransformParameterfHP = (C.GPIMAGETRANSFORMPARAMETERFHP)(getProcAddr("glImageTransformParameterfHP")); gpImageTransformParameterfHP == nil {
    HP_image_transform = false
  }
  if gpImageTransformParameterfvHP = (C.GPIMAGETRANSFORMPARAMETERFVHP)(getProcAddr("glImageTransformParameterfvHP")); gpImageTransformParameterfvHP == nil {
    HP_image_transform = false
  }
  if gpImageTransformParameteriHP = (C.GPIMAGETRANSFORMPARAMETERIHP)(getProcAddr("glImageTransformParameteriHP")); gpImageTransformParameteriHP == nil {
    HP_image_transform = false
  }
  if gpImageTransformParameterivHP = (C.GPIMAGETRANSFORMPARAMETERIVHP)(getProcAddr("glImageTransformParameterivHP")); gpImageTransformParameterivHP == nil {
    HP_image_transform = false
  }
  if gpImportSyncEXT = (C.GPIMPORTSYNCEXT)(getProcAddr("glImportSyncEXT")); gpImportSyncEXT == nil {
    EXT_x11_sync_object = false
  }
  if gpIndexFormatNV = (C.GPINDEXFORMATNV)(getProcAddr("glIndexFormatNV")); gpIndexFormatNV == nil {
    NV_vertex_buffer_unified_memory = false
  }
  if gpIndexFuncEXT = (C.GPINDEXFUNCEXT)(getProcAddr("glIndexFuncEXT")); gpIndexFuncEXT == nil {
    EXT_index_func = false
  }
  if gpIndexMaterialEXT = (C.GPINDEXMATERIALEXT)(getProcAddr("glIndexMaterialEXT")); gpIndexMaterialEXT == nil {
    EXT_index_material = false
  }
  if gpIndexPointerEXT = (C.GPINDEXPOINTEREXT)(getProcAddr("glIndexPointerEXT")); gpIndexPointerEXT == nil {
    EXT_vertex_array = false
  }
  if gpIndexPointerListIBM = (C.GPINDEXPOINTERLISTIBM)(getProcAddr("glIndexPointerListIBM")); gpIndexPointerListIBM == nil {
    IBM_vertex_array_lists = false
  }
  if gpIndexxOES = (C.GPINDEXXOES)(getProcAddr("glIndexxOES")); gpIndexxOES == nil {
    OES_fixed_point = false
  }
  if gpIndexxvOES = (C.GPINDEXXVOES)(getProcAddr("glIndexxvOES")); gpIndexxvOES == nil {
    OES_fixed_point = false
  }
  if gpInsertComponentEXT = (C.GPINSERTCOMPONENTEXT)(getProcAddr("glInsertComponentEXT")); gpInsertComponentEXT == nil {
    EXT_vertex_shader = false
  }
  if gpInsertEventMarkerEXT = (C.GPINSERTEVENTMARKEREXT)(getProcAddr("glInsertEventMarkerEXT")); gpInsertEventMarkerEXT == nil {
    EXT_debug_marker = false
  }
  if gpInstrumentsBufferSGIX = (C.GPINSTRUMENTSBUFFERSGIX)(getProcAddr("glInstrumentsBufferSGIX")); gpInstrumentsBufferSGIX == nil {
    SGIX_instruments = false
  }
  if gpInterpolatePathsNV = (C.GPINTERPOLATEPATHSNV)(getProcAddr("glInterpolatePathsNV")); gpInterpolatePathsNV == nil {
    NV_path_rendering = false
  }
  if gpInvalidateBufferData = (C.GPINVALIDATEBUFFERDATA)(getProcAddr("glInvalidateBufferData")); gpInvalidateBufferData == nil {
    ARB_invalidate_subdata = false
  }
  if gpInvalidateBufferSubData = (C.GPINVALIDATEBUFFERSUBDATA)(getProcAddr("glInvalidateBufferSubData")); gpInvalidateBufferSubData == nil {
    ARB_invalidate_subdata = false
  }
  if gpInvalidateFramebuffer = (C.GPINVALIDATEFRAMEBUFFER)(getProcAddr("glInvalidateFramebuffer")); gpInvalidateFramebuffer == nil {
    ARB_invalidate_subdata = false
  }
  if gpInvalidateSubFramebuffer = (C.GPINVALIDATESUBFRAMEBUFFER)(getProcAddr("glInvalidateSubFramebuffer")); gpInvalidateSubFramebuffer == nil {
    ARB_invalidate_subdata = false
  }
  if gpInvalidateTexImage = (C.GPINVALIDATETEXIMAGE)(getProcAddr("glInvalidateTexImage")); gpInvalidateTexImage == nil {
    ARB_invalidate_subdata = false
  }
  if gpInvalidateTexSubImage = (C.GPINVALIDATETEXSUBIMAGE)(getProcAddr("glInvalidateTexSubImage")); gpInvalidateTexSubImage == nil {
    ARB_invalidate_subdata = false
  }
  if gpIsAsyncMarkerSGIX = (C.GPISASYNCMARKERSGIX)(getProcAddr("glIsAsyncMarkerSGIX")); gpIsAsyncMarkerSGIX == nil {
    SGIX_async = false
  }
  if gpIsBuffer = (C.GPISBUFFER)(getProcAddr("glIsBuffer")); gpIsBuffer == nil {
    return errors.New("glIsBuffer")
  }
  if gpIsBufferARB = (C.GPISBUFFERARB)(getProcAddr("glIsBufferARB")); gpIsBufferARB == nil {
    ARB_vertex_buffer_object = false
  }
  if gpIsBufferResidentNV = (C.GPISBUFFERRESIDENTNV)(getProcAddr("glIsBufferResidentNV")); gpIsBufferResidentNV == nil {
    NV_shader_buffer_load = false
  }
  if gpIsEnabled = (C.GPISENABLED)(getProcAddr("glIsEnabled")); gpIsEnabled == nil {
    return errors.New("glIsEnabled")
  }
  if gpIsEnabledIndexedEXT = (C.GPISENABLEDINDEXEDEXT)(getProcAddr("glIsEnabledIndexedEXT")); gpIsEnabledIndexedEXT == nil {
    EXT_direct_state_access = false
    EXT_draw_buffers2 = false
  }
  if gpIsEnabledi = (C.GPISENABLEDI)(getProcAddr("glIsEnabledi")); gpIsEnabledi == nil {
    return errors.New("glIsEnabledi")
  }
  if gpIsFenceAPPLE = (C.GPISFENCEAPPLE)(getProcAddr("glIsFenceAPPLE")); gpIsFenceAPPLE == nil {
    APPLE_fence = false
  }
  if gpIsFenceNV = (C.GPISFENCENV)(getProcAddr("glIsFenceNV")); gpIsFenceNV == nil {
    NV_fence = false
  }
  if gpIsFramebuffer = (C.GPISFRAMEBUFFER)(getProcAddr("glIsFramebuffer")); gpIsFramebuffer == nil {
    ARB_framebuffer_object = false
    return errors.New("glIsFramebuffer")
  }
  if gpIsFramebufferEXT = (C.GPISFRAMEBUFFEREXT)(getProcAddr("glIsFramebufferEXT")); gpIsFramebufferEXT == nil {
    EXT_framebuffer_object = false
  }
  if gpIsImageHandleResidentARB = (C.GPISIMAGEHANDLERESIDENTARB)(getProcAddr("glIsImageHandleResidentARB")); gpIsImageHandleResidentARB == nil {
    ARB_bindless_texture = false
  }
  if gpIsImageHandleResidentNV = (C.GPISIMAGEHANDLERESIDENTNV)(getProcAddr("glIsImageHandleResidentNV")); gpIsImageHandleResidentNV == nil {
    NV_bindless_texture = false
  }
  if gpIsNameAMD = (C.GPISNAMEAMD)(getProcAddr("glIsNameAMD")); gpIsNameAMD == nil {
    AMD_name_gen_delete = false
  }
  if gpIsNamedBufferResidentNV = (C.GPISNAMEDBUFFERRESIDENTNV)(getProcAddr("glIsNamedBufferResidentNV")); gpIsNamedBufferResidentNV == nil {
    NV_shader_buffer_load = false
  }
  if gpIsNamedStringARB = (C.GPISNAMEDSTRINGARB)(getProcAddr("glIsNamedStringARB")); gpIsNamedStringARB == nil {
    ARB_shading_language_include = false
  }
  if gpIsObjectBufferATI = (C.GPISOBJECTBUFFERATI)(getProcAddr("glIsObjectBufferATI")); gpIsObjectBufferATI == nil {
    ATI_vertex_array_object = false
  }
  if gpIsOcclusionQueryNV = (C.GPISOCCLUSIONQUERYNV)(getProcAddr("glIsOcclusionQueryNV")); gpIsOcclusionQueryNV == nil {
    NV_occlusion_query = false
  }
  if gpIsPathNV = (C.GPISPATHNV)(getProcAddr("glIsPathNV")); gpIsPathNV == nil {
    NV_path_rendering = false
  }
  if gpIsPointInFillPathNV = (C.GPISPOINTINFILLPATHNV)(getProcAddr("glIsPointInFillPathNV")); gpIsPointInFillPathNV == nil {
    NV_path_rendering = false
  }
  if gpIsPointInStrokePathNV = (C.GPISPOINTINSTROKEPATHNV)(getProcAddr("glIsPointInStrokePathNV")); gpIsPointInStrokePathNV == nil {
    NV_path_rendering = false
  }
  if gpIsProgram = (C.GPISPROGRAM)(getProcAddr("glIsProgram")); gpIsProgram == nil {
    return errors.New("glIsProgram")
  }
  if gpIsProgramARB = (C.GPISPROGRAMARB)(getProcAddr("glIsProgramARB")); gpIsProgramARB == nil {
    ARB_fragment_program = false
    ARB_vertex_program = false
  }
  if gpIsProgramNV = (C.GPISPROGRAMNV)(getProcAddr("glIsProgramNV")); gpIsProgramNV == nil {
    NV_vertex_program = false
  }
  if gpIsProgramPipeline = (C.GPISPROGRAMPIPELINE)(getProcAddr("glIsProgramPipeline")); gpIsProgramPipeline == nil {
    ARB_separate_shader_objects = false
  }
  if gpIsProgramPipelineEXT = (C.GPISPROGRAMPIPELINEEXT)(getProcAddr("glIsProgramPipelineEXT")); gpIsProgramPipelineEXT == nil {
    EXT_separate_shader_objects = false
  }
  if gpIsQuery = (C.GPISQUERY)(getProcAddr("glIsQuery")); gpIsQuery == nil {
    return errors.New("glIsQuery")
  }
  if gpIsQueryARB = (C.GPISQUERYARB)(getProcAddr("glIsQueryARB")); gpIsQueryARB == nil {
    ARB_occlusion_query = false
  }
  if gpIsRenderbuffer = (C.GPISRENDERBUFFER)(getProcAddr("glIsRenderbuffer")); gpIsRenderbuffer == nil {
    ARB_framebuffer_object = false
    return errors.New("glIsRenderbuffer")
  }
  if gpIsRenderbufferEXT = (C.GPISRENDERBUFFEREXT)(getProcAddr("glIsRenderbufferEXT")); gpIsRenderbufferEXT == nil {
    EXT_framebuffer_object = false
  }
  if gpIsSampler = (C.GPISSAMPLER)(getProcAddr("glIsSampler")); gpIsSampler == nil {
    ARB_sampler_objects = false
    return errors.New("glIsSampler")
  }
  if gpIsShader = (C.GPISSHADER)(getProcAddr("glIsShader")); gpIsShader == nil {
    return errors.New("glIsShader")
  }
  if gpIsSync = (C.GPISSYNC)(getProcAddr("glIsSync")); gpIsSync == nil {
    ARB_sync = false
    return errors.New("glIsSync")
  }
  if gpIsTexture = (C.GPISTEXTURE)(getProcAddr("glIsTexture")); gpIsTexture == nil {
    return errors.New("glIsTexture")
  }
  if gpIsTextureEXT = (C.GPISTEXTUREEXT)(getProcAddr("glIsTextureEXT")); gpIsTextureEXT == nil {
    EXT_texture_object = false
  }
  if gpIsTextureHandleResidentARB = (C.GPISTEXTUREHANDLERESIDENTARB)(getProcAddr("glIsTextureHandleResidentARB")); gpIsTextureHandleResidentARB == nil {
    ARB_bindless_texture = false
  }
  if gpIsTextureHandleResidentNV = (C.GPISTEXTUREHANDLERESIDENTNV)(getProcAddr("glIsTextureHandleResidentNV")); gpIsTextureHandleResidentNV == nil {
    NV_bindless_texture = false
  }
  if gpIsTransformFeedback = (C.GPISTRANSFORMFEEDBACK)(getProcAddr("glIsTransformFeedback")); gpIsTransformFeedback == nil {
    ARB_transform_feedback2 = false
  }
  if gpIsTransformFeedbackNV = (C.GPISTRANSFORMFEEDBACKNV)(getProcAddr("glIsTransformFeedbackNV")); gpIsTransformFeedbackNV == nil {
    NV_transform_feedback2 = false
  }
  if gpIsVariantEnabledEXT = (C.GPISVARIANTENABLEDEXT)(getProcAddr("glIsVariantEnabledEXT")); gpIsVariantEnabledEXT == nil {
    EXT_vertex_shader = false
  }
  if gpIsVertexArray = (C.GPISVERTEXARRAY)(getProcAddr("glIsVertexArray")); gpIsVertexArray == nil {
    ARB_vertex_array_object = false
    return errors.New("glIsVertexArray")
  }
  if gpIsVertexArrayAPPLE = (C.GPISVERTEXARRAYAPPLE)(getProcAddr("glIsVertexArrayAPPLE")); gpIsVertexArrayAPPLE == nil {
    APPLE_vertex_array_object = false
  }
  if gpIsVertexAttribEnabledAPPLE = (C.GPISVERTEXATTRIBENABLEDAPPLE)(getProcAddr("glIsVertexAttribEnabledAPPLE")); gpIsVertexAttribEnabledAPPLE == nil {
    APPLE_vertex_program_evaluators = false
  }
  if gpLabelObjectEXT = (C.GPLABELOBJECTEXT)(getProcAddr("glLabelObjectEXT")); gpLabelObjectEXT == nil {
    EXT_debug_label = false
  }
  if gpLightEnviSGIX = (C.GPLIGHTENVISGIX)(getProcAddr("glLightEnviSGIX")); gpLightEnviSGIX == nil {
    SGIX_fragment_lighting = false
  }
  if gpLightModelxOES = (C.GPLIGHTMODELXOES)(getProcAddr("glLightModelxOES")); gpLightModelxOES == nil {
    OES_fixed_point = false
  }
  if gpLightModelxvOES = (C.GPLIGHTMODELXVOES)(getProcAddr("glLightModelxvOES")); gpLightModelxvOES == nil {
    OES_fixed_point = false
  }
  if gpLightxOES = (C.GPLIGHTXOES)(getProcAddr("glLightxOES")); gpLightxOES == nil {
    OES_fixed_point = false
  }
  if gpLightxvOES = (C.GPLIGHTXVOES)(getProcAddr("glLightxvOES")); gpLightxvOES == nil {
    OES_fixed_point = false
  }
  if gpLineWidth = (C.GPLINEWIDTH)(getProcAddr("glLineWidth")); gpLineWidth == nil {
    return errors.New("glLineWidth")
  }
  if gpLineWidthxOES = (C.GPLINEWIDTHXOES)(getProcAddr("glLineWidthxOES")); gpLineWidthxOES == nil {
    OES_fixed_point = false
  }
  if gpLinkProgram = (C.GPLINKPROGRAM)(getProcAddr("glLinkProgram")); gpLinkProgram == nil {
    return errors.New("glLinkProgram")
  }
  if gpLinkProgramARB = (C.GPLINKPROGRAMARB)(getProcAddr("glLinkProgramARB")); gpLinkProgramARB == nil {
    ARB_shader_objects = false
  }
  if gpListParameterfSGIX = (C.GPLISTPARAMETERFSGIX)(getProcAddr("glListParameterfSGIX")); gpListParameterfSGIX == nil {
    SGIX_list_priority = false
  }
  if gpListParameterfvSGIX = (C.GPLISTPARAMETERFVSGIX)(getProcAddr("glListParameterfvSGIX")); gpListParameterfvSGIX == nil {
    SGIX_list_priority = false
  }
  if gpListParameteriSGIX = (C.GPLISTPARAMETERISGIX)(getProcAddr("glListParameteriSGIX")); gpListParameteriSGIX == nil {
    SGIX_list_priority = false
  }
  if gpListParameterivSGIX = (C.GPLISTPARAMETERIVSGIX)(getProcAddr("glListParameterivSGIX")); gpListParameterivSGIX == nil {
    SGIX_list_priority = false
  }
  if gpLoadIdentityDeformationMapSGIX = (C.GPLOADIDENTITYDEFORMATIONMAPSGIX)(getProcAddr("glLoadIdentityDeformationMapSGIX")); gpLoadIdentityDeformationMapSGIX == nil {
    SGIX_polynomial_ffd = false
  }
  if gpLoadMatrixxOES = (C.GPLOADMATRIXXOES)(getProcAddr("glLoadMatrixxOES")); gpLoadMatrixxOES == nil {
    OES_fixed_point = false
  }
  if gpLoadProgramNV = (C.GPLOADPROGRAMNV)(getProcAddr("glLoadProgramNV")); gpLoadProgramNV == nil {
    NV_vertex_program = false
  }
  if gpLoadTransposeMatrixdARB = (C.GPLOADTRANSPOSEMATRIXDARB)(getProcAddr("glLoadTransposeMatrixdARB")); gpLoadTransposeMatrixdARB == nil {
    ARB_transpose_matrix = false
  }
  if gpLoadTransposeMatrixfARB = (C.GPLOADTRANSPOSEMATRIXFARB)(getProcAddr("glLoadTransposeMatrixfARB")); gpLoadTransposeMatrixfARB == nil {
    ARB_transpose_matrix = false
  }
  if gpLoadTransposeMatrixxOES = (C.GPLOADTRANSPOSEMATRIXXOES)(getProcAddr("glLoadTransposeMatrixxOES")); gpLoadTransposeMatrixxOES == nil {
    OES_fixed_point = false
  }
  if gpLockArraysEXT = (C.GPLOCKARRAYSEXT)(getProcAddr("glLockArraysEXT")); gpLockArraysEXT == nil {
    EXT_compiled_vertex_array = false
  }
  if gpLogicOp = (C.GPLOGICOP)(getProcAddr("glLogicOp")); gpLogicOp == nil {
    return errors.New("glLogicOp")
  }
  if gpMakeBufferNonResidentNV = (C.GPMAKEBUFFERNONRESIDENTNV)(getProcAddr("glMakeBufferNonResidentNV")); gpMakeBufferNonResidentNV == nil {
    NV_shader_buffer_load = false
  }
  if gpMakeBufferResidentNV = (C.GPMAKEBUFFERRESIDENTNV)(getProcAddr("glMakeBufferResidentNV")); gpMakeBufferResidentNV == nil {
    NV_shader_buffer_load = false
  }
  if gpMakeImageHandleNonResidentARB = (C.GPMAKEIMAGEHANDLENONRESIDENTARB)(getProcAddr("glMakeImageHandleNonResidentARB")); gpMakeImageHandleNonResidentARB == nil {
    ARB_bindless_texture = false
  }
  if gpMakeImageHandleNonResidentNV = (C.GPMAKEIMAGEHANDLENONRESIDENTNV)(getProcAddr("glMakeImageHandleNonResidentNV")); gpMakeImageHandleNonResidentNV == nil {
    NV_bindless_texture = false
  }
  if gpMakeImageHandleResidentARB = (C.GPMAKEIMAGEHANDLERESIDENTARB)(getProcAddr("glMakeImageHandleResidentARB")); gpMakeImageHandleResidentARB == nil {
    ARB_bindless_texture = false
  }
  if gpMakeImageHandleResidentNV = (C.GPMAKEIMAGEHANDLERESIDENTNV)(getProcAddr("glMakeImageHandleResidentNV")); gpMakeImageHandleResidentNV == nil {
    NV_bindless_texture = false
  }
  if gpMakeNamedBufferNonResidentNV = (C.GPMAKENAMEDBUFFERNONRESIDENTNV)(getProcAddr("glMakeNamedBufferNonResidentNV")); gpMakeNamedBufferNonResidentNV == nil {
    NV_shader_buffer_load = false
  }
  if gpMakeNamedBufferResidentNV = (C.GPMAKENAMEDBUFFERRESIDENTNV)(getProcAddr("glMakeNamedBufferResidentNV")); gpMakeNamedBufferResidentNV == nil {
    NV_shader_buffer_load = false
  }
  if gpMakeTextureHandleNonResidentARB = (C.GPMAKETEXTUREHANDLENONRESIDENTARB)(getProcAddr("glMakeTextureHandleNonResidentARB")); gpMakeTextureHandleNonResidentARB == nil {
    ARB_bindless_texture = false
  }
  if gpMakeTextureHandleNonResidentNV = (C.GPMAKETEXTUREHANDLENONRESIDENTNV)(getProcAddr("glMakeTextureHandleNonResidentNV")); gpMakeTextureHandleNonResidentNV == nil {
    NV_bindless_texture = false
  }
  if gpMakeTextureHandleResidentARB = (C.GPMAKETEXTUREHANDLERESIDENTARB)(getProcAddr("glMakeTextureHandleResidentARB")); gpMakeTextureHandleResidentARB == nil {
    ARB_bindless_texture = false
  }
  if gpMakeTextureHandleResidentNV = (C.GPMAKETEXTUREHANDLERESIDENTNV)(getProcAddr("glMakeTextureHandleResidentNV")); gpMakeTextureHandleResidentNV == nil {
    NV_bindless_texture = false
  }
  if gpMap1xOES = (C.GPMAP1XOES)(getProcAddr("glMap1xOES")); gpMap1xOES == nil {
    OES_fixed_point = false
  }
  if gpMap2xOES = (C.GPMAP2XOES)(getProcAddr("glMap2xOES")); gpMap2xOES == nil {
    OES_fixed_point = false
  }
  if gpMapBuffer = (C.GPMAPBUFFER)(getProcAddr("glMapBuffer")); gpMapBuffer == nil {
    return errors.New("glMapBuffer")
  }
  if gpMapBufferARB = (C.GPMAPBUFFERARB)(getProcAddr("glMapBufferARB")); gpMapBufferARB == nil {
    ARB_vertex_buffer_object = false
  }
  if gpMapBufferRange = (C.GPMAPBUFFERRANGE)(getProcAddr("glMapBufferRange")); gpMapBufferRange == nil {
    ARB_map_buffer_range = false
    return errors.New("glMapBufferRange")
  }
  if gpMapControlPointsNV = (C.GPMAPCONTROLPOINTSNV)(getProcAddr("glMapControlPointsNV")); gpMapControlPointsNV == nil {
    NV_evaluators = false
  }
  if gpMapGrid1xOES = (C.GPMAPGRID1XOES)(getProcAddr("glMapGrid1xOES")); gpMapGrid1xOES == nil {
    OES_fixed_point = false
  }
  if gpMapGrid2xOES = (C.GPMAPGRID2XOES)(getProcAddr("glMapGrid2xOES")); gpMapGrid2xOES == nil {
    OES_fixed_point = false
  }
  if gpMapNamedBufferEXT = (C.GPMAPNAMEDBUFFEREXT)(getProcAddr("glMapNamedBufferEXT")); gpMapNamedBufferEXT == nil {
    EXT_direct_state_access = false
  }
  if gpMapNamedBufferRangeEXT = (C.GPMAPNAMEDBUFFERRANGEEXT)(getProcAddr("glMapNamedBufferRangeEXT")); gpMapNamedBufferRangeEXT == nil {
    EXT_direct_state_access = false
  }
  if gpMapObjectBufferATI = (C.GPMAPOBJECTBUFFERATI)(getProcAddr("glMapObjectBufferATI")); gpMapObjectBufferATI == nil {
    ATI_map_object_buffer = false
  }
  if gpMapParameterfvNV = (C.GPMAPPARAMETERFVNV)(getProcAddr("glMapParameterfvNV")); gpMapParameterfvNV == nil {
    NV_evaluators = false
  }
  if gpMapParameterivNV = (C.GPMAPPARAMETERIVNV)(getProcAddr("glMapParameterivNV")); gpMapParameterivNV == nil {
    NV_evaluators = false
  }
  if gpMapTexture2DINTEL = (C.GPMAPTEXTURE2DINTEL)(getProcAddr("glMapTexture2DINTEL")); gpMapTexture2DINTEL == nil {
    INTEL_map_texture = false
  }
  if gpMapVertexAttrib1dAPPLE = (C.GPMAPVERTEXATTRIB1DAPPLE)(getProcAddr("glMapVertexAttrib1dAPPLE")); gpMapVertexAttrib1dAPPLE == nil {
    APPLE_vertex_program_evaluators = false
  }
  if gpMapVertexAttrib1fAPPLE = (C.GPMAPVERTEXATTRIB1FAPPLE)(getProcAddr("glMapVertexAttrib1fAPPLE")); gpMapVertexAttrib1fAPPLE == nil {
    APPLE_vertex_program_evaluators = false
  }
  if gpMapVertexAttrib2dAPPLE = (C.GPMAPVERTEXATTRIB2DAPPLE)(getProcAddr("glMapVertexAttrib2dAPPLE")); gpMapVertexAttrib2dAPPLE == nil {
    APPLE_vertex_program_evaluators = false
  }
  if gpMapVertexAttrib2fAPPLE = (C.GPMAPVERTEXATTRIB2FAPPLE)(getProcAddr("glMapVertexAttrib2fAPPLE")); gpMapVertexAttrib2fAPPLE == nil {
    APPLE_vertex_program_evaluators = false
  }
  if gpMaterialxOES = (C.GPMATERIALXOES)(getProcAddr("glMaterialxOES")); gpMaterialxOES == nil {
    OES_fixed_point = false
  }
  if gpMaterialxvOES = (C.GPMATERIALXVOES)(getProcAddr("glMaterialxvOES")); gpMaterialxvOES == nil {
    OES_fixed_point = false
  }
  if gpMatrixFrustumEXT = (C.GPMATRIXFRUSTUMEXT)(getProcAddr("glMatrixFrustumEXT")); gpMatrixFrustumEXT == nil {
    EXT_direct_state_access = false
  }
  if gpMatrixIndexPointerARB = (C.GPMATRIXINDEXPOINTERARB)(getProcAddr("glMatrixIndexPointerARB")); gpMatrixIndexPointerARB == nil {
    ARB_matrix_palette = false
  }
  if gpMatrixIndexubvARB = (C.GPMATRIXINDEXUBVARB)(getProcAddr("glMatrixIndexubvARB")); gpMatrixIndexubvARB == nil {
    ARB_matrix_palette = false
  }
  if gpMatrixIndexuivARB = (C.GPMATRIXINDEXUIVARB)(getProcAddr("glMatrixIndexuivARB")); gpMatrixIndexuivARB == nil {
    ARB_matrix_palette = false
  }
  if gpMatrixIndexusvARB = (C.GPMATRIXINDEXUSVARB)(getProcAddr("glMatrixIndexusvARB")); gpMatrixIndexusvARB == nil {
    ARB_matrix_palette = false
  }
  if gpMatrixLoadIdentityEXT = (C.GPMATRIXLOADIDENTITYEXT)(getProcAddr("glMatrixLoadIdentityEXT")); gpMatrixLoadIdentityEXT == nil {
    EXT_direct_state_access = false
  }
  if gpMatrixLoadTransposedEXT = (C.GPMATRIXLOADTRANSPOSEDEXT)(getProcAddr("glMatrixLoadTransposedEXT")); gpMatrixLoadTransposedEXT == nil {
    EXT_direct_state_access = false
  }
  if gpMatrixLoadTransposefEXT = (C.GPMATRIXLOADTRANSPOSEFEXT)(getProcAddr("glMatrixLoadTransposefEXT")); gpMatrixLoadTransposefEXT == nil {
    EXT_direct_state_access = false
  }
  if gpMatrixLoaddEXT = (C.GPMATRIXLOADDEXT)(getProcAddr("glMatrixLoaddEXT")); gpMatrixLoaddEXT == nil {
    EXT_direct_state_access = false
  }
  if gpMatrixLoadfEXT = (C.GPMATRIXLOADFEXT)(getProcAddr("glMatrixLoadfEXT")); gpMatrixLoadfEXT == nil {
    EXT_direct_state_access = false
  }
  if gpMatrixMultTransposedEXT = (C.GPMATRIXMULTTRANSPOSEDEXT)(getProcAddr("glMatrixMultTransposedEXT")); gpMatrixMultTransposedEXT == nil {
    EXT_direct_state_access = false
  }
  if gpMatrixMultTransposefEXT = (C.GPMATRIXMULTTRANSPOSEFEXT)(getProcAddr("glMatrixMultTransposefEXT")); gpMatrixMultTransposefEXT == nil {
    EXT_direct_state_access = false
  }
  if gpMatrixMultdEXT = (C.GPMATRIXMULTDEXT)(getProcAddr("glMatrixMultdEXT")); gpMatrixMultdEXT == nil {
    EXT_direct_state_access = false
  }
  if gpMatrixMultfEXT = (C.GPMATRIXMULTFEXT)(getProcAddr("glMatrixMultfEXT")); gpMatrixMultfEXT == nil {
    EXT_direct_state_access = false
  }
  if gpMatrixOrthoEXT = (C.GPMATRIXORTHOEXT)(getProcAddr("glMatrixOrthoEXT")); gpMatrixOrthoEXT == nil {
    EXT_direct_state_access = false
  }
  if gpMatrixPopEXT = (C.GPMATRIXPOPEXT)(getProcAddr("glMatrixPopEXT")); gpMatrixPopEXT == nil {
    EXT_direct_state_access = false
  }
  if gpMatrixPushEXT = (C.GPMATRIXPUSHEXT)(getProcAddr("glMatrixPushEXT")); gpMatrixPushEXT == nil {
    EXT_direct_state_access = false
  }
  if gpMatrixRotatedEXT = (C.GPMATRIXROTATEDEXT)(getProcAddr("glMatrixRotatedEXT")); gpMatrixRotatedEXT == nil {
    EXT_direct_state_access = false
  }
  if gpMatrixRotatefEXT = (C.GPMATRIXROTATEFEXT)(getProcAddr("glMatrixRotatefEXT")); gpMatrixRotatefEXT == nil {
    EXT_direct_state_access = false
  }
  if gpMatrixScaledEXT = (C.GPMATRIXSCALEDEXT)(getProcAddr("glMatrixScaledEXT")); gpMatrixScaledEXT == nil {
    EXT_direct_state_access = false
  }
  if gpMatrixScalefEXT = (C.GPMATRIXSCALEFEXT)(getProcAddr("glMatrixScalefEXT")); gpMatrixScalefEXT == nil {
    EXT_direct_state_access = false
  }
  if gpMatrixTranslatedEXT = (C.GPMATRIXTRANSLATEDEXT)(getProcAddr("glMatrixTranslatedEXT")); gpMatrixTranslatedEXT == nil {
    EXT_direct_state_access = false
  }
  if gpMatrixTranslatefEXT = (C.GPMATRIXTRANSLATEFEXT)(getProcAddr("glMatrixTranslatefEXT")); gpMatrixTranslatefEXT == nil {
    EXT_direct_state_access = false
  }
  if gpMemoryBarrier = (C.GPMEMORYBARRIER)(getProcAddr("glMemoryBarrier")); gpMemoryBarrier == nil {
    ARB_shader_image_load_store = false
  }
  if gpMemoryBarrierEXT = (C.GPMEMORYBARRIEREXT)(getProcAddr("glMemoryBarrierEXT")); gpMemoryBarrierEXT == nil {
    EXT_shader_image_load_store = false
  }
  if gpMinSampleShadingARB = (C.GPMINSAMPLESHADINGARB)(getProcAddr("glMinSampleShadingARB")); gpMinSampleShadingARB == nil {
    ARB_sample_shading = false
  }
  if gpMinmaxEXT = (C.GPMINMAXEXT)(getProcAddr("glMinmaxEXT")); gpMinmaxEXT == nil {
    EXT_histogram = false
  }
  if gpMultMatrixxOES = (C.GPMULTMATRIXXOES)(getProcAddr("glMultMatrixxOES")); gpMultMatrixxOES == nil {
    OES_fixed_point = false
  }
  if gpMultTransposeMatrixdARB = (C.GPMULTTRANSPOSEMATRIXDARB)(getProcAddr("glMultTransposeMatrixdARB")); gpMultTransposeMatrixdARB == nil {
    ARB_transpose_matrix = false
  }
  if gpMultTransposeMatrixfARB = (C.GPMULTTRANSPOSEMATRIXFARB)(getProcAddr("glMultTransposeMatrixfARB")); gpMultTransposeMatrixfARB == nil {
    ARB_transpose_matrix = false
  }
  if gpMultTransposeMatrixxOES = (C.GPMULTTRANSPOSEMATRIXXOES)(getProcAddr("glMultTransposeMatrixxOES")); gpMultTransposeMatrixxOES == nil {
    OES_fixed_point = false
  }
  if gpMultiDrawArrays = (C.GPMULTIDRAWARRAYS)(getProcAddr("glMultiDrawArrays")); gpMultiDrawArrays == nil {
    return errors.New("glMultiDrawArrays")
  }
  if gpMultiDrawArraysEXT = (C.GPMULTIDRAWARRAYSEXT)(getProcAddr("glMultiDrawArraysEXT")); gpMultiDrawArraysEXT == nil {
    EXT_multi_draw_arrays = false
  }
  if gpMultiDrawArraysIndirect = (C.GPMULTIDRAWARRAYSINDIRECT)(getProcAddr("glMultiDrawArraysIndirect")); gpMultiDrawArraysIndirect == nil {
    ARB_multi_draw_indirect = false
  }
  if gpMultiDrawArraysIndirectAMD = (C.GPMULTIDRAWARRAYSINDIRECTAMD)(getProcAddr("glMultiDrawArraysIndirectAMD")); gpMultiDrawArraysIndirectAMD == nil {
    AMD_multi_draw_indirect = false
  }
  if gpMultiDrawArraysIndirectBindlessNV = (C.GPMULTIDRAWARRAYSINDIRECTBINDLESSNV)(getProcAddr("glMultiDrawArraysIndirectBindlessNV")); gpMultiDrawArraysIndirectBindlessNV == nil {
    NV_bindless_multi_draw_indirect = false
  }
  if gpMultiDrawArraysIndirectCountARB = (C.GPMULTIDRAWARRAYSINDIRECTCOUNTARB)(getProcAddr("glMultiDrawArraysIndirectCountARB")); gpMultiDrawArraysIndirectCountARB == nil {
    ARB_indirect_parameters = false
  }
  if gpMultiDrawElementArrayAPPLE = (C.GPMULTIDRAWELEMENTARRAYAPPLE)(getProcAddr("glMultiDrawElementArrayAPPLE")); gpMultiDrawElementArrayAPPLE == nil {
    APPLE_element_array = false
  }
  if gpMultiDrawElements = (C.GPMULTIDRAWELEMENTS)(getProcAddr("glMultiDrawElements")); gpMultiDrawElements == nil {
    return errors.New("glMultiDrawElements")
  }
  if gpMultiDrawElementsBaseVertex = (C.GPMULTIDRAWELEMENTSBASEVERTEX)(getProcAddr("glMultiDrawElementsBaseVertex")); gpMultiDrawElementsBaseVertex == nil {
    ARB_draw_elements_base_vertex = false
    return errors.New("glMultiDrawElementsBaseVertex")
  }
  if gpMultiDrawElementsEXT = (C.GPMULTIDRAWELEMENTSEXT)(getProcAddr("glMultiDrawElementsEXT")); gpMultiDrawElementsEXT == nil {
    EXT_multi_draw_arrays = false
  }
  if gpMultiDrawElementsIndirect = (C.GPMULTIDRAWELEMENTSINDIRECT)(getProcAddr("glMultiDrawElementsIndirect")); gpMultiDrawElementsIndirect == nil {
    ARB_multi_draw_indirect = false
  }
  if gpMultiDrawElementsIndirectAMD = (C.GPMULTIDRAWELEMENTSINDIRECTAMD)(getProcAddr("glMultiDrawElementsIndirectAMD")); gpMultiDrawElementsIndirectAMD == nil {
    AMD_multi_draw_indirect = false
  }
  if gpMultiDrawElementsIndirectBindlessNV = (C.GPMULTIDRAWELEMENTSINDIRECTBINDLESSNV)(getProcAddr("glMultiDrawElementsIndirectBindlessNV")); gpMultiDrawElementsIndirectBindlessNV == nil {
    NV_bindless_multi_draw_indirect = false
  }
  if gpMultiDrawElementsIndirectCountARB = (C.GPMULTIDRAWELEMENTSINDIRECTCOUNTARB)(getProcAddr("glMultiDrawElementsIndirectCountARB")); gpMultiDrawElementsIndirectCountARB == nil {
    ARB_indirect_parameters = false
  }
  if gpMultiDrawRangeElementArrayAPPLE = (C.GPMULTIDRAWRANGEELEMENTARRAYAPPLE)(getProcAddr("glMultiDrawRangeElementArrayAPPLE")); gpMultiDrawRangeElementArrayAPPLE == nil {
    APPLE_element_array = false
  }
  if gpMultiModeDrawArraysIBM = (C.GPMULTIMODEDRAWARRAYSIBM)(getProcAddr("glMultiModeDrawArraysIBM")); gpMultiModeDrawArraysIBM == nil {
    IBM_multimode_draw_arrays = false
  }
  if gpMultiModeDrawElementsIBM = (C.GPMULTIMODEDRAWELEMENTSIBM)(getProcAddr("glMultiModeDrawElementsIBM")); gpMultiModeDrawElementsIBM == nil {
    IBM_multimode_draw_arrays = false
  }
  if gpMultiTexBufferEXT = (C.GPMULTITEXBUFFEREXT)(getProcAddr("glMultiTexBufferEXT")); gpMultiTexBufferEXT == nil {
    EXT_direct_state_access = false
  }
  if gpMultiTexCoord1bOES = (C.GPMULTITEXCOORD1BOES)(getProcAddr("glMultiTexCoord1bOES")); gpMultiTexCoord1bOES == nil {
    OES_byte_coordinates = false
  }
  if gpMultiTexCoord1bvOES = (C.GPMULTITEXCOORD1BVOES)(getProcAddr("glMultiTexCoord1bvOES")); gpMultiTexCoord1bvOES == nil {
    OES_byte_coordinates = false
  }
  if gpMultiTexCoord1dARB = (C.GPMULTITEXCOORD1DARB)(getProcAddr("glMultiTexCoord1dARB")); gpMultiTexCoord1dARB == nil {
    ARB_multitexture = false
  }
  if gpMultiTexCoord1dvARB = (C.GPMULTITEXCOORD1DVARB)(getProcAddr("glMultiTexCoord1dvARB")); gpMultiTexCoord1dvARB == nil {
    ARB_multitexture = false
  }
  if gpMultiTexCoord1fARB = (C.GPMULTITEXCOORD1FARB)(getProcAddr("glMultiTexCoord1fARB")); gpMultiTexCoord1fARB == nil {
    ARB_multitexture = false
  }
  if gpMultiTexCoord1fvARB = (C.GPMULTITEXCOORD1FVARB)(getProcAddr("glMultiTexCoord1fvARB")); gpMultiTexCoord1fvARB == nil {
    ARB_multitexture = false
  }
  if gpMultiTexCoord1hNV = (C.GPMULTITEXCOORD1HNV)(getProcAddr("glMultiTexCoord1hNV")); gpMultiTexCoord1hNV == nil {
    NV_half_float = false
  }
  if gpMultiTexCoord1hvNV = (C.GPMULTITEXCOORD1HVNV)(getProcAddr("glMultiTexCoord1hvNV")); gpMultiTexCoord1hvNV == nil {
    NV_half_float = false
  }
  if gpMultiTexCoord1iARB = (C.GPMULTITEXCOORD1IARB)(getProcAddr("glMultiTexCoord1iARB")); gpMultiTexCoord1iARB == nil {
    ARB_multitexture = false
  }
  if gpMultiTexCoord1ivARB = (C.GPMULTITEXCOORD1IVARB)(getProcAddr("glMultiTexCoord1ivARB")); gpMultiTexCoord1ivARB == nil {
    ARB_multitexture = false
  }
  if gpMultiTexCoord1sARB = (C.GPMULTITEXCOORD1SARB)(getProcAddr("glMultiTexCoord1sARB")); gpMultiTexCoord1sARB == nil {
    ARB_multitexture = false
  }
  if gpMultiTexCoord1svARB = (C.GPMULTITEXCOORD1SVARB)(getProcAddr("glMultiTexCoord1svARB")); gpMultiTexCoord1svARB == nil {
    ARB_multitexture = false
  }
  if gpMultiTexCoord1xOES = (C.GPMULTITEXCOORD1XOES)(getProcAddr("glMultiTexCoord1xOES")); gpMultiTexCoord1xOES == nil {
    OES_fixed_point = false
  }
  if gpMultiTexCoord1xvOES = (C.GPMULTITEXCOORD1XVOES)(getProcAddr("glMultiTexCoord1xvOES")); gpMultiTexCoord1xvOES == nil {
    OES_fixed_point = false
  }
  if gpMultiTexCoord2bOES = (C.GPMULTITEXCOORD2BOES)(getProcAddr("glMultiTexCoord2bOES")); gpMultiTexCoord2bOES == nil {
    OES_byte_coordinates = false
  }
  if gpMultiTexCoord2bvOES = (C.GPMULTITEXCOORD2BVOES)(getProcAddr("glMultiTexCoord2bvOES")); gpMultiTexCoord2bvOES == nil {
    OES_byte_coordinates = false
  }
  if gpMultiTexCoord2dARB = (C.GPMULTITEXCOORD2DARB)(getProcAddr("glMultiTexCoord2dARB")); gpMultiTexCoord2dARB == nil {
    ARB_multitexture = false
  }
  if gpMultiTexCoord2dvARB = (C.GPMULTITEXCOORD2DVARB)(getProcAddr("glMultiTexCoord2dvARB")); gpMultiTexCoord2dvARB == nil {
    ARB_multitexture = false
  }
  if gpMultiTexCoord2fARB = (C.GPMULTITEXCOORD2FARB)(getProcAddr("glMultiTexCoord2fARB")); gpMultiTexCoord2fARB == nil {
    ARB_multitexture = false
  }
  if gpMultiTexCoord2fvARB = (C.GPMULTITEXCOORD2FVARB)(getProcAddr("glMultiTexCoord2fvARB")); gpMultiTexCoord2fvARB == nil {
    ARB_multitexture = false
  }
  if gpMultiTexCoord2hNV = (C.GPMULTITEXCOORD2HNV)(getProcAddr("glMultiTexCoord2hNV")); gpMultiTexCoord2hNV == nil {
    NV_half_float = false
  }
  if gpMultiTexCoord2hvNV = (C.GPMULTITEXCOORD2HVNV)(getProcAddr("glMultiTexCoord2hvNV")); gpMultiTexCoord2hvNV == nil {
    NV_half_float = false
  }
  if gpMultiTexCoord2iARB = (C.GPMULTITEXCOORD2IARB)(getProcAddr("glMultiTexCoord2iARB")); gpMultiTexCoord2iARB == nil {
    ARB_multitexture = false
  }
  if gpMultiTexCoord2ivARB = (C.GPMULTITEXCOORD2IVARB)(getProcAddr("glMultiTexCoord2ivARB")); gpMultiTexCoord2ivARB == nil {
    ARB_multitexture = false
  }
  if gpMultiTexCoord2sARB = (C.GPMULTITEXCOORD2SARB)(getProcAddr("glMultiTexCoord2sARB")); gpMultiTexCoord2sARB == nil {
    ARB_multitexture = false
  }
  if gpMultiTexCoord2svARB = (C.GPMULTITEXCOORD2SVARB)(getProcAddr("glMultiTexCoord2svARB")); gpMultiTexCoord2svARB == nil {
    ARB_multitexture = false
  }
  if gpMultiTexCoord2xOES = (C.GPMULTITEXCOORD2XOES)(getProcAddr("glMultiTexCoord2xOES")); gpMultiTexCoord2xOES == nil {
    OES_fixed_point = false
  }
  if gpMultiTexCoord2xvOES = (C.GPMULTITEXCOORD2XVOES)(getProcAddr("glMultiTexCoord2xvOES")); gpMultiTexCoord2xvOES == nil {
    OES_fixed_point = false
  }
  if gpMultiTexCoord3bOES = (C.GPMULTITEXCOORD3BOES)(getProcAddr("glMultiTexCoord3bOES")); gpMultiTexCoord3bOES == nil {
    OES_byte_coordinates = false
  }
  if gpMultiTexCoord3bvOES = (C.GPMULTITEXCOORD3BVOES)(getProcAddr("glMultiTexCoord3bvOES")); gpMultiTexCoord3bvOES == nil {
    OES_byte_coordinates = false
  }
  if gpMultiTexCoord3dARB = (C.GPMULTITEXCOORD3DARB)(getProcAddr("glMultiTexCoord3dARB")); gpMultiTexCoord3dARB == nil {
    ARB_multitexture = false
  }
  if gpMultiTexCoord3dvARB = (C.GPMULTITEXCOORD3DVARB)(getProcAddr("glMultiTexCoord3dvARB")); gpMultiTexCoord3dvARB == nil {
    ARB_multitexture = false
  }
  if gpMultiTexCoord3fARB = (C.GPMULTITEXCOORD3FARB)(getProcAddr("glMultiTexCoord3fARB")); gpMultiTexCoord3fARB == nil {
    ARB_multitexture = false
  }
  if gpMultiTexCoord3fvARB = (C.GPMULTITEXCOORD3FVARB)(getProcAddr("glMultiTexCoord3fvARB")); gpMultiTexCoord3fvARB == nil {
    ARB_multitexture = false
  }
  if gpMultiTexCoord3hNV = (C.GPMULTITEXCOORD3HNV)(getProcAddr("glMultiTexCoord3hNV")); gpMultiTexCoord3hNV == nil {
    NV_half_float = false
  }
  if gpMultiTexCoord3hvNV = (C.GPMULTITEXCOORD3HVNV)(getProcAddr("glMultiTexCoord3hvNV")); gpMultiTexCoord3hvNV == nil {
    NV_half_float = false
  }
  if gpMultiTexCoord3iARB = (C.GPMULTITEXCOORD3IARB)(getProcAddr("glMultiTexCoord3iARB")); gpMultiTexCoord3iARB == nil {
    ARB_multitexture = false
  }
  if gpMultiTexCoord3ivARB = (C.GPMULTITEXCOORD3IVARB)(getProcAddr("glMultiTexCoord3ivARB")); gpMultiTexCoord3ivARB == nil {
    ARB_multitexture = false
  }
  if gpMultiTexCoord3sARB = (C.GPMULTITEXCOORD3SARB)(getProcAddr("glMultiTexCoord3sARB")); gpMultiTexCoord3sARB == nil {
    ARB_multitexture = false
  }
  if gpMultiTexCoord3svARB = (C.GPMULTITEXCOORD3SVARB)(getProcAddr("glMultiTexCoord3svARB")); gpMultiTexCoord3svARB == nil {
    ARB_multitexture = false
  }
  if gpMultiTexCoord3xOES = (C.GPMULTITEXCOORD3XOES)(getProcAddr("glMultiTexCoord3xOES")); gpMultiTexCoord3xOES == nil {
    OES_fixed_point = false
  }
  if gpMultiTexCoord3xvOES = (C.GPMULTITEXCOORD3XVOES)(getProcAddr("glMultiTexCoord3xvOES")); gpMultiTexCoord3xvOES == nil {
    OES_fixed_point = false
  }
  if gpMultiTexCoord4bOES = (C.GPMULTITEXCOORD4BOES)(getProcAddr("glMultiTexCoord4bOES")); gpMultiTexCoord4bOES == nil {
    OES_byte_coordinates = false
  }
  if gpMultiTexCoord4bvOES = (C.GPMULTITEXCOORD4BVOES)(getProcAddr("glMultiTexCoord4bvOES")); gpMultiTexCoord4bvOES == nil {
    OES_byte_coordinates = false
  }
  if gpMultiTexCoord4dARB = (C.GPMULTITEXCOORD4DARB)(getProcAddr("glMultiTexCoord4dARB")); gpMultiTexCoord4dARB == nil {
    ARB_multitexture = false
  }
  if gpMultiTexCoord4dvARB = (C.GPMULTITEXCOORD4DVARB)(getProcAddr("glMultiTexCoord4dvARB")); gpMultiTexCoord4dvARB == nil {
    ARB_multitexture = false
  }
  if gpMultiTexCoord4fARB = (C.GPMULTITEXCOORD4FARB)(getProcAddr("glMultiTexCoord4fARB")); gpMultiTexCoord4fARB == nil {
    ARB_multitexture = false
  }
  if gpMultiTexCoord4fvARB = (C.GPMULTITEXCOORD4FVARB)(getProcAddr("glMultiTexCoord4fvARB")); gpMultiTexCoord4fvARB == nil {
    ARB_multitexture = false
  }
  if gpMultiTexCoord4hNV = (C.GPMULTITEXCOORD4HNV)(getProcAddr("glMultiTexCoord4hNV")); gpMultiTexCoord4hNV == nil {
    NV_half_float = false
  }
  if gpMultiTexCoord4hvNV = (C.GPMULTITEXCOORD4HVNV)(getProcAddr("glMultiTexCoord4hvNV")); gpMultiTexCoord4hvNV == nil {
    NV_half_float = false
  }
  if gpMultiTexCoord4iARB = (C.GPMULTITEXCOORD4IARB)(getProcAddr("glMultiTexCoord4iARB")); gpMultiTexCoord4iARB == nil {
    ARB_multitexture = false
  }
  if gpMultiTexCoord4ivARB = (C.GPMULTITEXCOORD4IVARB)(getProcAddr("glMultiTexCoord4ivARB")); gpMultiTexCoord4ivARB == nil {
    ARB_multitexture = false
  }
  if gpMultiTexCoord4sARB = (C.GPMULTITEXCOORD4SARB)(getProcAddr("glMultiTexCoord4sARB")); gpMultiTexCoord4sARB == nil {
    ARB_multitexture = false
  }
  if gpMultiTexCoord4svARB = (C.GPMULTITEXCOORD4SVARB)(getProcAddr("glMultiTexCoord4svARB")); gpMultiTexCoord4svARB == nil {
    ARB_multitexture = false
  }
  if gpMultiTexCoord4xOES = (C.GPMULTITEXCOORD4XOES)(getProcAddr("glMultiTexCoord4xOES")); gpMultiTexCoord4xOES == nil {
    OES_fixed_point = false
  }
  if gpMultiTexCoord4xvOES = (C.GPMULTITEXCOORD4XVOES)(getProcAddr("glMultiTexCoord4xvOES")); gpMultiTexCoord4xvOES == nil {
    OES_fixed_point = false
  }
  if gpMultiTexCoordPointerEXT = (C.GPMULTITEXCOORDPOINTEREXT)(getProcAddr("glMultiTexCoordPointerEXT")); gpMultiTexCoordPointerEXT == nil {
    EXT_direct_state_access = false
  }
  if gpMultiTexEnvfEXT = (C.GPMULTITEXENVFEXT)(getProcAddr("glMultiTexEnvfEXT")); gpMultiTexEnvfEXT == nil {
    EXT_direct_state_access = false
  }
  if gpMultiTexEnvfvEXT = (C.GPMULTITEXENVFVEXT)(getProcAddr("glMultiTexEnvfvEXT")); gpMultiTexEnvfvEXT == nil {
    EXT_direct_state_access = false
  }
  if gpMultiTexEnviEXT = (C.GPMULTITEXENVIEXT)(getProcAddr("glMultiTexEnviEXT")); gpMultiTexEnviEXT == nil {
    EXT_direct_state_access = false
  }
  if gpMultiTexEnvivEXT = (C.GPMULTITEXENVIVEXT)(getProcAddr("glMultiTexEnvivEXT")); gpMultiTexEnvivEXT == nil {
    EXT_direct_state_access = false
  }
  if gpMultiTexGendEXT = (C.GPMULTITEXGENDEXT)(getProcAddr("glMultiTexGendEXT")); gpMultiTexGendEXT == nil {
    EXT_direct_state_access = false
  }
  if gpMultiTexGendvEXT = (C.GPMULTITEXGENDVEXT)(getProcAddr("glMultiTexGendvEXT")); gpMultiTexGendvEXT == nil {
    EXT_direct_state_access = false
  }
  if gpMultiTexGenfEXT = (C.GPMULTITEXGENFEXT)(getProcAddr("glMultiTexGenfEXT")); gpMultiTexGenfEXT == nil {
    EXT_direct_state_access = false
  }
  if gpMultiTexGenfvEXT = (C.GPMULTITEXGENFVEXT)(getProcAddr("glMultiTexGenfvEXT")); gpMultiTexGenfvEXT == nil {
    EXT_direct_state_access = false
  }
  if gpMultiTexGeniEXT = (C.GPMULTITEXGENIEXT)(getProcAddr("glMultiTexGeniEXT")); gpMultiTexGeniEXT == nil {
    EXT_direct_state_access = false
  }
  if gpMultiTexGenivEXT = (C.GPMULTITEXGENIVEXT)(getProcAddr("glMultiTexGenivEXT")); gpMultiTexGenivEXT == nil {
    EXT_direct_state_access = false
  }
  if gpMultiTexImage1DEXT = (C.GPMULTITEXIMAGE1DEXT)(getProcAddr("glMultiTexImage1DEXT")); gpMultiTexImage1DEXT == nil {
    EXT_direct_state_access = false
  }
  if gpMultiTexImage2DEXT = (C.GPMULTITEXIMAGE2DEXT)(getProcAddr("glMultiTexImage2DEXT")); gpMultiTexImage2DEXT == nil {
    EXT_direct_state_access = false
  }
  if gpMultiTexImage3DEXT = (C.GPMULTITEXIMAGE3DEXT)(getProcAddr("glMultiTexImage3DEXT")); gpMultiTexImage3DEXT == nil {
    EXT_direct_state_access = false
  }
  if gpMultiTexParameterIivEXT = (C.GPMULTITEXPARAMETERIIVEXT)(getProcAddr("glMultiTexParameterIivEXT")); gpMultiTexParameterIivEXT == nil {
    EXT_direct_state_access = false
  }
  if gpMultiTexParameterIuivEXT = (C.GPMULTITEXPARAMETERIUIVEXT)(getProcAddr("glMultiTexParameterIuivEXT")); gpMultiTexParameterIuivEXT == nil {
    EXT_direct_state_access = false
  }
  if gpMultiTexParameterfEXT = (C.GPMULTITEXPARAMETERFEXT)(getProcAddr("glMultiTexParameterfEXT")); gpMultiTexParameterfEXT == nil {
    EXT_direct_state_access = false
  }
  if gpMultiTexParameterfvEXT = (C.GPMULTITEXPARAMETERFVEXT)(getProcAddr("glMultiTexParameterfvEXT")); gpMultiTexParameterfvEXT == nil {
    EXT_direct_state_access = false
  }
  if gpMultiTexParameteriEXT = (C.GPMULTITEXPARAMETERIEXT)(getProcAddr("glMultiTexParameteriEXT")); gpMultiTexParameteriEXT == nil {
    EXT_direct_state_access = false
  }
  if gpMultiTexParameterivEXT = (C.GPMULTITEXPARAMETERIVEXT)(getProcAddr("glMultiTexParameterivEXT")); gpMultiTexParameterivEXT == nil {
    EXT_direct_state_access = false
  }
  if gpMultiTexRenderbufferEXT = (C.GPMULTITEXRENDERBUFFEREXT)(getProcAddr("glMultiTexRenderbufferEXT")); gpMultiTexRenderbufferEXT == nil {
    EXT_direct_state_access = false
  }
  if gpMultiTexSubImage1DEXT = (C.GPMULTITEXSUBIMAGE1DEXT)(getProcAddr("glMultiTexSubImage1DEXT")); gpMultiTexSubImage1DEXT == nil {
    EXT_direct_state_access = false
  }
  if gpMultiTexSubImage2DEXT = (C.GPMULTITEXSUBIMAGE2DEXT)(getProcAddr("glMultiTexSubImage2DEXT")); gpMultiTexSubImage2DEXT == nil {
    EXT_direct_state_access = false
  }
  if gpMultiTexSubImage3DEXT = (C.GPMULTITEXSUBIMAGE3DEXT)(getProcAddr("glMultiTexSubImage3DEXT")); gpMultiTexSubImage3DEXT == nil {
    EXT_direct_state_access = false
  }
  if gpNamedBufferDataEXT = (C.GPNAMEDBUFFERDATAEXT)(getProcAddr("glNamedBufferDataEXT")); gpNamedBufferDataEXT == nil {
    EXT_direct_state_access = false
  }
  if gpNamedBufferStorageEXT = (C.GPNAMEDBUFFERSTORAGEEXT)(getProcAddr("glNamedBufferStorageEXT")); gpNamedBufferStorageEXT == nil {
    EXT_direct_state_access = false
  }
  if gpNamedBufferSubDataEXT = (C.GPNAMEDBUFFERSUBDATAEXT)(getProcAddr("glNamedBufferSubDataEXT")); gpNamedBufferSubDataEXT == nil {
    EXT_direct_state_access = false
  }
  if gpNamedCopyBufferSubDataEXT = (C.GPNAMEDCOPYBUFFERSUBDATAEXT)(getProcAddr("glNamedCopyBufferSubDataEXT")); gpNamedCopyBufferSubDataEXT == nil {
    EXT_direct_state_access = false
  }
  if gpNamedFramebufferParameteriEXT = (C.GPNAMEDFRAMEBUFFERPARAMETERIEXT)(getProcAddr("glNamedFramebufferParameteriEXT")); gpNamedFramebufferParameteriEXT == nil {
    EXT_direct_state_access = false
  }
  if gpNamedFramebufferRenderbufferEXT = (C.GPNAMEDFRAMEBUFFERRENDERBUFFEREXT)(getProcAddr("glNamedFramebufferRenderbufferEXT")); gpNamedFramebufferRenderbufferEXT == nil {
    EXT_direct_state_access = false
  }
  if gpNamedFramebufferTexture1DEXT = (C.GPNAMEDFRAMEBUFFERTEXTURE1DEXT)(getProcAddr("glNamedFramebufferTexture1DEXT")); gpNamedFramebufferTexture1DEXT == nil {
    EXT_direct_state_access = false
  }
  if gpNamedFramebufferTexture2DEXT = (C.GPNAMEDFRAMEBUFFERTEXTURE2DEXT)(getProcAddr("glNamedFramebufferTexture2DEXT")); gpNamedFramebufferTexture2DEXT == nil {
    EXT_direct_state_access = false
  }
  if gpNamedFramebufferTexture3DEXT = (C.GPNAMEDFRAMEBUFFERTEXTURE3DEXT)(getProcAddr("glNamedFramebufferTexture3DEXT")); gpNamedFramebufferTexture3DEXT == nil {
    EXT_direct_state_access = false
  }
  if gpNamedFramebufferTextureEXT = (C.GPNAMEDFRAMEBUFFERTEXTUREEXT)(getProcAddr("glNamedFramebufferTextureEXT")); gpNamedFramebufferTextureEXT == nil {
    EXT_direct_state_access = false
  }
  if gpNamedFramebufferTextureFaceEXT = (C.GPNAMEDFRAMEBUFFERTEXTUREFACEEXT)(getProcAddr("glNamedFramebufferTextureFaceEXT")); gpNamedFramebufferTextureFaceEXT == nil {
    EXT_direct_state_access = false
  }
  if gpNamedFramebufferTextureLayerEXT = (C.GPNAMEDFRAMEBUFFERTEXTURELAYEREXT)(getProcAddr("glNamedFramebufferTextureLayerEXT")); gpNamedFramebufferTextureLayerEXT == nil {
    EXT_direct_state_access = false
  }
  if gpNamedProgramLocalParameter4dEXT = (C.GPNAMEDPROGRAMLOCALPARAMETER4DEXT)(getProcAddr("glNamedProgramLocalParameter4dEXT")); gpNamedProgramLocalParameter4dEXT == nil {
    EXT_direct_state_access = false
  }
  if gpNamedProgramLocalParameter4dvEXT = (C.GPNAMEDPROGRAMLOCALPARAMETER4DVEXT)(getProcAddr("glNamedProgramLocalParameter4dvEXT")); gpNamedProgramLocalParameter4dvEXT == nil {
    EXT_direct_state_access = false
  }
  if gpNamedProgramLocalParameter4fEXT = (C.GPNAMEDPROGRAMLOCALPARAMETER4FEXT)(getProcAddr("glNamedProgramLocalParameter4fEXT")); gpNamedProgramLocalParameter4fEXT == nil {
    EXT_direct_state_access = false
  }
  if gpNamedProgramLocalParameter4fvEXT = (C.GPNAMEDPROGRAMLOCALPARAMETER4FVEXT)(getProcAddr("glNamedProgramLocalParameter4fvEXT")); gpNamedProgramLocalParameter4fvEXT == nil {
    EXT_direct_state_access = false
  }
  if gpNamedProgramLocalParameterI4iEXT = (C.GPNAMEDPROGRAMLOCALPARAMETERI4IEXT)(getProcAddr("glNamedProgramLocalParameterI4iEXT")); gpNamedProgramLocalParameterI4iEXT == nil {
    EXT_direct_state_access = false
  }
  if gpNamedProgramLocalParameterI4ivEXT = (C.GPNAMEDPROGRAMLOCALPARAMETERI4IVEXT)(getProcAddr("glNamedProgramLocalParameterI4ivEXT")); gpNamedProgramLocalParameterI4ivEXT == nil {
    EXT_direct_state_access = false
  }
  if gpNamedProgramLocalParameterI4uiEXT = (C.GPNAMEDPROGRAMLOCALPARAMETERI4UIEXT)(getProcAddr("glNamedProgramLocalParameterI4uiEXT")); gpNamedProgramLocalParameterI4uiEXT == nil {
    EXT_direct_state_access = false
  }
  if gpNamedProgramLocalParameterI4uivEXT = (C.GPNAMEDPROGRAMLOCALPARAMETERI4UIVEXT)(getProcAddr("glNamedProgramLocalParameterI4uivEXT")); gpNamedProgramLocalParameterI4uivEXT == nil {
    EXT_direct_state_access = false
  }
  if gpNamedProgramLocalParameters4fvEXT = (C.GPNAMEDPROGRAMLOCALPARAMETERS4FVEXT)(getProcAddr("glNamedProgramLocalParameters4fvEXT")); gpNamedProgramLocalParameters4fvEXT == nil {
    EXT_direct_state_access = false
  }
  if gpNamedProgramLocalParametersI4ivEXT = (C.GPNAMEDPROGRAMLOCALPARAMETERSI4IVEXT)(getProcAddr("glNamedProgramLocalParametersI4ivEXT")); gpNamedProgramLocalParametersI4ivEXT == nil {
    EXT_direct_state_access = false
  }
  if gpNamedProgramLocalParametersI4uivEXT = (C.GPNAMEDPROGRAMLOCALPARAMETERSI4UIVEXT)(getProcAddr("glNamedProgramLocalParametersI4uivEXT")); gpNamedProgramLocalParametersI4uivEXT == nil {
    EXT_direct_state_access = false
  }
  if gpNamedProgramStringEXT = (C.GPNAMEDPROGRAMSTRINGEXT)(getProcAddr("glNamedProgramStringEXT")); gpNamedProgramStringEXT == nil {
    EXT_direct_state_access = false
  }
  if gpNamedRenderbufferStorageEXT = (C.GPNAMEDRENDERBUFFERSTORAGEEXT)(getProcAddr("glNamedRenderbufferStorageEXT")); gpNamedRenderbufferStorageEXT == nil {
    EXT_direct_state_access = false
  }
  if gpNamedRenderbufferStorageMultisampleCoverageEXT = (C.GPNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXT)(getProcAddr("glNamedRenderbufferStorageMultisampleCoverageEXT")); gpNamedRenderbufferStorageMultisampleCoverageEXT == nil {
    EXT_direct_state_access = false
  }
  if gpNamedRenderbufferStorageMultisampleEXT = (C.GPNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXT)(getProcAddr("glNamedRenderbufferStorageMultisampleEXT")); gpNamedRenderbufferStorageMultisampleEXT == nil {
    EXT_direct_state_access = false
  }
  if gpNamedStringARB = (C.GPNAMEDSTRINGARB)(getProcAddr("glNamedStringARB")); gpNamedStringARB == nil {
    ARB_shading_language_include = false
  }
  if gpNewObjectBufferATI = (C.GPNEWOBJECTBUFFERATI)(getProcAddr("glNewObjectBufferATI")); gpNewObjectBufferATI == nil {
    ATI_vertex_array_object = false
  }
  if gpNormal3fVertex3fSUN = (C.GPNORMAL3FVERTEX3FSUN)(getProcAddr("glNormal3fVertex3fSUN")); gpNormal3fVertex3fSUN == nil {
    SUN_vertex = false
  }
  if gpNormal3fVertex3fvSUN = (C.GPNORMAL3FVERTEX3FVSUN)(getProcAddr("glNormal3fVertex3fvSUN")); gpNormal3fVertex3fvSUN == nil {
    SUN_vertex = false
  }
  if gpNormal3hNV = (C.GPNORMAL3HNV)(getProcAddr("glNormal3hNV")); gpNormal3hNV == nil {
    NV_half_float = false
  }
  if gpNormal3hvNV = (C.GPNORMAL3HVNV)(getProcAddr("glNormal3hvNV")); gpNormal3hvNV == nil {
    NV_half_float = false
  }
  if gpNormal3xOES = (C.GPNORMAL3XOES)(getProcAddr("glNormal3xOES")); gpNormal3xOES == nil {
    OES_fixed_point = false
  }
  if gpNormal3xvOES = (C.GPNORMAL3XVOES)(getProcAddr("glNormal3xvOES")); gpNormal3xvOES == nil {
    OES_fixed_point = false
  }
  if gpNormalFormatNV = (C.GPNORMALFORMATNV)(getProcAddr("glNormalFormatNV")); gpNormalFormatNV == nil {
    NV_vertex_buffer_unified_memory = false
  }
  if gpNormalPointerEXT = (C.GPNORMALPOINTEREXT)(getProcAddr("glNormalPointerEXT")); gpNormalPointerEXT == nil {
    EXT_vertex_array = false
  }
  if gpNormalPointerListIBM = (C.GPNORMALPOINTERLISTIBM)(getProcAddr("glNormalPointerListIBM")); gpNormalPointerListIBM == nil {
    IBM_vertex_array_lists = false
  }
  if gpNormalPointervINTEL = (C.GPNORMALPOINTERVINTEL)(getProcAddr("glNormalPointervINTEL")); gpNormalPointervINTEL == nil {
    INTEL_parallel_arrays = false
  }
  if gpNormalStream3bATI = (C.GPNORMALSTREAM3BATI)(getProcAddr("glNormalStream3bATI")); gpNormalStream3bATI == nil {
    ATI_vertex_streams = false
  }
  if gpNormalStream3bvATI = (C.GPNORMALSTREAM3BVATI)(getProcAddr("glNormalStream3bvATI")); gpNormalStream3bvATI == nil {
    ATI_vertex_streams = false
  }
  if gpNormalStream3dATI = (C.GPNORMALSTREAM3DATI)(getProcAddr("glNormalStream3dATI")); gpNormalStream3dATI == nil {
    ATI_vertex_streams = false
  }
  if gpNormalStream3dvATI = (C.GPNORMALSTREAM3DVATI)(getProcAddr("glNormalStream3dvATI")); gpNormalStream3dvATI == nil {
    ATI_vertex_streams = false
  }
  if gpNormalStream3fATI = (C.GPNORMALSTREAM3FATI)(getProcAddr("glNormalStream3fATI")); gpNormalStream3fATI == nil {
    ATI_vertex_streams = false
  }
  if gpNormalStream3fvATI = (C.GPNORMALSTREAM3FVATI)(getProcAddr("glNormalStream3fvATI")); gpNormalStream3fvATI == nil {
    ATI_vertex_streams = false
  }
  if gpNormalStream3iATI = (C.GPNORMALSTREAM3IATI)(getProcAddr("glNormalStream3iATI")); gpNormalStream3iATI == nil {
    ATI_vertex_streams = false
  }
  if gpNormalStream3ivATI = (C.GPNORMALSTREAM3IVATI)(getProcAddr("glNormalStream3ivATI")); gpNormalStream3ivATI == nil {
    ATI_vertex_streams = false
  }
  if gpNormalStream3sATI = (C.GPNORMALSTREAM3SATI)(getProcAddr("glNormalStream3sATI")); gpNormalStream3sATI == nil {
    ATI_vertex_streams = false
  }
  if gpNormalStream3svATI = (C.GPNORMALSTREAM3SVATI)(getProcAddr("glNormalStream3svATI")); gpNormalStream3svATI == nil {
    ATI_vertex_streams = false
  }
  if gpObjectLabel = (C.GPOBJECTLABEL)(getProcAddr("glObjectLabel")); gpObjectLabel == nil {
    KHR_debug = false
  }
  if gpObjectLabelKHR = (C.GPOBJECTLABELKHR)(getProcAddr("glObjectLabelKHR")); gpObjectLabelKHR == nil {
    KHR_debug = false
  }
  if gpObjectPtrLabel = (C.GPOBJECTPTRLABEL)(getProcAddr("glObjectPtrLabel")); gpObjectPtrLabel == nil {
    KHR_debug = false
  }
  if gpObjectPtrLabelKHR = (C.GPOBJECTPTRLABELKHR)(getProcAddr("glObjectPtrLabelKHR")); gpObjectPtrLabelKHR == nil {
    KHR_debug = false
  }
  if gpObjectPurgeableAPPLE = (C.GPOBJECTPURGEABLEAPPLE)(getProcAddr("glObjectPurgeableAPPLE")); gpObjectPurgeableAPPLE == nil {
    APPLE_object_purgeable = false
  }
  if gpObjectUnpurgeableAPPLE = (C.GPOBJECTUNPURGEABLEAPPLE)(getProcAddr("glObjectUnpurgeableAPPLE")); gpObjectUnpurgeableAPPLE == nil {
    APPLE_object_purgeable = false
  }
  if gpOrthofOES = (C.GPORTHOFOES)(getProcAddr("glOrthofOES")); gpOrthofOES == nil {
    OES_single_precision = false
  }
  if gpOrthoxOES = (C.GPORTHOXOES)(getProcAddr("glOrthoxOES")); gpOrthoxOES == nil {
    OES_fixed_point = false
  }
  if gpPNTrianglesfATI = (C.GPPNTRIANGLESFATI)(getProcAddr("glPNTrianglesfATI")); gpPNTrianglesfATI == nil {
    ATI_pn_triangles = false
  }
  if gpPNTrianglesiATI = (C.GPPNTRIANGLESIATI)(getProcAddr("glPNTrianglesiATI")); gpPNTrianglesiATI == nil {
    ATI_pn_triangles = false
  }
  if gpPassTexCoordATI = (C.GPPASSTEXCOORDATI)(getProcAddr("glPassTexCoordATI")); gpPassTexCoordATI == nil {
    ATI_fragment_shader = false
  }
  if gpPassThroughxOES = (C.GPPASSTHROUGHXOES)(getProcAddr("glPassThroughxOES")); gpPassThroughxOES == nil {
    OES_fixed_point = false
  }
  if gpPatchParameterfv = (C.GPPATCHPARAMETERFV)(getProcAddr("glPatchParameterfv")); gpPatchParameterfv == nil {
    ARB_tessellation_shader = false
  }
  if gpPatchParameteri = (C.GPPATCHPARAMETERI)(getProcAddr("glPatchParameteri")); gpPatchParameteri == nil {
    ARB_tessellation_shader = false
  }
  if gpPathColorGenNV = (C.GPPATHCOLORGENNV)(getProcAddr("glPathColorGenNV")); gpPathColorGenNV == nil {
    NV_path_rendering = false
  }
  if gpPathCommandsNV = (C.GPPATHCOMMANDSNV)(getProcAddr("glPathCommandsNV")); gpPathCommandsNV == nil {
    NV_path_rendering = false
  }
  if gpPathCoordsNV = (C.GPPATHCOORDSNV)(getProcAddr("glPathCoordsNV")); gpPathCoordsNV == nil {
    NV_path_rendering = false
  }
  if gpPathCoverDepthFuncNV = (C.GPPATHCOVERDEPTHFUNCNV)(getProcAddr("glPathCoverDepthFuncNV")); gpPathCoverDepthFuncNV == nil {
    NV_path_rendering = false
  }
  if gpPathDashArrayNV = (C.GPPATHDASHARRAYNV)(getProcAddr("glPathDashArrayNV")); gpPathDashArrayNV == nil {
    NV_path_rendering = false
  }
  if gpPathFogGenNV = (C.GPPATHFOGGENNV)(getProcAddr("glPathFogGenNV")); gpPathFogGenNV == nil {
    NV_path_rendering = false
  }
  if gpPathGlyphRangeNV = (C.GPPATHGLYPHRANGENV)(getProcAddr("glPathGlyphRangeNV")); gpPathGlyphRangeNV == nil {
    NV_path_rendering = false
  }
  if gpPathGlyphsNV = (C.GPPATHGLYPHSNV)(getProcAddr("glPathGlyphsNV")); gpPathGlyphsNV == nil {
    NV_path_rendering = false
  }
  if gpPathParameterfNV = (C.GPPATHPARAMETERFNV)(getProcAddr("glPathParameterfNV")); gpPathParameterfNV == nil {
    NV_path_rendering = false
  }
  if gpPathParameterfvNV = (C.GPPATHPARAMETERFVNV)(getProcAddr("glPathParameterfvNV")); gpPathParameterfvNV == nil {
    NV_path_rendering = false
  }
  if gpPathParameteriNV = (C.GPPATHPARAMETERINV)(getProcAddr("glPathParameteriNV")); gpPathParameteriNV == nil {
    NV_path_rendering = false
  }
  if gpPathParameterivNV = (C.GPPATHPARAMETERIVNV)(getProcAddr("glPathParameterivNV")); gpPathParameterivNV == nil {
    NV_path_rendering = false
  }
  if gpPathStencilDepthOffsetNV = (C.GPPATHSTENCILDEPTHOFFSETNV)(getProcAddr("glPathStencilDepthOffsetNV")); gpPathStencilDepthOffsetNV == nil {
    NV_path_rendering = false
  }
  if gpPathStencilFuncNV = (C.GPPATHSTENCILFUNCNV)(getProcAddr("glPathStencilFuncNV")); gpPathStencilFuncNV == nil {
    NV_path_rendering = false
  }
  if gpPathStringNV = (C.GPPATHSTRINGNV)(getProcAddr("glPathStringNV")); gpPathStringNV == nil {
    NV_path_rendering = false
  }
  if gpPathSubCommandsNV = (C.GPPATHSUBCOMMANDSNV)(getProcAddr("glPathSubCommandsNV")); gpPathSubCommandsNV == nil {
    NV_path_rendering = false
  }
  if gpPathSubCoordsNV = (C.GPPATHSUBCOORDSNV)(getProcAddr("glPathSubCoordsNV")); gpPathSubCoordsNV == nil {
    NV_path_rendering = false
  }
  if gpPathTexGenNV = (C.GPPATHTEXGENNV)(getProcAddr("glPathTexGenNV")); gpPathTexGenNV == nil {
    NV_path_rendering = false
  }
  if gpPauseTransformFeedback = (C.GPPAUSETRANSFORMFEEDBACK)(getProcAddr("glPauseTransformFeedback")); gpPauseTransformFeedback == nil {
    ARB_transform_feedback2 = false
  }
  if gpPauseTransformFeedbackNV = (C.GPPAUSETRANSFORMFEEDBACKNV)(getProcAddr("glPauseTransformFeedbackNV")); gpPauseTransformFeedbackNV == nil {
    NV_transform_feedback2 = false
  }
  if gpPixelDataRangeNV = (C.GPPIXELDATARANGENV)(getProcAddr("glPixelDataRangeNV")); gpPixelDataRangeNV == nil {
    NV_pixel_data_range = false
  }
  if gpPixelMapx = (C.GPPIXELMAPX)(getProcAddr("glPixelMapx")); gpPixelMapx == nil {
    OES_fixed_point = false
  }
  if gpPixelStoref = (C.GPPIXELSTOREF)(getProcAddr("glPixelStoref")); gpPixelStoref == nil {
    return errors.New("glPixelStoref")
  }
  if gpPixelStorei = (C.GPPIXELSTOREI)(getProcAddr("glPixelStorei")); gpPixelStorei == nil {
    return errors.New("glPixelStorei")
  }
  if gpPixelStorex = (C.GPPIXELSTOREX)(getProcAddr("glPixelStorex")); gpPixelStorex == nil {
    OES_fixed_point = false
  }
  if gpPixelTexGenParameterfSGIS = (C.GPPIXELTEXGENPARAMETERFSGIS)(getProcAddr("glPixelTexGenParameterfSGIS")); gpPixelTexGenParameterfSGIS == nil {
    SGIS_pixel_texture = false
  }
  if gpPixelTexGenParameterfvSGIS = (C.GPPIXELTEXGENPARAMETERFVSGIS)(getProcAddr("glPixelTexGenParameterfvSGIS")); gpPixelTexGenParameterfvSGIS == nil {
    SGIS_pixel_texture = false
  }
  if gpPixelTexGenParameteriSGIS = (C.GPPIXELTEXGENPARAMETERISGIS)(getProcAddr("glPixelTexGenParameteriSGIS")); gpPixelTexGenParameteriSGIS == nil {
    SGIS_pixel_texture = false
  }
  if gpPixelTexGenParameterivSGIS = (C.GPPIXELTEXGENPARAMETERIVSGIS)(getProcAddr("glPixelTexGenParameterivSGIS")); gpPixelTexGenParameterivSGIS == nil {
    SGIS_pixel_texture = false
  }
  if gpPixelTexGenSGIX = (C.GPPIXELTEXGENSGIX)(getProcAddr("glPixelTexGenSGIX")); gpPixelTexGenSGIX == nil {
    SGIX_pixel_texture = false
  }
  if gpPixelTransferxOES = (C.GPPIXELTRANSFERXOES)(getProcAddr("glPixelTransferxOES")); gpPixelTransferxOES == nil {
    OES_fixed_point = false
  }
  if gpPixelTransformParameterfEXT = (C.GPPIXELTRANSFORMPARAMETERFEXT)(getProcAddr("glPixelTransformParameterfEXT")); gpPixelTransformParameterfEXT == nil {
    EXT_pixel_transform = false
  }
  if gpPixelTransformParameterfvEXT = (C.GPPIXELTRANSFORMPARAMETERFVEXT)(getProcAddr("glPixelTransformParameterfvEXT")); gpPixelTransformParameterfvEXT == nil {
    EXT_pixel_transform = false
  }
  if gpPixelTransformParameteriEXT = (C.GPPIXELTRANSFORMPARAMETERIEXT)(getProcAddr("glPixelTransformParameteriEXT")); gpPixelTransformParameteriEXT == nil {
    EXT_pixel_transform = false
  }
  if gpPixelTransformParameterivEXT = (C.GPPIXELTRANSFORMPARAMETERIVEXT)(getProcAddr("glPixelTransformParameterivEXT")); gpPixelTransformParameterivEXT == nil {
    EXT_pixel_transform = false
  }
  if gpPixelZoomxOES = (C.GPPIXELZOOMXOES)(getProcAddr("glPixelZoomxOES")); gpPixelZoomxOES == nil {
    OES_fixed_point = false
  }
  if gpPointAlongPathNV = (C.GPPOINTALONGPATHNV)(getProcAddr("glPointAlongPathNV")); gpPointAlongPathNV == nil {
    NV_path_rendering = false
  }
  if gpPointParameterf = (C.GPPOINTPARAMETERF)(getProcAddr("glPointParameterf")); gpPointParameterf == nil {
    return errors.New("glPointParameterf")
  }
  if gpPointParameterfARB = (C.GPPOINTPARAMETERFARB)(getProcAddr("glPointParameterfARB")); gpPointParameterfARB == nil {
    ARB_point_parameters = false
  }
  if gpPointParameterfEXT = (C.GPPOINTPARAMETERFEXT)(getProcAddr("glPointParameterfEXT")); gpPointParameterfEXT == nil {
    EXT_point_parameters = false
  }
  if gpPointParameterfSGIS = (C.GPPOINTPARAMETERFSGIS)(getProcAddr("glPointParameterfSGIS")); gpPointParameterfSGIS == nil {
    SGIS_point_parameters = false
  }
  if gpPointParameterfv = (C.GPPOINTPARAMETERFV)(getProcAddr("glPointParameterfv")); gpPointParameterfv == nil {
    return errors.New("glPointParameterfv")
  }
  if gpPointParameterfvARB = (C.GPPOINTPARAMETERFVARB)(getProcAddr("glPointParameterfvARB")); gpPointParameterfvARB == nil {
    ARB_point_parameters = false
  }
  if gpPointParameterfvEXT = (C.GPPOINTPARAMETERFVEXT)(getProcAddr("glPointParameterfvEXT")); gpPointParameterfvEXT == nil {
    EXT_point_parameters = false
  }
  if gpPointParameterfvSGIS = (C.GPPOINTPARAMETERFVSGIS)(getProcAddr("glPointParameterfvSGIS")); gpPointParameterfvSGIS == nil {
    SGIS_point_parameters = false
  }
  if gpPointParameteri = (C.GPPOINTPARAMETERI)(getProcAddr("glPointParameteri")); gpPointParameteri == nil {
    return errors.New("glPointParameteri")
  }
  if gpPointParameteriNV = (C.GPPOINTPARAMETERINV)(getProcAddr("glPointParameteriNV")); gpPointParameteriNV == nil {
    NV_point_sprite = false
  }
  if gpPointParameteriv = (C.GPPOINTPARAMETERIV)(getProcAddr("glPointParameteriv")); gpPointParameteriv == nil {
    return errors.New("glPointParameteriv")
  }
  if gpPointParameterivNV = (C.GPPOINTPARAMETERIVNV)(getProcAddr("glPointParameterivNV")); gpPointParameterivNV == nil {
    NV_point_sprite = false
  }
  if gpPointParameterxOES = (C.GPPOINTPARAMETERXOES)(getProcAddr("glPointParameterxOES")); gpPointParameterxOES == nil {
    OES_fixed_point = false
  }
  if gpPointParameterxvOES = (C.GPPOINTPARAMETERXVOES)(getProcAddr("glPointParameterxvOES")); gpPointParameterxvOES == nil {
    OES_fixed_point = false
  }
  if gpPointSize = (C.GPPOINTSIZE)(getProcAddr("glPointSize")); gpPointSize == nil {
    return errors.New("glPointSize")
  }
  if gpPointSizexOES = (C.GPPOINTSIZEXOES)(getProcAddr("glPointSizexOES")); gpPointSizexOES == nil {
    OES_fixed_point = false
  }
  if gpPollAsyncSGIX = (C.GPPOLLASYNCSGIX)(getProcAddr("glPollAsyncSGIX")); gpPollAsyncSGIX == nil {
    SGIX_async = false
  }
  if gpPollInstrumentsSGIX = (C.GPPOLLINSTRUMENTSSGIX)(getProcAddr("glPollInstrumentsSGIX")); gpPollInstrumentsSGIX == nil {
    SGIX_instruments = false
  }
  if gpPolygonMode = (C.GPPOLYGONMODE)(getProcAddr("glPolygonMode")); gpPolygonMode == nil {
    return errors.New("glPolygonMode")
  }
  if gpPolygonOffset = (C.GPPOLYGONOFFSET)(getProcAddr("glPolygonOffset")); gpPolygonOffset == nil {
    return errors.New("glPolygonOffset")
  }
  if gpPolygonOffsetEXT = (C.GPPOLYGONOFFSETEXT)(getProcAddr("glPolygonOffsetEXT")); gpPolygonOffsetEXT == nil {
    EXT_polygon_offset = false
  }
  if gpPolygonOffsetxOES = (C.GPPOLYGONOFFSETXOES)(getProcAddr("glPolygonOffsetxOES")); gpPolygonOffsetxOES == nil {
    OES_fixed_point = false
  }
  if gpPopDebugGroup = (C.GPPOPDEBUGGROUP)(getProcAddr("glPopDebugGroup")); gpPopDebugGroup == nil {
    KHR_debug = false
  }
  if gpPopDebugGroupKHR = (C.GPPOPDEBUGGROUPKHR)(getProcAddr("glPopDebugGroupKHR")); gpPopDebugGroupKHR == nil {
    KHR_debug = false
  }
  if gpPopGroupMarkerEXT = (C.GPPOPGROUPMARKEREXT)(getProcAddr("glPopGroupMarkerEXT")); gpPopGroupMarkerEXT == nil {
    EXT_debug_marker = false
  }
  if gpPresentFrameDualFillNV = (C.GPPRESENTFRAMEDUALFILLNV)(getProcAddr("glPresentFrameDualFillNV")); gpPresentFrameDualFillNV == nil {
    NV_present_video = false
  }
  if gpPresentFrameKeyedNV = (C.GPPRESENTFRAMEKEYEDNV)(getProcAddr("glPresentFrameKeyedNV")); gpPresentFrameKeyedNV == nil {
    NV_present_video = false
  }
  if gpPrimitiveRestartIndex = (C.GPPRIMITIVERESTARTINDEX)(getProcAddr("glPrimitiveRestartIndex")); gpPrimitiveRestartIndex == nil {
    return errors.New("glPrimitiveRestartIndex")
  }
  if gpPrimitiveRestartIndexNV = (C.GPPRIMITIVERESTARTINDEXNV)(getProcAddr("glPrimitiveRestartIndexNV")); gpPrimitiveRestartIndexNV == nil {
    NV_primitive_restart = false
  }
  if gpPrimitiveRestartNV = (C.GPPRIMITIVERESTARTNV)(getProcAddr("glPrimitiveRestartNV")); gpPrimitiveRestartNV == nil {
    NV_primitive_restart = false
  }
  if gpPrioritizeTexturesEXT = (C.GPPRIORITIZETEXTURESEXT)(getProcAddr("glPrioritizeTexturesEXT")); gpPrioritizeTexturesEXT == nil {
    EXT_texture_object = false
  }
  if gpPrioritizeTexturesxOES = (C.GPPRIORITIZETEXTURESXOES)(getProcAddr("glPrioritizeTexturesxOES")); gpPrioritizeTexturesxOES == nil {
    OES_fixed_point = false
  }
  if gpProgramBinary = (C.GPPROGRAMBINARY)(getProcAddr("glProgramBinary")); gpProgramBinary == nil {
    ARB_get_program_binary = false
  }
  if gpProgramBufferParametersIivNV = (C.GPPROGRAMBUFFERPARAMETERSIIVNV)(getProcAddr("glProgramBufferParametersIivNV")); gpProgramBufferParametersIivNV == nil {
    NV_parameter_buffer_object = false
  }
  if gpProgramBufferParametersIuivNV = (C.GPPROGRAMBUFFERPARAMETERSIUIVNV)(getProcAddr("glProgramBufferParametersIuivNV")); gpProgramBufferParametersIuivNV == nil {
    NV_parameter_buffer_object = false
  }
  if gpProgramBufferParametersfvNV = (C.GPPROGRAMBUFFERPARAMETERSFVNV)(getProcAddr("glProgramBufferParametersfvNV")); gpProgramBufferParametersfvNV == nil {
    NV_parameter_buffer_object = false
  }
  if gpProgramEnvParameter4dARB = (C.GPPROGRAMENVPARAMETER4DARB)(getProcAddr("glProgramEnvParameter4dARB")); gpProgramEnvParameter4dARB == nil {
    ARB_fragment_program = false
    ARB_vertex_program = false
  }
  if gpProgramEnvParameter4dvARB = (C.GPPROGRAMENVPARAMETER4DVARB)(getProcAddr("glProgramEnvParameter4dvARB")); gpProgramEnvParameter4dvARB == nil {
    ARB_fragment_program = false
    ARB_vertex_program = false
  }
  if gpProgramEnvParameter4fARB = (C.GPPROGRAMENVPARAMETER4FARB)(getProcAddr("glProgramEnvParameter4fARB")); gpProgramEnvParameter4fARB == nil {
    ARB_fragment_program = false
    ARB_vertex_program = false
  }
  if gpProgramEnvParameter4fvARB = (C.GPPROGRAMENVPARAMETER4FVARB)(getProcAddr("glProgramEnvParameter4fvARB")); gpProgramEnvParameter4fvARB == nil {
    ARB_fragment_program = false
    ARB_vertex_program = false
  }
  if gpProgramEnvParameterI4iNV = (C.GPPROGRAMENVPARAMETERI4INV)(getProcAddr("glProgramEnvParameterI4iNV")); gpProgramEnvParameterI4iNV == nil {
    NV_gpu_program4 = false
  }
  if gpProgramEnvParameterI4ivNV = (C.GPPROGRAMENVPARAMETERI4IVNV)(getProcAddr("glProgramEnvParameterI4ivNV")); gpProgramEnvParameterI4ivNV == nil {
    NV_gpu_program4 = false
  }
  if gpProgramEnvParameterI4uiNV = (C.GPPROGRAMENVPARAMETERI4UINV)(getProcAddr("glProgramEnvParameterI4uiNV")); gpProgramEnvParameterI4uiNV == nil {
    NV_gpu_program4 = false
  }
  if gpProgramEnvParameterI4uivNV = (C.GPPROGRAMENVPARAMETERI4UIVNV)(getProcAddr("glProgramEnvParameterI4uivNV")); gpProgramEnvParameterI4uivNV == nil {
    NV_gpu_program4 = false
  }
  if gpProgramEnvParameters4fvEXT = (C.GPPROGRAMENVPARAMETERS4FVEXT)(getProcAddr("glProgramEnvParameters4fvEXT")); gpProgramEnvParameters4fvEXT == nil {
    EXT_gpu_program_parameters = false
  }
  if gpProgramEnvParametersI4ivNV = (C.GPPROGRAMENVPARAMETERSI4IVNV)(getProcAddr("glProgramEnvParametersI4ivNV")); gpProgramEnvParametersI4ivNV == nil {
    NV_gpu_program4 = false
  }
  if gpProgramEnvParametersI4uivNV = (C.GPPROGRAMENVPARAMETERSI4UIVNV)(getProcAddr("glProgramEnvParametersI4uivNV")); gpProgramEnvParametersI4uivNV == nil {
    NV_gpu_program4 = false
  }
  if gpProgramLocalParameter4dARB = (C.GPPROGRAMLOCALPARAMETER4DARB)(getProcAddr("glProgramLocalParameter4dARB")); gpProgramLocalParameter4dARB == nil {
    ARB_fragment_program = false
    ARB_vertex_program = false
  }
  if gpProgramLocalParameter4dvARB = (C.GPPROGRAMLOCALPARAMETER4DVARB)(getProcAddr("glProgramLocalParameter4dvARB")); gpProgramLocalParameter4dvARB == nil {
    ARB_fragment_program = false
    ARB_vertex_program = false
  }
  if gpProgramLocalParameter4fARB = (C.GPPROGRAMLOCALPARAMETER4FARB)(getProcAddr("glProgramLocalParameter4fARB")); gpProgramLocalParameter4fARB == nil {
    ARB_fragment_program = false
    ARB_vertex_program = false
  }
  if gpProgramLocalParameter4fvARB = (C.GPPROGRAMLOCALPARAMETER4FVARB)(getProcAddr("glProgramLocalParameter4fvARB")); gpProgramLocalParameter4fvARB == nil {
    ARB_fragment_program = false
    ARB_vertex_program = false
  }
  if gpProgramLocalParameterI4iNV = (C.GPPROGRAMLOCALPARAMETERI4INV)(getProcAddr("glProgramLocalParameterI4iNV")); gpProgramLocalParameterI4iNV == nil {
    NV_gpu_program4 = false
  }
  if gpProgramLocalParameterI4ivNV = (C.GPPROGRAMLOCALPARAMETERI4IVNV)(getProcAddr("glProgramLocalParameterI4ivNV")); gpProgramLocalParameterI4ivNV == nil {
    NV_gpu_program4 = false
  }
  if gpProgramLocalParameterI4uiNV = (C.GPPROGRAMLOCALPARAMETERI4UINV)(getProcAddr("glProgramLocalParameterI4uiNV")); gpProgramLocalParameterI4uiNV == nil {
    NV_gpu_program4 = false
  }
  if gpProgramLocalParameterI4uivNV = (C.GPPROGRAMLOCALPARAMETERI4UIVNV)(getProcAddr("glProgramLocalParameterI4uivNV")); gpProgramLocalParameterI4uivNV == nil {
    NV_gpu_program4 = false
  }
  if gpProgramLocalParameters4fvEXT = (C.GPPROGRAMLOCALPARAMETERS4FVEXT)(getProcAddr("glProgramLocalParameters4fvEXT")); gpProgramLocalParameters4fvEXT == nil {
    EXT_gpu_program_parameters = false
  }
  if gpProgramLocalParametersI4ivNV = (C.GPPROGRAMLOCALPARAMETERSI4IVNV)(getProcAddr("glProgramLocalParametersI4ivNV")); gpProgramLocalParametersI4ivNV == nil {
    NV_gpu_program4 = false
  }
  if gpProgramLocalParametersI4uivNV = (C.GPPROGRAMLOCALPARAMETERSI4UIVNV)(getProcAddr("glProgramLocalParametersI4uivNV")); gpProgramLocalParametersI4uivNV == nil {
    NV_gpu_program4 = false
  }
  if gpProgramNamedParameter4dNV = (C.GPPROGRAMNAMEDPARAMETER4DNV)(getProcAddr("glProgramNamedParameter4dNV")); gpProgramNamedParameter4dNV == nil {
    NV_fragment_program = false
  }
  if gpProgramNamedParameter4dvNV = (C.GPPROGRAMNAMEDPARAMETER4DVNV)(getProcAddr("glProgramNamedParameter4dvNV")); gpProgramNamedParameter4dvNV == nil {
    NV_fragment_program = false
  }
  if gpProgramNamedParameter4fNV = (C.GPPROGRAMNAMEDPARAMETER4FNV)(getProcAddr("glProgramNamedParameter4fNV")); gpProgramNamedParameter4fNV == nil {
    NV_fragment_program = false
  }
  if gpProgramNamedParameter4fvNV = (C.GPPROGRAMNAMEDPARAMETER4FVNV)(getProcAddr("glProgramNamedParameter4fvNV")); gpProgramNamedParameter4fvNV == nil {
    NV_fragment_program = false
  }
  if gpProgramParameter4dNV = (C.GPPROGRAMPARAMETER4DNV)(getProcAddr("glProgramParameter4dNV")); gpProgramParameter4dNV == nil {
    NV_vertex_program = false
  }
  if gpProgramParameter4dvNV = (C.GPPROGRAMPARAMETER4DVNV)(getProcAddr("glProgramParameter4dvNV")); gpProgramParameter4dvNV == nil {
    NV_vertex_program = false
  }
  if gpProgramParameter4fNV = (C.GPPROGRAMPARAMETER4FNV)(getProcAddr("glProgramParameter4fNV")); gpProgramParameter4fNV == nil {
    NV_vertex_program = false
  }
  if gpProgramParameter4fvNV = (C.GPPROGRAMPARAMETER4FVNV)(getProcAddr("glProgramParameter4fvNV")); gpProgramParameter4fvNV == nil {
    NV_vertex_program = false
  }
  if gpProgramParameteri = (C.GPPROGRAMPARAMETERI)(getProcAddr("glProgramParameteri")); gpProgramParameteri == nil {
    ARB_get_program_binary = false
  }
  if gpProgramParameteriARB = (C.GPPROGRAMPARAMETERIARB)(getProcAddr("glProgramParameteriARB")); gpProgramParameteriARB == nil {
    ARB_geometry_shader4 = false
  }
  if gpProgramParameteriEXT = (C.GPPROGRAMPARAMETERIEXT)(getProcAddr("glProgramParameteriEXT")); gpProgramParameteriEXT == nil {
    EXT_geometry_shader4 = false
    EXT_separate_shader_objects = false
  }
  if gpProgramParameters4dvNV = (C.GPPROGRAMPARAMETERS4DVNV)(getProcAddr("glProgramParameters4dvNV")); gpProgramParameters4dvNV == nil {
    NV_vertex_program = false
  }
  if gpProgramParameters4fvNV = (C.GPPROGRAMPARAMETERS4FVNV)(getProcAddr("glProgramParameters4fvNV")); gpProgramParameters4fvNV == nil {
    NV_vertex_program = false
  }
  if gpProgramStringARB = (C.GPPROGRAMSTRINGARB)(getProcAddr("glProgramStringARB")); gpProgramStringARB == nil {
    ARB_fragment_program = false
    ARB_vertex_program = false
  }
  if gpProgramSubroutineParametersuivNV = (C.GPPROGRAMSUBROUTINEPARAMETERSUIVNV)(getProcAddr("glProgramSubroutineParametersuivNV")); gpProgramSubroutineParametersuivNV == nil {
    NV_gpu_program5 = false
  }
  if gpProgramUniform1d = (C.GPPROGRAMUNIFORM1D)(getProcAddr("glProgramUniform1d")); gpProgramUniform1d == nil {
    ARB_separate_shader_objects = false
  }
  if gpProgramUniform1dEXT = (C.GPPROGRAMUNIFORM1DEXT)(getProcAddr("glProgramUniform1dEXT")); gpProgramUniform1dEXT == nil {
    EXT_direct_state_access = false
  }
  if gpProgramUniform1dv = (C.GPPROGRAMUNIFORM1DV)(getProcAddr("glProgramUniform1dv")); gpProgramUniform1dv == nil {
    ARB_separate_shader_objects = false
  }
  if gpProgramUniform1dvEXT = (C.GPPROGRAMUNIFORM1DVEXT)(getProcAddr("glProgramUniform1dvEXT")); gpProgramUniform1dvEXT == nil {
    EXT_direct_state_access = false
  }
  if gpProgramUniform1f = (C.GPPROGRAMUNIFORM1F)(getProcAddr("glProgramUniform1f")); gpProgramUniform1f == nil {
    ARB_separate_shader_objects = false
  }
  if gpProgramUniform1fEXT = (C.GPPROGRAMUNIFORM1FEXT)(getProcAddr("glProgramUniform1fEXT")); gpProgramUniform1fEXT == nil {
    EXT_direct_state_access = false
    EXT_separate_shader_objects = false
  }
  if gpProgramUniform1fv = (C.GPPROGRAMUNIFORM1FV)(getProcAddr("glProgramUniform1fv")); gpProgramUniform1fv == nil {
    ARB_separate_shader_objects = false
  }
  if gpProgramUniform1fvEXT = (C.GPPROGRAMUNIFORM1FVEXT)(getProcAddr("glProgramUniform1fvEXT")); gpProgramUniform1fvEXT == nil {
    EXT_direct_state_access = false
    EXT_separate_shader_objects = false
  }
  if gpProgramUniform1i = (C.GPPROGRAMUNIFORM1I)(getProcAddr("glProgramUniform1i")); gpProgramUniform1i == nil {
    ARB_separate_shader_objects = false
  }
  if gpProgramUniform1i64NV = (C.GPPROGRAMUNIFORM1I64NV)(getProcAddr("glProgramUniform1i64NV")); gpProgramUniform1i64NV == nil {
    AMD_gpu_shader_int64 = false
    NV_gpu_shader5 = false
  }
  if gpProgramUniform1i64vNV = (C.GPPROGRAMUNIFORM1I64VNV)(getProcAddr("glProgramUniform1i64vNV")); gpProgramUniform1i64vNV == nil {
    AMD_gpu_shader_int64 = false
    NV_gpu_shader5 = false
  }
  if gpProgramUniform1iEXT = (C.GPPROGRAMUNIFORM1IEXT)(getProcAddr("glProgramUniform1iEXT")); gpProgramUniform1iEXT == nil {
    EXT_direct_state_access = false
    EXT_separate_shader_objects = false
  }
  if gpProgramUniform1iv = (C.GPPROGRAMUNIFORM1IV)(getProcAddr("glProgramUniform1iv")); gpProgramUniform1iv == nil {
    ARB_separate_shader_objects = false
  }
  if gpProgramUniform1ivEXT = (C.GPPROGRAMUNIFORM1IVEXT)(getProcAddr("glProgramUniform1ivEXT")); gpProgramUniform1ivEXT == nil {
    EXT_direct_state_access = false
    EXT_separate_shader_objects = false
  }
  if gpProgramUniform1ui = (C.GPPROGRAMUNIFORM1UI)(getProcAddr("glProgramUniform1ui")); gpProgramUniform1ui == nil {
    ARB_separate_shader_objects = false
  }
  if gpProgramUniform1ui64NV = (C.GPPROGRAMUNIFORM1UI64NV)(getProcAddr("glProgramUniform1ui64NV")); gpProgramUniform1ui64NV == nil {
    AMD_gpu_shader_int64 = false
    NV_gpu_shader5 = false
  }
  if gpProgramUniform1ui64vNV = (C.GPPROGRAMUNIFORM1UI64VNV)(getProcAddr("glProgramUniform1ui64vNV")); gpProgramUniform1ui64vNV == nil {
    AMD_gpu_shader_int64 = false
    NV_gpu_shader5 = false
  }
  if gpProgramUniform1uiEXT = (C.GPPROGRAMUNIFORM1UIEXT)(getProcAddr("glProgramUniform1uiEXT")); gpProgramUniform1uiEXT == nil {
    EXT_direct_state_access = false
    EXT_separate_shader_objects = false
  }
  if gpProgramUniform1uiv = (C.GPPROGRAMUNIFORM1UIV)(getProcAddr("glProgramUniform1uiv")); gpProgramUniform1uiv == nil {
    ARB_separate_shader_objects = false
  }
  if gpProgramUniform1uivEXT = (C.GPPROGRAMUNIFORM1UIVEXT)(getProcAddr("glProgramUniform1uivEXT")); gpProgramUniform1uivEXT == nil {
    EXT_direct_state_access = false
    EXT_separate_shader_objects = false
  }
  if gpProgramUniform2d = (C.GPPROGRAMUNIFORM2D)(getProcAddr("glProgramUniform2d")); gpProgramUniform2d == nil {
    ARB_separate_shader_objects = false
  }
  if gpProgramUniform2dEXT = (C.GPPROGRAMUNIFORM2DEXT)(getProcAddr("glProgramUniform2dEXT")); gpProgramUniform2dEXT == nil {
    EXT_direct_state_access = false
  }
  if gpProgramUniform2dv = (C.GPPROGRAMUNIFORM2DV)(getProcAddr("glProgramUniform2dv")); gpProgramUniform2dv == nil {
    ARB_separate_shader_objects = false
  }
  if gpProgramUniform2dvEXT = (C.GPPROGRAMUNIFORM2DVEXT)(getProcAddr("glProgramUniform2dvEXT")); gpProgramUniform2dvEXT == nil {
    EXT_direct_state_access = false
  }
  if gpProgramUniform2f = (C.GPPROGRAMUNIFORM2F)(getProcAddr("glProgramUniform2f")); gpProgramUniform2f == nil {
    ARB_separate_shader_objects = false
  }
  if gpProgramUniform2fEXT = (C.GPPROGRAMUNIFORM2FEXT)(getProcAddr("glProgramUniform2fEXT")); gpProgramUniform2fEXT == nil {
    EXT_direct_state_access = false
    EXT_separate_shader_objects = false
  }
  if gpProgramUniform2fv = (C.GPPROGRAMUNIFORM2FV)(getProcAddr("glProgramUniform2fv")); gpProgramUniform2fv == nil {
    ARB_separate_shader_objects = false
  }
  if gpProgramUniform2fvEXT = (C.GPPROGRAMUNIFORM2FVEXT)(getProcAddr("glProgramUniform2fvEXT")); gpProgramUniform2fvEXT == nil {
    EXT_direct_state_access = false
    EXT_separate_shader_objects = false
  }
  if gpProgramUniform2i = (C.GPPROGRAMUNIFORM2I)(getProcAddr("glProgramUniform2i")); gpProgramUniform2i == nil {
    ARB_separate_shader_objects = false
  }
  if gpProgramUniform2i64NV = (C.GPPROGRAMUNIFORM2I64NV)(getProcAddr("glProgramUniform2i64NV")); gpProgramUniform2i64NV == nil {
    AMD_gpu_shader_int64 = false
    NV_gpu_shader5 = false
  }
  if gpProgramUniform2i64vNV = (C.GPPROGRAMUNIFORM2I64VNV)(getProcAddr("glProgramUniform2i64vNV")); gpProgramUniform2i64vNV == nil {
    AMD_gpu_shader_int64 = false
    NV_gpu_shader5 = false
  }
  if gpProgramUniform2iEXT = (C.GPPROGRAMUNIFORM2IEXT)(getProcAddr("glProgramUniform2iEXT")); gpProgramUniform2iEXT == nil {
    EXT_direct_state_access = false
    EXT_separate_shader_objects = false
  }
  if gpProgramUniform2iv = (C.GPPROGRAMUNIFORM2IV)(getProcAddr("glProgramUniform2iv")); gpProgramUniform2iv == nil {
    ARB_separate_shader_objects = false
  }
  if gpProgramUniform2ivEXT = (C.GPPROGRAMUNIFORM2IVEXT)(getProcAddr("glProgramUniform2ivEXT")); gpProgramUniform2ivEXT == nil {
    EXT_direct_state_access = false
    EXT_separate_shader_objects = false
  }
  if gpProgramUniform2ui = (C.GPPROGRAMUNIFORM2UI)(getProcAddr("glProgramUniform2ui")); gpProgramUniform2ui == nil {
    ARB_separate_shader_objects = false
  }
  if gpProgramUniform2ui64NV = (C.GPPROGRAMUNIFORM2UI64NV)(getProcAddr("glProgramUniform2ui64NV")); gpProgramUniform2ui64NV == nil {
    AMD_gpu_shader_int64 = false
    NV_gpu_shader5 = false
  }
  if gpProgramUniform2ui64vNV = (C.GPPROGRAMUNIFORM2UI64VNV)(getProcAddr("glProgramUniform2ui64vNV")); gpProgramUniform2ui64vNV == nil {
    AMD_gpu_shader_int64 = false
    NV_gpu_shader5 = false
  }
  if gpProgramUniform2uiEXT = (C.GPPROGRAMUNIFORM2UIEXT)(getProcAddr("glProgramUniform2uiEXT")); gpProgramUniform2uiEXT == nil {
    EXT_direct_state_access = false
    EXT_separate_shader_objects = false
  }
  if gpProgramUniform2uiv = (C.GPPROGRAMUNIFORM2UIV)(getProcAddr("glProgramUniform2uiv")); gpProgramUniform2uiv == nil {
    ARB_separate_shader_objects = false
  }
  if gpProgramUniform2uivEXT = (C.GPPROGRAMUNIFORM2UIVEXT)(getProcAddr("glProgramUniform2uivEXT")); gpProgramUniform2uivEXT == nil {
    EXT_direct_state_access = false
    EXT_separate_shader_objects = false
  }
  if gpProgramUniform3d = (C.GPPROGRAMUNIFORM3D)(getProcAddr("glProgramUniform3d")); gpProgramUniform3d == nil {
    ARB_separate_shader_objects = false
  }
  if gpProgramUniform3dEXT = (C.GPPROGRAMUNIFORM3DEXT)(getProcAddr("glProgramUniform3dEXT")); gpProgramUniform3dEXT == nil {
    EXT_direct_state_access = false
  }
  if gpProgramUniform3dv = (C.GPPROGRAMUNIFORM3DV)(getProcAddr("glProgramUniform3dv")); gpProgramUniform3dv == nil {
    ARB_separate_shader_objects = false
  }
  if gpProgramUniform3dvEXT = (C.GPPROGRAMUNIFORM3DVEXT)(getProcAddr("glProgramUniform3dvEXT")); gpProgramUniform3dvEXT == nil {
    EXT_direct_state_access = false
  }
  if gpProgramUniform3f = (C.GPPROGRAMUNIFORM3F)(getProcAddr("glProgramUniform3f")); gpProgramUniform3f == nil {
    ARB_separate_shader_objects = false
  }
  if gpProgramUniform3fEXT = (C.GPPROGRAMUNIFORM3FEXT)(getProcAddr("glProgramUniform3fEXT")); gpProgramUniform3fEXT == nil {
    EXT_direct_state_access = false
    EXT_separate_shader_objects = false
  }
  if gpProgramUniform3fv = (C.GPPROGRAMUNIFORM3FV)(getProcAddr("glProgramUniform3fv")); gpProgramUniform3fv == nil {
    ARB_separate_shader_objects = false
  }
  if gpProgramUniform3fvEXT = (C.GPPROGRAMUNIFORM3FVEXT)(getProcAddr("glProgramUniform3fvEXT")); gpProgramUniform3fvEXT == nil {
    EXT_direct_state_access = false
    EXT_separate_shader_objects = false
  }
  if gpProgramUniform3i = (C.GPPROGRAMUNIFORM3I)(getProcAddr("glProgramUniform3i")); gpProgramUniform3i == nil {
    ARB_separate_shader_objects = false
  }
  if gpProgramUniform3i64NV = (C.GPPROGRAMUNIFORM3I64NV)(getProcAddr("glProgramUniform3i64NV")); gpProgramUniform3i64NV == nil {
    AMD_gpu_shader_int64 = false
    NV_gpu_shader5 = false
  }
  if gpProgramUniform3i64vNV = (C.GPPROGRAMUNIFORM3I64VNV)(getProcAddr("glProgramUniform3i64vNV")); gpProgramUniform3i64vNV == nil {
    AMD_gpu_shader_int64 = false
    NV_gpu_shader5 = false
  }
  if gpProgramUniform3iEXT = (C.GPPROGRAMUNIFORM3IEXT)(getProcAddr("glProgramUniform3iEXT")); gpProgramUniform3iEXT == nil {
    EXT_direct_state_access = false
    EXT_separate_shader_objects = false
  }
  if gpProgramUniform3iv = (C.GPPROGRAMUNIFORM3IV)(getProcAddr("glProgramUniform3iv")); gpProgramUniform3iv == nil {
    ARB_separate_shader_objects = false
  }
  if gpProgramUniform3ivEXT = (C.GPPROGRAMUNIFORM3IVEXT)(getProcAddr("glProgramUniform3ivEXT")); gpProgramUniform3ivEXT == nil {
    EXT_direct_state_access = false
    EXT_separate_shader_objects = false
  }
  if gpProgramUniform3ui = (C.GPPROGRAMUNIFORM3UI)(getProcAddr("glProgramUniform3ui")); gpProgramUniform3ui == nil {
    ARB_separate_shader_objects = false
  }
  if gpProgramUniform3ui64NV = (C.GPPROGRAMUNIFORM3UI64NV)(getProcAddr("glProgramUniform3ui64NV")); gpProgramUniform3ui64NV == nil {
    AMD_gpu_shader_int64 = false
    NV_gpu_shader5 = false
  }
  if gpProgramUniform3ui64vNV = (C.GPPROGRAMUNIFORM3UI64VNV)(getProcAddr("glProgramUniform3ui64vNV")); gpProgramUniform3ui64vNV == nil {
    AMD_gpu_shader_int64 = false
    NV_gpu_shader5 = false
  }
  if gpProgramUniform3uiEXT = (C.GPPROGRAMUNIFORM3UIEXT)(getProcAddr("glProgramUniform3uiEXT")); gpProgramUniform3uiEXT == nil {
    EXT_direct_state_access = false
    EXT_separate_shader_objects = false
  }
  if gpProgramUniform3uiv = (C.GPPROGRAMUNIFORM3UIV)(getProcAddr("glProgramUniform3uiv")); gpProgramUniform3uiv == nil {
    ARB_separate_shader_objects = false
  }
  if gpProgramUniform3uivEXT = (C.GPPROGRAMUNIFORM3UIVEXT)(getProcAddr("glProgramUniform3uivEXT")); gpProgramUniform3uivEXT == nil {
    EXT_direct_state_access = false
    EXT_separate_shader_objects = false
  }
  if gpProgramUniform4d = (C.GPPROGRAMUNIFORM4D)(getProcAddr("glProgramUniform4d")); gpProgramUniform4d == nil {
    ARB_separate_shader_objects = false
  }
  if gpProgramUniform4dEXT = (C.GPPROGRAMUNIFORM4DEXT)(getProcAddr("glProgramUniform4dEXT")); gpProgramUniform4dEXT == nil {
    EXT_direct_state_access = false
  }
  if gpProgramUniform4dv = (C.GPPROGRAMUNIFORM4DV)(getProcAddr("glProgramUniform4dv")); gpProgramUniform4dv == nil {
    ARB_separate_shader_objects = false
  }
  if gpProgramUniform4dvEXT = (C.GPPROGRAMUNIFORM4DVEXT)(getProcAddr("glProgramUniform4dvEXT")); gpProgramUniform4dvEXT == nil {
    EXT_direct_state_access = false
  }
  if gpProgramUniform4f = (C.GPPROGRAMUNIFORM4F)(getProcAddr("glProgramUniform4f")); gpProgramUniform4f == nil {
    ARB_separate_shader_objects = false
  }
  if gpProgramUniform4fEXT = (C.GPPROGRAMUNIFORM4FEXT)(getProcAddr("glProgramUniform4fEXT")); gpProgramUniform4fEXT == nil {
    EXT_direct_state_access = false
    EXT_separate_shader_objects = false
  }
  if gpProgramUniform4fv = (C.GPPROGRAMUNIFORM4FV)(getProcAddr("glProgramUniform4fv")); gpProgramUniform4fv == nil {
    ARB_separate_shader_objects = false
  }
  if gpProgramUniform4fvEXT = (C.GPPROGRAMUNIFORM4FVEXT)(getProcAddr("glProgramUniform4fvEXT")); gpProgramUniform4fvEXT == nil {
    EXT_direct_state_access = false
    EXT_separate_shader_objects = false
  }
  if gpProgramUniform4i = (C.GPPROGRAMUNIFORM4I)(getProcAddr("glProgramUniform4i")); gpProgramUniform4i == nil {
    ARB_separate_shader_objects = false
  }
  if gpProgramUniform4i64NV = (C.GPPROGRAMUNIFORM4I64NV)(getProcAddr("glProgramUniform4i64NV")); gpProgramUniform4i64NV == nil {
    AMD_gpu_shader_int64 = false
    NV_gpu_shader5 = false
  }
  if gpProgramUniform4i64vNV = (C.GPPROGRAMUNIFORM4I64VNV)(getProcAddr("glProgramUniform4i64vNV")); gpProgramUniform4i64vNV == nil {
    AMD_gpu_shader_int64 = false
    NV_gpu_shader5 = false
  }
  if gpProgramUniform4iEXT = (C.GPPROGRAMUNIFORM4IEXT)(getProcAddr("glProgramUniform4iEXT")); gpProgramUniform4iEXT == nil {
    EXT_direct_state_access = false
    EXT_separate_shader_objects = false
  }
  if gpProgramUniform4iv = (C.GPPROGRAMUNIFORM4IV)(getProcAddr("glProgramUniform4iv")); gpProgramUniform4iv == nil {
    ARB_separate_shader_objects = false
  }
  if gpProgramUniform4ivEXT = (C.GPPROGRAMUNIFORM4IVEXT)(getProcAddr("glProgramUniform4ivEXT")); gpProgramUniform4ivEXT == nil {
    EXT_direct_state_access = false
    EXT_separate_shader_objects = false
  }
  if gpProgramUniform4ui = (C.GPPROGRAMUNIFORM4UI)(getProcAddr("glProgramUniform4ui")); gpProgramUniform4ui == nil {
    ARB_separate_shader_objects = false
  }
  if gpProgramUniform4ui64NV = (C.GPPROGRAMUNIFORM4UI64NV)(getProcAddr("glProgramUniform4ui64NV")); gpProgramUniform4ui64NV == nil {
    AMD_gpu_shader_int64 = false
    NV_gpu_shader5 = false
  }
  if gpProgramUniform4ui64vNV = (C.GPPROGRAMUNIFORM4UI64VNV)(getProcAddr("glProgramUniform4ui64vNV")); gpProgramUniform4ui64vNV == nil {
    AMD_gpu_shader_int64 = false
    NV_gpu_shader5 = false
  }
  if gpProgramUniform4uiEXT = (C.GPPROGRAMUNIFORM4UIEXT)(getProcAddr("glProgramUniform4uiEXT")); gpProgramUniform4uiEXT == nil {
    EXT_direct_state_access = false
    EXT_separate_shader_objects = false
  }
  if gpProgramUniform4uiv = (C.GPPROGRAMUNIFORM4UIV)(getProcAddr("glProgramUniform4uiv")); gpProgramUniform4uiv == nil {
    ARB_separate_shader_objects = false
  }
  if gpProgramUniform4uivEXT = (C.GPPROGRAMUNIFORM4UIVEXT)(getProcAddr("glProgramUniform4uivEXT")); gpProgramUniform4uivEXT == nil {
    EXT_direct_state_access = false
    EXT_separate_shader_objects = false
  }
  if gpProgramUniformHandleui64ARB = (C.GPPROGRAMUNIFORMHANDLEUI64ARB)(getProcAddr("glProgramUniformHandleui64ARB")); gpProgramUniformHandleui64ARB == nil {
    ARB_bindless_texture = false
  }
  if gpProgramUniformHandleui64NV = (C.GPPROGRAMUNIFORMHANDLEUI64NV)(getProcAddr("glProgramUniformHandleui64NV")); gpProgramUniformHandleui64NV == nil {
    NV_bindless_texture = false
  }
  if gpProgramUniformHandleui64vARB = (C.GPPROGRAMUNIFORMHANDLEUI64VARB)(getProcAddr("glProgramUniformHandleui64vARB")); gpProgramUniformHandleui64vARB == nil {
    ARB_bindless_texture = false
  }
  if gpProgramUniformHandleui64vNV = (C.GPPROGRAMUNIFORMHANDLEUI64VNV)(getProcAddr("glProgramUniformHandleui64vNV")); gpProgramUniformHandleui64vNV == nil {
    NV_bindless_texture = false
  }
  if gpProgramUniformMatrix2dv = (C.GPPROGRAMUNIFORMMATRIX2DV)(getProcAddr("glProgramUniformMatrix2dv")); gpProgramUniformMatrix2dv == nil {
    ARB_separate_shader_objects = false
  }
  if gpProgramUniformMatrix2dvEXT = (C.GPPROGRAMUNIFORMMATRIX2DVEXT)(getProcAddr("glProgramUniformMatrix2dvEXT")); gpProgramUniformMatrix2dvEXT == nil {
    EXT_direct_state_access = false
  }
  if gpProgramUniformMatrix2fv = (C.GPPROGRAMUNIFORMMATRIX2FV)(getProcAddr("glProgramUniformMatrix2fv")); gpProgramUniformMatrix2fv == nil {
    ARB_separate_shader_objects = false
  }
  if gpProgramUniformMatrix2fvEXT = (C.GPPROGRAMUNIFORMMATRIX2FVEXT)(getProcAddr("glProgramUniformMatrix2fvEXT")); gpProgramUniformMatrix2fvEXT == nil {
    EXT_direct_state_access = false
    EXT_separate_shader_objects = false
  }
  if gpProgramUniformMatrix2x3dv = (C.GPPROGRAMUNIFORMMATRIX2X3DV)(getProcAddr("glProgramUniformMatrix2x3dv")); gpProgramUniformMatrix2x3dv == nil {
    ARB_separate_shader_objects = false
  }
  if gpProgramUniformMatrix2x3dvEXT = (C.GPPROGRAMUNIFORMMATRIX2X3DVEXT)(getProcAddr("glProgramUniformMatrix2x3dvEXT")); gpProgramUniformMatrix2x3dvEXT == nil {
    EXT_direct_state_access = false
  }
  if gpProgramUniformMatrix2x3fv = (C.GPPROGRAMUNIFORMMATRIX2X3FV)(getProcAddr("glProgramUniformMatrix2x3fv")); gpProgramUniformMatrix2x3fv == nil {
    ARB_separate_shader_objects = false
  }
  if gpProgramUniformMatrix2x3fvEXT = (C.GPPROGRAMUNIFORMMATRIX2X3FVEXT)(getProcAddr("glProgramUniformMatrix2x3fvEXT")); gpProgramUniformMatrix2x3fvEXT == nil {
    EXT_direct_state_access = false
    EXT_separate_shader_objects = false
  }
  if gpProgramUniformMatrix2x4dv = (C.GPPROGRAMUNIFORMMATRIX2X4DV)(getProcAddr("glProgramUniformMatrix2x4dv")); gpProgramUniformMatrix2x4dv == nil {
    ARB_separate_shader_objects = false
  }
  if gpProgramUniformMatrix2x4dvEXT = (C.GPPROGRAMUNIFORMMATRIX2X4DVEXT)(getProcAddr("glProgramUniformMatrix2x4dvEXT")); gpProgramUniformMatrix2x4dvEXT == nil {
    EXT_direct_state_access = false
  }
  if gpProgramUniformMatrix2x4fv = (C.GPPROGRAMUNIFORMMATRIX2X4FV)(getProcAddr("glProgramUniformMatrix2x4fv")); gpProgramUniformMatrix2x4fv == nil {
    ARB_separate_shader_objects = false
  }
  if gpProgramUniformMatrix2x4fvEXT = (C.GPPROGRAMUNIFORMMATRIX2X4FVEXT)(getProcAddr("glProgramUniformMatrix2x4fvEXT")); gpProgramUniformMatrix2x4fvEXT == nil {
    EXT_direct_state_access = false
    EXT_separate_shader_objects = false
  }
  if gpProgramUniformMatrix3dv = (C.GPPROGRAMUNIFORMMATRIX3DV)(getProcAddr("glProgramUniformMatrix3dv")); gpProgramUniformMatrix3dv == nil {
    ARB_separate_shader_objects = false
  }
  if gpProgramUniformMatrix3dvEXT = (C.GPPROGRAMUNIFORMMATRIX3DVEXT)(getProcAddr("glProgramUniformMatrix3dvEXT")); gpProgramUniformMatrix3dvEXT == nil {
    EXT_direct_state_access = false
  }
  if gpProgramUniformMatrix3fv = (C.GPPROGRAMUNIFORMMATRIX3FV)(getProcAddr("glProgramUniformMatrix3fv")); gpProgramUniformMatrix3fv == nil {
    ARB_separate_shader_objects = false
  }
  if gpProgramUniformMatrix3fvEXT = (C.GPPROGRAMUNIFORMMATRIX3FVEXT)(getProcAddr("glProgramUniformMatrix3fvEXT")); gpProgramUniformMatrix3fvEXT == nil {
    EXT_direct_state_access = false
    EXT_separate_shader_objects = false
  }
  if gpProgramUniformMatrix3x2dv = (C.GPPROGRAMUNIFORMMATRIX3X2DV)(getProcAddr("glProgramUniformMatrix3x2dv")); gpProgramUniformMatrix3x2dv == nil {
    ARB_separate_shader_objects = false
  }
  if gpProgramUniformMatrix3x2dvEXT = (C.GPPROGRAMUNIFORMMATRIX3X2DVEXT)(getProcAddr("glProgramUniformMatrix3x2dvEXT")); gpProgramUniformMatrix3x2dvEXT == nil {
    EXT_direct_state_access = false
  }
  if gpProgramUniformMatrix3x2fv = (C.GPPROGRAMUNIFORMMATRIX3X2FV)(getProcAddr("glProgramUniformMatrix3x2fv")); gpProgramUniformMatrix3x2fv == nil {
    ARB_separate_shader_objects = false
  }
  if gpProgramUniformMatrix3x2fvEXT = (C.GPPROGRAMUNIFORMMATRIX3X2FVEXT)(getProcAddr("glProgramUniformMatrix3x2fvEXT")); gpProgramUniformMatrix3x2fvEXT == nil {
    EXT_direct_state_access = false
    EXT_separate_shader_objects = false
  }
  if gpProgramUniformMatrix3x4dv = (C.GPPROGRAMUNIFORMMATRIX3X4DV)(getProcAddr("glProgramUniformMatrix3x4dv")); gpProgramUniformMatrix3x4dv == nil {
    ARB_separate_shader_objects = false
  }
  if gpProgramUniformMatrix3x4dvEXT = (C.GPPROGRAMUNIFORMMATRIX3X4DVEXT)(getProcAddr("glProgramUniformMatrix3x4dvEXT")); gpProgramUniformMatrix3x4dvEXT == nil {
    EXT_direct_state_access = false
  }
  if gpProgramUniformMatrix3x4fv = (C.GPPROGRAMUNIFORMMATRIX3X4FV)(getProcAddr("glProgramUniformMatrix3x4fv")); gpProgramUniformMatrix3x4fv == nil {
    ARB_separate_shader_objects = false
  }
  if gpProgramUniformMatrix3x4fvEXT = (C.GPPROGRAMUNIFORMMATRIX3X4FVEXT)(getProcAddr("glProgramUniformMatrix3x4fvEXT")); gpProgramUniformMatrix3x4fvEXT == nil {
    EXT_direct_state_access = false
    EXT_separate_shader_objects = false
  }
  if gpProgramUniformMatrix4dv = (C.GPPROGRAMUNIFORMMATRIX4DV)(getProcAddr("glProgramUniformMatrix4dv")); gpProgramUniformMatrix4dv == nil {
    ARB_separate_shader_objects = false
  }
  if gpProgramUniformMatrix4dvEXT = (C.GPPROGRAMUNIFORMMATRIX4DVEXT)(getProcAddr("glProgramUniformMatrix4dvEXT")); gpProgramUniformMatrix4dvEXT == nil {
    EXT_direct_state_access = false
  }
  if gpProgramUniformMatrix4fv = (C.GPPROGRAMUNIFORMMATRIX4FV)(getProcAddr("glProgramUniformMatrix4fv")); gpProgramUniformMatrix4fv == nil {
    ARB_separate_shader_objects = false
  }
  if gpProgramUniformMatrix4fvEXT = (C.GPPROGRAMUNIFORMMATRIX4FVEXT)(getProcAddr("glProgramUniformMatrix4fvEXT")); gpProgramUniformMatrix4fvEXT == nil {
    EXT_direct_state_access = false
    EXT_separate_shader_objects = false
    EXT_separate_shader_objects = false
  }
  if gpProgramUniformMatrix4x2dv = (C.GPPROGRAMUNIFORMMATRIX4X2DV)(getProcAddr("glProgramUniformMatrix4x2dv")); gpProgramUniformMatrix4x2dv == nil {
    ARB_separate_shader_objects = false
  }
  if gpProgramUniformMatrix4x2dvEXT = (C.GPPROGRAMUNIFORMMATRIX4X2DVEXT)(getProcAddr("glProgramUniformMatrix4x2dvEXT")); gpProgramUniformMatrix4x2dvEXT == nil {
    EXT_direct_state_access = false
  }
  if gpProgramUniformMatrix4x2fv = (C.GPPROGRAMUNIFORMMATRIX4X2FV)(getProcAddr("glProgramUniformMatrix4x2fv")); gpProgramUniformMatrix4x2fv == nil {
    ARB_separate_shader_objects = false
  }
  if gpProgramUniformMatrix4x2fvEXT = (C.GPPROGRAMUNIFORMMATRIX4X2FVEXT)(getProcAddr("glProgramUniformMatrix4x2fvEXT")); gpProgramUniformMatrix4x2fvEXT == nil {
    EXT_direct_state_access = false
    EXT_separate_shader_objects = false
  }
  if gpProgramUniformMatrix4x3dv = (C.GPPROGRAMUNIFORMMATRIX4X3DV)(getProcAddr("glProgramUniformMatrix4x3dv")); gpProgramUniformMatrix4x3dv == nil {
    ARB_separate_shader_objects = false
  }
  if gpProgramUniformMatrix4x3dvEXT = (C.GPPROGRAMUNIFORMMATRIX4X3DVEXT)(getProcAddr("glProgramUniformMatrix4x3dvEXT")); gpProgramUniformMatrix4x3dvEXT == nil {
    EXT_direct_state_access = false
  }
  if gpProgramUniformMatrix4x3fv = (C.GPPROGRAMUNIFORMMATRIX4X3FV)(getProcAddr("glProgramUniformMatrix4x3fv")); gpProgramUniformMatrix4x3fv == nil {
    ARB_separate_shader_objects = false
  }
  if gpProgramUniformMatrix4x3fvEXT = (C.GPPROGRAMUNIFORMMATRIX4X3FVEXT)(getProcAddr("glProgramUniformMatrix4x3fvEXT")); gpProgramUniformMatrix4x3fvEXT == nil {
    EXT_direct_state_access = false
    EXT_separate_shader_objects = false
  }
  if gpProgramUniformui64NV = (C.GPPROGRAMUNIFORMUI64NV)(getProcAddr("glProgramUniformui64NV")); gpProgramUniformui64NV == nil {
    NV_shader_buffer_load = false
  }
  if gpProgramUniformui64vNV = (C.GPPROGRAMUNIFORMUI64VNV)(getProcAddr("glProgramUniformui64vNV")); gpProgramUniformui64vNV == nil {
    NV_shader_buffer_load = false
  }
  if gpProgramVertexLimitNV = (C.GPPROGRAMVERTEXLIMITNV)(getProcAddr("glProgramVertexLimitNV")); gpProgramVertexLimitNV == nil {
    NV_geometry_program4 = false
  }
  if gpProvokingVertex = (C.GPPROVOKINGVERTEX)(getProcAddr("glProvokingVertex")); gpProvokingVertex == nil {
    ARB_provoking_vertex = false
    return errors.New("glProvokingVertex")
  }
  if gpProvokingVertexEXT = (C.GPPROVOKINGVERTEXEXT)(getProcAddr("glProvokingVertexEXT")); gpProvokingVertexEXT == nil {
    EXT_provoking_vertex = false
  }
  if gpPushClientAttribDefaultEXT = (C.GPPUSHCLIENTATTRIBDEFAULTEXT)(getProcAddr("glPushClientAttribDefaultEXT")); gpPushClientAttribDefaultEXT == nil {
    EXT_direct_state_access = false
  }
  if gpPushDebugGroup = (C.GPPUSHDEBUGGROUP)(getProcAddr("glPushDebugGroup")); gpPushDebugGroup == nil {
    KHR_debug = false
  }
  if gpPushDebugGroupKHR = (C.GPPUSHDEBUGGROUPKHR)(getProcAddr("glPushDebugGroupKHR")); gpPushDebugGroupKHR == nil {
    KHR_debug = false
  }
  if gpPushGroupMarkerEXT = (C.GPPUSHGROUPMARKEREXT)(getProcAddr("glPushGroupMarkerEXT")); gpPushGroupMarkerEXT == nil {
    EXT_debug_marker = false
  }
  if gpQueryCounter = (C.GPQUERYCOUNTER)(getProcAddr("glQueryCounter")); gpQueryCounter == nil {
    ARB_timer_query = false
    return errors.New("glQueryCounter")
  }
  if gpQueryMatrixxOES = (C.GPQUERYMATRIXXOES)(getProcAddr("glQueryMatrixxOES")); gpQueryMatrixxOES == nil {
    OES_query_matrix = false
  }
  if gpQueryObjectParameteruiAMD = (C.GPQUERYOBJECTPARAMETERUIAMD)(getProcAddr("glQueryObjectParameteruiAMD")); gpQueryObjectParameteruiAMD == nil {
    AMD_occlusion_query_event = false
  }
  if gpRasterPos2xOES = (C.GPRASTERPOS2XOES)(getProcAddr("glRasterPos2xOES")); gpRasterPos2xOES == nil {
    OES_fixed_point = false
  }
  if gpRasterPos2xvOES = (C.GPRASTERPOS2XVOES)(getProcAddr("glRasterPos2xvOES")); gpRasterPos2xvOES == nil {
    OES_fixed_point = false
  }
  if gpRasterPos3xOES = (C.GPRASTERPOS3XOES)(getProcAddr("glRasterPos3xOES")); gpRasterPos3xOES == nil {
    OES_fixed_point = false
  }
  if gpRasterPos3xvOES = (C.GPRASTERPOS3XVOES)(getProcAddr("glRasterPos3xvOES")); gpRasterPos3xvOES == nil {
    OES_fixed_point = false
  }
  if gpRasterPos4xOES = (C.GPRASTERPOS4XOES)(getProcAddr("glRasterPos4xOES")); gpRasterPos4xOES == nil {
    OES_fixed_point = false
  }
  if gpRasterPos4xvOES = (C.GPRASTERPOS4XVOES)(getProcAddr("glRasterPos4xvOES")); gpRasterPos4xvOES == nil {
    OES_fixed_point = false
  }
  if gpReadBuffer = (C.GPREADBUFFER)(getProcAddr("glReadBuffer")); gpReadBuffer == nil {
    return errors.New("glReadBuffer")
  }
  if gpReadInstrumentsSGIX = (C.GPREADINSTRUMENTSSGIX)(getProcAddr("glReadInstrumentsSGIX")); gpReadInstrumentsSGIX == nil {
    SGIX_instruments = false
  }
  if gpReadPixels = (C.GPREADPIXELS)(getProcAddr("glReadPixels")); gpReadPixels == nil {
    return errors.New("glReadPixels")
  }
  if gpReadnPixelsARB = (C.GPREADNPIXELSARB)(getProcAddr("glReadnPixelsARB")); gpReadnPixelsARB == nil {
    ARB_robustness = false
  }
  if gpRectxOES = (C.GPRECTXOES)(getProcAddr("glRectxOES")); gpRectxOES == nil {
    OES_fixed_point = false
  }
  if gpRectxvOES = (C.GPRECTXVOES)(getProcAddr("glRectxvOES")); gpRectxvOES == nil {
    OES_fixed_point = false
  }
  if gpReferencePlaneSGIX = (C.GPREFERENCEPLANESGIX)(getProcAddr("glReferencePlaneSGIX")); gpReferencePlaneSGIX == nil {
    SGIX_reference_plane = false
  }
  if gpReleaseShaderCompiler = (C.GPRELEASESHADERCOMPILER)(getProcAddr("glReleaseShaderCompiler")); gpReleaseShaderCompiler == nil {
    ARB_ES2_compatibility = false
  }
  if gpRenderbufferStorage = (C.GPRENDERBUFFERSTORAGE)(getProcAddr("glRenderbufferStorage")); gpRenderbufferStorage == nil {
    ARB_framebuffer_object = false
    return errors.New("glRenderbufferStorage")
  }
  if gpRenderbufferStorageEXT = (C.GPRENDERBUFFERSTORAGEEXT)(getProcAddr("glRenderbufferStorageEXT")); gpRenderbufferStorageEXT == nil {
    EXT_framebuffer_object = false
  }
  if gpRenderbufferStorageMultisample = (C.GPRENDERBUFFERSTORAGEMULTISAMPLE)(getProcAddr("glRenderbufferStorageMultisample")); gpRenderbufferStorageMultisample == nil {
    ARB_framebuffer_object = false
    return errors.New("glRenderbufferStorageMultisample")
  }
  if gpRenderbufferStorageMultisampleCoverageNV = (C.GPRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENV)(getProcAddr("glRenderbufferStorageMultisampleCoverageNV")); gpRenderbufferStorageMultisampleCoverageNV == nil {
    NV_framebuffer_multisample_coverage = false
  }
  if gpRenderbufferStorageMultisampleEXT = (C.GPRENDERBUFFERSTORAGEMULTISAMPLEEXT)(getProcAddr("glRenderbufferStorageMultisampleEXT")); gpRenderbufferStorageMultisampleEXT == nil {
    EXT_framebuffer_multisample = false
  }
  if gpReplacementCodePointerSUN = (C.GPREPLACEMENTCODEPOINTERSUN)(getProcAddr("glReplacementCodePointerSUN")); gpReplacementCodePointerSUN == nil {
    SUN_triangle_list = false
  }
  if gpReplacementCodeubSUN = (C.GPREPLACEMENTCODEUBSUN)(getProcAddr("glReplacementCodeubSUN")); gpReplacementCodeubSUN == nil {
    SUN_triangle_list = false
  }
  if gpReplacementCodeubvSUN = (C.GPREPLACEMENTCODEUBVSUN)(getProcAddr("glReplacementCodeubvSUN")); gpReplacementCodeubvSUN == nil {
    SUN_triangle_list = false
  }
  if gpReplacementCodeuiColor3fVertex3fSUN = (C.GPREPLACEMENTCODEUICOLOR3FVERTEX3FSUN)(getProcAddr("glReplacementCodeuiColor3fVertex3fSUN")); gpReplacementCodeuiColor3fVertex3fSUN == nil {
    SUN_vertex = false
  }
  if gpReplacementCodeuiColor3fVertex3fvSUN = (C.GPREPLACEMENTCODEUICOLOR3FVERTEX3FVSUN)(getProcAddr("glReplacementCodeuiColor3fVertex3fvSUN")); gpReplacementCodeuiColor3fVertex3fvSUN == nil {
    SUN_vertex = false
  }
  if gpReplacementCodeuiColor4fNormal3fVertex3fSUN = (C.GPREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUN)(getProcAddr("glReplacementCodeuiColor4fNormal3fVertex3fSUN")); gpReplacementCodeuiColor4fNormal3fVertex3fSUN == nil {
    SUN_vertex = false
  }
  if gpReplacementCodeuiColor4fNormal3fVertex3fvSUN = (C.GPREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUN)(getProcAddr("glReplacementCodeuiColor4fNormal3fVertex3fvSUN")); gpReplacementCodeuiColor4fNormal3fVertex3fvSUN == nil {
    SUN_vertex = false
  }
  if gpReplacementCodeuiColor4ubVertex3fSUN = (C.GPREPLACEMENTCODEUICOLOR4UBVERTEX3FSUN)(getProcAddr("glReplacementCodeuiColor4ubVertex3fSUN")); gpReplacementCodeuiColor4ubVertex3fSUN == nil {
    SUN_vertex = false
  }
  if gpReplacementCodeuiColor4ubVertex3fvSUN = (C.GPREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUN)(getProcAddr("glReplacementCodeuiColor4ubVertex3fvSUN")); gpReplacementCodeuiColor4ubVertex3fvSUN == nil {
    SUN_vertex = false
  }
  if gpReplacementCodeuiNormal3fVertex3fSUN = (C.GPREPLACEMENTCODEUINORMAL3FVERTEX3FSUN)(getProcAddr("glReplacementCodeuiNormal3fVertex3fSUN")); gpReplacementCodeuiNormal3fVertex3fSUN == nil {
    SUN_vertex = false
  }
  if gpReplacementCodeuiNormal3fVertex3fvSUN = (C.GPREPLACEMENTCODEUINORMAL3FVERTEX3FVSUN)(getProcAddr("glReplacementCodeuiNormal3fVertex3fvSUN")); gpReplacementCodeuiNormal3fVertex3fvSUN == nil {
    SUN_vertex = false
  }
  if gpReplacementCodeuiSUN = (C.GPREPLACEMENTCODEUISUN)(getProcAddr("glReplacementCodeuiSUN")); gpReplacementCodeuiSUN == nil {
    SUN_triangle_list = false
  }
  if gpReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = (C.GPREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUN)(getProcAddr("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN")); gpReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN == nil {
    SUN_vertex = false
  }
  if gpReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = (C.GPREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUN)(getProcAddr("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN")); gpReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN == nil {
    SUN_vertex = false
  }
  if gpReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = (C.GPREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUN)(getProcAddr("glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN")); gpReplacementCodeuiTexCoord2fNormal3fVertex3fSUN == nil {
    SUN_vertex = false
  }
  if gpReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = (C.GPREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUN)(getProcAddr("glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN")); gpReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN == nil {
    SUN_vertex = false
  }
  if gpReplacementCodeuiTexCoord2fVertex3fSUN = (C.GPREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUN)(getProcAddr("glReplacementCodeuiTexCoord2fVertex3fSUN")); gpReplacementCodeuiTexCoord2fVertex3fSUN == nil {
    SUN_vertex = false
  }
  if gpReplacementCodeuiTexCoord2fVertex3fvSUN = (C.GPREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUN)(getProcAddr("glReplacementCodeuiTexCoord2fVertex3fvSUN")); gpReplacementCodeuiTexCoord2fVertex3fvSUN == nil {
    SUN_vertex = false
  }
  if gpReplacementCodeuiVertex3fSUN = (C.GPREPLACEMENTCODEUIVERTEX3FSUN)(getProcAddr("glReplacementCodeuiVertex3fSUN")); gpReplacementCodeuiVertex3fSUN == nil {
    SUN_vertex = false
  }
  if gpReplacementCodeuiVertex3fvSUN = (C.GPREPLACEMENTCODEUIVERTEX3FVSUN)(getProcAddr("glReplacementCodeuiVertex3fvSUN")); gpReplacementCodeuiVertex3fvSUN == nil {
    SUN_vertex = false
  }
  if gpReplacementCodeuivSUN = (C.GPREPLACEMENTCODEUIVSUN)(getProcAddr("glReplacementCodeuivSUN")); gpReplacementCodeuivSUN == nil {
    SUN_triangle_list = false
  }
  if gpReplacementCodeusSUN = (C.GPREPLACEMENTCODEUSSUN)(getProcAddr("glReplacementCodeusSUN")); gpReplacementCodeusSUN == nil {
    SUN_triangle_list = false
  }
  if gpReplacementCodeusvSUN = (C.GPREPLACEMENTCODEUSVSUN)(getProcAddr("glReplacementCodeusvSUN")); gpReplacementCodeusvSUN == nil {
    SUN_triangle_list = false
  }
  if gpRequestResidentProgramsNV = (C.GPREQUESTRESIDENTPROGRAMSNV)(getProcAddr("glRequestResidentProgramsNV")); gpRequestResidentProgramsNV == nil {
    NV_vertex_program = false
  }
  if gpResetHistogramEXT = (C.GPRESETHISTOGRAMEXT)(getProcAddr("glResetHistogramEXT")); gpResetHistogramEXT == nil {
    EXT_histogram = false
  }
  if gpResetMinmaxEXT = (C.GPRESETMINMAXEXT)(getProcAddr("glResetMinmaxEXT")); gpResetMinmaxEXT == nil {
    EXT_histogram = false
  }
  if gpResizeBuffersMESA = (C.GPRESIZEBUFFERSMESA)(getProcAddr("glResizeBuffersMESA")); gpResizeBuffersMESA == nil {
    MESA_resize_buffers = false
  }
  if gpResumeTransformFeedback = (C.GPRESUMETRANSFORMFEEDBACK)(getProcAddr("glResumeTransformFeedback")); gpResumeTransformFeedback == nil {
    ARB_transform_feedback2 = false
  }
  if gpResumeTransformFeedbackNV = (C.GPRESUMETRANSFORMFEEDBACKNV)(getProcAddr("glResumeTransformFeedbackNV")); gpResumeTransformFeedbackNV == nil {
    NV_transform_feedback2 = false
  }
  if gpRotatexOES = (C.GPROTATEXOES)(getProcAddr("glRotatexOES")); gpRotatexOES == nil {
    OES_fixed_point = false
  }
  if gpSampleCoverage = (C.GPSAMPLECOVERAGE)(getProcAddr("glSampleCoverage")); gpSampleCoverage == nil {
    return errors.New("glSampleCoverage")
  }
  if gpSampleCoverageARB = (C.GPSAMPLECOVERAGEARB)(getProcAddr("glSampleCoverageARB")); gpSampleCoverageARB == nil {
    ARB_multisample = false
  }
  if gpSampleCoverageOES = (C.GPSAMPLECOVERAGEOES)(getProcAddr("glSampleCoverageOES")); gpSampleCoverageOES == nil {
    OES_fixed_point = false
  }
  if gpSampleCoveragexOES = (C.GPSAMPLECOVERAGEXOES)(getProcAddr("glSampleCoveragexOES")); gpSampleCoveragexOES == nil {
    OES_fixed_point = false
  }
  if gpSampleMapATI = (C.GPSAMPLEMAPATI)(getProcAddr("glSampleMapATI")); gpSampleMapATI == nil {
    ATI_fragment_shader = false
  }
  if gpSampleMaskEXT = (C.GPSAMPLEMASKEXT)(getProcAddr("glSampleMaskEXT")); gpSampleMaskEXT == nil {
    EXT_multisample = false
  }
  if gpSampleMaskIndexedNV = (C.GPSAMPLEMASKINDEXEDNV)(getProcAddr("glSampleMaskIndexedNV")); gpSampleMaskIndexedNV == nil {
    NV_explicit_multisample = false
  }
  if gpSampleMaskSGIS = (C.GPSAMPLEMASKSGIS)(getProcAddr("glSampleMaskSGIS")); gpSampleMaskSGIS == nil {
    SGIS_multisample = false
  }
  if gpSampleMaski = (C.GPSAMPLEMASKI)(getProcAddr("glSampleMaski")); gpSampleMaski == nil {
    ARB_texture_multisample = false
    return errors.New("glSampleMaski")
  }
  if gpSamplePatternEXT = (C.GPSAMPLEPATTERNEXT)(getProcAddr("glSamplePatternEXT")); gpSamplePatternEXT == nil {
    EXT_multisample = false
  }
  if gpSamplePatternSGIS = (C.GPSAMPLEPATTERNSGIS)(getProcAddr("glSamplePatternSGIS")); gpSamplePatternSGIS == nil {
    SGIS_multisample = false
  }
  if gpSamplerParameterIiv = (C.GPSAMPLERPARAMETERIIV)(getProcAddr("glSamplerParameterIiv")); gpSamplerParameterIiv == nil {
    ARB_sampler_objects = false
    return errors.New("glSamplerParameterIiv")
  }
  if gpSamplerParameterIuiv = (C.GPSAMPLERPARAMETERIUIV)(getProcAddr("glSamplerParameterIuiv")); gpSamplerParameterIuiv == nil {
    ARB_sampler_objects = false
    return errors.New("glSamplerParameterIuiv")
  }
  if gpSamplerParameterf = (C.GPSAMPLERPARAMETERF)(getProcAddr("glSamplerParameterf")); gpSamplerParameterf == nil {
    ARB_sampler_objects = false
    return errors.New("glSamplerParameterf")
  }
  if gpSamplerParameterfv = (C.GPSAMPLERPARAMETERFV)(getProcAddr("glSamplerParameterfv")); gpSamplerParameterfv == nil {
    ARB_sampler_objects = false
    return errors.New("glSamplerParameterfv")
  }
  if gpSamplerParameteri = (C.GPSAMPLERPARAMETERI)(getProcAddr("glSamplerParameteri")); gpSamplerParameteri == nil {
    ARB_sampler_objects = false
    return errors.New("glSamplerParameteri")
  }
  if gpSamplerParameteriv = (C.GPSAMPLERPARAMETERIV)(getProcAddr("glSamplerParameteriv")); gpSamplerParameteriv == nil {
    ARB_sampler_objects = false
    return errors.New("glSamplerParameteriv")
  }
  if gpScalexOES = (C.GPSCALEXOES)(getProcAddr("glScalexOES")); gpScalexOES == nil {
    OES_fixed_point = false
  }
  if gpScissor = (C.GPSCISSOR)(getProcAddr("glScissor")); gpScissor == nil {
    return errors.New("glScissor")
  }
  if gpScissorArrayv = (C.GPSCISSORARRAYV)(getProcAddr("glScissorArrayv")); gpScissorArrayv == nil {
    ARB_viewport_array = false
  }
  if gpScissorIndexed = (C.GPSCISSORINDEXED)(getProcAddr("glScissorIndexed")); gpScissorIndexed == nil {
    ARB_viewport_array = false
  }
  if gpScissorIndexedv = (C.GPSCISSORINDEXEDV)(getProcAddr("glScissorIndexedv")); gpScissorIndexedv == nil {
    ARB_viewport_array = false
  }
  if gpSecondaryColor3bEXT = (C.GPSECONDARYCOLOR3BEXT)(getProcAddr("glSecondaryColor3bEXT")); gpSecondaryColor3bEXT == nil {
    EXT_secondary_color = false
  }
  if gpSecondaryColor3bvEXT = (C.GPSECONDARYCOLOR3BVEXT)(getProcAddr("glSecondaryColor3bvEXT")); gpSecondaryColor3bvEXT == nil {
    EXT_secondary_color = false
  }
  if gpSecondaryColor3dEXT = (C.GPSECONDARYCOLOR3DEXT)(getProcAddr("glSecondaryColor3dEXT")); gpSecondaryColor3dEXT == nil {
    EXT_secondary_color = false
  }
  if gpSecondaryColor3dvEXT = (C.GPSECONDARYCOLOR3DVEXT)(getProcAddr("glSecondaryColor3dvEXT")); gpSecondaryColor3dvEXT == nil {
    EXT_secondary_color = false
  }
  if gpSecondaryColor3fEXT = (C.GPSECONDARYCOLOR3FEXT)(getProcAddr("glSecondaryColor3fEXT")); gpSecondaryColor3fEXT == nil {
    EXT_secondary_color = false
  }
  if gpSecondaryColor3fvEXT = (C.GPSECONDARYCOLOR3FVEXT)(getProcAddr("glSecondaryColor3fvEXT")); gpSecondaryColor3fvEXT == nil {
    EXT_secondary_color = false
  }
  if gpSecondaryColor3hNV = (C.GPSECONDARYCOLOR3HNV)(getProcAddr("glSecondaryColor3hNV")); gpSecondaryColor3hNV == nil {
    NV_half_float = false
  }
  if gpSecondaryColor3hvNV = (C.GPSECONDARYCOLOR3HVNV)(getProcAddr("glSecondaryColor3hvNV")); gpSecondaryColor3hvNV == nil {
    NV_half_float = false
  }
  if gpSecondaryColor3iEXT = (C.GPSECONDARYCOLOR3IEXT)(getProcAddr("glSecondaryColor3iEXT")); gpSecondaryColor3iEXT == nil {
    EXT_secondary_color = false
  }
  if gpSecondaryColor3ivEXT = (C.GPSECONDARYCOLOR3IVEXT)(getProcAddr("glSecondaryColor3ivEXT")); gpSecondaryColor3ivEXT == nil {
    EXT_secondary_color = false
  }
  if gpSecondaryColor3sEXT = (C.GPSECONDARYCOLOR3SEXT)(getProcAddr("glSecondaryColor3sEXT")); gpSecondaryColor3sEXT == nil {
    EXT_secondary_color = false
  }
  if gpSecondaryColor3svEXT = (C.GPSECONDARYCOLOR3SVEXT)(getProcAddr("glSecondaryColor3svEXT")); gpSecondaryColor3svEXT == nil {
    EXT_secondary_color = false
  }
  if gpSecondaryColor3ubEXT = (C.GPSECONDARYCOLOR3UBEXT)(getProcAddr("glSecondaryColor3ubEXT")); gpSecondaryColor3ubEXT == nil {
    EXT_secondary_color = false
  }
  if gpSecondaryColor3ubvEXT = (C.GPSECONDARYCOLOR3UBVEXT)(getProcAddr("glSecondaryColor3ubvEXT")); gpSecondaryColor3ubvEXT == nil {
    EXT_secondary_color = false
  }
  if gpSecondaryColor3uiEXT = (C.GPSECONDARYCOLOR3UIEXT)(getProcAddr("glSecondaryColor3uiEXT")); gpSecondaryColor3uiEXT == nil {
    EXT_secondary_color = false
  }
  if gpSecondaryColor3uivEXT = (C.GPSECONDARYCOLOR3UIVEXT)(getProcAddr("glSecondaryColor3uivEXT")); gpSecondaryColor3uivEXT == nil {
    EXT_secondary_color = false
  }
  if gpSecondaryColor3usEXT = (C.GPSECONDARYCOLOR3USEXT)(getProcAddr("glSecondaryColor3usEXT")); gpSecondaryColor3usEXT == nil {
    EXT_secondary_color = false
  }
  if gpSecondaryColor3usvEXT = (C.GPSECONDARYCOLOR3USVEXT)(getProcAddr("glSecondaryColor3usvEXT")); gpSecondaryColor3usvEXT == nil {
    EXT_secondary_color = false
  }
  if gpSecondaryColorFormatNV = (C.GPSECONDARYCOLORFORMATNV)(getProcAddr("glSecondaryColorFormatNV")); gpSecondaryColorFormatNV == nil {
    NV_vertex_buffer_unified_memory = false
  }
  if gpSecondaryColorPointerEXT = (C.GPSECONDARYCOLORPOINTEREXT)(getProcAddr("glSecondaryColorPointerEXT")); gpSecondaryColorPointerEXT == nil {
    EXT_secondary_color = false
  }
  if gpSecondaryColorPointerListIBM = (C.GPSECONDARYCOLORPOINTERLISTIBM)(getProcAddr("glSecondaryColorPointerListIBM")); gpSecondaryColorPointerListIBM == nil {
    IBM_vertex_array_lists = false
  }
  if gpSelectPerfMonitorCountersAMD = (C.GPSELECTPERFMONITORCOUNTERSAMD)(getProcAddr("glSelectPerfMonitorCountersAMD")); gpSelectPerfMonitorCountersAMD == nil {
    AMD_performance_monitor = false
  }
  if gpSeparableFilter2DEXT = (C.GPSEPARABLEFILTER2DEXT)(getProcAddr("glSeparableFilter2DEXT")); gpSeparableFilter2DEXT == nil {
    EXT_convolution = false
  }
  if gpSetFenceAPPLE = (C.GPSETFENCEAPPLE)(getProcAddr("glSetFenceAPPLE")); gpSetFenceAPPLE == nil {
    APPLE_fence = false
  }
  if gpSetFenceNV = (C.GPSETFENCENV)(getProcAddr("glSetFenceNV")); gpSetFenceNV == nil {
    NV_fence = false
  }
  if gpSetFragmentShaderConstantATI = (C.GPSETFRAGMENTSHADERCONSTANTATI)(getProcAddr("glSetFragmentShaderConstantATI")); gpSetFragmentShaderConstantATI == nil {
    ATI_fragment_shader = false
  }
  if gpSetInvariantEXT = (C.GPSETINVARIANTEXT)(getProcAddr("glSetInvariantEXT")); gpSetInvariantEXT == nil {
    EXT_vertex_shader = false
  }
  if gpSetLocalConstantEXT = (C.GPSETLOCALCONSTANTEXT)(getProcAddr("glSetLocalConstantEXT")); gpSetLocalConstantEXT == nil {
    EXT_vertex_shader = false
  }
  if gpSetMultisamplefvAMD = (C.GPSETMULTISAMPLEFVAMD)(getProcAddr("glSetMultisamplefvAMD")); gpSetMultisamplefvAMD == nil {
    AMD_sample_positions = false
  }
  if gpShaderBinary = (C.GPSHADERBINARY)(getProcAddr("glShaderBinary")); gpShaderBinary == nil {
    ARB_ES2_compatibility = false
  }
  if gpShaderOp1EXT = (C.GPSHADEROP1EXT)(getProcAddr("glShaderOp1EXT")); gpShaderOp1EXT == nil {
    EXT_vertex_shader = false
  }
  if gpShaderOp2EXT = (C.GPSHADEROP2EXT)(getProcAddr("glShaderOp2EXT")); gpShaderOp2EXT == nil {
    EXT_vertex_shader = false
  }
  if gpShaderOp3EXT = (C.GPSHADEROP3EXT)(getProcAddr("glShaderOp3EXT")); gpShaderOp3EXT == nil {
    EXT_vertex_shader = false
  }
  if gpShaderSource = (C.GPSHADERSOURCE)(getProcAddr("glShaderSource")); gpShaderSource == nil {
    return errors.New("glShaderSource")
  }
  if gpShaderSourceARB = (C.GPSHADERSOURCEARB)(getProcAddr("glShaderSourceARB")); gpShaderSourceARB == nil {
    ARB_shader_objects = false
  }
  if gpShaderStorageBlockBinding = (C.GPSHADERSTORAGEBLOCKBINDING)(getProcAddr("glShaderStorageBlockBinding")); gpShaderStorageBlockBinding == nil {
    ARB_shader_storage_buffer_object = false
  }
  if gpSharpenTexFuncSGIS = (C.GPSHARPENTEXFUNCSGIS)(getProcAddr("glSharpenTexFuncSGIS")); gpSharpenTexFuncSGIS == nil {
    SGIS_sharpen_texture = false
  }
  if gpSpriteParameterfSGIX = (C.GPSPRITEPARAMETERFSGIX)(getProcAddr("glSpriteParameterfSGIX")); gpSpriteParameterfSGIX == nil {
    SGIX_sprite = false
  }
  if gpSpriteParameterfvSGIX = (C.GPSPRITEPARAMETERFVSGIX)(getProcAddr("glSpriteParameterfvSGIX")); gpSpriteParameterfvSGIX == nil {
    SGIX_sprite = false
  }
  if gpSpriteParameteriSGIX = (C.GPSPRITEPARAMETERISGIX)(getProcAddr("glSpriteParameteriSGIX")); gpSpriteParameteriSGIX == nil {
    SGIX_sprite = false
  }
  if gpSpriteParameterivSGIX = (C.GPSPRITEPARAMETERIVSGIX)(getProcAddr("glSpriteParameterivSGIX")); gpSpriteParameterivSGIX == nil {
    SGIX_sprite = false
  }
  if gpStartInstrumentsSGIX = (C.GPSTARTINSTRUMENTSSGIX)(getProcAddr("glStartInstrumentsSGIX")); gpStartInstrumentsSGIX == nil {
    SGIX_instruments = false
  }
  if gpStencilClearTagEXT = (C.GPSTENCILCLEARTAGEXT)(getProcAddr("glStencilClearTagEXT")); gpStencilClearTagEXT == nil {
    EXT_stencil_clear_tag = false
  }
  if gpStencilFillPathInstancedNV = (C.GPSTENCILFILLPATHINSTANCEDNV)(getProcAddr("glStencilFillPathInstancedNV")); gpStencilFillPathInstancedNV == nil {
    NV_path_rendering = false
  }
  if gpStencilFillPathNV = (C.GPSTENCILFILLPATHNV)(getProcAddr("glStencilFillPathNV")); gpStencilFillPathNV == nil {
    NV_path_rendering = false
  }
  if gpStencilFunc = (C.GPSTENCILFUNC)(getProcAddr("glStencilFunc")); gpStencilFunc == nil {
    return errors.New("glStencilFunc")
  }
  if gpStencilFuncSeparate = (C.GPSTENCILFUNCSEPARATE)(getProcAddr("glStencilFuncSeparate")); gpStencilFuncSeparate == nil {
    return errors.New("glStencilFuncSeparate")
  }
  if gpStencilFuncSeparateATI = (C.GPSTENCILFUNCSEPARATEATI)(getProcAddr("glStencilFuncSeparateATI")); gpStencilFuncSeparateATI == nil {
    ATI_separate_stencil = false
  }
  if gpStencilMask = (C.GPSTENCILMASK)(getProcAddr("glStencilMask")); gpStencilMask == nil {
    return errors.New("glStencilMask")
  }
  if gpStencilMaskSeparate = (C.GPSTENCILMASKSEPARATE)(getProcAddr("glStencilMaskSeparate")); gpStencilMaskSeparate == nil {
    return errors.New("glStencilMaskSeparate")
  }
  if gpStencilOp = (C.GPSTENCILOP)(getProcAddr("glStencilOp")); gpStencilOp == nil {
    return errors.New("glStencilOp")
  }
  if gpStencilOpSeparate = (C.GPSTENCILOPSEPARATE)(getProcAddr("glStencilOpSeparate")); gpStencilOpSeparate == nil {
    return errors.New("glStencilOpSeparate")
  }
  if gpStencilOpSeparateATI = (C.GPSTENCILOPSEPARATEATI)(getProcAddr("glStencilOpSeparateATI")); gpStencilOpSeparateATI == nil {
    ATI_separate_stencil = false
  }
  if gpStencilOpValueAMD = (C.GPSTENCILOPVALUEAMD)(getProcAddr("glStencilOpValueAMD")); gpStencilOpValueAMD == nil {
    AMD_stencil_operation_extended = false
  }
  if gpStencilStrokePathInstancedNV = (C.GPSTENCILSTROKEPATHINSTANCEDNV)(getProcAddr("glStencilStrokePathInstancedNV")); gpStencilStrokePathInstancedNV == nil {
    NV_path_rendering = false
  }
  if gpStencilStrokePathNV = (C.GPSTENCILSTROKEPATHNV)(getProcAddr("glStencilStrokePathNV")); gpStencilStrokePathNV == nil {
    NV_path_rendering = false
  }
  if gpStopInstrumentsSGIX = (C.GPSTOPINSTRUMENTSSGIX)(getProcAddr("glStopInstrumentsSGIX")); gpStopInstrumentsSGIX == nil {
    SGIX_instruments = false
  }
  if gpStringMarkerGREMEDY = (C.GPSTRINGMARKERGREMEDY)(getProcAddr("glStringMarkerGREMEDY")); gpStringMarkerGREMEDY == nil {
    GREMEDY_string_marker = false
  }
  if gpSwizzleEXT = (C.GPSWIZZLEEXT)(getProcAddr("glSwizzleEXT")); gpSwizzleEXT == nil {
    EXT_vertex_shader = false
  }
  if gpSyncTextureINTEL = (C.GPSYNCTEXTUREINTEL)(getProcAddr("glSyncTextureINTEL")); gpSyncTextureINTEL == nil {
    INTEL_map_texture = false
  }
  if gpTagSampleBufferSGIX = (C.GPTAGSAMPLEBUFFERSGIX)(getProcAddr("glTagSampleBufferSGIX")); gpTagSampleBufferSGIX == nil {
    SGIX_tag_sample_buffer = false
  }
  if gpTangent3bEXT = (C.GPTANGENT3BEXT)(getProcAddr("glTangent3bEXT")); gpTangent3bEXT == nil {
    EXT_coordinate_frame = false
  }
  if gpTangent3bvEXT = (C.GPTANGENT3BVEXT)(getProcAddr("glTangent3bvEXT")); gpTangent3bvEXT == nil {
    EXT_coordinate_frame = false
  }
  if gpTangent3dEXT = (C.GPTANGENT3DEXT)(getProcAddr("glTangent3dEXT")); gpTangent3dEXT == nil {
    EXT_coordinate_frame = false
  }
  if gpTangent3dvEXT = (C.GPTANGENT3DVEXT)(getProcAddr("glTangent3dvEXT")); gpTangent3dvEXT == nil {
    EXT_coordinate_frame = false
  }
  if gpTangent3fEXT = (C.GPTANGENT3FEXT)(getProcAddr("glTangent3fEXT")); gpTangent3fEXT == nil {
    EXT_coordinate_frame = false
  }
  if gpTangent3fvEXT = (C.GPTANGENT3FVEXT)(getProcAddr("glTangent3fvEXT")); gpTangent3fvEXT == nil {
    EXT_coordinate_frame = false
  }
  if gpTangent3iEXT = (C.GPTANGENT3IEXT)(getProcAddr("glTangent3iEXT")); gpTangent3iEXT == nil {
    EXT_coordinate_frame = false
  }
  if gpTangent3ivEXT = (C.GPTANGENT3IVEXT)(getProcAddr("glTangent3ivEXT")); gpTangent3ivEXT == nil {
    EXT_coordinate_frame = false
  }
  if gpTangent3sEXT = (C.GPTANGENT3SEXT)(getProcAddr("glTangent3sEXT")); gpTangent3sEXT == nil {
    EXT_coordinate_frame = false
  }
  if gpTangent3svEXT = (C.GPTANGENT3SVEXT)(getProcAddr("glTangent3svEXT")); gpTangent3svEXT == nil {
    EXT_coordinate_frame = false
  }
  if gpTangentPointerEXT = (C.GPTANGENTPOINTEREXT)(getProcAddr("glTangentPointerEXT")); gpTangentPointerEXT == nil {
    EXT_coordinate_frame = false
  }
  if gpTbufferMask3DFX = (C.GPTBUFFERMASK3DFX)(getProcAddr("glTbufferMask3DFX")); gpTbufferMask3DFX == nil {
    GL_3DFX_tbuffer = false
  }
  if gpTessellationFactorAMD = (C.GPTESSELLATIONFACTORAMD)(getProcAddr("glTessellationFactorAMD")); gpTessellationFactorAMD == nil {
    AMD_vertex_shader_tessellator = false
  }
  if gpTessellationModeAMD = (C.GPTESSELLATIONMODEAMD)(getProcAddr("glTessellationModeAMD")); gpTessellationModeAMD == nil {
    AMD_vertex_shader_tessellator = false
  }
  if gpTestFenceAPPLE = (C.GPTESTFENCEAPPLE)(getProcAddr("glTestFenceAPPLE")); gpTestFenceAPPLE == nil {
    APPLE_fence = false
  }
  if gpTestFenceNV = (C.GPTESTFENCENV)(getProcAddr("glTestFenceNV")); gpTestFenceNV == nil {
    NV_fence = false
  }
  if gpTestObjectAPPLE = (C.GPTESTOBJECTAPPLE)(getProcAddr("glTestObjectAPPLE")); gpTestObjectAPPLE == nil {
    APPLE_fence = false
  }
  if gpTexBuffer = (C.GPTEXBUFFER)(getProcAddr("glTexBuffer")); gpTexBuffer == nil {
    return errors.New("glTexBuffer")
  }
  if gpTexBufferARB = (C.GPTEXBUFFERARB)(getProcAddr("glTexBufferARB")); gpTexBufferARB == nil {
    ARB_texture_buffer_object = false
  }
  if gpTexBufferEXT = (C.GPTEXBUFFEREXT)(getProcAddr("glTexBufferEXT")); gpTexBufferEXT == nil {
    EXT_texture_buffer_object = false
  }
  if gpTexBufferRange = (C.GPTEXBUFFERRANGE)(getProcAddr("glTexBufferRange")); gpTexBufferRange == nil {
    ARB_texture_buffer_range = false
  }
  if gpTexBumpParameterfvATI = (C.GPTEXBUMPPARAMETERFVATI)(getProcAddr("glTexBumpParameterfvATI")); gpTexBumpParameterfvATI == nil {
    ATI_envmap_bumpmap = false
  }
  if gpTexBumpParameterivATI = (C.GPTEXBUMPPARAMETERIVATI)(getProcAddr("glTexBumpParameterivATI")); gpTexBumpParameterivATI == nil {
    ATI_envmap_bumpmap = false
  }
  if gpTexCoord1bOES = (C.GPTEXCOORD1BOES)(getProcAddr("glTexCoord1bOES")); gpTexCoord1bOES == nil {
    OES_byte_coordinates = false
  }
  if gpTexCoord1bvOES = (C.GPTEXCOORD1BVOES)(getProcAddr("glTexCoord1bvOES")); gpTexCoord1bvOES == nil {
    OES_byte_coordinates = false
  }
  if gpTexCoord1hNV = (C.GPTEXCOORD1HNV)(getProcAddr("glTexCoord1hNV")); gpTexCoord1hNV == nil {
    NV_half_float = false
  }
  if gpTexCoord1hvNV = (C.GPTEXCOORD1HVNV)(getProcAddr("glTexCoord1hvNV")); gpTexCoord1hvNV == nil {
    NV_half_float = false
  }
  if gpTexCoord1xOES = (C.GPTEXCOORD1XOES)(getProcAddr("glTexCoord1xOES")); gpTexCoord1xOES == nil {
    OES_fixed_point = false
  }
  if gpTexCoord1xvOES = (C.GPTEXCOORD1XVOES)(getProcAddr("glTexCoord1xvOES")); gpTexCoord1xvOES == nil {
    OES_fixed_point = false
  }
  if gpTexCoord2bOES = (C.GPTEXCOORD2BOES)(getProcAddr("glTexCoord2bOES")); gpTexCoord2bOES == nil {
    OES_byte_coordinates = false
  }
  if gpTexCoord2bvOES = (C.GPTEXCOORD2BVOES)(getProcAddr("glTexCoord2bvOES")); gpTexCoord2bvOES == nil {
    OES_byte_coordinates = false
  }
  if gpTexCoord2fColor3fVertex3fSUN = (C.GPTEXCOORD2FCOLOR3FVERTEX3FSUN)(getProcAddr("glTexCoord2fColor3fVertex3fSUN")); gpTexCoord2fColor3fVertex3fSUN == nil {
    SUN_vertex = false
  }
  if gpTexCoord2fColor3fVertex3fvSUN = (C.GPTEXCOORD2FCOLOR3FVERTEX3FVSUN)(getProcAddr("glTexCoord2fColor3fVertex3fvSUN")); gpTexCoord2fColor3fVertex3fvSUN == nil {
    SUN_vertex = false
  }
  if gpTexCoord2fColor4fNormal3fVertex3fSUN = (C.GPTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUN)(getProcAddr("glTexCoord2fColor4fNormal3fVertex3fSUN")); gpTexCoord2fColor4fNormal3fVertex3fSUN == nil {
    SUN_vertex = false
  }
  if gpTexCoord2fColor4fNormal3fVertex3fvSUN = (C.GPTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUN)(getProcAddr("glTexCoord2fColor4fNormal3fVertex3fvSUN")); gpTexCoord2fColor4fNormal3fVertex3fvSUN == nil {
    SUN_vertex = false
  }
  if gpTexCoord2fColor4ubVertex3fSUN = (C.GPTEXCOORD2FCOLOR4UBVERTEX3FSUN)(getProcAddr("glTexCoord2fColor4ubVertex3fSUN")); gpTexCoord2fColor4ubVertex3fSUN == nil {
    SUN_vertex = false
  }
  if gpTexCoord2fColor4ubVertex3fvSUN = (C.GPTEXCOORD2FCOLOR4UBVERTEX3FVSUN)(getProcAddr("glTexCoord2fColor4ubVertex3fvSUN")); gpTexCoord2fColor4ubVertex3fvSUN == nil {
    SUN_vertex = false
  }
  if gpTexCoord2fNormal3fVertex3fSUN = (C.GPTEXCOORD2FNORMAL3FVERTEX3FSUN)(getProcAddr("glTexCoord2fNormal3fVertex3fSUN")); gpTexCoord2fNormal3fVertex3fSUN == nil {
    SUN_vertex = false
  }
  if gpTexCoord2fNormal3fVertex3fvSUN = (C.GPTEXCOORD2FNORMAL3FVERTEX3FVSUN)(getProcAddr("glTexCoord2fNormal3fVertex3fvSUN")); gpTexCoord2fNormal3fVertex3fvSUN == nil {
    SUN_vertex = false
  }
  if gpTexCoord2fVertex3fSUN = (C.GPTEXCOORD2FVERTEX3FSUN)(getProcAddr("glTexCoord2fVertex3fSUN")); gpTexCoord2fVertex3fSUN == nil {
    SUN_vertex = false
  }
  if gpTexCoord2fVertex3fvSUN = (C.GPTEXCOORD2FVERTEX3FVSUN)(getProcAddr("glTexCoord2fVertex3fvSUN")); gpTexCoord2fVertex3fvSUN == nil {
    SUN_vertex = false
  }
  if gpTexCoord2hNV = (C.GPTEXCOORD2HNV)(getProcAddr("glTexCoord2hNV")); gpTexCoord2hNV == nil {
    NV_half_float = false
  }
  if gpTexCoord2hvNV = (C.GPTEXCOORD2HVNV)(getProcAddr("glTexCoord2hvNV")); gpTexCoord2hvNV == nil {
    NV_half_float = false
  }
  if gpTexCoord2xOES = (C.GPTEXCOORD2XOES)(getProcAddr("glTexCoord2xOES")); gpTexCoord2xOES == nil {
    OES_fixed_point = false
  }
  if gpTexCoord2xvOES = (C.GPTEXCOORD2XVOES)(getProcAddr("glTexCoord2xvOES")); gpTexCoord2xvOES == nil {
    OES_fixed_point = false
  }
  if gpTexCoord3bOES = (C.GPTEXCOORD3BOES)(getProcAddr("glTexCoord3bOES")); gpTexCoord3bOES == nil {
    OES_byte_coordinates = false
  }
  if gpTexCoord3bvOES = (C.GPTEXCOORD3BVOES)(getProcAddr("glTexCoord3bvOES")); gpTexCoord3bvOES == nil {
    OES_byte_coordinates = false
  }
  if gpTexCoord3hNV = (C.GPTEXCOORD3HNV)(getProcAddr("glTexCoord3hNV")); gpTexCoord3hNV == nil {
    NV_half_float = false
  }
  if gpTexCoord3hvNV = (C.GPTEXCOORD3HVNV)(getProcAddr("glTexCoord3hvNV")); gpTexCoord3hvNV == nil {
    NV_half_float = false
  }
  if gpTexCoord3xOES = (C.GPTEXCOORD3XOES)(getProcAddr("glTexCoord3xOES")); gpTexCoord3xOES == nil {
    OES_fixed_point = false
  }
  if gpTexCoord3xvOES = (C.GPTEXCOORD3XVOES)(getProcAddr("glTexCoord3xvOES")); gpTexCoord3xvOES == nil {
    OES_fixed_point = false
  }
  if gpTexCoord4bOES = (C.GPTEXCOORD4BOES)(getProcAddr("glTexCoord4bOES")); gpTexCoord4bOES == nil {
    OES_byte_coordinates = false
  }
  if gpTexCoord4bvOES = (C.GPTEXCOORD4BVOES)(getProcAddr("glTexCoord4bvOES")); gpTexCoord4bvOES == nil {
    OES_byte_coordinates = false
  }
  if gpTexCoord4fColor4fNormal3fVertex4fSUN = (C.GPTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUN)(getProcAddr("glTexCoord4fColor4fNormal3fVertex4fSUN")); gpTexCoord4fColor4fNormal3fVertex4fSUN == nil {
    SUN_vertex = false
  }
  if gpTexCoord4fColor4fNormal3fVertex4fvSUN = (C.GPTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUN)(getProcAddr("glTexCoord4fColor4fNormal3fVertex4fvSUN")); gpTexCoord4fColor4fNormal3fVertex4fvSUN == nil {
    SUN_vertex = false
  }
  if gpTexCoord4fVertex4fSUN = (C.GPTEXCOORD4FVERTEX4FSUN)(getProcAddr("glTexCoord4fVertex4fSUN")); gpTexCoord4fVertex4fSUN == nil {
    SUN_vertex = false
  }
  if gpTexCoord4fVertex4fvSUN = (C.GPTEXCOORD4FVERTEX4FVSUN)(getProcAddr("glTexCoord4fVertex4fvSUN")); gpTexCoord4fVertex4fvSUN == nil {
    SUN_vertex = false
  }
  if gpTexCoord4hNV = (C.GPTEXCOORD4HNV)(getProcAddr("glTexCoord4hNV")); gpTexCoord4hNV == nil {
    NV_half_float = false
  }
  if gpTexCoord4hvNV = (C.GPTEXCOORD4HVNV)(getProcAddr("glTexCoord4hvNV")); gpTexCoord4hvNV == nil {
    NV_half_float = false
  }
  if gpTexCoord4xOES = (C.GPTEXCOORD4XOES)(getProcAddr("glTexCoord4xOES")); gpTexCoord4xOES == nil {
    OES_fixed_point = false
  }
  if gpTexCoord4xvOES = (C.GPTEXCOORD4XVOES)(getProcAddr("glTexCoord4xvOES")); gpTexCoord4xvOES == nil {
    OES_fixed_point = false
  }
  if gpTexCoordFormatNV = (C.GPTEXCOORDFORMATNV)(getProcAddr("glTexCoordFormatNV")); gpTexCoordFormatNV == nil {
    NV_vertex_buffer_unified_memory = false
  }
  if gpTexCoordPointerEXT = (C.GPTEXCOORDPOINTEREXT)(getProcAddr("glTexCoordPointerEXT")); gpTexCoordPointerEXT == nil {
    EXT_vertex_array = false
  }
  if gpTexCoordPointerListIBM = (C.GPTEXCOORDPOINTERLISTIBM)(getProcAddr("glTexCoordPointerListIBM")); gpTexCoordPointerListIBM == nil {
    IBM_vertex_array_lists = false
  }
  if gpTexCoordPointervINTEL = (C.GPTEXCOORDPOINTERVINTEL)(getProcAddr("glTexCoordPointervINTEL")); gpTexCoordPointervINTEL == nil {
    INTEL_parallel_arrays = false
  }
  if gpTexEnvxOES = (C.GPTEXENVXOES)(getProcAddr("glTexEnvxOES")); gpTexEnvxOES == nil {
    OES_fixed_point = false
  }
  if gpTexEnvxvOES = (C.GPTEXENVXVOES)(getProcAddr("glTexEnvxvOES")); gpTexEnvxvOES == nil {
    OES_fixed_point = false
  }
  if gpTexFilterFuncSGIS = (C.GPTEXFILTERFUNCSGIS)(getProcAddr("glTexFilterFuncSGIS")); gpTexFilterFuncSGIS == nil {
    SGIS_texture_filter4 = false
  }
  if gpTexGenxOES = (C.GPTEXGENXOES)(getProcAddr("glTexGenxOES")); gpTexGenxOES == nil {
    OES_fixed_point = false
  }
  if gpTexGenxvOES = (C.GPTEXGENXVOES)(getProcAddr("glTexGenxvOES")); gpTexGenxvOES == nil {
    OES_fixed_point = false
  }
  if gpTexImage1D = (C.GPTEXIMAGE1D)(getProcAddr("glTexImage1D")); gpTexImage1D == nil {
    return errors.New("glTexImage1D")
  }
  if gpTexImage2D = (C.GPTEXIMAGE2D)(getProcAddr("glTexImage2D")); gpTexImage2D == nil {
    return errors.New("glTexImage2D")
  }
  if gpTexImage2DMultisample = (C.GPTEXIMAGE2DMULTISAMPLE)(getProcAddr("glTexImage2DMultisample")); gpTexImage2DMultisample == nil {
    ARB_texture_multisample = false
    return errors.New("glTexImage2DMultisample")
  }
  if gpTexImage2DMultisampleCoverageNV = (C.GPTEXIMAGE2DMULTISAMPLECOVERAGENV)(getProcAddr("glTexImage2DMultisampleCoverageNV")); gpTexImage2DMultisampleCoverageNV == nil {
    NV_texture_multisample = false
  }
  if gpTexImage3D = (C.GPTEXIMAGE3D)(getProcAddr("glTexImage3D")); gpTexImage3D == nil {
    return errors.New("glTexImage3D")
  }
  if gpTexImage3DEXT = (C.GPTEXIMAGE3DEXT)(getProcAddr("glTexImage3DEXT")); gpTexImage3DEXT == nil {
    EXT_texture3D = false
  }
  if gpTexImage3DMultisample = (C.GPTEXIMAGE3DMULTISAMPLE)(getProcAddr("glTexImage3DMultisample")); gpTexImage3DMultisample == nil {
    ARB_texture_multisample = false
    return errors.New("glTexImage3DMultisample")
  }
  if gpTexImage3DMultisampleCoverageNV = (C.GPTEXIMAGE3DMULTISAMPLECOVERAGENV)(getProcAddr("glTexImage3DMultisampleCoverageNV")); gpTexImage3DMultisampleCoverageNV == nil {
    NV_texture_multisample = false
  }
  if gpTexImage4DSGIS = (C.GPTEXIMAGE4DSGIS)(getProcAddr("glTexImage4DSGIS")); gpTexImage4DSGIS == nil {
    SGIS_texture4D = false
  }
  if gpTexPageCommitmentARB = (C.GPTEXPAGECOMMITMENTARB)(getProcAddr("glTexPageCommitmentARB")); gpTexPageCommitmentARB == nil {
    ARB_sparse_texture = false
  }
  if gpTexParameterIiv = (C.GPTEXPARAMETERIIV)(getProcAddr("glTexParameterIiv")); gpTexParameterIiv == nil {
    return errors.New("glTexParameterIiv")
  }
  if gpTexParameterIivEXT = (C.GPTEXPARAMETERIIVEXT)(getProcAddr("glTexParameterIivEXT")); gpTexParameterIivEXT == nil {
    EXT_texture_integer = false
  }
  if gpTexParameterIuiv = (C.GPTEXPARAMETERIUIV)(getProcAddr("glTexParameterIuiv")); gpTexParameterIuiv == nil {
    return errors.New("glTexParameterIuiv")
  }
  if gpTexParameterIuivEXT = (C.GPTEXPARAMETERIUIVEXT)(getProcAddr("glTexParameterIuivEXT")); gpTexParameterIuivEXT == nil {
    EXT_texture_integer = false
  }
  if gpTexParameterf = (C.GPTEXPARAMETERF)(getProcAddr("glTexParameterf")); gpTexParameterf == nil {
    return errors.New("glTexParameterf")
  }
  if gpTexParameterfv = (C.GPTEXPARAMETERFV)(getProcAddr("glTexParameterfv")); gpTexParameterfv == nil {
    return errors.New("glTexParameterfv")
  }
  if gpTexParameteri = (C.GPTEXPARAMETERI)(getProcAddr("glTexParameteri")); gpTexParameteri == nil {
    return errors.New("glTexParameteri")
  }
  if gpTexParameteriv = (C.GPTEXPARAMETERIV)(getProcAddr("glTexParameteriv")); gpTexParameteriv == nil {
    return errors.New("glTexParameteriv")
  }
  if gpTexParameterxOES = (C.GPTEXPARAMETERXOES)(getProcAddr("glTexParameterxOES")); gpTexParameterxOES == nil {
    OES_fixed_point = false
  }
  if gpTexParameterxvOES = (C.GPTEXPARAMETERXVOES)(getProcAddr("glTexParameterxvOES")); gpTexParameterxvOES == nil {
    OES_fixed_point = false
  }
  if gpTexRenderbufferNV = (C.GPTEXRENDERBUFFERNV)(getProcAddr("glTexRenderbufferNV")); gpTexRenderbufferNV == nil {
    NV_explicit_multisample = false
  }
  if gpTexStorage1D = (C.GPTEXSTORAGE1D)(getProcAddr("glTexStorage1D")); gpTexStorage1D == nil {
    ARB_texture_storage = false
  }
  if gpTexStorage2D = (C.GPTEXSTORAGE2D)(getProcAddr("glTexStorage2D")); gpTexStorage2D == nil {
    ARB_texture_storage = false
  }
  if gpTexStorage2DMultisample = (C.GPTEXSTORAGE2DMULTISAMPLE)(getProcAddr("glTexStorage2DMultisample")); gpTexStorage2DMultisample == nil {
    ARB_texture_storage_multisample = false
  }
  if gpTexStorage3D = (C.GPTEXSTORAGE3D)(getProcAddr("glTexStorage3D")); gpTexStorage3D == nil {
    ARB_texture_storage = false
  }
  if gpTexStorage3DMultisample = (C.GPTEXSTORAGE3DMULTISAMPLE)(getProcAddr("glTexStorage3DMultisample")); gpTexStorage3DMultisample == nil {
    ARB_texture_storage_multisample = false
  }
  if gpTexStorageSparseAMD = (C.GPTEXSTORAGESPARSEAMD)(getProcAddr("glTexStorageSparseAMD")); gpTexStorageSparseAMD == nil {
    AMD_sparse_texture = false
  }
  if gpTexSubImage1D = (C.GPTEXSUBIMAGE1D)(getProcAddr("glTexSubImage1D")); gpTexSubImage1D == nil {
    return errors.New("glTexSubImage1D")
  }
  if gpTexSubImage1DEXT = (C.GPTEXSUBIMAGE1DEXT)(getProcAddr("glTexSubImage1DEXT")); gpTexSubImage1DEXT == nil {
    EXT_subtexture = false
  }
  if gpTexSubImage2D = (C.GPTEXSUBIMAGE2D)(getProcAddr("glTexSubImage2D")); gpTexSubImage2D == nil {
    return errors.New("glTexSubImage2D")
  }
  if gpTexSubImage2DEXT = (C.GPTEXSUBIMAGE2DEXT)(getProcAddr("glTexSubImage2DEXT")); gpTexSubImage2DEXT == nil {
    EXT_subtexture = false
  }
  if gpTexSubImage3D = (C.GPTEXSUBIMAGE3D)(getProcAddr("glTexSubImage3D")); gpTexSubImage3D == nil {
    return errors.New("glTexSubImage3D")
  }
  if gpTexSubImage3DEXT = (C.GPTEXSUBIMAGE3DEXT)(getProcAddr("glTexSubImage3DEXT")); gpTexSubImage3DEXT == nil {
    EXT_texture3D = false
  }
  if gpTexSubImage4DSGIS = (C.GPTEXSUBIMAGE4DSGIS)(getProcAddr("glTexSubImage4DSGIS")); gpTexSubImage4DSGIS == nil {
    SGIS_texture4D = false
  }
  if gpTextureBarrierNV = (C.GPTEXTUREBARRIERNV)(getProcAddr("glTextureBarrierNV")); gpTextureBarrierNV == nil {
    NV_texture_barrier = false
  }
  if gpTextureBufferEXT = (C.GPTEXTUREBUFFEREXT)(getProcAddr("glTextureBufferEXT")); gpTextureBufferEXT == nil {
    EXT_direct_state_access = false
  }
  if gpTextureBufferRangeEXT = (C.GPTEXTUREBUFFERRANGEEXT)(getProcAddr("glTextureBufferRangeEXT")); gpTextureBufferRangeEXT == nil {
    EXT_direct_state_access = false
  }
  if gpTextureColorMaskSGIS = (C.GPTEXTURECOLORMASKSGIS)(getProcAddr("glTextureColorMaskSGIS")); gpTextureColorMaskSGIS == nil {
    SGIS_texture_color_mask = false
  }
  if gpTextureImage1DEXT = (C.GPTEXTUREIMAGE1DEXT)(getProcAddr("glTextureImage1DEXT")); gpTextureImage1DEXT == nil {
    EXT_direct_state_access = false
  }
  if gpTextureImage2DEXT = (C.GPTEXTUREIMAGE2DEXT)(getProcAddr("glTextureImage2DEXT")); gpTextureImage2DEXT == nil {
    EXT_direct_state_access = false
  }
  if gpTextureImage2DMultisampleCoverageNV = (C.GPTEXTUREIMAGE2DMULTISAMPLECOVERAGENV)(getProcAddr("glTextureImage2DMultisampleCoverageNV")); gpTextureImage2DMultisampleCoverageNV == nil {
    NV_texture_multisample = false
  }
  if gpTextureImage2DMultisampleNV = (C.GPTEXTUREIMAGE2DMULTISAMPLENV)(getProcAddr("glTextureImage2DMultisampleNV")); gpTextureImage2DMultisampleNV == nil {
    NV_texture_multisample = false
  }
  if gpTextureImage3DEXT = (C.GPTEXTUREIMAGE3DEXT)(getProcAddr("glTextureImage3DEXT")); gpTextureImage3DEXT == nil {
    EXT_direct_state_access = false
  }
  if gpTextureImage3DMultisampleCoverageNV = (C.GPTEXTUREIMAGE3DMULTISAMPLECOVERAGENV)(getProcAddr("glTextureImage3DMultisampleCoverageNV")); gpTextureImage3DMultisampleCoverageNV == nil {
    NV_texture_multisample = false
  }
  if gpTextureImage3DMultisampleNV = (C.GPTEXTUREIMAGE3DMULTISAMPLENV)(getProcAddr("glTextureImage3DMultisampleNV")); gpTextureImage3DMultisampleNV == nil {
    NV_texture_multisample = false
  }
  if gpTextureLightEXT = (C.GPTEXTURELIGHTEXT)(getProcAddr("glTextureLightEXT")); gpTextureLightEXT == nil {
    EXT_light_texture = false
  }
  if gpTextureMaterialEXT = (C.GPTEXTUREMATERIALEXT)(getProcAddr("glTextureMaterialEXT")); gpTextureMaterialEXT == nil {
    EXT_light_texture = false
  }
  if gpTextureNormalEXT = (C.GPTEXTURENORMALEXT)(getProcAddr("glTextureNormalEXT")); gpTextureNormalEXT == nil {
    EXT_texture_perturb_normal = false
  }
  if gpTexturePageCommitmentEXT = (C.GPTEXTUREPAGECOMMITMENTEXT)(getProcAddr("glTexturePageCommitmentEXT")); gpTexturePageCommitmentEXT == nil {
    EXT_direct_state_access = false
  }
  if gpTextureParameterIivEXT = (C.GPTEXTUREPARAMETERIIVEXT)(getProcAddr("glTextureParameterIivEXT")); gpTextureParameterIivEXT == nil {
    EXT_direct_state_access = false
  }
  if gpTextureParameterIuivEXT = (C.GPTEXTUREPARAMETERIUIVEXT)(getProcAddr("glTextureParameterIuivEXT")); gpTextureParameterIuivEXT == nil {
    EXT_direct_state_access = false
  }
  if gpTextureParameterfEXT = (C.GPTEXTUREPARAMETERFEXT)(getProcAddr("glTextureParameterfEXT")); gpTextureParameterfEXT == nil {
    EXT_direct_state_access = false
  }
  if gpTextureParameterfvEXT = (C.GPTEXTUREPARAMETERFVEXT)(getProcAddr("glTextureParameterfvEXT")); gpTextureParameterfvEXT == nil {
    EXT_direct_state_access = false
  }
  if gpTextureParameteriEXT = (C.GPTEXTUREPARAMETERIEXT)(getProcAddr("glTextureParameteriEXT")); gpTextureParameteriEXT == nil {
    EXT_direct_state_access = false
  }
  if gpTextureParameterivEXT = (C.GPTEXTUREPARAMETERIVEXT)(getProcAddr("glTextureParameterivEXT")); gpTextureParameterivEXT == nil {
    EXT_direct_state_access = false
  }
  if gpTextureRangeAPPLE = (C.GPTEXTURERANGEAPPLE)(getProcAddr("glTextureRangeAPPLE")); gpTextureRangeAPPLE == nil {
    APPLE_texture_range = false
  }
  if gpTextureRenderbufferEXT = (C.GPTEXTURERENDERBUFFEREXT)(getProcAddr("glTextureRenderbufferEXT")); gpTextureRenderbufferEXT == nil {
    EXT_direct_state_access = false
  }
  if gpTextureStorage1DEXT = (C.GPTEXTURESTORAGE1DEXT)(getProcAddr("glTextureStorage1DEXT")); gpTextureStorage1DEXT == nil {
    EXT_direct_state_access = false
  }
  if gpTextureStorage2DEXT = (C.GPTEXTURESTORAGE2DEXT)(getProcAddr("glTextureStorage2DEXT")); gpTextureStorage2DEXT == nil {
    EXT_direct_state_access = false
  }
  if gpTextureStorage2DMultisampleEXT = (C.GPTEXTURESTORAGE2DMULTISAMPLEEXT)(getProcAddr("glTextureStorage2DMultisampleEXT")); gpTextureStorage2DMultisampleEXT == nil {
    EXT_direct_state_access = false
  }
  if gpTextureStorage3DEXT = (C.GPTEXTURESTORAGE3DEXT)(getProcAddr("glTextureStorage3DEXT")); gpTextureStorage3DEXT == nil {
    EXT_direct_state_access = false
  }
  if gpTextureStorage3DMultisampleEXT = (C.GPTEXTURESTORAGE3DMULTISAMPLEEXT)(getProcAddr("glTextureStorage3DMultisampleEXT")); gpTextureStorage3DMultisampleEXT == nil {
    EXT_direct_state_access = false
  }
  if gpTextureStorageSparseAMD = (C.GPTEXTURESTORAGESPARSEAMD)(getProcAddr("glTextureStorageSparseAMD")); gpTextureStorageSparseAMD == nil {
    AMD_sparse_texture = false
  }
  if gpTextureSubImage1DEXT = (C.GPTEXTURESUBIMAGE1DEXT)(getProcAddr("glTextureSubImage1DEXT")); gpTextureSubImage1DEXT == nil {
    EXT_direct_state_access = false
  }
  if gpTextureSubImage2DEXT = (C.GPTEXTURESUBIMAGE2DEXT)(getProcAddr("glTextureSubImage2DEXT")); gpTextureSubImage2DEXT == nil {
    EXT_direct_state_access = false
  }
  if gpTextureSubImage3DEXT = (C.GPTEXTURESUBIMAGE3DEXT)(getProcAddr("glTextureSubImage3DEXT")); gpTextureSubImage3DEXT == nil {
    EXT_direct_state_access = false
  }
  if gpTextureView = (C.GPTEXTUREVIEW)(getProcAddr("glTextureView")); gpTextureView == nil {
    ARB_texture_view = false
  }
  if gpTrackMatrixNV = (C.GPTRACKMATRIXNV)(getProcAddr("glTrackMatrixNV")); gpTrackMatrixNV == nil {
    NV_vertex_program = false
  }
  if gpTransformFeedbackAttribsNV = (C.GPTRANSFORMFEEDBACKATTRIBSNV)(getProcAddr("glTransformFeedbackAttribsNV")); gpTransformFeedbackAttribsNV == nil {
    NV_transform_feedback = false
  }
  if gpTransformFeedbackStreamAttribsNV = (C.GPTRANSFORMFEEDBACKSTREAMATTRIBSNV)(getProcAddr("glTransformFeedbackStreamAttribsNV")); gpTransformFeedbackStreamAttribsNV == nil {
    NV_transform_feedback = false
  }
  if gpTransformFeedbackVaryings = (C.GPTRANSFORMFEEDBACKVARYINGS)(getProcAddr("glTransformFeedbackVaryings")); gpTransformFeedbackVaryings == nil {
    return errors.New("glTransformFeedbackVaryings")
  }
  if gpTransformFeedbackVaryingsEXT = (C.GPTRANSFORMFEEDBACKVARYINGSEXT)(getProcAddr("glTransformFeedbackVaryingsEXT")); gpTransformFeedbackVaryingsEXT == nil {
    EXT_transform_feedback = false
  }
  if gpTransformFeedbackVaryingsNV = (C.GPTRANSFORMFEEDBACKVARYINGSNV)(getProcAddr("glTransformFeedbackVaryingsNV")); gpTransformFeedbackVaryingsNV == nil {
    NV_transform_feedback = false
  }
  if gpTransformPathNV = (C.GPTRANSFORMPATHNV)(getProcAddr("glTransformPathNV")); gpTransformPathNV == nil {
    NV_path_rendering = false
  }
  if gpTranslatexOES = (C.GPTRANSLATEXOES)(getProcAddr("glTranslatexOES")); gpTranslatexOES == nil {
    OES_fixed_point = false
  }
  if gpUniform1d = (C.GPUNIFORM1D)(getProcAddr("glUniform1d")); gpUniform1d == nil {
    ARB_gpu_shader_fp64 = false
  }
  if gpUniform1dv = (C.GPUNIFORM1DV)(getProcAddr("glUniform1dv")); gpUniform1dv == nil {
    ARB_gpu_shader_fp64 = false
  }
  if gpUniform1f = (C.GPUNIFORM1F)(getProcAddr("glUniform1f")); gpUniform1f == nil {
    return errors.New("glUniform1f")
  }
  if gpUniform1fARB = (C.GPUNIFORM1FARB)(getProcAddr("glUniform1fARB")); gpUniform1fARB == nil {
    ARB_shader_objects = false
  }
  if gpUniform1fv = (C.GPUNIFORM1FV)(getProcAddr("glUniform1fv")); gpUniform1fv == nil {
    return errors.New("glUniform1fv")
  }
  if gpUniform1fvARB = (C.GPUNIFORM1FVARB)(getProcAddr("glUniform1fvARB")); gpUniform1fvARB == nil {
    ARB_shader_objects = false
  }
  if gpUniform1i = (C.GPUNIFORM1I)(getProcAddr("glUniform1i")); gpUniform1i == nil {
    return errors.New("glUniform1i")
  }
  if gpUniform1i64NV = (C.GPUNIFORM1I64NV)(getProcAddr("glUniform1i64NV")); gpUniform1i64NV == nil {
    AMD_gpu_shader_int64 = false
    NV_gpu_shader5 = false
  }
  if gpUniform1i64vNV = (C.GPUNIFORM1I64VNV)(getProcAddr("glUniform1i64vNV")); gpUniform1i64vNV == nil {
    AMD_gpu_shader_int64 = false
    NV_gpu_shader5 = false
  }
  if gpUniform1iARB = (C.GPUNIFORM1IARB)(getProcAddr("glUniform1iARB")); gpUniform1iARB == nil {
    ARB_shader_objects = false
  }
  if gpUniform1iv = (C.GPUNIFORM1IV)(getProcAddr("glUniform1iv")); gpUniform1iv == nil {
    return errors.New("glUniform1iv")
  }
  if gpUniform1ivARB = (C.GPUNIFORM1IVARB)(getProcAddr("glUniform1ivARB")); gpUniform1ivARB == nil {
    ARB_shader_objects = false
  }
  if gpUniform1ui = (C.GPUNIFORM1UI)(getProcAddr("glUniform1ui")); gpUniform1ui == nil {
    return errors.New("glUniform1ui")
  }
  if gpUniform1ui64NV = (C.GPUNIFORM1UI64NV)(getProcAddr("glUniform1ui64NV")); gpUniform1ui64NV == nil {
    AMD_gpu_shader_int64 = false
    NV_gpu_shader5 = false
  }
  if gpUniform1ui64vNV = (C.GPUNIFORM1UI64VNV)(getProcAddr("glUniform1ui64vNV")); gpUniform1ui64vNV == nil {
    AMD_gpu_shader_int64 = false
    NV_gpu_shader5 = false
  }
  if gpUniform1uiEXT = (C.GPUNIFORM1UIEXT)(getProcAddr("glUniform1uiEXT")); gpUniform1uiEXT == nil {
    EXT_gpu_shader4 = false
  }
  if gpUniform1uiv = (C.GPUNIFORM1UIV)(getProcAddr("glUniform1uiv")); gpUniform1uiv == nil {
    return errors.New("glUniform1uiv")
  }
  if gpUniform1uivEXT = (C.GPUNIFORM1UIVEXT)(getProcAddr("glUniform1uivEXT")); gpUniform1uivEXT == nil {
    EXT_gpu_shader4 = false
  }
  if gpUniform2d = (C.GPUNIFORM2D)(getProcAddr("glUniform2d")); gpUniform2d == nil {
    ARB_gpu_shader_fp64 = false
  }
  if gpUniform2dv = (C.GPUNIFORM2DV)(getProcAddr("glUniform2dv")); gpUniform2dv == nil {
    ARB_gpu_shader_fp64 = false
  }
  if gpUniform2f = (C.GPUNIFORM2F)(getProcAddr("glUniform2f")); gpUniform2f == nil {
    return errors.New("glUniform2f")
  }
  if gpUniform2fARB = (C.GPUNIFORM2FARB)(getProcAddr("glUniform2fARB")); gpUniform2fARB == nil {
    ARB_shader_objects = false
  }
  if gpUniform2fv = (C.GPUNIFORM2FV)(getProcAddr("glUniform2fv")); gpUniform2fv == nil {
    return errors.New("glUniform2fv")
  }
  if gpUniform2fvARB = (C.GPUNIFORM2FVARB)(getProcAddr("glUniform2fvARB")); gpUniform2fvARB == nil {
    ARB_shader_objects = false
  }
  if gpUniform2i = (C.GPUNIFORM2I)(getProcAddr("glUniform2i")); gpUniform2i == nil {
    return errors.New("glUniform2i")
  }
  if gpUniform2i64NV = (C.GPUNIFORM2I64NV)(getProcAddr("glUniform2i64NV")); gpUniform2i64NV == nil {
    AMD_gpu_shader_int64 = false
    NV_gpu_shader5 = false
  }
  if gpUniform2i64vNV = (C.GPUNIFORM2I64VNV)(getProcAddr("glUniform2i64vNV")); gpUniform2i64vNV == nil {
    AMD_gpu_shader_int64 = false
    NV_gpu_shader5 = false
  }
  if gpUniform2iARB = (C.GPUNIFORM2IARB)(getProcAddr("glUniform2iARB")); gpUniform2iARB == nil {
    ARB_shader_objects = false
  }
  if gpUniform2iv = (C.GPUNIFORM2IV)(getProcAddr("glUniform2iv")); gpUniform2iv == nil {
    return errors.New("glUniform2iv")
  }
  if gpUniform2ivARB = (C.GPUNIFORM2IVARB)(getProcAddr("glUniform2ivARB")); gpUniform2ivARB == nil {
    ARB_shader_objects = false
  }
  if gpUniform2ui = (C.GPUNIFORM2UI)(getProcAddr("glUniform2ui")); gpUniform2ui == nil {
    return errors.New("glUniform2ui")
  }
  if gpUniform2ui64NV = (C.GPUNIFORM2UI64NV)(getProcAddr("glUniform2ui64NV")); gpUniform2ui64NV == nil {
    AMD_gpu_shader_int64 = false
    NV_gpu_shader5 = false
  }
  if gpUniform2ui64vNV = (C.GPUNIFORM2UI64VNV)(getProcAddr("glUniform2ui64vNV")); gpUniform2ui64vNV == nil {
    AMD_gpu_shader_int64 = false
    NV_gpu_shader5 = false
  }
  if gpUniform2uiEXT = (C.GPUNIFORM2UIEXT)(getProcAddr("glUniform2uiEXT")); gpUniform2uiEXT == nil {
    EXT_gpu_shader4 = false
  }
  if gpUniform2uiv = (C.GPUNIFORM2UIV)(getProcAddr("glUniform2uiv")); gpUniform2uiv == nil {
    return errors.New("glUniform2uiv")
  }
  if gpUniform2uivEXT = (C.GPUNIFORM2UIVEXT)(getProcAddr("glUniform2uivEXT")); gpUniform2uivEXT == nil {
    EXT_gpu_shader4 = false
  }
  if gpUniform3d = (C.GPUNIFORM3D)(getProcAddr("glUniform3d")); gpUniform3d == nil {
    ARB_gpu_shader_fp64 = false
  }
  if gpUniform3dv = (C.GPUNIFORM3DV)(getProcAddr("glUniform3dv")); gpUniform3dv == nil {
    ARB_gpu_shader_fp64 = false
  }
  if gpUniform3f = (C.GPUNIFORM3F)(getProcAddr("glUniform3f")); gpUniform3f == nil {
    return errors.New("glUniform3f")
  }
  if gpUniform3fARB = (C.GPUNIFORM3FARB)(getProcAddr("glUniform3fARB")); gpUniform3fARB == nil {
    ARB_shader_objects = false
  }
  if gpUniform3fv = (C.GPUNIFORM3FV)(getProcAddr("glUniform3fv")); gpUniform3fv == nil {
    return errors.New("glUniform3fv")
  }
  if gpUniform3fvARB = (C.GPUNIFORM3FVARB)(getProcAddr("glUniform3fvARB")); gpUniform3fvARB == nil {
    ARB_shader_objects = false
  }
  if gpUniform3i = (C.GPUNIFORM3I)(getProcAddr("glUniform3i")); gpUniform3i == nil {
    return errors.New("glUniform3i")
  }
  if gpUniform3i64NV = (C.GPUNIFORM3I64NV)(getProcAddr("glUniform3i64NV")); gpUniform3i64NV == nil {
    AMD_gpu_shader_int64 = false
    NV_gpu_shader5 = false
  }
  if gpUniform3i64vNV = (C.GPUNIFORM3I64VNV)(getProcAddr("glUniform3i64vNV")); gpUniform3i64vNV == nil {
    AMD_gpu_shader_int64 = false
    NV_gpu_shader5 = false
  }
  if gpUniform3iARB = (C.GPUNIFORM3IARB)(getProcAddr("glUniform3iARB")); gpUniform3iARB == nil {
    ARB_shader_objects = false
  }
  if gpUniform3iv = (C.GPUNIFORM3IV)(getProcAddr("glUniform3iv")); gpUniform3iv == nil {
    return errors.New("glUniform3iv")
  }
  if gpUniform3ivARB = (C.GPUNIFORM3IVARB)(getProcAddr("glUniform3ivARB")); gpUniform3ivARB == nil {
    ARB_shader_objects = false
  }
  if gpUniform3ui = (C.GPUNIFORM3UI)(getProcAddr("glUniform3ui")); gpUniform3ui == nil {
    return errors.New("glUniform3ui")
  }
  if gpUniform3ui64NV = (C.GPUNIFORM3UI64NV)(getProcAddr("glUniform3ui64NV")); gpUniform3ui64NV == nil {
    AMD_gpu_shader_int64 = false
    NV_gpu_shader5 = false
  }
  if gpUniform3ui64vNV = (C.GPUNIFORM3UI64VNV)(getProcAddr("glUniform3ui64vNV")); gpUniform3ui64vNV == nil {
    AMD_gpu_shader_int64 = false
    NV_gpu_shader5 = false
  }
  if gpUniform3uiEXT = (C.GPUNIFORM3UIEXT)(getProcAddr("glUniform3uiEXT")); gpUniform3uiEXT == nil {
    EXT_gpu_shader4 = false
  }
  if gpUniform3uiv = (C.GPUNIFORM3UIV)(getProcAddr("glUniform3uiv")); gpUniform3uiv == nil {
    return errors.New("glUniform3uiv")
  }
  if gpUniform3uivEXT = (C.GPUNIFORM3UIVEXT)(getProcAddr("glUniform3uivEXT")); gpUniform3uivEXT == nil {
    EXT_gpu_shader4 = false
  }
  if gpUniform4d = (C.GPUNIFORM4D)(getProcAddr("glUniform4d")); gpUniform4d == nil {
    ARB_gpu_shader_fp64 = false
  }
  if gpUniform4dv = (C.GPUNIFORM4DV)(getProcAddr("glUniform4dv")); gpUniform4dv == nil {
    ARB_gpu_shader_fp64 = false
  }
  if gpUniform4f = (C.GPUNIFORM4F)(getProcAddr("glUniform4f")); gpUniform4f == nil {
    return errors.New("glUniform4f")
  }
  if gpUniform4fARB = (C.GPUNIFORM4FARB)(getProcAddr("glUniform4fARB")); gpUniform4fARB == nil {
    ARB_shader_objects = false
  }
  if gpUniform4fv = (C.GPUNIFORM4FV)(getProcAddr("glUniform4fv")); gpUniform4fv == nil {
    return errors.New("glUniform4fv")
  }
  if gpUniform4fvARB = (C.GPUNIFORM4FVARB)(getProcAddr("glUniform4fvARB")); gpUniform4fvARB == nil {
    ARB_shader_objects = false
  }
  if gpUniform4i = (C.GPUNIFORM4I)(getProcAddr("glUniform4i")); gpUniform4i == nil {
    return errors.New("glUniform4i")
  }
  if gpUniform4i64NV = (C.GPUNIFORM4I64NV)(getProcAddr("glUniform4i64NV")); gpUniform4i64NV == nil {
    AMD_gpu_shader_int64 = false
    NV_gpu_shader5 = false
  }
  if gpUniform4i64vNV = (C.GPUNIFORM4I64VNV)(getProcAddr("glUniform4i64vNV")); gpUniform4i64vNV == nil {
    AMD_gpu_shader_int64 = false
    NV_gpu_shader5 = false
  }
  if gpUniform4iARB = (C.GPUNIFORM4IARB)(getProcAddr("glUniform4iARB")); gpUniform4iARB == nil {
    ARB_shader_objects = false
  }
  if gpUniform4iv = (C.GPUNIFORM4IV)(getProcAddr("glUniform4iv")); gpUniform4iv == nil {
    return errors.New("glUniform4iv")
  }
  if gpUniform4ivARB = (C.GPUNIFORM4IVARB)(getProcAddr("glUniform4ivARB")); gpUniform4ivARB == nil {
    ARB_shader_objects = false
  }
  if gpUniform4ui = (C.GPUNIFORM4UI)(getProcAddr("glUniform4ui")); gpUniform4ui == nil {
    return errors.New("glUniform4ui")
  }
  if gpUniform4ui64NV = (C.GPUNIFORM4UI64NV)(getProcAddr("glUniform4ui64NV")); gpUniform4ui64NV == nil {
    AMD_gpu_shader_int64 = false
    NV_gpu_shader5 = false
  }
  if gpUniform4ui64vNV = (C.GPUNIFORM4UI64VNV)(getProcAddr("glUniform4ui64vNV")); gpUniform4ui64vNV == nil {
    AMD_gpu_shader_int64 = false
    NV_gpu_shader5 = false
  }
  if gpUniform4uiEXT = (C.GPUNIFORM4UIEXT)(getProcAddr("glUniform4uiEXT")); gpUniform4uiEXT == nil {
    EXT_gpu_shader4 = false
  }
  if gpUniform4uiv = (C.GPUNIFORM4UIV)(getProcAddr("glUniform4uiv")); gpUniform4uiv == nil {
    return errors.New("glUniform4uiv")
  }
  if gpUniform4uivEXT = (C.GPUNIFORM4UIVEXT)(getProcAddr("glUniform4uivEXT")); gpUniform4uivEXT == nil {
    EXT_gpu_shader4 = false
  }
  if gpUniformBlockBinding = (C.GPUNIFORMBLOCKBINDING)(getProcAddr("glUniformBlockBinding")); gpUniformBlockBinding == nil {
    ARB_uniform_buffer_object = false
    return errors.New("glUniformBlockBinding")
  }
  if gpUniformBufferEXT = (C.GPUNIFORMBUFFEREXT)(getProcAddr("glUniformBufferEXT")); gpUniformBufferEXT == nil {
    EXT_bindable_uniform = false
  }
  if gpUniformHandleui64ARB = (C.GPUNIFORMHANDLEUI64ARB)(getProcAddr("glUniformHandleui64ARB")); gpUniformHandleui64ARB == nil {
    ARB_bindless_texture = false
  }
  if gpUniformHandleui64NV = (C.GPUNIFORMHANDLEUI64NV)(getProcAddr("glUniformHandleui64NV")); gpUniformHandleui64NV == nil {
    NV_bindless_texture = false
  }
  if gpUniformHandleui64vARB = (C.GPUNIFORMHANDLEUI64VARB)(getProcAddr("glUniformHandleui64vARB")); gpUniformHandleui64vARB == nil {
    ARB_bindless_texture = false
  }
  if gpUniformHandleui64vNV = (C.GPUNIFORMHANDLEUI64VNV)(getProcAddr("glUniformHandleui64vNV")); gpUniformHandleui64vNV == nil {
    NV_bindless_texture = false
  }
  if gpUniformMatrix2dv = (C.GPUNIFORMMATRIX2DV)(getProcAddr("glUniformMatrix2dv")); gpUniformMatrix2dv == nil {
    ARB_gpu_shader_fp64 = false
  }
  if gpUniformMatrix2fv = (C.GPUNIFORMMATRIX2FV)(getProcAddr("glUniformMatrix2fv")); gpUniformMatrix2fv == nil {
    return errors.New("glUniformMatrix2fv")
  }
  if gpUniformMatrix2fvARB = (C.GPUNIFORMMATRIX2FVARB)(getProcAddr("glUniformMatrix2fvARB")); gpUniformMatrix2fvARB == nil {
    ARB_shader_objects = false
  }
  if gpUniformMatrix2x3dv = (C.GPUNIFORMMATRIX2X3DV)(getProcAddr("glUniformMatrix2x3dv")); gpUniformMatrix2x3dv == nil {
    ARB_gpu_shader_fp64 = false
  }
  if gpUniformMatrix2x3fv = (C.GPUNIFORMMATRIX2X3FV)(getProcAddr("glUniformMatrix2x3fv")); gpUniformMatrix2x3fv == nil {
    return errors.New("glUniformMatrix2x3fv")
  }
  if gpUniformMatrix2x4dv = (C.GPUNIFORMMATRIX2X4DV)(getProcAddr("glUniformMatrix2x4dv")); gpUniformMatrix2x4dv == nil {
    ARB_gpu_shader_fp64 = false
  }
  if gpUniformMatrix2x4fv = (C.GPUNIFORMMATRIX2X4FV)(getProcAddr("glUniformMatrix2x4fv")); gpUniformMatrix2x4fv == nil {
    return errors.New("glUniformMatrix2x4fv")
  }
  if gpUniformMatrix3dv = (C.GPUNIFORMMATRIX3DV)(getProcAddr("glUniformMatrix3dv")); gpUniformMatrix3dv == nil {
    ARB_gpu_shader_fp64 = false
  }
  if gpUniformMatrix3fv = (C.GPUNIFORMMATRIX3FV)(getProcAddr("glUniformMatrix3fv")); gpUniformMatrix3fv == nil {
    return errors.New("glUniformMatrix3fv")
  }
  if gpUniformMatrix3fvARB = (C.GPUNIFORMMATRIX3FVARB)(getProcAddr("glUniformMatrix3fvARB")); gpUniformMatrix3fvARB == nil {
    ARB_shader_objects = false
  }
  if gpUniformMatrix3x2dv = (C.GPUNIFORMMATRIX3X2DV)(getProcAddr("glUniformMatrix3x2dv")); gpUniformMatrix3x2dv == nil {
    ARB_gpu_shader_fp64 = false
  }
  if gpUniformMatrix3x2fv = (C.GPUNIFORMMATRIX3X2FV)(getProcAddr("glUniformMatrix3x2fv")); gpUniformMatrix3x2fv == nil {
    return errors.New("glUniformMatrix3x2fv")
  }
  if gpUniformMatrix3x4dv = (C.GPUNIFORMMATRIX3X4DV)(getProcAddr("glUniformMatrix3x4dv")); gpUniformMatrix3x4dv == nil {
    ARB_gpu_shader_fp64 = false
  }
  if gpUniformMatrix3x4fv = (C.GPUNIFORMMATRIX3X4FV)(getProcAddr("glUniformMatrix3x4fv")); gpUniformMatrix3x4fv == nil {
    return errors.New("glUniformMatrix3x4fv")
  }
  if gpUniformMatrix4dv = (C.GPUNIFORMMATRIX4DV)(getProcAddr("glUniformMatrix4dv")); gpUniformMatrix4dv == nil {
    ARB_gpu_shader_fp64 = false
  }
  if gpUniformMatrix4fv = (C.GPUNIFORMMATRIX4FV)(getProcAddr("glUniformMatrix4fv")); gpUniformMatrix4fv == nil {
    return errors.New("glUniformMatrix4fv")
  }
  if gpUniformMatrix4fvARB = (C.GPUNIFORMMATRIX4FVARB)(getProcAddr("glUniformMatrix4fvARB")); gpUniformMatrix4fvARB == nil {
    ARB_shader_objects = false
  }
  if gpUniformMatrix4x2dv = (C.GPUNIFORMMATRIX4X2DV)(getProcAddr("glUniformMatrix4x2dv")); gpUniformMatrix4x2dv == nil {
    ARB_gpu_shader_fp64 = false
  }
  if gpUniformMatrix4x2fv = (C.GPUNIFORMMATRIX4X2FV)(getProcAddr("glUniformMatrix4x2fv")); gpUniformMatrix4x2fv == nil {
    return errors.New("glUniformMatrix4x2fv")
  }
  if gpUniformMatrix4x3dv = (C.GPUNIFORMMATRIX4X3DV)(getProcAddr("glUniformMatrix4x3dv")); gpUniformMatrix4x3dv == nil {
    ARB_gpu_shader_fp64 = false
  }
  if gpUniformMatrix4x3fv = (C.GPUNIFORMMATRIX4X3FV)(getProcAddr("glUniformMatrix4x3fv")); gpUniformMatrix4x3fv == nil {
    return errors.New("glUniformMatrix4x3fv")
  }
  if gpUniformSubroutinesuiv = (C.GPUNIFORMSUBROUTINESUIV)(getProcAddr("glUniformSubroutinesuiv")); gpUniformSubroutinesuiv == nil {
    ARB_shader_subroutine = false
  }
  if gpUniformui64NV = (C.GPUNIFORMUI64NV)(getProcAddr("glUniformui64NV")); gpUniformui64NV == nil {
    NV_shader_buffer_load = false
  }
  if gpUniformui64vNV = (C.GPUNIFORMUI64VNV)(getProcAddr("glUniformui64vNV")); gpUniformui64vNV == nil {
    NV_shader_buffer_load = false
  }
  if gpUnlockArraysEXT = (C.GPUNLOCKARRAYSEXT)(getProcAddr("glUnlockArraysEXT")); gpUnlockArraysEXT == nil {
    EXT_compiled_vertex_array = false
  }
  if gpUnmapBuffer = (C.GPUNMAPBUFFER)(getProcAddr("glUnmapBuffer")); gpUnmapBuffer == nil {
    return errors.New("glUnmapBuffer")
  }
  if gpUnmapBufferARB = (C.GPUNMAPBUFFERARB)(getProcAddr("glUnmapBufferARB")); gpUnmapBufferARB == nil {
    ARB_vertex_buffer_object = false
  }
  if gpUnmapNamedBufferEXT = (C.GPUNMAPNAMEDBUFFEREXT)(getProcAddr("glUnmapNamedBufferEXT")); gpUnmapNamedBufferEXT == nil {
    EXT_direct_state_access = false
  }
  if gpUnmapObjectBufferATI = (C.GPUNMAPOBJECTBUFFERATI)(getProcAddr("glUnmapObjectBufferATI")); gpUnmapObjectBufferATI == nil {
    ATI_map_object_buffer = false
  }
  if gpUnmapTexture2DINTEL = (C.GPUNMAPTEXTURE2DINTEL)(getProcAddr("glUnmapTexture2DINTEL")); gpUnmapTexture2DINTEL == nil {
    INTEL_map_texture = false
  }
  if gpUpdateObjectBufferATI = (C.GPUPDATEOBJECTBUFFERATI)(getProcAddr("glUpdateObjectBufferATI")); gpUpdateObjectBufferATI == nil {
    ATI_vertex_array_object = false
  }
  if gpUseProgram = (C.GPUSEPROGRAM)(getProcAddr("glUseProgram")); gpUseProgram == nil {
    return errors.New("glUseProgram")
  }
  if gpUseProgramObjectARB = (C.GPUSEPROGRAMOBJECTARB)(getProcAddr("glUseProgramObjectARB")); gpUseProgramObjectARB == nil {
    ARB_shader_objects = false
  }
  if gpUseProgramStages = (C.GPUSEPROGRAMSTAGES)(getProcAddr("glUseProgramStages")); gpUseProgramStages == nil {
    ARB_separate_shader_objects = false
  }
  if gpUseProgramStagesEXT = (C.GPUSEPROGRAMSTAGESEXT)(getProcAddr("glUseProgramStagesEXT")); gpUseProgramStagesEXT == nil {
    EXT_separate_shader_objects = false
  }
  if gpUseShaderProgramEXT = (C.GPUSESHADERPROGRAMEXT)(getProcAddr("glUseShaderProgramEXT")); gpUseShaderProgramEXT == nil {
    EXT_separate_shader_objects = false
  }
  if gpVDPAUFiniNV = (C.GPVDPAUFININV)(getProcAddr("glVDPAUFiniNV")); gpVDPAUFiniNV == nil {
    NV_vdpau_interop = false
  }
  if gpVDPAUGetSurfaceivNV = (C.GPVDPAUGETSURFACEIVNV)(getProcAddr("glVDPAUGetSurfaceivNV")); gpVDPAUGetSurfaceivNV == nil {
    NV_vdpau_interop = false
  }
  if gpVDPAUInitNV = (C.GPVDPAUINITNV)(getProcAddr("glVDPAUInitNV")); gpVDPAUInitNV == nil {
    NV_vdpau_interop = false
  }
  if gpVDPAUIsSurfaceNV = (C.GPVDPAUISSURFACENV)(getProcAddr("glVDPAUIsSurfaceNV")); gpVDPAUIsSurfaceNV == nil {
    NV_vdpau_interop = false
  }
  if gpVDPAUMapSurfacesNV = (C.GPVDPAUMAPSURFACESNV)(getProcAddr("glVDPAUMapSurfacesNV")); gpVDPAUMapSurfacesNV == nil {
    NV_vdpau_interop = false
  }
  if gpVDPAURegisterOutputSurfaceNV = (C.GPVDPAUREGISTEROUTPUTSURFACENV)(getProcAddr("glVDPAURegisterOutputSurfaceNV")); gpVDPAURegisterOutputSurfaceNV == nil {
    NV_vdpau_interop = false
  }
  if gpVDPAURegisterVideoSurfaceNV = (C.GPVDPAUREGISTERVIDEOSURFACENV)(getProcAddr("glVDPAURegisterVideoSurfaceNV")); gpVDPAURegisterVideoSurfaceNV == nil {
    NV_vdpau_interop = false
  }
  if gpVDPAUSurfaceAccessNV = (C.GPVDPAUSURFACEACCESSNV)(getProcAddr("glVDPAUSurfaceAccessNV")); gpVDPAUSurfaceAccessNV == nil {
    NV_vdpau_interop = false
  }
  if gpVDPAUUnmapSurfacesNV = (C.GPVDPAUUNMAPSURFACESNV)(getProcAddr("glVDPAUUnmapSurfacesNV")); gpVDPAUUnmapSurfacesNV == nil {
    NV_vdpau_interop = false
  }
  if gpVDPAUUnregisterSurfaceNV = (C.GPVDPAUUNREGISTERSURFACENV)(getProcAddr("glVDPAUUnregisterSurfaceNV")); gpVDPAUUnregisterSurfaceNV == nil {
    NV_vdpau_interop = false
  }
  if gpValidateProgram = (C.GPVALIDATEPROGRAM)(getProcAddr("glValidateProgram")); gpValidateProgram == nil {
    return errors.New("glValidateProgram")
  }
  if gpValidateProgramARB = (C.GPVALIDATEPROGRAMARB)(getProcAddr("glValidateProgramARB")); gpValidateProgramARB == nil {
    ARB_shader_objects = false
  }
  if gpValidateProgramPipeline = (C.GPVALIDATEPROGRAMPIPELINE)(getProcAddr("glValidateProgramPipeline")); gpValidateProgramPipeline == nil {
    ARB_separate_shader_objects = false
  }
  if gpValidateProgramPipelineEXT = (C.GPVALIDATEPROGRAMPIPELINEEXT)(getProcAddr("glValidateProgramPipelineEXT")); gpValidateProgramPipelineEXT == nil {
    EXT_separate_shader_objects = false
  }
  if gpVariantArrayObjectATI = (C.GPVARIANTARRAYOBJECTATI)(getProcAddr("glVariantArrayObjectATI")); gpVariantArrayObjectATI == nil {
    ATI_vertex_array_object = false
  }
  if gpVariantPointerEXT = (C.GPVARIANTPOINTEREXT)(getProcAddr("glVariantPointerEXT")); gpVariantPointerEXT == nil {
    EXT_vertex_shader = false
  }
  if gpVariantbvEXT = (C.GPVARIANTBVEXT)(getProcAddr("glVariantbvEXT")); gpVariantbvEXT == nil {
    EXT_vertex_shader = false
  }
  if gpVariantdvEXT = (C.GPVARIANTDVEXT)(getProcAddr("glVariantdvEXT")); gpVariantdvEXT == nil {
    EXT_vertex_shader = false
  }
  if gpVariantfvEXT = (C.GPVARIANTFVEXT)(getProcAddr("glVariantfvEXT")); gpVariantfvEXT == nil {
    EXT_vertex_shader = false
  }
  if gpVariantivEXT = (C.GPVARIANTIVEXT)(getProcAddr("glVariantivEXT")); gpVariantivEXT == nil {
    EXT_vertex_shader = false
  }
  if gpVariantsvEXT = (C.GPVARIANTSVEXT)(getProcAddr("glVariantsvEXT")); gpVariantsvEXT == nil {
    EXT_vertex_shader = false
  }
  if gpVariantubvEXT = (C.GPVARIANTUBVEXT)(getProcAddr("glVariantubvEXT")); gpVariantubvEXT == nil {
    EXT_vertex_shader = false
  }
  if gpVariantuivEXT = (C.GPVARIANTUIVEXT)(getProcAddr("glVariantuivEXT")); gpVariantuivEXT == nil {
    EXT_vertex_shader = false
  }
  if gpVariantusvEXT = (C.GPVARIANTUSVEXT)(getProcAddr("glVariantusvEXT")); gpVariantusvEXT == nil {
    EXT_vertex_shader = false
  }
  if gpVertex2bOES = (C.GPVERTEX2BOES)(getProcAddr("glVertex2bOES")); gpVertex2bOES == nil {
    OES_byte_coordinates = false
  }
  if gpVertex2bvOES = (C.GPVERTEX2BVOES)(getProcAddr("glVertex2bvOES")); gpVertex2bvOES == nil {
    OES_byte_coordinates = false
  }
  if gpVertex2hNV = (C.GPVERTEX2HNV)(getProcAddr("glVertex2hNV")); gpVertex2hNV == nil {
    NV_half_float = false
  }
  if gpVertex2hvNV = (C.GPVERTEX2HVNV)(getProcAddr("glVertex2hvNV")); gpVertex2hvNV == nil {
    NV_half_float = false
  }
  if gpVertex2xOES = (C.GPVERTEX2XOES)(getProcAddr("glVertex2xOES")); gpVertex2xOES == nil {
    OES_fixed_point = false
  }
  if gpVertex2xvOES = (C.GPVERTEX2XVOES)(getProcAddr("glVertex2xvOES")); gpVertex2xvOES == nil {
    OES_fixed_point = false
  }
  if gpVertex3bOES = (C.GPVERTEX3BOES)(getProcAddr("glVertex3bOES")); gpVertex3bOES == nil {
    OES_byte_coordinates = false
  }
  if gpVertex3bvOES = (C.GPVERTEX3BVOES)(getProcAddr("glVertex3bvOES")); gpVertex3bvOES == nil {
    OES_byte_coordinates = false
  }
  if gpVertex3hNV = (C.GPVERTEX3HNV)(getProcAddr("glVertex3hNV")); gpVertex3hNV == nil {
    NV_half_float = false
  }
  if gpVertex3hvNV = (C.GPVERTEX3HVNV)(getProcAddr("glVertex3hvNV")); gpVertex3hvNV == nil {
    NV_half_float = false
  }
  if gpVertex3xOES = (C.GPVERTEX3XOES)(getProcAddr("glVertex3xOES")); gpVertex3xOES == nil {
    OES_fixed_point = false
  }
  if gpVertex3xvOES = (C.GPVERTEX3XVOES)(getProcAddr("glVertex3xvOES")); gpVertex3xvOES == nil {
    OES_fixed_point = false
  }
  if gpVertex4bOES = (C.GPVERTEX4BOES)(getProcAddr("glVertex4bOES")); gpVertex4bOES == nil {
    OES_byte_coordinates = false
  }
  if gpVertex4bvOES = (C.GPVERTEX4BVOES)(getProcAddr("glVertex4bvOES")); gpVertex4bvOES == nil {
    OES_byte_coordinates = false
  }
  if gpVertex4hNV = (C.GPVERTEX4HNV)(getProcAddr("glVertex4hNV")); gpVertex4hNV == nil {
    NV_half_float = false
  }
  if gpVertex4hvNV = (C.GPVERTEX4HVNV)(getProcAddr("glVertex4hvNV")); gpVertex4hvNV == nil {
    NV_half_float = false
  }
  if gpVertex4xOES = (C.GPVERTEX4XOES)(getProcAddr("glVertex4xOES")); gpVertex4xOES == nil {
    OES_fixed_point = false
  }
  if gpVertex4xvOES = (C.GPVERTEX4XVOES)(getProcAddr("glVertex4xvOES")); gpVertex4xvOES == nil {
    OES_fixed_point = false
  }
  if gpVertexArrayBindVertexBufferEXT = (C.GPVERTEXARRAYBINDVERTEXBUFFEREXT)(getProcAddr("glVertexArrayBindVertexBufferEXT")); gpVertexArrayBindVertexBufferEXT == nil {
    EXT_direct_state_access = false
  }
  if gpVertexArrayColorOffsetEXT = (C.GPVERTEXARRAYCOLOROFFSETEXT)(getProcAddr("glVertexArrayColorOffsetEXT")); gpVertexArrayColorOffsetEXT == nil {
    EXT_direct_state_access = false
  }
  if gpVertexArrayEdgeFlagOffsetEXT = (C.GPVERTEXARRAYEDGEFLAGOFFSETEXT)(getProcAddr("glVertexArrayEdgeFlagOffsetEXT")); gpVertexArrayEdgeFlagOffsetEXT == nil {
    EXT_direct_state_access = false
  }
  if gpVertexArrayFogCoordOffsetEXT = (C.GPVERTEXARRAYFOGCOORDOFFSETEXT)(getProcAddr("glVertexArrayFogCoordOffsetEXT")); gpVertexArrayFogCoordOffsetEXT == nil {
    EXT_direct_state_access = false
  }
  if gpVertexArrayIndexOffsetEXT = (C.GPVERTEXARRAYINDEXOFFSETEXT)(getProcAddr("glVertexArrayIndexOffsetEXT")); gpVertexArrayIndexOffsetEXT == nil {
    EXT_direct_state_access = false
  }
  if gpVertexArrayMultiTexCoordOffsetEXT = (C.GPVERTEXARRAYMULTITEXCOORDOFFSETEXT)(getProcAddr("glVertexArrayMultiTexCoordOffsetEXT")); gpVertexArrayMultiTexCoordOffsetEXT == nil {
    EXT_direct_state_access = false
  }
  if gpVertexArrayNormalOffsetEXT = (C.GPVERTEXARRAYNORMALOFFSETEXT)(getProcAddr("glVertexArrayNormalOffsetEXT")); gpVertexArrayNormalOffsetEXT == nil {
    EXT_direct_state_access = false
  }
  if gpVertexArrayParameteriAPPLE = (C.GPVERTEXARRAYPARAMETERIAPPLE)(getProcAddr("glVertexArrayParameteriAPPLE")); gpVertexArrayParameteriAPPLE == nil {
    APPLE_vertex_array_range = false
  }
  if gpVertexArrayRangeAPPLE = (C.GPVERTEXARRAYRANGEAPPLE)(getProcAddr("glVertexArrayRangeAPPLE")); gpVertexArrayRangeAPPLE == nil {
    APPLE_vertex_array_range = false
  }
  if gpVertexArrayRangeNV = (C.GPVERTEXARRAYRANGENV)(getProcAddr("glVertexArrayRangeNV")); gpVertexArrayRangeNV == nil {
    NV_vertex_array_range = false
  }
  if gpVertexArraySecondaryColorOffsetEXT = (C.GPVERTEXARRAYSECONDARYCOLOROFFSETEXT)(getProcAddr("glVertexArraySecondaryColorOffsetEXT")); gpVertexArraySecondaryColorOffsetEXT == nil {
    EXT_direct_state_access = false
  }
  if gpVertexArrayTexCoordOffsetEXT = (C.GPVERTEXARRAYTEXCOORDOFFSETEXT)(getProcAddr("glVertexArrayTexCoordOffsetEXT")); gpVertexArrayTexCoordOffsetEXT == nil {
    EXT_direct_state_access = false
  }
  if gpVertexArrayVertexAttribBindingEXT = (C.GPVERTEXARRAYVERTEXATTRIBBINDINGEXT)(getProcAddr("glVertexArrayVertexAttribBindingEXT")); gpVertexArrayVertexAttribBindingEXT == nil {
    EXT_direct_state_access = false
  }
  if gpVertexArrayVertexAttribDivisorEXT = (C.GPVERTEXARRAYVERTEXATTRIBDIVISOREXT)(getProcAddr("glVertexArrayVertexAttribDivisorEXT")); gpVertexArrayVertexAttribDivisorEXT == nil {
    EXT_direct_state_access = false
  }
  if gpVertexArrayVertexAttribFormatEXT = (C.GPVERTEXARRAYVERTEXATTRIBFORMATEXT)(getProcAddr("glVertexArrayVertexAttribFormatEXT")); gpVertexArrayVertexAttribFormatEXT == nil {
    EXT_direct_state_access = false
  }
  if gpVertexArrayVertexAttribIFormatEXT = (C.GPVERTEXARRAYVERTEXATTRIBIFORMATEXT)(getProcAddr("glVertexArrayVertexAttribIFormatEXT")); gpVertexArrayVertexAttribIFormatEXT == nil {
    EXT_direct_state_access = false
  }
  if gpVertexArrayVertexAttribIOffsetEXT = (C.GPVERTEXARRAYVERTEXATTRIBIOFFSETEXT)(getProcAddr("glVertexArrayVertexAttribIOffsetEXT")); gpVertexArrayVertexAttribIOffsetEXT == nil {
    EXT_direct_state_access = false
  }
  if gpVertexArrayVertexAttribLFormatEXT = (C.GPVERTEXARRAYVERTEXATTRIBLFORMATEXT)(getProcAddr("glVertexArrayVertexAttribLFormatEXT")); gpVertexArrayVertexAttribLFormatEXT == nil {
    EXT_direct_state_access = false
  }
  if gpVertexArrayVertexAttribLOffsetEXT = (C.GPVERTEXARRAYVERTEXATTRIBLOFFSETEXT)(getProcAddr("glVertexArrayVertexAttribLOffsetEXT")); gpVertexArrayVertexAttribLOffsetEXT == nil {
    EXT_direct_state_access = false
  }
  if gpVertexArrayVertexAttribOffsetEXT = (C.GPVERTEXARRAYVERTEXATTRIBOFFSETEXT)(getProcAddr("glVertexArrayVertexAttribOffsetEXT")); gpVertexArrayVertexAttribOffsetEXT == nil {
    EXT_direct_state_access = false
  }
  if gpVertexArrayVertexBindingDivisorEXT = (C.GPVERTEXARRAYVERTEXBINDINGDIVISOREXT)(getProcAddr("glVertexArrayVertexBindingDivisorEXT")); gpVertexArrayVertexBindingDivisorEXT == nil {
    EXT_direct_state_access = false
  }
  if gpVertexArrayVertexOffsetEXT = (C.GPVERTEXARRAYVERTEXOFFSETEXT)(getProcAddr("glVertexArrayVertexOffsetEXT")); gpVertexArrayVertexOffsetEXT == nil {
    EXT_direct_state_access = false
  }
  if gpVertexAttrib1d = (C.GPVERTEXATTRIB1D)(getProcAddr("glVertexAttrib1d")); gpVertexAttrib1d == nil {
    return errors.New("glVertexAttrib1d")
  }
  if gpVertexAttrib1dARB = (C.GPVERTEXATTRIB1DARB)(getProcAddr("glVertexAttrib1dARB")); gpVertexAttrib1dARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if gpVertexAttrib1dNV = (C.GPVERTEXATTRIB1DNV)(getProcAddr("glVertexAttrib1dNV")); gpVertexAttrib1dNV == nil {
    NV_vertex_program = false
  }
  if gpVertexAttrib1dv = (C.GPVERTEXATTRIB1DV)(getProcAddr("glVertexAttrib1dv")); gpVertexAttrib1dv == nil {
    return errors.New("glVertexAttrib1dv")
  }
  if gpVertexAttrib1dvARB = (C.GPVERTEXATTRIB1DVARB)(getProcAddr("glVertexAttrib1dvARB")); gpVertexAttrib1dvARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if gpVertexAttrib1dvNV = (C.GPVERTEXATTRIB1DVNV)(getProcAddr("glVertexAttrib1dvNV")); gpVertexAttrib1dvNV == nil {
    NV_vertex_program = false
  }
  if gpVertexAttrib1f = (C.GPVERTEXATTRIB1F)(getProcAddr("glVertexAttrib1f")); gpVertexAttrib1f == nil {
    return errors.New("glVertexAttrib1f")
  }
  if gpVertexAttrib1fARB = (C.GPVERTEXATTRIB1FARB)(getProcAddr("glVertexAttrib1fARB")); gpVertexAttrib1fARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if gpVertexAttrib1fNV = (C.GPVERTEXATTRIB1FNV)(getProcAddr("glVertexAttrib1fNV")); gpVertexAttrib1fNV == nil {
    NV_vertex_program = false
  }
  if gpVertexAttrib1fv = (C.GPVERTEXATTRIB1FV)(getProcAddr("glVertexAttrib1fv")); gpVertexAttrib1fv == nil {
    return errors.New("glVertexAttrib1fv")
  }
  if gpVertexAttrib1fvARB = (C.GPVERTEXATTRIB1FVARB)(getProcAddr("glVertexAttrib1fvARB")); gpVertexAttrib1fvARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if gpVertexAttrib1fvNV = (C.GPVERTEXATTRIB1FVNV)(getProcAddr("glVertexAttrib1fvNV")); gpVertexAttrib1fvNV == nil {
    NV_vertex_program = false
  }
  if gpVertexAttrib1hNV = (C.GPVERTEXATTRIB1HNV)(getProcAddr("glVertexAttrib1hNV")); gpVertexAttrib1hNV == nil {
    NV_half_float = false
  }
  if gpVertexAttrib1hvNV = (C.GPVERTEXATTRIB1HVNV)(getProcAddr("glVertexAttrib1hvNV")); gpVertexAttrib1hvNV == nil {
    NV_half_float = false
  }
  if gpVertexAttrib1s = (C.GPVERTEXATTRIB1S)(getProcAddr("glVertexAttrib1s")); gpVertexAttrib1s == nil {
    return errors.New("glVertexAttrib1s")
  }
  if gpVertexAttrib1sARB = (C.GPVERTEXATTRIB1SARB)(getProcAddr("glVertexAttrib1sARB")); gpVertexAttrib1sARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if gpVertexAttrib1sNV = (C.GPVERTEXATTRIB1SNV)(getProcAddr("glVertexAttrib1sNV")); gpVertexAttrib1sNV == nil {
    NV_vertex_program = false
  }
  if gpVertexAttrib1sv = (C.GPVERTEXATTRIB1SV)(getProcAddr("glVertexAttrib1sv")); gpVertexAttrib1sv == nil {
    return errors.New("glVertexAttrib1sv")
  }
  if gpVertexAttrib1svARB = (C.GPVERTEXATTRIB1SVARB)(getProcAddr("glVertexAttrib1svARB")); gpVertexAttrib1svARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if gpVertexAttrib1svNV = (C.GPVERTEXATTRIB1SVNV)(getProcAddr("glVertexAttrib1svNV")); gpVertexAttrib1svNV == nil {
    NV_vertex_program = false
  }
  if gpVertexAttrib2d = (C.GPVERTEXATTRIB2D)(getProcAddr("glVertexAttrib2d")); gpVertexAttrib2d == nil {
    return errors.New("glVertexAttrib2d")
  }
  if gpVertexAttrib2dARB = (C.GPVERTEXATTRIB2DARB)(getProcAddr("glVertexAttrib2dARB")); gpVertexAttrib2dARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if gpVertexAttrib2dNV = (C.GPVERTEXATTRIB2DNV)(getProcAddr("glVertexAttrib2dNV")); gpVertexAttrib2dNV == nil {
    NV_vertex_program = false
  }
  if gpVertexAttrib2dv = (C.GPVERTEXATTRIB2DV)(getProcAddr("glVertexAttrib2dv")); gpVertexAttrib2dv == nil {
    return errors.New("glVertexAttrib2dv")
  }
  if gpVertexAttrib2dvARB = (C.GPVERTEXATTRIB2DVARB)(getProcAddr("glVertexAttrib2dvARB")); gpVertexAttrib2dvARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if gpVertexAttrib2dvNV = (C.GPVERTEXATTRIB2DVNV)(getProcAddr("glVertexAttrib2dvNV")); gpVertexAttrib2dvNV == nil {
    NV_vertex_program = false
  }
  if gpVertexAttrib2f = (C.GPVERTEXATTRIB2F)(getProcAddr("glVertexAttrib2f")); gpVertexAttrib2f == nil {
    return errors.New("glVertexAttrib2f")
  }
  if gpVertexAttrib2fARB = (C.GPVERTEXATTRIB2FARB)(getProcAddr("glVertexAttrib2fARB")); gpVertexAttrib2fARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if gpVertexAttrib2fNV = (C.GPVERTEXATTRIB2FNV)(getProcAddr("glVertexAttrib2fNV")); gpVertexAttrib2fNV == nil {
    NV_vertex_program = false
  }
  if gpVertexAttrib2fv = (C.GPVERTEXATTRIB2FV)(getProcAddr("glVertexAttrib2fv")); gpVertexAttrib2fv == nil {
    return errors.New("glVertexAttrib2fv")
  }
  if gpVertexAttrib2fvARB = (C.GPVERTEXATTRIB2FVARB)(getProcAddr("glVertexAttrib2fvARB")); gpVertexAttrib2fvARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if gpVertexAttrib2fvNV = (C.GPVERTEXATTRIB2FVNV)(getProcAddr("glVertexAttrib2fvNV")); gpVertexAttrib2fvNV == nil {
    NV_vertex_program = false
  }
  if gpVertexAttrib2hNV = (C.GPVERTEXATTRIB2HNV)(getProcAddr("glVertexAttrib2hNV")); gpVertexAttrib2hNV == nil {
    NV_half_float = false
  }
  if gpVertexAttrib2hvNV = (C.GPVERTEXATTRIB2HVNV)(getProcAddr("glVertexAttrib2hvNV")); gpVertexAttrib2hvNV == nil {
    NV_half_float = false
  }
  if gpVertexAttrib2s = (C.GPVERTEXATTRIB2S)(getProcAddr("glVertexAttrib2s")); gpVertexAttrib2s == nil {
    return errors.New("glVertexAttrib2s")
  }
  if gpVertexAttrib2sARB = (C.GPVERTEXATTRIB2SARB)(getProcAddr("glVertexAttrib2sARB")); gpVertexAttrib2sARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if gpVertexAttrib2sNV = (C.GPVERTEXATTRIB2SNV)(getProcAddr("glVertexAttrib2sNV")); gpVertexAttrib2sNV == nil {
    NV_vertex_program = false
  }
  if gpVertexAttrib2sv = (C.GPVERTEXATTRIB2SV)(getProcAddr("glVertexAttrib2sv")); gpVertexAttrib2sv == nil {
    return errors.New("glVertexAttrib2sv")
  }
  if gpVertexAttrib2svARB = (C.GPVERTEXATTRIB2SVARB)(getProcAddr("glVertexAttrib2svARB")); gpVertexAttrib2svARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if gpVertexAttrib2svNV = (C.GPVERTEXATTRIB2SVNV)(getProcAddr("glVertexAttrib2svNV")); gpVertexAttrib2svNV == nil {
    NV_vertex_program = false
  }
  if gpVertexAttrib3d = (C.GPVERTEXATTRIB3D)(getProcAddr("glVertexAttrib3d")); gpVertexAttrib3d == nil {
    return errors.New("glVertexAttrib3d")
  }
  if gpVertexAttrib3dARB = (C.GPVERTEXATTRIB3DARB)(getProcAddr("glVertexAttrib3dARB")); gpVertexAttrib3dARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if gpVertexAttrib3dNV = (C.GPVERTEXATTRIB3DNV)(getProcAddr("glVertexAttrib3dNV")); gpVertexAttrib3dNV == nil {
    NV_vertex_program = false
  }
  if gpVertexAttrib3dv = (C.GPVERTEXATTRIB3DV)(getProcAddr("glVertexAttrib3dv")); gpVertexAttrib3dv == nil {
    return errors.New("glVertexAttrib3dv")
  }
  if gpVertexAttrib3dvARB = (C.GPVERTEXATTRIB3DVARB)(getProcAddr("glVertexAttrib3dvARB")); gpVertexAttrib3dvARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if gpVertexAttrib3dvNV = (C.GPVERTEXATTRIB3DVNV)(getProcAddr("glVertexAttrib3dvNV")); gpVertexAttrib3dvNV == nil {
    NV_vertex_program = false
  }
  if gpVertexAttrib3f = (C.GPVERTEXATTRIB3F)(getProcAddr("glVertexAttrib3f")); gpVertexAttrib3f == nil {
    return errors.New("glVertexAttrib3f")
  }
  if gpVertexAttrib3fARB = (C.GPVERTEXATTRIB3FARB)(getProcAddr("glVertexAttrib3fARB")); gpVertexAttrib3fARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if gpVertexAttrib3fNV = (C.GPVERTEXATTRIB3FNV)(getProcAddr("glVertexAttrib3fNV")); gpVertexAttrib3fNV == nil {
    NV_vertex_program = false
  }
  if gpVertexAttrib3fv = (C.GPVERTEXATTRIB3FV)(getProcAddr("glVertexAttrib3fv")); gpVertexAttrib3fv == nil {
    return errors.New("glVertexAttrib3fv")
  }
  if gpVertexAttrib3fvARB = (C.GPVERTEXATTRIB3FVARB)(getProcAddr("glVertexAttrib3fvARB")); gpVertexAttrib3fvARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if gpVertexAttrib3fvNV = (C.GPVERTEXATTRIB3FVNV)(getProcAddr("glVertexAttrib3fvNV")); gpVertexAttrib3fvNV == nil {
    NV_vertex_program = false
  }
  if gpVertexAttrib3hNV = (C.GPVERTEXATTRIB3HNV)(getProcAddr("glVertexAttrib3hNV")); gpVertexAttrib3hNV == nil {
    NV_half_float = false
  }
  if gpVertexAttrib3hvNV = (C.GPVERTEXATTRIB3HVNV)(getProcAddr("glVertexAttrib3hvNV")); gpVertexAttrib3hvNV == nil {
    NV_half_float = false
  }
  if gpVertexAttrib3s = (C.GPVERTEXATTRIB3S)(getProcAddr("glVertexAttrib3s")); gpVertexAttrib3s == nil {
    return errors.New("glVertexAttrib3s")
  }
  if gpVertexAttrib3sARB = (C.GPVERTEXATTRIB3SARB)(getProcAddr("glVertexAttrib3sARB")); gpVertexAttrib3sARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if gpVertexAttrib3sNV = (C.GPVERTEXATTRIB3SNV)(getProcAddr("glVertexAttrib3sNV")); gpVertexAttrib3sNV == nil {
    NV_vertex_program = false
  }
  if gpVertexAttrib3sv = (C.GPVERTEXATTRIB3SV)(getProcAddr("glVertexAttrib3sv")); gpVertexAttrib3sv == nil {
    return errors.New("glVertexAttrib3sv")
  }
  if gpVertexAttrib3svARB = (C.GPVERTEXATTRIB3SVARB)(getProcAddr("glVertexAttrib3svARB")); gpVertexAttrib3svARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if gpVertexAttrib3svNV = (C.GPVERTEXATTRIB3SVNV)(getProcAddr("glVertexAttrib3svNV")); gpVertexAttrib3svNV == nil {
    NV_vertex_program = false
  }
  if gpVertexAttrib4Nbv = (C.GPVERTEXATTRIB4NBV)(getProcAddr("glVertexAttrib4Nbv")); gpVertexAttrib4Nbv == nil {
    return errors.New("glVertexAttrib4Nbv")
  }
  if gpVertexAttrib4NbvARB = (C.GPVERTEXATTRIB4NBVARB)(getProcAddr("glVertexAttrib4NbvARB")); gpVertexAttrib4NbvARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if gpVertexAttrib4Niv = (C.GPVERTEXATTRIB4NIV)(getProcAddr("glVertexAttrib4Niv")); gpVertexAttrib4Niv == nil {
    return errors.New("glVertexAttrib4Niv")
  }
  if gpVertexAttrib4NivARB = (C.GPVERTEXATTRIB4NIVARB)(getProcAddr("glVertexAttrib4NivARB")); gpVertexAttrib4NivARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if gpVertexAttrib4Nsv = (C.GPVERTEXATTRIB4NSV)(getProcAddr("glVertexAttrib4Nsv")); gpVertexAttrib4Nsv == nil {
    return errors.New("glVertexAttrib4Nsv")
  }
  if gpVertexAttrib4NsvARB = (C.GPVERTEXATTRIB4NSVARB)(getProcAddr("glVertexAttrib4NsvARB")); gpVertexAttrib4NsvARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if gpVertexAttrib4Nub = (C.GPVERTEXATTRIB4NUB)(getProcAddr("glVertexAttrib4Nub")); gpVertexAttrib4Nub == nil {
    return errors.New("glVertexAttrib4Nub")
  }
  if gpVertexAttrib4NubARB = (C.GPVERTEXATTRIB4NUBARB)(getProcAddr("glVertexAttrib4NubARB")); gpVertexAttrib4NubARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if gpVertexAttrib4Nubv = (C.GPVERTEXATTRIB4NUBV)(getProcAddr("glVertexAttrib4Nubv")); gpVertexAttrib4Nubv == nil {
    return errors.New("glVertexAttrib4Nubv")
  }
  if gpVertexAttrib4NubvARB = (C.GPVERTEXATTRIB4NUBVARB)(getProcAddr("glVertexAttrib4NubvARB")); gpVertexAttrib4NubvARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if gpVertexAttrib4Nuiv = (C.GPVERTEXATTRIB4NUIV)(getProcAddr("glVertexAttrib4Nuiv")); gpVertexAttrib4Nuiv == nil {
    return errors.New("glVertexAttrib4Nuiv")
  }
  if gpVertexAttrib4NuivARB = (C.GPVERTEXATTRIB4NUIVARB)(getProcAddr("glVertexAttrib4NuivARB")); gpVertexAttrib4NuivARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if gpVertexAttrib4Nusv = (C.GPVERTEXATTRIB4NUSV)(getProcAddr("glVertexAttrib4Nusv")); gpVertexAttrib4Nusv == nil {
    return errors.New("glVertexAttrib4Nusv")
  }
  if gpVertexAttrib4NusvARB = (C.GPVERTEXATTRIB4NUSVARB)(getProcAddr("glVertexAttrib4NusvARB")); gpVertexAttrib4NusvARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if gpVertexAttrib4bv = (C.GPVERTEXATTRIB4BV)(getProcAddr("glVertexAttrib4bv")); gpVertexAttrib4bv == nil {
    return errors.New("glVertexAttrib4bv")
  }
  if gpVertexAttrib4bvARB = (C.GPVERTEXATTRIB4BVARB)(getProcAddr("glVertexAttrib4bvARB")); gpVertexAttrib4bvARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if gpVertexAttrib4d = (C.GPVERTEXATTRIB4D)(getProcAddr("glVertexAttrib4d")); gpVertexAttrib4d == nil {
    return errors.New("glVertexAttrib4d")
  }
  if gpVertexAttrib4dARB = (C.GPVERTEXATTRIB4DARB)(getProcAddr("glVertexAttrib4dARB")); gpVertexAttrib4dARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if gpVertexAttrib4dNV = (C.GPVERTEXATTRIB4DNV)(getProcAddr("glVertexAttrib4dNV")); gpVertexAttrib4dNV == nil {
    NV_vertex_program = false
  }
  if gpVertexAttrib4dv = (C.GPVERTEXATTRIB4DV)(getProcAddr("glVertexAttrib4dv")); gpVertexAttrib4dv == nil {
    return errors.New("glVertexAttrib4dv")
  }
  if gpVertexAttrib4dvARB = (C.GPVERTEXATTRIB4DVARB)(getProcAddr("glVertexAttrib4dvARB")); gpVertexAttrib4dvARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if gpVertexAttrib4dvNV = (C.GPVERTEXATTRIB4DVNV)(getProcAddr("glVertexAttrib4dvNV")); gpVertexAttrib4dvNV == nil {
    NV_vertex_program = false
  }
  if gpVertexAttrib4f = (C.GPVERTEXATTRIB4F)(getProcAddr("glVertexAttrib4f")); gpVertexAttrib4f == nil {
    return errors.New("glVertexAttrib4f")
  }
  if gpVertexAttrib4fARB = (C.GPVERTEXATTRIB4FARB)(getProcAddr("glVertexAttrib4fARB")); gpVertexAttrib4fARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if gpVertexAttrib4fNV = (C.GPVERTEXATTRIB4FNV)(getProcAddr("glVertexAttrib4fNV")); gpVertexAttrib4fNV == nil {
    NV_vertex_program = false
  }
  if gpVertexAttrib4fv = (C.GPVERTEXATTRIB4FV)(getProcAddr("glVertexAttrib4fv")); gpVertexAttrib4fv == nil {
    return errors.New("glVertexAttrib4fv")
  }
  if gpVertexAttrib4fvARB = (C.GPVERTEXATTRIB4FVARB)(getProcAddr("glVertexAttrib4fvARB")); gpVertexAttrib4fvARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if gpVertexAttrib4fvNV = (C.GPVERTEXATTRIB4FVNV)(getProcAddr("glVertexAttrib4fvNV")); gpVertexAttrib4fvNV == nil {
    NV_vertex_program = false
  }
  if gpVertexAttrib4hNV = (C.GPVERTEXATTRIB4HNV)(getProcAddr("glVertexAttrib4hNV")); gpVertexAttrib4hNV == nil {
    NV_half_float = false
  }
  if gpVertexAttrib4hvNV = (C.GPVERTEXATTRIB4HVNV)(getProcAddr("glVertexAttrib4hvNV")); gpVertexAttrib4hvNV == nil {
    NV_half_float = false
  }
  if gpVertexAttrib4iv = (C.GPVERTEXATTRIB4IV)(getProcAddr("glVertexAttrib4iv")); gpVertexAttrib4iv == nil {
    return errors.New("glVertexAttrib4iv")
  }
  if gpVertexAttrib4ivARB = (C.GPVERTEXATTRIB4IVARB)(getProcAddr("glVertexAttrib4ivARB")); gpVertexAttrib4ivARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if gpVertexAttrib4s = (C.GPVERTEXATTRIB4S)(getProcAddr("glVertexAttrib4s")); gpVertexAttrib4s == nil {
    return errors.New("glVertexAttrib4s")
  }
  if gpVertexAttrib4sARB = (C.GPVERTEXATTRIB4SARB)(getProcAddr("glVertexAttrib4sARB")); gpVertexAttrib4sARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if gpVertexAttrib4sNV = (C.GPVERTEXATTRIB4SNV)(getProcAddr("glVertexAttrib4sNV")); gpVertexAttrib4sNV == nil {
    NV_vertex_program = false
  }
  if gpVertexAttrib4sv = (C.GPVERTEXATTRIB4SV)(getProcAddr("glVertexAttrib4sv")); gpVertexAttrib4sv == nil {
    return errors.New("glVertexAttrib4sv")
  }
  if gpVertexAttrib4svARB = (C.GPVERTEXATTRIB4SVARB)(getProcAddr("glVertexAttrib4svARB")); gpVertexAttrib4svARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if gpVertexAttrib4svNV = (C.GPVERTEXATTRIB4SVNV)(getProcAddr("glVertexAttrib4svNV")); gpVertexAttrib4svNV == nil {
    NV_vertex_program = false
  }
  if gpVertexAttrib4ubNV = (C.GPVERTEXATTRIB4UBNV)(getProcAddr("glVertexAttrib4ubNV")); gpVertexAttrib4ubNV == nil {
    NV_vertex_program = false
  }
  if gpVertexAttrib4ubv = (C.GPVERTEXATTRIB4UBV)(getProcAddr("glVertexAttrib4ubv")); gpVertexAttrib4ubv == nil {
    return errors.New("glVertexAttrib4ubv")
  }
  if gpVertexAttrib4ubvARB = (C.GPVERTEXATTRIB4UBVARB)(getProcAddr("glVertexAttrib4ubvARB")); gpVertexAttrib4ubvARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if gpVertexAttrib4ubvNV = (C.GPVERTEXATTRIB4UBVNV)(getProcAddr("glVertexAttrib4ubvNV")); gpVertexAttrib4ubvNV == nil {
    NV_vertex_program = false
  }
  if gpVertexAttrib4uiv = (C.GPVERTEXATTRIB4UIV)(getProcAddr("glVertexAttrib4uiv")); gpVertexAttrib4uiv == nil {
    return errors.New("glVertexAttrib4uiv")
  }
  if gpVertexAttrib4uivARB = (C.GPVERTEXATTRIB4UIVARB)(getProcAddr("glVertexAttrib4uivARB")); gpVertexAttrib4uivARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if gpVertexAttrib4usv = (C.GPVERTEXATTRIB4USV)(getProcAddr("glVertexAttrib4usv")); gpVertexAttrib4usv == nil {
    return errors.New("glVertexAttrib4usv")
  }
  if gpVertexAttrib4usvARB = (C.GPVERTEXATTRIB4USVARB)(getProcAddr("glVertexAttrib4usvARB")); gpVertexAttrib4usvARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if gpVertexAttribArrayObjectATI = (C.GPVERTEXATTRIBARRAYOBJECTATI)(getProcAddr("glVertexAttribArrayObjectATI")); gpVertexAttribArrayObjectATI == nil {
    ATI_vertex_attrib_array_object = false
  }
  if gpVertexAttribBinding = (C.GPVERTEXATTRIBBINDING)(getProcAddr("glVertexAttribBinding")); gpVertexAttribBinding == nil {
    ARB_vertex_attrib_binding = false
  }
  if gpVertexAttribDivisor = (C.GPVERTEXATTRIBDIVISOR)(getProcAddr("glVertexAttribDivisor")); gpVertexAttribDivisor == nil {
    return errors.New("glVertexAttribDivisor")
  }
  if gpVertexAttribDivisorARB = (C.GPVERTEXATTRIBDIVISORARB)(getProcAddr("glVertexAttribDivisorARB")); gpVertexAttribDivisorARB == nil {
    ARB_instanced_arrays = false
  }
  if gpVertexAttribFormat = (C.GPVERTEXATTRIBFORMAT)(getProcAddr("glVertexAttribFormat")); gpVertexAttribFormat == nil {
    ARB_vertex_attrib_binding = false
  }
  if gpVertexAttribFormatNV = (C.GPVERTEXATTRIBFORMATNV)(getProcAddr("glVertexAttribFormatNV")); gpVertexAttribFormatNV == nil {
    NV_vertex_buffer_unified_memory = false
  }
  if gpVertexAttribI1i = (C.GPVERTEXATTRIBI1I)(getProcAddr("glVertexAttribI1i")); gpVertexAttribI1i == nil {
    return errors.New("glVertexAttribI1i")
  }
  if gpVertexAttribI1iEXT = (C.GPVERTEXATTRIBI1IEXT)(getProcAddr("glVertexAttribI1iEXT")); gpVertexAttribI1iEXT == nil {
    NV_vertex_program4 = false
  }
  if gpVertexAttribI1iv = (C.GPVERTEXATTRIBI1IV)(getProcAddr("glVertexAttribI1iv")); gpVertexAttribI1iv == nil {
    return errors.New("glVertexAttribI1iv")
  }
  if gpVertexAttribI1ivEXT = (C.GPVERTEXATTRIBI1IVEXT)(getProcAddr("glVertexAttribI1ivEXT")); gpVertexAttribI1ivEXT == nil {
    NV_vertex_program4 = false
  }
  if gpVertexAttribI1ui = (C.GPVERTEXATTRIBI1UI)(getProcAddr("glVertexAttribI1ui")); gpVertexAttribI1ui == nil {
    return errors.New("glVertexAttribI1ui")
  }
  if gpVertexAttribI1uiEXT = (C.GPVERTEXATTRIBI1UIEXT)(getProcAddr("glVertexAttribI1uiEXT")); gpVertexAttribI1uiEXT == nil {
    NV_vertex_program4 = false
  }
  if gpVertexAttribI1uiv = (C.GPVERTEXATTRIBI1UIV)(getProcAddr("glVertexAttribI1uiv")); gpVertexAttribI1uiv == nil {
    return errors.New("glVertexAttribI1uiv")
  }
  if gpVertexAttribI1uivEXT = (C.GPVERTEXATTRIBI1UIVEXT)(getProcAddr("glVertexAttribI1uivEXT")); gpVertexAttribI1uivEXT == nil {
    NV_vertex_program4 = false
  }
  if gpVertexAttribI2i = (C.GPVERTEXATTRIBI2I)(getProcAddr("glVertexAttribI2i")); gpVertexAttribI2i == nil {
    return errors.New("glVertexAttribI2i")
  }
  if gpVertexAttribI2iEXT = (C.GPVERTEXATTRIBI2IEXT)(getProcAddr("glVertexAttribI2iEXT")); gpVertexAttribI2iEXT == nil {
    NV_vertex_program4 = false
  }
  if gpVertexAttribI2iv = (C.GPVERTEXATTRIBI2IV)(getProcAddr("glVertexAttribI2iv")); gpVertexAttribI2iv == nil {
    return errors.New("glVertexAttribI2iv")
  }
  if gpVertexAttribI2ivEXT = (C.GPVERTEXATTRIBI2IVEXT)(getProcAddr("glVertexAttribI2ivEXT")); gpVertexAttribI2ivEXT == nil {
    NV_vertex_program4 = false
  }
  if gpVertexAttribI2ui = (C.GPVERTEXATTRIBI2UI)(getProcAddr("glVertexAttribI2ui")); gpVertexAttribI2ui == nil {
    return errors.New("glVertexAttribI2ui")
  }
  if gpVertexAttribI2uiEXT = (C.GPVERTEXATTRIBI2UIEXT)(getProcAddr("glVertexAttribI2uiEXT")); gpVertexAttribI2uiEXT == nil {
    NV_vertex_program4 = false
  }
  if gpVertexAttribI2uiv = (C.GPVERTEXATTRIBI2UIV)(getProcAddr("glVertexAttribI2uiv")); gpVertexAttribI2uiv == nil {
    return errors.New("glVertexAttribI2uiv")
  }
  if gpVertexAttribI2uivEXT = (C.GPVERTEXATTRIBI2UIVEXT)(getProcAddr("glVertexAttribI2uivEXT")); gpVertexAttribI2uivEXT == nil {
    NV_vertex_program4 = false
  }
  if gpVertexAttribI3i = (C.GPVERTEXATTRIBI3I)(getProcAddr("glVertexAttribI3i")); gpVertexAttribI3i == nil {
    return errors.New("glVertexAttribI3i")
  }
  if gpVertexAttribI3iEXT = (C.GPVERTEXATTRIBI3IEXT)(getProcAddr("glVertexAttribI3iEXT")); gpVertexAttribI3iEXT == nil {
    NV_vertex_program4 = false
  }
  if gpVertexAttribI3iv = (C.GPVERTEXATTRIBI3IV)(getProcAddr("glVertexAttribI3iv")); gpVertexAttribI3iv == nil {
    return errors.New("glVertexAttribI3iv")
  }
  if gpVertexAttribI3ivEXT = (C.GPVERTEXATTRIBI3IVEXT)(getProcAddr("glVertexAttribI3ivEXT")); gpVertexAttribI3ivEXT == nil {
    NV_vertex_program4 = false
  }
  if gpVertexAttribI3ui = (C.GPVERTEXATTRIBI3UI)(getProcAddr("glVertexAttribI3ui")); gpVertexAttribI3ui == nil {
    return errors.New("glVertexAttribI3ui")
  }
  if gpVertexAttribI3uiEXT = (C.GPVERTEXATTRIBI3UIEXT)(getProcAddr("glVertexAttribI3uiEXT")); gpVertexAttribI3uiEXT == nil {
    NV_vertex_program4 = false
  }
  if gpVertexAttribI3uiv = (C.GPVERTEXATTRIBI3UIV)(getProcAddr("glVertexAttribI3uiv")); gpVertexAttribI3uiv == nil {
    return errors.New("glVertexAttribI3uiv")
  }
  if gpVertexAttribI3uivEXT = (C.GPVERTEXATTRIBI3UIVEXT)(getProcAddr("glVertexAttribI3uivEXT")); gpVertexAttribI3uivEXT == nil {
    NV_vertex_program4 = false
  }
  if gpVertexAttribI4bv = (C.GPVERTEXATTRIBI4BV)(getProcAddr("glVertexAttribI4bv")); gpVertexAttribI4bv == nil {
    return errors.New("glVertexAttribI4bv")
  }
  if gpVertexAttribI4bvEXT = (C.GPVERTEXATTRIBI4BVEXT)(getProcAddr("glVertexAttribI4bvEXT")); gpVertexAttribI4bvEXT == nil {
    NV_vertex_program4 = false
  }
  if gpVertexAttribI4i = (C.GPVERTEXATTRIBI4I)(getProcAddr("glVertexAttribI4i")); gpVertexAttribI4i == nil {
    return errors.New("glVertexAttribI4i")
  }
  if gpVertexAttribI4iEXT = (C.GPVERTEXATTRIBI4IEXT)(getProcAddr("glVertexAttribI4iEXT")); gpVertexAttribI4iEXT == nil {
    NV_vertex_program4 = false
  }
  if gpVertexAttribI4iv = (C.GPVERTEXATTRIBI4IV)(getProcAddr("glVertexAttribI4iv")); gpVertexAttribI4iv == nil {
    return errors.New("glVertexAttribI4iv")
  }
  if gpVertexAttribI4ivEXT = (C.GPVERTEXATTRIBI4IVEXT)(getProcAddr("glVertexAttribI4ivEXT")); gpVertexAttribI4ivEXT == nil {
    NV_vertex_program4 = false
  }
  if gpVertexAttribI4sv = (C.GPVERTEXATTRIBI4SV)(getProcAddr("glVertexAttribI4sv")); gpVertexAttribI4sv == nil {
    return errors.New("glVertexAttribI4sv")
  }
  if gpVertexAttribI4svEXT = (C.GPVERTEXATTRIBI4SVEXT)(getProcAddr("glVertexAttribI4svEXT")); gpVertexAttribI4svEXT == nil {
    NV_vertex_program4 = false
  }
  if gpVertexAttribI4ubv = (C.GPVERTEXATTRIBI4UBV)(getProcAddr("glVertexAttribI4ubv")); gpVertexAttribI4ubv == nil {
    return errors.New("glVertexAttribI4ubv")
  }
  if gpVertexAttribI4ubvEXT = (C.GPVERTEXATTRIBI4UBVEXT)(getProcAddr("glVertexAttribI4ubvEXT")); gpVertexAttribI4ubvEXT == nil {
    NV_vertex_program4 = false
  }
  if gpVertexAttribI4ui = (C.GPVERTEXATTRIBI4UI)(getProcAddr("glVertexAttribI4ui")); gpVertexAttribI4ui == nil {
    return errors.New("glVertexAttribI4ui")
  }
  if gpVertexAttribI4uiEXT = (C.GPVERTEXATTRIBI4UIEXT)(getProcAddr("glVertexAttribI4uiEXT")); gpVertexAttribI4uiEXT == nil {
    NV_vertex_program4 = false
  }
  if gpVertexAttribI4uiv = (C.GPVERTEXATTRIBI4UIV)(getProcAddr("glVertexAttribI4uiv")); gpVertexAttribI4uiv == nil {
    return errors.New("glVertexAttribI4uiv")
  }
  if gpVertexAttribI4uivEXT = (C.GPVERTEXATTRIBI4UIVEXT)(getProcAddr("glVertexAttribI4uivEXT")); gpVertexAttribI4uivEXT == nil {
    NV_vertex_program4 = false
  }
  if gpVertexAttribI4usv = (C.GPVERTEXATTRIBI4USV)(getProcAddr("glVertexAttribI4usv")); gpVertexAttribI4usv == nil {
    return errors.New("glVertexAttribI4usv")
  }
  if gpVertexAttribI4usvEXT = (C.GPVERTEXATTRIBI4USVEXT)(getProcAddr("glVertexAttribI4usvEXT")); gpVertexAttribI4usvEXT == nil {
    NV_vertex_program4 = false
  }
  if gpVertexAttribIFormat = (C.GPVERTEXATTRIBIFORMAT)(getProcAddr("glVertexAttribIFormat")); gpVertexAttribIFormat == nil {
    ARB_vertex_attrib_binding = false
  }
  if gpVertexAttribIFormatNV = (C.GPVERTEXATTRIBIFORMATNV)(getProcAddr("glVertexAttribIFormatNV")); gpVertexAttribIFormatNV == nil {
    NV_vertex_buffer_unified_memory = false
  }
  if gpVertexAttribIPointer = (C.GPVERTEXATTRIBIPOINTER)(getProcAddr("glVertexAttribIPointer")); gpVertexAttribIPointer == nil {
    return errors.New("glVertexAttribIPointer")
  }
  if gpVertexAttribIPointerEXT = (C.GPVERTEXATTRIBIPOINTEREXT)(getProcAddr("glVertexAttribIPointerEXT")); gpVertexAttribIPointerEXT == nil {
    NV_vertex_program4 = false
  }
  if gpVertexAttribL1d = (C.GPVERTEXATTRIBL1D)(getProcAddr("glVertexAttribL1d")); gpVertexAttribL1d == nil {
    ARB_vertex_attrib_64bit = false
  }
  if gpVertexAttribL1dEXT = (C.GPVERTEXATTRIBL1DEXT)(getProcAddr("glVertexAttribL1dEXT")); gpVertexAttribL1dEXT == nil {
    EXT_vertex_attrib_64bit = false
  }
  if gpVertexAttribL1dv = (C.GPVERTEXATTRIBL1DV)(getProcAddr("glVertexAttribL1dv")); gpVertexAttribL1dv == nil {
    ARB_vertex_attrib_64bit = false
  }
  if gpVertexAttribL1dvEXT = (C.GPVERTEXATTRIBL1DVEXT)(getProcAddr("glVertexAttribL1dvEXT")); gpVertexAttribL1dvEXT == nil {
    EXT_vertex_attrib_64bit = false
  }
  if gpVertexAttribL1i64NV = (C.GPVERTEXATTRIBL1I64NV)(getProcAddr("glVertexAttribL1i64NV")); gpVertexAttribL1i64NV == nil {
    NV_vertex_attrib_integer_64bit = false
  }
  if gpVertexAttribL1i64vNV = (C.GPVERTEXATTRIBL1I64VNV)(getProcAddr("glVertexAttribL1i64vNV")); gpVertexAttribL1i64vNV == nil {
    NV_vertex_attrib_integer_64bit = false
  }
  if gpVertexAttribL1ui64ARB = (C.GPVERTEXATTRIBL1UI64ARB)(getProcAddr("glVertexAttribL1ui64ARB")); gpVertexAttribL1ui64ARB == nil {
    ARB_bindless_texture = false
  }
  if gpVertexAttribL1ui64NV = (C.GPVERTEXATTRIBL1UI64NV)(getProcAddr("glVertexAttribL1ui64NV")); gpVertexAttribL1ui64NV == nil {
    NV_vertex_attrib_integer_64bit = false
  }
  if gpVertexAttribL1ui64vARB = (C.GPVERTEXATTRIBL1UI64VARB)(getProcAddr("glVertexAttribL1ui64vARB")); gpVertexAttribL1ui64vARB == nil {
    ARB_bindless_texture = false
  }
  if gpVertexAttribL1ui64vNV = (C.GPVERTEXATTRIBL1UI64VNV)(getProcAddr("glVertexAttribL1ui64vNV")); gpVertexAttribL1ui64vNV == nil {
    NV_vertex_attrib_integer_64bit = false
  }
  if gpVertexAttribL2d = (C.GPVERTEXATTRIBL2D)(getProcAddr("glVertexAttribL2d")); gpVertexAttribL2d == nil {
    ARB_vertex_attrib_64bit = false
  }
  if gpVertexAttribL2dEXT = (C.GPVERTEXATTRIBL2DEXT)(getProcAddr("glVertexAttribL2dEXT")); gpVertexAttribL2dEXT == nil {
    EXT_vertex_attrib_64bit = false
  }
  if gpVertexAttribL2dv = (C.GPVERTEXATTRIBL2DV)(getProcAddr("glVertexAttribL2dv")); gpVertexAttribL2dv == nil {
    ARB_vertex_attrib_64bit = false
  }
  if gpVertexAttribL2dvEXT = (C.GPVERTEXATTRIBL2DVEXT)(getProcAddr("glVertexAttribL2dvEXT")); gpVertexAttribL2dvEXT == nil {
    EXT_vertex_attrib_64bit = false
  }
  if gpVertexAttribL2i64NV = (C.GPVERTEXATTRIBL2I64NV)(getProcAddr("glVertexAttribL2i64NV")); gpVertexAttribL2i64NV == nil {
    NV_vertex_attrib_integer_64bit = false
  }
  if gpVertexAttribL2i64vNV = (C.GPVERTEXATTRIBL2I64VNV)(getProcAddr("glVertexAttribL2i64vNV")); gpVertexAttribL2i64vNV == nil {
    NV_vertex_attrib_integer_64bit = false
  }
  if gpVertexAttribL2ui64NV = (C.GPVERTEXATTRIBL2UI64NV)(getProcAddr("glVertexAttribL2ui64NV")); gpVertexAttribL2ui64NV == nil {
    NV_vertex_attrib_integer_64bit = false
  }
  if gpVertexAttribL2ui64vNV = (C.GPVERTEXATTRIBL2UI64VNV)(getProcAddr("glVertexAttribL2ui64vNV")); gpVertexAttribL2ui64vNV == nil {
    NV_vertex_attrib_integer_64bit = false
  }
  if gpVertexAttribL3d = (C.GPVERTEXATTRIBL3D)(getProcAddr("glVertexAttribL3d")); gpVertexAttribL3d == nil {
    ARB_vertex_attrib_64bit = false
  }
  if gpVertexAttribL3dEXT = (C.GPVERTEXATTRIBL3DEXT)(getProcAddr("glVertexAttribL3dEXT")); gpVertexAttribL3dEXT == nil {
    EXT_vertex_attrib_64bit = false
  }
  if gpVertexAttribL3dv = (C.GPVERTEXATTRIBL3DV)(getProcAddr("glVertexAttribL3dv")); gpVertexAttribL3dv == nil {
    ARB_vertex_attrib_64bit = false
  }
  if gpVertexAttribL3dvEXT = (C.GPVERTEXATTRIBL3DVEXT)(getProcAddr("glVertexAttribL3dvEXT")); gpVertexAttribL3dvEXT == nil {
    EXT_vertex_attrib_64bit = false
  }
  if gpVertexAttribL3i64NV = (C.GPVERTEXATTRIBL3I64NV)(getProcAddr("glVertexAttribL3i64NV")); gpVertexAttribL3i64NV == nil {
    NV_vertex_attrib_integer_64bit = false
  }
  if gpVertexAttribL3i64vNV = (C.GPVERTEXATTRIBL3I64VNV)(getProcAddr("glVertexAttribL3i64vNV")); gpVertexAttribL3i64vNV == nil {
    NV_vertex_attrib_integer_64bit = false
  }
  if gpVertexAttribL3ui64NV = (C.GPVERTEXATTRIBL3UI64NV)(getProcAddr("glVertexAttribL3ui64NV")); gpVertexAttribL3ui64NV == nil {
    NV_vertex_attrib_integer_64bit = false
  }
  if gpVertexAttribL3ui64vNV = (C.GPVERTEXATTRIBL3UI64VNV)(getProcAddr("glVertexAttribL3ui64vNV")); gpVertexAttribL3ui64vNV == nil {
    NV_vertex_attrib_integer_64bit = false
  }
  if gpVertexAttribL4d = (C.GPVERTEXATTRIBL4D)(getProcAddr("glVertexAttribL4d")); gpVertexAttribL4d == nil {
    ARB_vertex_attrib_64bit = false
  }
  if gpVertexAttribL4dEXT = (C.GPVERTEXATTRIBL4DEXT)(getProcAddr("glVertexAttribL4dEXT")); gpVertexAttribL4dEXT == nil {
    EXT_vertex_attrib_64bit = false
  }
  if gpVertexAttribL4dv = (C.GPVERTEXATTRIBL4DV)(getProcAddr("glVertexAttribL4dv")); gpVertexAttribL4dv == nil {
    ARB_vertex_attrib_64bit = false
  }
  if gpVertexAttribL4dvEXT = (C.GPVERTEXATTRIBL4DVEXT)(getProcAddr("glVertexAttribL4dvEXT")); gpVertexAttribL4dvEXT == nil {
    EXT_vertex_attrib_64bit = false
  }
  if gpVertexAttribL4i64NV = (C.GPVERTEXATTRIBL4I64NV)(getProcAddr("glVertexAttribL4i64NV")); gpVertexAttribL4i64NV == nil {
    NV_vertex_attrib_integer_64bit = false
  }
  if gpVertexAttribL4i64vNV = (C.GPVERTEXATTRIBL4I64VNV)(getProcAddr("glVertexAttribL4i64vNV")); gpVertexAttribL4i64vNV == nil {
    NV_vertex_attrib_integer_64bit = false
  }
  if gpVertexAttribL4ui64NV = (C.GPVERTEXATTRIBL4UI64NV)(getProcAddr("glVertexAttribL4ui64NV")); gpVertexAttribL4ui64NV == nil {
    NV_vertex_attrib_integer_64bit = false
  }
  if gpVertexAttribL4ui64vNV = (C.GPVERTEXATTRIBL4UI64VNV)(getProcAddr("glVertexAttribL4ui64vNV")); gpVertexAttribL4ui64vNV == nil {
    NV_vertex_attrib_integer_64bit = false
  }
  if gpVertexAttribLFormat = (C.GPVERTEXATTRIBLFORMAT)(getProcAddr("glVertexAttribLFormat")); gpVertexAttribLFormat == nil {
    ARB_vertex_attrib_binding = false
  }
  if gpVertexAttribLFormatNV = (C.GPVERTEXATTRIBLFORMATNV)(getProcAddr("glVertexAttribLFormatNV")); gpVertexAttribLFormatNV == nil {
    NV_vertex_attrib_integer_64bit = false
  }
  if gpVertexAttribLPointer = (C.GPVERTEXATTRIBLPOINTER)(getProcAddr("glVertexAttribLPointer")); gpVertexAttribLPointer == nil {
    ARB_vertex_attrib_64bit = false
  }
  if gpVertexAttribLPointerEXT = (C.GPVERTEXATTRIBLPOINTEREXT)(getProcAddr("glVertexAttribLPointerEXT")); gpVertexAttribLPointerEXT == nil {
    EXT_vertex_attrib_64bit = false
  }
  if gpVertexAttribP1ui = (C.GPVERTEXATTRIBP1UI)(getProcAddr("glVertexAttribP1ui")); gpVertexAttribP1ui == nil {
    ARB_vertex_type_2_10_10_10_rev = false
    return errors.New("glVertexAttribP1ui")
  }
  if gpVertexAttribP1uiv = (C.GPVERTEXATTRIBP1UIV)(getProcAddr("glVertexAttribP1uiv")); gpVertexAttribP1uiv == nil {
    ARB_vertex_type_2_10_10_10_rev = false
    return errors.New("glVertexAttribP1uiv")
  }
  if gpVertexAttribP2ui = (C.GPVERTEXATTRIBP2UI)(getProcAddr("glVertexAttribP2ui")); gpVertexAttribP2ui == nil {
    ARB_vertex_type_2_10_10_10_rev = false
    return errors.New("glVertexAttribP2ui")
  }
  if gpVertexAttribP2uiv = (C.GPVERTEXATTRIBP2UIV)(getProcAddr("glVertexAttribP2uiv")); gpVertexAttribP2uiv == nil {
    ARB_vertex_type_2_10_10_10_rev = false
    return errors.New("glVertexAttribP2uiv")
  }
  if gpVertexAttribP3ui = (C.GPVERTEXATTRIBP3UI)(getProcAddr("glVertexAttribP3ui")); gpVertexAttribP3ui == nil {
    ARB_vertex_type_2_10_10_10_rev = false
    return errors.New("glVertexAttribP3ui")
  }
  if gpVertexAttribP3uiv = (C.GPVERTEXATTRIBP3UIV)(getProcAddr("glVertexAttribP3uiv")); gpVertexAttribP3uiv == nil {
    ARB_vertex_type_2_10_10_10_rev = false
    return errors.New("glVertexAttribP3uiv")
  }
  if gpVertexAttribP4ui = (C.GPVERTEXATTRIBP4UI)(getProcAddr("glVertexAttribP4ui")); gpVertexAttribP4ui == nil {
    ARB_vertex_type_2_10_10_10_rev = false
    return errors.New("glVertexAttribP4ui")
  }
  if gpVertexAttribP4uiv = (C.GPVERTEXATTRIBP4UIV)(getProcAddr("glVertexAttribP4uiv")); gpVertexAttribP4uiv == nil {
    ARB_vertex_type_2_10_10_10_rev = false
    return errors.New("glVertexAttribP4uiv")
  }
  if gpVertexAttribParameteriAMD = (C.GPVERTEXATTRIBPARAMETERIAMD)(getProcAddr("glVertexAttribParameteriAMD")); gpVertexAttribParameteriAMD == nil {
    AMD_interleaved_elements = false
  }
  if gpVertexAttribPointer = (C.GPVERTEXATTRIBPOINTER)(getProcAddr("glVertexAttribPointer")); gpVertexAttribPointer == nil {
    return errors.New("glVertexAttribPointer")
  }
  if gpVertexAttribPointerARB = (C.GPVERTEXATTRIBPOINTERARB)(getProcAddr("glVertexAttribPointerARB")); gpVertexAttribPointerARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if gpVertexAttribPointerNV = (C.GPVERTEXATTRIBPOINTERNV)(getProcAddr("glVertexAttribPointerNV")); gpVertexAttribPointerNV == nil {
    NV_vertex_program = false
  }
  if gpVertexAttribs1dvNV = (C.GPVERTEXATTRIBS1DVNV)(getProcAddr("glVertexAttribs1dvNV")); gpVertexAttribs1dvNV == nil {
    NV_vertex_program = false
  }
  if gpVertexAttribs1fvNV = (C.GPVERTEXATTRIBS1FVNV)(getProcAddr("glVertexAttribs1fvNV")); gpVertexAttribs1fvNV == nil {
    NV_vertex_program = false
  }
  if gpVertexAttribs1hvNV = (C.GPVERTEXATTRIBS1HVNV)(getProcAddr("glVertexAttribs1hvNV")); gpVertexAttribs1hvNV == nil {
    NV_half_float = false
  }
  if gpVertexAttribs1svNV = (C.GPVERTEXATTRIBS1SVNV)(getProcAddr("glVertexAttribs1svNV")); gpVertexAttribs1svNV == nil {
    NV_vertex_program = false
  }
  if gpVertexAttribs2dvNV = (C.GPVERTEXATTRIBS2DVNV)(getProcAddr("glVertexAttribs2dvNV")); gpVertexAttribs2dvNV == nil {
    NV_vertex_program = false
  }
  if gpVertexAttribs2fvNV = (C.GPVERTEXATTRIBS2FVNV)(getProcAddr("glVertexAttribs2fvNV")); gpVertexAttribs2fvNV == nil {
    NV_vertex_program = false
  }
  if gpVertexAttribs2hvNV = (C.GPVERTEXATTRIBS2HVNV)(getProcAddr("glVertexAttribs2hvNV")); gpVertexAttribs2hvNV == nil {
    NV_half_float = false
  }
  if gpVertexAttribs2svNV = (C.GPVERTEXATTRIBS2SVNV)(getProcAddr("glVertexAttribs2svNV")); gpVertexAttribs2svNV == nil {
    NV_vertex_program = false
  }
  if gpVertexAttribs3dvNV = (C.GPVERTEXATTRIBS3DVNV)(getProcAddr("glVertexAttribs3dvNV")); gpVertexAttribs3dvNV == nil {
    NV_vertex_program = false
  }
  if gpVertexAttribs3fvNV = (C.GPVERTEXATTRIBS3FVNV)(getProcAddr("glVertexAttribs3fvNV")); gpVertexAttribs3fvNV == nil {
    NV_vertex_program = false
  }
  if gpVertexAttribs3hvNV = (C.GPVERTEXATTRIBS3HVNV)(getProcAddr("glVertexAttribs3hvNV")); gpVertexAttribs3hvNV == nil {
    NV_half_float = false
  }
  if gpVertexAttribs3svNV = (C.GPVERTEXATTRIBS3SVNV)(getProcAddr("glVertexAttribs3svNV")); gpVertexAttribs3svNV == nil {
    NV_vertex_program = false
  }
  if gpVertexAttribs4dvNV = (C.GPVERTEXATTRIBS4DVNV)(getProcAddr("glVertexAttribs4dvNV")); gpVertexAttribs4dvNV == nil {
    NV_vertex_program = false
  }
  if gpVertexAttribs4fvNV = (C.GPVERTEXATTRIBS4FVNV)(getProcAddr("glVertexAttribs4fvNV")); gpVertexAttribs4fvNV == nil {
    NV_vertex_program = false
  }
  if gpVertexAttribs4hvNV = (C.GPVERTEXATTRIBS4HVNV)(getProcAddr("glVertexAttribs4hvNV")); gpVertexAttribs4hvNV == nil {
    NV_half_float = false
  }
  if gpVertexAttribs4svNV = (C.GPVERTEXATTRIBS4SVNV)(getProcAddr("glVertexAttribs4svNV")); gpVertexAttribs4svNV == nil {
    NV_vertex_program = false
  }
  if gpVertexAttribs4ubvNV = (C.GPVERTEXATTRIBS4UBVNV)(getProcAddr("glVertexAttribs4ubvNV")); gpVertexAttribs4ubvNV == nil {
    NV_vertex_program = false
  }
  if gpVertexBindingDivisor = (C.GPVERTEXBINDINGDIVISOR)(getProcAddr("glVertexBindingDivisor")); gpVertexBindingDivisor == nil {
    ARB_vertex_attrib_binding = false
  }
  if gpVertexBlendARB = (C.GPVERTEXBLENDARB)(getProcAddr("glVertexBlendARB")); gpVertexBlendARB == nil {
    ARB_vertex_blend = false
  }
  if gpVertexBlendEnvfATI = (C.GPVERTEXBLENDENVFATI)(getProcAddr("glVertexBlendEnvfATI")); gpVertexBlendEnvfATI == nil {
    ATI_vertex_streams = false
  }
  if gpVertexBlendEnviATI = (C.GPVERTEXBLENDENVIATI)(getProcAddr("glVertexBlendEnviATI")); gpVertexBlendEnviATI == nil {
    ATI_vertex_streams = false
  }
  if gpVertexFormatNV = (C.GPVERTEXFORMATNV)(getProcAddr("glVertexFormatNV")); gpVertexFormatNV == nil {
    NV_vertex_buffer_unified_memory = false
  }
  if gpVertexPointerEXT = (C.GPVERTEXPOINTEREXT)(getProcAddr("glVertexPointerEXT")); gpVertexPointerEXT == nil {
    EXT_vertex_array = false
  }
  if gpVertexPointerListIBM = (C.GPVERTEXPOINTERLISTIBM)(getProcAddr("glVertexPointerListIBM")); gpVertexPointerListIBM == nil {
    IBM_vertex_array_lists = false
  }
  if gpVertexPointervINTEL = (C.GPVERTEXPOINTERVINTEL)(getProcAddr("glVertexPointervINTEL")); gpVertexPointervINTEL == nil {
    INTEL_parallel_arrays = false
  }
  if gpVertexStream1dATI = (C.GPVERTEXSTREAM1DATI)(getProcAddr("glVertexStream1dATI")); gpVertexStream1dATI == nil {
    ATI_vertex_streams = false
  }
  if gpVertexStream1dvATI = (C.GPVERTEXSTREAM1DVATI)(getProcAddr("glVertexStream1dvATI")); gpVertexStream1dvATI == nil {
    ATI_vertex_streams = false
  }
  if gpVertexStream1fATI = (C.GPVERTEXSTREAM1FATI)(getProcAddr("glVertexStream1fATI")); gpVertexStream1fATI == nil {
    ATI_vertex_streams = false
  }
  if gpVertexStream1fvATI = (C.GPVERTEXSTREAM1FVATI)(getProcAddr("glVertexStream1fvATI")); gpVertexStream1fvATI == nil {
    ATI_vertex_streams = false
  }
  if gpVertexStream1iATI = (C.GPVERTEXSTREAM1IATI)(getProcAddr("glVertexStream1iATI")); gpVertexStream1iATI == nil {
    ATI_vertex_streams = false
  }
  if gpVertexStream1ivATI = (C.GPVERTEXSTREAM1IVATI)(getProcAddr("glVertexStream1ivATI")); gpVertexStream1ivATI == nil {
    ATI_vertex_streams = false
  }
  if gpVertexStream1sATI = (C.GPVERTEXSTREAM1SATI)(getProcAddr("glVertexStream1sATI")); gpVertexStream1sATI == nil {
    ATI_vertex_streams = false
  }
  if gpVertexStream1svATI = (C.GPVERTEXSTREAM1SVATI)(getProcAddr("glVertexStream1svATI")); gpVertexStream1svATI == nil {
    ATI_vertex_streams = false
  }
  if gpVertexStream2dATI = (C.GPVERTEXSTREAM2DATI)(getProcAddr("glVertexStream2dATI")); gpVertexStream2dATI == nil {
    ATI_vertex_streams = false
  }
  if gpVertexStream2dvATI = (C.GPVERTEXSTREAM2DVATI)(getProcAddr("glVertexStream2dvATI")); gpVertexStream2dvATI == nil {
    ATI_vertex_streams = false
  }
  if gpVertexStream2fATI = (C.GPVERTEXSTREAM2FATI)(getProcAddr("glVertexStream2fATI")); gpVertexStream2fATI == nil {
    ATI_vertex_streams = false
  }
  if gpVertexStream2fvATI = (C.GPVERTEXSTREAM2FVATI)(getProcAddr("glVertexStream2fvATI")); gpVertexStream2fvATI == nil {
    ATI_vertex_streams = false
  }
  if gpVertexStream2iATI = (C.GPVERTEXSTREAM2IATI)(getProcAddr("glVertexStream2iATI")); gpVertexStream2iATI == nil {
    ATI_vertex_streams = false
  }
  if gpVertexStream2ivATI = (C.GPVERTEXSTREAM2IVATI)(getProcAddr("glVertexStream2ivATI")); gpVertexStream2ivATI == nil {
    ATI_vertex_streams = false
  }
  if gpVertexStream2sATI = (C.GPVERTEXSTREAM2SATI)(getProcAddr("glVertexStream2sATI")); gpVertexStream2sATI == nil {
    ATI_vertex_streams = false
  }
  if gpVertexStream2svATI = (C.GPVERTEXSTREAM2SVATI)(getProcAddr("glVertexStream2svATI")); gpVertexStream2svATI == nil {
    ATI_vertex_streams = false
  }
  if gpVertexStream3dATI = (C.GPVERTEXSTREAM3DATI)(getProcAddr("glVertexStream3dATI")); gpVertexStream3dATI == nil {
    ATI_vertex_streams = false
  }
  if gpVertexStream3dvATI = (C.GPVERTEXSTREAM3DVATI)(getProcAddr("glVertexStream3dvATI")); gpVertexStream3dvATI == nil {
    ATI_vertex_streams = false
  }
  if gpVertexStream3fATI = (C.GPVERTEXSTREAM3FATI)(getProcAddr("glVertexStream3fATI")); gpVertexStream3fATI == nil {
    ATI_vertex_streams = false
  }
  if gpVertexStream3fvATI = (C.GPVERTEXSTREAM3FVATI)(getProcAddr("glVertexStream3fvATI")); gpVertexStream3fvATI == nil {
    ATI_vertex_streams = false
  }
  if gpVertexStream3iATI = (C.GPVERTEXSTREAM3IATI)(getProcAddr("glVertexStream3iATI")); gpVertexStream3iATI == nil {
    ATI_vertex_streams = false
  }
  if gpVertexStream3ivATI = (C.GPVERTEXSTREAM3IVATI)(getProcAddr("glVertexStream3ivATI")); gpVertexStream3ivATI == nil {
    ATI_vertex_streams = false
  }
  if gpVertexStream3sATI = (C.GPVERTEXSTREAM3SATI)(getProcAddr("glVertexStream3sATI")); gpVertexStream3sATI == nil {
    ATI_vertex_streams = false
  }
  if gpVertexStream3svATI = (C.GPVERTEXSTREAM3SVATI)(getProcAddr("glVertexStream3svATI")); gpVertexStream3svATI == nil {
    ATI_vertex_streams = false
  }
  if gpVertexStream4dATI = (C.GPVERTEXSTREAM4DATI)(getProcAddr("glVertexStream4dATI")); gpVertexStream4dATI == nil {
    ATI_vertex_streams = false
  }
  if gpVertexStream4dvATI = (C.GPVERTEXSTREAM4DVATI)(getProcAddr("glVertexStream4dvATI")); gpVertexStream4dvATI == nil {
    ATI_vertex_streams = false
  }
  if gpVertexStream4fATI = (C.GPVERTEXSTREAM4FATI)(getProcAddr("glVertexStream4fATI")); gpVertexStream4fATI == nil {
    ATI_vertex_streams = false
  }
  if gpVertexStream4fvATI = (C.GPVERTEXSTREAM4FVATI)(getProcAddr("glVertexStream4fvATI")); gpVertexStream4fvATI == nil {
    ATI_vertex_streams = false
  }
  if gpVertexStream4iATI = (C.GPVERTEXSTREAM4IATI)(getProcAddr("glVertexStream4iATI")); gpVertexStream4iATI == nil {
    ATI_vertex_streams = false
  }
  if gpVertexStream4ivATI = (C.GPVERTEXSTREAM4IVATI)(getProcAddr("glVertexStream4ivATI")); gpVertexStream4ivATI == nil {
    ATI_vertex_streams = false
  }
  if gpVertexStream4sATI = (C.GPVERTEXSTREAM4SATI)(getProcAddr("glVertexStream4sATI")); gpVertexStream4sATI == nil {
    ATI_vertex_streams = false
  }
  if gpVertexStream4svATI = (C.GPVERTEXSTREAM4SVATI)(getProcAddr("glVertexStream4svATI")); gpVertexStream4svATI == nil {
    ATI_vertex_streams = false
  }
  if gpVertexWeightPointerEXT = (C.GPVERTEXWEIGHTPOINTEREXT)(getProcAddr("glVertexWeightPointerEXT")); gpVertexWeightPointerEXT == nil {
    EXT_vertex_weighting = false
  }
  if gpVertexWeightfEXT = (C.GPVERTEXWEIGHTFEXT)(getProcAddr("glVertexWeightfEXT")); gpVertexWeightfEXT == nil {
    EXT_vertex_weighting = false
  }
  if gpVertexWeightfvEXT = (C.GPVERTEXWEIGHTFVEXT)(getProcAddr("glVertexWeightfvEXT")); gpVertexWeightfvEXT == nil {
    EXT_vertex_weighting = false
  }
  if gpVertexWeighthNV = (C.GPVERTEXWEIGHTHNV)(getProcAddr("glVertexWeighthNV")); gpVertexWeighthNV == nil {
    NV_half_float = false
  }
  if gpVertexWeighthvNV = (C.GPVERTEXWEIGHTHVNV)(getProcAddr("glVertexWeighthvNV")); gpVertexWeighthvNV == nil {
    NV_half_float = false
  }
  if gpVideoCaptureNV = (C.GPVIDEOCAPTURENV)(getProcAddr("glVideoCaptureNV")); gpVideoCaptureNV == nil {
    NV_video_capture = false
  }
  if gpVideoCaptureStreamParameterdvNV = (C.GPVIDEOCAPTURESTREAMPARAMETERDVNV)(getProcAddr("glVideoCaptureStreamParameterdvNV")); gpVideoCaptureStreamParameterdvNV == nil {
    NV_video_capture = false
  }
  if gpVideoCaptureStreamParameterfvNV = (C.GPVIDEOCAPTURESTREAMPARAMETERFVNV)(getProcAddr("glVideoCaptureStreamParameterfvNV")); gpVideoCaptureStreamParameterfvNV == nil {
    NV_video_capture = false
  }
  if gpVideoCaptureStreamParameterivNV = (C.GPVIDEOCAPTURESTREAMPARAMETERIVNV)(getProcAddr("glVideoCaptureStreamParameterivNV")); gpVideoCaptureStreamParameterivNV == nil {
    NV_video_capture = false
  }
  if gpViewport = (C.GPVIEWPORT)(getProcAddr("glViewport")); gpViewport == nil {
    return errors.New("glViewport")
  }
  if gpViewportArrayv = (C.GPVIEWPORTARRAYV)(getProcAddr("glViewportArrayv")); gpViewportArrayv == nil {
    ARB_viewport_array = false
  }
  if gpViewportIndexedf = (C.GPVIEWPORTINDEXEDF)(getProcAddr("glViewportIndexedf")); gpViewportIndexedf == nil {
    ARB_viewport_array = false
  }
  if gpViewportIndexedfv = (C.GPVIEWPORTINDEXEDFV)(getProcAddr("glViewportIndexedfv")); gpViewportIndexedfv == nil {
    ARB_viewport_array = false
  }
  if gpWaitSync = (C.GPWAITSYNC)(getProcAddr("glWaitSync")); gpWaitSync == nil {
    ARB_sync = false
    return errors.New("glWaitSync")
  }
  if gpWeightPathsNV = (C.GPWEIGHTPATHSNV)(getProcAddr("glWeightPathsNV")); gpWeightPathsNV == nil {
    NV_path_rendering = false
  }
  if gpWeightPointerARB = (C.GPWEIGHTPOINTERARB)(getProcAddr("glWeightPointerARB")); gpWeightPointerARB == nil {
    ARB_vertex_blend = false
  }
  if gpWeightbvARB = (C.GPWEIGHTBVARB)(getProcAddr("glWeightbvARB")); gpWeightbvARB == nil {
    ARB_vertex_blend = false
  }
  if gpWeightdvARB = (C.GPWEIGHTDVARB)(getProcAddr("glWeightdvARB")); gpWeightdvARB == nil {
    ARB_vertex_blend = false
  }
  if gpWeightfvARB = (C.GPWEIGHTFVARB)(getProcAddr("glWeightfvARB")); gpWeightfvARB == nil {
    ARB_vertex_blend = false
  }
  if gpWeightivARB = (C.GPWEIGHTIVARB)(getProcAddr("glWeightivARB")); gpWeightivARB == nil {
    ARB_vertex_blend = false
  }
  if gpWeightsvARB = (C.GPWEIGHTSVARB)(getProcAddr("glWeightsvARB")); gpWeightsvARB == nil {
    ARB_vertex_blend = false
  }
  if gpWeightubvARB = (C.GPWEIGHTUBVARB)(getProcAddr("glWeightubvARB")); gpWeightubvARB == nil {
    ARB_vertex_blend = false
  }
  if gpWeightuivARB = (C.GPWEIGHTUIVARB)(getProcAddr("glWeightuivARB")); gpWeightuivARB == nil {
    ARB_vertex_blend = false
  }
  if gpWeightusvARB = (C.GPWEIGHTUSVARB)(getProcAddr("glWeightusvARB")); gpWeightusvARB == nil {
    ARB_vertex_blend = false
  }
  if gpWindowPos2dARB = (C.GPWINDOWPOS2DARB)(getProcAddr("glWindowPos2dARB")); gpWindowPos2dARB == nil {
    ARB_window_pos = false
  }
  if gpWindowPos2dMESA = (C.GPWINDOWPOS2DMESA)(getProcAddr("glWindowPos2dMESA")); gpWindowPos2dMESA == nil {
    MESA_window_pos = false
  }
  if gpWindowPos2dvARB = (C.GPWINDOWPOS2DVARB)(getProcAddr("glWindowPos2dvARB")); gpWindowPos2dvARB == nil {
    ARB_window_pos = false
  }
  if gpWindowPos2dvMESA = (C.GPWINDOWPOS2DVMESA)(getProcAddr("glWindowPos2dvMESA")); gpWindowPos2dvMESA == nil {
    MESA_window_pos = false
  }
  if gpWindowPos2fARB = (C.GPWINDOWPOS2FARB)(getProcAddr("glWindowPos2fARB")); gpWindowPos2fARB == nil {
    ARB_window_pos = false
  }
  if gpWindowPos2fMESA = (C.GPWINDOWPOS2FMESA)(getProcAddr("glWindowPos2fMESA")); gpWindowPos2fMESA == nil {
    MESA_window_pos = false
  }
  if gpWindowPos2fvARB = (C.GPWINDOWPOS2FVARB)(getProcAddr("glWindowPos2fvARB")); gpWindowPos2fvARB == nil {
    ARB_window_pos = false
  }
  if gpWindowPos2fvMESA = (C.GPWINDOWPOS2FVMESA)(getProcAddr("glWindowPos2fvMESA")); gpWindowPos2fvMESA == nil {
    MESA_window_pos = false
  }
  if gpWindowPos2iARB = (C.GPWINDOWPOS2IARB)(getProcAddr("glWindowPos2iARB")); gpWindowPos2iARB == nil {
    ARB_window_pos = false
  }
  if gpWindowPos2iMESA = (C.GPWINDOWPOS2IMESA)(getProcAddr("glWindowPos2iMESA")); gpWindowPos2iMESA == nil {
    MESA_window_pos = false
  }
  if gpWindowPos2ivARB = (C.GPWINDOWPOS2IVARB)(getProcAddr("glWindowPos2ivARB")); gpWindowPos2ivARB == nil {
    ARB_window_pos = false
  }
  if gpWindowPos2ivMESA = (C.GPWINDOWPOS2IVMESA)(getProcAddr("glWindowPos2ivMESA")); gpWindowPos2ivMESA == nil {
    MESA_window_pos = false
  }
  if gpWindowPos2sARB = (C.GPWINDOWPOS2SARB)(getProcAddr("glWindowPos2sARB")); gpWindowPos2sARB == nil {
    ARB_window_pos = false
  }
  if gpWindowPos2sMESA = (C.GPWINDOWPOS2SMESA)(getProcAddr("glWindowPos2sMESA")); gpWindowPos2sMESA == nil {
    MESA_window_pos = false
  }
  if gpWindowPos2svARB = (C.GPWINDOWPOS2SVARB)(getProcAddr("glWindowPos2svARB")); gpWindowPos2svARB == nil {
    ARB_window_pos = false
  }
  if gpWindowPos2svMESA = (C.GPWINDOWPOS2SVMESA)(getProcAddr("glWindowPos2svMESA")); gpWindowPos2svMESA == nil {
    MESA_window_pos = false
  }
  if gpWindowPos3dARB = (C.GPWINDOWPOS3DARB)(getProcAddr("glWindowPos3dARB")); gpWindowPos3dARB == nil {
    ARB_window_pos = false
  }
  if gpWindowPos3dMESA = (C.GPWINDOWPOS3DMESA)(getProcAddr("glWindowPos3dMESA")); gpWindowPos3dMESA == nil {
    MESA_window_pos = false
  }
  if gpWindowPos3dvARB = (C.GPWINDOWPOS3DVARB)(getProcAddr("glWindowPos3dvARB")); gpWindowPos3dvARB == nil {
    ARB_window_pos = false
  }
  if gpWindowPos3dvMESA = (C.GPWINDOWPOS3DVMESA)(getProcAddr("glWindowPos3dvMESA")); gpWindowPos3dvMESA == nil {
    MESA_window_pos = false
  }
  if gpWindowPos3fARB = (C.GPWINDOWPOS3FARB)(getProcAddr("glWindowPos3fARB")); gpWindowPos3fARB == nil {
    ARB_window_pos = false
  }
  if gpWindowPos3fMESA = (C.GPWINDOWPOS3FMESA)(getProcAddr("glWindowPos3fMESA")); gpWindowPos3fMESA == nil {
    MESA_window_pos = false
  }
  if gpWindowPos3fvARB = (C.GPWINDOWPOS3FVARB)(getProcAddr("glWindowPos3fvARB")); gpWindowPos3fvARB == nil {
    ARB_window_pos = false
  }
  if gpWindowPos3fvMESA = (C.GPWINDOWPOS3FVMESA)(getProcAddr("glWindowPos3fvMESA")); gpWindowPos3fvMESA == nil {
    MESA_window_pos = false
  }
  if gpWindowPos3iARB = (C.GPWINDOWPOS3IARB)(getProcAddr("glWindowPos3iARB")); gpWindowPos3iARB == nil {
    ARB_window_pos = false
  }
  if gpWindowPos3iMESA = (C.GPWINDOWPOS3IMESA)(getProcAddr("glWindowPos3iMESA")); gpWindowPos3iMESA == nil {
    MESA_window_pos = false
  }
  if gpWindowPos3ivARB = (C.GPWINDOWPOS3IVARB)(getProcAddr("glWindowPos3ivARB")); gpWindowPos3ivARB == nil {
    ARB_window_pos = false
  }
  if gpWindowPos3ivMESA = (C.GPWINDOWPOS3IVMESA)(getProcAddr("glWindowPos3ivMESA")); gpWindowPos3ivMESA == nil {
    MESA_window_pos = false
  }
  if gpWindowPos3sARB = (C.GPWINDOWPOS3SARB)(getProcAddr("glWindowPos3sARB")); gpWindowPos3sARB == nil {
    ARB_window_pos = false
  }
  if gpWindowPos3sMESA = (C.GPWINDOWPOS3SMESA)(getProcAddr("glWindowPos3sMESA")); gpWindowPos3sMESA == nil {
    MESA_window_pos = false
  }
  if gpWindowPos3svARB = (C.GPWINDOWPOS3SVARB)(getProcAddr("glWindowPos3svARB")); gpWindowPos3svARB == nil {
    ARB_window_pos = false
  }
  if gpWindowPos3svMESA = (C.GPWINDOWPOS3SVMESA)(getProcAddr("glWindowPos3svMESA")); gpWindowPos3svMESA == nil {
    MESA_window_pos = false
  }
  if gpWindowPos4dMESA = (C.GPWINDOWPOS4DMESA)(getProcAddr("glWindowPos4dMESA")); gpWindowPos4dMESA == nil {
    MESA_window_pos = false
  }
  if gpWindowPos4dvMESA = (C.GPWINDOWPOS4DVMESA)(getProcAddr("glWindowPos4dvMESA")); gpWindowPos4dvMESA == nil {
    MESA_window_pos = false
  }
  if gpWindowPos4fMESA = (C.GPWINDOWPOS4FMESA)(getProcAddr("glWindowPos4fMESA")); gpWindowPos4fMESA == nil {
    MESA_window_pos = false
  }
  if gpWindowPos4fvMESA = (C.GPWINDOWPOS4FVMESA)(getProcAddr("glWindowPos4fvMESA")); gpWindowPos4fvMESA == nil {
    MESA_window_pos = false
  }
  if gpWindowPos4iMESA = (C.GPWINDOWPOS4IMESA)(getProcAddr("glWindowPos4iMESA")); gpWindowPos4iMESA == nil {
    MESA_window_pos = false
  }
  if gpWindowPos4ivMESA = (C.GPWINDOWPOS4IVMESA)(getProcAddr("glWindowPos4ivMESA")); gpWindowPos4ivMESA == nil {
    MESA_window_pos = false
  }
  if gpWindowPos4sMESA = (C.GPWINDOWPOS4SMESA)(getProcAddr("glWindowPos4sMESA")); gpWindowPos4sMESA == nil {
    MESA_window_pos = false
  }
  if gpWindowPos4svMESA = (C.GPWINDOWPOS4SVMESA)(getProcAddr("glWindowPos4svMESA")); gpWindowPos4svMESA == nil {
    MESA_window_pos = false
  }
  if gpWriteMaskEXT = (C.GPWRITEMASKEXT)(getProcAddr("glWriteMaskEXT")); gpWriteMaskEXT == nil {
    EXT_vertex_shader = false
  }
	return nil
}
