// Glow automatically generated OpenGL binding: http://github.com/errcw/glow
// Copyright (c) 2010 Khronos Group.
// This material may be distributed subject to the terms and conditions
// set forth in the Open Publication License, v 1.0, 8 June 1999.
// http://opencontent.org/openpub/.
// Copyright (c) 1991-2006 Silicon Graphics, Inc.
// This document is licensed under the SGI Free Software B License.
// For details, see http://oss.sgi.com/projects/FreeB.
package gl
// #cgo darwin  LDFLAGS: -framework OpenGL
// #cgo linux   LDFLAGS: -lGL
// #cgo windows LDFLAGS: -lopengl32
// #if defined(_WIN32) && !defined(APIENTRY) && !defined(__CYGWIN__) && !defined(__SCITECH_SNAP__)
// #ifndef WIN32_LEAN_AND_MEAN
// #define WIN32_LEAN_AND_MEAN 1
// #endif
// #include <windows.h>
// #endif
// #ifndef APIENTRY
// #define APIENTRY
// #endif
// #ifndef APIENTRYP
// #define APIENTRYP APIENTRY *
// #endif
// #ifndef GLAPI
// #define GLAPI extern
// #endif
// #include <stddef.h>
// #ifndef GLEXT_64_TYPES_DEFINED
// /* This code block is duplicated in glxext.h, so must be protected */
// #define GLEXT_64_TYPES_DEFINED
// /* Define int32_t, int64_t, and uint64_t types for UST/MSC */
// /* (as used in the GL_EXT_timer_query extension). */
// #if defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
// #include <inttypes.h>
// #elif defined(__sun__) || defined(__digital__)
// #include <inttypes.h>
// #if defined(__STDC__)
// #if defined(__arch64__) || defined(_LP64)
// typedef long int int64_t;
// typedef unsigned long int uint64_t;
// #else
// typedef long long int int64_t;
// typedef unsigned long long int uint64_t;
// #endif /* __arch64__ */
// #endif /* __STDC__ */
// #elif defined( __VMS ) || defined(__sgi)
// #include <inttypes.h>
// #elif defined(__SCO__) || defined(__USLC__)
// #include <stdint.h>
// #elif defined(__UNIXOS2__) || defined(__SOL64__)
// typedef long int int32_t;
// typedef long long int int64_t;
// typedef unsigned long long int uint64_t;
// #elif defined(_WIN32) && defined(__GNUC__)
// #include <stdint.h>
// #elif defined(_WIN32)
// typedef __int32 int32_t;
// typedef __int64 int64_t;
// typedef unsigned __int64 uint64_t;
// #else
// /* Fallback if nothing above works */
// #include <inttypes.h>
// #endif
// #endif
// typedef unsigned int GLenum;
// typedef unsigned char GLboolean;
// typedef unsigned int GLbitfield;
// typedef void GLvoid;
// typedef signed char GLbyte;
// typedef short GLshort;
// typedef int GLint;
// typedef int GLclampx;
// typedef unsigned char GLubyte;
// typedef unsigned short GLushort;
// typedef unsigned int GLuint;
// typedef int GLsizei;
// typedef float GLfloat;
// typedef float GLclampf;
// typedef double GLdouble;
// typedef double GLclampd;
// typedef char GLchar;
// typedef char GLcharARB;
// #ifdef __APPLE__
// typedef void *GLhandleARB;
// #else
// typedef unsigned int GLhandleARB;
// #endif
// typedef GLint GLfixed;
// typedef ptrdiff_t GLintptr;
// typedef ptrdiff_t GLsizeiptr;
// typedef int64_t GLint64;
// typedef uint64_t GLuint64;
// typedef ptrdiff_t GLintptrARB;
// typedef ptrdiff_t GLsizeiptrARB;
// typedef int64_t GLint64EXT;
// typedef uint64_t GLuint64EXT;
// typedef struct __GLsync *GLsync;
// struct _cl_context;
// struct _cl_event;
// typedef void (APIENTRY *GLDEBUGPROC)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
// typedef void (APIENTRY *GLDEBUGPROCARB)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
// typedef void (APIENTRY *GLDEBUGPROCKHR)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
// typedef void (APIENTRY *GLDEBUGPROCAMD)(GLuint id,GLenum category,GLenum severity,GLsizei length,const GLchar *message,void *userParam);
// typedef unsigned short GLhalfNV;
// typedef GLintptr GLvdpauSurfaceNV;
// extern void glowDebugCallback(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar* message, const void* userParam);
// void APIENTRY glowCDebugCallback(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar* message, const void* userParam) {
//   glowDebugCallback(source, type, id, severity, length, message, userParam);
// }
// typedef void  (APIENTRYP PACCUMXOES)(GLenum  op, GLfixed  value);
// typedef void  (APIENTRYP PACTIVEPROGRAMEXT)(GLuint  program);
// typedef void  (APIENTRYP PACTIVESHADERPROGRAM)(GLuint  pipeline, GLuint  program);
// typedef void  (APIENTRYP PACTIVESHADERPROGRAMEXT)(GLuint  pipeline, GLuint  program);
// typedef void  (APIENTRYP PACTIVESTENCILFACEEXT)(GLenum  face);
// typedef void  (APIENTRYP PACTIVETEXTURE)(GLenum  texture);
// typedef void  (APIENTRYP PACTIVETEXTUREARB)(GLenum  texture);
// typedef void  (APIENTRYP PACTIVEVARYINGNV)(GLuint  program, const GLchar * name);
// typedef void  (APIENTRYP PALPHAFRAGMENTOP1ATI)(GLenum  op, GLuint  dst, GLuint  dstMod, GLuint  arg1, GLuint  arg1Rep, GLuint  arg1Mod);
// typedef void  (APIENTRYP PALPHAFRAGMENTOP2ATI)(GLenum  op, GLuint  dst, GLuint  dstMod, GLuint  arg1, GLuint  arg1Rep, GLuint  arg1Mod, GLuint  arg2, GLuint  arg2Rep, GLuint  arg2Mod);
// typedef void  (APIENTRYP PALPHAFRAGMENTOP3ATI)(GLenum  op, GLuint  dst, GLuint  dstMod, GLuint  arg1, GLuint  arg1Rep, GLuint  arg1Mod, GLuint  arg2, GLuint  arg2Rep, GLuint  arg2Mod, GLuint  arg3, GLuint  arg3Rep, GLuint  arg3Mod);
// typedef void  (APIENTRYP PALPHAFUNCXOES)(GLenum  func, GLfixed  ref);
// typedef void  (APIENTRYP PAPPLYTEXTUREEXT)(GLenum  mode);
// typedef GLboolean  (APIENTRYP PAREPROGRAMSRESIDENTNV)(GLsizei  n, const GLuint * programs, GLboolean * residences);
// typedef GLboolean  (APIENTRYP PARETEXTURESRESIDENTEXT)(GLsizei  n, const GLuint * textures, GLboolean * residences);
// typedef void  (APIENTRYP PARRAYELEMENTEXT)(GLint  i);
// typedef void  (APIENTRYP PARRAYOBJECTATI)(GLenum  array, GLint  size, GLenum  type, GLsizei  stride, GLuint  buffer, GLuint  offset);
// typedef void  (APIENTRYP PASYNCMARKERSGIX)(GLuint  marker);
// typedef void  (APIENTRYP PATTACHOBJECTARB)(GLhandleARB  containerObj, GLhandleARB  obj);
// typedef void  (APIENTRYP PATTACHSHADER)(GLuint  program, GLuint  shader);
// typedef void  (APIENTRYP PBEGINCONDITIONALRENDER)(GLuint  id, GLenum  mode);
// typedef void  (APIENTRYP PBEGINCONDITIONALRENDERNV)(GLuint  id, GLenum  mode);
// typedef void  (APIENTRYP PBEGINCONDITIONALRENDERNVX)(GLuint  id);
// typedef void  (APIENTRYP PBEGINFRAGMENTSHADERATI)();
// typedef void  (APIENTRYP PBEGINOCCLUSIONQUERYNV)(GLuint  id);
// typedef void  (APIENTRYP PBEGINPERFMONITORAMD)(GLuint  monitor);
// typedef void  (APIENTRYP PBEGINPERFQUERYINTEL)(GLuint  queryHandle);
// typedef void  (APIENTRYP PBEGINQUERY)(GLenum  target, GLuint  id);
// typedef void  (APIENTRYP PBEGINQUERYARB)(GLenum  target, GLuint  id);
// typedef void  (APIENTRYP PBEGINQUERYINDEXED)(GLenum  target, GLuint  index, GLuint  id);
// typedef void  (APIENTRYP PBEGINTRANSFORMFEEDBACK)(GLenum  primitiveMode);
// typedef void  (APIENTRYP PBEGINTRANSFORMFEEDBACKEXT)(GLenum  primitiveMode);
// typedef void  (APIENTRYP PBEGINTRANSFORMFEEDBACKNV)(GLenum  primitiveMode);
// typedef void  (APIENTRYP PBEGINVERTEXSHADEREXT)();
// typedef void  (APIENTRYP PBEGINVIDEOCAPTURENV)(GLuint  video_capture_slot);
// typedef void  (APIENTRYP PBINDATTRIBLOCATION)(GLuint  program, GLuint  index, const GLchar * name);
// typedef void  (APIENTRYP PBINDATTRIBLOCATIONARB)(GLhandleARB  programObj, GLuint  index, const GLcharARB * name);
// typedef void  (APIENTRYP PBINDBUFFER)(GLenum  target, GLuint  buffer);
// typedef void  (APIENTRYP PBINDBUFFERARB)(GLenum  target, GLuint  buffer);
// typedef void  (APIENTRYP PBINDBUFFERBASE)(GLenum  target, GLuint  index, GLuint  buffer);
// typedef void  (APIENTRYP PBINDBUFFERBASEEXT)(GLenum  target, GLuint  index, GLuint  buffer);
// typedef void  (APIENTRYP PBINDBUFFERBASENV)(GLenum  target, GLuint  index, GLuint  buffer);
// typedef void  (APIENTRYP PBINDBUFFEROFFSETEXT)(GLenum  target, GLuint  index, GLuint  buffer, GLintptr  offset);
// typedef void  (APIENTRYP PBINDBUFFEROFFSETNV)(GLenum  target, GLuint  index, GLuint  buffer, GLintptr  offset);
// typedef void  (APIENTRYP PBINDBUFFERRANGE)(GLenum  target, GLuint  index, GLuint  buffer, GLintptr  offset, GLsizeiptr  size);
// typedef void  (APIENTRYP PBINDBUFFERRANGEEXT)(GLenum  target, GLuint  index, GLuint  buffer, GLintptr  offset, GLsizeiptr  size);
// typedef void  (APIENTRYP PBINDBUFFERRANGENV)(GLenum  target, GLuint  index, GLuint  buffer, GLintptr  offset, GLsizeiptr  size);
// typedef void  (APIENTRYP PBINDBUFFERSBASE)(GLenum  target, GLuint  first, GLsizei  count, const GLuint * buffers);
// typedef void  (APIENTRYP PBINDBUFFERSRANGE)(GLenum  target, GLuint  first, GLsizei  count, const GLuint * buffers, const GLintptr * offsets, const GLsizeiptr * sizes);
// typedef void  (APIENTRYP PBINDFRAGDATALOCATION)(GLuint  program, GLuint  color, const GLchar * name);
// typedef void  (APIENTRYP PBINDFRAGDATALOCATIONEXT)(GLuint  program, GLuint  color, const GLchar * name);
// typedef void  (APIENTRYP PBINDFRAGDATALOCATIONINDEXED)(GLuint  program, GLuint  colorNumber, GLuint  index, const GLchar * name);
// typedef void  (APIENTRYP PBINDFRAGMENTSHADERATI)(GLuint  id);
// typedef void  (APIENTRYP PBINDFRAMEBUFFER)(GLenum  target, GLuint  framebuffer);
// typedef void  (APIENTRYP PBINDFRAMEBUFFEREXT)(GLenum  target, GLuint  framebuffer);
// typedef void  (APIENTRYP PBINDIMAGETEXTURE)(GLuint  unit, GLuint  texture, GLint  level, GLboolean  layered, GLint  layer, GLenum  access, GLenum  format);
// typedef void  (APIENTRYP PBINDIMAGETEXTUREEXT)(GLuint  index, GLuint  texture, GLint  level, GLboolean  layered, GLint  layer, GLenum  access, GLint  format);
// typedef void  (APIENTRYP PBINDIMAGETEXTURES)(GLuint  first, GLsizei  count, const GLuint * textures);
// typedef GLuint  (APIENTRYP PBINDLIGHTPARAMETEREXT)(GLenum  light, GLenum  value);
// typedef GLuint  (APIENTRYP PBINDMATERIALPARAMETEREXT)(GLenum  face, GLenum  value);
// typedef void  (APIENTRYP PBINDMULTITEXTUREEXT)(GLenum  texunit, GLenum  target, GLuint  texture);
// typedef GLuint  (APIENTRYP PBINDPARAMETEREXT)(GLenum  value);
// typedef void  (APIENTRYP PBINDPROGRAMARB)(GLenum  target, GLuint  program);
// typedef void  (APIENTRYP PBINDPROGRAMNV)(GLenum  target, GLuint  id);
// typedef void  (APIENTRYP PBINDPROGRAMPIPELINE)(GLuint  pipeline);
// typedef void  (APIENTRYP PBINDPROGRAMPIPELINEEXT)(GLuint  pipeline);
// typedef void  (APIENTRYP PBINDRENDERBUFFER)(GLenum  target, GLuint  renderbuffer);
// typedef void  (APIENTRYP PBINDRENDERBUFFEREXT)(GLenum  target, GLuint  renderbuffer);
// typedef void  (APIENTRYP PBINDSAMPLER)(GLuint  unit, GLuint  sampler);
// typedef void  (APIENTRYP PBINDSAMPLERS)(GLuint  first, GLsizei  count, const GLuint * samplers);
// typedef GLuint  (APIENTRYP PBINDTEXGENPARAMETEREXT)(GLenum  unit, GLenum  coord, GLenum  value);
// typedef void  (APIENTRYP PBINDTEXTURE)(GLenum  target, GLuint  texture);
// typedef void  (APIENTRYP PBINDTEXTUREEXT)(GLenum  target, GLuint  texture);
// typedef GLuint  (APIENTRYP PBINDTEXTUREUNITPARAMETEREXT)(GLenum  unit, GLenum  value);
// typedef void  (APIENTRYP PBINDTEXTURES)(GLuint  first, GLsizei  count, const GLuint * textures);
// typedef void  (APIENTRYP PBINDTRANSFORMFEEDBACK)(GLenum  target, GLuint  id);
// typedef void  (APIENTRYP PBINDTRANSFORMFEEDBACKNV)(GLenum  target, GLuint  id);
// typedef void  (APIENTRYP PBINDVERTEXARRAY)(GLuint  array);
// typedef void  (APIENTRYP PBINDVERTEXARRAYAPPLE)(GLuint  array);
// typedef void  (APIENTRYP PBINDVERTEXBUFFER)(GLuint  bindingindex, GLuint  buffer, GLintptr  offset, GLsizei  stride);
// typedef void  (APIENTRYP PBINDVERTEXBUFFERS)(GLuint  first, GLsizei  count, const GLuint * buffers, const GLintptr * offsets, const GLsizei * strides);
// typedef void  (APIENTRYP PBINDVERTEXSHADEREXT)(GLuint  id);
// typedef void  (APIENTRYP PBINDVIDEOCAPTURESTREAMBUFFERNV)(GLuint  video_capture_slot, GLuint  stream, GLenum  frame_region, GLintptrARB  offset);
// typedef void  (APIENTRYP PBINDVIDEOCAPTURESTREAMTEXTURENV)(GLuint  video_capture_slot, GLuint  stream, GLenum  frame_region, GLenum  target, GLuint  texture);
// typedef void  (APIENTRYP PBINORMAL3BEXT)(GLbyte  bx, GLbyte  by, GLbyte  bz);
// typedef void  (APIENTRYP PBINORMAL3BVEXT)(const GLbyte * v);
// typedef void  (APIENTRYP PBINORMAL3DEXT)(GLdouble  bx, GLdouble  by, GLdouble  bz);
// typedef void  (APIENTRYP PBINORMAL3DVEXT)(const GLdouble * v);
// typedef void  (APIENTRYP PBINORMAL3FEXT)(GLfloat  bx, GLfloat  by, GLfloat  bz);
// typedef void  (APIENTRYP PBINORMAL3FVEXT)(const GLfloat * v);
// typedef void  (APIENTRYP PBINORMAL3IEXT)(GLint  bx, GLint  by, GLint  bz);
// typedef void  (APIENTRYP PBINORMAL3IVEXT)(const GLint * v);
// typedef void  (APIENTRYP PBINORMAL3SEXT)(GLshort  bx, GLshort  by, GLshort  bz);
// typedef void  (APIENTRYP PBINORMAL3SVEXT)(const GLshort * v);
// typedef void  (APIENTRYP PBINORMALPOINTEREXT)(GLenum  type, GLsizei  stride, const void * pointer);
// typedef void  (APIENTRYP PBITMAPXOES)(GLsizei  width, GLsizei  height, GLfixed  xorig, GLfixed  yorig, GLfixed  xmove, GLfixed  ymove, const GLubyte * bitmap);
// typedef void  (APIENTRYP PBLENDBARRIERNV)();
// typedef void  (APIENTRYP PBLENDCOLOR)(GLfloat  red, GLfloat  green, GLfloat  blue, GLfloat  alpha);
// typedef void  (APIENTRYP PBLENDCOLOREXT)(GLfloat  red, GLfloat  green, GLfloat  blue, GLfloat  alpha);
// typedef void  (APIENTRYP PBLENDCOLORXOES)(GLfixed  red, GLfixed  green, GLfixed  blue, GLfixed  alpha);
// typedef void  (APIENTRYP PBLENDEQUATION)(GLenum  mode);
// typedef void  (APIENTRYP PBLENDEQUATIONEXT)(GLenum  mode);
// typedef void  (APIENTRYP PBLENDEQUATIONINDEXEDAMD)(GLuint  buf, GLenum  mode);
// typedef void  (APIENTRYP PBLENDEQUATIONSEPARATE)(GLenum  modeRGB, GLenum  modeAlpha);
// typedef void  (APIENTRYP PBLENDEQUATIONSEPARATEEXT)(GLenum  modeRGB, GLenum  modeAlpha);
// typedef void  (APIENTRYP PBLENDEQUATIONSEPARATEINDEXEDAMD)(GLuint  buf, GLenum  modeRGB, GLenum  modeAlpha);
// typedef void  (APIENTRYP PBLENDEQUATIONSEPARATEI)(GLuint  buf, GLenum  modeRGB, GLenum  modeAlpha);
// typedef void  (APIENTRYP PBLENDEQUATIONSEPARATEIARB)(GLuint  buf, GLenum  modeRGB, GLenum  modeAlpha);
// typedef void  (APIENTRYP PBLENDEQUATIONI)(GLuint  buf, GLenum  mode);
// typedef void  (APIENTRYP PBLENDEQUATIONIARB)(GLuint  buf, GLenum  mode);
// typedef void  (APIENTRYP PBLENDFUNC)(GLenum  sfactor, GLenum  dfactor);
// typedef void  (APIENTRYP PBLENDFUNCINDEXEDAMD)(GLuint  buf, GLenum  src, GLenum  dst);
// typedef void  (APIENTRYP PBLENDFUNCSEPARATE)(GLenum  sfactorRGB, GLenum  dfactorRGB, GLenum  sfactorAlpha, GLenum  dfactorAlpha);
// typedef void  (APIENTRYP PBLENDFUNCSEPARATEEXT)(GLenum  sfactorRGB, GLenum  dfactorRGB, GLenum  sfactorAlpha, GLenum  dfactorAlpha);
// typedef void  (APIENTRYP PBLENDFUNCSEPARATEINGR)(GLenum  sfactorRGB, GLenum  dfactorRGB, GLenum  sfactorAlpha, GLenum  dfactorAlpha);
// typedef void  (APIENTRYP PBLENDFUNCSEPARATEINDEXEDAMD)(GLuint  buf, GLenum  srcRGB, GLenum  dstRGB, GLenum  srcAlpha, GLenum  dstAlpha);
// typedef void  (APIENTRYP PBLENDFUNCSEPARATEI)(GLuint  buf, GLenum  srcRGB, GLenum  dstRGB, GLenum  srcAlpha, GLenum  dstAlpha);
// typedef void  (APIENTRYP PBLENDFUNCSEPARATEIARB)(GLuint  buf, GLenum  srcRGB, GLenum  dstRGB, GLenum  srcAlpha, GLenum  dstAlpha);
// typedef void  (APIENTRYP PBLENDFUNCI)(GLuint  buf, GLenum  src, GLenum  dst);
// typedef void  (APIENTRYP PBLENDFUNCIARB)(GLuint  buf, GLenum  src, GLenum  dst);
// typedef void  (APIENTRYP PBLENDPARAMETERINV)(GLenum  pname, GLint  value);
// typedef void  (APIENTRYP PBLITFRAMEBUFFER)(GLint  srcX0, GLint  srcY0, GLint  srcX1, GLint  srcY1, GLint  dstX0, GLint  dstY0, GLint  dstX1, GLint  dstY1, GLbitfield  mask, GLenum  filter);
// typedef void  (APIENTRYP PBLITFRAMEBUFFEREXT)(GLint  srcX0, GLint  srcY0, GLint  srcX1, GLint  srcY1, GLint  dstX0, GLint  dstY0, GLint  dstX1, GLint  dstY1, GLbitfield  mask, GLenum  filter);
// typedef void  (APIENTRYP PBUFFERADDRESSRANGENV)(GLenum  pname, GLuint  index, GLuint64EXT  address, GLsizeiptr  length);
// typedef void  (APIENTRYP PBUFFERDATA)(GLenum  target, GLsizeiptr  size, const void * data, GLenum  usage);
// typedef void  (APIENTRYP PBUFFERDATAARB)(GLenum  target, GLsizeiptrARB  size, const void * data, GLenum  usage);
// typedef void  (APIENTRYP PBUFFERPARAMETERIAPPLE)(GLenum  target, GLenum  pname, GLint  param);
// typedef void  (APIENTRYP PBUFFERSTORAGE)(GLenum  target, GLsizeiptr  size, const void * data, GLbitfield  flags);
// typedef void  (APIENTRYP PBUFFERSUBDATA)(GLenum  target, GLintptr  offset, GLsizeiptr  size, const void * data);
// typedef void  (APIENTRYP PBUFFERSUBDATAARB)(GLenum  target, GLintptrARB  offset, GLsizeiptrARB  size, const void * data);
// typedef GLenum  (APIENTRYP PCHECKFRAMEBUFFERSTATUS)(GLenum  target);
// typedef GLenum  (APIENTRYP PCHECKFRAMEBUFFERSTATUSEXT)(GLenum  target);
// typedef GLenum  (APIENTRYP PCHECKNAMEDFRAMEBUFFERSTATUSEXT)(GLuint  framebuffer, GLenum  target);
// typedef void  (APIENTRYP PCLAMPCOLOR)(GLenum  target, GLenum  clamp);
// typedef void  (APIENTRYP PCLAMPCOLORARB)(GLenum  target, GLenum  clamp);
// typedef void  (APIENTRYP PCLEAR)(GLbitfield  mask);
// typedef void  (APIENTRYP PCLEARACCUMXOES)(GLfixed  red, GLfixed  green, GLfixed  blue, GLfixed  alpha);
// typedef void  (APIENTRYP PCLEARBUFFERDATA)(GLenum  target, GLenum  internalformat, GLenum  format, GLenum  type, const void * data);
// typedef void  (APIENTRYP PCLEARBUFFERSUBDATA)(GLenum  target, GLenum  internalformat, GLintptr  offset, GLsizeiptr  size, GLenum  format, GLenum  type, const void * data);
// typedef void  (APIENTRYP PCLEARBUFFERFI)(GLenum  buffer, GLint  drawbuffer, GLfloat  depth, GLint  stencil);
// typedef void  (APIENTRYP PCLEARBUFFERFV)(GLenum  buffer, GLint  drawbuffer, const GLfloat * value);
// typedef void  (APIENTRYP PCLEARBUFFERIV)(GLenum  buffer, GLint  drawbuffer, const GLint * value);
// typedef void  (APIENTRYP PCLEARBUFFERUIV)(GLenum  buffer, GLint  drawbuffer, const GLuint * value);
// typedef void  (APIENTRYP PCLEARCOLOR)(GLfloat  red, GLfloat  green, GLfloat  blue, GLfloat  alpha);
// typedef void  (APIENTRYP PCLEARCOLORIIEXT)(GLint  red, GLint  green, GLint  blue, GLint  alpha);
// typedef void  (APIENTRYP PCLEARCOLORIUIEXT)(GLuint  red, GLuint  green, GLuint  blue, GLuint  alpha);
// typedef void  (APIENTRYP PCLEARCOLORXOES)(GLfixed  red, GLfixed  green, GLfixed  blue, GLfixed  alpha);
// typedef void  (APIENTRYP PCLEARDEPTH)(GLdouble  depth);
// typedef void  (APIENTRYP PCLEARDEPTHDNV)(GLdouble  depth);
// typedef void  (APIENTRYP PCLEARDEPTHF)(GLfloat  d);
// typedef void  (APIENTRYP PCLEARDEPTHFOES)(GLclampf  depth);
// typedef void  (APIENTRYP PCLEARDEPTHXOES)(GLfixed  depth);
// typedef void  (APIENTRYP PCLEARNAMEDBUFFERDATAEXT)(GLuint  buffer, GLenum  internalformat, GLenum  format, GLenum  type, const void * data);
// typedef void  (APIENTRYP PCLEARNAMEDBUFFERSUBDATAEXT)(GLuint  buffer, GLenum  internalformat, GLsizeiptr  offset, GLsizeiptr  size, GLenum  format, GLenum  type, const void * data);
// typedef void  (APIENTRYP PCLEARSTENCIL)(GLint  s);
// typedef void  (APIENTRYP PCLEARTEXIMAGE)(GLuint  texture, GLint  level, GLenum  format, GLenum  type, const void * data);
// typedef void  (APIENTRYP PCLEARTEXSUBIMAGE)(GLuint  texture, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLsizei  width, GLsizei  height, GLsizei  depth, GLenum  format, GLenum  type, const void * data);
// typedef void  (APIENTRYP PCLIENTACTIVETEXTUREARB)(GLenum  texture);
// typedef void  (APIENTRYP PCLIENTACTIVEVERTEXSTREAMATI)(GLenum  stream);
// typedef void  (APIENTRYP PCLIENTATTRIBDEFAULTEXT)(GLbitfield  mask);
// typedef GLenum  (APIENTRYP PCLIENTWAITSYNC)(GLsync  sync, GLbitfield  flags, GLuint64  timeout);
// typedef void  (APIENTRYP PCLIPPLANEFOES)(GLenum  plane, const GLfloat * equation);
// typedef void  (APIENTRYP PCLIPPLANEXOES)(GLenum  plane, const GLfixed * equation);
// typedef void  (APIENTRYP PCOLOR3FVERTEX3FSUN)(GLfloat  r, GLfloat  g, GLfloat  b, GLfloat  x, GLfloat  y, GLfloat  z);
// typedef void  (APIENTRYP PCOLOR3FVERTEX3FVSUN)(const GLfloat * c, const GLfloat * v);
// typedef void  (APIENTRYP PCOLOR3HNV)(GLhalfNV  red, GLhalfNV  green, GLhalfNV  blue);
// typedef void  (APIENTRYP PCOLOR3HVNV)(const GLhalfNV * v);
// typedef void  (APIENTRYP PCOLOR3XOES)(GLfixed  red, GLfixed  green, GLfixed  blue);
// typedef void  (APIENTRYP PCOLOR3XVOES)(const GLfixed * components);
// typedef void  (APIENTRYP PCOLOR4FNORMAL3FVERTEX3FSUN)(GLfloat  r, GLfloat  g, GLfloat  b, GLfloat  a, GLfloat  nx, GLfloat  ny, GLfloat  nz, GLfloat  x, GLfloat  y, GLfloat  z);
// typedef void  (APIENTRYP PCOLOR4FNORMAL3FVERTEX3FVSUN)(const GLfloat * c, const GLfloat * n, const GLfloat * v);
// typedef void  (APIENTRYP PCOLOR4HNV)(GLhalfNV  red, GLhalfNV  green, GLhalfNV  blue, GLhalfNV  alpha);
// typedef void  (APIENTRYP PCOLOR4HVNV)(const GLhalfNV * v);
// typedef void  (APIENTRYP PCOLOR4UBVERTEX2FSUN)(GLubyte  r, GLubyte  g, GLubyte  b, GLubyte  a, GLfloat  x, GLfloat  y);
// typedef void  (APIENTRYP PCOLOR4UBVERTEX2FVSUN)(const GLubyte * c, const GLfloat * v);
// typedef void  (APIENTRYP PCOLOR4UBVERTEX3FSUN)(GLubyte  r, GLubyte  g, GLubyte  b, GLubyte  a, GLfloat  x, GLfloat  y, GLfloat  z);
// typedef void  (APIENTRYP PCOLOR4UBVERTEX3FVSUN)(const GLubyte * c, const GLfloat * v);
// typedef void  (APIENTRYP PCOLOR4XOES)(GLfixed  red, GLfixed  green, GLfixed  blue, GLfixed  alpha);
// typedef void  (APIENTRYP PCOLOR4XVOES)(const GLfixed * components);
// typedef void  (APIENTRYP PCOLORFORMATNV)(GLint  size, GLenum  type, GLsizei  stride);
// typedef void  (APIENTRYP PCOLORFRAGMENTOP1ATI)(GLenum  op, GLuint  dst, GLuint  dstMask, GLuint  dstMod, GLuint  arg1, GLuint  arg1Rep, GLuint  arg1Mod);
// typedef void  (APIENTRYP PCOLORFRAGMENTOP2ATI)(GLenum  op, GLuint  dst, GLuint  dstMask, GLuint  dstMod, GLuint  arg1, GLuint  arg1Rep, GLuint  arg1Mod, GLuint  arg2, GLuint  arg2Rep, GLuint  arg2Mod);
// typedef void  (APIENTRYP PCOLORFRAGMENTOP3ATI)(GLenum  op, GLuint  dst, GLuint  dstMask, GLuint  dstMod, GLuint  arg1, GLuint  arg1Rep, GLuint  arg1Mod, GLuint  arg2, GLuint  arg2Rep, GLuint  arg2Mod, GLuint  arg3, GLuint  arg3Rep, GLuint  arg3Mod);
// typedef void  (APIENTRYP PCOLORMASK)(GLboolean  red, GLboolean  green, GLboolean  blue, GLboolean  alpha);
// typedef void  (APIENTRYP PCOLORMASKINDEXEDEXT)(GLuint  index, GLboolean  r, GLboolean  g, GLboolean  b, GLboolean  a);
// typedef void  (APIENTRYP PCOLORMASKI)(GLuint  index, GLboolean  r, GLboolean  g, GLboolean  b, GLboolean  a);
// typedef void  (APIENTRYP PCOLORPOINTEREXT)(GLint  size, GLenum  type, GLsizei  stride, GLsizei  count, const void * pointer);
// typedef void  (APIENTRYP PCOLORPOINTERLISTIBM)(GLint  size, GLenum  type, GLint  stride, const void ** pointer, GLint  ptrstride);
// typedef void  (APIENTRYP PCOLORPOINTERVINTEL)(GLint  size, GLenum  type, const void ** pointer);
// typedef void  (APIENTRYP PCOLORSUBTABLEEXT)(GLenum  target, GLsizei  start, GLsizei  count, GLenum  format, GLenum  type, const void * data);
// typedef void  (APIENTRYP PCOLORTABLEEXT)(GLenum  target, GLenum  internalFormat, GLsizei  width, GLenum  format, GLenum  type, const void * table);
// typedef void  (APIENTRYP PCOLORTABLEPARAMETERFVSGI)(GLenum  target, GLenum  pname, const GLfloat * params);
// typedef void  (APIENTRYP PCOLORTABLEPARAMETERIVSGI)(GLenum  target, GLenum  pname, const GLint * params);
// typedef void  (APIENTRYP PCOLORTABLESGI)(GLenum  target, GLenum  internalformat, GLsizei  width, GLenum  format, GLenum  type, const void * table);
// typedef void  (APIENTRYP PCOMBINERINPUTNV)(GLenum  stage, GLenum  portion, GLenum  variable, GLenum  input, GLenum  mapping, GLenum  componentUsage);
// typedef void  (APIENTRYP PCOMBINEROUTPUTNV)(GLenum  stage, GLenum  portion, GLenum  abOutput, GLenum  cdOutput, GLenum  sumOutput, GLenum  scale, GLenum  bias, GLboolean  abDotProduct, GLboolean  cdDotProduct, GLboolean  muxSum);
// typedef void  (APIENTRYP PCOMBINERPARAMETERFNV)(GLenum  pname, GLfloat  param);
// typedef void  (APIENTRYP PCOMBINERPARAMETERFVNV)(GLenum  pname, const GLfloat * params);
// typedef void  (APIENTRYP PCOMBINERPARAMETERINV)(GLenum  pname, GLint  param);
// typedef void  (APIENTRYP PCOMBINERPARAMETERIVNV)(GLenum  pname, const GLint * params);
// typedef void  (APIENTRYP PCOMBINERSTAGEPARAMETERFVNV)(GLenum  stage, GLenum  pname, const GLfloat * params);
// typedef void  (APIENTRYP PCOMPILESHADER)(GLuint  shader);
// typedef void  (APIENTRYP PCOMPILESHADERARB)(GLhandleARB  shaderObj);
// typedef void  (APIENTRYP PCOMPILESHADERINCLUDEARB)(GLuint  shader, GLsizei  count, const GLchar *const* path, const GLint * length);
// typedef void  (APIENTRYP PCOMPRESSEDMULTITEXIMAGE1DEXT)(GLenum  texunit, GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLint  border, GLsizei  imageSize, const void * bits);
// typedef void  (APIENTRYP PCOMPRESSEDMULTITEXIMAGE2DEXT)(GLenum  texunit, GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLsizei  height, GLint  border, GLsizei  imageSize, const void * bits);
// typedef void  (APIENTRYP PCOMPRESSEDMULTITEXIMAGE3DEXT)(GLenum  texunit, GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth, GLint  border, GLsizei  imageSize, const void * bits);
// typedef void  (APIENTRYP PCOMPRESSEDMULTITEXSUBIMAGE1DEXT)(GLenum  texunit, GLenum  target, GLint  level, GLint  xoffset, GLsizei  width, GLenum  format, GLsizei  imageSize, const void * bits);
// typedef void  (APIENTRYP PCOMPRESSEDMULTITEXSUBIMAGE2DEXT)(GLenum  texunit, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLsizei  width, GLsizei  height, GLenum  format, GLsizei  imageSize, const void * bits);
// typedef void  (APIENTRYP PCOMPRESSEDMULTITEXSUBIMAGE3DEXT)(GLenum  texunit, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLsizei  width, GLsizei  height, GLsizei  depth, GLenum  format, GLsizei  imageSize, const void * bits);
// typedef void  (APIENTRYP PCOMPRESSEDTEXIMAGE1D)(GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLint  border, GLsizei  imageSize, const void * data);
// typedef void  (APIENTRYP PCOMPRESSEDTEXIMAGE1DARB)(GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLint  border, GLsizei  imageSize, const void * data);
// typedef void  (APIENTRYP PCOMPRESSEDTEXIMAGE2D)(GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLsizei  height, GLint  border, GLsizei  imageSize, const void * data);
// typedef void  (APIENTRYP PCOMPRESSEDTEXIMAGE2DARB)(GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLsizei  height, GLint  border, GLsizei  imageSize, const void * data);
// typedef void  (APIENTRYP PCOMPRESSEDTEXIMAGE3D)(GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth, GLint  border, GLsizei  imageSize, const void * data);
// typedef void  (APIENTRYP PCOMPRESSEDTEXIMAGE3DARB)(GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth, GLint  border, GLsizei  imageSize, const void * data);
// typedef void  (APIENTRYP PCOMPRESSEDTEXSUBIMAGE1D)(GLenum  target, GLint  level, GLint  xoffset, GLsizei  width, GLenum  format, GLsizei  imageSize, const void * data);
// typedef void  (APIENTRYP PCOMPRESSEDTEXSUBIMAGE1DARB)(GLenum  target, GLint  level, GLint  xoffset, GLsizei  width, GLenum  format, GLsizei  imageSize, const void * data);
// typedef void  (APIENTRYP PCOMPRESSEDTEXSUBIMAGE2D)(GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLsizei  width, GLsizei  height, GLenum  format, GLsizei  imageSize, const void * data);
// typedef void  (APIENTRYP PCOMPRESSEDTEXSUBIMAGE2DARB)(GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLsizei  width, GLsizei  height, GLenum  format, GLsizei  imageSize, const void * data);
// typedef void  (APIENTRYP PCOMPRESSEDTEXSUBIMAGE3D)(GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLsizei  width, GLsizei  height, GLsizei  depth, GLenum  format, GLsizei  imageSize, const void * data);
// typedef void  (APIENTRYP PCOMPRESSEDTEXSUBIMAGE3DARB)(GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLsizei  width, GLsizei  height, GLsizei  depth, GLenum  format, GLsizei  imageSize, const void * data);
// typedef void  (APIENTRYP PCOMPRESSEDTEXTUREIMAGE1DEXT)(GLuint  texture, GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLint  border, GLsizei  imageSize, const void * bits);
// typedef void  (APIENTRYP PCOMPRESSEDTEXTUREIMAGE2DEXT)(GLuint  texture, GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLsizei  height, GLint  border, GLsizei  imageSize, const void * bits);
// typedef void  (APIENTRYP PCOMPRESSEDTEXTUREIMAGE3DEXT)(GLuint  texture, GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth, GLint  border, GLsizei  imageSize, const void * bits);
// typedef void  (APIENTRYP PCOMPRESSEDTEXTURESUBIMAGE1DEXT)(GLuint  texture, GLenum  target, GLint  level, GLint  xoffset, GLsizei  width, GLenum  format, GLsizei  imageSize, const void * bits);
// typedef void  (APIENTRYP PCOMPRESSEDTEXTURESUBIMAGE2DEXT)(GLuint  texture, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLsizei  width, GLsizei  height, GLenum  format, GLsizei  imageSize, const void * bits);
// typedef void  (APIENTRYP PCOMPRESSEDTEXTURESUBIMAGE3DEXT)(GLuint  texture, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLsizei  width, GLsizei  height, GLsizei  depth, GLenum  format, GLsizei  imageSize, const void * bits);
// typedef void  (APIENTRYP PCONVOLUTIONFILTER1DEXT)(GLenum  target, GLenum  internalformat, GLsizei  width, GLenum  format, GLenum  type, const void * image);
// typedef void  (APIENTRYP PCONVOLUTIONFILTER2DEXT)(GLenum  target, GLenum  internalformat, GLsizei  width, GLsizei  height, GLenum  format, GLenum  type, const void * image);
// typedef void  (APIENTRYP PCONVOLUTIONPARAMETERFEXT)(GLenum  target, GLenum  pname, GLfloat  params);
// typedef void  (APIENTRYP PCONVOLUTIONPARAMETERFVEXT)(GLenum  target, GLenum  pname, const GLfloat * params);
// typedef void  (APIENTRYP PCONVOLUTIONPARAMETERIEXT)(GLenum  target, GLenum  pname, GLint  params);
// typedef void  (APIENTRYP PCONVOLUTIONPARAMETERIVEXT)(GLenum  target, GLenum  pname, const GLint * params);
// typedef void  (APIENTRYP PCONVOLUTIONPARAMETERXOES)(GLenum  target, GLenum  pname, GLfixed  param);
// typedef void  (APIENTRYP PCONVOLUTIONPARAMETERXVOES)(GLenum  target, GLenum  pname, const GLfixed * params);
// typedef void  (APIENTRYP PCOPYBUFFERSUBDATA)(GLenum  readTarget, GLenum  writeTarget, GLintptr  readOffset, GLintptr  writeOffset, GLsizeiptr  size);
// typedef void  (APIENTRYP PCOPYCOLORSUBTABLEEXT)(GLenum  target, GLsizei  start, GLint  x, GLint  y, GLsizei  width);
// typedef void  (APIENTRYP PCOPYCOLORTABLESGI)(GLenum  target, GLenum  internalformat, GLint  x, GLint  y, GLsizei  width);
// typedef void  (APIENTRYP PCOPYCONVOLUTIONFILTER1DEXT)(GLenum  target, GLenum  internalformat, GLint  x, GLint  y, GLsizei  width);
// typedef void  (APIENTRYP PCOPYCONVOLUTIONFILTER2DEXT)(GLenum  target, GLenum  internalformat, GLint  x, GLint  y, GLsizei  width, GLsizei  height);
// typedef void  (APIENTRYP PCOPYIMAGESUBDATA)(GLuint  srcName, GLenum  srcTarget, GLint  srcLevel, GLint  srcX, GLint  srcY, GLint  srcZ, GLuint  dstName, GLenum  dstTarget, GLint  dstLevel, GLint  dstX, GLint  dstY, GLint  dstZ, GLsizei  srcWidth, GLsizei  srcHeight, GLsizei  srcDepth);
// typedef void  (APIENTRYP PCOPYIMAGESUBDATANV)(GLuint  srcName, GLenum  srcTarget, GLint  srcLevel, GLint  srcX, GLint  srcY, GLint  srcZ, GLuint  dstName, GLenum  dstTarget, GLint  dstLevel, GLint  dstX, GLint  dstY, GLint  dstZ, GLsizei  width, GLsizei  height, GLsizei  depth);
// typedef void  (APIENTRYP PCOPYMULTITEXIMAGE1DEXT)(GLenum  texunit, GLenum  target, GLint  level, GLenum  internalformat, GLint  x, GLint  y, GLsizei  width, GLint  border);
// typedef void  (APIENTRYP PCOPYMULTITEXIMAGE2DEXT)(GLenum  texunit, GLenum  target, GLint  level, GLenum  internalformat, GLint  x, GLint  y, GLsizei  width, GLsizei  height, GLint  border);
// typedef void  (APIENTRYP PCOPYMULTITEXSUBIMAGE1DEXT)(GLenum  texunit, GLenum  target, GLint  level, GLint  xoffset, GLint  x, GLint  y, GLsizei  width);
// typedef void  (APIENTRYP PCOPYMULTITEXSUBIMAGE2DEXT)(GLenum  texunit, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  x, GLint  y, GLsizei  width, GLsizei  height);
// typedef void  (APIENTRYP PCOPYMULTITEXSUBIMAGE3DEXT)(GLenum  texunit, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLint  x, GLint  y, GLsizei  width, GLsizei  height);
// typedef void  (APIENTRYP PCOPYPATHNV)(GLuint  resultPath, GLuint  srcPath);
// typedef void  (APIENTRYP PCOPYTEXIMAGE1D)(GLenum  target, GLint  level, GLenum  internalformat, GLint  x, GLint  y, GLsizei  width, GLint  border);
// typedef void  (APIENTRYP PCOPYTEXIMAGE1DEXT)(GLenum  target, GLint  level, GLenum  internalformat, GLint  x, GLint  y, GLsizei  width, GLint  border);
// typedef void  (APIENTRYP PCOPYTEXIMAGE2D)(GLenum  target, GLint  level, GLenum  internalformat, GLint  x, GLint  y, GLsizei  width, GLsizei  height, GLint  border);
// typedef void  (APIENTRYP PCOPYTEXIMAGE2DEXT)(GLenum  target, GLint  level, GLenum  internalformat, GLint  x, GLint  y, GLsizei  width, GLsizei  height, GLint  border);
// typedef void  (APIENTRYP PCOPYTEXSUBIMAGE1D)(GLenum  target, GLint  level, GLint  xoffset, GLint  x, GLint  y, GLsizei  width);
// typedef void  (APIENTRYP PCOPYTEXSUBIMAGE1DEXT)(GLenum  target, GLint  level, GLint  xoffset, GLint  x, GLint  y, GLsizei  width);
// typedef void  (APIENTRYP PCOPYTEXSUBIMAGE2D)(GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  x, GLint  y, GLsizei  width, GLsizei  height);
// typedef void  (APIENTRYP PCOPYTEXSUBIMAGE2DEXT)(GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  x, GLint  y, GLsizei  width, GLsizei  height);
// typedef void  (APIENTRYP PCOPYTEXSUBIMAGE3D)(GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLint  x, GLint  y, GLsizei  width, GLsizei  height);
// typedef void  (APIENTRYP PCOPYTEXSUBIMAGE3DEXT)(GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLint  x, GLint  y, GLsizei  width, GLsizei  height);
// typedef void  (APIENTRYP PCOPYTEXTUREIMAGE1DEXT)(GLuint  texture, GLenum  target, GLint  level, GLenum  internalformat, GLint  x, GLint  y, GLsizei  width, GLint  border);
// typedef void  (APIENTRYP PCOPYTEXTUREIMAGE2DEXT)(GLuint  texture, GLenum  target, GLint  level, GLenum  internalformat, GLint  x, GLint  y, GLsizei  width, GLsizei  height, GLint  border);
// typedef void  (APIENTRYP PCOPYTEXTURESUBIMAGE1DEXT)(GLuint  texture, GLenum  target, GLint  level, GLint  xoffset, GLint  x, GLint  y, GLsizei  width);
// typedef void  (APIENTRYP PCOPYTEXTURESUBIMAGE2DEXT)(GLuint  texture, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  x, GLint  y, GLsizei  width, GLsizei  height);
// typedef void  (APIENTRYP PCOPYTEXTURESUBIMAGE3DEXT)(GLuint  texture, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLint  x, GLint  y, GLsizei  width, GLsizei  height);
// typedef void  (APIENTRYP PCOVERFILLPATHINSTANCEDNV)(GLsizei  numPaths, GLenum  pathNameType, const void * paths, GLuint  pathBase, GLenum  coverMode, GLenum  transformType, const GLfloat * transformValues);
// typedef void  (APIENTRYP PCOVERFILLPATHNV)(GLuint  path, GLenum  coverMode);
// typedef void  (APIENTRYP PCOVERSTROKEPATHINSTANCEDNV)(GLsizei  numPaths, GLenum  pathNameType, const void * paths, GLuint  pathBase, GLenum  coverMode, GLenum  transformType, const GLfloat * transformValues);
// typedef void  (APIENTRYP PCOVERSTROKEPATHNV)(GLuint  path, GLenum  coverMode);
// typedef void  (APIENTRYP PCREATEPERFQUERYINTEL)(GLuint  queryId, GLuint * queryHandle);
// typedef GLuint  (APIENTRYP PCREATEPROGRAM)();
// typedef GLhandleARB  (APIENTRYP PCREATEPROGRAMOBJECTARB)();
// typedef GLuint  (APIENTRYP PCREATESHADER)(GLenum  type);
// typedef GLhandleARB  (APIENTRYP PCREATESHADEROBJECTARB)(GLenum  shaderType);
// typedef GLuint  (APIENTRYP PCREATESHADERPROGRAMEXT)(GLenum  type, const GLchar * string);
// typedef GLuint  (APIENTRYP PCREATESHADERPROGRAMV)(GLenum  type, GLsizei  count, const GLchar *const* strings);
// typedef GLuint  (APIENTRYP PCREATESHADERPROGRAMVEXT)(GLenum  type, GLsizei  count, const GLchar ** strings);
// typedef GLsync  (APIENTRYP PCREATESYNCFROMCLEVENTARB)(struct _cl_context * context, struct _cl_event * event, GLbitfield  flags);
// typedef void  (APIENTRYP PCULLFACE)(GLenum  mode);
// typedef void  (APIENTRYP PCULLPARAMETERDVEXT)(GLenum  pname, GLdouble * params);
// typedef void  (APIENTRYP PCULLPARAMETERFVEXT)(GLenum  pname, GLfloat * params);
// typedef void  (APIENTRYP PCURRENTPALETTEMATRIXARB)(GLint  index);
// typedef void  (APIENTRYP PDEBUGMESSAGECALLBACK)(GLDEBUGPROC  callback, const void * userParam);
// typedef void  (APIENTRYP PDEBUGMESSAGECALLBACKAMD)(GLDEBUGPROCAMD  callback, void * userParam);
// typedef void  (APIENTRYP PDEBUGMESSAGECALLBACKARB)(GLDEBUGPROCARB  callback, const void * userParam);
// typedef void  (APIENTRYP PDEBUGMESSAGECALLBACKKHR)(GLDEBUGPROCKHR  callback, const void * userParam);
// typedef void  (APIENTRYP PDEBUGMESSAGECONTROL)(GLenum  source, GLenum  type, GLenum  severity, GLsizei  count, const GLuint * ids, GLboolean  enabled);
// typedef void  (APIENTRYP PDEBUGMESSAGECONTROLARB)(GLenum  source, GLenum  type, GLenum  severity, GLsizei  count, const GLuint * ids, GLboolean  enabled);
// typedef void  (APIENTRYP PDEBUGMESSAGECONTROLKHR)(GLenum  source, GLenum  type, GLenum  severity, GLsizei  count, const GLuint * ids, GLboolean  enabled);
// typedef void  (APIENTRYP PDEBUGMESSAGEENABLEAMD)(GLenum  category, GLenum  severity, GLsizei  count, const GLuint * ids, GLboolean  enabled);
// typedef void  (APIENTRYP PDEBUGMESSAGEINSERT)(GLenum  source, GLenum  type, GLuint  id, GLenum  severity, GLsizei  length, const GLchar * buf);
// typedef void  (APIENTRYP PDEBUGMESSAGEINSERTAMD)(GLenum  category, GLenum  severity, GLuint  id, GLsizei  length, const GLchar * buf);
// typedef void  (APIENTRYP PDEBUGMESSAGEINSERTARB)(GLenum  source, GLenum  type, GLuint  id, GLenum  severity, GLsizei  length, const GLchar * buf);
// typedef void  (APIENTRYP PDEBUGMESSAGEINSERTKHR)(GLenum  source, GLenum  type, GLuint  id, GLenum  severity, GLsizei  length, const GLchar * buf);
// typedef void  (APIENTRYP PDEFORMSGIX)(GLbitfield  mask);
// typedef void  (APIENTRYP PDEFORMATIONMAP3DSGIX)(GLenum  target, GLdouble  u1, GLdouble  u2, GLint  ustride, GLint  uorder, GLdouble  v1, GLdouble  v2, GLint  vstride, GLint  vorder, GLdouble  w1, GLdouble  w2, GLint  wstride, GLint  worder, const GLdouble * points);
// typedef void  (APIENTRYP PDEFORMATIONMAP3FSGIX)(GLenum  target, GLfloat  u1, GLfloat  u2, GLint  ustride, GLint  uorder, GLfloat  v1, GLfloat  v2, GLint  vstride, GLint  vorder, GLfloat  w1, GLfloat  w2, GLint  wstride, GLint  worder, const GLfloat * points);
// typedef void  (APIENTRYP PDELETEASYNCMARKERSSGIX)(GLuint  marker, GLsizei  range);
// typedef void  (APIENTRYP PDELETEBUFFERS)(GLsizei  n, const GLuint * buffers);
// typedef void  (APIENTRYP PDELETEBUFFERSARB)(GLsizei  n, const GLuint * buffers);
// typedef void  (APIENTRYP PDELETEFENCESAPPLE)(GLsizei  n, const GLuint * fences);
// typedef void  (APIENTRYP PDELETEFENCESNV)(GLsizei  n, const GLuint * fences);
// typedef void  (APIENTRYP PDELETEFRAGMENTSHADERATI)(GLuint  id);
// typedef void  (APIENTRYP PDELETEFRAMEBUFFERS)(GLsizei  n, const GLuint * framebuffers);
// typedef void  (APIENTRYP PDELETEFRAMEBUFFERSEXT)(GLsizei  n, const GLuint * framebuffers);
// typedef void  (APIENTRYP PDELETENAMEDSTRINGARB)(GLint  namelen, const GLchar * name);
// typedef void  (APIENTRYP PDELETENAMESAMD)(GLenum  identifier, GLuint  num, const GLuint * names);
// typedef void  (APIENTRYP PDELETEOBJECTARB)(GLhandleARB  obj);
// typedef void  (APIENTRYP PDELETEOCCLUSIONQUERIESNV)(GLsizei  n, const GLuint * ids);
// typedef void  (APIENTRYP PDELETEPATHSNV)(GLuint  path, GLsizei  range);
// typedef void  (APIENTRYP PDELETEPERFMONITORSAMD)(GLsizei  n, GLuint * monitors);
// typedef void  (APIENTRYP PDELETEPERFQUERYINTEL)(GLuint  queryHandle);
// typedef void  (APIENTRYP PDELETEPROGRAM)(GLuint  program);
// typedef void  (APIENTRYP PDELETEPROGRAMPIPELINES)(GLsizei  n, const GLuint * pipelines);
// typedef void  (APIENTRYP PDELETEPROGRAMPIPELINESEXT)(GLsizei  n, const GLuint * pipelines);
// typedef void  (APIENTRYP PDELETEPROGRAMSARB)(GLsizei  n, const GLuint * programs);
// typedef void  (APIENTRYP PDELETEPROGRAMSNV)(GLsizei  n, const GLuint * programs);
// typedef void  (APIENTRYP PDELETEQUERIES)(GLsizei  n, const GLuint * ids);
// typedef void  (APIENTRYP PDELETEQUERIESARB)(GLsizei  n, const GLuint * ids);
// typedef void  (APIENTRYP PDELETERENDERBUFFERS)(GLsizei  n, const GLuint * renderbuffers);
// typedef void  (APIENTRYP PDELETERENDERBUFFERSEXT)(GLsizei  n, const GLuint * renderbuffers);
// typedef void  (APIENTRYP PDELETESAMPLERS)(GLsizei  count, const GLuint * samplers);
// typedef void  (APIENTRYP PDELETESHADER)(GLuint  shader);
// typedef void  (APIENTRYP PDELETESYNC)(GLsync  sync);
// typedef void  (APIENTRYP PDELETETEXTURES)(GLsizei  n, const GLuint * textures);
// typedef void  (APIENTRYP PDELETETEXTURESEXT)(GLsizei  n, const GLuint * textures);
// typedef void  (APIENTRYP PDELETETRANSFORMFEEDBACKS)(GLsizei  n, const GLuint * ids);
// typedef void  (APIENTRYP PDELETETRANSFORMFEEDBACKSNV)(GLsizei  n, const GLuint * ids);
// typedef void  (APIENTRYP PDELETEVERTEXARRAYS)(GLsizei  n, const GLuint * arrays);
// typedef void  (APIENTRYP PDELETEVERTEXARRAYSAPPLE)(GLsizei  n, const GLuint * arrays);
// typedef void  (APIENTRYP PDELETEVERTEXSHADEREXT)(GLuint  id);
// typedef void  (APIENTRYP PDEPTHBOUNDSEXT)(GLclampd  zmin, GLclampd  zmax);
// typedef void  (APIENTRYP PDEPTHBOUNDSDNV)(GLdouble  zmin, GLdouble  zmax);
// typedef void  (APIENTRYP PDEPTHFUNC)(GLenum  func);
// typedef void  (APIENTRYP PDEPTHMASK)(GLboolean  flag);
// typedef void  (APIENTRYP PDEPTHRANGE)(GLdouble  xnear, GLdouble  xfar);
// typedef void  (APIENTRYP PDEPTHRANGEARRAYV)(GLuint  first, GLsizei  count, const GLdouble * v);
// typedef void  (APIENTRYP PDEPTHRANGEINDEXED)(GLuint  index, GLdouble  n, GLdouble  f);
// typedef void  (APIENTRYP PDEPTHRANGEDNV)(GLdouble  zNear, GLdouble  zFar);
// typedef void  (APIENTRYP PDEPTHRANGEF)(GLfloat  n, GLfloat  f);
// typedef void  (APIENTRYP PDEPTHRANGEFOES)(GLclampf  n, GLclampf  f);
// typedef void  (APIENTRYP PDEPTHRANGEXOES)(GLfixed  n, GLfixed  f);
// typedef void  (APIENTRYP PDETACHOBJECTARB)(GLhandleARB  containerObj, GLhandleARB  attachedObj);
// typedef void  (APIENTRYP PDETACHSHADER)(GLuint  program, GLuint  shader);
// typedef void  (APIENTRYP PDETAILTEXFUNCSGIS)(GLenum  target, GLsizei  n, const GLfloat * points);
// typedef void  (APIENTRYP PDISABLE)(GLenum  cap);
// typedef void  (APIENTRYP PDISABLECLIENTSTATEINDEXEDEXT)(GLenum  array, GLuint  index);
// typedef void  (APIENTRYP PDISABLECLIENTSTATEIEXT)(GLenum  array, GLuint  index);
// typedef void  (APIENTRYP PDISABLEINDEXEDEXT)(GLenum  target, GLuint  index);
// typedef void  (APIENTRYP PDISABLEVARIANTCLIENTSTATEEXT)(GLuint  id);
// typedef void  (APIENTRYP PDISABLEVERTEXARRAYATTRIBEXT)(GLuint  vaobj, GLuint  index);
// typedef void  (APIENTRYP PDISABLEVERTEXARRAYEXT)(GLuint  vaobj, GLenum  array);
// typedef void  (APIENTRYP PDISABLEVERTEXATTRIBAPPLE)(GLuint  index, GLenum  pname);
// typedef void  (APIENTRYP PDISABLEVERTEXATTRIBARRAY)(GLuint  index);
// typedef void  (APIENTRYP PDISABLEVERTEXATTRIBARRAYARB)(GLuint  index);
// typedef void  (APIENTRYP PDISABLEI)(GLenum  target, GLuint  index);
// typedef void  (APIENTRYP PDISPATCHCOMPUTE)(GLuint  num_groups_x, GLuint  num_groups_y, GLuint  num_groups_z);
// typedef void  (APIENTRYP PDISPATCHCOMPUTEGROUPSIZEARB)(GLuint  num_groups_x, GLuint  num_groups_y, GLuint  num_groups_z, GLuint  group_size_x, GLuint  group_size_y, GLuint  group_size_z);
// typedef void  (APIENTRYP PDISPATCHCOMPUTEINDIRECT)(GLintptr  indirect);
// typedef void  (APIENTRYP PDRAWARRAYS)(GLenum  mode, GLint  first, GLsizei  count);
// typedef void  (APIENTRYP PDRAWARRAYSEXT)(GLenum  mode, GLint  first, GLsizei  count);
// typedef void  (APIENTRYP PDRAWARRAYSINDIRECT)(GLenum  mode, const void * indirect);
// typedef void  (APIENTRYP PDRAWARRAYSINSTANCED)(GLenum  mode, GLint  first, GLsizei  count, GLsizei  instancecount);
// typedef void  (APIENTRYP PDRAWARRAYSINSTANCEDARB)(GLenum  mode, GLint  first, GLsizei  count, GLsizei  primcount);
// typedef void  (APIENTRYP PDRAWARRAYSINSTANCEDBASEINSTANCE)(GLenum  mode, GLint  first, GLsizei  count, GLsizei  instancecount, GLuint  baseinstance);
// typedef void  (APIENTRYP PDRAWARRAYSINSTANCEDEXT)(GLenum  mode, GLint  start, GLsizei  count, GLsizei  primcount);
// typedef void  (APIENTRYP PDRAWBUFFER)(GLenum  mode);
// typedef void  (APIENTRYP PDRAWBUFFERS)(GLsizei  n, const GLenum * bufs);
// typedef void  (APIENTRYP PDRAWBUFFERSARB)(GLsizei  n, const GLenum * bufs);
// typedef void  (APIENTRYP PDRAWBUFFERSATI)(GLsizei  n, const GLenum * bufs);
// typedef void  (APIENTRYP PDRAWELEMENTARRAYAPPLE)(GLenum  mode, GLint  first, GLsizei  count);
// typedef void  (APIENTRYP PDRAWELEMENTARRAYATI)(GLenum  mode, GLsizei  count);
// typedef void  (APIENTRYP PDRAWELEMENTS)(GLenum  mode, GLsizei  count, GLenum  type, const void * indices);
// typedef void  (APIENTRYP PDRAWELEMENTSBASEVERTEX)(GLenum  mode, GLsizei  count, GLenum  type, const void * indices, GLint  basevertex);
// typedef void  (APIENTRYP PDRAWELEMENTSINDIRECT)(GLenum  mode, GLenum  type, const void * indirect);
// typedef void  (APIENTRYP PDRAWELEMENTSINSTANCED)(GLenum  mode, GLsizei  count, GLenum  type, const void * indices, GLsizei  instancecount);
// typedef void  (APIENTRYP PDRAWELEMENTSINSTANCEDARB)(GLenum  mode, GLsizei  count, GLenum  type, const void * indices, GLsizei  primcount);
// typedef void  (APIENTRYP PDRAWELEMENTSINSTANCEDBASEINSTANCE)(GLenum  mode, GLsizei  count, GLenum  type, const void * indices, GLsizei  instancecount, GLuint  baseinstance);
// typedef void  (APIENTRYP PDRAWELEMENTSINSTANCEDBASEVERTEX)(GLenum  mode, GLsizei  count, GLenum  type, const void * indices, GLsizei  instancecount, GLint  basevertex);
// typedef void  (APIENTRYP PDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCE)(GLenum  mode, GLsizei  count, GLenum  type, const void * indices, GLsizei  instancecount, GLint  basevertex, GLuint  baseinstance);
// typedef void  (APIENTRYP PDRAWELEMENTSINSTANCEDEXT)(GLenum  mode, GLsizei  count, GLenum  type, const void * indices, GLsizei  primcount);
// typedef void  (APIENTRYP PDRAWMESHARRAYSSUN)(GLenum  mode, GLint  first, GLsizei  count, GLsizei  width);
// typedef void  (APIENTRYP PDRAWRANGEELEMENTARRAYAPPLE)(GLenum  mode, GLuint  start, GLuint  end, GLint  first, GLsizei  count);
// typedef void  (APIENTRYP PDRAWRANGEELEMENTARRAYATI)(GLenum  mode, GLuint  start, GLuint  end, GLsizei  count);
// typedef void  (APIENTRYP PDRAWRANGEELEMENTS)(GLenum  mode, GLuint  start, GLuint  end, GLsizei  count, GLenum  type, const void * indices);
// typedef void  (APIENTRYP PDRAWRANGEELEMENTSBASEVERTEX)(GLenum  mode, GLuint  start, GLuint  end, GLsizei  count, GLenum  type, const void * indices, GLint  basevertex);
// typedef void  (APIENTRYP PDRAWRANGEELEMENTSEXT)(GLenum  mode, GLuint  start, GLuint  end, GLsizei  count, GLenum  type, const void * indices);
// typedef void  (APIENTRYP PDRAWTEXTURENV)(GLuint  texture, GLuint  sampler, GLfloat  x0, GLfloat  y0, GLfloat  x1, GLfloat  y1, GLfloat  z, GLfloat  s0, GLfloat  t0, GLfloat  s1, GLfloat  t1);
// typedef void  (APIENTRYP PDRAWTRANSFORMFEEDBACK)(GLenum  mode, GLuint  id);
// typedef void  (APIENTRYP PDRAWTRANSFORMFEEDBACKINSTANCED)(GLenum  mode, GLuint  id, GLsizei  instancecount);
// typedef void  (APIENTRYP PDRAWTRANSFORMFEEDBACKNV)(GLenum  mode, GLuint  id);
// typedef void  (APIENTRYP PDRAWTRANSFORMFEEDBACKSTREAM)(GLenum  mode, GLuint  id, GLuint  stream);
// typedef void  (APIENTRYP PDRAWTRANSFORMFEEDBACKSTREAMINSTANCED)(GLenum  mode, GLuint  id, GLuint  stream, GLsizei  instancecount);
// typedef void  (APIENTRYP PEDGEFLAGFORMATNV)(GLsizei  stride);
// typedef void  (APIENTRYP PEDGEFLAGPOINTEREXT)(GLsizei  stride, GLsizei  count, const GLboolean * pointer);
// typedef void  (APIENTRYP PEDGEFLAGPOINTERLISTIBM)(GLint  stride, const GLboolean ** pointer, GLint  ptrstride);
// typedef void  (APIENTRYP PELEMENTPOINTERAPPLE)(GLenum  type, const void * pointer);
// typedef void  (APIENTRYP PELEMENTPOINTERATI)(GLenum  type, const void * pointer);
// typedef void  (APIENTRYP PENABLE)(GLenum  cap);
// typedef void  (APIENTRYP PENABLECLIENTSTATEINDEXEDEXT)(GLenum  array, GLuint  index);
// typedef void  (APIENTRYP PENABLECLIENTSTATEIEXT)(GLenum  array, GLuint  index);
// typedef void  (APIENTRYP PENABLEINDEXEDEXT)(GLenum  target, GLuint  index);
// typedef void  (APIENTRYP PENABLEVARIANTCLIENTSTATEEXT)(GLuint  id);
// typedef void  (APIENTRYP PENABLEVERTEXARRAYATTRIBEXT)(GLuint  vaobj, GLuint  index);
// typedef void  (APIENTRYP PENABLEVERTEXARRAYEXT)(GLuint  vaobj, GLenum  array);
// typedef void  (APIENTRYP PENABLEVERTEXATTRIBAPPLE)(GLuint  index, GLenum  pname);
// typedef void  (APIENTRYP PENABLEVERTEXATTRIBARRAY)(GLuint  index);
// typedef void  (APIENTRYP PENABLEVERTEXATTRIBARRAYARB)(GLuint  index);
// typedef void  (APIENTRYP PENABLEI)(GLenum  target, GLuint  index);
// typedef void  (APIENTRYP PENDCONDITIONALRENDER)();
// typedef void  (APIENTRYP PENDCONDITIONALRENDERNV)();
// typedef void  (APIENTRYP PENDCONDITIONALRENDERNVX)();
// typedef void  (APIENTRYP PENDFRAGMENTSHADERATI)();
// typedef void  (APIENTRYP PENDOCCLUSIONQUERYNV)();
// typedef void  (APIENTRYP PENDPERFMONITORAMD)(GLuint  monitor);
// typedef void  (APIENTRYP PENDPERFQUERYINTEL)(GLuint  queryHandle);
// typedef void  (APIENTRYP PENDQUERY)(GLenum  target);
// typedef void  (APIENTRYP PENDQUERYARB)(GLenum  target);
// typedef void  (APIENTRYP PENDQUERYINDEXED)(GLenum  target, GLuint  index);
// typedef void  (APIENTRYP PENDTRANSFORMFEEDBACK)();
// typedef void  (APIENTRYP PENDTRANSFORMFEEDBACKEXT)();
// typedef void  (APIENTRYP PENDTRANSFORMFEEDBACKNV)();
// typedef void  (APIENTRYP PENDVERTEXSHADEREXT)();
// typedef void  (APIENTRYP PENDVIDEOCAPTURENV)(GLuint  video_capture_slot);
// typedef void  (APIENTRYP PEVALCOORD1XOES)(GLfixed  u);
// typedef void  (APIENTRYP PEVALCOORD1XVOES)(const GLfixed * coords);
// typedef void  (APIENTRYP PEVALCOORD2XOES)(GLfixed  u, GLfixed  v);
// typedef void  (APIENTRYP PEVALCOORD2XVOES)(const GLfixed * coords);
// typedef void  (APIENTRYP PEVALMAPSNV)(GLenum  target, GLenum  mode);
// typedef void  (APIENTRYP PEXECUTEPROGRAMNV)(GLenum  target, GLuint  id, const GLfloat * params);
// typedef void  (APIENTRYP PEXTRACTCOMPONENTEXT)(GLuint  res, GLuint  src, GLuint  num);
// typedef void  (APIENTRYP PFEEDBACKBUFFERXOES)(GLsizei  n, GLenum  type, const GLfixed * buffer);
// typedef GLsync  (APIENTRYP PFENCESYNC)(GLenum  condition, GLbitfield  flags);
// typedef void  (APIENTRYP PFINALCOMBINERINPUTNV)(GLenum  variable, GLenum  input, GLenum  mapping, GLenum  componentUsage);
// typedef void  (APIENTRYP PFINISH)();
// typedef GLint  (APIENTRYP PFINISHASYNCSGIX)(GLuint * markerp);
// typedef void  (APIENTRYP PFINISHFENCEAPPLE)(GLuint  fence);
// typedef void  (APIENTRYP PFINISHFENCENV)(GLuint  fence);
// typedef void  (APIENTRYP PFINISHOBJECTAPPLE)(GLenum  object, GLint  name);
// typedef void  (APIENTRYP PFINISHTEXTURESUNX)();
// typedef void  (APIENTRYP PFLUSH)();
// typedef void  (APIENTRYP PFLUSHMAPPEDBUFFERRANGE)(GLenum  target, GLintptr  offset, GLsizeiptr  length);
// typedef void  (APIENTRYP PFLUSHMAPPEDBUFFERRANGEAPPLE)(GLenum  target, GLintptr  offset, GLsizeiptr  size);
// typedef void  (APIENTRYP PFLUSHMAPPEDNAMEDBUFFERRANGEEXT)(GLuint  buffer, GLintptr  offset, GLsizeiptr  length);
// typedef void  (APIENTRYP PFLUSHPIXELDATARANGENV)(GLenum  target);
// typedef void  (APIENTRYP PFLUSHRASTERSGIX)();
// typedef void  (APIENTRYP PFLUSHSTATICDATAIBM)(GLenum  target);
// typedef void  (APIENTRYP PFLUSHVERTEXARRAYRANGEAPPLE)(GLsizei  length, void * pointer);
// typedef void  (APIENTRYP PFLUSHVERTEXARRAYRANGENV)();
// typedef void  (APIENTRYP PFOGCOORDFORMATNV)(GLenum  type, GLsizei  stride);
// typedef void  (APIENTRYP PFOGCOORDPOINTEREXT)(GLenum  type, GLsizei  stride, const void * pointer);
// typedef void  (APIENTRYP PFOGCOORDPOINTERLISTIBM)(GLenum  type, GLint  stride, const void ** pointer, GLint  ptrstride);
// typedef void  (APIENTRYP PFOGCOORDDEXT)(GLdouble  coord);
// typedef void  (APIENTRYP PFOGCOORDDVEXT)(const GLdouble * coord);
// typedef void  (APIENTRYP PFOGCOORDFEXT)(GLfloat  coord);
// typedef void  (APIENTRYP PFOGCOORDFVEXT)(const GLfloat * coord);
// typedef void  (APIENTRYP PFOGCOORDHNV)(GLhalfNV  fog);
// typedef void  (APIENTRYP PFOGCOORDHVNV)(const GLhalfNV * fog);
// typedef void  (APIENTRYP PFOGFUNCSGIS)(GLsizei  n, const GLfloat * points);
// typedef void  (APIENTRYP PFOGXOES)(GLenum  pname, GLfixed  param);
// typedef void  (APIENTRYP PFOGXVOES)(GLenum  pname, const GLfixed * param);
// typedef void  (APIENTRYP PFRAGMENTCOLORMATERIALSGIX)(GLenum  face, GLenum  mode);
// typedef void  (APIENTRYP PFRAGMENTLIGHTMODELFSGIX)(GLenum  pname, GLfloat  param);
// typedef void  (APIENTRYP PFRAGMENTLIGHTMODELFVSGIX)(GLenum  pname, const GLfloat * params);
// typedef void  (APIENTRYP PFRAGMENTLIGHTMODELISGIX)(GLenum  pname, GLint  param);
// typedef void  (APIENTRYP PFRAGMENTLIGHTMODELIVSGIX)(GLenum  pname, const GLint * params);
// typedef void  (APIENTRYP PFRAGMENTLIGHTFSGIX)(GLenum  light, GLenum  pname, GLfloat  param);
// typedef void  (APIENTRYP PFRAGMENTLIGHTFVSGIX)(GLenum  light, GLenum  pname, const GLfloat * params);
// typedef void  (APIENTRYP PFRAGMENTLIGHTISGIX)(GLenum  light, GLenum  pname, GLint  param);
// typedef void  (APIENTRYP PFRAGMENTLIGHTIVSGIX)(GLenum  light, GLenum  pname, const GLint * params);
// typedef void  (APIENTRYP PFRAGMENTMATERIALFSGIX)(GLenum  face, GLenum  pname, GLfloat  param);
// typedef void  (APIENTRYP PFRAGMENTMATERIALFVSGIX)(GLenum  face, GLenum  pname, const GLfloat * params);
// typedef void  (APIENTRYP PFRAGMENTMATERIALISGIX)(GLenum  face, GLenum  pname, GLint  param);
// typedef void  (APIENTRYP PFRAGMENTMATERIALIVSGIX)(GLenum  face, GLenum  pname, const GLint * params);
// typedef void  (APIENTRYP PFRAMETERMINATORGREMEDY)();
// typedef void  (APIENTRYP PFRAMEZOOMSGIX)(GLint  factor);
// typedef void  (APIENTRYP PFRAMEBUFFERDRAWBUFFEREXT)(GLuint  framebuffer, GLenum  mode);
// typedef void  (APIENTRYP PFRAMEBUFFERDRAWBUFFERSEXT)(GLuint  framebuffer, GLsizei  n, const GLenum * bufs);
// typedef void  (APIENTRYP PFRAMEBUFFERPARAMETERI)(GLenum  target, GLenum  pname, GLint  param);
// typedef void  (APIENTRYP PFRAMEBUFFERREADBUFFEREXT)(GLuint  framebuffer, GLenum  mode);
// typedef void  (APIENTRYP PFRAMEBUFFERRENDERBUFFER)(GLenum  target, GLenum  attachment, GLenum  renderbuffertarget, GLuint  renderbuffer);
// typedef void  (APIENTRYP PFRAMEBUFFERRENDERBUFFEREXT)(GLenum  target, GLenum  attachment, GLenum  renderbuffertarget, GLuint  renderbuffer);
// typedef void  (APIENTRYP PFRAMEBUFFERTEXTURE)(GLenum  target, GLenum  attachment, GLuint  texture, GLint  level);
// typedef void  (APIENTRYP PFRAMEBUFFERTEXTURE1D)(GLenum  target, GLenum  attachment, GLenum  textarget, GLuint  texture, GLint  level);
// typedef void  (APIENTRYP PFRAMEBUFFERTEXTURE1DEXT)(GLenum  target, GLenum  attachment, GLenum  textarget, GLuint  texture, GLint  level);
// typedef void  (APIENTRYP PFRAMEBUFFERTEXTURE2D)(GLenum  target, GLenum  attachment, GLenum  textarget, GLuint  texture, GLint  level);
// typedef void  (APIENTRYP PFRAMEBUFFERTEXTURE2DEXT)(GLenum  target, GLenum  attachment, GLenum  textarget, GLuint  texture, GLint  level);
// typedef void  (APIENTRYP PFRAMEBUFFERTEXTURE3D)(GLenum  target, GLenum  attachment, GLenum  textarget, GLuint  texture, GLint  level, GLint  zoffset);
// typedef void  (APIENTRYP PFRAMEBUFFERTEXTURE3DEXT)(GLenum  target, GLenum  attachment, GLenum  textarget, GLuint  texture, GLint  level, GLint  zoffset);
// typedef void  (APIENTRYP PFRAMEBUFFERTEXTUREARB)(GLenum  target, GLenum  attachment, GLuint  texture, GLint  level);
// typedef void  (APIENTRYP PFRAMEBUFFERTEXTUREEXT)(GLenum  target, GLenum  attachment, GLuint  texture, GLint  level);
// typedef void  (APIENTRYP PFRAMEBUFFERTEXTUREFACEARB)(GLenum  target, GLenum  attachment, GLuint  texture, GLint  level, GLenum  face);
// typedef void  (APIENTRYP PFRAMEBUFFERTEXTUREFACEEXT)(GLenum  target, GLenum  attachment, GLuint  texture, GLint  level, GLenum  face);
// typedef void  (APIENTRYP PFRAMEBUFFERTEXTURELAYER)(GLenum  target, GLenum  attachment, GLuint  texture, GLint  level, GLint  layer);
// typedef void  (APIENTRYP PFRAMEBUFFERTEXTURELAYERARB)(GLenum  target, GLenum  attachment, GLuint  texture, GLint  level, GLint  layer);
// typedef void  (APIENTRYP PFRAMEBUFFERTEXTURELAYEREXT)(GLenum  target, GLenum  attachment, GLuint  texture, GLint  level, GLint  layer);
// typedef void  (APIENTRYP PFREEOBJECTBUFFERATI)(GLuint  buffer);
// typedef void  (APIENTRYP PFRONTFACE)(GLenum  mode);
// typedef void  (APIENTRYP PFRUSTUMFOES)(GLfloat  l, GLfloat  r, GLfloat  b, GLfloat  t, GLfloat  n, GLfloat  f);
// typedef void  (APIENTRYP PFRUSTUMXOES)(GLfixed  l, GLfixed  r, GLfixed  b, GLfixed  t, GLfixed  n, GLfixed  f);
// typedef GLuint  (APIENTRYP PGENASYNCMARKERSSGIX)(GLsizei  range);
// typedef void  (APIENTRYP PGENBUFFERS)(GLsizei  n, GLuint * buffers);
// typedef void  (APIENTRYP PGENBUFFERSARB)(GLsizei  n, GLuint * buffers);
// typedef void  (APIENTRYP PGENFENCESAPPLE)(GLsizei  n, GLuint * fences);
// typedef void  (APIENTRYP PGENFENCESNV)(GLsizei  n, GLuint * fences);
// typedef GLuint  (APIENTRYP PGENFRAGMENTSHADERSATI)(GLuint  range);
// typedef void  (APIENTRYP PGENFRAMEBUFFERS)(GLsizei  n, GLuint * framebuffers);
// typedef void  (APIENTRYP PGENFRAMEBUFFERSEXT)(GLsizei  n, GLuint * framebuffers);
// typedef void  (APIENTRYP PGENNAMESAMD)(GLenum  identifier, GLuint  num, GLuint * names);
// typedef void  (APIENTRYP PGENOCCLUSIONQUERIESNV)(GLsizei  n, GLuint * ids);
// typedef GLuint  (APIENTRYP PGENPATHSNV)(GLsizei  range);
// typedef void  (APIENTRYP PGENPERFMONITORSAMD)(GLsizei  n, GLuint * monitors);
// typedef void  (APIENTRYP PGENPROGRAMPIPELINES)(GLsizei  n, GLuint * pipelines);
// typedef void  (APIENTRYP PGENPROGRAMPIPELINESEXT)(GLsizei  n, GLuint * pipelines);
// typedef void  (APIENTRYP PGENPROGRAMSARB)(GLsizei  n, GLuint * programs);
// typedef void  (APIENTRYP PGENPROGRAMSNV)(GLsizei  n, GLuint * programs);
// typedef void  (APIENTRYP PGENQUERIES)(GLsizei  n, GLuint * ids);
// typedef void  (APIENTRYP PGENQUERIESARB)(GLsizei  n, GLuint * ids);
// typedef void  (APIENTRYP PGENRENDERBUFFERS)(GLsizei  n, GLuint * renderbuffers);
// typedef void  (APIENTRYP PGENRENDERBUFFERSEXT)(GLsizei  n, GLuint * renderbuffers);
// typedef void  (APIENTRYP PGENSAMPLERS)(GLsizei  count, GLuint * samplers);
// typedef GLuint  (APIENTRYP PGENSYMBOLSEXT)(GLenum  datatype, GLenum  storagetype, GLenum  range, GLuint  components);
// typedef void  (APIENTRYP PGENTEXTURES)(GLsizei  n, GLuint * textures);
// typedef void  (APIENTRYP PGENTEXTURESEXT)(GLsizei  n, GLuint * textures);
// typedef void  (APIENTRYP PGENTRANSFORMFEEDBACKS)(GLsizei  n, GLuint * ids);
// typedef void  (APIENTRYP PGENTRANSFORMFEEDBACKSNV)(GLsizei  n, GLuint * ids);
// typedef void  (APIENTRYP PGENVERTEXARRAYS)(GLsizei  n, GLuint * arrays);
// typedef void  (APIENTRYP PGENVERTEXARRAYSAPPLE)(GLsizei  n, GLuint * arrays);
// typedef GLuint  (APIENTRYP PGENVERTEXSHADERSEXT)(GLuint  range);
// typedef void  (APIENTRYP PGENERATEMIPMAP)(GLenum  target);
// typedef void  (APIENTRYP PGENERATEMIPMAPEXT)(GLenum  target);
// typedef void  (APIENTRYP PGENERATEMULTITEXMIPMAPEXT)(GLenum  texunit, GLenum  target);
// typedef void  (APIENTRYP PGENERATETEXTUREMIPMAPEXT)(GLuint  texture, GLenum  target);
// typedef void  (APIENTRYP PGETACTIVEATOMICCOUNTERBUFFERIV)(GLuint  program, GLuint  bufferIndex, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP PGETACTIVEATTRIB)(GLuint  program, GLuint  index, GLsizei  bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name);
// typedef void  (APIENTRYP PGETACTIVEATTRIBARB)(GLhandleARB  programObj, GLuint  index, GLsizei  maxLength, GLsizei * length, GLint * size, GLenum * type, GLcharARB * name);
// typedef void  (APIENTRYP PGETACTIVESUBROUTINENAME)(GLuint  program, GLenum  shadertype, GLuint  index, GLsizei  bufsize, GLsizei * length, GLchar * name);
// typedef void  (APIENTRYP PGETACTIVESUBROUTINEUNIFORMNAME)(GLuint  program, GLenum  shadertype, GLuint  index, GLsizei  bufsize, GLsizei * length, GLchar * name);
// typedef void  (APIENTRYP PGETACTIVESUBROUTINEUNIFORMIV)(GLuint  program, GLenum  shadertype, GLuint  index, GLenum  pname, GLint * values);
// typedef void  (APIENTRYP PGETACTIVEUNIFORM)(GLuint  program, GLuint  index, GLsizei  bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name);
// typedef void  (APIENTRYP PGETACTIVEUNIFORMARB)(GLhandleARB  programObj, GLuint  index, GLsizei  maxLength, GLsizei * length, GLint * size, GLenum * type, GLcharARB * name);
// typedef void  (APIENTRYP PGETACTIVEUNIFORMBLOCKNAME)(GLuint  program, GLuint  uniformBlockIndex, GLsizei  bufSize, GLsizei * length, GLchar * uniformBlockName);
// typedef void  (APIENTRYP PGETACTIVEUNIFORMBLOCKIV)(GLuint  program, GLuint  uniformBlockIndex, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP PGETACTIVEUNIFORMNAME)(GLuint  program, GLuint  uniformIndex, GLsizei  bufSize, GLsizei * length, GLchar * uniformName);
// typedef void  (APIENTRYP PGETACTIVEUNIFORMSIV)(GLuint  program, GLsizei  uniformCount, const GLuint * uniformIndices, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP PGETACTIVEVARYINGNV)(GLuint  program, GLuint  index, GLsizei  bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name);
// typedef void  (APIENTRYP PGETARRAYOBJECTFVATI)(GLenum  array, GLenum  pname, GLfloat * params);
// typedef void  (APIENTRYP PGETARRAYOBJECTIVATI)(GLenum  array, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP PGETATTACHEDOBJECTSARB)(GLhandleARB  containerObj, GLsizei  maxCount, GLsizei * count, GLhandleARB * obj);
// typedef void  (APIENTRYP PGETATTACHEDSHADERS)(GLuint  program, GLsizei  maxCount, GLsizei * count, GLuint * shaders);
// typedef GLint  (APIENTRYP PGETATTRIBLOCATION)(GLuint  program, const GLchar * name);
// typedef GLint  (APIENTRYP PGETATTRIBLOCATIONARB)(GLhandleARB  programObj, const GLcharARB * name);
// typedef void  (APIENTRYP PGETBOOLEANINDEXEDVEXT)(GLenum  target, GLuint  index, GLboolean * data);
// typedef void  (APIENTRYP PGETBOOLEANI_V)(GLenum  target, GLuint  index, GLboolean * data);
// typedef void  (APIENTRYP PGETBOOLEANV)(GLenum  pname, GLboolean * data);
// typedef void  (APIENTRYP PGETBUFFERPARAMETERI64V)(GLenum  target, GLenum  pname, GLint64 * params);
// typedef void  (APIENTRYP PGETBUFFERPARAMETERIV)(GLenum  target, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP PGETBUFFERPARAMETERIVARB)(GLenum  target, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP PGETBUFFERPARAMETERUI64VNV)(GLenum  target, GLenum  pname, GLuint64EXT * params);
// typedef void  (APIENTRYP PGETBUFFERPOINTERV)(GLenum  target, GLenum  pname, void ** params);
// typedef void  (APIENTRYP PGETBUFFERPOINTERVARB)(GLenum  target, GLenum  pname, void ** params);
// typedef void  (APIENTRYP PGETBUFFERSUBDATA)(GLenum  target, GLintptr  offset, GLsizeiptr  size, void * data);
// typedef void  (APIENTRYP PGETBUFFERSUBDATAARB)(GLenum  target, GLintptrARB  offset, GLsizeiptrARB  size, void * data);
// typedef void  (APIENTRYP PGETCLIPPLANEFOES)(GLenum  plane, GLfloat * equation);
// typedef void  (APIENTRYP PGETCLIPPLANEXOES)(GLenum  plane, GLfixed * equation);
// typedef void  (APIENTRYP PGETCOLORTABLEEXT)(GLenum  target, GLenum  format, GLenum  type, void * data);
// typedef void  (APIENTRYP PGETCOLORTABLEPARAMETERFVEXT)(GLenum  target, GLenum  pname, GLfloat * params);
// typedef void  (APIENTRYP PGETCOLORTABLEPARAMETERFVSGI)(GLenum  target, GLenum  pname, GLfloat * params);
// typedef void  (APIENTRYP PGETCOLORTABLEPARAMETERIVEXT)(GLenum  target, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP PGETCOLORTABLEPARAMETERIVSGI)(GLenum  target, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP PGETCOLORTABLESGI)(GLenum  target, GLenum  format, GLenum  type, void * table);
// typedef void  (APIENTRYP PGETCOMBINERINPUTPARAMETERFVNV)(GLenum  stage, GLenum  portion, GLenum  variable, GLenum  pname, GLfloat * params);
// typedef void  (APIENTRYP PGETCOMBINERINPUTPARAMETERIVNV)(GLenum  stage, GLenum  portion, GLenum  variable, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP PGETCOMBINEROUTPUTPARAMETERFVNV)(GLenum  stage, GLenum  portion, GLenum  pname, GLfloat * params);
// typedef void  (APIENTRYP PGETCOMBINEROUTPUTPARAMETERIVNV)(GLenum  stage, GLenum  portion, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP PGETCOMBINERSTAGEPARAMETERFVNV)(GLenum  stage, GLenum  pname, GLfloat * params);
// typedef void  (APIENTRYP PGETCOMPRESSEDMULTITEXIMAGEEXT)(GLenum  texunit, GLenum  target, GLint  lod, void * img);
// typedef void  (APIENTRYP PGETCOMPRESSEDTEXIMAGE)(GLenum  target, GLint  level, void * img);
// typedef void  (APIENTRYP PGETCOMPRESSEDTEXIMAGEARB)(GLenum  target, GLint  level, void * img);
// typedef void  (APIENTRYP PGETCOMPRESSEDTEXTUREIMAGEEXT)(GLuint  texture, GLenum  target, GLint  lod, void * img);
// typedef void  (APIENTRYP PGETCONVOLUTIONFILTEREXT)(GLenum  target, GLenum  format, GLenum  type, void * image);
// typedef void  (APIENTRYP PGETCONVOLUTIONPARAMETERFVEXT)(GLenum  target, GLenum  pname, GLfloat * params);
// typedef void  (APIENTRYP PGETCONVOLUTIONPARAMETERIVEXT)(GLenum  target, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP PGETCONVOLUTIONPARAMETERXVOES)(GLenum  target, GLenum  pname, GLfixed * params);
// typedef GLuint  (APIENTRYP PGETDEBUGMESSAGELOG)(GLuint  count, GLsizei  bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog);
// typedef GLuint  (APIENTRYP PGETDEBUGMESSAGELOGAMD)(GLuint  count, GLsizei  bufsize, GLenum * categories, GLuint * severities, GLuint * ids, GLsizei * lengths, GLchar * message);
// typedef GLuint  (APIENTRYP PGETDEBUGMESSAGELOGARB)(GLuint  count, GLsizei  bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog);
// typedef GLuint  (APIENTRYP PGETDEBUGMESSAGELOGKHR)(GLuint  count, GLsizei  bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog);
// typedef void  (APIENTRYP PGETDETAILTEXFUNCSGIS)(GLenum  target, GLfloat * points);
// typedef void  (APIENTRYP PGETDOUBLEINDEXEDVEXT)(GLenum  target, GLuint  index, GLdouble * data);
// typedef void  (APIENTRYP PGETDOUBLEI_V)(GLenum  target, GLuint  index, GLdouble * data);
// typedef void  (APIENTRYP PGETDOUBLEI_VEXT)(GLenum  pname, GLuint  index, GLdouble * params);
// typedef void  (APIENTRYP PGETDOUBLEV)(GLenum  pname, GLdouble * data);
// typedef GLenum  (APIENTRYP PGETERROR)();
// typedef void  (APIENTRYP PGETFENCEIVNV)(GLuint  fence, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP PGETFINALCOMBINERINPUTPARAMETERFVNV)(GLenum  variable, GLenum  pname, GLfloat * params);
// typedef void  (APIENTRYP PGETFINALCOMBINERINPUTPARAMETERIVNV)(GLenum  variable, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP PGETFIRSTPERFQUERYIDINTEL)(GLuint * queryId);
// typedef void  (APIENTRYP PGETFIXEDVOES)(GLenum  pname, GLfixed * params);
// typedef void  (APIENTRYP PGETFLOATINDEXEDVEXT)(GLenum  target, GLuint  index, GLfloat * data);
// typedef void  (APIENTRYP PGETFLOATI_V)(GLenum  target, GLuint  index, GLfloat * data);
// typedef void  (APIENTRYP PGETFLOATI_VEXT)(GLenum  pname, GLuint  index, GLfloat * params);
// typedef void  (APIENTRYP PGETFLOATV)(GLenum  pname, GLfloat * data);
// typedef void  (APIENTRYP PGETFOGFUNCSGIS)(GLfloat * points);
// typedef GLint  (APIENTRYP PGETFRAGDATAINDEX)(GLuint  program, const GLchar * name);
// typedef GLint  (APIENTRYP PGETFRAGDATALOCATION)(GLuint  program, const GLchar * name);
// typedef GLint  (APIENTRYP PGETFRAGDATALOCATIONEXT)(GLuint  program, const GLchar * name);
// typedef void  (APIENTRYP PGETFRAGMENTLIGHTFVSGIX)(GLenum  light, GLenum  pname, GLfloat * params);
// typedef void  (APIENTRYP PGETFRAGMENTLIGHTIVSGIX)(GLenum  light, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP PGETFRAGMENTMATERIALFVSGIX)(GLenum  face, GLenum  pname, GLfloat * params);
// typedef void  (APIENTRYP PGETFRAGMENTMATERIALIVSGIX)(GLenum  face, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP PGETFRAMEBUFFERATTACHMENTPARAMETERIV)(GLenum  target, GLenum  attachment, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP PGETFRAMEBUFFERATTACHMENTPARAMETERIVEXT)(GLenum  target, GLenum  attachment, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP PGETFRAMEBUFFERPARAMETERIV)(GLenum  target, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP PGETFRAMEBUFFERPARAMETERIVEXT)(GLuint  framebuffer, GLenum  pname, GLint * params);
// typedef GLenum  (APIENTRYP PGETGRAPHICSRESETSTATUSARB)();
// typedef GLhandleARB  (APIENTRYP PGETHANDLEARB)(GLenum  pname);
// typedef void  (APIENTRYP PGETHISTOGRAMEXT)(GLenum  target, GLboolean  reset, GLenum  format, GLenum  type, void * values);
// typedef void  (APIENTRYP PGETHISTOGRAMPARAMETERFVEXT)(GLenum  target, GLenum  pname, GLfloat * params);
// typedef void  (APIENTRYP PGETHISTOGRAMPARAMETERIVEXT)(GLenum  target, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP PGETHISTOGRAMPARAMETERXVOES)(GLenum  target, GLenum  pname, GLfixed * params);
// typedef GLuint64  (APIENTRYP PGETIMAGEHANDLEARB)(GLuint  texture, GLint  level, GLboolean  layered, GLint  layer, GLenum  format);
// typedef GLuint64  (APIENTRYP PGETIMAGEHANDLENV)(GLuint  texture, GLint  level, GLboolean  layered, GLint  layer, GLenum  format);
// typedef void  (APIENTRYP PGETIMAGETRANSFORMPARAMETERFVHP)(GLenum  target, GLenum  pname, GLfloat * params);
// typedef void  (APIENTRYP PGETIMAGETRANSFORMPARAMETERIVHP)(GLenum  target, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP PGETINFOLOGARB)(GLhandleARB  obj, GLsizei  maxLength, GLsizei * length, GLcharARB * infoLog);
// typedef GLint  (APIENTRYP PGETINSTRUMENTSSGIX)();
// typedef void  (APIENTRYP PGETINTEGER64I_V)(GLenum  target, GLuint  index, GLint64 * data);
// typedef void  (APIENTRYP PGETINTEGER64V)(GLenum  pname, GLint64 * data);
// typedef void  (APIENTRYP PGETINTEGERINDEXEDVEXT)(GLenum  target, GLuint  index, GLint * data);
// typedef void  (APIENTRYP PGETINTEGERI_V)(GLenum  target, GLuint  index, GLint * data);
// typedef void  (APIENTRYP PGETINTEGERUI64I_VNV)(GLenum  value, GLuint  index, GLuint64EXT * result);
// typedef void  (APIENTRYP PGETINTEGERUI64VNV)(GLenum  value, GLuint64EXT * result);
// typedef void  (APIENTRYP PGETINTEGERV)(GLenum  pname, GLint * data);
// typedef void  (APIENTRYP PGETINTERNALFORMATI64V)(GLenum  target, GLenum  internalformat, GLenum  pname, GLsizei  bufSize, GLint64 * params);
// typedef void  (APIENTRYP PGETINTERNALFORMATIV)(GLenum  target, GLenum  internalformat, GLenum  pname, GLsizei  bufSize, GLint * params);
// typedef void  (APIENTRYP PGETINVARIANTBOOLEANVEXT)(GLuint  id, GLenum  value, GLboolean * data);
// typedef void  (APIENTRYP PGETINVARIANTFLOATVEXT)(GLuint  id, GLenum  value, GLfloat * data);
// typedef void  (APIENTRYP PGETINVARIANTINTEGERVEXT)(GLuint  id, GLenum  value, GLint * data);
// typedef void  (APIENTRYP PGETLIGHTXOES)(GLenum  light, GLenum  pname, GLfixed * params);
// typedef void  (APIENTRYP PGETLIGHTXVOES)(GLenum  light, GLenum  pname, GLfixed * params);
// typedef void  (APIENTRYP PGETLISTPARAMETERFVSGIX)(GLuint  list, GLenum  pname, GLfloat * params);
// typedef void  (APIENTRYP PGETLISTPARAMETERIVSGIX)(GLuint  list, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP PGETLOCALCONSTANTBOOLEANVEXT)(GLuint  id, GLenum  value, GLboolean * data);
// typedef void  (APIENTRYP PGETLOCALCONSTANTFLOATVEXT)(GLuint  id, GLenum  value, GLfloat * data);
// typedef void  (APIENTRYP PGETLOCALCONSTANTINTEGERVEXT)(GLuint  id, GLenum  value, GLint * data);
// typedef void  (APIENTRYP PGETMAPATTRIBPARAMETERFVNV)(GLenum  target, GLuint  index, GLenum  pname, GLfloat * params);
// typedef void  (APIENTRYP PGETMAPATTRIBPARAMETERIVNV)(GLenum  target, GLuint  index, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP PGETMAPCONTROLPOINTSNV)(GLenum  target, GLuint  index, GLenum  type, GLsizei  ustride, GLsizei  vstride, GLboolean  packed, void * points);
// typedef void  (APIENTRYP PGETMAPPARAMETERFVNV)(GLenum  target, GLenum  pname, GLfloat * params);
// typedef void  (APIENTRYP PGETMAPPARAMETERIVNV)(GLenum  target, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP PGETMAPXVOES)(GLenum  target, GLenum  query, GLfixed * v);
// typedef void  (APIENTRYP PGETMATERIALXOES)(GLenum  face, GLenum  pname, GLfixed  param);
// typedef void  (APIENTRYP PGETMATERIALXVOES)(GLenum  face, GLenum  pname, GLfixed * params);
// typedef void  (APIENTRYP PGETMINMAXEXT)(GLenum  target, GLboolean  reset, GLenum  format, GLenum  type, void * values);
// typedef void  (APIENTRYP PGETMINMAXPARAMETERFVEXT)(GLenum  target, GLenum  pname, GLfloat * params);
// typedef void  (APIENTRYP PGETMINMAXPARAMETERIVEXT)(GLenum  target, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP PGETMULTITEXENVFVEXT)(GLenum  texunit, GLenum  target, GLenum  pname, GLfloat * params);
// typedef void  (APIENTRYP PGETMULTITEXENVIVEXT)(GLenum  texunit, GLenum  target, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP PGETMULTITEXGENDVEXT)(GLenum  texunit, GLenum  coord, GLenum  pname, GLdouble * params);
// typedef void  (APIENTRYP PGETMULTITEXGENFVEXT)(GLenum  texunit, GLenum  coord, GLenum  pname, GLfloat * params);
// typedef void  (APIENTRYP PGETMULTITEXGENIVEXT)(GLenum  texunit, GLenum  coord, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP PGETMULTITEXIMAGEEXT)(GLenum  texunit, GLenum  target, GLint  level, GLenum  format, GLenum  type, void * pixels);
// typedef void  (APIENTRYP PGETMULTITEXLEVELPARAMETERFVEXT)(GLenum  texunit, GLenum  target, GLint  level, GLenum  pname, GLfloat * params);
// typedef void  (APIENTRYP PGETMULTITEXLEVELPARAMETERIVEXT)(GLenum  texunit, GLenum  target, GLint  level, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP PGETMULTITEXPARAMETERIIVEXT)(GLenum  texunit, GLenum  target, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP PGETMULTITEXPARAMETERIUIVEXT)(GLenum  texunit, GLenum  target, GLenum  pname, GLuint * params);
// typedef void  (APIENTRYP PGETMULTITEXPARAMETERFVEXT)(GLenum  texunit, GLenum  target, GLenum  pname, GLfloat * params);
// typedef void  (APIENTRYP PGETMULTITEXPARAMETERIVEXT)(GLenum  texunit, GLenum  target, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP PGETMULTISAMPLEFV)(GLenum  pname, GLuint  index, GLfloat * val);
// typedef void  (APIENTRYP PGETMULTISAMPLEFVNV)(GLenum  pname, GLuint  index, GLfloat * val);
// typedef void  (APIENTRYP PGETNAMEDBUFFERPARAMETERIVEXT)(GLuint  buffer, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP PGETNAMEDBUFFERPARAMETERUI64VNV)(GLuint  buffer, GLenum  pname, GLuint64EXT * params);
// typedef void  (APIENTRYP PGETNAMEDBUFFERPOINTERVEXT)(GLuint  buffer, GLenum  pname, void ** params);
// typedef void  (APIENTRYP PGETNAMEDBUFFERSUBDATAEXT)(GLuint  buffer, GLintptr  offset, GLsizeiptr  size, void * data);
// typedef void  (APIENTRYP PGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXT)(GLuint  framebuffer, GLenum  attachment, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP PGETNAMEDFRAMEBUFFERPARAMETERIVEXT)(GLuint  framebuffer, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP PGETNAMEDPROGRAMLOCALPARAMETERIIVEXT)(GLuint  program, GLenum  target, GLuint  index, GLint * params);
// typedef void  (APIENTRYP PGETNAMEDPROGRAMLOCALPARAMETERIUIVEXT)(GLuint  program, GLenum  target, GLuint  index, GLuint * params);
// typedef void  (APIENTRYP PGETNAMEDPROGRAMLOCALPARAMETERDVEXT)(GLuint  program, GLenum  target, GLuint  index, GLdouble * params);
// typedef void  (APIENTRYP PGETNAMEDPROGRAMLOCALPARAMETERFVEXT)(GLuint  program, GLenum  target, GLuint  index, GLfloat * params);
// typedef void  (APIENTRYP PGETNAMEDPROGRAMSTRINGEXT)(GLuint  program, GLenum  target, GLenum  pname, void * string);
// typedef void  (APIENTRYP PGETNAMEDPROGRAMIVEXT)(GLuint  program, GLenum  target, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP PGETNAMEDRENDERBUFFERPARAMETERIVEXT)(GLuint  renderbuffer, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP PGETNAMEDSTRINGARB)(GLint  namelen, const GLchar * name, GLsizei  bufSize, GLint * stringlen, GLchar * string);
// typedef void  (APIENTRYP PGETNAMEDSTRINGIVARB)(GLint  namelen, const GLchar * name, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP PGETNEXTPERFQUERYIDINTEL)(GLuint  queryId, GLuint * nextQueryId);
// typedef void  (APIENTRYP PGETOBJECTBUFFERFVATI)(GLuint  buffer, GLenum  pname, GLfloat * params);
// typedef void  (APIENTRYP PGETOBJECTBUFFERIVATI)(GLuint  buffer, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP PGETOBJECTLABEL)(GLenum  identifier, GLuint  name, GLsizei  bufSize, GLsizei * length, GLchar * label);
// typedef void  (APIENTRYP PGETOBJECTLABELEXT)(GLenum  type, GLuint  object, GLsizei  bufSize, GLsizei * length, GLchar * label);
// typedef void  (APIENTRYP PGETOBJECTLABELKHR)(GLenum  identifier, GLuint  name, GLsizei  bufSize, GLsizei * length, GLchar * label);
// typedef void  (APIENTRYP PGETOBJECTPARAMETERFVARB)(GLhandleARB  obj, GLenum  pname, GLfloat * params);
// typedef void  (APIENTRYP PGETOBJECTPARAMETERIVAPPLE)(GLenum  objectType, GLuint  name, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP PGETOBJECTPARAMETERIVARB)(GLhandleARB  obj, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP PGETOBJECTPTRLABEL)(const void * ptr, GLsizei  bufSize, GLsizei * length, GLchar * label);
// typedef void  (APIENTRYP PGETOBJECTPTRLABELKHR)(const void * ptr, GLsizei  bufSize, GLsizei * length, GLchar * label);
// typedef void  (APIENTRYP PGETOCCLUSIONQUERYIVNV)(GLuint  id, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP PGETOCCLUSIONQUERYUIVNV)(GLuint  id, GLenum  pname, GLuint * params);
// typedef void  (APIENTRYP PGETPATHCOLORGENFVNV)(GLenum  color, GLenum  pname, GLfloat * value);
// typedef void  (APIENTRYP PGETPATHCOLORGENIVNV)(GLenum  color, GLenum  pname, GLint * value);
// typedef void  (APIENTRYP PGETPATHCOMMANDSNV)(GLuint  path, GLubyte * commands);
// typedef void  (APIENTRYP PGETPATHCOORDSNV)(GLuint  path, GLfloat * coords);
// typedef void  (APIENTRYP PGETPATHDASHARRAYNV)(GLuint  path, GLfloat * dashArray);
// typedef GLfloat  (APIENTRYP PGETPATHLENGTHNV)(GLuint  path, GLsizei  startSegment, GLsizei  numSegments);
// typedef void  (APIENTRYP PGETPATHMETRICRANGENV)(GLbitfield  metricQueryMask, GLuint  firstPathName, GLsizei  numPaths, GLsizei  stride, GLfloat * metrics);
// typedef void  (APIENTRYP PGETPATHMETRICSNV)(GLbitfield  metricQueryMask, GLsizei  numPaths, GLenum  pathNameType, const void * paths, GLuint  pathBase, GLsizei  stride, GLfloat * metrics);
// typedef void  (APIENTRYP PGETPATHPARAMETERFVNV)(GLuint  path, GLenum  pname, GLfloat * value);
// typedef void  (APIENTRYP PGETPATHPARAMETERIVNV)(GLuint  path, GLenum  pname, GLint * value);
// typedef void  (APIENTRYP PGETPATHSPACINGNV)(GLenum  pathListMode, GLsizei  numPaths, GLenum  pathNameType, const void * paths, GLuint  pathBase, GLfloat  advanceScale, GLfloat  kerningScale, GLenum  transformType, GLfloat * returnedSpacing);
// typedef void  (APIENTRYP PGETPATHTEXGENFVNV)(GLenum  texCoordSet, GLenum  pname, GLfloat * value);
// typedef void  (APIENTRYP PGETPATHTEXGENIVNV)(GLenum  texCoordSet, GLenum  pname, GLint * value);
// typedef void  (APIENTRYP PGETPERFCOUNTERINFOINTEL)(GLuint  queryId, GLuint  counterId, GLuint  counterNameLength, GLchar * counterName, GLuint  counterDescLength, GLchar * counterDesc, GLuint * counterOffset, GLuint * counterDataSize, GLuint * counterTypeEnum, GLuint * counterDataTypeEnum, GLuint64 * rawCounterMaxValue);
// typedef void  (APIENTRYP PGETPERFMONITORCOUNTERDATAAMD)(GLuint  monitor, GLenum  pname, GLsizei  dataSize, GLuint * data, GLint * bytesWritten);
// typedef void  (APIENTRYP PGETPERFMONITORCOUNTERINFOAMD)(GLuint  group, GLuint  counter, GLenum  pname, void * data);
// typedef void  (APIENTRYP PGETPERFMONITORCOUNTERSTRINGAMD)(GLuint  group, GLuint  counter, GLsizei  bufSize, GLsizei * length, GLchar * counterString);
// typedef void  (APIENTRYP PGETPERFMONITORCOUNTERSAMD)(GLuint  group, GLint * numCounters, GLint * maxActiveCounters, GLsizei  counterSize, GLuint * counters);
// typedef void  (APIENTRYP PGETPERFMONITORGROUPSTRINGAMD)(GLuint  group, GLsizei  bufSize, GLsizei * length, GLchar * groupString);
// typedef void  (APIENTRYP PGETPERFMONITORGROUPSAMD)(GLint * numGroups, GLsizei  groupsSize, GLuint * groups);
// typedef void  (APIENTRYP PGETPERFQUERYDATAINTEL)(GLuint  queryHandle, GLuint  flags, GLsizei  dataSize, GLvoid * data, GLuint * bytesWritten);
// typedef void  (APIENTRYP PGETPERFQUERYIDBYNAMEINTEL)(GLchar * queryName, GLuint * queryId);
// typedef void  (APIENTRYP PGETPERFQUERYINFOINTEL)(GLuint  queryId, GLuint  queryNameLength, GLchar * queryName, GLuint * dataSize, GLuint * noCounters, GLuint * noInstances, GLuint * capsMask);
// typedef void  (APIENTRYP PGETPIXELMAPXV)(GLenum  map, GLint  size, GLfixed * values);
// typedef void  (APIENTRYP PGETPIXELTEXGENPARAMETERFVSGIS)(GLenum  pname, GLfloat * params);
// typedef void  (APIENTRYP PGETPIXELTEXGENPARAMETERIVSGIS)(GLenum  pname, GLint * params);
// typedef void  (APIENTRYP PGETPIXELTRANSFORMPARAMETERFVEXT)(GLenum  target, GLenum  pname, GLfloat * params);
// typedef void  (APIENTRYP PGETPIXELTRANSFORMPARAMETERIVEXT)(GLenum  target, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP PGETPOINTERINDEXEDVEXT)(GLenum  target, GLuint  index, void ** data);
// typedef void  (APIENTRYP PGETPOINTERI_VEXT)(GLenum  pname, GLuint  index, void ** params);
// typedef void  (APIENTRYP PGETPOINTERV)(GLenum  pname, void ** params);
// typedef void  (APIENTRYP PGETPOINTERVEXT)(GLenum  pname, void ** params);
// typedef void  (APIENTRYP PGETPOINTERVKHR)(GLenum  pname, void ** params);
// typedef void  (APIENTRYP PGETPROGRAMBINARY)(GLuint  program, GLsizei  bufSize, GLsizei * length, GLenum * binaryFormat, void * binary);
// typedef void  (APIENTRYP PGETPROGRAMENVPARAMETERIIVNV)(GLenum  target, GLuint  index, GLint * params);
// typedef void  (APIENTRYP PGETPROGRAMENVPARAMETERIUIVNV)(GLenum  target, GLuint  index, GLuint * params);
// typedef void  (APIENTRYP PGETPROGRAMENVPARAMETERDVARB)(GLenum  target, GLuint  index, GLdouble * params);
// typedef void  (APIENTRYP PGETPROGRAMENVPARAMETERFVARB)(GLenum  target, GLuint  index, GLfloat * params);
// typedef void  (APIENTRYP PGETPROGRAMINFOLOG)(GLuint  program, GLsizei  bufSize, GLsizei * length, GLchar * infoLog);
// typedef void  (APIENTRYP PGETPROGRAMINTERFACEIV)(GLuint  program, GLenum  programInterface, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP PGETPROGRAMLOCALPARAMETERIIVNV)(GLenum  target, GLuint  index, GLint * params);
// typedef void  (APIENTRYP PGETPROGRAMLOCALPARAMETERIUIVNV)(GLenum  target, GLuint  index, GLuint * params);
// typedef void  (APIENTRYP PGETPROGRAMLOCALPARAMETERDVARB)(GLenum  target, GLuint  index, GLdouble * params);
// typedef void  (APIENTRYP PGETPROGRAMLOCALPARAMETERFVARB)(GLenum  target, GLuint  index, GLfloat * params);
// typedef void  (APIENTRYP PGETPROGRAMNAMEDPARAMETERDVNV)(GLuint  id, GLsizei  len, const GLubyte * name, GLdouble * params);
// typedef void  (APIENTRYP PGETPROGRAMNAMEDPARAMETERFVNV)(GLuint  id, GLsizei  len, const GLubyte * name, GLfloat * params);
// typedef void  (APIENTRYP PGETPROGRAMPARAMETERDVNV)(GLenum  target, GLuint  index, GLenum  pname, GLdouble * params);
// typedef void  (APIENTRYP PGETPROGRAMPARAMETERFVNV)(GLenum  target, GLuint  index, GLenum  pname, GLfloat * params);
// typedef void  (APIENTRYP PGETPROGRAMPIPELINEINFOLOG)(GLuint  pipeline, GLsizei  bufSize, GLsizei * length, GLchar * infoLog);
// typedef void  (APIENTRYP PGETPROGRAMPIPELINEINFOLOGEXT)(GLuint  pipeline, GLsizei  bufSize, GLsizei * length, GLchar * infoLog);
// typedef void  (APIENTRYP PGETPROGRAMPIPELINEIV)(GLuint  pipeline, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP PGETPROGRAMPIPELINEIVEXT)(GLuint  pipeline, GLenum  pname, GLint * params);
// typedef GLuint  (APIENTRYP PGETPROGRAMRESOURCEINDEX)(GLuint  program, GLenum  programInterface, const GLchar * name);
// typedef GLint  (APIENTRYP PGETPROGRAMRESOURCELOCATION)(GLuint  program, GLenum  programInterface, const GLchar * name);
// typedef GLint  (APIENTRYP PGETPROGRAMRESOURCELOCATIONINDEX)(GLuint  program, GLenum  programInterface, const GLchar * name);
// typedef void  (APIENTRYP PGETPROGRAMRESOURCENAME)(GLuint  program, GLenum  programInterface, GLuint  index, GLsizei  bufSize, GLsizei * length, GLchar * name);
// typedef void  (APIENTRYP PGETPROGRAMRESOURCEIV)(GLuint  program, GLenum  programInterface, GLuint  index, GLsizei  propCount, const GLenum * props, GLsizei  bufSize, GLsizei * length, GLint * params);
// typedef void  (APIENTRYP PGETPROGRAMSTAGEIV)(GLuint  program, GLenum  shadertype, GLenum  pname, GLint * values);
// typedef void  (APIENTRYP PGETPROGRAMSTRINGARB)(GLenum  target, GLenum  pname, void * string);
// typedef void  (APIENTRYP PGETPROGRAMSTRINGNV)(GLuint  id, GLenum  pname, GLubyte * program);
// typedef void  (APIENTRYP PGETPROGRAMSUBROUTINEPARAMETERUIVNV)(GLenum  target, GLuint  index, GLuint * param);
// typedef void  (APIENTRYP PGETPROGRAMIV)(GLuint  program, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP PGETPROGRAMIVARB)(GLenum  target, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP PGETPROGRAMIVNV)(GLuint  id, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP PGETQUERYINDEXEDIV)(GLenum  target, GLuint  index, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP PGETQUERYOBJECTI64V)(GLuint  id, GLenum  pname, GLint64 * params);
// typedef void  (APIENTRYP PGETQUERYOBJECTI64VEXT)(GLuint  id, GLenum  pname, GLint64 * params);
// typedef void  (APIENTRYP PGETQUERYOBJECTIV)(GLuint  id, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP PGETQUERYOBJECTIVARB)(GLuint  id, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP PGETQUERYOBJECTUI64V)(GLuint  id, GLenum  pname, GLuint64 * params);
// typedef void  (APIENTRYP PGETQUERYOBJECTUI64VEXT)(GLuint  id, GLenum  pname, GLuint64 * params);
// typedef void  (APIENTRYP PGETQUERYOBJECTUIV)(GLuint  id, GLenum  pname, GLuint * params);
// typedef void  (APIENTRYP PGETQUERYOBJECTUIVARB)(GLuint  id, GLenum  pname, GLuint * params);
// typedef void  (APIENTRYP PGETQUERYIV)(GLenum  target, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP PGETQUERYIVARB)(GLenum  target, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP PGETRENDERBUFFERPARAMETERIV)(GLenum  target, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP PGETRENDERBUFFERPARAMETERIVEXT)(GLenum  target, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP PGETSAMPLERPARAMETERIIV)(GLuint  sampler, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP PGETSAMPLERPARAMETERIUIV)(GLuint  sampler, GLenum  pname, GLuint * params);
// typedef void  (APIENTRYP PGETSAMPLERPARAMETERFV)(GLuint  sampler, GLenum  pname, GLfloat * params);
// typedef void  (APIENTRYP PGETSAMPLERPARAMETERIV)(GLuint  sampler, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP PGETSEPARABLEFILTEREXT)(GLenum  target, GLenum  format, GLenum  type, void * row, void * column, void * span);
// typedef void  (APIENTRYP PGETSHADERINFOLOG)(GLuint  shader, GLsizei  bufSize, GLsizei * length, GLchar * infoLog);
// typedef void  (APIENTRYP PGETSHADERPRECISIONFORMAT)(GLenum  shadertype, GLenum  precisiontype, GLint * range, GLint * precision);
// typedef void  (APIENTRYP PGETSHADERSOURCE)(GLuint  shader, GLsizei  bufSize, GLsizei * length, GLchar * source);
// typedef void  (APIENTRYP PGETSHADERSOURCEARB)(GLhandleARB  obj, GLsizei  maxLength, GLsizei * length, GLcharARB * source);
// typedef void  (APIENTRYP PGETSHADERIV)(GLuint  shader, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP PGETSHARPENTEXFUNCSGIS)(GLenum  target, GLfloat * points);
// typedef const GLubyte * (APIENTRYP PGETSTRING)(GLenum  name);
// typedef const GLubyte * (APIENTRYP PGETSTRINGI)(GLenum  name, GLuint  index);
// typedef GLuint  (APIENTRYP PGETSUBROUTINEINDEX)(GLuint  program, GLenum  shadertype, const GLchar * name);
// typedef GLint  (APIENTRYP PGETSUBROUTINEUNIFORMLOCATION)(GLuint  program, GLenum  shadertype, const GLchar * name);
// typedef void  (APIENTRYP PGETSYNCIV)(GLsync  sync, GLenum  pname, GLsizei  bufSize, GLsizei * length, GLint * values);
// typedef void  (APIENTRYP PGETTEXBUMPPARAMETERFVATI)(GLenum  pname, GLfloat * param);
// typedef void  (APIENTRYP PGETTEXBUMPPARAMETERIVATI)(GLenum  pname, GLint * param);
// typedef void  (APIENTRYP PGETTEXENVXVOES)(GLenum  target, GLenum  pname, GLfixed * params);
// typedef void  (APIENTRYP PGETTEXFILTERFUNCSGIS)(GLenum  target, GLenum  filter, GLfloat * weights);
// typedef void  (APIENTRYP PGETTEXGENXVOES)(GLenum  coord, GLenum  pname, GLfixed * params);
// typedef void  (APIENTRYP PGETTEXIMAGE)(GLenum  target, GLint  level, GLenum  format, GLenum  type, void * pixels);
// typedef void  (APIENTRYP PGETTEXLEVELPARAMETERFV)(GLenum  target, GLint  level, GLenum  pname, GLfloat * params);
// typedef void  (APIENTRYP PGETTEXLEVELPARAMETERIV)(GLenum  target, GLint  level, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP PGETTEXLEVELPARAMETERXVOES)(GLenum  target, GLint  level, GLenum  pname, GLfixed * params);
// typedef void  (APIENTRYP PGETTEXPARAMETERIIV)(GLenum  target, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP PGETTEXPARAMETERIIVEXT)(GLenum  target, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP PGETTEXPARAMETERIUIV)(GLenum  target, GLenum  pname, GLuint * params);
// typedef void  (APIENTRYP PGETTEXPARAMETERIUIVEXT)(GLenum  target, GLenum  pname, GLuint * params);
// typedef void  (APIENTRYP PGETTEXPARAMETERPOINTERVAPPLE)(GLenum  target, GLenum  pname, void ** params);
// typedef void  (APIENTRYP PGETTEXPARAMETERFV)(GLenum  target, GLenum  pname, GLfloat * params);
// typedef void  (APIENTRYP PGETTEXPARAMETERIV)(GLenum  target, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP PGETTEXPARAMETERXVOES)(GLenum  target, GLenum  pname, GLfixed * params);
// typedef GLuint64  (APIENTRYP PGETTEXTUREHANDLEARB)(GLuint  texture);
// typedef GLuint64  (APIENTRYP PGETTEXTUREHANDLENV)(GLuint  texture);
// typedef void  (APIENTRYP PGETTEXTUREIMAGEEXT)(GLuint  texture, GLenum  target, GLint  level, GLenum  format, GLenum  type, void * pixels);
// typedef void  (APIENTRYP PGETTEXTURELEVELPARAMETERFVEXT)(GLuint  texture, GLenum  target, GLint  level, GLenum  pname, GLfloat * params);
// typedef void  (APIENTRYP PGETTEXTURELEVELPARAMETERIVEXT)(GLuint  texture, GLenum  target, GLint  level, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP PGETTEXTUREPARAMETERIIVEXT)(GLuint  texture, GLenum  target, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP PGETTEXTUREPARAMETERIUIVEXT)(GLuint  texture, GLenum  target, GLenum  pname, GLuint * params);
// typedef void  (APIENTRYP PGETTEXTUREPARAMETERFVEXT)(GLuint  texture, GLenum  target, GLenum  pname, GLfloat * params);
// typedef void  (APIENTRYP PGETTEXTUREPARAMETERIVEXT)(GLuint  texture, GLenum  target, GLenum  pname, GLint * params);
// typedef GLuint64  (APIENTRYP PGETTEXTURESAMPLERHANDLEARB)(GLuint  texture, GLuint  sampler);
// typedef GLuint64  (APIENTRYP PGETTEXTURESAMPLERHANDLENV)(GLuint  texture, GLuint  sampler);
// typedef void  (APIENTRYP PGETTRACKMATRIXIVNV)(GLenum  target, GLuint  address, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP PGETTRANSFORMFEEDBACKVARYING)(GLuint  program, GLuint  index, GLsizei  bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name);
// typedef void  (APIENTRYP PGETTRANSFORMFEEDBACKVARYINGEXT)(GLuint  program, GLuint  index, GLsizei  bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name);
// typedef void  (APIENTRYP PGETTRANSFORMFEEDBACKVARYINGNV)(GLuint  program, GLuint  index, GLint * location);
// typedef GLuint  (APIENTRYP PGETUNIFORMBLOCKINDEX)(GLuint  program, const GLchar * uniformBlockName);
// typedef GLint  (APIENTRYP PGETUNIFORMBUFFERSIZEEXT)(GLuint  program, GLint  location);
// typedef void  (APIENTRYP PGETUNIFORMINDICES)(GLuint  program, GLsizei  uniformCount, const GLchar *const* uniformNames, GLuint * uniformIndices);
// typedef GLint  (APIENTRYP PGETUNIFORMLOCATION)(GLuint  program, const GLchar * name);
// typedef GLint  (APIENTRYP PGETUNIFORMLOCATIONARB)(GLhandleARB  programObj, const GLcharARB * name);
// typedef GLintptr  (APIENTRYP PGETUNIFORMOFFSETEXT)(GLuint  program, GLint  location);
// typedef void  (APIENTRYP PGETUNIFORMSUBROUTINEUIV)(GLenum  shadertype, GLint  location, GLuint * params);
// typedef void  (APIENTRYP PGETUNIFORMDV)(GLuint  program, GLint  location, GLdouble * params);
// typedef void  (APIENTRYP PGETUNIFORMFV)(GLuint  program, GLint  location, GLfloat * params);
// typedef void  (APIENTRYP PGETUNIFORMFVARB)(GLhandleARB  programObj, GLint  location, GLfloat * params);
// typedef void  (APIENTRYP PGETUNIFORMI64VNV)(GLuint  program, GLint  location, GLint64EXT * params);
// typedef void  (APIENTRYP PGETUNIFORMIV)(GLuint  program, GLint  location, GLint * params);
// typedef void  (APIENTRYP PGETUNIFORMIVARB)(GLhandleARB  programObj, GLint  location, GLint * params);
// typedef void  (APIENTRYP PGETUNIFORMUI64VNV)(GLuint  program, GLint  location, GLuint64EXT * params);
// typedef void  (APIENTRYP PGETUNIFORMUIV)(GLuint  program, GLint  location, GLuint * params);
// typedef void  (APIENTRYP PGETUNIFORMUIVEXT)(GLuint  program, GLint  location, GLuint * params);
// typedef void  (APIENTRYP PGETVARIANTARRAYOBJECTFVATI)(GLuint  id, GLenum  pname, GLfloat * params);
// typedef void  (APIENTRYP PGETVARIANTARRAYOBJECTIVATI)(GLuint  id, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP PGETVARIANTBOOLEANVEXT)(GLuint  id, GLenum  value, GLboolean * data);
// typedef void  (APIENTRYP PGETVARIANTFLOATVEXT)(GLuint  id, GLenum  value, GLfloat * data);
// typedef void  (APIENTRYP PGETVARIANTINTEGERVEXT)(GLuint  id, GLenum  value, GLint * data);
// typedef void  (APIENTRYP PGETVARIANTPOINTERVEXT)(GLuint  id, GLenum  value, void ** data);
// typedef GLint  (APIENTRYP PGETVARYINGLOCATIONNV)(GLuint  program, const GLchar * name);
// typedef void  (APIENTRYP PGETVERTEXARRAYINTEGERI_VEXT)(GLuint  vaobj, GLuint  index, GLenum  pname, GLint * param);
// typedef void  (APIENTRYP PGETVERTEXARRAYINTEGERVEXT)(GLuint  vaobj, GLenum  pname, GLint * param);
// typedef void  (APIENTRYP PGETVERTEXARRAYPOINTERI_VEXT)(GLuint  vaobj, GLuint  index, GLenum  pname, void ** param);
// typedef void  (APIENTRYP PGETVERTEXARRAYPOINTERVEXT)(GLuint  vaobj, GLenum  pname, void ** param);
// typedef void  (APIENTRYP PGETVERTEXATTRIBARRAYOBJECTFVATI)(GLuint  index, GLenum  pname, GLfloat * params);
// typedef void  (APIENTRYP PGETVERTEXATTRIBARRAYOBJECTIVATI)(GLuint  index, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP PGETVERTEXATTRIBIIV)(GLuint  index, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP PGETVERTEXATTRIBIIVEXT)(GLuint  index, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP PGETVERTEXATTRIBIUIV)(GLuint  index, GLenum  pname, GLuint * params);
// typedef void  (APIENTRYP PGETVERTEXATTRIBIUIVEXT)(GLuint  index, GLenum  pname, GLuint * params);
// typedef void  (APIENTRYP PGETVERTEXATTRIBLDV)(GLuint  index, GLenum  pname, GLdouble * params);
// typedef void  (APIENTRYP PGETVERTEXATTRIBLDVEXT)(GLuint  index, GLenum  pname, GLdouble * params);
// typedef void  (APIENTRYP PGETVERTEXATTRIBLI64VNV)(GLuint  index, GLenum  pname, GLint64EXT * params);
// typedef void  (APIENTRYP PGETVERTEXATTRIBLUI64VARB)(GLuint  index, GLenum  pname, GLuint64EXT * params);
// typedef void  (APIENTRYP PGETVERTEXATTRIBLUI64VNV)(GLuint  index, GLenum  pname, GLuint64EXT * params);
// typedef void  (APIENTRYP PGETVERTEXATTRIBPOINTERV)(GLuint  index, GLenum  pname, void ** pointer);
// typedef void  (APIENTRYP PGETVERTEXATTRIBPOINTERVARB)(GLuint  index, GLenum  pname, void ** pointer);
// typedef void  (APIENTRYP PGETVERTEXATTRIBPOINTERVNV)(GLuint  index, GLenum  pname, void ** pointer);
// typedef void  (APIENTRYP PGETVERTEXATTRIBDV)(GLuint  index, GLenum  pname, GLdouble * params);
// typedef void  (APIENTRYP PGETVERTEXATTRIBDVARB)(GLuint  index, GLenum  pname, GLdouble * params);
// typedef void  (APIENTRYP PGETVERTEXATTRIBDVNV)(GLuint  index, GLenum  pname, GLdouble * params);
// typedef void  (APIENTRYP PGETVERTEXATTRIBFV)(GLuint  index, GLenum  pname, GLfloat * params);
// typedef void  (APIENTRYP PGETVERTEXATTRIBFVARB)(GLuint  index, GLenum  pname, GLfloat * params);
// typedef void  (APIENTRYP PGETVERTEXATTRIBFVNV)(GLuint  index, GLenum  pname, GLfloat * params);
// typedef void  (APIENTRYP PGETVERTEXATTRIBIV)(GLuint  index, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP PGETVERTEXATTRIBIVARB)(GLuint  index, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP PGETVERTEXATTRIBIVNV)(GLuint  index, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP PGETVIDEOCAPTURESTREAMDVNV)(GLuint  video_capture_slot, GLuint  stream, GLenum  pname, GLdouble * params);
// typedef void  (APIENTRYP PGETVIDEOCAPTURESTREAMFVNV)(GLuint  video_capture_slot, GLuint  stream, GLenum  pname, GLfloat * params);
// typedef void  (APIENTRYP PGETVIDEOCAPTURESTREAMIVNV)(GLuint  video_capture_slot, GLuint  stream, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP PGETVIDEOCAPTUREIVNV)(GLuint  video_capture_slot, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP PGETVIDEOI64VNV)(GLuint  video_slot, GLenum  pname, GLint64EXT * params);
// typedef void  (APIENTRYP PGETVIDEOIVNV)(GLuint  video_slot, GLenum  pname, GLint * params);
// typedef void  (APIENTRYP PGETVIDEOUI64VNV)(GLuint  video_slot, GLenum  pname, GLuint64EXT * params);
// typedef void  (APIENTRYP PGETVIDEOUIVNV)(GLuint  video_slot, GLenum  pname, GLuint * params);
// typedef void  (APIENTRYP PGETNCOMPRESSEDTEXIMAGEARB)(GLenum  target, GLint  lod, GLsizei  bufSize, void * img);
// typedef void  (APIENTRYP PGETNTEXIMAGEARB)(GLenum  target, GLint  level, GLenum  format, GLenum  type, GLsizei  bufSize, void * img);
// typedef void  (APIENTRYP PGETNUNIFORMDVARB)(GLuint  program, GLint  location, GLsizei  bufSize, GLdouble * params);
// typedef void  (APIENTRYP PGETNUNIFORMFVARB)(GLuint  program, GLint  location, GLsizei  bufSize, GLfloat * params);
// typedef void  (APIENTRYP PGETNUNIFORMIVARB)(GLuint  program, GLint  location, GLsizei  bufSize, GLint * params);
// typedef void  (APIENTRYP PGETNUNIFORMUIVARB)(GLuint  program, GLint  location, GLsizei  bufSize, GLuint * params);
// typedef void  (APIENTRYP PGLOBALALPHAFACTORBSUN)(GLbyte  factor);
// typedef void  (APIENTRYP PGLOBALALPHAFACTORDSUN)(GLdouble  factor);
// typedef void  (APIENTRYP PGLOBALALPHAFACTORFSUN)(GLfloat  factor);
// typedef void  (APIENTRYP PGLOBALALPHAFACTORISUN)(GLint  factor);
// typedef void  (APIENTRYP PGLOBALALPHAFACTORSSUN)(GLshort  factor);
// typedef void  (APIENTRYP PGLOBALALPHAFACTORUBSUN)(GLubyte  factor);
// typedef void  (APIENTRYP PGLOBALALPHAFACTORUISUN)(GLuint  factor);
// typedef void  (APIENTRYP PGLOBALALPHAFACTORUSSUN)(GLushort  factor);
// typedef void  (APIENTRYP PHINT)(GLenum  target, GLenum  mode);
// typedef void  (APIENTRYP PHINTPGI)(GLenum  target, GLint  mode);
// typedef void  (APIENTRYP PHISTOGRAMEXT)(GLenum  target, GLsizei  width, GLenum  internalformat, GLboolean  sink);
// typedef void  (APIENTRYP PIGLOOINTERFACESGIX)(GLenum  pname, const void * params);
// typedef void  (APIENTRYP PIMAGETRANSFORMPARAMETERFHP)(GLenum  target, GLenum  pname, GLfloat  param);
// typedef void  (APIENTRYP PIMAGETRANSFORMPARAMETERFVHP)(GLenum  target, GLenum  pname, const GLfloat * params);
// typedef void  (APIENTRYP PIMAGETRANSFORMPARAMETERIHP)(GLenum  target, GLenum  pname, GLint  param);
// typedef void  (APIENTRYP PIMAGETRANSFORMPARAMETERIVHP)(GLenum  target, GLenum  pname, const GLint * params);
// typedef GLsync  (APIENTRYP PIMPORTSYNCEXT)(GLenum  external_sync_type, GLintptr  external_sync, GLbitfield  flags);
// typedef void  (APIENTRYP PINDEXFORMATNV)(GLenum  type, GLsizei  stride);
// typedef void  (APIENTRYP PINDEXFUNCEXT)(GLenum  func, GLclampf  ref);
// typedef void  (APIENTRYP PINDEXMATERIALEXT)(GLenum  face, GLenum  mode);
// typedef void  (APIENTRYP PINDEXPOINTEREXT)(GLenum  type, GLsizei  stride, GLsizei  count, const void * pointer);
// typedef void  (APIENTRYP PINDEXPOINTERLISTIBM)(GLenum  type, GLint  stride, const void ** pointer, GLint  ptrstride);
// typedef void  (APIENTRYP PINDEXXOES)(GLfixed  component);
// typedef void  (APIENTRYP PINDEXXVOES)(const GLfixed * component);
// typedef void  (APIENTRYP PINSERTCOMPONENTEXT)(GLuint  res, GLuint  src, GLuint  num);
// typedef void  (APIENTRYP PINSERTEVENTMARKEREXT)(GLsizei  length, const GLchar * marker);
// typedef void  (APIENTRYP PINSTRUMENTSBUFFERSGIX)(GLsizei  size, GLint * buffer);
// typedef void  (APIENTRYP PINTERPOLATEPATHSNV)(GLuint  resultPath, GLuint  pathA, GLuint  pathB, GLfloat  weight);
// typedef void  (APIENTRYP PINVALIDATEBUFFERDATA)(GLuint  buffer);
// typedef void  (APIENTRYP PINVALIDATEBUFFERSUBDATA)(GLuint  buffer, GLintptr  offset, GLsizeiptr  length);
// typedef void  (APIENTRYP PINVALIDATEFRAMEBUFFER)(GLenum  target, GLsizei  numAttachments, const GLenum * attachments);
// typedef void  (APIENTRYP PINVALIDATESUBFRAMEBUFFER)(GLenum  target, GLsizei  numAttachments, const GLenum * attachments, GLint  x, GLint  y, GLsizei  width, GLsizei  height);
// typedef void  (APIENTRYP PINVALIDATETEXIMAGE)(GLuint  texture, GLint  level);
// typedef void  (APIENTRYP PINVALIDATETEXSUBIMAGE)(GLuint  texture, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLsizei  width, GLsizei  height, GLsizei  depth);
// typedef GLboolean  (APIENTRYP PISASYNCMARKERSGIX)(GLuint  marker);
// typedef GLboolean  (APIENTRYP PISBUFFER)(GLuint  buffer);
// typedef GLboolean  (APIENTRYP PISBUFFERARB)(GLuint  buffer);
// typedef GLboolean  (APIENTRYP PISBUFFERRESIDENTNV)(GLenum  target);
// typedef GLboolean  (APIENTRYP PISENABLED)(GLenum  cap);
// typedef GLboolean  (APIENTRYP PISENABLEDINDEXEDEXT)(GLenum  target, GLuint  index);
// typedef GLboolean  (APIENTRYP PISENABLEDI)(GLenum  target, GLuint  index);
// typedef GLboolean  (APIENTRYP PISFENCEAPPLE)(GLuint  fence);
// typedef GLboolean  (APIENTRYP PISFENCENV)(GLuint  fence);
// typedef GLboolean  (APIENTRYP PISFRAMEBUFFER)(GLuint  framebuffer);
// typedef GLboolean  (APIENTRYP PISFRAMEBUFFEREXT)(GLuint  framebuffer);
// typedef GLboolean  (APIENTRYP PISIMAGEHANDLERESIDENTARB)(GLuint64  handle);
// typedef GLboolean  (APIENTRYP PISIMAGEHANDLERESIDENTNV)(GLuint64  handle);
// typedef GLboolean  (APIENTRYP PISNAMEAMD)(GLenum  identifier, GLuint  name);
// typedef GLboolean  (APIENTRYP PISNAMEDBUFFERRESIDENTNV)(GLuint  buffer);
// typedef GLboolean  (APIENTRYP PISNAMEDSTRINGARB)(GLint  namelen, const GLchar * name);
// typedef GLboolean  (APIENTRYP PISOBJECTBUFFERATI)(GLuint  buffer);
// typedef GLboolean  (APIENTRYP PISOCCLUSIONQUERYNV)(GLuint  id);
// typedef GLboolean  (APIENTRYP PISPATHNV)(GLuint  path);
// typedef GLboolean  (APIENTRYP PISPOINTINFILLPATHNV)(GLuint  path, GLuint  mask, GLfloat  x, GLfloat  y);
// typedef GLboolean  (APIENTRYP PISPOINTINSTROKEPATHNV)(GLuint  path, GLfloat  x, GLfloat  y);
// typedef GLboolean  (APIENTRYP PISPROGRAM)(GLuint  program);
// typedef GLboolean  (APIENTRYP PISPROGRAMARB)(GLuint  program);
// typedef GLboolean  (APIENTRYP PISPROGRAMNV)(GLuint  id);
// typedef GLboolean  (APIENTRYP PISPROGRAMPIPELINE)(GLuint  pipeline);
// typedef GLboolean  (APIENTRYP PISPROGRAMPIPELINEEXT)(GLuint  pipeline);
// typedef GLboolean  (APIENTRYP PISQUERY)(GLuint  id);
// typedef GLboolean  (APIENTRYP PISQUERYARB)(GLuint  id);
// typedef GLboolean  (APIENTRYP PISRENDERBUFFER)(GLuint  renderbuffer);
// typedef GLboolean  (APIENTRYP PISRENDERBUFFEREXT)(GLuint  renderbuffer);
// typedef GLboolean  (APIENTRYP PISSAMPLER)(GLuint  sampler);
// typedef GLboolean  (APIENTRYP PISSHADER)(GLuint  shader);
// typedef GLboolean  (APIENTRYP PISSYNC)(GLsync  sync);
// typedef GLboolean  (APIENTRYP PISTEXTURE)(GLuint  texture);
// typedef GLboolean  (APIENTRYP PISTEXTUREEXT)(GLuint  texture);
// typedef GLboolean  (APIENTRYP PISTEXTUREHANDLERESIDENTARB)(GLuint64  handle);
// typedef GLboolean  (APIENTRYP PISTEXTUREHANDLERESIDENTNV)(GLuint64  handle);
// typedef GLboolean  (APIENTRYP PISTRANSFORMFEEDBACK)(GLuint  id);
// typedef GLboolean  (APIENTRYP PISTRANSFORMFEEDBACKNV)(GLuint  id);
// typedef GLboolean  (APIENTRYP PISVARIANTENABLEDEXT)(GLuint  id, GLenum  cap);
// typedef GLboolean  (APIENTRYP PISVERTEXARRAY)(GLuint  array);
// typedef GLboolean  (APIENTRYP PISVERTEXARRAYAPPLE)(GLuint  array);
// typedef GLboolean  (APIENTRYP PISVERTEXATTRIBENABLEDAPPLE)(GLuint  index, GLenum  pname);
// typedef void  (APIENTRYP PLABELOBJECTEXT)(GLenum  type, GLuint  object, GLsizei  length, const GLchar * label);
// typedef void  (APIENTRYP PLIGHTENVISGIX)(GLenum  pname, GLint  param);
// typedef void  (APIENTRYP PLIGHTMODELXOES)(GLenum  pname, GLfixed  param);
// typedef void  (APIENTRYP PLIGHTMODELXVOES)(GLenum  pname, const GLfixed * param);
// typedef void  (APIENTRYP PLIGHTXOES)(GLenum  light, GLenum  pname, GLfixed  param);
// typedef void  (APIENTRYP PLIGHTXVOES)(GLenum  light, GLenum  pname, const GLfixed * params);
// typedef void  (APIENTRYP PLINEWIDTH)(GLfloat  width);
// typedef void  (APIENTRYP PLINEWIDTHXOES)(GLfixed  width);
// typedef void  (APIENTRYP PLINKPROGRAM)(GLuint  program);
// typedef void  (APIENTRYP PLINKPROGRAMARB)(GLhandleARB  programObj);
// typedef void  (APIENTRYP PLISTPARAMETERFSGIX)(GLuint  list, GLenum  pname, GLfloat  param);
// typedef void  (APIENTRYP PLISTPARAMETERFVSGIX)(GLuint  list, GLenum  pname, const GLfloat * params);
// typedef void  (APIENTRYP PLISTPARAMETERISGIX)(GLuint  list, GLenum  pname, GLint  param);
// typedef void  (APIENTRYP PLISTPARAMETERIVSGIX)(GLuint  list, GLenum  pname, const GLint * params);
// typedef void  (APIENTRYP PLOADIDENTITYDEFORMATIONMAPSGIX)(GLbitfield  mask);
// typedef void  (APIENTRYP PLOADMATRIXXOES)(const GLfixed * m);
// typedef void  (APIENTRYP PLOADPROGRAMNV)(GLenum  target, GLuint  id, GLsizei  len, const GLubyte * program);
// typedef void  (APIENTRYP PLOADTRANSPOSEMATRIXDARB)(const GLdouble * m);
// typedef void  (APIENTRYP PLOADTRANSPOSEMATRIXFARB)(const GLfloat * m);
// typedef void  (APIENTRYP PLOADTRANSPOSEMATRIXXOES)(const GLfixed * m);
// typedef void  (APIENTRYP PLOCKARRAYSEXT)(GLint  first, GLsizei  count);
// typedef void  (APIENTRYP PLOGICOP)(GLenum  opcode);
// typedef void  (APIENTRYP PMAKEBUFFERNONRESIDENTNV)(GLenum  target);
// typedef void  (APIENTRYP PMAKEBUFFERRESIDENTNV)(GLenum  target, GLenum  access);
// typedef void  (APIENTRYP PMAKEIMAGEHANDLENONRESIDENTARB)(GLuint64  handle);
// typedef void  (APIENTRYP PMAKEIMAGEHANDLENONRESIDENTNV)(GLuint64  handle);
// typedef void  (APIENTRYP PMAKEIMAGEHANDLERESIDENTARB)(GLuint64  handle, GLenum  access);
// typedef void  (APIENTRYP PMAKEIMAGEHANDLERESIDENTNV)(GLuint64  handle, GLenum  access);
// typedef void  (APIENTRYP PMAKENAMEDBUFFERNONRESIDENTNV)(GLuint  buffer);
// typedef void  (APIENTRYP PMAKENAMEDBUFFERRESIDENTNV)(GLuint  buffer, GLenum  access);
// typedef void  (APIENTRYP PMAKETEXTUREHANDLENONRESIDENTARB)(GLuint64  handle);
// typedef void  (APIENTRYP PMAKETEXTUREHANDLENONRESIDENTNV)(GLuint64  handle);
// typedef void  (APIENTRYP PMAKETEXTUREHANDLERESIDENTARB)(GLuint64  handle);
// typedef void  (APIENTRYP PMAKETEXTUREHANDLERESIDENTNV)(GLuint64  handle);
// typedef void  (APIENTRYP PMAP1XOES)(GLenum  target, GLfixed  u1, GLfixed  u2, GLint  stride, GLint  order, GLfixed  points);
// typedef void  (APIENTRYP PMAP2XOES)(GLenum  target, GLfixed  u1, GLfixed  u2, GLint  ustride, GLint  uorder, GLfixed  v1, GLfixed  v2, GLint  vstride, GLint  vorder, GLfixed  points);
// typedef void * (APIENTRYP PMAPBUFFER)(GLenum  target, GLenum  access);
// typedef void * (APIENTRYP PMAPBUFFERARB)(GLenum  target, GLenum  access);
// typedef void * (APIENTRYP PMAPBUFFERRANGE)(GLenum  target, GLintptr  offset, GLsizeiptr  length, GLbitfield  access);
// typedef void  (APIENTRYP PMAPCONTROLPOINTSNV)(GLenum  target, GLuint  index, GLenum  type, GLsizei  ustride, GLsizei  vstride, GLint  uorder, GLint  vorder, GLboolean  packed, const void * points);
// typedef void  (APIENTRYP PMAPGRID1XOES)(GLint  n, GLfixed  u1, GLfixed  u2);
// typedef void  (APIENTRYP PMAPGRID2XOES)(GLint  n, GLfixed  u1, GLfixed  u2, GLfixed  v1, GLfixed  v2);
// typedef void * (APIENTRYP PMAPNAMEDBUFFEREXT)(GLuint  buffer, GLenum  access);
// typedef void * (APIENTRYP PMAPNAMEDBUFFERRANGEEXT)(GLuint  buffer, GLintptr  offset, GLsizeiptr  length, GLbitfield  access);
// typedef void * (APIENTRYP PMAPOBJECTBUFFERATI)(GLuint  buffer);
// typedef void  (APIENTRYP PMAPPARAMETERFVNV)(GLenum  target, GLenum  pname, const GLfloat * params);
// typedef void  (APIENTRYP PMAPPARAMETERIVNV)(GLenum  target, GLenum  pname, const GLint * params);
// typedef void * (APIENTRYP PMAPTEXTURE2DINTEL)(GLuint  texture, GLint  level, GLbitfield  access, GLint * stride, GLenum * layout);
// typedef void  (APIENTRYP PMAPVERTEXATTRIB1DAPPLE)(GLuint  index, GLuint  size, GLdouble  u1, GLdouble  u2, GLint  stride, GLint  order, const GLdouble * points);
// typedef void  (APIENTRYP PMAPVERTEXATTRIB1FAPPLE)(GLuint  index, GLuint  size, GLfloat  u1, GLfloat  u2, GLint  stride, GLint  order, const GLfloat * points);
// typedef void  (APIENTRYP PMAPVERTEXATTRIB2DAPPLE)(GLuint  index, GLuint  size, GLdouble  u1, GLdouble  u2, GLint  ustride, GLint  uorder, GLdouble  v1, GLdouble  v2, GLint  vstride, GLint  vorder, const GLdouble * points);
// typedef void  (APIENTRYP PMAPVERTEXATTRIB2FAPPLE)(GLuint  index, GLuint  size, GLfloat  u1, GLfloat  u2, GLint  ustride, GLint  uorder, GLfloat  v1, GLfloat  v2, GLint  vstride, GLint  vorder, const GLfloat * points);
// typedef void  (APIENTRYP PMATERIALXOES)(GLenum  face, GLenum  pname, GLfixed  param);
// typedef void  (APIENTRYP PMATERIALXVOES)(GLenum  face, GLenum  pname, const GLfixed * param);
// typedef void  (APIENTRYP PMATRIXFRUSTUMEXT)(GLenum  mode, GLdouble  left, GLdouble  right, GLdouble  bottom, GLdouble  top, GLdouble  zNear, GLdouble  zFar);
// typedef void  (APIENTRYP PMATRIXINDEXPOINTERARB)(GLint  size, GLenum  type, GLsizei  stride, const void * pointer);
// typedef void  (APIENTRYP PMATRIXINDEXUBVARB)(GLint  size, const GLubyte * indices);
// typedef void  (APIENTRYP PMATRIXINDEXUIVARB)(GLint  size, const GLuint * indices);
// typedef void  (APIENTRYP PMATRIXINDEXUSVARB)(GLint  size, const GLushort * indices);
// typedef void  (APIENTRYP PMATRIXLOADIDENTITYEXT)(GLenum  mode);
// typedef void  (APIENTRYP PMATRIXLOADTRANSPOSEDEXT)(GLenum  mode, const GLdouble * m);
// typedef void  (APIENTRYP PMATRIXLOADTRANSPOSEFEXT)(GLenum  mode, const GLfloat * m);
// typedef void  (APIENTRYP PMATRIXLOADDEXT)(GLenum  mode, const GLdouble * m);
// typedef void  (APIENTRYP PMATRIXLOADFEXT)(GLenum  mode, const GLfloat * m);
// typedef void  (APIENTRYP PMATRIXMULTTRANSPOSEDEXT)(GLenum  mode, const GLdouble * m);
// typedef void  (APIENTRYP PMATRIXMULTTRANSPOSEFEXT)(GLenum  mode, const GLfloat * m);
// typedef void  (APIENTRYP PMATRIXMULTDEXT)(GLenum  mode, const GLdouble * m);
// typedef void  (APIENTRYP PMATRIXMULTFEXT)(GLenum  mode, const GLfloat * m);
// typedef void  (APIENTRYP PMATRIXORTHOEXT)(GLenum  mode, GLdouble  left, GLdouble  right, GLdouble  bottom, GLdouble  top, GLdouble  zNear, GLdouble  zFar);
// typedef void  (APIENTRYP PMATRIXPOPEXT)(GLenum  mode);
// typedef void  (APIENTRYP PMATRIXPUSHEXT)(GLenum  mode);
// typedef void  (APIENTRYP PMATRIXROTATEDEXT)(GLenum  mode, GLdouble  angle, GLdouble  x, GLdouble  y, GLdouble  z);
// typedef void  (APIENTRYP PMATRIXROTATEFEXT)(GLenum  mode, GLfloat  angle, GLfloat  x, GLfloat  y, GLfloat  z);
// typedef void  (APIENTRYP PMATRIXSCALEDEXT)(GLenum  mode, GLdouble  x, GLdouble  y, GLdouble  z);
// typedef void  (APIENTRYP PMATRIXSCALEFEXT)(GLenum  mode, GLfloat  x, GLfloat  y, GLfloat  z);
// typedef void  (APIENTRYP PMATRIXTRANSLATEDEXT)(GLenum  mode, GLdouble  x, GLdouble  y, GLdouble  z);
// typedef void  (APIENTRYP PMATRIXTRANSLATEFEXT)(GLenum  mode, GLfloat  x, GLfloat  y, GLfloat  z);
// typedef void  (APIENTRYP PMEMORYBARRIER)(GLbitfield  barriers);
// typedef void  (APIENTRYP PMEMORYBARRIEREXT)(GLbitfield  barriers);
// typedef void  (APIENTRYP PMINSAMPLESHADING)(GLfloat  value);
// typedef void  (APIENTRYP PMINSAMPLESHADINGARB)(GLfloat  value);
// typedef void  (APIENTRYP PMINMAXEXT)(GLenum  target, GLenum  internalformat, GLboolean  sink);
// typedef void  (APIENTRYP PMULTMATRIXXOES)(const GLfixed * m);
// typedef void  (APIENTRYP PMULTTRANSPOSEMATRIXDARB)(const GLdouble * m);
// typedef void  (APIENTRYP PMULTTRANSPOSEMATRIXFARB)(const GLfloat * m);
// typedef void  (APIENTRYP PMULTTRANSPOSEMATRIXXOES)(const GLfixed * m);
// typedef void  (APIENTRYP PMULTIDRAWARRAYS)(GLenum  mode, const GLint * first, const GLsizei * count, GLsizei  drawcount);
// typedef void  (APIENTRYP PMULTIDRAWARRAYSEXT)(GLenum  mode, const GLint * first, const GLsizei * count, GLsizei  primcount);
// typedef void  (APIENTRYP PMULTIDRAWARRAYSINDIRECT)(GLenum  mode, const void * indirect, GLsizei  drawcount, GLsizei  stride);
// typedef void  (APIENTRYP PMULTIDRAWARRAYSINDIRECTAMD)(GLenum  mode, const void * indirect, GLsizei  primcount, GLsizei  stride);
// typedef void  (APIENTRYP PMULTIDRAWARRAYSINDIRECTBINDLESSNV)(GLenum  mode, const void * indirect, GLsizei  drawCount, GLsizei  stride, GLint  vertexBufferCount);
// typedef void  (APIENTRYP PMULTIDRAWARRAYSINDIRECTCOUNTARB)(GLenum  mode, GLintptr  indirect, GLintptr  drawcount, GLsizei  maxdrawcount, GLsizei  stride);
// typedef void  (APIENTRYP PMULTIDRAWELEMENTARRAYAPPLE)(GLenum  mode, const GLint * first, const GLsizei * count, GLsizei  primcount);
// typedef void  (APIENTRYP PMULTIDRAWELEMENTS)(GLenum  mode, const GLsizei * count, GLenum  type, const void *const* indices, GLsizei  drawcount);
// typedef void  (APIENTRYP PMULTIDRAWELEMENTSBASEVERTEX)(GLenum  mode, const GLsizei * count, GLenum  type, const void *const* indices, GLsizei  drawcount, const GLint * basevertex);
// typedef void  (APIENTRYP PMULTIDRAWELEMENTSEXT)(GLenum  mode, const GLsizei * count, GLenum  type, const void *const* indices, GLsizei  primcount);
// typedef void  (APIENTRYP PMULTIDRAWELEMENTSINDIRECT)(GLenum  mode, GLenum  type, const void * indirect, GLsizei  drawcount, GLsizei  stride);
// typedef void  (APIENTRYP PMULTIDRAWELEMENTSINDIRECTAMD)(GLenum  mode, GLenum  type, const void * indirect, GLsizei  primcount, GLsizei  stride);
// typedef void  (APIENTRYP PMULTIDRAWELEMENTSINDIRECTBINDLESSNV)(GLenum  mode, GLenum  type, const void * indirect, GLsizei  drawCount, GLsizei  stride, GLint  vertexBufferCount);
// typedef void  (APIENTRYP PMULTIDRAWELEMENTSINDIRECTCOUNTARB)(GLenum  mode, GLenum  type, GLintptr  indirect, GLintptr  drawcount, GLsizei  maxdrawcount, GLsizei  stride);
// typedef void  (APIENTRYP PMULTIDRAWRANGEELEMENTARRAYAPPLE)(GLenum  mode, GLuint  start, GLuint  end, const GLint * first, const GLsizei * count, GLsizei  primcount);
// typedef void  (APIENTRYP PMULTIMODEDRAWARRAYSIBM)(const GLenum * mode, const GLint * first, const GLsizei * count, GLsizei  primcount, GLint  modestride);
// typedef void  (APIENTRYP PMULTIMODEDRAWELEMENTSIBM)(const GLenum * mode, const GLsizei * count, GLenum  type, const void *const* indices, GLsizei  primcount, GLint  modestride);
// typedef void  (APIENTRYP PMULTITEXBUFFEREXT)(GLenum  texunit, GLenum  target, GLenum  internalformat, GLuint  buffer);
// typedef void  (APIENTRYP PMULTITEXCOORD1BOES)(GLenum  texture, GLbyte  s);
// typedef void  (APIENTRYP PMULTITEXCOORD1BVOES)(GLenum  texture, const GLbyte * coords);
// typedef void  (APIENTRYP PMULTITEXCOORD1DARB)(GLenum  target, GLdouble  s);
// typedef void  (APIENTRYP PMULTITEXCOORD1DVARB)(GLenum  target, const GLdouble * v);
// typedef void  (APIENTRYP PMULTITEXCOORD1FARB)(GLenum  target, GLfloat  s);
// typedef void  (APIENTRYP PMULTITEXCOORD1FVARB)(GLenum  target, const GLfloat * v);
// typedef void  (APIENTRYP PMULTITEXCOORD1HNV)(GLenum  target, GLhalfNV  s);
// typedef void  (APIENTRYP PMULTITEXCOORD1HVNV)(GLenum  target, const GLhalfNV * v);
// typedef void  (APIENTRYP PMULTITEXCOORD1IARB)(GLenum  target, GLint  s);
// typedef void  (APIENTRYP PMULTITEXCOORD1IVARB)(GLenum  target, const GLint * v);
// typedef void  (APIENTRYP PMULTITEXCOORD1SARB)(GLenum  target, GLshort  s);
// typedef void  (APIENTRYP PMULTITEXCOORD1SVARB)(GLenum  target, const GLshort * v);
// typedef void  (APIENTRYP PMULTITEXCOORD1XOES)(GLenum  texture, GLfixed  s);
// typedef void  (APIENTRYP PMULTITEXCOORD1XVOES)(GLenum  texture, const GLfixed * coords);
// typedef void  (APIENTRYP PMULTITEXCOORD2BOES)(GLenum  texture, GLbyte  s, GLbyte  t);
// typedef void  (APIENTRYP PMULTITEXCOORD2BVOES)(GLenum  texture, const GLbyte * coords);
// typedef void  (APIENTRYP PMULTITEXCOORD2DARB)(GLenum  target, GLdouble  s, GLdouble  t);
// typedef void  (APIENTRYP PMULTITEXCOORD2DVARB)(GLenum  target, const GLdouble * v);
// typedef void  (APIENTRYP PMULTITEXCOORD2FARB)(GLenum  target, GLfloat  s, GLfloat  t);
// typedef void  (APIENTRYP PMULTITEXCOORD2FVARB)(GLenum  target, const GLfloat * v);
// typedef void  (APIENTRYP PMULTITEXCOORD2HNV)(GLenum  target, GLhalfNV  s, GLhalfNV  t);
// typedef void  (APIENTRYP PMULTITEXCOORD2HVNV)(GLenum  target, const GLhalfNV * v);
// typedef void  (APIENTRYP PMULTITEXCOORD2IARB)(GLenum  target, GLint  s, GLint  t);
// typedef void  (APIENTRYP PMULTITEXCOORD2IVARB)(GLenum  target, const GLint * v);
// typedef void  (APIENTRYP PMULTITEXCOORD2SARB)(GLenum  target, GLshort  s, GLshort  t);
// typedef void  (APIENTRYP PMULTITEXCOORD2SVARB)(GLenum  target, const GLshort * v);
// typedef void  (APIENTRYP PMULTITEXCOORD2XOES)(GLenum  texture, GLfixed  s, GLfixed  t);
// typedef void  (APIENTRYP PMULTITEXCOORD2XVOES)(GLenum  texture, const GLfixed * coords);
// typedef void  (APIENTRYP PMULTITEXCOORD3BOES)(GLenum  texture, GLbyte  s, GLbyte  t, GLbyte  r);
// typedef void  (APIENTRYP PMULTITEXCOORD3BVOES)(GLenum  texture, const GLbyte * coords);
// typedef void  (APIENTRYP PMULTITEXCOORD3DARB)(GLenum  target, GLdouble  s, GLdouble  t, GLdouble  r);
// typedef void  (APIENTRYP PMULTITEXCOORD3DVARB)(GLenum  target, const GLdouble * v);
// typedef void  (APIENTRYP PMULTITEXCOORD3FARB)(GLenum  target, GLfloat  s, GLfloat  t, GLfloat  r);
// typedef void  (APIENTRYP PMULTITEXCOORD3FVARB)(GLenum  target, const GLfloat * v);
// typedef void  (APIENTRYP PMULTITEXCOORD3HNV)(GLenum  target, GLhalfNV  s, GLhalfNV  t, GLhalfNV  r);
// typedef void  (APIENTRYP PMULTITEXCOORD3HVNV)(GLenum  target, const GLhalfNV * v);
// typedef void  (APIENTRYP PMULTITEXCOORD3IARB)(GLenum  target, GLint  s, GLint  t, GLint  r);
// typedef void  (APIENTRYP PMULTITEXCOORD3IVARB)(GLenum  target, const GLint * v);
// typedef void  (APIENTRYP PMULTITEXCOORD3SARB)(GLenum  target, GLshort  s, GLshort  t, GLshort  r);
// typedef void  (APIENTRYP PMULTITEXCOORD3SVARB)(GLenum  target, const GLshort * v);
// typedef void  (APIENTRYP PMULTITEXCOORD3XOES)(GLenum  texture, GLfixed  s, GLfixed  t, GLfixed  r);
// typedef void  (APIENTRYP PMULTITEXCOORD3XVOES)(GLenum  texture, const GLfixed * coords);
// typedef void  (APIENTRYP PMULTITEXCOORD4BOES)(GLenum  texture, GLbyte  s, GLbyte  t, GLbyte  r, GLbyte  q);
// typedef void  (APIENTRYP PMULTITEXCOORD4BVOES)(GLenum  texture, const GLbyte * coords);
// typedef void  (APIENTRYP PMULTITEXCOORD4DARB)(GLenum  target, GLdouble  s, GLdouble  t, GLdouble  r, GLdouble  q);
// typedef void  (APIENTRYP PMULTITEXCOORD4DVARB)(GLenum  target, const GLdouble * v);
// typedef void  (APIENTRYP PMULTITEXCOORD4FARB)(GLenum  target, GLfloat  s, GLfloat  t, GLfloat  r, GLfloat  q);
// typedef void  (APIENTRYP PMULTITEXCOORD4FVARB)(GLenum  target, const GLfloat * v);
// typedef void  (APIENTRYP PMULTITEXCOORD4HNV)(GLenum  target, GLhalfNV  s, GLhalfNV  t, GLhalfNV  r, GLhalfNV  q);
// typedef void  (APIENTRYP PMULTITEXCOORD4HVNV)(GLenum  target, const GLhalfNV * v);
// typedef void  (APIENTRYP PMULTITEXCOORD4IARB)(GLenum  target, GLint  s, GLint  t, GLint  r, GLint  q);
// typedef void  (APIENTRYP PMULTITEXCOORD4IVARB)(GLenum  target, const GLint * v);
// typedef void  (APIENTRYP PMULTITEXCOORD4SARB)(GLenum  target, GLshort  s, GLshort  t, GLshort  r, GLshort  q);
// typedef void  (APIENTRYP PMULTITEXCOORD4SVARB)(GLenum  target, const GLshort * v);
// typedef void  (APIENTRYP PMULTITEXCOORD4XOES)(GLenum  texture, GLfixed  s, GLfixed  t, GLfixed  r, GLfixed  q);
// typedef void  (APIENTRYP PMULTITEXCOORD4XVOES)(GLenum  texture, const GLfixed * coords);
// typedef void  (APIENTRYP PMULTITEXCOORDPOINTEREXT)(GLenum  texunit, GLint  size, GLenum  type, GLsizei  stride, const void * pointer);
// typedef void  (APIENTRYP PMULTITEXENVFEXT)(GLenum  texunit, GLenum  target, GLenum  pname, GLfloat  param);
// typedef void  (APIENTRYP PMULTITEXENVFVEXT)(GLenum  texunit, GLenum  target, GLenum  pname, const GLfloat * params);
// typedef void  (APIENTRYP PMULTITEXENVIEXT)(GLenum  texunit, GLenum  target, GLenum  pname, GLint  param);
// typedef void  (APIENTRYP PMULTITEXENVIVEXT)(GLenum  texunit, GLenum  target, GLenum  pname, const GLint * params);
// typedef void  (APIENTRYP PMULTITEXGENDEXT)(GLenum  texunit, GLenum  coord, GLenum  pname, GLdouble  param);
// typedef void  (APIENTRYP PMULTITEXGENDVEXT)(GLenum  texunit, GLenum  coord, GLenum  pname, const GLdouble * params);
// typedef void  (APIENTRYP PMULTITEXGENFEXT)(GLenum  texunit, GLenum  coord, GLenum  pname, GLfloat  param);
// typedef void  (APIENTRYP PMULTITEXGENFVEXT)(GLenum  texunit, GLenum  coord, GLenum  pname, const GLfloat * params);
// typedef void  (APIENTRYP PMULTITEXGENIEXT)(GLenum  texunit, GLenum  coord, GLenum  pname, GLint  param);
// typedef void  (APIENTRYP PMULTITEXGENIVEXT)(GLenum  texunit, GLenum  coord, GLenum  pname, const GLint * params);
// typedef void  (APIENTRYP PMULTITEXIMAGE1DEXT)(GLenum  texunit, GLenum  target, GLint  level, GLint  internalformat, GLsizei  width, GLint  border, GLenum  format, GLenum  type, const void * pixels);
// typedef void  (APIENTRYP PMULTITEXIMAGE2DEXT)(GLenum  texunit, GLenum  target, GLint  level, GLint  internalformat, GLsizei  width, GLsizei  height, GLint  border, GLenum  format, GLenum  type, const void * pixels);
// typedef void  (APIENTRYP PMULTITEXIMAGE3DEXT)(GLenum  texunit, GLenum  target, GLint  level, GLint  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth, GLint  border, GLenum  format, GLenum  type, const void * pixels);
// typedef void  (APIENTRYP PMULTITEXPARAMETERIIVEXT)(GLenum  texunit, GLenum  target, GLenum  pname, const GLint * params);
// typedef void  (APIENTRYP PMULTITEXPARAMETERIUIVEXT)(GLenum  texunit, GLenum  target, GLenum  pname, const GLuint * params);
// typedef void  (APIENTRYP PMULTITEXPARAMETERFEXT)(GLenum  texunit, GLenum  target, GLenum  pname, GLfloat  param);
// typedef void  (APIENTRYP PMULTITEXPARAMETERFVEXT)(GLenum  texunit, GLenum  target, GLenum  pname, const GLfloat * params);
// typedef void  (APIENTRYP PMULTITEXPARAMETERIEXT)(GLenum  texunit, GLenum  target, GLenum  pname, GLint  param);
// typedef void  (APIENTRYP PMULTITEXPARAMETERIVEXT)(GLenum  texunit, GLenum  target, GLenum  pname, const GLint * params);
// typedef void  (APIENTRYP PMULTITEXRENDERBUFFEREXT)(GLenum  texunit, GLenum  target, GLuint  renderbuffer);
// typedef void  (APIENTRYP PMULTITEXSUBIMAGE1DEXT)(GLenum  texunit, GLenum  target, GLint  level, GLint  xoffset, GLsizei  width, GLenum  format, GLenum  type, const void * pixels);
// typedef void  (APIENTRYP PMULTITEXSUBIMAGE2DEXT)(GLenum  texunit, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLsizei  width, GLsizei  height, GLenum  format, GLenum  type, const void * pixels);
// typedef void  (APIENTRYP PMULTITEXSUBIMAGE3DEXT)(GLenum  texunit, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLsizei  width, GLsizei  height, GLsizei  depth, GLenum  format, GLenum  type, const void * pixels);
// typedef void  (APIENTRYP PNAMEDBUFFERDATAEXT)(GLuint  buffer, GLsizeiptr  size, const void * data, GLenum  usage);
// typedef void  (APIENTRYP PNAMEDBUFFERSTORAGEEXT)(GLuint  buffer, GLsizeiptr  size, const void * data, GLbitfield  flags);
// typedef void  (APIENTRYP PNAMEDBUFFERSUBDATAEXT)(GLuint  buffer, GLintptr  offset, GLsizeiptr  size, const void * data);
// typedef void  (APIENTRYP PNAMEDCOPYBUFFERSUBDATAEXT)(GLuint  readBuffer, GLuint  writeBuffer, GLintptr  readOffset, GLintptr  writeOffset, GLsizeiptr  size);
// typedef void  (APIENTRYP PNAMEDFRAMEBUFFERPARAMETERIEXT)(GLuint  framebuffer, GLenum  pname, GLint  param);
// typedef void  (APIENTRYP PNAMEDFRAMEBUFFERRENDERBUFFEREXT)(GLuint  framebuffer, GLenum  attachment, GLenum  renderbuffertarget, GLuint  renderbuffer);
// typedef void  (APIENTRYP PNAMEDFRAMEBUFFERTEXTURE1DEXT)(GLuint  framebuffer, GLenum  attachment, GLenum  textarget, GLuint  texture, GLint  level);
// typedef void  (APIENTRYP PNAMEDFRAMEBUFFERTEXTURE2DEXT)(GLuint  framebuffer, GLenum  attachment, GLenum  textarget, GLuint  texture, GLint  level);
// typedef void  (APIENTRYP PNAMEDFRAMEBUFFERTEXTURE3DEXT)(GLuint  framebuffer, GLenum  attachment, GLenum  textarget, GLuint  texture, GLint  level, GLint  zoffset);
// typedef void  (APIENTRYP PNAMEDFRAMEBUFFERTEXTUREEXT)(GLuint  framebuffer, GLenum  attachment, GLuint  texture, GLint  level);
// typedef void  (APIENTRYP PNAMEDFRAMEBUFFERTEXTUREFACEEXT)(GLuint  framebuffer, GLenum  attachment, GLuint  texture, GLint  level, GLenum  face);
// typedef void  (APIENTRYP PNAMEDFRAMEBUFFERTEXTURELAYEREXT)(GLuint  framebuffer, GLenum  attachment, GLuint  texture, GLint  level, GLint  layer);
// typedef void  (APIENTRYP PNAMEDPROGRAMLOCALPARAMETER4DEXT)(GLuint  program, GLenum  target, GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w);
// typedef void  (APIENTRYP PNAMEDPROGRAMLOCALPARAMETER4DVEXT)(GLuint  program, GLenum  target, GLuint  index, const GLdouble * params);
// typedef void  (APIENTRYP PNAMEDPROGRAMLOCALPARAMETER4FEXT)(GLuint  program, GLenum  target, GLuint  index, GLfloat  x, GLfloat  y, GLfloat  z, GLfloat  w);
// typedef void  (APIENTRYP PNAMEDPROGRAMLOCALPARAMETER4FVEXT)(GLuint  program, GLenum  target, GLuint  index, const GLfloat * params);
// typedef void  (APIENTRYP PNAMEDPROGRAMLOCALPARAMETERI4IEXT)(GLuint  program, GLenum  target, GLuint  index, GLint  x, GLint  y, GLint  z, GLint  w);
// typedef void  (APIENTRYP PNAMEDPROGRAMLOCALPARAMETERI4IVEXT)(GLuint  program, GLenum  target, GLuint  index, const GLint * params);
// typedef void  (APIENTRYP PNAMEDPROGRAMLOCALPARAMETERI4UIEXT)(GLuint  program, GLenum  target, GLuint  index, GLuint  x, GLuint  y, GLuint  z, GLuint  w);
// typedef void  (APIENTRYP PNAMEDPROGRAMLOCALPARAMETERI4UIVEXT)(GLuint  program, GLenum  target, GLuint  index, const GLuint * params);
// typedef void  (APIENTRYP PNAMEDPROGRAMLOCALPARAMETERS4FVEXT)(GLuint  program, GLenum  target, GLuint  index, GLsizei  count, const GLfloat * params);
// typedef void  (APIENTRYP PNAMEDPROGRAMLOCALPARAMETERSI4IVEXT)(GLuint  program, GLenum  target, GLuint  index, GLsizei  count, const GLint * params);
// typedef void  (APIENTRYP PNAMEDPROGRAMLOCALPARAMETERSI4UIVEXT)(GLuint  program, GLenum  target, GLuint  index, GLsizei  count, const GLuint * params);
// typedef void  (APIENTRYP PNAMEDPROGRAMSTRINGEXT)(GLuint  program, GLenum  target, GLenum  format, GLsizei  len, const void * string);
// typedef void  (APIENTRYP PNAMEDRENDERBUFFERSTORAGEEXT)(GLuint  renderbuffer, GLenum  internalformat, GLsizei  width, GLsizei  height);
// typedef void  (APIENTRYP PNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXT)(GLuint  renderbuffer, GLsizei  coverageSamples, GLsizei  colorSamples, GLenum  internalformat, GLsizei  width, GLsizei  height);
// typedef void  (APIENTRYP PNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXT)(GLuint  renderbuffer, GLsizei  samples, GLenum  internalformat, GLsizei  width, GLsizei  height);
// typedef void  (APIENTRYP PNAMEDSTRINGARB)(GLenum  type, GLint  namelen, const GLchar * name, GLint  stringlen, const GLchar * string);
// typedef GLuint  (APIENTRYP PNEWOBJECTBUFFERATI)(GLsizei  size, const void * pointer, GLenum  usage);
// typedef void  (APIENTRYP PNORMAL3FVERTEX3FSUN)(GLfloat  nx, GLfloat  ny, GLfloat  nz, GLfloat  x, GLfloat  y, GLfloat  z);
// typedef void  (APIENTRYP PNORMAL3FVERTEX3FVSUN)(const GLfloat * n, const GLfloat * v);
// typedef void  (APIENTRYP PNORMAL3HNV)(GLhalfNV  nx, GLhalfNV  ny, GLhalfNV  nz);
// typedef void  (APIENTRYP PNORMAL3HVNV)(const GLhalfNV * v);
// typedef void  (APIENTRYP PNORMAL3XOES)(GLfixed  nx, GLfixed  ny, GLfixed  nz);
// typedef void  (APIENTRYP PNORMAL3XVOES)(const GLfixed * coords);
// typedef void  (APIENTRYP PNORMALFORMATNV)(GLenum  type, GLsizei  stride);
// typedef void  (APIENTRYP PNORMALPOINTEREXT)(GLenum  type, GLsizei  stride, GLsizei  count, const void * pointer);
// typedef void  (APIENTRYP PNORMALPOINTERLISTIBM)(GLenum  type, GLint  stride, const void ** pointer, GLint  ptrstride);
// typedef void  (APIENTRYP PNORMALPOINTERVINTEL)(GLenum  type, const void ** pointer);
// typedef void  (APIENTRYP PNORMALSTREAM3BATI)(GLenum  stream, GLbyte  nx, GLbyte  ny, GLbyte  nz);
// typedef void  (APIENTRYP PNORMALSTREAM3BVATI)(GLenum  stream, const GLbyte * coords);
// typedef void  (APIENTRYP PNORMALSTREAM3DATI)(GLenum  stream, GLdouble  nx, GLdouble  ny, GLdouble  nz);
// typedef void  (APIENTRYP PNORMALSTREAM3DVATI)(GLenum  stream, const GLdouble * coords);
// typedef void  (APIENTRYP PNORMALSTREAM3FATI)(GLenum  stream, GLfloat  nx, GLfloat  ny, GLfloat  nz);
// typedef void  (APIENTRYP PNORMALSTREAM3FVATI)(GLenum  stream, const GLfloat * coords);
// typedef void  (APIENTRYP PNORMALSTREAM3IATI)(GLenum  stream, GLint  nx, GLint  ny, GLint  nz);
// typedef void  (APIENTRYP PNORMALSTREAM3IVATI)(GLenum  stream, const GLint * coords);
// typedef void  (APIENTRYP PNORMALSTREAM3SATI)(GLenum  stream, GLshort  nx, GLshort  ny, GLshort  nz);
// typedef void  (APIENTRYP PNORMALSTREAM3SVATI)(GLenum  stream, const GLshort * coords);
// typedef void  (APIENTRYP POBJECTLABEL)(GLenum  identifier, GLuint  name, GLsizei  length, const GLchar * label);
// typedef void  (APIENTRYP POBJECTLABELKHR)(GLenum  identifier, GLuint  name, GLsizei  length, const GLchar * label);
// typedef void  (APIENTRYP POBJECTPTRLABEL)(const void * ptr, GLsizei  length, const GLchar * label);
// typedef void  (APIENTRYP POBJECTPTRLABELKHR)(const void * ptr, GLsizei  length, const GLchar * label);
// typedef GLenum  (APIENTRYP POBJECTPURGEABLEAPPLE)(GLenum  objectType, GLuint  name, GLenum  option);
// typedef GLenum  (APIENTRYP POBJECTUNPURGEABLEAPPLE)(GLenum  objectType, GLuint  name, GLenum  option);
// typedef void  (APIENTRYP PORTHOFOES)(GLfloat  l, GLfloat  r, GLfloat  b, GLfloat  t, GLfloat  n, GLfloat  f);
// typedef void  (APIENTRYP PORTHOXOES)(GLfixed  l, GLfixed  r, GLfixed  b, GLfixed  t, GLfixed  n, GLfixed  f);
// typedef void  (APIENTRYP PPNTRIANGLESFATI)(GLenum  pname, GLfloat  param);
// typedef void  (APIENTRYP PPNTRIANGLESIATI)(GLenum  pname, GLint  param);
// typedef void  (APIENTRYP PPASSTEXCOORDATI)(GLuint  dst, GLuint  coord, GLenum  swizzle);
// typedef void  (APIENTRYP PPASSTHROUGHXOES)(GLfixed  token);
// typedef void  (APIENTRYP PPATCHPARAMETERFV)(GLenum  pname, const GLfloat * values);
// typedef void  (APIENTRYP PPATCHPARAMETERI)(GLenum  pname, GLint  value);
// typedef void  (APIENTRYP PPATHCOLORGENNV)(GLenum  color, GLenum  genMode, GLenum  colorFormat, const GLfloat * coeffs);
// typedef void  (APIENTRYP PPATHCOMMANDSNV)(GLuint  path, GLsizei  numCommands, const GLubyte * commands, GLsizei  numCoords, GLenum  coordType, const void * coords);
// typedef void  (APIENTRYP PPATHCOORDSNV)(GLuint  path, GLsizei  numCoords, GLenum  coordType, const void * coords);
// typedef void  (APIENTRYP PPATHCOVERDEPTHFUNCNV)(GLenum  func);
// typedef void  (APIENTRYP PPATHDASHARRAYNV)(GLuint  path, GLsizei  dashCount, const GLfloat * dashArray);
// typedef void  (APIENTRYP PPATHFOGGENNV)(GLenum  genMode);
// typedef void  (APIENTRYP PPATHGLYPHRANGENV)(GLuint  firstPathName, GLenum  fontTarget, const void * fontName, GLbitfield  fontStyle, GLuint  firstGlyph, GLsizei  numGlyphs, GLenum  handleMissingGlyphs, GLuint  pathParameterTemplate, GLfloat  emScale);
// typedef void  (APIENTRYP PPATHGLYPHSNV)(GLuint  firstPathName, GLenum  fontTarget, const void * fontName, GLbitfield  fontStyle, GLsizei  numGlyphs, GLenum  type, const void * charcodes, GLenum  handleMissingGlyphs, GLuint  pathParameterTemplate, GLfloat  emScale);
// typedef void  (APIENTRYP PPATHPARAMETERFNV)(GLuint  path, GLenum  pname, GLfloat  value);
// typedef void  (APIENTRYP PPATHPARAMETERFVNV)(GLuint  path, GLenum  pname, const GLfloat * value);
// typedef void  (APIENTRYP PPATHPARAMETERINV)(GLuint  path, GLenum  pname, GLint  value);
// typedef void  (APIENTRYP PPATHPARAMETERIVNV)(GLuint  path, GLenum  pname, const GLint * value);
// typedef void  (APIENTRYP PPATHSTENCILDEPTHOFFSETNV)(GLfloat  factor, GLfloat  units);
// typedef void  (APIENTRYP PPATHSTENCILFUNCNV)(GLenum  func, GLint  ref, GLuint  mask);
// typedef void  (APIENTRYP PPATHSTRINGNV)(GLuint  path, GLenum  format, GLsizei  length, const void * pathString);
// typedef void  (APIENTRYP PPATHSUBCOMMANDSNV)(GLuint  path, GLsizei  commandStart, GLsizei  commandsToDelete, GLsizei  numCommands, const GLubyte * commands, GLsizei  numCoords, GLenum  coordType, const void * coords);
// typedef void  (APIENTRYP PPATHSUBCOORDSNV)(GLuint  path, GLsizei  coordStart, GLsizei  numCoords, GLenum  coordType, const void * coords);
// typedef void  (APIENTRYP PPATHTEXGENNV)(GLenum  texCoordSet, GLenum  genMode, GLint  components, const GLfloat * coeffs);
// typedef void  (APIENTRYP PPAUSETRANSFORMFEEDBACK)();
// typedef void  (APIENTRYP PPAUSETRANSFORMFEEDBACKNV)();
// typedef void  (APIENTRYP PPIXELDATARANGENV)(GLenum  target, GLsizei  length, const void * pointer);
// typedef void  (APIENTRYP PPIXELMAPX)(GLenum  map, GLint  size, const GLfixed * values);
// typedef void  (APIENTRYP PPIXELSTOREF)(GLenum  pname, GLfloat  param);
// typedef void  (APIENTRYP PPIXELSTOREI)(GLenum  pname, GLint  param);
// typedef void  (APIENTRYP PPIXELSTOREX)(GLenum  pname, GLfixed  param);
// typedef void  (APIENTRYP PPIXELTEXGENPARAMETERFSGIS)(GLenum  pname, GLfloat  param);
// typedef void  (APIENTRYP PPIXELTEXGENPARAMETERFVSGIS)(GLenum  pname, const GLfloat * params);
// typedef void  (APIENTRYP PPIXELTEXGENPARAMETERISGIS)(GLenum  pname, GLint  param);
// typedef void  (APIENTRYP PPIXELTEXGENPARAMETERIVSGIS)(GLenum  pname, const GLint * params);
// typedef void  (APIENTRYP PPIXELTEXGENSGIX)(GLenum  mode);
// typedef void  (APIENTRYP PPIXELTRANSFERXOES)(GLenum  pname, GLfixed  param);
// typedef void  (APIENTRYP PPIXELTRANSFORMPARAMETERFEXT)(GLenum  target, GLenum  pname, GLfloat  param);
// typedef void  (APIENTRYP PPIXELTRANSFORMPARAMETERFVEXT)(GLenum  target, GLenum  pname, const GLfloat * params);
// typedef void  (APIENTRYP PPIXELTRANSFORMPARAMETERIEXT)(GLenum  target, GLenum  pname, GLint  param);
// typedef void  (APIENTRYP PPIXELTRANSFORMPARAMETERIVEXT)(GLenum  target, GLenum  pname, const GLint * params);
// typedef void  (APIENTRYP PPIXELZOOMXOES)(GLfixed  xfactor, GLfixed  yfactor);
// typedef GLboolean  (APIENTRYP PPOINTALONGPATHNV)(GLuint  path, GLsizei  startSegment, GLsizei  numSegments, GLfloat  distance, GLfloat * x, GLfloat * y, GLfloat * tangentX, GLfloat * tangentY);
// typedef void  (APIENTRYP PPOINTPARAMETERF)(GLenum  pname, GLfloat  param);
// typedef void  (APIENTRYP PPOINTPARAMETERFARB)(GLenum  pname, GLfloat  param);
// typedef void  (APIENTRYP PPOINTPARAMETERFEXT)(GLenum  pname, GLfloat  param);
// typedef void  (APIENTRYP PPOINTPARAMETERFSGIS)(GLenum  pname, GLfloat  param);
// typedef void  (APIENTRYP PPOINTPARAMETERFV)(GLenum  pname, const GLfloat * params);
// typedef void  (APIENTRYP PPOINTPARAMETERFVARB)(GLenum  pname, const GLfloat * params);
// typedef void  (APIENTRYP PPOINTPARAMETERFVEXT)(GLenum  pname, const GLfloat * params);
// typedef void  (APIENTRYP PPOINTPARAMETERFVSGIS)(GLenum  pname, const GLfloat * params);
// typedef void  (APIENTRYP PPOINTPARAMETERI)(GLenum  pname, GLint  param);
// typedef void  (APIENTRYP PPOINTPARAMETERINV)(GLenum  pname, GLint  param);
// typedef void  (APIENTRYP PPOINTPARAMETERIV)(GLenum  pname, const GLint * params);
// typedef void  (APIENTRYP PPOINTPARAMETERIVNV)(GLenum  pname, const GLint * params);
// typedef void  (APIENTRYP PPOINTPARAMETERXOES)(GLenum  pname, GLfixed  param);
// typedef void  (APIENTRYP PPOINTPARAMETERXVOES)(GLenum  pname, const GLfixed * params);
// typedef void  (APIENTRYP PPOINTSIZE)(GLfloat  size);
// typedef void  (APIENTRYP PPOINTSIZEXOES)(GLfixed  size);
// typedef GLint  (APIENTRYP PPOLLASYNCSGIX)(GLuint * markerp);
// typedef GLint  (APIENTRYP PPOLLINSTRUMENTSSGIX)(GLint * marker_p);
// typedef void  (APIENTRYP PPOLYGONMODE)(GLenum  face, GLenum  mode);
// typedef void  (APIENTRYP PPOLYGONOFFSET)(GLfloat  factor, GLfloat  units);
// typedef void  (APIENTRYP PPOLYGONOFFSETEXT)(GLfloat  factor, GLfloat  bias);
// typedef void  (APIENTRYP PPOLYGONOFFSETXOES)(GLfixed  factor, GLfixed  units);
// typedef void  (APIENTRYP PPOPDEBUGGROUP)();
// typedef void  (APIENTRYP PPOPDEBUGGROUPKHR)();
// typedef void  (APIENTRYP PPOPGROUPMARKEREXT)();
// typedef void  (APIENTRYP PPRESENTFRAMEDUALFILLNV)(GLuint  video_slot, GLuint64EXT  minPresentTime, GLuint  beginPresentTimeId, GLuint  presentDurationId, GLenum  type, GLenum  target0, GLuint  fill0, GLenum  target1, GLuint  fill1, GLenum  target2, GLuint  fill2, GLenum  target3, GLuint  fill3);
// typedef void  (APIENTRYP PPRESENTFRAMEKEYEDNV)(GLuint  video_slot, GLuint64EXT  minPresentTime, GLuint  beginPresentTimeId, GLuint  presentDurationId, GLenum  type, GLenum  target0, GLuint  fill0, GLuint  key0, GLenum  target1, GLuint  fill1, GLuint  key1);
// typedef void  (APIENTRYP PPRIMITIVERESTARTINDEX)(GLuint  index);
// typedef void  (APIENTRYP PPRIMITIVERESTARTINDEXNV)(GLuint  index);
// typedef void  (APIENTRYP PPRIMITIVERESTARTNV)();
// typedef void  (APIENTRYP PPRIORITIZETEXTURESEXT)(GLsizei  n, const GLuint * textures, const GLclampf * priorities);
// typedef void  (APIENTRYP PPRIORITIZETEXTURESXOES)(GLsizei  n, const GLuint * textures, const GLfixed * priorities);
// typedef void  (APIENTRYP PPROGRAMBINARY)(GLuint  program, GLenum  binaryFormat, const void * binary, GLsizei  length);
// typedef void  (APIENTRYP PPROGRAMBUFFERPARAMETERSIIVNV)(GLenum  target, GLuint  bindingIndex, GLuint  wordIndex, GLsizei  count, const GLint * params);
// typedef void  (APIENTRYP PPROGRAMBUFFERPARAMETERSIUIVNV)(GLenum  target, GLuint  bindingIndex, GLuint  wordIndex, GLsizei  count, const GLuint * params);
// typedef void  (APIENTRYP PPROGRAMBUFFERPARAMETERSFVNV)(GLenum  target, GLuint  bindingIndex, GLuint  wordIndex, GLsizei  count, const GLfloat * params);
// typedef void  (APIENTRYP PPROGRAMENVPARAMETER4DARB)(GLenum  target, GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w);
// typedef void  (APIENTRYP PPROGRAMENVPARAMETER4DVARB)(GLenum  target, GLuint  index, const GLdouble * params);
// typedef void  (APIENTRYP PPROGRAMENVPARAMETER4FARB)(GLenum  target, GLuint  index, GLfloat  x, GLfloat  y, GLfloat  z, GLfloat  w);
// typedef void  (APIENTRYP PPROGRAMENVPARAMETER4FVARB)(GLenum  target, GLuint  index, const GLfloat * params);
// typedef void  (APIENTRYP PPROGRAMENVPARAMETERI4INV)(GLenum  target, GLuint  index, GLint  x, GLint  y, GLint  z, GLint  w);
// typedef void  (APIENTRYP PPROGRAMENVPARAMETERI4IVNV)(GLenum  target, GLuint  index, const GLint * params);
// typedef void  (APIENTRYP PPROGRAMENVPARAMETERI4UINV)(GLenum  target, GLuint  index, GLuint  x, GLuint  y, GLuint  z, GLuint  w);
// typedef void  (APIENTRYP PPROGRAMENVPARAMETERI4UIVNV)(GLenum  target, GLuint  index, const GLuint * params);
// typedef void  (APIENTRYP PPROGRAMENVPARAMETERS4FVEXT)(GLenum  target, GLuint  index, GLsizei  count, const GLfloat * params);
// typedef void  (APIENTRYP PPROGRAMENVPARAMETERSI4IVNV)(GLenum  target, GLuint  index, GLsizei  count, const GLint * params);
// typedef void  (APIENTRYP PPROGRAMENVPARAMETERSI4UIVNV)(GLenum  target, GLuint  index, GLsizei  count, const GLuint * params);
// typedef void  (APIENTRYP PPROGRAMLOCALPARAMETER4DARB)(GLenum  target, GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w);
// typedef void  (APIENTRYP PPROGRAMLOCALPARAMETER4DVARB)(GLenum  target, GLuint  index, const GLdouble * params);
// typedef void  (APIENTRYP PPROGRAMLOCALPARAMETER4FARB)(GLenum  target, GLuint  index, GLfloat  x, GLfloat  y, GLfloat  z, GLfloat  w);
// typedef void  (APIENTRYP PPROGRAMLOCALPARAMETER4FVARB)(GLenum  target, GLuint  index, const GLfloat * params);
// typedef void  (APIENTRYP PPROGRAMLOCALPARAMETERI4INV)(GLenum  target, GLuint  index, GLint  x, GLint  y, GLint  z, GLint  w);
// typedef void  (APIENTRYP PPROGRAMLOCALPARAMETERI4IVNV)(GLenum  target, GLuint  index, const GLint * params);
// typedef void  (APIENTRYP PPROGRAMLOCALPARAMETERI4UINV)(GLenum  target, GLuint  index, GLuint  x, GLuint  y, GLuint  z, GLuint  w);
// typedef void  (APIENTRYP PPROGRAMLOCALPARAMETERI4UIVNV)(GLenum  target, GLuint  index, const GLuint * params);
// typedef void  (APIENTRYP PPROGRAMLOCALPARAMETERS4FVEXT)(GLenum  target, GLuint  index, GLsizei  count, const GLfloat * params);
// typedef void  (APIENTRYP PPROGRAMLOCALPARAMETERSI4IVNV)(GLenum  target, GLuint  index, GLsizei  count, const GLint * params);
// typedef void  (APIENTRYP PPROGRAMLOCALPARAMETERSI4UIVNV)(GLenum  target, GLuint  index, GLsizei  count, const GLuint * params);
// typedef void  (APIENTRYP PPROGRAMNAMEDPARAMETER4DNV)(GLuint  id, GLsizei  len, const GLubyte * name, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w);
// typedef void  (APIENTRYP PPROGRAMNAMEDPARAMETER4DVNV)(GLuint  id, GLsizei  len, const GLubyte * name, const GLdouble * v);
// typedef void  (APIENTRYP PPROGRAMNAMEDPARAMETER4FNV)(GLuint  id, GLsizei  len, const GLubyte * name, GLfloat  x, GLfloat  y, GLfloat  z, GLfloat  w);
// typedef void  (APIENTRYP PPROGRAMNAMEDPARAMETER4FVNV)(GLuint  id, GLsizei  len, const GLubyte * name, const GLfloat * v);
// typedef void  (APIENTRYP PPROGRAMPARAMETER4DNV)(GLenum  target, GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w);
// typedef void  (APIENTRYP PPROGRAMPARAMETER4DVNV)(GLenum  target, GLuint  index, const GLdouble * v);
// typedef void  (APIENTRYP PPROGRAMPARAMETER4FNV)(GLenum  target, GLuint  index, GLfloat  x, GLfloat  y, GLfloat  z, GLfloat  w);
// typedef void  (APIENTRYP PPROGRAMPARAMETER4FVNV)(GLenum  target, GLuint  index, const GLfloat * v);
// typedef void  (APIENTRYP PPROGRAMPARAMETERI)(GLuint  program, GLenum  pname, GLint  value);
// typedef void  (APIENTRYP PPROGRAMPARAMETERIARB)(GLuint  program, GLenum  pname, GLint  value);
// typedef void  (APIENTRYP PPROGRAMPARAMETERIEXT)(GLuint  program, GLenum  pname, GLint  value);
// typedef void  (APIENTRYP PPROGRAMPARAMETERS4DVNV)(GLenum  target, GLuint  index, GLsizei  count, const GLdouble * v);
// typedef void  (APIENTRYP PPROGRAMPARAMETERS4FVNV)(GLenum  target, GLuint  index, GLsizei  count, const GLfloat * v);
// typedef void  (APIENTRYP PPROGRAMSTRINGARB)(GLenum  target, GLenum  format, GLsizei  len, const void * string);
// typedef void  (APIENTRYP PPROGRAMSUBROUTINEPARAMETERSUIVNV)(GLenum  target, GLsizei  count, const GLuint * params);
// typedef void  (APIENTRYP PPROGRAMUNIFORM1D)(GLuint  program, GLint  location, GLdouble  v0);
// typedef void  (APIENTRYP PPROGRAMUNIFORM1DEXT)(GLuint  program, GLint  location, GLdouble  x);
// typedef void  (APIENTRYP PPROGRAMUNIFORM1DV)(GLuint  program, GLint  location, GLsizei  count, const GLdouble * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORM1DVEXT)(GLuint  program, GLint  location, GLsizei  count, const GLdouble * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORM1F)(GLuint  program, GLint  location, GLfloat  v0);
// typedef void  (APIENTRYP PPROGRAMUNIFORM1FEXT)(GLuint  program, GLint  location, GLfloat  v0);
// typedef void  (APIENTRYP PPROGRAMUNIFORM1FV)(GLuint  program, GLint  location, GLsizei  count, const GLfloat * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORM1FVEXT)(GLuint  program, GLint  location, GLsizei  count, const GLfloat * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORM1I)(GLuint  program, GLint  location, GLint  v0);
// typedef void  (APIENTRYP PPROGRAMUNIFORM1I64NV)(GLuint  program, GLint  location, GLint64EXT  x);
// typedef void  (APIENTRYP PPROGRAMUNIFORM1I64VNV)(GLuint  program, GLint  location, GLsizei  count, const GLint64EXT * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORM1IEXT)(GLuint  program, GLint  location, GLint  v0);
// typedef void  (APIENTRYP PPROGRAMUNIFORM1IV)(GLuint  program, GLint  location, GLsizei  count, const GLint * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORM1IVEXT)(GLuint  program, GLint  location, GLsizei  count, const GLint * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORM1UI)(GLuint  program, GLint  location, GLuint  v0);
// typedef void  (APIENTRYP PPROGRAMUNIFORM1UI64NV)(GLuint  program, GLint  location, GLuint64EXT  x);
// typedef void  (APIENTRYP PPROGRAMUNIFORM1UI64VNV)(GLuint  program, GLint  location, GLsizei  count, const GLuint64EXT * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORM1UIEXT)(GLuint  program, GLint  location, GLuint  v0);
// typedef void  (APIENTRYP PPROGRAMUNIFORM1UIV)(GLuint  program, GLint  location, GLsizei  count, const GLuint * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORM1UIVEXT)(GLuint  program, GLint  location, GLsizei  count, const GLuint * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORM2D)(GLuint  program, GLint  location, GLdouble  v0, GLdouble  v1);
// typedef void  (APIENTRYP PPROGRAMUNIFORM2DEXT)(GLuint  program, GLint  location, GLdouble  x, GLdouble  y);
// typedef void  (APIENTRYP PPROGRAMUNIFORM2DV)(GLuint  program, GLint  location, GLsizei  count, const GLdouble * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORM2DVEXT)(GLuint  program, GLint  location, GLsizei  count, const GLdouble * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORM2F)(GLuint  program, GLint  location, GLfloat  v0, GLfloat  v1);
// typedef void  (APIENTRYP PPROGRAMUNIFORM2FEXT)(GLuint  program, GLint  location, GLfloat  v0, GLfloat  v1);
// typedef void  (APIENTRYP PPROGRAMUNIFORM2FV)(GLuint  program, GLint  location, GLsizei  count, const GLfloat * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORM2FVEXT)(GLuint  program, GLint  location, GLsizei  count, const GLfloat * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORM2I)(GLuint  program, GLint  location, GLint  v0, GLint  v1);
// typedef void  (APIENTRYP PPROGRAMUNIFORM2I64NV)(GLuint  program, GLint  location, GLint64EXT  x, GLint64EXT  y);
// typedef void  (APIENTRYP PPROGRAMUNIFORM2I64VNV)(GLuint  program, GLint  location, GLsizei  count, const GLint64EXT * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORM2IEXT)(GLuint  program, GLint  location, GLint  v0, GLint  v1);
// typedef void  (APIENTRYP PPROGRAMUNIFORM2IV)(GLuint  program, GLint  location, GLsizei  count, const GLint * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORM2IVEXT)(GLuint  program, GLint  location, GLsizei  count, const GLint * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORM2UI)(GLuint  program, GLint  location, GLuint  v0, GLuint  v1);
// typedef void  (APIENTRYP PPROGRAMUNIFORM2UI64NV)(GLuint  program, GLint  location, GLuint64EXT  x, GLuint64EXT  y);
// typedef void  (APIENTRYP PPROGRAMUNIFORM2UI64VNV)(GLuint  program, GLint  location, GLsizei  count, const GLuint64EXT * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORM2UIEXT)(GLuint  program, GLint  location, GLuint  v0, GLuint  v1);
// typedef void  (APIENTRYP PPROGRAMUNIFORM2UIV)(GLuint  program, GLint  location, GLsizei  count, const GLuint * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORM2UIVEXT)(GLuint  program, GLint  location, GLsizei  count, const GLuint * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORM3D)(GLuint  program, GLint  location, GLdouble  v0, GLdouble  v1, GLdouble  v2);
// typedef void  (APIENTRYP PPROGRAMUNIFORM3DEXT)(GLuint  program, GLint  location, GLdouble  x, GLdouble  y, GLdouble  z);
// typedef void  (APIENTRYP PPROGRAMUNIFORM3DV)(GLuint  program, GLint  location, GLsizei  count, const GLdouble * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORM3DVEXT)(GLuint  program, GLint  location, GLsizei  count, const GLdouble * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORM3F)(GLuint  program, GLint  location, GLfloat  v0, GLfloat  v1, GLfloat  v2);
// typedef void  (APIENTRYP PPROGRAMUNIFORM3FEXT)(GLuint  program, GLint  location, GLfloat  v0, GLfloat  v1, GLfloat  v2);
// typedef void  (APIENTRYP PPROGRAMUNIFORM3FV)(GLuint  program, GLint  location, GLsizei  count, const GLfloat * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORM3FVEXT)(GLuint  program, GLint  location, GLsizei  count, const GLfloat * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORM3I)(GLuint  program, GLint  location, GLint  v0, GLint  v1, GLint  v2);
// typedef void  (APIENTRYP PPROGRAMUNIFORM3I64NV)(GLuint  program, GLint  location, GLint64EXT  x, GLint64EXT  y, GLint64EXT  z);
// typedef void  (APIENTRYP PPROGRAMUNIFORM3I64VNV)(GLuint  program, GLint  location, GLsizei  count, const GLint64EXT * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORM3IEXT)(GLuint  program, GLint  location, GLint  v0, GLint  v1, GLint  v2);
// typedef void  (APIENTRYP PPROGRAMUNIFORM3IV)(GLuint  program, GLint  location, GLsizei  count, const GLint * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORM3IVEXT)(GLuint  program, GLint  location, GLsizei  count, const GLint * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORM3UI)(GLuint  program, GLint  location, GLuint  v0, GLuint  v1, GLuint  v2);
// typedef void  (APIENTRYP PPROGRAMUNIFORM3UI64NV)(GLuint  program, GLint  location, GLuint64EXT  x, GLuint64EXT  y, GLuint64EXT  z);
// typedef void  (APIENTRYP PPROGRAMUNIFORM3UI64VNV)(GLuint  program, GLint  location, GLsizei  count, const GLuint64EXT * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORM3UIEXT)(GLuint  program, GLint  location, GLuint  v0, GLuint  v1, GLuint  v2);
// typedef void  (APIENTRYP PPROGRAMUNIFORM3UIV)(GLuint  program, GLint  location, GLsizei  count, const GLuint * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORM3UIVEXT)(GLuint  program, GLint  location, GLsizei  count, const GLuint * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORM4D)(GLuint  program, GLint  location, GLdouble  v0, GLdouble  v1, GLdouble  v2, GLdouble  v3);
// typedef void  (APIENTRYP PPROGRAMUNIFORM4DEXT)(GLuint  program, GLint  location, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w);
// typedef void  (APIENTRYP PPROGRAMUNIFORM4DV)(GLuint  program, GLint  location, GLsizei  count, const GLdouble * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORM4DVEXT)(GLuint  program, GLint  location, GLsizei  count, const GLdouble * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORM4F)(GLuint  program, GLint  location, GLfloat  v0, GLfloat  v1, GLfloat  v2, GLfloat  v3);
// typedef void  (APIENTRYP PPROGRAMUNIFORM4FEXT)(GLuint  program, GLint  location, GLfloat  v0, GLfloat  v1, GLfloat  v2, GLfloat  v3);
// typedef void  (APIENTRYP PPROGRAMUNIFORM4FV)(GLuint  program, GLint  location, GLsizei  count, const GLfloat * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORM4FVEXT)(GLuint  program, GLint  location, GLsizei  count, const GLfloat * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORM4I)(GLuint  program, GLint  location, GLint  v0, GLint  v1, GLint  v2, GLint  v3);
// typedef void  (APIENTRYP PPROGRAMUNIFORM4I64NV)(GLuint  program, GLint  location, GLint64EXT  x, GLint64EXT  y, GLint64EXT  z, GLint64EXT  w);
// typedef void  (APIENTRYP PPROGRAMUNIFORM4I64VNV)(GLuint  program, GLint  location, GLsizei  count, const GLint64EXT * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORM4IEXT)(GLuint  program, GLint  location, GLint  v0, GLint  v1, GLint  v2, GLint  v3);
// typedef void  (APIENTRYP PPROGRAMUNIFORM4IV)(GLuint  program, GLint  location, GLsizei  count, const GLint * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORM4IVEXT)(GLuint  program, GLint  location, GLsizei  count, const GLint * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORM4UI)(GLuint  program, GLint  location, GLuint  v0, GLuint  v1, GLuint  v2, GLuint  v3);
// typedef void  (APIENTRYP PPROGRAMUNIFORM4UI64NV)(GLuint  program, GLint  location, GLuint64EXT  x, GLuint64EXT  y, GLuint64EXT  z, GLuint64EXT  w);
// typedef void  (APIENTRYP PPROGRAMUNIFORM4UI64VNV)(GLuint  program, GLint  location, GLsizei  count, const GLuint64EXT * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORM4UIEXT)(GLuint  program, GLint  location, GLuint  v0, GLuint  v1, GLuint  v2, GLuint  v3);
// typedef void  (APIENTRYP PPROGRAMUNIFORM4UIV)(GLuint  program, GLint  location, GLsizei  count, const GLuint * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORM4UIVEXT)(GLuint  program, GLint  location, GLsizei  count, const GLuint * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORMHANDLEUI64ARB)(GLuint  program, GLint  location, GLuint64  value);
// typedef void  (APIENTRYP PPROGRAMUNIFORMHANDLEUI64NV)(GLuint  program, GLint  location, GLuint64  value);
// typedef void  (APIENTRYP PPROGRAMUNIFORMHANDLEUI64VARB)(GLuint  program, GLint  location, GLsizei  count, const GLuint64 * values);
// typedef void  (APIENTRYP PPROGRAMUNIFORMHANDLEUI64VNV)(GLuint  program, GLint  location, GLsizei  count, const GLuint64 * values);
// typedef void  (APIENTRYP PPROGRAMUNIFORMMATRIX2DV)(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORMMATRIX2DVEXT)(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORMMATRIX2FV)(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORMMATRIX2FVEXT)(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORMMATRIX2X3DV)(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORMMATRIX2X3DVEXT)(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORMMATRIX2X3FV)(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORMMATRIX2X3FVEXT)(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORMMATRIX2X4DV)(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORMMATRIX2X4DVEXT)(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORMMATRIX2X4FV)(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORMMATRIX2X4FVEXT)(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORMMATRIX3DV)(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORMMATRIX3DVEXT)(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORMMATRIX3FV)(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORMMATRIX3FVEXT)(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORMMATRIX3X2DV)(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORMMATRIX3X2DVEXT)(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORMMATRIX3X2FV)(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORMMATRIX3X2FVEXT)(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORMMATRIX3X4DV)(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORMMATRIX3X4DVEXT)(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORMMATRIX3X4FV)(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORMMATRIX3X4FVEXT)(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORMMATRIX4DV)(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORMMATRIX4DVEXT)(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORMMATRIX4FV)(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORMMATRIX4FVEXT)(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORMMATRIX4X2DV)(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORMMATRIX4X2DVEXT)(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORMMATRIX4X2FV)(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORMMATRIX4X2FVEXT)(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORMMATRIX4X3DV)(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORMMATRIX4X3DVEXT)(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORMMATRIX4X3FV)(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORMMATRIX4X3FVEXT)(GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
// typedef void  (APIENTRYP PPROGRAMUNIFORMUI64NV)(GLuint  program, GLint  location, GLuint64EXT  value);
// typedef void  (APIENTRYP PPROGRAMUNIFORMUI64VNV)(GLuint  program, GLint  location, GLsizei  count, const GLuint64EXT * value);
// typedef void  (APIENTRYP PPROGRAMVERTEXLIMITNV)(GLenum  target, GLint  limit);
// typedef void  (APIENTRYP PPROVOKINGVERTEX)(GLenum  mode);
// typedef void  (APIENTRYP PPROVOKINGVERTEXEXT)(GLenum  mode);
// typedef void  (APIENTRYP PPUSHCLIENTATTRIBDEFAULTEXT)(GLbitfield  mask);
// typedef void  (APIENTRYP PPUSHDEBUGGROUP)(GLenum  source, GLuint  id, GLsizei  length, const GLchar * message);
// typedef void  (APIENTRYP PPUSHDEBUGGROUPKHR)(GLenum  source, GLuint  id, GLsizei  length, const GLchar * message);
// typedef void  (APIENTRYP PPUSHGROUPMARKEREXT)(GLsizei  length, const GLchar * marker);
// typedef void  (APIENTRYP PQUERYCOUNTER)(GLuint  id, GLenum  target);
// typedef GLbitfield  (APIENTRYP PQUERYMATRIXXOES)(GLfixed * mantissa, GLint * exponent);
// typedef void  (APIENTRYP PQUERYOBJECTPARAMETERUIAMD)(GLenum  target, GLuint  id, GLenum  pname, GLuint  param);
// typedef void  (APIENTRYP PRASTERPOS2XOES)(GLfixed  x, GLfixed  y);
// typedef void  (APIENTRYP PRASTERPOS2XVOES)(const GLfixed * coords);
// typedef void  (APIENTRYP PRASTERPOS3XOES)(GLfixed  x, GLfixed  y, GLfixed  z);
// typedef void  (APIENTRYP PRASTERPOS3XVOES)(const GLfixed * coords);
// typedef void  (APIENTRYP PRASTERPOS4XOES)(GLfixed  x, GLfixed  y, GLfixed  z, GLfixed  w);
// typedef void  (APIENTRYP PRASTERPOS4XVOES)(const GLfixed * coords);
// typedef void  (APIENTRYP PREADBUFFER)(GLenum  mode);
// typedef void  (APIENTRYP PREADINSTRUMENTSSGIX)(GLint  marker);
// typedef void  (APIENTRYP PREADPIXELS)(GLint  x, GLint  y, GLsizei  width, GLsizei  height, GLenum  format, GLenum  type, void * pixels);
// typedef void  (APIENTRYP PREADNPIXELSARB)(GLint  x, GLint  y, GLsizei  width, GLsizei  height, GLenum  format, GLenum  type, GLsizei  bufSize, void * data);
// typedef void  (APIENTRYP PRECTXOES)(GLfixed  x1, GLfixed  y1, GLfixed  x2, GLfixed  y2);
// typedef void  (APIENTRYP PRECTXVOES)(const GLfixed * v1, const GLfixed * v2);
// typedef void  (APIENTRYP PREFERENCEPLANESGIX)(const GLdouble * equation);
// typedef void  (APIENTRYP PRELEASESHADERCOMPILER)();
// typedef void  (APIENTRYP PRENDERBUFFERSTORAGE)(GLenum  target, GLenum  internalformat, GLsizei  width, GLsizei  height);
// typedef void  (APIENTRYP PRENDERBUFFERSTORAGEEXT)(GLenum  target, GLenum  internalformat, GLsizei  width, GLsizei  height);
// typedef void  (APIENTRYP PRENDERBUFFERSTORAGEMULTISAMPLE)(GLenum  target, GLsizei  samples, GLenum  internalformat, GLsizei  width, GLsizei  height);
// typedef void  (APIENTRYP PRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENV)(GLenum  target, GLsizei  coverageSamples, GLsizei  colorSamples, GLenum  internalformat, GLsizei  width, GLsizei  height);
// typedef void  (APIENTRYP PRENDERBUFFERSTORAGEMULTISAMPLEEXT)(GLenum  target, GLsizei  samples, GLenum  internalformat, GLsizei  width, GLsizei  height);
// typedef void  (APIENTRYP PREPLACEMENTCODEPOINTERSUN)(GLenum  type, GLsizei  stride, const void ** pointer);
// typedef void  (APIENTRYP PREPLACEMENTCODEUBSUN)(GLubyte  code);
// typedef void  (APIENTRYP PREPLACEMENTCODEUBVSUN)(const GLubyte * code);
// typedef void  (APIENTRYP PREPLACEMENTCODEUICOLOR3FVERTEX3FSUN)(GLuint  rc, GLfloat  r, GLfloat  g, GLfloat  b, GLfloat  x, GLfloat  y, GLfloat  z);
// typedef void  (APIENTRYP PREPLACEMENTCODEUICOLOR3FVERTEX3FVSUN)(const GLuint * rc, const GLfloat * c, const GLfloat * v);
// typedef void  (APIENTRYP PREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUN)(GLuint  rc, GLfloat  r, GLfloat  g, GLfloat  b, GLfloat  a, GLfloat  nx, GLfloat  ny, GLfloat  nz, GLfloat  x, GLfloat  y, GLfloat  z);
// typedef void  (APIENTRYP PREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUN)(const GLuint * rc, const GLfloat * c, const GLfloat * n, const GLfloat * v);
// typedef void  (APIENTRYP PREPLACEMENTCODEUICOLOR4UBVERTEX3FSUN)(GLuint  rc, GLubyte  r, GLubyte  g, GLubyte  b, GLubyte  a, GLfloat  x, GLfloat  y, GLfloat  z);
// typedef void  (APIENTRYP PREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUN)(const GLuint * rc, const GLubyte * c, const GLfloat * v);
// typedef void  (APIENTRYP PREPLACEMENTCODEUINORMAL3FVERTEX3FSUN)(GLuint  rc, GLfloat  nx, GLfloat  ny, GLfloat  nz, GLfloat  x, GLfloat  y, GLfloat  z);
// typedef void  (APIENTRYP PREPLACEMENTCODEUINORMAL3FVERTEX3FVSUN)(const GLuint * rc, const GLfloat * n, const GLfloat * v);
// typedef void  (APIENTRYP PREPLACEMENTCODEUISUN)(GLuint  code);
// typedef void  (APIENTRYP PREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUN)(GLuint  rc, GLfloat  s, GLfloat  t, GLfloat  r, GLfloat  g, GLfloat  b, GLfloat  a, GLfloat  nx, GLfloat  ny, GLfloat  nz, GLfloat  x, GLfloat  y, GLfloat  z);
// typedef void  (APIENTRYP PREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUN)(const GLuint * rc, const GLfloat * tc, const GLfloat * c, const GLfloat * n, const GLfloat * v);
// typedef void  (APIENTRYP PREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUN)(GLuint  rc, GLfloat  s, GLfloat  t, GLfloat  nx, GLfloat  ny, GLfloat  nz, GLfloat  x, GLfloat  y, GLfloat  z);
// typedef void  (APIENTRYP PREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUN)(const GLuint * rc, const GLfloat * tc, const GLfloat * n, const GLfloat * v);
// typedef void  (APIENTRYP PREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUN)(GLuint  rc, GLfloat  s, GLfloat  t, GLfloat  x, GLfloat  y, GLfloat  z);
// typedef void  (APIENTRYP PREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUN)(const GLuint * rc, const GLfloat * tc, const GLfloat * v);
// typedef void  (APIENTRYP PREPLACEMENTCODEUIVERTEX3FSUN)(GLuint  rc, GLfloat  x, GLfloat  y, GLfloat  z);
// typedef void  (APIENTRYP PREPLACEMENTCODEUIVERTEX3FVSUN)(const GLuint * rc, const GLfloat * v);
// typedef void  (APIENTRYP PREPLACEMENTCODEUIVSUN)(const GLuint * code);
// typedef void  (APIENTRYP PREPLACEMENTCODEUSSUN)(GLushort  code);
// typedef void  (APIENTRYP PREPLACEMENTCODEUSVSUN)(const GLushort * code);
// typedef void  (APIENTRYP PREQUESTRESIDENTPROGRAMSNV)(GLsizei  n, const GLuint * programs);
// typedef void  (APIENTRYP PRESETHISTOGRAMEXT)(GLenum  target);
// typedef void  (APIENTRYP PRESETMINMAXEXT)(GLenum  target);
// typedef void  (APIENTRYP PRESIZEBUFFERSMESA)();
// typedef void  (APIENTRYP PRESUMETRANSFORMFEEDBACK)();
// typedef void  (APIENTRYP PRESUMETRANSFORMFEEDBACKNV)();
// typedef void  (APIENTRYP PROTATEXOES)(GLfixed  angle, GLfixed  x, GLfixed  y, GLfixed  z);
// typedef void  (APIENTRYP PSAMPLECOVERAGE)(GLfloat  value, GLboolean  invert);
// typedef void  (APIENTRYP PSAMPLECOVERAGEARB)(GLfloat  value, GLboolean  invert);
// typedef void  (APIENTRYP PSAMPLECOVERAGEOES)(GLfixed  value, GLboolean  invert);
// typedef void  (APIENTRYP PSAMPLECOVERAGEXOES)(GLclampx  value, GLboolean  invert);
// typedef void  (APIENTRYP PSAMPLEMAPATI)(GLuint  dst, GLuint  interp, GLenum  swizzle);
// typedef void  (APIENTRYP PSAMPLEMASKEXT)(GLclampf  value, GLboolean  invert);
// typedef void  (APIENTRYP PSAMPLEMASKINDEXEDNV)(GLuint  index, GLbitfield  mask);
// typedef void  (APIENTRYP PSAMPLEMASKSGIS)(GLclampf  value, GLboolean  invert);
// typedef void  (APIENTRYP PSAMPLEMASKI)(GLuint  maskNumber, GLbitfield  mask);
// typedef void  (APIENTRYP PSAMPLEPATTERNEXT)(GLenum  pattern);
// typedef void  (APIENTRYP PSAMPLEPATTERNSGIS)(GLenum  pattern);
// typedef void  (APIENTRYP PSAMPLERPARAMETERIIV)(GLuint  sampler, GLenum  pname, const GLint * param);
// typedef void  (APIENTRYP PSAMPLERPARAMETERIUIV)(GLuint  sampler, GLenum  pname, const GLuint * param);
// typedef void  (APIENTRYP PSAMPLERPARAMETERF)(GLuint  sampler, GLenum  pname, GLfloat  param);
// typedef void  (APIENTRYP PSAMPLERPARAMETERFV)(GLuint  sampler, GLenum  pname, const GLfloat * param);
// typedef void  (APIENTRYP PSAMPLERPARAMETERI)(GLuint  sampler, GLenum  pname, GLint  param);
// typedef void  (APIENTRYP PSAMPLERPARAMETERIV)(GLuint  sampler, GLenum  pname, const GLint * param);
// typedef void  (APIENTRYP PSCALEXOES)(GLfixed  x, GLfixed  y, GLfixed  z);
// typedef void  (APIENTRYP PSCISSOR)(GLint  x, GLint  y, GLsizei  width, GLsizei  height);
// typedef void  (APIENTRYP PSCISSORARRAYV)(GLuint  first, GLsizei  count, const GLint * v);
// typedef void  (APIENTRYP PSCISSORINDEXED)(GLuint  index, GLint  left, GLint  bottom, GLsizei  width, GLsizei  height);
// typedef void  (APIENTRYP PSCISSORINDEXEDV)(GLuint  index, const GLint * v);
// typedef void  (APIENTRYP PSECONDARYCOLOR3BEXT)(GLbyte  red, GLbyte  green, GLbyte  blue);
// typedef void  (APIENTRYP PSECONDARYCOLOR3BVEXT)(const GLbyte * v);
// typedef void  (APIENTRYP PSECONDARYCOLOR3DEXT)(GLdouble  red, GLdouble  green, GLdouble  blue);
// typedef void  (APIENTRYP PSECONDARYCOLOR3DVEXT)(const GLdouble * v);
// typedef void  (APIENTRYP PSECONDARYCOLOR3FEXT)(GLfloat  red, GLfloat  green, GLfloat  blue);
// typedef void  (APIENTRYP PSECONDARYCOLOR3FVEXT)(const GLfloat * v);
// typedef void  (APIENTRYP PSECONDARYCOLOR3HNV)(GLhalfNV  red, GLhalfNV  green, GLhalfNV  blue);
// typedef void  (APIENTRYP PSECONDARYCOLOR3HVNV)(const GLhalfNV * v);
// typedef void  (APIENTRYP PSECONDARYCOLOR3IEXT)(GLint  red, GLint  green, GLint  blue);
// typedef void  (APIENTRYP PSECONDARYCOLOR3IVEXT)(const GLint * v);
// typedef void  (APIENTRYP PSECONDARYCOLOR3SEXT)(GLshort  red, GLshort  green, GLshort  blue);
// typedef void  (APIENTRYP PSECONDARYCOLOR3SVEXT)(const GLshort * v);
// typedef void  (APIENTRYP PSECONDARYCOLOR3UBEXT)(GLubyte  red, GLubyte  green, GLubyte  blue);
// typedef void  (APIENTRYP PSECONDARYCOLOR3UBVEXT)(const GLubyte * v);
// typedef void  (APIENTRYP PSECONDARYCOLOR3UIEXT)(GLuint  red, GLuint  green, GLuint  blue);
// typedef void  (APIENTRYP PSECONDARYCOLOR3UIVEXT)(const GLuint * v);
// typedef void  (APIENTRYP PSECONDARYCOLOR3USEXT)(GLushort  red, GLushort  green, GLushort  blue);
// typedef void  (APIENTRYP PSECONDARYCOLOR3USVEXT)(const GLushort * v);
// typedef void  (APIENTRYP PSECONDARYCOLORFORMATNV)(GLint  size, GLenum  type, GLsizei  stride);
// typedef void  (APIENTRYP PSECONDARYCOLORPOINTEREXT)(GLint  size, GLenum  type, GLsizei  stride, const void * pointer);
// typedef void  (APIENTRYP PSECONDARYCOLORPOINTERLISTIBM)(GLint  size, GLenum  type, GLint  stride, const void ** pointer, GLint  ptrstride);
// typedef void  (APIENTRYP PSELECTPERFMONITORCOUNTERSAMD)(GLuint  monitor, GLboolean  enable, GLuint  group, GLint  numCounters, GLuint * counterList);
// typedef void  (APIENTRYP PSEPARABLEFILTER2DEXT)(GLenum  target, GLenum  internalformat, GLsizei  width, GLsizei  height, GLenum  format, GLenum  type, const void * row, const void * column);
// typedef void  (APIENTRYP PSETFENCEAPPLE)(GLuint  fence);
// typedef void  (APIENTRYP PSETFENCENV)(GLuint  fence, GLenum  condition);
// typedef void  (APIENTRYP PSETFRAGMENTSHADERCONSTANTATI)(GLuint  dst, const GLfloat * value);
// typedef void  (APIENTRYP PSETINVARIANTEXT)(GLuint  id, GLenum  type, const void * addr);
// typedef void  (APIENTRYP PSETLOCALCONSTANTEXT)(GLuint  id, GLenum  type, const void * addr);
// typedef void  (APIENTRYP PSETMULTISAMPLEFVAMD)(GLenum  pname, GLuint  index, const GLfloat * val);
// typedef void  (APIENTRYP PSHADERBINARY)(GLsizei  count, const GLuint * shaders, GLenum  binaryformat, const void * binary, GLsizei  length);
// typedef void  (APIENTRYP PSHADEROP1EXT)(GLenum  op, GLuint  res, GLuint  arg1);
// typedef void  (APIENTRYP PSHADEROP2EXT)(GLenum  op, GLuint  res, GLuint  arg1, GLuint  arg2);
// typedef void  (APIENTRYP PSHADEROP3EXT)(GLenum  op, GLuint  res, GLuint  arg1, GLuint  arg2, GLuint  arg3);
// typedef void  (APIENTRYP PSHADERSOURCE)(GLuint  shader, GLsizei  count, const GLchar *const* string, const GLint * length);
// typedef void  (APIENTRYP PSHADERSOURCEARB)(GLhandleARB  shaderObj, GLsizei  count, const GLcharARB ** string, const GLint * length);
// typedef void  (APIENTRYP PSHADERSTORAGEBLOCKBINDING)(GLuint  program, GLuint  storageBlockIndex, GLuint  storageBlockBinding);
// typedef void  (APIENTRYP PSHARPENTEXFUNCSGIS)(GLenum  target, GLsizei  n, const GLfloat * points);
// typedef void  (APIENTRYP PSPRITEPARAMETERFSGIX)(GLenum  pname, GLfloat  param);
// typedef void  (APIENTRYP PSPRITEPARAMETERFVSGIX)(GLenum  pname, const GLfloat * params);
// typedef void  (APIENTRYP PSPRITEPARAMETERISGIX)(GLenum  pname, GLint  param);
// typedef void  (APIENTRYP PSPRITEPARAMETERIVSGIX)(GLenum  pname, const GLint * params);
// typedef void  (APIENTRYP PSTARTINSTRUMENTSSGIX)();
// typedef void  (APIENTRYP PSTENCILCLEARTAGEXT)(GLsizei  stencilTagBits, GLuint  stencilClearTag);
// typedef void  (APIENTRYP PSTENCILFILLPATHINSTANCEDNV)(GLsizei  numPaths, GLenum  pathNameType, const void * paths, GLuint  pathBase, GLenum  fillMode, GLuint  mask, GLenum  transformType, const GLfloat * transformValues);
// typedef void  (APIENTRYP PSTENCILFILLPATHNV)(GLuint  path, GLenum  fillMode, GLuint  mask);
// typedef void  (APIENTRYP PSTENCILFUNC)(GLenum  func, GLint  ref, GLuint  mask);
// typedef void  (APIENTRYP PSTENCILFUNCSEPARATE)(GLenum  face, GLenum  func, GLint  ref, GLuint  mask);
// typedef void  (APIENTRYP PSTENCILFUNCSEPARATEATI)(GLenum  frontfunc, GLenum  backfunc, GLint  ref, GLuint  mask);
// typedef void  (APIENTRYP PSTENCILMASK)(GLuint  mask);
// typedef void  (APIENTRYP PSTENCILMASKSEPARATE)(GLenum  face, GLuint  mask);
// typedef void  (APIENTRYP PSTENCILOP)(GLenum  fail, GLenum  zfail, GLenum  zpass);
// typedef void  (APIENTRYP PSTENCILOPSEPARATE)(GLenum  face, GLenum  sfail, GLenum  dpfail, GLenum  dppass);
// typedef void  (APIENTRYP PSTENCILOPSEPARATEATI)(GLenum  face, GLenum  sfail, GLenum  dpfail, GLenum  dppass);
// typedef void  (APIENTRYP PSTENCILOPVALUEAMD)(GLenum  face, GLuint  value);
// typedef void  (APIENTRYP PSTENCILSTROKEPATHINSTANCEDNV)(GLsizei  numPaths, GLenum  pathNameType, const void * paths, GLuint  pathBase, GLint  reference, GLuint  mask, GLenum  transformType, const GLfloat * transformValues);
// typedef void  (APIENTRYP PSTENCILSTROKEPATHNV)(GLuint  path, GLint  reference, GLuint  mask);
// typedef void  (APIENTRYP PSTOPINSTRUMENTSSGIX)(GLint  marker);
// typedef void  (APIENTRYP PSTRINGMARKERGREMEDY)(GLsizei  len, const void * string);
// typedef void  (APIENTRYP PSWIZZLEEXT)(GLuint  res, GLuint  in, GLenum  outX, GLenum  outY, GLenum  outZ, GLenum  outW);
// typedef void  (APIENTRYP PSYNCTEXTUREINTEL)(GLuint  texture);
// typedef void  (APIENTRYP PTAGSAMPLEBUFFERSGIX)();
// typedef void  (APIENTRYP PTANGENT3BEXT)(GLbyte  tx, GLbyte  ty, GLbyte  tz);
// typedef void  (APIENTRYP PTANGENT3BVEXT)(const GLbyte * v);
// typedef void  (APIENTRYP PTANGENT3DEXT)(GLdouble  tx, GLdouble  ty, GLdouble  tz);
// typedef void  (APIENTRYP PTANGENT3DVEXT)(const GLdouble * v);
// typedef void  (APIENTRYP PTANGENT3FEXT)(GLfloat  tx, GLfloat  ty, GLfloat  tz);
// typedef void  (APIENTRYP PTANGENT3FVEXT)(const GLfloat * v);
// typedef void  (APIENTRYP PTANGENT3IEXT)(GLint  tx, GLint  ty, GLint  tz);
// typedef void  (APIENTRYP PTANGENT3IVEXT)(const GLint * v);
// typedef void  (APIENTRYP PTANGENT3SEXT)(GLshort  tx, GLshort  ty, GLshort  tz);
// typedef void  (APIENTRYP PTANGENT3SVEXT)(const GLshort * v);
// typedef void  (APIENTRYP PTANGENTPOINTEREXT)(GLenum  type, GLsizei  stride, const void * pointer);
// typedef void  (APIENTRYP PTBUFFERMASK3DFX)(GLuint  mask);
// typedef void  (APIENTRYP PTESSELLATIONFACTORAMD)(GLfloat  factor);
// typedef void  (APIENTRYP PTESSELLATIONMODEAMD)(GLenum  mode);
// typedef GLboolean  (APIENTRYP PTESTFENCEAPPLE)(GLuint  fence);
// typedef GLboolean  (APIENTRYP PTESTFENCENV)(GLuint  fence);
// typedef GLboolean  (APIENTRYP PTESTOBJECTAPPLE)(GLenum  object, GLuint  name);
// typedef void  (APIENTRYP PTEXBUFFER)(GLenum  target, GLenum  internalformat, GLuint  buffer);
// typedef void  (APIENTRYP PTEXBUFFERARB)(GLenum  target, GLenum  internalformat, GLuint  buffer);
// typedef void  (APIENTRYP PTEXBUFFEREXT)(GLenum  target, GLenum  internalformat, GLuint  buffer);
// typedef void  (APIENTRYP PTEXBUFFERRANGE)(GLenum  target, GLenum  internalformat, GLuint  buffer, GLintptr  offset, GLsizeiptr  size);
// typedef void  (APIENTRYP PTEXBUMPPARAMETERFVATI)(GLenum  pname, const GLfloat * param);
// typedef void  (APIENTRYP PTEXBUMPPARAMETERIVATI)(GLenum  pname, const GLint * param);
// typedef void  (APIENTRYP PTEXCOORD1BOES)(GLbyte  s);
// typedef void  (APIENTRYP PTEXCOORD1BVOES)(const GLbyte * coords);
// typedef void  (APIENTRYP PTEXCOORD1HNV)(GLhalfNV  s);
// typedef void  (APIENTRYP PTEXCOORD1HVNV)(const GLhalfNV * v);
// typedef void  (APIENTRYP PTEXCOORD1XOES)(GLfixed  s);
// typedef void  (APIENTRYP PTEXCOORD1XVOES)(const GLfixed * coords);
// typedef void  (APIENTRYP PTEXCOORD2BOES)(GLbyte  s, GLbyte  t);
// typedef void  (APIENTRYP PTEXCOORD2BVOES)(const GLbyte * coords);
// typedef void  (APIENTRYP PTEXCOORD2FCOLOR3FVERTEX3FSUN)(GLfloat  s, GLfloat  t, GLfloat  r, GLfloat  g, GLfloat  b, GLfloat  x, GLfloat  y, GLfloat  z);
// typedef void  (APIENTRYP PTEXCOORD2FCOLOR3FVERTEX3FVSUN)(const GLfloat * tc, const GLfloat * c, const GLfloat * v);
// typedef void  (APIENTRYP PTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUN)(GLfloat  s, GLfloat  t, GLfloat  r, GLfloat  g, GLfloat  b, GLfloat  a, GLfloat  nx, GLfloat  ny, GLfloat  nz, GLfloat  x, GLfloat  y, GLfloat  z);
// typedef void  (APIENTRYP PTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUN)(const GLfloat * tc, const GLfloat * c, const GLfloat * n, const GLfloat * v);
// typedef void  (APIENTRYP PTEXCOORD2FCOLOR4UBVERTEX3FSUN)(GLfloat  s, GLfloat  t, GLubyte  r, GLubyte  g, GLubyte  b, GLubyte  a, GLfloat  x, GLfloat  y, GLfloat  z);
// typedef void  (APIENTRYP PTEXCOORD2FCOLOR4UBVERTEX3FVSUN)(const GLfloat * tc, const GLubyte * c, const GLfloat * v);
// typedef void  (APIENTRYP PTEXCOORD2FNORMAL3FVERTEX3FSUN)(GLfloat  s, GLfloat  t, GLfloat  nx, GLfloat  ny, GLfloat  nz, GLfloat  x, GLfloat  y, GLfloat  z);
// typedef void  (APIENTRYP PTEXCOORD2FNORMAL3FVERTEX3FVSUN)(const GLfloat * tc, const GLfloat * n, const GLfloat * v);
// typedef void  (APIENTRYP PTEXCOORD2FVERTEX3FSUN)(GLfloat  s, GLfloat  t, GLfloat  x, GLfloat  y, GLfloat  z);
// typedef void  (APIENTRYP PTEXCOORD2FVERTEX3FVSUN)(const GLfloat * tc, const GLfloat * v);
// typedef void  (APIENTRYP PTEXCOORD2HNV)(GLhalfNV  s, GLhalfNV  t);
// typedef void  (APIENTRYP PTEXCOORD2HVNV)(const GLhalfNV * v);
// typedef void  (APIENTRYP PTEXCOORD2XOES)(GLfixed  s, GLfixed  t);
// typedef void  (APIENTRYP PTEXCOORD2XVOES)(const GLfixed * coords);
// typedef void  (APIENTRYP PTEXCOORD3BOES)(GLbyte  s, GLbyte  t, GLbyte  r);
// typedef void  (APIENTRYP PTEXCOORD3BVOES)(const GLbyte * coords);
// typedef void  (APIENTRYP PTEXCOORD3HNV)(GLhalfNV  s, GLhalfNV  t, GLhalfNV  r);
// typedef void  (APIENTRYP PTEXCOORD3HVNV)(const GLhalfNV * v);
// typedef void  (APIENTRYP PTEXCOORD3XOES)(GLfixed  s, GLfixed  t, GLfixed  r);
// typedef void  (APIENTRYP PTEXCOORD3XVOES)(const GLfixed * coords);
// typedef void  (APIENTRYP PTEXCOORD4BOES)(GLbyte  s, GLbyte  t, GLbyte  r, GLbyte  q);
// typedef void  (APIENTRYP PTEXCOORD4BVOES)(const GLbyte * coords);
// typedef void  (APIENTRYP PTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUN)(GLfloat  s, GLfloat  t, GLfloat  p, GLfloat  q, GLfloat  r, GLfloat  g, GLfloat  b, GLfloat  a, GLfloat  nx, GLfloat  ny, GLfloat  nz, GLfloat  x, GLfloat  y, GLfloat  z, GLfloat  w);
// typedef void  (APIENTRYP PTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUN)(const GLfloat * tc, const GLfloat * c, const GLfloat * n, const GLfloat * v);
// typedef void  (APIENTRYP PTEXCOORD4FVERTEX4FSUN)(GLfloat  s, GLfloat  t, GLfloat  p, GLfloat  q, GLfloat  x, GLfloat  y, GLfloat  z, GLfloat  w);
// typedef void  (APIENTRYP PTEXCOORD4FVERTEX4FVSUN)(const GLfloat * tc, const GLfloat * v);
// typedef void  (APIENTRYP PTEXCOORD4HNV)(GLhalfNV  s, GLhalfNV  t, GLhalfNV  r, GLhalfNV  q);
// typedef void  (APIENTRYP PTEXCOORD4HVNV)(const GLhalfNV * v);
// typedef void  (APIENTRYP PTEXCOORD4XOES)(GLfixed  s, GLfixed  t, GLfixed  r, GLfixed  q);
// typedef void  (APIENTRYP PTEXCOORD4XVOES)(const GLfixed * coords);
// typedef void  (APIENTRYP PTEXCOORDFORMATNV)(GLint  size, GLenum  type, GLsizei  stride);
// typedef void  (APIENTRYP PTEXCOORDPOINTEREXT)(GLint  size, GLenum  type, GLsizei  stride, GLsizei  count, const void * pointer);
// typedef void  (APIENTRYP PTEXCOORDPOINTERLISTIBM)(GLint  size, GLenum  type, GLint  stride, const void ** pointer, GLint  ptrstride);
// typedef void  (APIENTRYP PTEXCOORDPOINTERVINTEL)(GLint  size, GLenum  type, const void ** pointer);
// typedef void  (APIENTRYP PTEXENVXOES)(GLenum  target, GLenum  pname, GLfixed  param);
// typedef void  (APIENTRYP PTEXENVXVOES)(GLenum  target, GLenum  pname, const GLfixed * params);
// typedef void  (APIENTRYP PTEXFILTERFUNCSGIS)(GLenum  target, GLenum  filter, GLsizei  n, const GLfloat * weights);
// typedef void  (APIENTRYP PTEXGENXOES)(GLenum  coord, GLenum  pname, GLfixed  param);
// typedef void  (APIENTRYP PTEXGENXVOES)(GLenum  coord, GLenum  pname, const GLfixed * params);
// typedef void  (APIENTRYP PTEXIMAGE1D)(GLenum  target, GLint  level, GLint  internalformat, GLsizei  width, GLint  border, GLenum  format, GLenum  type, const void * pixels);
// typedef void  (APIENTRYP PTEXIMAGE2D)(GLenum  target, GLint  level, GLint  internalformat, GLsizei  width, GLsizei  height, GLint  border, GLenum  format, GLenum  type, const void * pixels);
// typedef void  (APIENTRYP PTEXIMAGE2DMULTISAMPLE)(GLenum  target, GLsizei  samples, GLenum  internalformat, GLsizei  width, GLsizei  height, GLboolean  fixedsamplelocations);
// typedef void  (APIENTRYP PTEXIMAGE2DMULTISAMPLECOVERAGENV)(GLenum  target, GLsizei  coverageSamples, GLsizei  colorSamples, GLint  internalFormat, GLsizei  width, GLsizei  height, GLboolean  fixedSampleLocations);
// typedef void  (APIENTRYP PTEXIMAGE3D)(GLenum  target, GLint  level, GLint  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth, GLint  border, GLenum  format, GLenum  type, const void * pixels);
// typedef void  (APIENTRYP PTEXIMAGE3DEXT)(GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth, GLint  border, GLenum  format, GLenum  type, const void * pixels);
// typedef void  (APIENTRYP PTEXIMAGE3DMULTISAMPLE)(GLenum  target, GLsizei  samples, GLenum  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth, GLboolean  fixedsamplelocations);
// typedef void  (APIENTRYP PTEXIMAGE3DMULTISAMPLECOVERAGENV)(GLenum  target, GLsizei  coverageSamples, GLsizei  colorSamples, GLint  internalFormat, GLsizei  width, GLsizei  height, GLsizei  depth, GLboolean  fixedSampleLocations);
// typedef void  (APIENTRYP PTEXIMAGE4DSGIS)(GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth, GLsizei  size4d, GLint  border, GLenum  format, GLenum  type, const void * pixels);
// typedef void  (APIENTRYP PTEXPAGECOMMITMENTARB)(GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLsizei  width, GLsizei  height, GLsizei  depth, GLboolean  resident);
// typedef void  (APIENTRYP PTEXPARAMETERIIV)(GLenum  target, GLenum  pname, const GLint * params);
// typedef void  (APIENTRYP PTEXPARAMETERIIVEXT)(GLenum  target, GLenum  pname, const GLint * params);
// typedef void  (APIENTRYP PTEXPARAMETERIUIV)(GLenum  target, GLenum  pname, const GLuint * params);
// typedef void  (APIENTRYP PTEXPARAMETERIUIVEXT)(GLenum  target, GLenum  pname, const GLuint * params);
// typedef void  (APIENTRYP PTEXPARAMETERF)(GLenum  target, GLenum  pname, GLfloat  param);
// typedef void  (APIENTRYP PTEXPARAMETERFV)(GLenum  target, GLenum  pname, const GLfloat * params);
// typedef void  (APIENTRYP PTEXPARAMETERI)(GLenum  target, GLenum  pname, GLint  param);
// typedef void  (APIENTRYP PTEXPARAMETERIV)(GLenum  target, GLenum  pname, const GLint * params);
// typedef void  (APIENTRYP PTEXPARAMETERXOES)(GLenum  target, GLenum  pname, GLfixed  param);
// typedef void  (APIENTRYP PTEXPARAMETERXVOES)(GLenum  target, GLenum  pname, const GLfixed * params);
// typedef void  (APIENTRYP PTEXRENDERBUFFERNV)(GLenum  target, GLuint  renderbuffer);
// typedef void  (APIENTRYP PTEXSTORAGE1D)(GLenum  target, GLsizei  levels, GLenum  internalformat, GLsizei  width);
// typedef void  (APIENTRYP PTEXSTORAGE2D)(GLenum  target, GLsizei  levels, GLenum  internalformat, GLsizei  width, GLsizei  height);
// typedef void  (APIENTRYP PTEXSTORAGE2DMULTISAMPLE)(GLenum  target, GLsizei  samples, GLenum  internalformat, GLsizei  width, GLsizei  height, GLboolean  fixedsamplelocations);
// typedef void  (APIENTRYP PTEXSTORAGE3D)(GLenum  target, GLsizei  levels, GLenum  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth);
// typedef void  (APIENTRYP PTEXSTORAGE3DMULTISAMPLE)(GLenum  target, GLsizei  samples, GLenum  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth, GLboolean  fixedsamplelocations);
// typedef void  (APIENTRYP PTEXSTORAGESPARSEAMD)(GLenum  target, GLenum  internalFormat, GLsizei  width, GLsizei  height, GLsizei  depth, GLsizei  layers, GLbitfield  flags);
// typedef void  (APIENTRYP PTEXSUBIMAGE1D)(GLenum  target, GLint  level, GLint  xoffset, GLsizei  width, GLenum  format, GLenum  type, const void * pixels);
// typedef void  (APIENTRYP PTEXSUBIMAGE1DEXT)(GLenum  target, GLint  level, GLint  xoffset, GLsizei  width, GLenum  format, GLenum  type, const void * pixels);
// typedef void  (APIENTRYP PTEXSUBIMAGE2D)(GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLsizei  width, GLsizei  height, GLenum  format, GLenum  type, const void * pixels);
// typedef void  (APIENTRYP PTEXSUBIMAGE2DEXT)(GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLsizei  width, GLsizei  height, GLenum  format, GLenum  type, const void * pixels);
// typedef void  (APIENTRYP PTEXSUBIMAGE3D)(GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLsizei  width, GLsizei  height, GLsizei  depth, GLenum  format, GLenum  type, const void * pixels);
// typedef void  (APIENTRYP PTEXSUBIMAGE3DEXT)(GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLsizei  width, GLsizei  height, GLsizei  depth, GLenum  format, GLenum  type, const void * pixels);
// typedef void  (APIENTRYP PTEXSUBIMAGE4DSGIS)(GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLint  woffset, GLsizei  width, GLsizei  height, GLsizei  depth, GLsizei  size4d, GLenum  format, GLenum  type, const void * pixels);
// typedef void  (APIENTRYP PTEXTUREBARRIERNV)();
// typedef void  (APIENTRYP PTEXTUREBUFFEREXT)(GLuint  texture, GLenum  target, GLenum  internalformat, GLuint  buffer);
// typedef void  (APIENTRYP PTEXTUREBUFFERRANGEEXT)(GLuint  texture, GLenum  target, GLenum  internalformat, GLuint  buffer, GLintptr  offset, GLsizeiptr  size);
// typedef void  (APIENTRYP PTEXTURECOLORMASKSGIS)(GLboolean  red, GLboolean  green, GLboolean  blue, GLboolean  alpha);
// typedef void  (APIENTRYP PTEXTUREIMAGE1DEXT)(GLuint  texture, GLenum  target, GLint  level, GLint  internalformat, GLsizei  width, GLint  border, GLenum  format, GLenum  type, const void * pixels);
// typedef void  (APIENTRYP PTEXTUREIMAGE2DEXT)(GLuint  texture, GLenum  target, GLint  level, GLint  internalformat, GLsizei  width, GLsizei  height, GLint  border, GLenum  format, GLenum  type, const void * pixels);
// typedef void  (APIENTRYP PTEXTUREIMAGE2DMULTISAMPLECOVERAGENV)(GLuint  texture, GLenum  target, GLsizei  coverageSamples, GLsizei  colorSamples, GLint  internalFormat, GLsizei  width, GLsizei  height, GLboolean  fixedSampleLocations);
// typedef void  (APIENTRYP PTEXTUREIMAGE2DMULTISAMPLENV)(GLuint  texture, GLenum  target, GLsizei  samples, GLint  internalFormat, GLsizei  width, GLsizei  height, GLboolean  fixedSampleLocations);
// typedef void  (APIENTRYP PTEXTUREIMAGE3DEXT)(GLuint  texture, GLenum  target, GLint  level, GLint  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth, GLint  border, GLenum  format, GLenum  type, const void * pixels);
// typedef void  (APIENTRYP PTEXTUREIMAGE3DMULTISAMPLECOVERAGENV)(GLuint  texture, GLenum  target, GLsizei  coverageSamples, GLsizei  colorSamples, GLint  internalFormat, GLsizei  width, GLsizei  height, GLsizei  depth, GLboolean  fixedSampleLocations);
// typedef void  (APIENTRYP PTEXTUREIMAGE3DMULTISAMPLENV)(GLuint  texture, GLenum  target, GLsizei  samples, GLint  internalFormat, GLsizei  width, GLsizei  height, GLsizei  depth, GLboolean  fixedSampleLocations);
// typedef void  (APIENTRYP PTEXTURELIGHTEXT)(GLenum  pname);
// typedef void  (APIENTRYP PTEXTUREMATERIALEXT)(GLenum  face, GLenum  mode);
// typedef void  (APIENTRYP PTEXTURENORMALEXT)(GLenum  mode);
// typedef void  (APIENTRYP PTEXTUREPAGECOMMITMENTEXT)(GLuint  texture, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLsizei  width, GLsizei  height, GLsizei  depth, GLboolean  resident);
// typedef void  (APIENTRYP PTEXTUREPARAMETERIIVEXT)(GLuint  texture, GLenum  target, GLenum  pname, const GLint * params);
// typedef void  (APIENTRYP PTEXTUREPARAMETERIUIVEXT)(GLuint  texture, GLenum  target, GLenum  pname, const GLuint * params);
// typedef void  (APIENTRYP PTEXTUREPARAMETERFEXT)(GLuint  texture, GLenum  target, GLenum  pname, GLfloat  param);
// typedef void  (APIENTRYP PTEXTUREPARAMETERFVEXT)(GLuint  texture, GLenum  target, GLenum  pname, const GLfloat * params);
// typedef void  (APIENTRYP PTEXTUREPARAMETERIEXT)(GLuint  texture, GLenum  target, GLenum  pname, GLint  param);
// typedef void  (APIENTRYP PTEXTUREPARAMETERIVEXT)(GLuint  texture, GLenum  target, GLenum  pname, const GLint * params);
// typedef void  (APIENTRYP PTEXTURERANGEAPPLE)(GLenum  target, GLsizei  length, const void * pointer);
// typedef void  (APIENTRYP PTEXTURERENDERBUFFEREXT)(GLuint  texture, GLenum  target, GLuint  renderbuffer);
// typedef void  (APIENTRYP PTEXTURESTORAGE1DEXT)(GLuint  texture, GLenum  target, GLsizei  levels, GLenum  internalformat, GLsizei  width);
// typedef void  (APIENTRYP PTEXTURESTORAGE2DEXT)(GLuint  texture, GLenum  target, GLsizei  levels, GLenum  internalformat, GLsizei  width, GLsizei  height);
// typedef void  (APIENTRYP PTEXTURESTORAGE2DMULTISAMPLEEXT)(GLuint  texture, GLenum  target, GLsizei  samples, GLenum  internalformat, GLsizei  width, GLsizei  height, GLboolean  fixedsamplelocations);
// typedef void  (APIENTRYP PTEXTURESTORAGE3DEXT)(GLuint  texture, GLenum  target, GLsizei  levels, GLenum  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth);
// typedef void  (APIENTRYP PTEXTURESTORAGE3DMULTISAMPLEEXT)(GLuint  texture, GLenum  target, GLsizei  samples, GLenum  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth, GLboolean  fixedsamplelocations);
// typedef void  (APIENTRYP PTEXTURESTORAGESPARSEAMD)(GLuint  texture, GLenum  target, GLenum  internalFormat, GLsizei  width, GLsizei  height, GLsizei  depth, GLsizei  layers, GLbitfield  flags);
// typedef void  (APIENTRYP PTEXTURESUBIMAGE1DEXT)(GLuint  texture, GLenum  target, GLint  level, GLint  xoffset, GLsizei  width, GLenum  format, GLenum  type, const void * pixels);
// typedef void  (APIENTRYP PTEXTURESUBIMAGE2DEXT)(GLuint  texture, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLsizei  width, GLsizei  height, GLenum  format, GLenum  type, const void * pixels);
// typedef void  (APIENTRYP PTEXTURESUBIMAGE3DEXT)(GLuint  texture, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLsizei  width, GLsizei  height, GLsizei  depth, GLenum  format, GLenum  type, const void * pixels);
// typedef void  (APIENTRYP PTEXTUREVIEW)(GLuint  texture, GLenum  target, GLuint  origtexture, GLenum  internalformat, GLuint  minlevel, GLuint  numlevels, GLuint  minlayer, GLuint  numlayers);
// typedef void  (APIENTRYP PTRACKMATRIXNV)(GLenum  target, GLuint  address, GLenum  matrix, GLenum  transform);
// typedef void  (APIENTRYP PTRANSFORMFEEDBACKATTRIBSNV)(GLuint  count, const GLint * attribs, GLenum  bufferMode);
// typedef void  (APIENTRYP PTRANSFORMFEEDBACKSTREAMATTRIBSNV)(GLsizei  count, const GLint * attribs, GLsizei  nbuffers, const GLint * bufstreams, GLenum  bufferMode);
// typedef void  (APIENTRYP PTRANSFORMFEEDBACKVARYINGS)(GLuint  program, GLsizei  count, const GLchar *const* varyings, GLenum  bufferMode);
// typedef void  (APIENTRYP PTRANSFORMFEEDBACKVARYINGSEXT)(GLuint  program, GLsizei  count, const GLchar *const* varyings, GLenum  bufferMode);
// typedef void  (APIENTRYP PTRANSFORMFEEDBACKVARYINGSNV)(GLuint  program, GLsizei  count, const GLint * locations, GLenum  bufferMode);
// typedef void  (APIENTRYP PTRANSFORMPATHNV)(GLuint  resultPath, GLuint  srcPath, GLenum  transformType, const GLfloat * transformValues);
// typedef void  (APIENTRYP PTRANSLATEXOES)(GLfixed  x, GLfixed  y, GLfixed  z);
// typedef void  (APIENTRYP PUNIFORM1D)(GLint  location, GLdouble  x);
// typedef void  (APIENTRYP PUNIFORM1DV)(GLint  location, GLsizei  count, const GLdouble * value);
// typedef void  (APIENTRYP PUNIFORM1F)(GLint  location, GLfloat  v0);
// typedef void  (APIENTRYP PUNIFORM1FARB)(GLint  location, GLfloat  v0);
// typedef void  (APIENTRYP PUNIFORM1FV)(GLint  location, GLsizei  count, const GLfloat * value);
// typedef void  (APIENTRYP PUNIFORM1FVARB)(GLint  location, GLsizei  count, const GLfloat * value);
// typedef void  (APIENTRYP PUNIFORM1I)(GLint  location, GLint  v0);
// typedef void  (APIENTRYP PUNIFORM1I64NV)(GLint  location, GLint64EXT  x);
// typedef void  (APIENTRYP PUNIFORM1I64VNV)(GLint  location, GLsizei  count, const GLint64EXT * value);
// typedef void  (APIENTRYP PUNIFORM1IARB)(GLint  location, GLint  v0);
// typedef void  (APIENTRYP PUNIFORM1IV)(GLint  location, GLsizei  count, const GLint * value);
// typedef void  (APIENTRYP PUNIFORM1IVARB)(GLint  location, GLsizei  count, const GLint * value);
// typedef void  (APIENTRYP PUNIFORM1UI)(GLint  location, GLuint  v0);
// typedef void  (APIENTRYP PUNIFORM1UI64NV)(GLint  location, GLuint64EXT  x);
// typedef void  (APIENTRYP PUNIFORM1UI64VNV)(GLint  location, GLsizei  count, const GLuint64EXT * value);
// typedef void  (APIENTRYP PUNIFORM1UIEXT)(GLint  location, GLuint  v0);
// typedef void  (APIENTRYP PUNIFORM1UIV)(GLint  location, GLsizei  count, const GLuint * value);
// typedef void  (APIENTRYP PUNIFORM1UIVEXT)(GLint  location, GLsizei  count, const GLuint * value);
// typedef void  (APIENTRYP PUNIFORM2D)(GLint  location, GLdouble  x, GLdouble  y);
// typedef void  (APIENTRYP PUNIFORM2DV)(GLint  location, GLsizei  count, const GLdouble * value);
// typedef void  (APIENTRYP PUNIFORM2F)(GLint  location, GLfloat  v0, GLfloat  v1);
// typedef void  (APIENTRYP PUNIFORM2FARB)(GLint  location, GLfloat  v0, GLfloat  v1);
// typedef void  (APIENTRYP PUNIFORM2FV)(GLint  location, GLsizei  count, const GLfloat * value);
// typedef void  (APIENTRYP PUNIFORM2FVARB)(GLint  location, GLsizei  count, const GLfloat * value);
// typedef void  (APIENTRYP PUNIFORM2I)(GLint  location, GLint  v0, GLint  v1);
// typedef void  (APIENTRYP PUNIFORM2I64NV)(GLint  location, GLint64EXT  x, GLint64EXT  y);
// typedef void  (APIENTRYP PUNIFORM2I64VNV)(GLint  location, GLsizei  count, const GLint64EXT * value);
// typedef void  (APIENTRYP PUNIFORM2IARB)(GLint  location, GLint  v0, GLint  v1);
// typedef void  (APIENTRYP PUNIFORM2IV)(GLint  location, GLsizei  count, const GLint * value);
// typedef void  (APIENTRYP PUNIFORM2IVARB)(GLint  location, GLsizei  count, const GLint * value);
// typedef void  (APIENTRYP PUNIFORM2UI)(GLint  location, GLuint  v0, GLuint  v1);
// typedef void  (APIENTRYP PUNIFORM2UI64NV)(GLint  location, GLuint64EXT  x, GLuint64EXT  y);
// typedef void  (APIENTRYP PUNIFORM2UI64VNV)(GLint  location, GLsizei  count, const GLuint64EXT * value);
// typedef void  (APIENTRYP PUNIFORM2UIEXT)(GLint  location, GLuint  v0, GLuint  v1);
// typedef void  (APIENTRYP PUNIFORM2UIV)(GLint  location, GLsizei  count, const GLuint * value);
// typedef void  (APIENTRYP PUNIFORM2UIVEXT)(GLint  location, GLsizei  count, const GLuint * value);
// typedef void  (APIENTRYP PUNIFORM3D)(GLint  location, GLdouble  x, GLdouble  y, GLdouble  z);
// typedef void  (APIENTRYP PUNIFORM3DV)(GLint  location, GLsizei  count, const GLdouble * value);
// typedef void  (APIENTRYP PUNIFORM3F)(GLint  location, GLfloat  v0, GLfloat  v1, GLfloat  v2);
// typedef void  (APIENTRYP PUNIFORM3FARB)(GLint  location, GLfloat  v0, GLfloat  v1, GLfloat  v2);
// typedef void  (APIENTRYP PUNIFORM3FV)(GLint  location, GLsizei  count, const GLfloat * value);
// typedef void  (APIENTRYP PUNIFORM3FVARB)(GLint  location, GLsizei  count, const GLfloat * value);
// typedef void  (APIENTRYP PUNIFORM3I)(GLint  location, GLint  v0, GLint  v1, GLint  v2);
// typedef void  (APIENTRYP PUNIFORM3I64NV)(GLint  location, GLint64EXT  x, GLint64EXT  y, GLint64EXT  z);
// typedef void  (APIENTRYP PUNIFORM3I64VNV)(GLint  location, GLsizei  count, const GLint64EXT * value);
// typedef void  (APIENTRYP PUNIFORM3IARB)(GLint  location, GLint  v0, GLint  v1, GLint  v2);
// typedef void  (APIENTRYP PUNIFORM3IV)(GLint  location, GLsizei  count, const GLint * value);
// typedef void  (APIENTRYP PUNIFORM3IVARB)(GLint  location, GLsizei  count, const GLint * value);
// typedef void  (APIENTRYP PUNIFORM3UI)(GLint  location, GLuint  v0, GLuint  v1, GLuint  v2);
// typedef void  (APIENTRYP PUNIFORM3UI64NV)(GLint  location, GLuint64EXT  x, GLuint64EXT  y, GLuint64EXT  z);
// typedef void  (APIENTRYP PUNIFORM3UI64VNV)(GLint  location, GLsizei  count, const GLuint64EXT * value);
// typedef void  (APIENTRYP PUNIFORM3UIEXT)(GLint  location, GLuint  v0, GLuint  v1, GLuint  v2);
// typedef void  (APIENTRYP PUNIFORM3UIV)(GLint  location, GLsizei  count, const GLuint * value);
// typedef void  (APIENTRYP PUNIFORM3UIVEXT)(GLint  location, GLsizei  count, const GLuint * value);
// typedef void  (APIENTRYP PUNIFORM4D)(GLint  location, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w);
// typedef void  (APIENTRYP PUNIFORM4DV)(GLint  location, GLsizei  count, const GLdouble * value);
// typedef void  (APIENTRYP PUNIFORM4F)(GLint  location, GLfloat  v0, GLfloat  v1, GLfloat  v2, GLfloat  v3);
// typedef void  (APIENTRYP PUNIFORM4FARB)(GLint  location, GLfloat  v0, GLfloat  v1, GLfloat  v2, GLfloat  v3);
// typedef void  (APIENTRYP PUNIFORM4FV)(GLint  location, GLsizei  count, const GLfloat * value);
// typedef void  (APIENTRYP PUNIFORM4FVARB)(GLint  location, GLsizei  count, const GLfloat * value);
// typedef void  (APIENTRYP PUNIFORM4I)(GLint  location, GLint  v0, GLint  v1, GLint  v2, GLint  v3);
// typedef void  (APIENTRYP PUNIFORM4I64NV)(GLint  location, GLint64EXT  x, GLint64EXT  y, GLint64EXT  z, GLint64EXT  w);
// typedef void  (APIENTRYP PUNIFORM4I64VNV)(GLint  location, GLsizei  count, const GLint64EXT * value);
// typedef void  (APIENTRYP PUNIFORM4IARB)(GLint  location, GLint  v0, GLint  v1, GLint  v2, GLint  v3);
// typedef void  (APIENTRYP PUNIFORM4IV)(GLint  location, GLsizei  count, const GLint * value);
// typedef void  (APIENTRYP PUNIFORM4IVARB)(GLint  location, GLsizei  count, const GLint * value);
// typedef void  (APIENTRYP PUNIFORM4UI)(GLint  location, GLuint  v0, GLuint  v1, GLuint  v2, GLuint  v3);
// typedef void  (APIENTRYP PUNIFORM4UI64NV)(GLint  location, GLuint64EXT  x, GLuint64EXT  y, GLuint64EXT  z, GLuint64EXT  w);
// typedef void  (APIENTRYP PUNIFORM4UI64VNV)(GLint  location, GLsizei  count, const GLuint64EXT * value);
// typedef void  (APIENTRYP PUNIFORM4UIEXT)(GLint  location, GLuint  v0, GLuint  v1, GLuint  v2, GLuint  v3);
// typedef void  (APIENTRYP PUNIFORM4UIV)(GLint  location, GLsizei  count, const GLuint * value);
// typedef void  (APIENTRYP PUNIFORM4UIVEXT)(GLint  location, GLsizei  count, const GLuint * value);
// typedef void  (APIENTRYP PUNIFORMBLOCKBINDING)(GLuint  program, GLuint  uniformBlockIndex, GLuint  uniformBlockBinding);
// typedef void  (APIENTRYP PUNIFORMBUFFEREXT)(GLuint  program, GLint  location, GLuint  buffer);
// typedef void  (APIENTRYP PUNIFORMHANDLEUI64ARB)(GLint  location, GLuint64  value);
// typedef void  (APIENTRYP PUNIFORMHANDLEUI64NV)(GLint  location, GLuint64  value);
// typedef void  (APIENTRYP PUNIFORMHANDLEUI64VARB)(GLint  location, GLsizei  count, const GLuint64 * value);
// typedef void  (APIENTRYP PUNIFORMHANDLEUI64VNV)(GLint  location, GLsizei  count, const GLuint64 * value);
// typedef void  (APIENTRYP PUNIFORMMATRIX2DV)(GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
// typedef void  (APIENTRYP PUNIFORMMATRIX2FV)(GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
// typedef void  (APIENTRYP PUNIFORMMATRIX2FVARB)(GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
// typedef void  (APIENTRYP PUNIFORMMATRIX2X3DV)(GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
// typedef void  (APIENTRYP PUNIFORMMATRIX2X3FV)(GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
// typedef void  (APIENTRYP PUNIFORMMATRIX2X4DV)(GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
// typedef void  (APIENTRYP PUNIFORMMATRIX2X4FV)(GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
// typedef void  (APIENTRYP PUNIFORMMATRIX3DV)(GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
// typedef void  (APIENTRYP PUNIFORMMATRIX3FV)(GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
// typedef void  (APIENTRYP PUNIFORMMATRIX3FVARB)(GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
// typedef void  (APIENTRYP PUNIFORMMATRIX3X2DV)(GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
// typedef void  (APIENTRYP PUNIFORMMATRIX3X2FV)(GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
// typedef void  (APIENTRYP PUNIFORMMATRIX3X4DV)(GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
// typedef void  (APIENTRYP PUNIFORMMATRIX3X4FV)(GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
// typedef void  (APIENTRYP PUNIFORMMATRIX4DV)(GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
// typedef void  (APIENTRYP PUNIFORMMATRIX4FV)(GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
// typedef void  (APIENTRYP PUNIFORMMATRIX4FVARB)(GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
// typedef void  (APIENTRYP PUNIFORMMATRIX4X2DV)(GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
// typedef void  (APIENTRYP PUNIFORMMATRIX4X2FV)(GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
// typedef void  (APIENTRYP PUNIFORMMATRIX4X3DV)(GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value);
// typedef void  (APIENTRYP PUNIFORMMATRIX4X3FV)(GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value);
// typedef void  (APIENTRYP PUNIFORMSUBROUTINESUIV)(GLenum  shadertype, GLsizei  count, const GLuint * indices);
// typedef void  (APIENTRYP PUNIFORMUI64NV)(GLint  location, GLuint64EXT  value);
// typedef void  (APIENTRYP PUNIFORMUI64VNV)(GLint  location, GLsizei  count, const GLuint64EXT * value);
// typedef void  (APIENTRYP PUNLOCKARRAYSEXT)();
// typedef GLboolean  (APIENTRYP PUNMAPBUFFER)(GLenum  target);
// typedef GLboolean  (APIENTRYP PUNMAPBUFFERARB)(GLenum  target);
// typedef GLboolean  (APIENTRYP PUNMAPNAMEDBUFFEREXT)(GLuint  buffer);
// typedef void  (APIENTRYP PUNMAPOBJECTBUFFERATI)(GLuint  buffer);
// typedef void  (APIENTRYP PUNMAPTEXTURE2DINTEL)(GLuint  texture, GLint  level);
// typedef void  (APIENTRYP PUPDATEOBJECTBUFFERATI)(GLuint  buffer, GLuint  offset, GLsizei  size, const void * pointer, GLenum  preserve);
// typedef void  (APIENTRYP PUSEPROGRAM)(GLuint  program);
// typedef void  (APIENTRYP PUSEPROGRAMOBJECTARB)(GLhandleARB  programObj);
// typedef void  (APIENTRYP PUSEPROGRAMSTAGES)(GLuint  pipeline, GLbitfield  stages, GLuint  program);
// typedef void  (APIENTRYP PUSEPROGRAMSTAGESEXT)(GLuint  pipeline, GLbitfield  stages, GLuint  program);
// typedef void  (APIENTRYP PUSESHADERPROGRAMEXT)(GLenum  type, GLuint  program);
// typedef void  (APIENTRYP PVDPAUFININV)();
// typedef void  (APIENTRYP PVDPAUGETSURFACEIVNV)(GLvdpauSurfaceNV  surface, GLenum  pname, GLsizei  bufSize, GLsizei * length, GLint * values);
// typedef void  (APIENTRYP PVDPAUINITNV)(const void * vdpDevice, const void * getProcAddress);
// typedef GLboolean  (APIENTRYP PVDPAUISSURFACENV)(GLvdpauSurfaceNV  surface);
// typedef void  (APIENTRYP PVDPAUMAPSURFACESNV)(GLsizei  numSurfaces, const GLvdpauSurfaceNV * surfaces);
// typedef GLvdpauSurfaceNV  (APIENTRYP PVDPAUREGISTEROUTPUTSURFACENV)(const void * vdpSurface, GLenum  target, GLsizei  numTextureNames, const GLuint * textureNames);
// typedef GLvdpauSurfaceNV  (APIENTRYP PVDPAUREGISTERVIDEOSURFACENV)(const void * vdpSurface, GLenum  target, GLsizei  numTextureNames, const GLuint * textureNames);
// typedef void  (APIENTRYP PVDPAUSURFACEACCESSNV)(GLvdpauSurfaceNV  surface, GLenum  access);
// typedef void  (APIENTRYP PVDPAUUNMAPSURFACESNV)(GLsizei  numSurface, const GLvdpauSurfaceNV * surfaces);
// typedef void  (APIENTRYP PVDPAUUNREGISTERSURFACENV)(GLvdpauSurfaceNV  surface);
// typedef void  (APIENTRYP PVALIDATEPROGRAM)(GLuint  program);
// typedef void  (APIENTRYP PVALIDATEPROGRAMARB)(GLhandleARB  programObj);
// typedef void  (APIENTRYP PVALIDATEPROGRAMPIPELINE)(GLuint  pipeline);
// typedef void  (APIENTRYP PVALIDATEPROGRAMPIPELINEEXT)(GLuint  pipeline);
// typedef void  (APIENTRYP PVARIANTARRAYOBJECTATI)(GLuint  id, GLenum  type, GLsizei  stride, GLuint  buffer, GLuint  offset);
// typedef void  (APIENTRYP PVARIANTPOINTEREXT)(GLuint  id, GLenum  type, GLuint  stride, const void * addr);
// typedef void  (APIENTRYP PVARIANTBVEXT)(GLuint  id, const GLbyte * addr);
// typedef void  (APIENTRYP PVARIANTDVEXT)(GLuint  id, const GLdouble * addr);
// typedef void  (APIENTRYP PVARIANTFVEXT)(GLuint  id, const GLfloat * addr);
// typedef void  (APIENTRYP PVARIANTIVEXT)(GLuint  id, const GLint * addr);
// typedef void  (APIENTRYP PVARIANTSVEXT)(GLuint  id, const GLshort * addr);
// typedef void  (APIENTRYP PVARIANTUBVEXT)(GLuint  id, const GLubyte * addr);
// typedef void  (APIENTRYP PVARIANTUIVEXT)(GLuint  id, const GLuint * addr);
// typedef void  (APIENTRYP PVARIANTUSVEXT)(GLuint  id, const GLushort * addr);
// typedef void  (APIENTRYP PVERTEX2BOES)(GLbyte  x);
// typedef void  (APIENTRYP PVERTEX2BVOES)(const GLbyte * coords);
// typedef void  (APIENTRYP PVERTEX2HNV)(GLhalfNV  x, GLhalfNV  y);
// typedef void  (APIENTRYP PVERTEX2HVNV)(const GLhalfNV * v);
// typedef void  (APIENTRYP PVERTEX2XOES)(GLfixed  x);
// typedef void  (APIENTRYP PVERTEX2XVOES)(const GLfixed * coords);
// typedef void  (APIENTRYP PVERTEX3BOES)(GLbyte  x, GLbyte  y);
// typedef void  (APIENTRYP PVERTEX3BVOES)(const GLbyte * coords);
// typedef void  (APIENTRYP PVERTEX3HNV)(GLhalfNV  x, GLhalfNV  y, GLhalfNV  z);
// typedef void  (APIENTRYP PVERTEX3HVNV)(const GLhalfNV * v);
// typedef void  (APIENTRYP PVERTEX3XOES)(GLfixed  x, GLfixed  y);
// typedef void  (APIENTRYP PVERTEX3XVOES)(const GLfixed * coords);
// typedef void  (APIENTRYP PVERTEX4BOES)(GLbyte  x, GLbyte  y, GLbyte  z);
// typedef void  (APIENTRYP PVERTEX4BVOES)(const GLbyte * coords);
// typedef void  (APIENTRYP PVERTEX4HNV)(GLhalfNV  x, GLhalfNV  y, GLhalfNV  z, GLhalfNV  w);
// typedef void  (APIENTRYP PVERTEX4HVNV)(const GLhalfNV * v);
// typedef void  (APIENTRYP PVERTEX4XOES)(GLfixed  x, GLfixed  y, GLfixed  z);
// typedef void  (APIENTRYP PVERTEX4XVOES)(const GLfixed * coords);
// typedef void  (APIENTRYP PVERTEXARRAYBINDVERTEXBUFFEREXT)(GLuint  vaobj, GLuint  bindingindex, GLuint  buffer, GLintptr  offset, GLsizei  stride);
// typedef void  (APIENTRYP PVERTEXARRAYCOLOROFFSETEXT)(GLuint  vaobj, GLuint  buffer, GLint  size, GLenum  type, GLsizei  stride, GLintptr  offset);
// typedef void  (APIENTRYP PVERTEXARRAYEDGEFLAGOFFSETEXT)(GLuint  vaobj, GLuint  buffer, GLsizei  stride, GLintptr  offset);
// typedef void  (APIENTRYP PVERTEXARRAYFOGCOORDOFFSETEXT)(GLuint  vaobj, GLuint  buffer, GLenum  type, GLsizei  stride, GLintptr  offset);
// typedef void  (APIENTRYP PVERTEXARRAYINDEXOFFSETEXT)(GLuint  vaobj, GLuint  buffer, GLenum  type, GLsizei  stride, GLintptr  offset);
// typedef void  (APIENTRYP PVERTEXARRAYMULTITEXCOORDOFFSETEXT)(GLuint  vaobj, GLuint  buffer, GLenum  texunit, GLint  size, GLenum  type, GLsizei  stride, GLintptr  offset);
// typedef void  (APIENTRYP PVERTEXARRAYNORMALOFFSETEXT)(GLuint  vaobj, GLuint  buffer, GLenum  type, GLsizei  stride, GLintptr  offset);
// typedef void  (APIENTRYP PVERTEXARRAYPARAMETERIAPPLE)(GLenum  pname, GLint  param);
// typedef void  (APIENTRYP PVERTEXARRAYRANGEAPPLE)(GLsizei  length, void * pointer);
// typedef void  (APIENTRYP PVERTEXARRAYRANGENV)(GLsizei  length, const void * pointer);
// typedef void  (APIENTRYP PVERTEXARRAYSECONDARYCOLOROFFSETEXT)(GLuint  vaobj, GLuint  buffer, GLint  size, GLenum  type, GLsizei  stride, GLintptr  offset);
// typedef void  (APIENTRYP PVERTEXARRAYTEXCOORDOFFSETEXT)(GLuint  vaobj, GLuint  buffer, GLint  size, GLenum  type, GLsizei  stride, GLintptr  offset);
// typedef void  (APIENTRYP PVERTEXARRAYVERTEXATTRIBBINDINGEXT)(GLuint  vaobj, GLuint  attribindex, GLuint  bindingindex);
// typedef void  (APIENTRYP PVERTEXARRAYVERTEXATTRIBDIVISOREXT)(GLuint  vaobj, GLuint  index, GLuint  divisor);
// typedef void  (APIENTRYP PVERTEXARRAYVERTEXATTRIBFORMATEXT)(GLuint  vaobj, GLuint  attribindex, GLint  size, GLenum  type, GLboolean  normalized, GLuint  relativeoffset);
// typedef void  (APIENTRYP PVERTEXARRAYVERTEXATTRIBIFORMATEXT)(GLuint  vaobj, GLuint  attribindex, GLint  size, GLenum  type, GLuint  relativeoffset);
// typedef void  (APIENTRYP PVERTEXARRAYVERTEXATTRIBIOFFSETEXT)(GLuint  vaobj, GLuint  buffer, GLuint  index, GLint  size, GLenum  type, GLsizei  stride, GLintptr  offset);
// typedef void  (APIENTRYP PVERTEXARRAYVERTEXATTRIBLFORMATEXT)(GLuint  vaobj, GLuint  attribindex, GLint  size, GLenum  type, GLuint  relativeoffset);
// typedef void  (APIENTRYP PVERTEXARRAYVERTEXATTRIBLOFFSETEXT)(GLuint  vaobj, GLuint  buffer, GLuint  index, GLint  size, GLenum  type, GLsizei  stride, GLintptr  offset);
// typedef void  (APIENTRYP PVERTEXARRAYVERTEXATTRIBOFFSETEXT)(GLuint  vaobj, GLuint  buffer, GLuint  index, GLint  size, GLenum  type, GLboolean  normalized, GLsizei  stride, GLintptr  offset);
// typedef void  (APIENTRYP PVERTEXARRAYVERTEXBINDINGDIVISOREXT)(GLuint  vaobj, GLuint  bindingindex, GLuint  divisor);
// typedef void  (APIENTRYP PVERTEXARRAYVERTEXOFFSETEXT)(GLuint  vaobj, GLuint  buffer, GLint  size, GLenum  type, GLsizei  stride, GLintptr  offset);
// typedef void  (APIENTRYP PVERTEXATTRIB1D)(GLuint  index, GLdouble  x);
// typedef void  (APIENTRYP PVERTEXATTRIB1DARB)(GLuint  index, GLdouble  x);
// typedef void  (APIENTRYP PVERTEXATTRIB1DNV)(GLuint  index, GLdouble  x);
// typedef void  (APIENTRYP PVERTEXATTRIB1DV)(GLuint  index, const GLdouble * v);
// typedef void  (APIENTRYP PVERTEXATTRIB1DVARB)(GLuint  index, const GLdouble * v);
// typedef void  (APIENTRYP PVERTEXATTRIB1DVNV)(GLuint  index, const GLdouble * v);
// typedef void  (APIENTRYP PVERTEXATTRIB1F)(GLuint  index, GLfloat  x);
// typedef void  (APIENTRYP PVERTEXATTRIB1FARB)(GLuint  index, GLfloat  x);
// typedef void  (APIENTRYP PVERTEXATTRIB1FNV)(GLuint  index, GLfloat  x);
// typedef void  (APIENTRYP PVERTEXATTRIB1FV)(GLuint  index, const GLfloat * v);
// typedef void  (APIENTRYP PVERTEXATTRIB1FVARB)(GLuint  index, const GLfloat * v);
// typedef void  (APIENTRYP PVERTEXATTRIB1FVNV)(GLuint  index, const GLfloat * v);
// typedef void  (APIENTRYP PVERTEXATTRIB1HNV)(GLuint  index, GLhalfNV  x);
// typedef void  (APIENTRYP PVERTEXATTRIB1HVNV)(GLuint  index, const GLhalfNV * v);
// typedef void  (APIENTRYP PVERTEXATTRIB1S)(GLuint  index, GLshort  x);
// typedef void  (APIENTRYP PVERTEXATTRIB1SARB)(GLuint  index, GLshort  x);
// typedef void  (APIENTRYP PVERTEXATTRIB1SNV)(GLuint  index, GLshort  x);
// typedef void  (APIENTRYP PVERTEXATTRIB1SV)(GLuint  index, const GLshort * v);
// typedef void  (APIENTRYP PVERTEXATTRIB1SVARB)(GLuint  index, const GLshort * v);
// typedef void  (APIENTRYP PVERTEXATTRIB1SVNV)(GLuint  index, const GLshort * v);
// typedef void  (APIENTRYP PVERTEXATTRIB2D)(GLuint  index, GLdouble  x, GLdouble  y);
// typedef void  (APIENTRYP PVERTEXATTRIB2DARB)(GLuint  index, GLdouble  x, GLdouble  y);
// typedef void  (APIENTRYP PVERTEXATTRIB2DNV)(GLuint  index, GLdouble  x, GLdouble  y);
// typedef void  (APIENTRYP PVERTEXATTRIB2DV)(GLuint  index, const GLdouble * v);
// typedef void  (APIENTRYP PVERTEXATTRIB2DVARB)(GLuint  index, const GLdouble * v);
// typedef void  (APIENTRYP PVERTEXATTRIB2DVNV)(GLuint  index, const GLdouble * v);
// typedef void  (APIENTRYP PVERTEXATTRIB2F)(GLuint  index, GLfloat  x, GLfloat  y);
// typedef void  (APIENTRYP PVERTEXATTRIB2FARB)(GLuint  index, GLfloat  x, GLfloat  y);
// typedef void  (APIENTRYP PVERTEXATTRIB2FNV)(GLuint  index, GLfloat  x, GLfloat  y);
// typedef void  (APIENTRYP PVERTEXATTRIB2FV)(GLuint  index, const GLfloat * v);
// typedef void  (APIENTRYP PVERTEXATTRIB2FVARB)(GLuint  index, const GLfloat * v);
// typedef void  (APIENTRYP PVERTEXATTRIB2FVNV)(GLuint  index, const GLfloat * v);
// typedef void  (APIENTRYP PVERTEXATTRIB2HNV)(GLuint  index, GLhalfNV  x, GLhalfNV  y);
// typedef void  (APIENTRYP PVERTEXATTRIB2HVNV)(GLuint  index, const GLhalfNV * v);
// typedef void  (APIENTRYP PVERTEXATTRIB2S)(GLuint  index, GLshort  x, GLshort  y);
// typedef void  (APIENTRYP PVERTEXATTRIB2SARB)(GLuint  index, GLshort  x, GLshort  y);
// typedef void  (APIENTRYP PVERTEXATTRIB2SNV)(GLuint  index, GLshort  x, GLshort  y);
// typedef void  (APIENTRYP PVERTEXATTRIB2SV)(GLuint  index, const GLshort * v);
// typedef void  (APIENTRYP PVERTEXATTRIB2SVARB)(GLuint  index, const GLshort * v);
// typedef void  (APIENTRYP PVERTEXATTRIB2SVNV)(GLuint  index, const GLshort * v);
// typedef void  (APIENTRYP PVERTEXATTRIB3D)(GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z);
// typedef void  (APIENTRYP PVERTEXATTRIB3DARB)(GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z);
// typedef void  (APIENTRYP PVERTEXATTRIB3DNV)(GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z);
// typedef void  (APIENTRYP PVERTEXATTRIB3DV)(GLuint  index, const GLdouble * v);
// typedef void  (APIENTRYP PVERTEXATTRIB3DVARB)(GLuint  index, const GLdouble * v);
// typedef void  (APIENTRYP PVERTEXATTRIB3DVNV)(GLuint  index, const GLdouble * v);
// typedef void  (APIENTRYP PVERTEXATTRIB3F)(GLuint  index, GLfloat  x, GLfloat  y, GLfloat  z);
// typedef void  (APIENTRYP PVERTEXATTRIB3FARB)(GLuint  index, GLfloat  x, GLfloat  y, GLfloat  z);
// typedef void  (APIENTRYP PVERTEXATTRIB3FNV)(GLuint  index, GLfloat  x, GLfloat  y, GLfloat  z);
// typedef void  (APIENTRYP PVERTEXATTRIB3FV)(GLuint  index, const GLfloat * v);
// typedef void  (APIENTRYP PVERTEXATTRIB3FVARB)(GLuint  index, const GLfloat * v);
// typedef void  (APIENTRYP PVERTEXATTRIB3FVNV)(GLuint  index, const GLfloat * v);
// typedef void  (APIENTRYP PVERTEXATTRIB3HNV)(GLuint  index, GLhalfNV  x, GLhalfNV  y, GLhalfNV  z);
// typedef void  (APIENTRYP PVERTEXATTRIB3HVNV)(GLuint  index, const GLhalfNV * v);
// typedef void  (APIENTRYP PVERTEXATTRIB3S)(GLuint  index, GLshort  x, GLshort  y, GLshort  z);
// typedef void  (APIENTRYP PVERTEXATTRIB3SARB)(GLuint  index, GLshort  x, GLshort  y, GLshort  z);
// typedef void  (APIENTRYP PVERTEXATTRIB3SNV)(GLuint  index, GLshort  x, GLshort  y, GLshort  z);
// typedef void  (APIENTRYP PVERTEXATTRIB3SV)(GLuint  index, const GLshort * v);
// typedef void  (APIENTRYP PVERTEXATTRIB3SVARB)(GLuint  index, const GLshort * v);
// typedef void  (APIENTRYP PVERTEXATTRIB3SVNV)(GLuint  index, const GLshort * v);
// typedef void  (APIENTRYP PVERTEXATTRIB4NBV)(GLuint  index, const GLbyte * v);
// typedef void  (APIENTRYP PVERTEXATTRIB4NBVARB)(GLuint  index, const GLbyte * v);
// typedef void  (APIENTRYP PVERTEXATTRIB4NIV)(GLuint  index, const GLint * v);
// typedef void  (APIENTRYP PVERTEXATTRIB4NIVARB)(GLuint  index, const GLint * v);
// typedef void  (APIENTRYP PVERTEXATTRIB4NSV)(GLuint  index, const GLshort * v);
// typedef void  (APIENTRYP PVERTEXATTRIB4NSVARB)(GLuint  index, const GLshort * v);
// typedef void  (APIENTRYP PVERTEXATTRIB4NUB)(GLuint  index, GLubyte  x, GLubyte  y, GLubyte  z, GLubyte  w);
// typedef void  (APIENTRYP PVERTEXATTRIB4NUBARB)(GLuint  index, GLubyte  x, GLubyte  y, GLubyte  z, GLubyte  w);
// typedef void  (APIENTRYP PVERTEXATTRIB4NUBV)(GLuint  index, const GLubyte * v);
// typedef void  (APIENTRYP PVERTEXATTRIB4NUBVARB)(GLuint  index, const GLubyte * v);
// typedef void  (APIENTRYP PVERTEXATTRIB4NUIV)(GLuint  index, const GLuint * v);
// typedef void  (APIENTRYP PVERTEXATTRIB4NUIVARB)(GLuint  index, const GLuint * v);
// typedef void  (APIENTRYP PVERTEXATTRIB4NUSV)(GLuint  index, const GLushort * v);
// typedef void  (APIENTRYP PVERTEXATTRIB4NUSVARB)(GLuint  index, const GLushort * v);
// typedef void  (APIENTRYP PVERTEXATTRIB4BV)(GLuint  index, const GLbyte * v);
// typedef void  (APIENTRYP PVERTEXATTRIB4BVARB)(GLuint  index, const GLbyte * v);
// typedef void  (APIENTRYP PVERTEXATTRIB4D)(GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w);
// typedef void  (APIENTRYP PVERTEXATTRIB4DARB)(GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w);
// typedef void  (APIENTRYP PVERTEXATTRIB4DNV)(GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w);
// typedef void  (APIENTRYP PVERTEXATTRIB4DV)(GLuint  index, const GLdouble * v);
// typedef void  (APIENTRYP PVERTEXATTRIB4DVARB)(GLuint  index, const GLdouble * v);
// typedef void  (APIENTRYP PVERTEXATTRIB4DVNV)(GLuint  index, const GLdouble * v);
// typedef void  (APIENTRYP PVERTEXATTRIB4F)(GLuint  index, GLfloat  x, GLfloat  y, GLfloat  z, GLfloat  w);
// typedef void  (APIENTRYP PVERTEXATTRIB4FARB)(GLuint  index, GLfloat  x, GLfloat  y, GLfloat  z, GLfloat  w);
// typedef void  (APIENTRYP PVERTEXATTRIB4FNV)(GLuint  index, GLfloat  x, GLfloat  y, GLfloat  z, GLfloat  w);
// typedef void  (APIENTRYP PVERTEXATTRIB4FV)(GLuint  index, const GLfloat * v);
// typedef void  (APIENTRYP PVERTEXATTRIB4FVARB)(GLuint  index, const GLfloat * v);
// typedef void  (APIENTRYP PVERTEXATTRIB4FVNV)(GLuint  index, const GLfloat * v);
// typedef void  (APIENTRYP PVERTEXATTRIB4HNV)(GLuint  index, GLhalfNV  x, GLhalfNV  y, GLhalfNV  z, GLhalfNV  w);
// typedef void  (APIENTRYP PVERTEXATTRIB4HVNV)(GLuint  index, const GLhalfNV * v);
// typedef void  (APIENTRYP PVERTEXATTRIB4IV)(GLuint  index, const GLint * v);
// typedef void  (APIENTRYP PVERTEXATTRIB4IVARB)(GLuint  index, const GLint * v);
// typedef void  (APIENTRYP PVERTEXATTRIB4S)(GLuint  index, GLshort  x, GLshort  y, GLshort  z, GLshort  w);
// typedef void  (APIENTRYP PVERTEXATTRIB4SARB)(GLuint  index, GLshort  x, GLshort  y, GLshort  z, GLshort  w);
// typedef void  (APIENTRYP PVERTEXATTRIB4SNV)(GLuint  index, GLshort  x, GLshort  y, GLshort  z, GLshort  w);
// typedef void  (APIENTRYP PVERTEXATTRIB4SV)(GLuint  index, const GLshort * v);
// typedef void  (APIENTRYP PVERTEXATTRIB4SVARB)(GLuint  index, const GLshort * v);
// typedef void  (APIENTRYP PVERTEXATTRIB4SVNV)(GLuint  index, const GLshort * v);
// typedef void  (APIENTRYP PVERTEXATTRIB4UBNV)(GLuint  index, GLubyte  x, GLubyte  y, GLubyte  z, GLubyte  w);
// typedef void  (APIENTRYP PVERTEXATTRIB4UBV)(GLuint  index, const GLubyte * v);
// typedef void  (APIENTRYP PVERTEXATTRIB4UBVARB)(GLuint  index, const GLubyte * v);
// typedef void  (APIENTRYP PVERTEXATTRIB4UBVNV)(GLuint  index, const GLubyte * v);
// typedef void  (APIENTRYP PVERTEXATTRIB4UIV)(GLuint  index, const GLuint * v);
// typedef void  (APIENTRYP PVERTEXATTRIB4UIVARB)(GLuint  index, const GLuint * v);
// typedef void  (APIENTRYP PVERTEXATTRIB4USV)(GLuint  index, const GLushort * v);
// typedef void  (APIENTRYP PVERTEXATTRIB4USVARB)(GLuint  index, const GLushort * v);
// typedef void  (APIENTRYP PVERTEXATTRIBARRAYOBJECTATI)(GLuint  index, GLint  size, GLenum  type, GLboolean  normalized, GLsizei  stride, GLuint  buffer, GLuint  offset);
// typedef void  (APIENTRYP PVERTEXATTRIBBINDING)(GLuint  attribindex, GLuint  bindingindex);
// typedef void  (APIENTRYP PVERTEXATTRIBDIVISOR)(GLuint  index, GLuint  divisor);
// typedef void  (APIENTRYP PVERTEXATTRIBDIVISORARB)(GLuint  index, GLuint  divisor);
// typedef void  (APIENTRYP PVERTEXATTRIBFORMAT)(GLuint  attribindex, GLint  size, GLenum  type, GLboolean  normalized, GLuint  relativeoffset);
// typedef void  (APIENTRYP PVERTEXATTRIBFORMATNV)(GLuint  index, GLint  size, GLenum  type, GLboolean  normalized, GLsizei  stride);
// typedef void  (APIENTRYP PVERTEXATTRIBI1I)(GLuint  index, GLint  x);
// typedef void  (APIENTRYP PVERTEXATTRIBI1IEXT)(GLuint  index, GLint  x);
// typedef void  (APIENTRYP PVERTEXATTRIBI1IV)(GLuint  index, const GLint * v);
// typedef void  (APIENTRYP PVERTEXATTRIBI1IVEXT)(GLuint  index, const GLint * v);
// typedef void  (APIENTRYP PVERTEXATTRIBI1UI)(GLuint  index, GLuint  x);
// typedef void  (APIENTRYP PVERTEXATTRIBI1UIEXT)(GLuint  index, GLuint  x);
// typedef void  (APIENTRYP PVERTEXATTRIBI1UIV)(GLuint  index, const GLuint * v);
// typedef void  (APIENTRYP PVERTEXATTRIBI1UIVEXT)(GLuint  index, const GLuint * v);
// typedef void  (APIENTRYP PVERTEXATTRIBI2I)(GLuint  index, GLint  x, GLint  y);
// typedef void  (APIENTRYP PVERTEXATTRIBI2IEXT)(GLuint  index, GLint  x, GLint  y);
// typedef void  (APIENTRYP PVERTEXATTRIBI2IV)(GLuint  index, const GLint * v);
// typedef void  (APIENTRYP PVERTEXATTRIBI2IVEXT)(GLuint  index, const GLint * v);
// typedef void  (APIENTRYP PVERTEXATTRIBI2UI)(GLuint  index, GLuint  x, GLuint  y);
// typedef void  (APIENTRYP PVERTEXATTRIBI2UIEXT)(GLuint  index, GLuint  x, GLuint  y);
// typedef void  (APIENTRYP PVERTEXATTRIBI2UIV)(GLuint  index, const GLuint * v);
// typedef void  (APIENTRYP PVERTEXATTRIBI2UIVEXT)(GLuint  index, const GLuint * v);
// typedef void  (APIENTRYP PVERTEXATTRIBI3I)(GLuint  index, GLint  x, GLint  y, GLint  z);
// typedef void  (APIENTRYP PVERTEXATTRIBI3IEXT)(GLuint  index, GLint  x, GLint  y, GLint  z);
// typedef void  (APIENTRYP PVERTEXATTRIBI3IV)(GLuint  index, const GLint * v);
// typedef void  (APIENTRYP PVERTEXATTRIBI3IVEXT)(GLuint  index, const GLint * v);
// typedef void  (APIENTRYP PVERTEXATTRIBI3UI)(GLuint  index, GLuint  x, GLuint  y, GLuint  z);
// typedef void  (APIENTRYP PVERTEXATTRIBI3UIEXT)(GLuint  index, GLuint  x, GLuint  y, GLuint  z);
// typedef void  (APIENTRYP PVERTEXATTRIBI3UIV)(GLuint  index, const GLuint * v);
// typedef void  (APIENTRYP PVERTEXATTRIBI3UIVEXT)(GLuint  index, const GLuint * v);
// typedef void  (APIENTRYP PVERTEXATTRIBI4BV)(GLuint  index, const GLbyte * v);
// typedef void  (APIENTRYP PVERTEXATTRIBI4BVEXT)(GLuint  index, const GLbyte * v);
// typedef void  (APIENTRYP PVERTEXATTRIBI4I)(GLuint  index, GLint  x, GLint  y, GLint  z, GLint  w);
// typedef void  (APIENTRYP PVERTEXATTRIBI4IEXT)(GLuint  index, GLint  x, GLint  y, GLint  z, GLint  w);
// typedef void  (APIENTRYP PVERTEXATTRIBI4IV)(GLuint  index, const GLint * v);
// typedef void  (APIENTRYP PVERTEXATTRIBI4IVEXT)(GLuint  index, const GLint * v);
// typedef void  (APIENTRYP PVERTEXATTRIBI4SV)(GLuint  index, const GLshort * v);
// typedef void  (APIENTRYP PVERTEXATTRIBI4SVEXT)(GLuint  index, const GLshort * v);
// typedef void  (APIENTRYP PVERTEXATTRIBI4UBV)(GLuint  index, const GLubyte * v);
// typedef void  (APIENTRYP PVERTEXATTRIBI4UBVEXT)(GLuint  index, const GLubyte * v);
// typedef void  (APIENTRYP PVERTEXATTRIBI4UI)(GLuint  index, GLuint  x, GLuint  y, GLuint  z, GLuint  w);
// typedef void  (APIENTRYP PVERTEXATTRIBI4UIEXT)(GLuint  index, GLuint  x, GLuint  y, GLuint  z, GLuint  w);
// typedef void  (APIENTRYP PVERTEXATTRIBI4UIV)(GLuint  index, const GLuint * v);
// typedef void  (APIENTRYP PVERTEXATTRIBI4UIVEXT)(GLuint  index, const GLuint * v);
// typedef void  (APIENTRYP PVERTEXATTRIBI4USV)(GLuint  index, const GLushort * v);
// typedef void  (APIENTRYP PVERTEXATTRIBI4USVEXT)(GLuint  index, const GLushort * v);
// typedef void  (APIENTRYP PVERTEXATTRIBIFORMAT)(GLuint  attribindex, GLint  size, GLenum  type, GLuint  relativeoffset);
// typedef void  (APIENTRYP PVERTEXATTRIBIFORMATNV)(GLuint  index, GLint  size, GLenum  type, GLsizei  stride);
// typedef void  (APIENTRYP PVERTEXATTRIBIPOINTER)(GLuint  index, GLint  size, GLenum  type, GLsizei  stride, const void * pointer);
// typedef void  (APIENTRYP PVERTEXATTRIBIPOINTEREXT)(GLuint  index, GLint  size, GLenum  type, GLsizei  stride, const void * pointer);
// typedef void  (APIENTRYP PVERTEXATTRIBL1D)(GLuint  index, GLdouble  x);
// typedef void  (APIENTRYP PVERTEXATTRIBL1DEXT)(GLuint  index, GLdouble  x);
// typedef void  (APIENTRYP PVERTEXATTRIBL1DV)(GLuint  index, const GLdouble * v);
// typedef void  (APIENTRYP PVERTEXATTRIBL1DVEXT)(GLuint  index, const GLdouble * v);
// typedef void  (APIENTRYP PVERTEXATTRIBL1I64NV)(GLuint  index, GLint64EXT  x);
// typedef void  (APIENTRYP PVERTEXATTRIBL1I64VNV)(GLuint  index, const GLint64EXT * v);
// typedef void  (APIENTRYP PVERTEXATTRIBL1UI64ARB)(GLuint  index, GLuint64EXT  x);
// typedef void  (APIENTRYP PVERTEXATTRIBL1UI64NV)(GLuint  index, GLuint64EXT  x);
// typedef void  (APIENTRYP PVERTEXATTRIBL1UI64VARB)(GLuint  index, const GLuint64EXT * v);
// typedef void  (APIENTRYP PVERTEXATTRIBL1UI64VNV)(GLuint  index, const GLuint64EXT * v);
// typedef void  (APIENTRYP PVERTEXATTRIBL2D)(GLuint  index, GLdouble  x, GLdouble  y);
// typedef void  (APIENTRYP PVERTEXATTRIBL2DEXT)(GLuint  index, GLdouble  x, GLdouble  y);
// typedef void  (APIENTRYP PVERTEXATTRIBL2DV)(GLuint  index, const GLdouble * v);
// typedef void  (APIENTRYP PVERTEXATTRIBL2DVEXT)(GLuint  index, const GLdouble * v);
// typedef void  (APIENTRYP PVERTEXATTRIBL2I64NV)(GLuint  index, GLint64EXT  x, GLint64EXT  y);
// typedef void  (APIENTRYP PVERTEXATTRIBL2I64VNV)(GLuint  index, const GLint64EXT * v);
// typedef void  (APIENTRYP PVERTEXATTRIBL2UI64NV)(GLuint  index, GLuint64EXT  x, GLuint64EXT  y);
// typedef void  (APIENTRYP PVERTEXATTRIBL2UI64VNV)(GLuint  index, const GLuint64EXT * v);
// typedef void  (APIENTRYP PVERTEXATTRIBL3D)(GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z);
// typedef void  (APIENTRYP PVERTEXATTRIBL3DEXT)(GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z);
// typedef void  (APIENTRYP PVERTEXATTRIBL3DV)(GLuint  index, const GLdouble * v);
// typedef void  (APIENTRYP PVERTEXATTRIBL3DVEXT)(GLuint  index, const GLdouble * v);
// typedef void  (APIENTRYP PVERTEXATTRIBL3I64NV)(GLuint  index, GLint64EXT  x, GLint64EXT  y, GLint64EXT  z);
// typedef void  (APIENTRYP PVERTEXATTRIBL3I64VNV)(GLuint  index, const GLint64EXT * v);
// typedef void  (APIENTRYP PVERTEXATTRIBL3UI64NV)(GLuint  index, GLuint64EXT  x, GLuint64EXT  y, GLuint64EXT  z);
// typedef void  (APIENTRYP PVERTEXATTRIBL3UI64VNV)(GLuint  index, const GLuint64EXT * v);
// typedef void  (APIENTRYP PVERTEXATTRIBL4D)(GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w);
// typedef void  (APIENTRYP PVERTEXATTRIBL4DEXT)(GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w);
// typedef void  (APIENTRYP PVERTEXATTRIBL4DV)(GLuint  index, const GLdouble * v);
// typedef void  (APIENTRYP PVERTEXATTRIBL4DVEXT)(GLuint  index, const GLdouble * v);
// typedef void  (APIENTRYP PVERTEXATTRIBL4I64NV)(GLuint  index, GLint64EXT  x, GLint64EXT  y, GLint64EXT  z, GLint64EXT  w);
// typedef void  (APIENTRYP PVERTEXATTRIBL4I64VNV)(GLuint  index, const GLint64EXT * v);
// typedef void  (APIENTRYP PVERTEXATTRIBL4UI64NV)(GLuint  index, GLuint64EXT  x, GLuint64EXT  y, GLuint64EXT  z, GLuint64EXT  w);
// typedef void  (APIENTRYP PVERTEXATTRIBL4UI64VNV)(GLuint  index, const GLuint64EXT * v);
// typedef void  (APIENTRYP PVERTEXATTRIBLFORMAT)(GLuint  attribindex, GLint  size, GLenum  type, GLuint  relativeoffset);
// typedef void  (APIENTRYP PVERTEXATTRIBLFORMATNV)(GLuint  index, GLint  size, GLenum  type, GLsizei  stride);
// typedef void  (APIENTRYP PVERTEXATTRIBLPOINTER)(GLuint  index, GLint  size, GLenum  type, GLsizei  stride, const void * pointer);
// typedef void  (APIENTRYP PVERTEXATTRIBLPOINTEREXT)(GLuint  index, GLint  size, GLenum  type, GLsizei  stride, const void * pointer);
// typedef void  (APIENTRYP PVERTEXATTRIBP1UI)(GLuint  index, GLenum  type, GLboolean  normalized, GLuint  value);
// typedef void  (APIENTRYP PVERTEXATTRIBP1UIV)(GLuint  index, GLenum  type, GLboolean  normalized, const GLuint * value);
// typedef void  (APIENTRYP PVERTEXATTRIBP2UI)(GLuint  index, GLenum  type, GLboolean  normalized, GLuint  value);
// typedef void  (APIENTRYP PVERTEXATTRIBP2UIV)(GLuint  index, GLenum  type, GLboolean  normalized, const GLuint * value);
// typedef void  (APIENTRYP PVERTEXATTRIBP3UI)(GLuint  index, GLenum  type, GLboolean  normalized, GLuint  value);
// typedef void  (APIENTRYP PVERTEXATTRIBP3UIV)(GLuint  index, GLenum  type, GLboolean  normalized, const GLuint * value);
// typedef void  (APIENTRYP PVERTEXATTRIBP4UI)(GLuint  index, GLenum  type, GLboolean  normalized, GLuint  value);
// typedef void  (APIENTRYP PVERTEXATTRIBP4UIV)(GLuint  index, GLenum  type, GLboolean  normalized, const GLuint * value);
// typedef void  (APIENTRYP PVERTEXATTRIBPARAMETERIAMD)(GLuint  index, GLenum  pname, GLint  param);
// typedef void  (APIENTRYP PVERTEXATTRIBPOINTER)(GLuint  index, GLint  size, GLenum  type, GLboolean  normalized, GLsizei  stride, const void * pointer);
// typedef void  (APIENTRYP PVERTEXATTRIBPOINTERARB)(GLuint  index, GLint  size, GLenum  type, GLboolean  normalized, GLsizei  stride, const void * pointer);
// typedef void  (APIENTRYP PVERTEXATTRIBPOINTERNV)(GLuint  index, GLint  fsize, GLenum  type, GLsizei  stride, const void * pointer);
// typedef void  (APIENTRYP PVERTEXATTRIBS1DVNV)(GLuint  index, GLsizei  count, const GLdouble * v);
// typedef void  (APIENTRYP PVERTEXATTRIBS1FVNV)(GLuint  index, GLsizei  count, const GLfloat * v);
// typedef void  (APIENTRYP PVERTEXATTRIBS1HVNV)(GLuint  index, GLsizei  n, const GLhalfNV * v);
// typedef void  (APIENTRYP PVERTEXATTRIBS1SVNV)(GLuint  index, GLsizei  count, const GLshort * v);
// typedef void  (APIENTRYP PVERTEXATTRIBS2DVNV)(GLuint  index, GLsizei  count, const GLdouble * v);
// typedef void  (APIENTRYP PVERTEXATTRIBS2FVNV)(GLuint  index, GLsizei  count, const GLfloat * v);
// typedef void  (APIENTRYP PVERTEXATTRIBS2HVNV)(GLuint  index, GLsizei  n, const GLhalfNV * v);
// typedef void  (APIENTRYP PVERTEXATTRIBS2SVNV)(GLuint  index, GLsizei  count, const GLshort * v);
// typedef void  (APIENTRYP PVERTEXATTRIBS3DVNV)(GLuint  index, GLsizei  count, const GLdouble * v);
// typedef void  (APIENTRYP PVERTEXATTRIBS3FVNV)(GLuint  index, GLsizei  count, const GLfloat * v);
// typedef void  (APIENTRYP PVERTEXATTRIBS3HVNV)(GLuint  index, GLsizei  n, const GLhalfNV * v);
// typedef void  (APIENTRYP PVERTEXATTRIBS3SVNV)(GLuint  index, GLsizei  count, const GLshort * v);
// typedef void  (APIENTRYP PVERTEXATTRIBS4DVNV)(GLuint  index, GLsizei  count, const GLdouble * v);
// typedef void  (APIENTRYP PVERTEXATTRIBS4FVNV)(GLuint  index, GLsizei  count, const GLfloat * v);
// typedef void  (APIENTRYP PVERTEXATTRIBS4HVNV)(GLuint  index, GLsizei  n, const GLhalfNV * v);
// typedef void  (APIENTRYP PVERTEXATTRIBS4SVNV)(GLuint  index, GLsizei  count, const GLshort * v);
// typedef void  (APIENTRYP PVERTEXATTRIBS4UBVNV)(GLuint  index, GLsizei  count, const GLubyte * v);
// typedef void  (APIENTRYP PVERTEXBINDINGDIVISOR)(GLuint  bindingindex, GLuint  divisor);
// typedef void  (APIENTRYP PVERTEXBLENDARB)(GLint  count);
// typedef void  (APIENTRYP PVERTEXBLENDENVFATI)(GLenum  pname, GLfloat  param);
// typedef void  (APIENTRYP PVERTEXBLENDENVIATI)(GLenum  pname, GLint  param);
// typedef void  (APIENTRYP PVERTEXFORMATNV)(GLint  size, GLenum  type, GLsizei  stride);
// typedef void  (APIENTRYP PVERTEXPOINTEREXT)(GLint  size, GLenum  type, GLsizei  stride, GLsizei  count, const void * pointer);
// typedef void  (APIENTRYP PVERTEXPOINTERLISTIBM)(GLint  size, GLenum  type, GLint  stride, const void ** pointer, GLint  ptrstride);
// typedef void  (APIENTRYP PVERTEXPOINTERVINTEL)(GLint  size, GLenum  type, const void ** pointer);
// typedef void  (APIENTRYP PVERTEXSTREAM1DATI)(GLenum  stream, GLdouble  x);
// typedef void  (APIENTRYP PVERTEXSTREAM1DVATI)(GLenum  stream, const GLdouble * coords);
// typedef void  (APIENTRYP PVERTEXSTREAM1FATI)(GLenum  stream, GLfloat  x);
// typedef void  (APIENTRYP PVERTEXSTREAM1FVATI)(GLenum  stream, const GLfloat * coords);
// typedef void  (APIENTRYP PVERTEXSTREAM1IATI)(GLenum  stream, GLint  x);
// typedef void  (APIENTRYP PVERTEXSTREAM1IVATI)(GLenum  stream, const GLint * coords);
// typedef void  (APIENTRYP PVERTEXSTREAM1SATI)(GLenum  stream, GLshort  x);
// typedef void  (APIENTRYP PVERTEXSTREAM1SVATI)(GLenum  stream, const GLshort * coords);
// typedef void  (APIENTRYP PVERTEXSTREAM2DATI)(GLenum  stream, GLdouble  x, GLdouble  y);
// typedef void  (APIENTRYP PVERTEXSTREAM2DVATI)(GLenum  stream, const GLdouble * coords);
// typedef void  (APIENTRYP PVERTEXSTREAM2FATI)(GLenum  stream, GLfloat  x, GLfloat  y);
// typedef void  (APIENTRYP PVERTEXSTREAM2FVATI)(GLenum  stream, const GLfloat * coords);
// typedef void  (APIENTRYP PVERTEXSTREAM2IATI)(GLenum  stream, GLint  x, GLint  y);
// typedef void  (APIENTRYP PVERTEXSTREAM2IVATI)(GLenum  stream, const GLint * coords);
// typedef void  (APIENTRYP PVERTEXSTREAM2SATI)(GLenum  stream, GLshort  x, GLshort  y);
// typedef void  (APIENTRYP PVERTEXSTREAM2SVATI)(GLenum  stream, const GLshort * coords);
// typedef void  (APIENTRYP PVERTEXSTREAM3DATI)(GLenum  stream, GLdouble  x, GLdouble  y, GLdouble  z);
// typedef void  (APIENTRYP PVERTEXSTREAM3DVATI)(GLenum  stream, const GLdouble * coords);
// typedef void  (APIENTRYP PVERTEXSTREAM3FATI)(GLenum  stream, GLfloat  x, GLfloat  y, GLfloat  z);
// typedef void  (APIENTRYP PVERTEXSTREAM3FVATI)(GLenum  stream, const GLfloat * coords);
// typedef void  (APIENTRYP PVERTEXSTREAM3IATI)(GLenum  stream, GLint  x, GLint  y, GLint  z);
// typedef void  (APIENTRYP PVERTEXSTREAM3IVATI)(GLenum  stream, const GLint * coords);
// typedef void  (APIENTRYP PVERTEXSTREAM3SATI)(GLenum  stream, GLshort  x, GLshort  y, GLshort  z);
// typedef void  (APIENTRYP PVERTEXSTREAM3SVATI)(GLenum  stream, const GLshort * coords);
// typedef void  (APIENTRYP PVERTEXSTREAM4DATI)(GLenum  stream, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w);
// typedef void  (APIENTRYP PVERTEXSTREAM4DVATI)(GLenum  stream, const GLdouble * coords);
// typedef void  (APIENTRYP PVERTEXSTREAM4FATI)(GLenum  stream, GLfloat  x, GLfloat  y, GLfloat  z, GLfloat  w);
// typedef void  (APIENTRYP PVERTEXSTREAM4FVATI)(GLenum  stream, const GLfloat * coords);
// typedef void  (APIENTRYP PVERTEXSTREAM4IATI)(GLenum  stream, GLint  x, GLint  y, GLint  z, GLint  w);
// typedef void  (APIENTRYP PVERTEXSTREAM4IVATI)(GLenum  stream, const GLint * coords);
// typedef void  (APIENTRYP PVERTEXSTREAM4SATI)(GLenum  stream, GLshort  x, GLshort  y, GLshort  z, GLshort  w);
// typedef void  (APIENTRYP PVERTEXSTREAM4SVATI)(GLenum  stream, const GLshort * coords);
// typedef void  (APIENTRYP PVERTEXWEIGHTPOINTEREXT)(GLint  size, GLenum  type, GLsizei  stride, const void * pointer);
// typedef void  (APIENTRYP PVERTEXWEIGHTFEXT)(GLfloat  weight);
// typedef void  (APIENTRYP PVERTEXWEIGHTFVEXT)(const GLfloat * weight);
// typedef void  (APIENTRYP PVERTEXWEIGHTHNV)(GLhalfNV  weight);
// typedef void  (APIENTRYP PVERTEXWEIGHTHVNV)(const GLhalfNV * weight);
// typedef GLenum  (APIENTRYP PVIDEOCAPTURENV)(GLuint  video_capture_slot, GLuint * sequence_num, GLuint64EXT * capture_time);
// typedef void  (APIENTRYP PVIDEOCAPTURESTREAMPARAMETERDVNV)(GLuint  video_capture_slot, GLuint  stream, GLenum  pname, const GLdouble * params);
// typedef void  (APIENTRYP PVIDEOCAPTURESTREAMPARAMETERFVNV)(GLuint  video_capture_slot, GLuint  stream, GLenum  pname, const GLfloat * params);
// typedef void  (APIENTRYP PVIDEOCAPTURESTREAMPARAMETERIVNV)(GLuint  video_capture_slot, GLuint  stream, GLenum  pname, const GLint * params);
// typedef void  (APIENTRYP PVIEWPORT)(GLint  x, GLint  y, GLsizei  width, GLsizei  height);
// typedef void  (APIENTRYP PVIEWPORTARRAYV)(GLuint  first, GLsizei  count, const GLfloat * v);
// typedef void  (APIENTRYP PVIEWPORTINDEXEDF)(GLuint  index, GLfloat  x, GLfloat  y, GLfloat  w, GLfloat  h);
// typedef void  (APIENTRYP PVIEWPORTINDEXEDFV)(GLuint  index, const GLfloat * v);
// typedef void  (APIENTRYP PWAITSYNC)(GLsync  sync, GLbitfield  flags, GLuint64  timeout);
// typedef void  (APIENTRYP PWEIGHTPATHSNV)(GLuint  resultPath, GLsizei  numPaths, const GLuint * paths, const GLfloat * weights);
// typedef void  (APIENTRYP PWEIGHTPOINTERARB)(GLint  size, GLenum  type, GLsizei  stride, const void * pointer);
// typedef void  (APIENTRYP PWEIGHTBVARB)(GLint  size, const GLbyte * weights);
// typedef void  (APIENTRYP PWEIGHTDVARB)(GLint  size, const GLdouble * weights);
// typedef void  (APIENTRYP PWEIGHTFVARB)(GLint  size, const GLfloat * weights);
// typedef void  (APIENTRYP PWEIGHTIVARB)(GLint  size, const GLint * weights);
// typedef void  (APIENTRYP PWEIGHTSVARB)(GLint  size, const GLshort * weights);
// typedef void  (APIENTRYP PWEIGHTUBVARB)(GLint  size, const GLubyte * weights);
// typedef void  (APIENTRYP PWEIGHTUIVARB)(GLint  size, const GLuint * weights);
// typedef void  (APIENTRYP PWEIGHTUSVARB)(GLint  size, const GLushort * weights);
// typedef void  (APIENTRYP PWINDOWPOS2DARB)(GLdouble  x, GLdouble  y);
// typedef void  (APIENTRYP PWINDOWPOS2DMESA)(GLdouble  x, GLdouble  y);
// typedef void  (APIENTRYP PWINDOWPOS2DVARB)(const GLdouble * v);
// typedef void  (APIENTRYP PWINDOWPOS2DVMESA)(const GLdouble * v);
// typedef void  (APIENTRYP PWINDOWPOS2FARB)(GLfloat  x, GLfloat  y);
// typedef void  (APIENTRYP PWINDOWPOS2FMESA)(GLfloat  x, GLfloat  y);
// typedef void  (APIENTRYP PWINDOWPOS2FVARB)(const GLfloat * v);
// typedef void  (APIENTRYP PWINDOWPOS2FVMESA)(const GLfloat * v);
// typedef void  (APIENTRYP PWINDOWPOS2IARB)(GLint  x, GLint  y);
// typedef void  (APIENTRYP PWINDOWPOS2IMESA)(GLint  x, GLint  y);
// typedef void  (APIENTRYP PWINDOWPOS2IVARB)(const GLint * v);
// typedef void  (APIENTRYP PWINDOWPOS2IVMESA)(const GLint * v);
// typedef void  (APIENTRYP PWINDOWPOS2SARB)(GLshort  x, GLshort  y);
// typedef void  (APIENTRYP PWINDOWPOS2SMESA)(GLshort  x, GLshort  y);
// typedef void  (APIENTRYP PWINDOWPOS2SVARB)(const GLshort * v);
// typedef void  (APIENTRYP PWINDOWPOS2SVMESA)(const GLshort * v);
// typedef void  (APIENTRYP PWINDOWPOS3DARB)(GLdouble  x, GLdouble  y, GLdouble  z);
// typedef void  (APIENTRYP PWINDOWPOS3DMESA)(GLdouble  x, GLdouble  y, GLdouble  z);
// typedef void  (APIENTRYP PWINDOWPOS3DVARB)(const GLdouble * v);
// typedef void  (APIENTRYP PWINDOWPOS3DVMESA)(const GLdouble * v);
// typedef void  (APIENTRYP PWINDOWPOS3FARB)(GLfloat  x, GLfloat  y, GLfloat  z);
// typedef void  (APIENTRYP PWINDOWPOS3FMESA)(GLfloat  x, GLfloat  y, GLfloat  z);
// typedef void  (APIENTRYP PWINDOWPOS3FVARB)(const GLfloat * v);
// typedef void  (APIENTRYP PWINDOWPOS3FVMESA)(const GLfloat * v);
// typedef void  (APIENTRYP PWINDOWPOS3IARB)(GLint  x, GLint  y, GLint  z);
// typedef void  (APIENTRYP PWINDOWPOS3IMESA)(GLint  x, GLint  y, GLint  z);
// typedef void  (APIENTRYP PWINDOWPOS3IVARB)(const GLint * v);
// typedef void  (APIENTRYP PWINDOWPOS3IVMESA)(const GLint * v);
// typedef void  (APIENTRYP PWINDOWPOS3SARB)(GLshort  x, GLshort  y, GLshort  z);
// typedef void  (APIENTRYP PWINDOWPOS3SMESA)(GLshort  x, GLshort  y, GLshort  z);
// typedef void  (APIENTRYP PWINDOWPOS3SVARB)(const GLshort * v);
// typedef void  (APIENTRYP PWINDOWPOS3SVMESA)(const GLshort * v);
// typedef void  (APIENTRYP PWINDOWPOS4DMESA)(GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w);
// typedef void  (APIENTRYP PWINDOWPOS4DVMESA)(const GLdouble * v);
// typedef void  (APIENTRYP PWINDOWPOS4FMESA)(GLfloat  x, GLfloat  y, GLfloat  z, GLfloat  w);
// typedef void  (APIENTRYP PWINDOWPOS4FVMESA)(const GLfloat * v);
// typedef void  (APIENTRYP PWINDOWPOS4IMESA)(GLint  x, GLint  y, GLint  z, GLint  w);
// typedef void  (APIENTRYP PWINDOWPOS4IVMESA)(const GLint * v);
// typedef void  (APIENTRYP PWINDOWPOS4SMESA)(GLshort  x, GLshort  y, GLshort  z, GLshort  w);
// typedef void  (APIENTRYP PWINDOWPOS4SVMESA)(const GLshort * v);
// typedef void  (APIENTRYP PWRITEMASKEXT)(GLuint  res, GLuint  in, GLenum  outX, GLenum  outY, GLenum  outZ, GLenum  outW);
// void  glowAccumxOES(PACCUMXOES fnptr, GLenum  op, GLfixed  value) {
//   (*fnptr)(op, value);
// }
// void  glowActiveProgramEXT(PACTIVEPROGRAMEXT fnptr, GLuint  program) {
//   (*fnptr)(program);
// }
// void  glowActiveShaderProgram(PACTIVESHADERPROGRAM fnptr, GLuint  pipeline, GLuint  program) {
//   (*fnptr)(pipeline, program);
// }
// void  glowActiveShaderProgramEXT(PACTIVESHADERPROGRAMEXT fnptr, GLuint  pipeline, GLuint  program) {
//   (*fnptr)(pipeline, program);
// }
// void  glowActiveStencilFaceEXT(PACTIVESTENCILFACEEXT fnptr, GLenum  face) {
//   (*fnptr)(face);
// }
// void  glowActiveTexture(PACTIVETEXTURE fnptr, GLenum  texture) {
//   (*fnptr)(texture);
// }
// void  glowActiveTextureARB(PACTIVETEXTUREARB fnptr, GLenum  texture) {
//   (*fnptr)(texture);
// }
// void  glowActiveVaryingNV(PACTIVEVARYINGNV fnptr, GLuint  program, const GLchar * name) {
//   (*fnptr)(program, name);
// }
// void  glowAlphaFragmentOp1ATI(PALPHAFRAGMENTOP1ATI fnptr, GLenum  op, GLuint  dst, GLuint  dstMod, GLuint  arg1, GLuint  arg1Rep, GLuint  arg1Mod) {
//   (*fnptr)(op, dst, dstMod, arg1, arg1Rep, arg1Mod);
// }
// void  glowAlphaFragmentOp2ATI(PALPHAFRAGMENTOP2ATI fnptr, GLenum  op, GLuint  dst, GLuint  dstMod, GLuint  arg1, GLuint  arg1Rep, GLuint  arg1Mod, GLuint  arg2, GLuint  arg2Rep, GLuint  arg2Mod) {
//   (*fnptr)(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
// }
// void  glowAlphaFragmentOp3ATI(PALPHAFRAGMENTOP3ATI fnptr, GLenum  op, GLuint  dst, GLuint  dstMod, GLuint  arg1, GLuint  arg1Rep, GLuint  arg1Mod, GLuint  arg2, GLuint  arg2Rep, GLuint  arg2Mod, GLuint  arg3, GLuint  arg3Rep, GLuint  arg3Mod) {
//   (*fnptr)(op, dst, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
// }
// void  glowAlphaFuncxOES(PALPHAFUNCXOES fnptr, GLenum  func, GLfixed  ref) {
//   (*fnptr)(func, ref);
// }
// void  glowApplyTextureEXT(PAPPLYTEXTUREEXT fnptr, GLenum  mode) {
//   (*fnptr)(mode);
// }
// GLboolean  glowAreProgramsResidentNV(PAREPROGRAMSRESIDENTNV fnptr, GLsizei  n, const GLuint * programs, GLboolean * residences) {
//   return (*fnptr)(n, programs, residences);
// }
// GLboolean  glowAreTexturesResidentEXT(PARETEXTURESRESIDENTEXT fnptr, GLsizei  n, const GLuint * textures, GLboolean * residences) {
//   return (*fnptr)(n, textures, residences);
// }
// void  glowArrayElementEXT(PARRAYELEMENTEXT fnptr, GLint  i) {
//   (*fnptr)(i);
// }
// void  glowArrayObjectATI(PARRAYOBJECTATI fnptr, GLenum  array, GLint  size, GLenum  type, GLsizei  stride, GLuint  buffer, GLuint  offset) {
//   (*fnptr)(array, size, type, stride, buffer, offset);
// }
// void  glowAsyncMarkerSGIX(PASYNCMARKERSGIX fnptr, GLuint  marker) {
//   (*fnptr)(marker);
// }
// void  glowAttachObjectARB(PATTACHOBJECTARB fnptr, GLhandleARB  containerObj, GLhandleARB  obj) {
//   (*fnptr)(containerObj, obj);
// }
// void  glowAttachShader(PATTACHSHADER fnptr, GLuint  program, GLuint  shader) {
//   (*fnptr)(program, shader);
// }
// void  glowBeginConditionalRender(PBEGINCONDITIONALRENDER fnptr, GLuint  id, GLenum  mode) {
//   (*fnptr)(id, mode);
// }
// void  glowBeginConditionalRenderNV(PBEGINCONDITIONALRENDERNV fnptr, GLuint  id, GLenum  mode) {
//   (*fnptr)(id, mode);
// }
// void  glowBeginConditionalRenderNVX(PBEGINCONDITIONALRENDERNVX fnptr, GLuint  id) {
//   (*fnptr)(id);
// }
// void  glowBeginFragmentShaderATI(PBEGINFRAGMENTSHADERATI fnptr) {
//   (*fnptr)();
// }
// void  glowBeginOcclusionQueryNV(PBEGINOCCLUSIONQUERYNV fnptr, GLuint  id) {
//   (*fnptr)(id);
// }
// void  glowBeginPerfMonitorAMD(PBEGINPERFMONITORAMD fnptr, GLuint  monitor) {
//   (*fnptr)(monitor);
// }
// void  glowBeginPerfQueryINTEL(PBEGINPERFQUERYINTEL fnptr, GLuint  queryHandle) {
//   (*fnptr)(queryHandle);
// }
// void  glowBeginQuery(PBEGINQUERY fnptr, GLenum  target, GLuint  id) {
//   (*fnptr)(target, id);
// }
// void  glowBeginQueryARB(PBEGINQUERYARB fnptr, GLenum  target, GLuint  id) {
//   (*fnptr)(target, id);
// }
// void  glowBeginQueryIndexed(PBEGINQUERYINDEXED fnptr, GLenum  target, GLuint  index, GLuint  id) {
//   (*fnptr)(target, index, id);
// }
// void  glowBeginTransformFeedback(PBEGINTRANSFORMFEEDBACK fnptr, GLenum  primitiveMode) {
//   (*fnptr)(primitiveMode);
// }
// void  glowBeginTransformFeedbackEXT(PBEGINTRANSFORMFEEDBACKEXT fnptr, GLenum  primitiveMode) {
//   (*fnptr)(primitiveMode);
// }
// void  glowBeginTransformFeedbackNV(PBEGINTRANSFORMFEEDBACKNV fnptr, GLenum  primitiveMode) {
//   (*fnptr)(primitiveMode);
// }
// void  glowBeginVertexShaderEXT(PBEGINVERTEXSHADEREXT fnptr) {
//   (*fnptr)();
// }
// void  glowBeginVideoCaptureNV(PBEGINVIDEOCAPTURENV fnptr, GLuint  video_capture_slot) {
//   (*fnptr)(video_capture_slot);
// }
// void  glowBindAttribLocation(PBINDATTRIBLOCATION fnptr, GLuint  program, GLuint  index, const GLchar * name) {
//   (*fnptr)(program, index, name);
// }
// void  glowBindAttribLocationARB(PBINDATTRIBLOCATIONARB fnptr, GLhandleARB  programObj, GLuint  index, const GLcharARB * name) {
//   (*fnptr)(programObj, index, name);
// }
// void  glowBindBuffer(PBINDBUFFER fnptr, GLenum  target, GLuint  buffer) {
//   (*fnptr)(target, buffer);
// }
// void  glowBindBufferARB(PBINDBUFFERARB fnptr, GLenum  target, GLuint  buffer) {
//   (*fnptr)(target, buffer);
// }
// void  glowBindBufferBase(PBINDBUFFERBASE fnptr, GLenum  target, GLuint  index, GLuint  buffer) {
//   (*fnptr)(target, index, buffer);
// }
// void  glowBindBufferBaseEXT(PBINDBUFFERBASEEXT fnptr, GLenum  target, GLuint  index, GLuint  buffer) {
//   (*fnptr)(target, index, buffer);
// }
// void  glowBindBufferBaseNV(PBINDBUFFERBASENV fnptr, GLenum  target, GLuint  index, GLuint  buffer) {
//   (*fnptr)(target, index, buffer);
// }
// void  glowBindBufferOffsetEXT(PBINDBUFFEROFFSETEXT fnptr, GLenum  target, GLuint  index, GLuint  buffer, GLintptr  offset) {
//   (*fnptr)(target, index, buffer, offset);
// }
// void  glowBindBufferOffsetNV(PBINDBUFFEROFFSETNV fnptr, GLenum  target, GLuint  index, GLuint  buffer, GLintptr  offset) {
//   (*fnptr)(target, index, buffer, offset);
// }
// void  glowBindBufferRange(PBINDBUFFERRANGE fnptr, GLenum  target, GLuint  index, GLuint  buffer, GLintptr  offset, GLsizeiptr  size) {
//   (*fnptr)(target, index, buffer, offset, size);
// }
// void  glowBindBufferRangeEXT(PBINDBUFFERRANGEEXT fnptr, GLenum  target, GLuint  index, GLuint  buffer, GLintptr  offset, GLsizeiptr  size) {
//   (*fnptr)(target, index, buffer, offset, size);
// }
// void  glowBindBufferRangeNV(PBINDBUFFERRANGENV fnptr, GLenum  target, GLuint  index, GLuint  buffer, GLintptr  offset, GLsizeiptr  size) {
//   (*fnptr)(target, index, buffer, offset, size);
// }
// void  glowBindBuffersBase(PBINDBUFFERSBASE fnptr, GLenum  target, GLuint  first, GLsizei  count, const GLuint * buffers) {
//   (*fnptr)(target, first, count, buffers);
// }
// void  glowBindBuffersRange(PBINDBUFFERSRANGE fnptr, GLenum  target, GLuint  first, GLsizei  count, const GLuint * buffers, const GLintptr * offsets, const GLsizeiptr * sizes) {
//   (*fnptr)(target, first, count, buffers, offsets, sizes);
// }
// void  glowBindFragDataLocation(PBINDFRAGDATALOCATION fnptr, GLuint  program, GLuint  color, const GLchar * name) {
//   (*fnptr)(program, color, name);
// }
// void  glowBindFragDataLocationEXT(PBINDFRAGDATALOCATIONEXT fnptr, GLuint  program, GLuint  color, const GLchar * name) {
//   (*fnptr)(program, color, name);
// }
// void  glowBindFragDataLocationIndexed(PBINDFRAGDATALOCATIONINDEXED fnptr, GLuint  program, GLuint  colorNumber, GLuint  index, const GLchar * name) {
//   (*fnptr)(program, colorNumber, index, name);
// }
// void  glowBindFragmentShaderATI(PBINDFRAGMENTSHADERATI fnptr, GLuint  id) {
//   (*fnptr)(id);
// }
// void  glowBindFramebuffer(PBINDFRAMEBUFFER fnptr, GLenum  target, GLuint  framebuffer) {
//   (*fnptr)(target, framebuffer);
// }
// void  glowBindFramebufferEXT(PBINDFRAMEBUFFEREXT fnptr, GLenum  target, GLuint  framebuffer) {
//   (*fnptr)(target, framebuffer);
// }
// void  glowBindImageTexture(PBINDIMAGETEXTURE fnptr, GLuint  unit, GLuint  texture, GLint  level, GLboolean  layered, GLint  layer, GLenum  access, GLenum  format) {
//   (*fnptr)(unit, texture, level, layered, layer, access, format);
// }
// void  glowBindImageTextureEXT(PBINDIMAGETEXTUREEXT fnptr, GLuint  index, GLuint  texture, GLint  level, GLboolean  layered, GLint  layer, GLenum  access, GLint  format) {
//   (*fnptr)(index, texture, level, layered, layer, access, format);
// }
// void  glowBindImageTextures(PBINDIMAGETEXTURES fnptr, GLuint  first, GLsizei  count, const GLuint * textures) {
//   (*fnptr)(first, count, textures);
// }
// GLuint  glowBindLightParameterEXT(PBINDLIGHTPARAMETEREXT fnptr, GLenum  light, GLenum  value) {
//   return (*fnptr)(light, value);
// }
// GLuint  glowBindMaterialParameterEXT(PBINDMATERIALPARAMETEREXT fnptr, GLenum  face, GLenum  value) {
//   return (*fnptr)(face, value);
// }
// void  glowBindMultiTextureEXT(PBINDMULTITEXTUREEXT fnptr, GLenum  texunit, GLenum  target, GLuint  texture) {
//   (*fnptr)(texunit, target, texture);
// }
// GLuint  glowBindParameterEXT(PBINDPARAMETEREXT fnptr, GLenum  value) {
//   return (*fnptr)(value);
// }
// void  glowBindProgramARB(PBINDPROGRAMARB fnptr, GLenum  target, GLuint  program) {
//   (*fnptr)(target, program);
// }
// void  glowBindProgramNV(PBINDPROGRAMNV fnptr, GLenum  target, GLuint  id) {
//   (*fnptr)(target, id);
// }
// void  glowBindProgramPipeline(PBINDPROGRAMPIPELINE fnptr, GLuint  pipeline) {
//   (*fnptr)(pipeline);
// }
// void  glowBindProgramPipelineEXT(PBINDPROGRAMPIPELINEEXT fnptr, GLuint  pipeline) {
//   (*fnptr)(pipeline);
// }
// void  glowBindRenderbuffer(PBINDRENDERBUFFER fnptr, GLenum  target, GLuint  renderbuffer) {
//   (*fnptr)(target, renderbuffer);
// }
// void  glowBindRenderbufferEXT(PBINDRENDERBUFFEREXT fnptr, GLenum  target, GLuint  renderbuffer) {
//   (*fnptr)(target, renderbuffer);
// }
// void  glowBindSampler(PBINDSAMPLER fnptr, GLuint  unit, GLuint  sampler) {
//   (*fnptr)(unit, sampler);
// }
// void  glowBindSamplers(PBINDSAMPLERS fnptr, GLuint  first, GLsizei  count, const GLuint * samplers) {
//   (*fnptr)(first, count, samplers);
// }
// GLuint  glowBindTexGenParameterEXT(PBINDTEXGENPARAMETEREXT fnptr, GLenum  unit, GLenum  coord, GLenum  value) {
//   return (*fnptr)(unit, coord, value);
// }
// void  glowBindTexture(PBINDTEXTURE fnptr, GLenum  target, GLuint  texture) {
//   (*fnptr)(target, texture);
// }
// void  glowBindTextureEXT(PBINDTEXTUREEXT fnptr, GLenum  target, GLuint  texture) {
//   (*fnptr)(target, texture);
// }
// GLuint  glowBindTextureUnitParameterEXT(PBINDTEXTUREUNITPARAMETEREXT fnptr, GLenum  unit, GLenum  value) {
//   return (*fnptr)(unit, value);
// }
// void  glowBindTextures(PBINDTEXTURES fnptr, GLuint  first, GLsizei  count, const GLuint * textures) {
//   (*fnptr)(first, count, textures);
// }
// void  glowBindTransformFeedback(PBINDTRANSFORMFEEDBACK fnptr, GLenum  target, GLuint  id) {
//   (*fnptr)(target, id);
// }
// void  glowBindTransformFeedbackNV(PBINDTRANSFORMFEEDBACKNV fnptr, GLenum  target, GLuint  id) {
//   (*fnptr)(target, id);
// }
// void  glowBindVertexArray(PBINDVERTEXARRAY fnptr, GLuint  array) {
//   (*fnptr)(array);
// }
// void  glowBindVertexArrayAPPLE(PBINDVERTEXARRAYAPPLE fnptr, GLuint  array) {
//   (*fnptr)(array);
// }
// void  glowBindVertexBuffer(PBINDVERTEXBUFFER fnptr, GLuint  bindingindex, GLuint  buffer, GLintptr  offset, GLsizei  stride) {
//   (*fnptr)(bindingindex, buffer, offset, stride);
// }
// void  glowBindVertexBuffers(PBINDVERTEXBUFFERS fnptr, GLuint  first, GLsizei  count, const GLuint * buffers, const GLintptr * offsets, const GLsizei * strides) {
//   (*fnptr)(first, count, buffers, offsets, strides);
// }
// void  glowBindVertexShaderEXT(PBINDVERTEXSHADEREXT fnptr, GLuint  id) {
//   (*fnptr)(id);
// }
// void  glowBindVideoCaptureStreamBufferNV(PBINDVIDEOCAPTURESTREAMBUFFERNV fnptr, GLuint  video_capture_slot, GLuint  stream, GLenum  frame_region, GLintptrARB  offset) {
//   (*fnptr)(video_capture_slot, stream, frame_region, offset);
// }
// void  glowBindVideoCaptureStreamTextureNV(PBINDVIDEOCAPTURESTREAMTEXTURENV fnptr, GLuint  video_capture_slot, GLuint  stream, GLenum  frame_region, GLenum  target, GLuint  texture) {
//   (*fnptr)(video_capture_slot, stream, frame_region, target, texture);
// }
// void  glowBinormal3bEXT(PBINORMAL3BEXT fnptr, GLbyte  bx, GLbyte  by, GLbyte  bz) {
//   (*fnptr)(bx, by, bz);
// }
// void  glowBinormal3bvEXT(PBINORMAL3BVEXT fnptr, const GLbyte * v) {
//   (*fnptr)(v);
// }
// void  glowBinormal3dEXT(PBINORMAL3DEXT fnptr, GLdouble  bx, GLdouble  by, GLdouble  bz) {
//   (*fnptr)(bx, by, bz);
// }
// void  glowBinormal3dvEXT(PBINORMAL3DVEXT fnptr, const GLdouble * v) {
//   (*fnptr)(v);
// }
// void  glowBinormal3fEXT(PBINORMAL3FEXT fnptr, GLfloat  bx, GLfloat  by, GLfloat  bz) {
//   (*fnptr)(bx, by, bz);
// }
// void  glowBinormal3fvEXT(PBINORMAL3FVEXT fnptr, const GLfloat * v) {
//   (*fnptr)(v);
// }
// void  glowBinormal3iEXT(PBINORMAL3IEXT fnptr, GLint  bx, GLint  by, GLint  bz) {
//   (*fnptr)(bx, by, bz);
// }
// void  glowBinormal3ivEXT(PBINORMAL3IVEXT fnptr, const GLint * v) {
//   (*fnptr)(v);
// }
// void  glowBinormal3sEXT(PBINORMAL3SEXT fnptr, GLshort  bx, GLshort  by, GLshort  bz) {
//   (*fnptr)(bx, by, bz);
// }
// void  glowBinormal3svEXT(PBINORMAL3SVEXT fnptr, const GLshort * v) {
//   (*fnptr)(v);
// }
// void  glowBinormalPointerEXT(PBINORMALPOINTEREXT fnptr, GLenum  type, GLsizei  stride, const void * pointer) {
//   (*fnptr)(type, stride, pointer);
// }
// void  glowBitmapxOES(PBITMAPXOES fnptr, GLsizei  width, GLsizei  height, GLfixed  xorig, GLfixed  yorig, GLfixed  xmove, GLfixed  ymove, const GLubyte * bitmap) {
//   (*fnptr)(width, height, xorig, yorig, xmove, ymove, bitmap);
// }
// void  glowBlendBarrierNV(PBLENDBARRIERNV fnptr) {
//   (*fnptr)();
// }
// void  glowBlendColor(PBLENDCOLOR fnptr, GLfloat  red, GLfloat  green, GLfloat  blue, GLfloat  alpha) {
//   (*fnptr)(red, green, blue, alpha);
// }
// void  glowBlendColorEXT(PBLENDCOLOREXT fnptr, GLfloat  red, GLfloat  green, GLfloat  blue, GLfloat  alpha) {
//   (*fnptr)(red, green, blue, alpha);
// }
// void  glowBlendColorxOES(PBLENDCOLORXOES fnptr, GLfixed  red, GLfixed  green, GLfixed  blue, GLfixed  alpha) {
//   (*fnptr)(red, green, blue, alpha);
// }
// void  glowBlendEquation(PBLENDEQUATION fnptr, GLenum  mode) {
//   (*fnptr)(mode);
// }
// void  glowBlendEquationEXT(PBLENDEQUATIONEXT fnptr, GLenum  mode) {
//   (*fnptr)(mode);
// }
// void  glowBlendEquationIndexedAMD(PBLENDEQUATIONINDEXEDAMD fnptr, GLuint  buf, GLenum  mode) {
//   (*fnptr)(buf, mode);
// }
// void  glowBlendEquationSeparate(PBLENDEQUATIONSEPARATE fnptr, GLenum  modeRGB, GLenum  modeAlpha) {
//   (*fnptr)(modeRGB, modeAlpha);
// }
// void  glowBlendEquationSeparateEXT(PBLENDEQUATIONSEPARATEEXT fnptr, GLenum  modeRGB, GLenum  modeAlpha) {
//   (*fnptr)(modeRGB, modeAlpha);
// }
// void  glowBlendEquationSeparateIndexedAMD(PBLENDEQUATIONSEPARATEINDEXEDAMD fnptr, GLuint  buf, GLenum  modeRGB, GLenum  modeAlpha) {
//   (*fnptr)(buf, modeRGB, modeAlpha);
// }
// void  glowBlendEquationSeparatei(PBLENDEQUATIONSEPARATEI fnptr, GLuint  buf, GLenum  modeRGB, GLenum  modeAlpha) {
//   (*fnptr)(buf, modeRGB, modeAlpha);
// }
// void  glowBlendEquationSeparateiARB(PBLENDEQUATIONSEPARATEIARB fnptr, GLuint  buf, GLenum  modeRGB, GLenum  modeAlpha) {
//   (*fnptr)(buf, modeRGB, modeAlpha);
// }
// void  glowBlendEquationi(PBLENDEQUATIONI fnptr, GLuint  buf, GLenum  mode) {
//   (*fnptr)(buf, mode);
// }
// void  glowBlendEquationiARB(PBLENDEQUATIONIARB fnptr, GLuint  buf, GLenum  mode) {
//   (*fnptr)(buf, mode);
// }
// void  glowBlendFunc(PBLENDFUNC fnptr, GLenum  sfactor, GLenum  dfactor) {
//   (*fnptr)(sfactor, dfactor);
// }
// void  glowBlendFuncIndexedAMD(PBLENDFUNCINDEXEDAMD fnptr, GLuint  buf, GLenum  src, GLenum  dst) {
//   (*fnptr)(buf, src, dst);
// }
// void  glowBlendFuncSeparate(PBLENDFUNCSEPARATE fnptr, GLenum  sfactorRGB, GLenum  dfactorRGB, GLenum  sfactorAlpha, GLenum  dfactorAlpha) {
//   (*fnptr)(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
// }
// void  glowBlendFuncSeparateEXT(PBLENDFUNCSEPARATEEXT fnptr, GLenum  sfactorRGB, GLenum  dfactorRGB, GLenum  sfactorAlpha, GLenum  dfactorAlpha) {
//   (*fnptr)(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
// }
// void  glowBlendFuncSeparateINGR(PBLENDFUNCSEPARATEINGR fnptr, GLenum  sfactorRGB, GLenum  dfactorRGB, GLenum  sfactorAlpha, GLenum  dfactorAlpha) {
//   (*fnptr)(sfactorRGB, dfactorRGB, sfactorAlpha, dfactorAlpha);
// }
// void  glowBlendFuncSeparateIndexedAMD(PBLENDFUNCSEPARATEINDEXEDAMD fnptr, GLuint  buf, GLenum  srcRGB, GLenum  dstRGB, GLenum  srcAlpha, GLenum  dstAlpha) {
//   (*fnptr)(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
// }
// void  glowBlendFuncSeparatei(PBLENDFUNCSEPARATEI fnptr, GLuint  buf, GLenum  srcRGB, GLenum  dstRGB, GLenum  srcAlpha, GLenum  dstAlpha) {
//   (*fnptr)(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
// }
// void  glowBlendFuncSeparateiARB(PBLENDFUNCSEPARATEIARB fnptr, GLuint  buf, GLenum  srcRGB, GLenum  dstRGB, GLenum  srcAlpha, GLenum  dstAlpha) {
//   (*fnptr)(buf, srcRGB, dstRGB, srcAlpha, dstAlpha);
// }
// void  glowBlendFunci(PBLENDFUNCI fnptr, GLuint  buf, GLenum  src, GLenum  dst) {
//   (*fnptr)(buf, src, dst);
// }
// void  glowBlendFunciARB(PBLENDFUNCIARB fnptr, GLuint  buf, GLenum  src, GLenum  dst) {
//   (*fnptr)(buf, src, dst);
// }
// void  glowBlendParameteriNV(PBLENDPARAMETERINV fnptr, GLenum  pname, GLint  value) {
//   (*fnptr)(pname, value);
// }
// void  glowBlitFramebuffer(PBLITFRAMEBUFFER fnptr, GLint  srcX0, GLint  srcY0, GLint  srcX1, GLint  srcY1, GLint  dstX0, GLint  dstY0, GLint  dstX1, GLint  dstY1, GLbitfield  mask, GLenum  filter) {
//   (*fnptr)(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
// }
// void  glowBlitFramebufferEXT(PBLITFRAMEBUFFEREXT fnptr, GLint  srcX0, GLint  srcY0, GLint  srcX1, GLint  srcY1, GLint  dstX0, GLint  dstY0, GLint  dstX1, GLint  dstY1, GLbitfield  mask, GLenum  filter) {
//   (*fnptr)(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1, mask, filter);
// }
// void  glowBufferAddressRangeNV(PBUFFERADDRESSRANGENV fnptr, GLenum  pname, GLuint  index, GLuint64EXT  address, GLsizeiptr  length) {
//   (*fnptr)(pname, index, address, length);
// }
// void  glowBufferData(PBUFFERDATA fnptr, GLenum  target, GLsizeiptr  size, const void * data, GLenum  usage) {
//   (*fnptr)(target, size, data, usage);
// }
// void  glowBufferDataARB(PBUFFERDATAARB fnptr, GLenum  target, GLsizeiptrARB  size, const void * data, GLenum  usage) {
//   (*fnptr)(target, size, data, usage);
// }
// void  glowBufferParameteriAPPLE(PBUFFERPARAMETERIAPPLE fnptr, GLenum  target, GLenum  pname, GLint  param) {
//   (*fnptr)(target, pname, param);
// }
// void  glowBufferStorage(PBUFFERSTORAGE fnptr, GLenum  target, GLsizeiptr  size, const void * data, GLbitfield  flags) {
//   (*fnptr)(target, size, data, flags);
// }
// void  glowBufferSubData(PBUFFERSUBDATA fnptr, GLenum  target, GLintptr  offset, GLsizeiptr  size, const void * data) {
//   (*fnptr)(target, offset, size, data);
// }
// void  glowBufferSubDataARB(PBUFFERSUBDATAARB fnptr, GLenum  target, GLintptrARB  offset, GLsizeiptrARB  size, const void * data) {
//   (*fnptr)(target, offset, size, data);
// }
// GLenum  glowCheckFramebufferStatus(PCHECKFRAMEBUFFERSTATUS fnptr, GLenum  target) {
//   return (*fnptr)(target);
// }
// GLenum  glowCheckFramebufferStatusEXT(PCHECKFRAMEBUFFERSTATUSEXT fnptr, GLenum  target) {
//   return (*fnptr)(target);
// }
// GLenum  glowCheckNamedFramebufferStatusEXT(PCHECKNAMEDFRAMEBUFFERSTATUSEXT fnptr, GLuint  framebuffer, GLenum  target) {
//   return (*fnptr)(framebuffer, target);
// }
// void  glowClampColor(PCLAMPCOLOR fnptr, GLenum  target, GLenum  clamp) {
//   (*fnptr)(target, clamp);
// }
// void  glowClampColorARB(PCLAMPCOLORARB fnptr, GLenum  target, GLenum  clamp) {
//   (*fnptr)(target, clamp);
// }
// void  glowClear(PCLEAR fnptr, GLbitfield  mask) {
//   (*fnptr)(mask);
// }
// void  glowClearAccumxOES(PCLEARACCUMXOES fnptr, GLfixed  red, GLfixed  green, GLfixed  blue, GLfixed  alpha) {
//   (*fnptr)(red, green, blue, alpha);
// }
// void  glowClearBufferData(PCLEARBUFFERDATA fnptr, GLenum  target, GLenum  internalformat, GLenum  format, GLenum  type, const void * data) {
//   (*fnptr)(target, internalformat, format, type, data);
// }
// void  glowClearBufferSubData(PCLEARBUFFERSUBDATA fnptr, GLenum  target, GLenum  internalformat, GLintptr  offset, GLsizeiptr  size, GLenum  format, GLenum  type, const void * data) {
//   (*fnptr)(target, internalformat, offset, size, format, type, data);
// }
// void  glowClearBufferfi(PCLEARBUFFERFI fnptr, GLenum  buffer, GLint  drawbuffer, GLfloat  depth, GLint  stencil) {
//   (*fnptr)(buffer, drawbuffer, depth, stencil);
// }
// void  glowClearBufferfv(PCLEARBUFFERFV fnptr, GLenum  buffer, GLint  drawbuffer, const GLfloat * value) {
//   (*fnptr)(buffer, drawbuffer, value);
// }
// void  glowClearBufferiv(PCLEARBUFFERIV fnptr, GLenum  buffer, GLint  drawbuffer, const GLint * value) {
//   (*fnptr)(buffer, drawbuffer, value);
// }
// void  glowClearBufferuiv(PCLEARBUFFERUIV fnptr, GLenum  buffer, GLint  drawbuffer, const GLuint * value) {
//   (*fnptr)(buffer, drawbuffer, value);
// }
// void  glowClearColor(PCLEARCOLOR fnptr, GLfloat  red, GLfloat  green, GLfloat  blue, GLfloat  alpha) {
//   (*fnptr)(red, green, blue, alpha);
// }
// void  glowClearColorIiEXT(PCLEARCOLORIIEXT fnptr, GLint  red, GLint  green, GLint  blue, GLint  alpha) {
//   (*fnptr)(red, green, blue, alpha);
// }
// void  glowClearColorIuiEXT(PCLEARCOLORIUIEXT fnptr, GLuint  red, GLuint  green, GLuint  blue, GLuint  alpha) {
//   (*fnptr)(red, green, blue, alpha);
// }
// void  glowClearColorxOES(PCLEARCOLORXOES fnptr, GLfixed  red, GLfixed  green, GLfixed  blue, GLfixed  alpha) {
//   (*fnptr)(red, green, blue, alpha);
// }
// void  glowClearDepth(PCLEARDEPTH fnptr, GLdouble  depth) {
//   (*fnptr)(depth);
// }
// void  glowClearDepthdNV(PCLEARDEPTHDNV fnptr, GLdouble  depth) {
//   (*fnptr)(depth);
// }
// void  glowClearDepthf(PCLEARDEPTHF fnptr, GLfloat  d) {
//   (*fnptr)(d);
// }
// void  glowClearDepthfOES(PCLEARDEPTHFOES fnptr, GLclampf  depth) {
//   (*fnptr)(depth);
// }
// void  glowClearDepthxOES(PCLEARDEPTHXOES fnptr, GLfixed  depth) {
//   (*fnptr)(depth);
// }
// void  glowClearNamedBufferDataEXT(PCLEARNAMEDBUFFERDATAEXT fnptr, GLuint  buffer, GLenum  internalformat, GLenum  format, GLenum  type, const void * data) {
//   (*fnptr)(buffer, internalformat, format, type, data);
// }
// void  glowClearNamedBufferSubDataEXT(PCLEARNAMEDBUFFERSUBDATAEXT fnptr, GLuint  buffer, GLenum  internalformat, GLsizeiptr  offset, GLsizeiptr  size, GLenum  format, GLenum  type, const void * data) {
//   (*fnptr)(buffer, internalformat, offset, size, format, type, data);
// }
// void  glowClearStencil(PCLEARSTENCIL fnptr, GLint  s) {
//   (*fnptr)(s);
// }
// void  glowClearTexImage(PCLEARTEXIMAGE fnptr, GLuint  texture, GLint  level, GLenum  format, GLenum  type, const void * data) {
//   (*fnptr)(texture, level, format, type, data);
// }
// void  glowClearTexSubImage(PCLEARTEXSUBIMAGE fnptr, GLuint  texture, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLsizei  width, GLsizei  height, GLsizei  depth, GLenum  format, GLenum  type, const void * data) {
//   (*fnptr)(texture, level, xoffset, yoffset, zoffset, width, height, depth, format, type, data);
// }
// void  glowClientActiveTextureARB(PCLIENTACTIVETEXTUREARB fnptr, GLenum  texture) {
//   (*fnptr)(texture);
// }
// void  glowClientActiveVertexStreamATI(PCLIENTACTIVEVERTEXSTREAMATI fnptr, GLenum  stream) {
//   (*fnptr)(stream);
// }
// void  glowClientAttribDefaultEXT(PCLIENTATTRIBDEFAULTEXT fnptr, GLbitfield  mask) {
//   (*fnptr)(mask);
// }
// GLenum  glowClientWaitSync(PCLIENTWAITSYNC fnptr, GLsync  sync, GLbitfield  flags, GLuint64  timeout) {
//   return (*fnptr)(sync, flags, timeout);
// }
// void  glowClipPlanefOES(PCLIPPLANEFOES fnptr, GLenum  plane, const GLfloat * equation) {
//   (*fnptr)(plane, equation);
// }
// void  glowClipPlanexOES(PCLIPPLANEXOES fnptr, GLenum  plane, const GLfixed * equation) {
//   (*fnptr)(plane, equation);
// }
// void  glowColor3fVertex3fSUN(PCOLOR3FVERTEX3FSUN fnptr, GLfloat  r, GLfloat  g, GLfloat  b, GLfloat  x, GLfloat  y, GLfloat  z) {
//   (*fnptr)(r, g, b, x, y, z);
// }
// void  glowColor3fVertex3fvSUN(PCOLOR3FVERTEX3FVSUN fnptr, const GLfloat * c, const GLfloat * v) {
//   (*fnptr)(c, v);
// }
// void  glowColor3hNV(PCOLOR3HNV fnptr, GLhalfNV  red, GLhalfNV  green, GLhalfNV  blue) {
//   (*fnptr)(red, green, blue);
// }
// void  glowColor3hvNV(PCOLOR3HVNV fnptr, const GLhalfNV * v) {
//   (*fnptr)(v);
// }
// void  glowColor3xOES(PCOLOR3XOES fnptr, GLfixed  red, GLfixed  green, GLfixed  blue) {
//   (*fnptr)(red, green, blue);
// }
// void  glowColor3xvOES(PCOLOR3XVOES fnptr, const GLfixed * components) {
//   (*fnptr)(components);
// }
// void  glowColor4fNormal3fVertex3fSUN(PCOLOR4FNORMAL3FVERTEX3FSUN fnptr, GLfloat  r, GLfloat  g, GLfloat  b, GLfloat  a, GLfloat  nx, GLfloat  ny, GLfloat  nz, GLfloat  x, GLfloat  y, GLfloat  z) {
//   (*fnptr)(r, g, b, a, nx, ny, nz, x, y, z);
// }
// void  glowColor4fNormal3fVertex3fvSUN(PCOLOR4FNORMAL3FVERTEX3FVSUN fnptr, const GLfloat * c, const GLfloat * n, const GLfloat * v) {
//   (*fnptr)(c, n, v);
// }
// void  glowColor4hNV(PCOLOR4HNV fnptr, GLhalfNV  red, GLhalfNV  green, GLhalfNV  blue, GLhalfNV  alpha) {
//   (*fnptr)(red, green, blue, alpha);
// }
// void  glowColor4hvNV(PCOLOR4HVNV fnptr, const GLhalfNV * v) {
//   (*fnptr)(v);
// }
// void  glowColor4ubVertex2fSUN(PCOLOR4UBVERTEX2FSUN fnptr, GLubyte  r, GLubyte  g, GLubyte  b, GLubyte  a, GLfloat  x, GLfloat  y) {
//   (*fnptr)(r, g, b, a, x, y);
// }
// void  glowColor4ubVertex2fvSUN(PCOLOR4UBVERTEX2FVSUN fnptr, const GLubyte * c, const GLfloat * v) {
//   (*fnptr)(c, v);
// }
// void  glowColor4ubVertex3fSUN(PCOLOR4UBVERTEX3FSUN fnptr, GLubyte  r, GLubyte  g, GLubyte  b, GLubyte  a, GLfloat  x, GLfloat  y, GLfloat  z) {
//   (*fnptr)(r, g, b, a, x, y, z);
// }
// void  glowColor4ubVertex3fvSUN(PCOLOR4UBVERTEX3FVSUN fnptr, const GLubyte * c, const GLfloat * v) {
//   (*fnptr)(c, v);
// }
// void  glowColor4xOES(PCOLOR4XOES fnptr, GLfixed  red, GLfixed  green, GLfixed  blue, GLfixed  alpha) {
//   (*fnptr)(red, green, blue, alpha);
// }
// void  glowColor4xvOES(PCOLOR4XVOES fnptr, const GLfixed * components) {
//   (*fnptr)(components);
// }
// void  glowColorFormatNV(PCOLORFORMATNV fnptr, GLint  size, GLenum  type, GLsizei  stride) {
//   (*fnptr)(size, type, stride);
// }
// void  glowColorFragmentOp1ATI(PCOLORFRAGMENTOP1ATI fnptr, GLenum  op, GLuint  dst, GLuint  dstMask, GLuint  dstMod, GLuint  arg1, GLuint  arg1Rep, GLuint  arg1Mod) {
//   (*fnptr)(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod);
// }
// void  glowColorFragmentOp2ATI(PCOLORFRAGMENTOP2ATI fnptr, GLenum  op, GLuint  dst, GLuint  dstMask, GLuint  dstMod, GLuint  arg1, GLuint  arg1Rep, GLuint  arg1Mod, GLuint  arg2, GLuint  arg2Rep, GLuint  arg2Mod) {
//   (*fnptr)(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod);
// }
// void  glowColorFragmentOp3ATI(PCOLORFRAGMENTOP3ATI fnptr, GLenum  op, GLuint  dst, GLuint  dstMask, GLuint  dstMod, GLuint  arg1, GLuint  arg1Rep, GLuint  arg1Mod, GLuint  arg2, GLuint  arg2Rep, GLuint  arg2Mod, GLuint  arg3, GLuint  arg3Rep, GLuint  arg3Mod) {
//   (*fnptr)(op, dst, dstMask, dstMod, arg1, arg1Rep, arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
// }
// void  glowColorMask(PCOLORMASK fnptr, GLboolean  red, GLboolean  green, GLboolean  blue, GLboolean  alpha) {
//   (*fnptr)(red, green, blue, alpha);
// }
// void  glowColorMaskIndexedEXT(PCOLORMASKINDEXEDEXT fnptr, GLuint  index, GLboolean  r, GLboolean  g, GLboolean  b, GLboolean  a) {
//   (*fnptr)(index, r, g, b, a);
// }
// void  glowColorMaski(PCOLORMASKI fnptr, GLuint  index, GLboolean  r, GLboolean  g, GLboolean  b, GLboolean  a) {
//   (*fnptr)(index, r, g, b, a);
// }
// void  glowColorPointerEXT(PCOLORPOINTEREXT fnptr, GLint  size, GLenum  type, GLsizei  stride, GLsizei  count, const void * pointer) {
//   (*fnptr)(size, type, stride, count, pointer);
// }
// void  glowColorPointerListIBM(PCOLORPOINTERLISTIBM fnptr, GLint  size, GLenum  type, GLint  stride, const void ** pointer, GLint  ptrstride) {
//   (*fnptr)(size, type, stride, pointer, ptrstride);
// }
// void  glowColorPointervINTEL(PCOLORPOINTERVINTEL fnptr, GLint  size, GLenum  type, const void ** pointer) {
//   (*fnptr)(size, type, pointer);
// }
// void  glowColorSubTableEXT(PCOLORSUBTABLEEXT fnptr, GLenum  target, GLsizei  start, GLsizei  count, GLenum  format, GLenum  type, const void * data) {
//   (*fnptr)(target, start, count, format, type, data);
// }
// void  glowColorTableEXT(PCOLORTABLEEXT fnptr, GLenum  target, GLenum  internalFormat, GLsizei  width, GLenum  format, GLenum  type, const void * table) {
//   (*fnptr)(target, internalFormat, width, format, type, table);
// }
// void  glowColorTableParameterfvSGI(PCOLORTABLEPARAMETERFVSGI fnptr, GLenum  target, GLenum  pname, const GLfloat * params) {
//   (*fnptr)(target, pname, params);
// }
// void  glowColorTableParameterivSGI(PCOLORTABLEPARAMETERIVSGI fnptr, GLenum  target, GLenum  pname, const GLint * params) {
//   (*fnptr)(target, pname, params);
// }
// void  glowColorTableSGI(PCOLORTABLESGI fnptr, GLenum  target, GLenum  internalformat, GLsizei  width, GLenum  format, GLenum  type, const void * table) {
//   (*fnptr)(target, internalformat, width, format, type, table);
// }
// void  glowCombinerInputNV(PCOMBINERINPUTNV fnptr, GLenum  stage, GLenum  portion, GLenum  variable, GLenum  input, GLenum  mapping, GLenum  componentUsage) {
//   (*fnptr)(stage, portion, variable, input, mapping, componentUsage);
// }
// void  glowCombinerOutputNV(PCOMBINEROUTPUTNV fnptr, GLenum  stage, GLenum  portion, GLenum  abOutput, GLenum  cdOutput, GLenum  sumOutput, GLenum  scale, GLenum  bias, GLboolean  abDotProduct, GLboolean  cdDotProduct, GLboolean  muxSum) {
//   (*fnptr)(stage, portion, abOutput, cdOutput, sumOutput, scale, bias, abDotProduct, cdDotProduct, muxSum);
// }
// void  glowCombinerParameterfNV(PCOMBINERPARAMETERFNV fnptr, GLenum  pname, GLfloat  param) {
//   (*fnptr)(pname, param);
// }
// void  glowCombinerParameterfvNV(PCOMBINERPARAMETERFVNV fnptr, GLenum  pname, const GLfloat * params) {
//   (*fnptr)(pname, params);
// }
// void  glowCombinerParameteriNV(PCOMBINERPARAMETERINV fnptr, GLenum  pname, GLint  param) {
//   (*fnptr)(pname, param);
// }
// void  glowCombinerParameterivNV(PCOMBINERPARAMETERIVNV fnptr, GLenum  pname, const GLint * params) {
//   (*fnptr)(pname, params);
// }
// void  glowCombinerStageParameterfvNV(PCOMBINERSTAGEPARAMETERFVNV fnptr, GLenum  stage, GLenum  pname, const GLfloat * params) {
//   (*fnptr)(stage, pname, params);
// }
// void  glowCompileShader(PCOMPILESHADER fnptr, GLuint  shader) {
//   (*fnptr)(shader);
// }
// void  glowCompileShaderARB(PCOMPILESHADERARB fnptr, GLhandleARB  shaderObj) {
//   (*fnptr)(shaderObj);
// }
// void  glowCompileShaderIncludeARB(PCOMPILESHADERINCLUDEARB fnptr, GLuint  shader, GLsizei  count, const GLchar *const* path, const GLint * length) {
//   (*fnptr)(shader, count, path, length);
// }
// void  glowCompressedMultiTexImage1DEXT(PCOMPRESSEDMULTITEXIMAGE1DEXT fnptr, GLenum  texunit, GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLint  border, GLsizei  imageSize, const void * bits) {
//   (*fnptr)(texunit, target, level, internalformat, width, border, imageSize, bits);
// }
// void  glowCompressedMultiTexImage2DEXT(PCOMPRESSEDMULTITEXIMAGE2DEXT fnptr, GLenum  texunit, GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLsizei  height, GLint  border, GLsizei  imageSize, const void * bits) {
//   (*fnptr)(texunit, target, level, internalformat, width, height, border, imageSize, bits);
// }
// void  glowCompressedMultiTexImage3DEXT(PCOMPRESSEDMULTITEXIMAGE3DEXT fnptr, GLenum  texunit, GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth, GLint  border, GLsizei  imageSize, const void * bits) {
//   (*fnptr)(texunit, target, level, internalformat, width, height, depth, border, imageSize, bits);
// }
// void  glowCompressedMultiTexSubImage1DEXT(PCOMPRESSEDMULTITEXSUBIMAGE1DEXT fnptr, GLenum  texunit, GLenum  target, GLint  level, GLint  xoffset, GLsizei  width, GLenum  format, GLsizei  imageSize, const void * bits) {
//   (*fnptr)(texunit, target, level, xoffset, width, format, imageSize, bits);
// }
// void  glowCompressedMultiTexSubImage2DEXT(PCOMPRESSEDMULTITEXSUBIMAGE2DEXT fnptr, GLenum  texunit, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLsizei  width, GLsizei  height, GLenum  format, GLsizei  imageSize, const void * bits) {
//   (*fnptr)(texunit, target, level, xoffset, yoffset, width, height, format, imageSize, bits);
// }
// void  glowCompressedMultiTexSubImage3DEXT(PCOMPRESSEDMULTITEXSUBIMAGE3DEXT fnptr, GLenum  texunit, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLsizei  width, GLsizei  height, GLsizei  depth, GLenum  format, GLsizei  imageSize, const void * bits) {
//   (*fnptr)(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits);
// }
// void  glowCompressedTexImage1D(PCOMPRESSEDTEXIMAGE1D fnptr, GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLint  border, GLsizei  imageSize, const void * data) {
//   (*fnptr)(target, level, internalformat, width, border, imageSize, data);
// }
// void  glowCompressedTexImage1DARB(PCOMPRESSEDTEXIMAGE1DARB fnptr, GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLint  border, GLsizei  imageSize, const void * data) {
//   (*fnptr)(target, level, internalformat, width, border, imageSize, data);
// }
// void  glowCompressedTexImage2D(PCOMPRESSEDTEXIMAGE2D fnptr, GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLsizei  height, GLint  border, GLsizei  imageSize, const void * data) {
//   (*fnptr)(target, level, internalformat, width, height, border, imageSize, data);
// }
// void  glowCompressedTexImage2DARB(PCOMPRESSEDTEXIMAGE2DARB fnptr, GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLsizei  height, GLint  border, GLsizei  imageSize, const void * data) {
//   (*fnptr)(target, level, internalformat, width, height, border, imageSize, data);
// }
// void  glowCompressedTexImage3D(PCOMPRESSEDTEXIMAGE3D fnptr, GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth, GLint  border, GLsizei  imageSize, const void * data) {
//   (*fnptr)(target, level, internalformat, width, height, depth, border, imageSize, data);
// }
// void  glowCompressedTexImage3DARB(PCOMPRESSEDTEXIMAGE3DARB fnptr, GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth, GLint  border, GLsizei  imageSize, const void * data) {
//   (*fnptr)(target, level, internalformat, width, height, depth, border, imageSize, data);
// }
// void  glowCompressedTexSubImage1D(PCOMPRESSEDTEXSUBIMAGE1D fnptr, GLenum  target, GLint  level, GLint  xoffset, GLsizei  width, GLenum  format, GLsizei  imageSize, const void * data) {
//   (*fnptr)(target, level, xoffset, width, format, imageSize, data);
// }
// void  glowCompressedTexSubImage1DARB(PCOMPRESSEDTEXSUBIMAGE1DARB fnptr, GLenum  target, GLint  level, GLint  xoffset, GLsizei  width, GLenum  format, GLsizei  imageSize, const void * data) {
//   (*fnptr)(target, level, xoffset, width, format, imageSize, data);
// }
// void  glowCompressedTexSubImage2D(PCOMPRESSEDTEXSUBIMAGE2D fnptr, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLsizei  width, GLsizei  height, GLenum  format, GLsizei  imageSize, const void * data) {
//   (*fnptr)(target, level, xoffset, yoffset, width, height, format, imageSize, data);
// }
// void  glowCompressedTexSubImage2DARB(PCOMPRESSEDTEXSUBIMAGE2DARB fnptr, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLsizei  width, GLsizei  height, GLenum  format, GLsizei  imageSize, const void * data) {
//   (*fnptr)(target, level, xoffset, yoffset, width, height, format, imageSize, data);
// }
// void  glowCompressedTexSubImage3D(PCOMPRESSEDTEXSUBIMAGE3D fnptr, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLsizei  width, GLsizei  height, GLsizei  depth, GLenum  format, GLsizei  imageSize, const void * data) {
//   (*fnptr)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
// }
// void  glowCompressedTexSubImage3DARB(PCOMPRESSEDTEXSUBIMAGE3DARB fnptr, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLsizei  width, GLsizei  height, GLsizei  depth, GLenum  format, GLsizei  imageSize, const void * data) {
//   (*fnptr)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, data);
// }
// void  glowCompressedTextureImage1DEXT(PCOMPRESSEDTEXTUREIMAGE1DEXT fnptr, GLuint  texture, GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLint  border, GLsizei  imageSize, const void * bits) {
//   (*fnptr)(texture, target, level, internalformat, width, border, imageSize, bits);
// }
// void  glowCompressedTextureImage2DEXT(PCOMPRESSEDTEXTUREIMAGE2DEXT fnptr, GLuint  texture, GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLsizei  height, GLint  border, GLsizei  imageSize, const void * bits) {
//   (*fnptr)(texture, target, level, internalformat, width, height, border, imageSize, bits);
// }
// void  glowCompressedTextureImage3DEXT(PCOMPRESSEDTEXTUREIMAGE3DEXT fnptr, GLuint  texture, GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth, GLint  border, GLsizei  imageSize, const void * bits) {
//   (*fnptr)(texture, target, level, internalformat, width, height, depth, border, imageSize, bits);
// }
// void  glowCompressedTextureSubImage1DEXT(PCOMPRESSEDTEXTURESUBIMAGE1DEXT fnptr, GLuint  texture, GLenum  target, GLint  level, GLint  xoffset, GLsizei  width, GLenum  format, GLsizei  imageSize, const void * bits) {
//   (*fnptr)(texture, target, level, xoffset, width, format, imageSize, bits);
// }
// void  glowCompressedTextureSubImage2DEXT(PCOMPRESSEDTEXTURESUBIMAGE2DEXT fnptr, GLuint  texture, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLsizei  width, GLsizei  height, GLenum  format, GLsizei  imageSize, const void * bits) {
//   (*fnptr)(texture, target, level, xoffset, yoffset, width, height, format, imageSize, bits);
// }
// void  glowCompressedTextureSubImage3DEXT(PCOMPRESSEDTEXTURESUBIMAGE3DEXT fnptr, GLuint  texture, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLsizei  width, GLsizei  height, GLsizei  depth, GLenum  format, GLsizei  imageSize, const void * bits) {
//   (*fnptr)(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, imageSize, bits);
// }
// void  glowConvolutionFilter1DEXT(PCONVOLUTIONFILTER1DEXT fnptr, GLenum  target, GLenum  internalformat, GLsizei  width, GLenum  format, GLenum  type, const void * image) {
//   (*fnptr)(target, internalformat, width, format, type, image);
// }
// void  glowConvolutionFilter2DEXT(PCONVOLUTIONFILTER2DEXT fnptr, GLenum  target, GLenum  internalformat, GLsizei  width, GLsizei  height, GLenum  format, GLenum  type, const void * image) {
//   (*fnptr)(target, internalformat, width, height, format, type, image);
// }
// void  glowConvolutionParameterfEXT(PCONVOLUTIONPARAMETERFEXT fnptr, GLenum  target, GLenum  pname, GLfloat  params) {
//   (*fnptr)(target, pname, params);
// }
// void  glowConvolutionParameterfvEXT(PCONVOLUTIONPARAMETERFVEXT fnptr, GLenum  target, GLenum  pname, const GLfloat * params) {
//   (*fnptr)(target, pname, params);
// }
// void  glowConvolutionParameteriEXT(PCONVOLUTIONPARAMETERIEXT fnptr, GLenum  target, GLenum  pname, GLint  params) {
//   (*fnptr)(target, pname, params);
// }
// void  glowConvolutionParameterivEXT(PCONVOLUTIONPARAMETERIVEXT fnptr, GLenum  target, GLenum  pname, const GLint * params) {
//   (*fnptr)(target, pname, params);
// }
// void  glowConvolutionParameterxOES(PCONVOLUTIONPARAMETERXOES fnptr, GLenum  target, GLenum  pname, GLfixed  param) {
//   (*fnptr)(target, pname, param);
// }
// void  glowConvolutionParameterxvOES(PCONVOLUTIONPARAMETERXVOES fnptr, GLenum  target, GLenum  pname, const GLfixed * params) {
//   (*fnptr)(target, pname, params);
// }
// void  glowCopyBufferSubData(PCOPYBUFFERSUBDATA fnptr, GLenum  readTarget, GLenum  writeTarget, GLintptr  readOffset, GLintptr  writeOffset, GLsizeiptr  size) {
//   (*fnptr)(readTarget, writeTarget, readOffset, writeOffset, size);
// }
// void  glowCopyColorSubTableEXT(PCOPYCOLORSUBTABLEEXT fnptr, GLenum  target, GLsizei  start, GLint  x, GLint  y, GLsizei  width) {
//   (*fnptr)(target, start, x, y, width);
// }
// void  glowCopyColorTableSGI(PCOPYCOLORTABLESGI fnptr, GLenum  target, GLenum  internalformat, GLint  x, GLint  y, GLsizei  width) {
//   (*fnptr)(target, internalformat, x, y, width);
// }
// void  glowCopyConvolutionFilter1DEXT(PCOPYCONVOLUTIONFILTER1DEXT fnptr, GLenum  target, GLenum  internalformat, GLint  x, GLint  y, GLsizei  width) {
//   (*fnptr)(target, internalformat, x, y, width);
// }
// void  glowCopyConvolutionFilter2DEXT(PCOPYCONVOLUTIONFILTER2DEXT fnptr, GLenum  target, GLenum  internalformat, GLint  x, GLint  y, GLsizei  width, GLsizei  height) {
//   (*fnptr)(target, internalformat, x, y, width, height);
// }
// void  glowCopyImageSubData(PCOPYIMAGESUBDATA fnptr, GLuint  srcName, GLenum  srcTarget, GLint  srcLevel, GLint  srcX, GLint  srcY, GLint  srcZ, GLuint  dstName, GLenum  dstTarget, GLint  dstLevel, GLint  dstX, GLint  dstY, GLint  dstZ, GLsizei  srcWidth, GLsizei  srcHeight, GLsizei  srcDepth) {
//   (*fnptr)(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, srcWidth, srcHeight, srcDepth);
// }
// void  glowCopyImageSubDataNV(PCOPYIMAGESUBDATANV fnptr, GLuint  srcName, GLenum  srcTarget, GLint  srcLevel, GLint  srcX, GLint  srcY, GLint  srcZ, GLuint  dstName, GLenum  dstTarget, GLint  dstLevel, GLint  dstX, GLint  dstY, GLint  dstZ, GLsizei  width, GLsizei  height, GLsizei  depth) {
//   (*fnptr)(srcName, srcTarget, srcLevel, srcX, srcY, srcZ, dstName, dstTarget, dstLevel, dstX, dstY, dstZ, width, height, depth);
// }
// void  glowCopyMultiTexImage1DEXT(PCOPYMULTITEXIMAGE1DEXT fnptr, GLenum  texunit, GLenum  target, GLint  level, GLenum  internalformat, GLint  x, GLint  y, GLsizei  width, GLint  border) {
//   (*fnptr)(texunit, target, level, internalformat, x, y, width, border);
// }
// void  glowCopyMultiTexImage2DEXT(PCOPYMULTITEXIMAGE2DEXT fnptr, GLenum  texunit, GLenum  target, GLint  level, GLenum  internalformat, GLint  x, GLint  y, GLsizei  width, GLsizei  height, GLint  border) {
//   (*fnptr)(texunit, target, level, internalformat, x, y, width, height, border);
// }
// void  glowCopyMultiTexSubImage1DEXT(PCOPYMULTITEXSUBIMAGE1DEXT fnptr, GLenum  texunit, GLenum  target, GLint  level, GLint  xoffset, GLint  x, GLint  y, GLsizei  width) {
//   (*fnptr)(texunit, target, level, xoffset, x, y, width);
// }
// void  glowCopyMultiTexSubImage2DEXT(PCOPYMULTITEXSUBIMAGE2DEXT fnptr, GLenum  texunit, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  x, GLint  y, GLsizei  width, GLsizei  height) {
//   (*fnptr)(texunit, target, level, xoffset, yoffset, x, y, width, height);
// }
// void  glowCopyMultiTexSubImage3DEXT(PCOPYMULTITEXSUBIMAGE3DEXT fnptr, GLenum  texunit, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLint  x, GLint  y, GLsizei  width, GLsizei  height) {
//   (*fnptr)(texunit, target, level, xoffset, yoffset, zoffset, x, y, width, height);
// }
// void  glowCopyPathNV(PCOPYPATHNV fnptr, GLuint  resultPath, GLuint  srcPath) {
//   (*fnptr)(resultPath, srcPath);
// }
// void  glowCopyTexImage1D(PCOPYTEXIMAGE1D fnptr, GLenum  target, GLint  level, GLenum  internalformat, GLint  x, GLint  y, GLsizei  width, GLint  border) {
//   (*fnptr)(target, level, internalformat, x, y, width, border);
// }
// void  glowCopyTexImage1DEXT(PCOPYTEXIMAGE1DEXT fnptr, GLenum  target, GLint  level, GLenum  internalformat, GLint  x, GLint  y, GLsizei  width, GLint  border) {
//   (*fnptr)(target, level, internalformat, x, y, width, border);
// }
// void  glowCopyTexImage2D(PCOPYTEXIMAGE2D fnptr, GLenum  target, GLint  level, GLenum  internalformat, GLint  x, GLint  y, GLsizei  width, GLsizei  height, GLint  border) {
//   (*fnptr)(target, level, internalformat, x, y, width, height, border);
// }
// void  glowCopyTexImage2DEXT(PCOPYTEXIMAGE2DEXT fnptr, GLenum  target, GLint  level, GLenum  internalformat, GLint  x, GLint  y, GLsizei  width, GLsizei  height, GLint  border) {
//   (*fnptr)(target, level, internalformat, x, y, width, height, border);
// }
// void  glowCopyTexSubImage1D(PCOPYTEXSUBIMAGE1D fnptr, GLenum  target, GLint  level, GLint  xoffset, GLint  x, GLint  y, GLsizei  width) {
//   (*fnptr)(target, level, xoffset, x, y, width);
// }
// void  glowCopyTexSubImage1DEXT(PCOPYTEXSUBIMAGE1DEXT fnptr, GLenum  target, GLint  level, GLint  xoffset, GLint  x, GLint  y, GLsizei  width) {
//   (*fnptr)(target, level, xoffset, x, y, width);
// }
// void  glowCopyTexSubImage2D(PCOPYTEXSUBIMAGE2D fnptr, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  x, GLint  y, GLsizei  width, GLsizei  height) {
//   (*fnptr)(target, level, xoffset, yoffset, x, y, width, height);
// }
// void  glowCopyTexSubImage2DEXT(PCOPYTEXSUBIMAGE2DEXT fnptr, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  x, GLint  y, GLsizei  width, GLsizei  height) {
//   (*fnptr)(target, level, xoffset, yoffset, x, y, width, height);
// }
// void  glowCopyTexSubImage3D(PCOPYTEXSUBIMAGE3D fnptr, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLint  x, GLint  y, GLsizei  width, GLsizei  height) {
//   (*fnptr)(target, level, xoffset, yoffset, zoffset, x, y, width, height);
// }
// void  glowCopyTexSubImage3DEXT(PCOPYTEXSUBIMAGE3DEXT fnptr, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLint  x, GLint  y, GLsizei  width, GLsizei  height) {
//   (*fnptr)(target, level, xoffset, yoffset, zoffset, x, y, width, height);
// }
// void  glowCopyTextureImage1DEXT(PCOPYTEXTUREIMAGE1DEXT fnptr, GLuint  texture, GLenum  target, GLint  level, GLenum  internalformat, GLint  x, GLint  y, GLsizei  width, GLint  border) {
//   (*fnptr)(texture, target, level, internalformat, x, y, width, border);
// }
// void  glowCopyTextureImage2DEXT(PCOPYTEXTUREIMAGE2DEXT fnptr, GLuint  texture, GLenum  target, GLint  level, GLenum  internalformat, GLint  x, GLint  y, GLsizei  width, GLsizei  height, GLint  border) {
//   (*fnptr)(texture, target, level, internalformat, x, y, width, height, border);
// }
// void  glowCopyTextureSubImage1DEXT(PCOPYTEXTURESUBIMAGE1DEXT fnptr, GLuint  texture, GLenum  target, GLint  level, GLint  xoffset, GLint  x, GLint  y, GLsizei  width) {
//   (*fnptr)(texture, target, level, xoffset, x, y, width);
// }
// void  glowCopyTextureSubImage2DEXT(PCOPYTEXTURESUBIMAGE2DEXT fnptr, GLuint  texture, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  x, GLint  y, GLsizei  width, GLsizei  height) {
//   (*fnptr)(texture, target, level, xoffset, yoffset, x, y, width, height);
// }
// void  glowCopyTextureSubImage3DEXT(PCOPYTEXTURESUBIMAGE3DEXT fnptr, GLuint  texture, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLint  x, GLint  y, GLsizei  width, GLsizei  height) {
//   (*fnptr)(texture, target, level, xoffset, yoffset, zoffset, x, y, width, height);
// }
// void  glowCoverFillPathInstancedNV(PCOVERFILLPATHINSTANCEDNV fnptr, GLsizei  numPaths, GLenum  pathNameType, const void * paths, GLuint  pathBase, GLenum  coverMode, GLenum  transformType, const GLfloat * transformValues) {
//   (*fnptr)(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
// }
// void  glowCoverFillPathNV(PCOVERFILLPATHNV fnptr, GLuint  path, GLenum  coverMode) {
//   (*fnptr)(path, coverMode);
// }
// void  glowCoverStrokePathInstancedNV(PCOVERSTROKEPATHINSTANCEDNV fnptr, GLsizei  numPaths, GLenum  pathNameType, const void * paths, GLuint  pathBase, GLenum  coverMode, GLenum  transformType, const GLfloat * transformValues) {
//   (*fnptr)(numPaths, pathNameType, paths, pathBase, coverMode, transformType, transformValues);
// }
// void  glowCoverStrokePathNV(PCOVERSTROKEPATHNV fnptr, GLuint  path, GLenum  coverMode) {
//   (*fnptr)(path, coverMode);
// }
// void  glowCreatePerfQueryINTEL(PCREATEPERFQUERYINTEL fnptr, GLuint  queryId, GLuint * queryHandle) {
//   (*fnptr)(queryId, queryHandle);
// }
// GLuint  glowCreateProgram(PCREATEPROGRAM fnptr) {
//   return (*fnptr)();
// }
// GLhandleARB  glowCreateProgramObjectARB(PCREATEPROGRAMOBJECTARB fnptr) {
//   return (*fnptr)();
// }
// GLuint  glowCreateShader(PCREATESHADER fnptr, GLenum  type) {
//   return (*fnptr)(type);
// }
// GLhandleARB  glowCreateShaderObjectARB(PCREATESHADEROBJECTARB fnptr, GLenum  shaderType) {
//   return (*fnptr)(shaderType);
// }
// GLuint  glowCreateShaderProgramEXT(PCREATESHADERPROGRAMEXT fnptr, GLenum  type, const GLchar * string) {
//   return (*fnptr)(type, string);
// }
// GLuint  glowCreateShaderProgramv(PCREATESHADERPROGRAMV fnptr, GLenum  type, GLsizei  count, const GLchar *const* strings) {
//   return (*fnptr)(type, count, strings);
// }
// GLuint  glowCreateShaderProgramvEXT(PCREATESHADERPROGRAMVEXT fnptr, GLenum  type, GLsizei  count, const GLchar ** strings) {
//   return (*fnptr)(type, count, strings);
// }
// GLsync  glowCreateSyncFromCLeventARB(PCREATESYNCFROMCLEVENTARB fnptr, struct _cl_context * context, struct _cl_event * event, GLbitfield  flags) {
//   return (*fnptr)(context, event, flags);
// }
// void  glowCullFace(PCULLFACE fnptr, GLenum  mode) {
//   (*fnptr)(mode);
// }
// void  glowCullParameterdvEXT(PCULLPARAMETERDVEXT fnptr, GLenum  pname, GLdouble * params) {
//   (*fnptr)(pname, params);
// }
// void  glowCullParameterfvEXT(PCULLPARAMETERFVEXT fnptr, GLenum  pname, GLfloat * params) {
//   (*fnptr)(pname, params);
// }
// void  glowCurrentPaletteMatrixARB(PCURRENTPALETTEMATRIXARB fnptr, GLint  index) {
//   (*fnptr)(index);
// }
// void  glowDebugMessageCallback(PDEBUGMESSAGECALLBACK fnptr, GLDEBUGPROC  callback, const void * userParam) {
//   (*fnptr)(glowCDebugCallback, userParam);
// }
// void  glowDebugMessageCallbackAMD(PDEBUGMESSAGECALLBACKAMD fnptr, GLDEBUGPROCAMD  callback, void * userParam) {
//   (*fnptr)(callback, userParam);
// }
// void  glowDebugMessageCallbackARB(PDEBUGMESSAGECALLBACKARB fnptr, GLDEBUGPROCARB  callback, const void * userParam) {
//   (*fnptr)(glowCDebugCallback, userParam);
// }
// void  glowDebugMessageCallbackKHR(PDEBUGMESSAGECALLBACKKHR fnptr, GLDEBUGPROCKHR  callback, const void * userParam) {
//   (*fnptr)(glowCDebugCallback, userParam);
// }
// void  glowDebugMessageControl(PDEBUGMESSAGECONTROL fnptr, GLenum  source, GLenum  type, GLenum  severity, GLsizei  count, const GLuint * ids, GLboolean  enabled) {
//   (*fnptr)(source, type, severity, count, ids, enabled);
// }
// void  glowDebugMessageControlARB(PDEBUGMESSAGECONTROLARB fnptr, GLenum  source, GLenum  type, GLenum  severity, GLsizei  count, const GLuint * ids, GLboolean  enabled) {
//   (*fnptr)(source, type, severity, count, ids, enabled);
// }
// void  glowDebugMessageControlKHR(PDEBUGMESSAGECONTROLKHR fnptr, GLenum  source, GLenum  type, GLenum  severity, GLsizei  count, const GLuint * ids, GLboolean  enabled) {
//   (*fnptr)(source, type, severity, count, ids, enabled);
// }
// void  glowDebugMessageEnableAMD(PDEBUGMESSAGEENABLEAMD fnptr, GLenum  category, GLenum  severity, GLsizei  count, const GLuint * ids, GLboolean  enabled) {
//   (*fnptr)(category, severity, count, ids, enabled);
// }
// void  glowDebugMessageInsert(PDEBUGMESSAGEINSERT fnptr, GLenum  source, GLenum  type, GLuint  id, GLenum  severity, GLsizei  length, const GLchar * buf) {
//   (*fnptr)(source, type, id, severity, length, buf);
// }
// void  glowDebugMessageInsertAMD(PDEBUGMESSAGEINSERTAMD fnptr, GLenum  category, GLenum  severity, GLuint  id, GLsizei  length, const GLchar * buf) {
//   (*fnptr)(category, severity, id, length, buf);
// }
// void  glowDebugMessageInsertARB(PDEBUGMESSAGEINSERTARB fnptr, GLenum  source, GLenum  type, GLuint  id, GLenum  severity, GLsizei  length, const GLchar * buf) {
//   (*fnptr)(source, type, id, severity, length, buf);
// }
// void  glowDebugMessageInsertKHR(PDEBUGMESSAGEINSERTKHR fnptr, GLenum  source, GLenum  type, GLuint  id, GLenum  severity, GLsizei  length, const GLchar * buf) {
//   (*fnptr)(source, type, id, severity, length, buf);
// }
// void  glowDeformSGIX(PDEFORMSGIX fnptr, GLbitfield  mask) {
//   (*fnptr)(mask);
// }
// void  glowDeformationMap3dSGIX(PDEFORMATIONMAP3DSGIX fnptr, GLenum  target, GLdouble  u1, GLdouble  u2, GLint  ustride, GLint  uorder, GLdouble  v1, GLdouble  v2, GLint  vstride, GLint  vorder, GLdouble  w1, GLdouble  w2, GLint  wstride, GLint  worder, const GLdouble * points) {
//   (*fnptr)(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
// }
// void  glowDeformationMap3fSGIX(PDEFORMATIONMAP3FSGIX fnptr, GLenum  target, GLfloat  u1, GLfloat  u2, GLint  ustride, GLint  uorder, GLfloat  v1, GLfloat  v2, GLint  vstride, GLint  vorder, GLfloat  w1, GLfloat  w2, GLint  wstride, GLint  worder, const GLfloat * points) {
//   (*fnptr)(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, w1, w2, wstride, worder, points);
// }
// void  glowDeleteAsyncMarkersSGIX(PDELETEASYNCMARKERSSGIX fnptr, GLuint  marker, GLsizei  range) {
//   (*fnptr)(marker, range);
// }
// void  glowDeleteBuffers(PDELETEBUFFERS fnptr, GLsizei  n, const GLuint * buffers) {
//   (*fnptr)(n, buffers);
// }
// void  glowDeleteBuffersARB(PDELETEBUFFERSARB fnptr, GLsizei  n, const GLuint * buffers) {
//   (*fnptr)(n, buffers);
// }
// void  glowDeleteFencesAPPLE(PDELETEFENCESAPPLE fnptr, GLsizei  n, const GLuint * fences) {
//   (*fnptr)(n, fences);
// }
// void  glowDeleteFencesNV(PDELETEFENCESNV fnptr, GLsizei  n, const GLuint * fences) {
//   (*fnptr)(n, fences);
// }
// void  glowDeleteFragmentShaderATI(PDELETEFRAGMENTSHADERATI fnptr, GLuint  id) {
//   (*fnptr)(id);
// }
// void  glowDeleteFramebuffers(PDELETEFRAMEBUFFERS fnptr, GLsizei  n, const GLuint * framebuffers) {
//   (*fnptr)(n, framebuffers);
// }
// void  glowDeleteFramebuffersEXT(PDELETEFRAMEBUFFERSEXT fnptr, GLsizei  n, const GLuint * framebuffers) {
//   (*fnptr)(n, framebuffers);
// }
// void  glowDeleteNamedStringARB(PDELETENAMEDSTRINGARB fnptr, GLint  namelen, const GLchar * name) {
//   (*fnptr)(namelen, name);
// }
// void  glowDeleteNamesAMD(PDELETENAMESAMD fnptr, GLenum  identifier, GLuint  num, const GLuint * names) {
//   (*fnptr)(identifier, num, names);
// }
// void  glowDeleteObjectARB(PDELETEOBJECTARB fnptr, GLhandleARB  obj) {
//   (*fnptr)(obj);
// }
// void  glowDeleteOcclusionQueriesNV(PDELETEOCCLUSIONQUERIESNV fnptr, GLsizei  n, const GLuint * ids) {
//   (*fnptr)(n, ids);
// }
// void  glowDeletePathsNV(PDELETEPATHSNV fnptr, GLuint  path, GLsizei  range) {
//   (*fnptr)(path, range);
// }
// void  glowDeletePerfMonitorsAMD(PDELETEPERFMONITORSAMD fnptr, GLsizei  n, GLuint * monitors) {
//   (*fnptr)(n, monitors);
// }
// void  glowDeletePerfQueryINTEL(PDELETEPERFQUERYINTEL fnptr, GLuint  queryHandle) {
//   (*fnptr)(queryHandle);
// }
// void  glowDeleteProgram(PDELETEPROGRAM fnptr, GLuint  program) {
//   (*fnptr)(program);
// }
// void  glowDeleteProgramPipelines(PDELETEPROGRAMPIPELINES fnptr, GLsizei  n, const GLuint * pipelines) {
//   (*fnptr)(n, pipelines);
// }
// void  glowDeleteProgramPipelinesEXT(PDELETEPROGRAMPIPELINESEXT fnptr, GLsizei  n, const GLuint * pipelines) {
//   (*fnptr)(n, pipelines);
// }
// void  glowDeleteProgramsARB(PDELETEPROGRAMSARB fnptr, GLsizei  n, const GLuint * programs) {
//   (*fnptr)(n, programs);
// }
// void  glowDeleteProgramsNV(PDELETEPROGRAMSNV fnptr, GLsizei  n, const GLuint * programs) {
//   (*fnptr)(n, programs);
// }
// void  glowDeleteQueries(PDELETEQUERIES fnptr, GLsizei  n, const GLuint * ids) {
//   (*fnptr)(n, ids);
// }
// void  glowDeleteQueriesARB(PDELETEQUERIESARB fnptr, GLsizei  n, const GLuint * ids) {
//   (*fnptr)(n, ids);
// }
// void  glowDeleteRenderbuffers(PDELETERENDERBUFFERS fnptr, GLsizei  n, const GLuint * renderbuffers) {
//   (*fnptr)(n, renderbuffers);
// }
// void  glowDeleteRenderbuffersEXT(PDELETERENDERBUFFERSEXT fnptr, GLsizei  n, const GLuint * renderbuffers) {
//   (*fnptr)(n, renderbuffers);
// }
// void  glowDeleteSamplers(PDELETESAMPLERS fnptr, GLsizei  count, const GLuint * samplers) {
//   (*fnptr)(count, samplers);
// }
// void  glowDeleteShader(PDELETESHADER fnptr, GLuint  shader) {
//   (*fnptr)(shader);
// }
// void  glowDeleteSync(PDELETESYNC fnptr, GLsync  sync) {
//   (*fnptr)(sync);
// }
// void  glowDeleteTextures(PDELETETEXTURES fnptr, GLsizei  n, const GLuint * textures) {
//   (*fnptr)(n, textures);
// }
// void  glowDeleteTexturesEXT(PDELETETEXTURESEXT fnptr, GLsizei  n, const GLuint * textures) {
//   (*fnptr)(n, textures);
// }
// void  glowDeleteTransformFeedbacks(PDELETETRANSFORMFEEDBACKS fnptr, GLsizei  n, const GLuint * ids) {
//   (*fnptr)(n, ids);
// }
// void  glowDeleteTransformFeedbacksNV(PDELETETRANSFORMFEEDBACKSNV fnptr, GLsizei  n, const GLuint * ids) {
//   (*fnptr)(n, ids);
// }
// void  glowDeleteVertexArrays(PDELETEVERTEXARRAYS fnptr, GLsizei  n, const GLuint * arrays) {
//   (*fnptr)(n, arrays);
// }
// void  glowDeleteVertexArraysAPPLE(PDELETEVERTEXARRAYSAPPLE fnptr, GLsizei  n, const GLuint * arrays) {
//   (*fnptr)(n, arrays);
// }
// void  glowDeleteVertexShaderEXT(PDELETEVERTEXSHADEREXT fnptr, GLuint  id) {
//   (*fnptr)(id);
// }
// void  glowDepthBoundsEXT(PDEPTHBOUNDSEXT fnptr, GLclampd  zmin, GLclampd  zmax) {
//   (*fnptr)(zmin, zmax);
// }
// void  glowDepthBoundsdNV(PDEPTHBOUNDSDNV fnptr, GLdouble  zmin, GLdouble  zmax) {
//   (*fnptr)(zmin, zmax);
// }
// void  glowDepthFunc(PDEPTHFUNC fnptr, GLenum  func) {
//   (*fnptr)(func);
// }
// void  glowDepthMask(PDEPTHMASK fnptr, GLboolean  flag) {
//   (*fnptr)(flag);
// }
// void  glowDepthRange(PDEPTHRANGE fnptr, GLdouble  xnear, GLdouble  xfar) {
//   (*fnptr)(xnear, xfar);
// }
// void  glowDepthRangeArrayv(PDEPTHRANGEARRAYV fnptr, GLuint  first, GLsizei  count, const GLdouble * v) {
//   (*fnptr)(first, count, v);
// }
// void  glowDepthRangeIndexed(PDEPTHRANGEINDEXED fnptr, GLuint  index, GLdouble  n, GLdouble  f) {
//   (*fnptr)(index, n, f);
// }
// void  glowDepthRangedNV(PDEPTHRANGEDNV fnptr, GLdouble  zNear, GLdouble  zFar) {
//   (*fnptr)(zNear, zFar);
// }
// void  glowDepthRangef(PDEPTHRANGEF fnptr, GLfloat  n, GLfloat  f) {
//   (*fnptr)(n, f);
// }
// void  glowDepthRangefOES(PDEPTHRANGEFOES fnptr, GLclampf  n, GLclampf  f) {
//   (*fnptr)(n, f);
// }
// void  glowDepthRangexOES(PDEPTHRANGEXOES fnptr, GLfixed  n, GLfixed  f) {
//   (*fnptr)(n, f);
// }
// void  glowDetachObjectARB(PDETACHOBJECTARB fnptr, GLhandleARB  containerObj, GLhandleARB  attachedObj) {
//   (*fnptr)(containerObj, attachedObj);
// }
// void  glowDetachShader(PDETACHSHADER fnptr, GLuint  program, GLuint  shader) {
//   (*fnptr)(program, shader);
// }
// void  glowDetailTexFuncSGIS(PDETAILTEXFUNCSGIS fnptr, GLenum  target, GLsizei  n, const GLfloat * points) {
//   (*fnptr)(target, n, points);
// }
// void  glowDisable(PDISABLE fnptr, GLenum  cap) {
//   (*fnptr)(cap);
// }
// void  glowDisableClientStateIndexedEXT(PDISABLECLIENTSTATEINDEXEDEXT fnptr, GLenum  array, GLuint  index) {
//   (*fnptr)(array, index);
// }
// void  glowDisableClientStateiEXT(PDISABLECLIENTSTATEIEXT fnptr, GLenum  array, GLuint  index) {
//   (*fnptr)(array, index);
// }
// void  glowDisableIndexedEXT(PDISABLEINDEXEDEXT fnptr, GLenum  target, GLuint  index) {
//   (*fnptr)(target, index);
// }
// void  glowDisableVariantClientStateEXT(PDISABLEVARIANTCLIENTSTATEEXT fnptr, GLuint  id) {
//   (*fnptr)(id);
// }
// void  glowDisableVertexArrayAttribEXT(PDISABLEVERTEXARRAYATTRIBEXT fnptr, GLuint  vaobj, GLuint  index) {
//   (*fnptr)(vaobj, index);
// }
// void  glowDisableVertexArrayEXT(PDISABLEVERTEXARRAYEXT fnptr, GLuint  vaobj, GLenum  array) {
//   (*fnptr)(vaobj, array);
// }
// void  glowDisableVertexAttribAPPLE(PDISABLEVERTEXATTRIBAPPLE fnptr, GLuint  index, GLenum  pname) {
//   (*fnptr)(index, pname);
// }
// void  glowDisableVertexAttribArray(PDISABLEVERTEXATTRIBARRAY fnptr, GLuint  index) {
//   (*fnptr)(index);
// }
// void  glowDisableVertexAttribArrayARB(PDISABLEVERTEXATTRIBARRAYARB fnptr, GLuint  index) {
//   (*fnptr)(index);
// }
// void  glowDisablei(PDISABLEI fnptr, GLenum  target, GLuint  index) {
//   (*fnptr)(target, index);
// }
// void  glowDispatchCompute(PDISPATCHCOMPUTE fnptr, GLuint  num_groups_x, GLuint  num_groups_y, GLuint  num_groups_z) {
//   (*fnptr)(num_groups_x, num_groups_y, num_groups_z);
// }
// void  glowDispatchComputeGroupSizeARB(PDISPATCHCOMPUTEGROUPSIZEARB fnptr, GLuint  num_groups_x, GLuint  num_groups_y, GLuint  num_groups_z, GLuint  group_size_x, GLuint  group_size_y, GLuint  group_size_z) {
//   (*fnptr)(num_groups_x, num_groups_y, num_groups_z, group_size_x, group_size_y, group_size_z);
// }
// void  glowDispatchComputeIndirect(PDISPATCHCOMPUTEINDIRECT fnptr, GLintptr  indirect) {
//   (*fnptr)(indirect);
// }
// void  glowDrawArrays(PDRAWARRAYS fnptr, GLenum  mode, GLint  first, GLsizei  count) {
//   (*fnptr)(mode, first, count);
// }
// void  glowDrawArraysEXT(PDRAWARRAYSEXT fnptr, GLenum  mode, GLint  first, GLsizei  count) {
//   (*fnptr)(mode, first, count);
// }
// void  glowDrawArraysIndirect(PDRAWARRAYSINDIRECT fnptr, GLenum  mode, const void * indirect) {
//   (*fnptr)(mode, indirect);
// }
// void  glowDrawArraysInstanced(PDRAWARRAYSINSTANCED fnptr, GLenum  mode, GLint  first, GLsizei  count, GLsizei  instancecount) {
//   (*fnptr)(mode, first, count, instancecount);
// }
// void  glowDrawArraysInstancedARB(PDRAWARRAYSINSTANCEDARB fnptr, GLenum  mode, GLint  first, GLsizei  count, GLsizei  primcount) {
//   (*fnptr)(mode, first, count, primcount);
// }
// void  glowDrawArraysInstancedBaseInstance(PDRAWARRAYSINSTANCEDBASEINSTANCE fnptr, GLenum  mode, GLint  first, GLsizei  count, GLsizei  instancecount, GLuint  baseinstance) {
//   (*fnptr)(mode, first, count, instancecount, baseinstance);
// }
// void  glowDrawArraysInstancedEXT(PDRAWARRAYSINSTANCEDEXT fnptr, GLenum  mode, GLint  start, GLsizei  count, GLsizei  primcount) {
//   (*fnptr)(mode, start, count, primcount);
// }
// void  glowDrawBuffer(PDRAWBUFFER fnptr, GLenum  mode) {
//   (*fnptr)(mode);
// }
// void  glowDrawBuffers(PDRAWBUFFERS fnptr, GLsizei  n, const GLenum * bufs) {
//   (*fnptr)(n, bufs);
// }
// void  glowDrawBuffersARB(PDRAWBUFFERSARB fnptr, GLsizei  n, const GLenum * bufs) {
//   (*fnptr)(n, bufs);
// }
// void  glowDrawBuffersATI(PDRAWBUFFERSATI fnptr, GLsizei  n, const GLenum * bufs) {
//   (*fnptr)(n, bufs);
// }
// void  glowDrawElementArrayAPPLE(PDRAWELEMENTARRAYAPPLE fnptr, GLenum  mode, GLint  first, GLsizei  count) {
//   (*fnptr)(mode, first, count);
// }
// void  glowDrawElementArrayATI(PDRAWELEMENTARRAYATI fnptr, GLenum  mode, GLsizei  count) {
//   (*fnptr)(mode, count);
// }
// void  glowDrawElements(PDRAWELEMENTS fnptr, GLenum  mode, GLsizei  count, GLenum  type, const void * indices) {
//   (*fnptr)(mode, count, type, indices);
// }
// void  glowDrawElementsBaseVertex(PDRAWELEMENTSBASEVERTEX fnptr, GLenum  mode, GLsizei  count, GLenum  type, const void * indices, GLint  basevertex) {
//   (*fnptr)(mode, count, type, indices, basevertex);
// }
// void  glowDrawElementsIndirect(PDRAWELEMENTSINDIRECT fnptr, GLenum  mode, GLenum  type, const void * indirect) {
//   (*fnptr)(mode, type, indirect);
// }
// void  glowDrawElementsInstanced(PDRAWELEMENTSINSTANCED fnptr, GLenum  mode, GLsizei  count, GLenum  type, const void * indices, GLsizei  instancecount) {
//   (*fnptr)(mode, count, type, indices, instancecount);
// }
// void  glowDrawElementsInstancedARB(PDRAWELEMENTSINSTANCEDARB fnptr, GLenum  mode, GLsizei  count, GLenum  type, const void * indices, GLsizei  primcount) {
//   (*fnptr)(mode, count, type, indices, primcount);
// }
// void  glowDrawElementsInstancedBaseInstance(PDRAWELEMENTSINSTANCEDBASEINSTANCE fnptr, GLenum  mode, GLsizei  count, GLenum  type, const void * indices, GLsizei  instancecount, GLuint  baseinstance) {
//   (*fnptr)(mode, count, type, indices, instancecount, baseinstance);
// }
// void  glowDrawElementsInstancedBaseVertex(PDRAWELEMENTSINSTANCEDBASEVERTEX fnptr, GLenum  mode, GLsizei  count, GLenum  type, const void * indices, GLsizei  instancecount, GLint  basevertex) {
//   (*fnptr)(mode, count, type, indices, instancecount, basevertex);
// }
// void  glowDrawElementsInstancedBaseVertexBaseInstance(PDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCE fnptr, GLenum  mode, GLsizei  count, GLenum  type, const void * indices, GLsizei  instancecount, GLint  basevertex, GLuint  baseinstance) {
//   (*fnptr)(mode, count, type, indices, instancecount, basevertex, baseinstance);
// }
// void  glowDrawElementsInstancedEXT(PDRAWELEMENTSINSTANCEDEXT fnptr, GLenum  mode, GLsizei  count, GLenum  type, const void * indices, GLsizei  primcount) {
//   (*fnptr)(mode, count, type, indices, primcount);
// }
// void  glowDrawMeshArraysSUN(PDRAWMESHARRAYSSUN fnptr, GLenum  mode, GLint  first, GLsizei  count, GLsizei  width) {
//   (*fnptr)(mode, first, count, width);
// }
// void  glowDrawRangeElementArrayAPPLE(PDRAWRANGEELEMENTARRAYAPPLE fnptr, GLenum  mode, GLuint  start, GLuint  end, GLint  first, GLsizei  count) {
//   (*fnptr)(mode, start, end, first, count);
// }
// void  glowDrawRangeElementArrayATI(PDRAWRANGEELEMENTARRAYATI fnptr, GLenum  mode, GLuint  start, GLuint  end, GLsizei  count) {
//   (*fnptr)(mode, start, end, count);
// }
// void  glowDrawRangeElements(PDRAWRANGEELEMENTS fnptr, GLenum  mode, GLuint  start, GLuint  end, GLsizei  count, GLenum  type, const void * indices) {
//   (*fnptr)(mode, start, end, count, type, indices);
// }
// void  glowDrawRangeElementsBaseVertex(PDRAWRANGEELEMENTSBASEVERTEX fnptr, GLenum  mode, GLuint  start, GLuint  end, GLsizei  count, GLenum  type, const void * indices, GLint  basevertex) {
//   (*fnptr)(mode, start, end, count, type, indices, basevertex);
// }
// void  glowDrawRangeElementsEXT(PDRAWRANGEELEMENTSEXT fnptr, GLenum  mode, GLuint  start, GLuint  end, GLsizei  count, GLenum  type, const void * indices) {
//   (*fnptr)(mode, start, end, count, type, indices);
// }
// void  glowDrawTextureNV(PDRAWTEXTURENV fnptr, GLuint  texture, GLuint  sampler, GLfloat  x0, GLfloat  y0, GLfloat  x1, GLfloat  y1, GLfloat  z, GLfloat  s0, GLfloat  t0, GLfloat  s1, GLfloat  t1) {
//   (*fnptr)(texture, sampler, x0, y0, x1, y1, z, s0, t0, s1, t1);
// }
// void  glowDrawTransformFeedback(PDRAWTRANSFORMFEEDBACK fnptr, GLenum  mode, GLuint  id) {
//   (*fnptr)(mode, id);
// }
// void  glowDrawTransformFeedbackInstanced(PDRAWTRANSFORMFEEDBACKINSTANCED fnptr, GLenum  mode, GLuint  id, GLsizei  instancecount) {
//   (*fnptr)(mode, id, instancecount);
// }
// void  glowDrawTransformFeedbackNV(PDRAWTRANSFORMFEEDBACKNV fnptr, GLenum  mode, GLuint  id) {
//   (*fnptr)(mode, id);
// }
// void  glowDrawTransformFeedbackStream(PDRAWTRANSFORMFEEDBACKSTREAM fnptr, GLenum  mode, GLuint  id, GLuint  stream) {
//   (*fnptr)(mode, id, stream);
// }
// void  glowDrawTransformFeedbackStreamInstanced(PDRAWTRANSFORMFEEDBACKSTREAMINSTANCED fnptr, GLenum  mode, GLuint  id, GLuint  stream, GLsizei  instancecount) {
//   (*fnptr)(mode, id, stream, instancecount);
// }
// void  glowEdgeFlagFormatNV(PEDGEFLAGFORMATNV fnptr, GLsizei  stride) {
//   (*fnptr)(stride);
// }
// void  glowEdgeFlagPointerEXT(PEDGEFLAGPOINTEREXT fnptr, GLsizei  stride, GLsizei  count, const GLboolean * pointer) {
//   (*fnptr)(stride, count, pointer);
// }
// void  glowEdgeFlagPointerListIBM(PEDGEFLAGPOINTERLISTIBM fnptr, GLint  stride, const GLboolean ** pointer, GLint  ptrstride) {
//   (*fnptr)(stride, pointer, ptrstride);
// }
// void  glowElementPointerAPPLE(PELEMENTPOINTERAPPLE fnptr, GLenum  type, const void * pointer) {
//   (*fnptr)(type, pointer);
// }
// void  glowElementPointerATI(PELEMENTPOINTERATI fnptr, GLenum  type, const void * pointer) {
//   (*fnptr)(type, pointer);
// }
// void  glowEnable(PENABLE fnptr, GLenum  cap) {
//   (*fnptr)(cap);
// }
// void  glowEnableClientStateIndexedEXT(PENABLECLIENTSTATEINDEXEDEXT fnptr, GLenum  array, GLuint  index) {
//   (*fnptr)(array, index);
// }
// void  glowEnableClientStateiEXT(PENABLECLIENTSTATEIEXT fnptr, GLenum  array, GLuint  index) {
//   (*fnptr)(array, index);
// }
// void  glowEnableIndexedEXT(PENABLEINDEXEDEXT fnptr, GLenum  target, GLuint  index) {
//   (*fnptr)(target, index);
// }
// void  glowEnableVariantClientStateEXT(PENABLEVARIANTCLIENTSTATEEXT fnptr, GLuint  id) {
//   (*fnptr)(id);
// }
// void  glowEnableVertexArrayAttribEXT(PENABLEVERTEXARRAYATTRIBEXT fnptr, GLuint  vaobj, GLuint  index) {
//   (*fnptr)(vaobj, index);
// }
// void  glowEnableVertexArrayEXT(PENABLEVERTEXARRAYEXT fnptr, GLuint  vaobj, GLenum  array) {
//   (*fnptr)(vaobj, array);
// }
// void  glowEnableVertexAttribAPPLE(PENABLEVERTEXATTRIBAPPLE fnptr, GLuint  index, GLenum  pname) {
//   (*fnptr)(index, pname);
// }
// void  glowEnableVertexAttribArray(PENABLEVERTEXATTRIBARRAY fnptr, GLuint  index) {
//   (*fnptr)(index);
// }
// void  glowEnableVertexAttribArrayARB(PENABLEVERTEXATTRIBARRAYARB fnptr, GLuint  index) {
//   (*fnptr)(index);
// }
// void  glowEnablei(PENABLEI fnptr, GLenum  target, GLuint  index) {
//   (*fnptr)(target, index);
// }
// void  glowEndConditionalRender(PENDCONDITIONALRENDER fnptr) {
//   (*fnptr)();
// }
// void  glowEndConditionalRenderNV(PENDCONDITIONALRENDERNV fnptr) {
//   (*fnptr)();
// }
// void  glowEndConditionalRenderNVX(PENDCONDITIONALRENDERNVX fnptr) {
//   (*fnptr)();
// }
// void  glowEndFragmentShaderATI(PENDFRAGMENTSHADERATI fnptr) {
//   (*fnptr)();
// }
// void  glowEndOcclusionQueryNV(PENDOCCLUSIONQUERYNV fnptr) {
//   (*fnptr)();
// }
// void  glowEndPerfMonitorAMD(PENDPERFMONITORAMD fnptr, GLuint  monitor) {
//   (*fnptr)(monitor);
// }
// void  glowEndPerfQueryINTEL(PENDPERFQUERYINTEL fnptr, GLuint  queryHandle) {
//   (*fnptr)(queryHandle);
// }
// void  glowEndQuery(PENDQUERY fnptr, GLenum  target) {
//   (*fnptr)(target);
// }
// void  glowEndQueryARB(PENDQUERYARB fnptr, GLenum  target) {
//   (*fnptr)(target);
// }
// void  glowEndQueryIndexed(PENDQUERYINDEXED fnptr, GLenum  target, GLuint  index) {
//   (*fnptr)(target, index);
// }
// void  glowEndTransformFeedback(PENDTRANSFORMFEEDBACK fnptr) {
//   (*fnptr)();
// }
// void  glowEndTransformFeedbackEXT(PENDTRANSFORMFEEDBACKEXT fnptr) {
//   (*fnptr)();
// }
// void  glowEndTransformFeedbackNV(PENDTRANSFORMFEEDBACKNV fnptr) {
//   (*fnptr)();
// }
// void  glowEndVertexShaderEXT(PENDVERTEXSHADEREXT fnptr) {
//   (*fnptr)();
// }
// void  glowEndVideoCaptureNV(PENDVIDEOCAPTURENV fnptr, GLuint  video_capture_slot) {
//   (*fnptr)(video_capture_slot);
// }
// void  glowEvalCoord1xOES(PEVALCOORD1XOES fnptr, GLfixed  u) {
//   (*fnptr)(u);
// }
// void  glowEvalCoord1xvOES(PEVALCOORD1XVOES fnptr, const GLfixed * coords) {
//   (*fnptr)(coords);
// }
// void  glowEvalCoord2xOES(PEVALCOORD2XOES fnptr, GLfixed  u, GLfixed  v) {
//   (*fnptr)(u, v);
// }
// void  glowEvalCoord2xvOES(PEVALCOORD2XVOES fnptr, const GLfixed * coords) {
//   (*fnptr)(coords);
// }
// void  glowEvalMapsNV(PEVALMAPSNV fnptr, GLenum  target, GLenum  mode) {
//   (*fnptr)(target, mode);
// }
// void  glowExecuteProgramNV(PEXECUTEPROGRAMNV fnptr, GLenum  target, GLuint  id, const GLfloat * params) {
//   (*fnptr)(target, id, params);
// }
// void  glowExtractComponentEXT(PEXTRACTCOMPONENTEXT fnptr, GLuint  res, GLuint  src, GLuint  num) {
//   (*fnptr)(res, src, num);
// }
// void  glowFeedbackBufferxOES(PFEEDBACKBUFFERXOES fnptr, GLsizei  n, GLenum  type, const GLfixed * buffer) {
//   (*fnptr)(n, type, buffer);
// }
// GLsync  glowFenceSync(PFENCESYNC fnptr, GLenum  condition, GLbitfield  flags) {
//   return (*fnptr)(condition, flags);
// }
// void  glowFinalCombinerInputNV(PFINALCOMBINERINPUTNV fnptr, GLenum  variable, GLenum  input, GLenum  mapping, GLenum  componentUsage) {
//   (*fnptr)(variable, input, mapping, componentUsage);
// }
// void  glowFinish(PFINISH fnptr) {
//   (*fnptr)();
// }
// GLint  glowFinishAsyncSGIX(PFINISHASYNCSGIX fnptr, GLuint * markerp) {
//   return (*fnptr)(markerp);
// }
// void  glowFinishFenceAPPLE(PFINISHFENCEAPPLE fnptr, GLuint  fence) {
//   (*fnptr)(fence);
// }
// void  glowFinishFenceNV(PFINISHFENCENV fnptr, GLuint  fence) {
//   (*fnptr)(fence);
// }
// void  glowFinishObjectAPPLE(PFINISHOBJECTAPPLE fnptr, GLenum  object, GLint  name) {
//   (*fnptr)(object, name);
// }
// void  glowFinishTextureSUNX(PFINISHTEXTURESUNX fnptr) {
//   (*fnptr)();
// }
// void  glowFlush(PFLUSH fnptr) {
//   (*fnptr)();
// }
// void  glowFlushMappedBufferRange(PFLUSHMAPPEDBUFFERRANGE fnptr, GLenum  target, GLintptr  offset, GLsizeiptr  length) {
//   (*fnptr)(target, offset, length);
// }
// void  glowFlushMappedBufferRangeAPPLE(PFLUSHMAPPEDBUFFERRANGEAPPLE fnptr, GLenum  target, GLintptr  offset, GLsizeiptr  size) {
//   (*fnptr)(target, offset, size);
// }
// void  glowFlushMappedNamedBufferRangeEXT(PFLUSHMAPPEDNAMEDBUFFERRANGEEXT fnptr, GLuint  buffer, GLintptr  offset, GLsizeiptr  length) {
//   (*fnptr)(buffer, offset, length);
// }
// void  glowFlushPixelDataRangeNV(PFLUSHPIXELDATARANGENV fnptr, GLenum  target) {
//   (*fnptr)(target);
// }
// void  glowFlushRasterSGIX(PFLUSHRASTERSGIX fnptr) {
//   (*fnptr)();
// }
// void  glowFlushStaticDataIBM(PFLUSHSTATICDATAIBM fnptr, GLenum  target) {
//   (*fnptr)(target);
// }
// void  glowFlushVertexArrayRangeAPPLE(PFLUSHVERTEXARRAYRANGEAPPLE fnptr, GLsizei  length, void * pointer) {
//   (*fnptr)(length, pointer);
// }
// void  glowFlushVertexArrayRangeNV(PFLUSHVERTEXARRAYRANGENV fnptr) {
//   (*fnptr)();
// }
// void  glowFogCoordFormatNV(PFOGCOORDFORMATNV fnptr, GLenum  type, GLsizei  stride) {
//   (*fnptr)(type, stride);
// }
// void  glowFogCoordPointerEXT(PFOGCOORDPOINTEREXT fnptr, GLenum  type, GLsizei  stride, const void * pointer) {
//   (*fnptr)(type, stride, pointer);
// }
// void  glowFogCoordPointerListIBM(PFOGCOORDPOINTERLISTIBM fnptr, GLenum  type, GLint  stride, const void ** pointer, GLint  ptrstride) {
//   (*fnptr)(type, stride, pointer, ptrstride);
// }
// void  glowFogCoorddEXT(PFOGCOORDDEXT fnptr, GLdouble  coord) {
//   (*fnptr)(coord);
// }
// void  glowFogCoorddvEXT(PFOGCOORDDVEXT fnptr, const GLdouble * coord) {
//   (*fnptr)(coord);
// }
// void  glowFogCoordfEXT(PFOGCOORDFEXT fnptr, GLfloat  coord) {
//   (*fnptr)(coord);
// }
// void  glowFogCoordfvEXT(PFOGCOORDFVEXT fnptr, const GLfloat * coord) {
//   (*fnptr)(coord);
// }
// void  glowFogCoordhNV(PFOGCOORDHNV fnptr, GLhalfNV  fog) {
//   (*fnptr)(fog);
// }
// void  glowFogCoordhvNV(PFOGCOORDHVNV fnptr, const GLhalfNV * fog) {
//   (*fnptr)(fog);
// }
// void  glowFogFuncSGIS(PFOGFUNCSGIS fnptr, GLsizei  n, const GLfloat * points) {
//   (*fnptr)(n, points);
// }
// void  glowFogxOES(PFOGXOES fnptr, GLenum  pname, GLfixed  param) {
//   (*fnptr)(pname, param);
// }
// void  glowFogxvOES(PFOGXVOES fnptr, GLenum  pname, const GLfixed * param) {
//   (*fnptr)(pname, param);
// }
// void  glowFragmentColorMaterialSGIX(PFRAGMENTCOLORMATERIALSGIX fnptr, GLenum  face, GLenum  mode) {
//   (*fnptr)(face, mode);
// }
// void  glowFragmentLightModelfSGIX(PFRAGMENTLIGHTMODELFSGIX fnptr, GLenum  pname, GLfloat  param) {
//   (*fnptr)(pname, param);
// }
// void  glowFragmentLightModelfvSGIX(PFRAGMENTLIGHTMODELFVSGIX fnptr, GLenum  pname, const GLfloat * params) {
//   (*fnptr)(pname, params);
// }
// void  glowFragmentLightModeliSGIX(PFRAGMENTLIGHTMODELISGIX fnptr, GLenum  pname, GLint  param) {
//   (*fnptr)(pname, param);
// }
// void  glowFragmentLightModelivSGIX(PFRAGMENTLIGHTMODELIVSGIX fnptr, GLenum  pname, const GLint * params) {
//   (*fnptr)(pname, params);
// }
// void  glowFragmentLightfSGIX(PFRAGMENTLIGHTFSGIX fnptr, GLenum  light, GLenum  pname, GLfloat  param) {
//   (*fnptr)(light, pname, param);
// }
// void  glowFragmentLightfvSGIX(PFRAGMENTLIGHTFVSGIX fnptr, GLenum  light, GLenum  pname, const GLfloat * params) {
//   (*fnptr)(light, pname, params);
// }
// void  glowFragmentLightiSGIX(PFRAGMENTLIGHTISGIX fnptr, GLenum  light, GLenum  pname, GLint  param) {
//   (*fnptr)(light, pname, param);
// }
// void  glowFragmentLightivSGIX(PFRAGMENTLIGHTIVSGIX fnptr, GLenum  light, GLenum  pname, const GLint * params) {
//   (*fnptr)(light, pname, params);
// }
// void  glowFragmentMaterialfSGIX(PFRAGMENTMATERIALFSGIX fnptr, GLenum  face, GLenum  pname, GLfloat  param) {
//   (*fnptr)(face, pname, param);
// }
// void  glowFragmentMaterialfvSGIX(PFRAGMENTMATERIALFVSGIX fnptr, GLenum  face, GLenum  pname, const GLfloat * params) {
//   (*fnptr)(face, pname, params);
// }
// void  glowFragmentMaterialiSGIX(PFRAGMENTMATERIALISGIX fnptr, GLenum  face, GLenum  pname, GLint  param) {
//   (*fnptr)(face, pname, param);
// }
// void  glowFragmentMaterialivSGIX(PFRAGMENTMATERIALIVSGIX fnptr, GLenum  face, GLenum  pname, const GLint * params) {
//   (*fnptr)(face, pname, params);
// }
// void  glowFrameTerminatorGREMEDY(PFRAMETERMINATORGREMEDY fnptr) {
//   (*fnptr)();
// }
// void  glowFrameZoomSGIX(PFRAMEZOOMSGIX fnptr, GLint  factor) {
//   (*fnptr)(factor);
// }
// void  glowFramebufferDrawBufferEXT(PFRAMEBUFFERDRAWBUFFEREXT fnptr, GLuint  framebuffer, GLenum  mode) {
//   (*fnptr)(framebuffer, mode);
// }
// void  glowFramebufferDrawBuffersEXT(PFRAMEBUFFERDRAWBUFFERSEXT fnptr, GLuint  framebuffer, GLsizei  n, const GLenum * bufs) {
//   (*fnptr)(framebuffer, n, bufs);
// }
// void  glowFramebufferParameteri(PFRAMEBUFFERPARAMETERI fnptr, GLenum  target, GLenum  pname, GLint  param) {
//   (*fnptr)(target, pname, param);
// }
// void  glowFramebufferReadBufferEXT(PFRAMEBUFFERREADBUFFEREXT fnptr, GLuint  framebuffer, GLenum  mode) {
//   (*fnptr)(framebuffer, mode);
// }
// void  glowFramebufferRenderbuffer(PFRAMEBUFFERRENDERBUFFER fnptr, GLenum  target, GLenum  attachment, GLenum  renderbuffertarget, GLuint  renderbuffer) {
//   (*fnptr)(target, attachment, renderbuffertarget, renderbuffer);
// }
// void  glowFramebufferRenderbufferEXT(PFRAMEBUFFERRENDERBUFFEREXT fnptr, GLenum  target, GLenum  attachment, GLenum  renderbuffertarget, GLuint  renderbuffer) {
//   (*fnptr)(target, attachment, renderbuffertarget, renderbuffer);
// }
// void  glowFramebufferTexture(PFRAMEBUFFERTEXTURE fnptr, GLenum  target, GLenum  attachment, GLuint  texture, GLint  level) {
//   (*fnptr)(target, attachment, texture, level);
// }
// void  glowFramebufferTexture1D(PFRAMEBUFFERTEXTURE1D fnptr, GLenum  target, GLenum  attachment, GLenum  textarget, GLuint  texture, GLint  level) {
//   (*fnptr)(target, attachment, textarget, texture, level);
// }
// void  glowFramebufferTexture1DEXT(PFRAMEBUFFERTEXTURE1DEXT fnptr, GLenum  target, GLenum  attachment, GLenum  textarget, GLuint  texture, GLint  level) {
//   (*fnptr)(target, attachment, textarget, texture, level);
// }
// void  glowFramebufferTexture2D(PFRAMEBUFFERTEXTURE2D fnptr, GLenum  target, GLenum  attachment, GLenum  textarget, GLuint  texture, GLint  level) {
//   (*fnptr)(target, attachment, textarget, texture, level);
// }
// void  glowFramebufferTexture2DEXT(PFRAMEBUFFERTEXTURE2DEXT fnptr, GLenum  target, GLenum  attachment, GLenum  textarget, GLuint  texture, GLint  level) {
//   (*fnptr)(target, attachment, textarget, texture, level);
// }
// void  glowFramebufferTexture3D(PFRAMEBUFFERTEXTURE3D fnptr, GLenum  target, GLenum  attachment, GLenum  textarget, GLuint  texture, GLint  level, GLint  zoffset) {
//   (*fnptr)(target, attachment, textarget, texture, level, zoffset);
// }
// void  glowFramebufferTexture3DEXT(PFRAMEBUFFERTEXTURE3DEXT fnptr, GLenum  target, GLenum  attachment, GLenum  textarget, GLuint  texture, GLint  level, GLint  zoffset) {
//   (*fnptr)(target, attachment, textarget, texture, level, zoffset);
// }
// void  glowFramebufferTextureARB(PFRAMEBUFFERTEXTUREARB fnptr, GLenum  target, GLenum  attachment, GLuint  texture, GLint  level) {
//   (*fnptr)(target, attachment, texture, level);
// }
// void  glowFramebufferTextureEXT(PFRAMEBUFFERTEXTUREEXT fnptr, GLenum  target, GLenum  attachment, GLuint  texture, GLint  level) {
//   (*fnptr)(target, attachment, texture, level);
// }
// void  glowFramebufferTextureFaceARB(PFRAMEBUFFERTEXTUREFACEARB fnptr, GLenum  target, GLenum  attachment, GLuint  texture, GLint  level, GLenum  face) {
//   (*fnptr)(target, attachment, texture, level, face);
// }
// void  glowFramebufferTextureFaceEXT(PFRAMEBUFFERTEXTUREFACEEXT fnptr, GLenum  target, GLenum  attachment, GLuint  texture, GLint  level, GLenum  face) {
//   (*fnptr)(target, attachment, texture, level, face);
// }
// void  glowFramebufferTextureLayer(PFRAMEBUFFERTEXTURELAYER fnptr, GLenum  target, GLenum  attachment, GLuint  texture, GLint  level, GLint  layer) {
//   (*fnptr)(target, attachment, texture, level, layer);
// }
// void  glowFramebufferTextureLayerARB(PFRAMEBUFFERTEXTURELAYERARB fnptr, GLenum  target, GLenum  attachment, GLuint  texture, GLint  level, GLint  layer) {
//   (*fnptr)(target, attachment, texture, level, layer);
// }
// void  glowFramebufferTextureLayerEXT(PFRAMEBUFFERTEXTURELAYEREXT fnptr, GLenum  target, GLenum  attachment, GLuint  texture, GLint  level, GLint  layer) {
//   (*fnptr)(target, attachment, texture, level, layer);
// }
// void  glowFreeObjectBufferATI(PFREEOBJECTBUFFERATI fnptr, GLuint  buffer) {
//   (*fnptr)(buffer);
// }
// void  glowFrontFace(PFRONTFACE fnptr, GLenum  mode) {
//   (*fnptr)(mode);
// }
// void  glowFrustumfOES(PFRUSTUMFOES fnptr, GLfloat  l, GLfloat  r, GLfloat  b, GLfloat  t, GLfloat  n, GLfloat  f) {
//   (*fnptr)(l, r, b, t, n, f);
// }
// void  glowFrustumxOES(PFRUSTUMXOES fnptr, GLfixed  l, GLfixed  r, GLfixed  b, GLfixed  t, GLfixed  n, GLfixed  f) {
//   (*fnptr)(l, r, b, t, n, f);
// }
// GLuint  glowGenAsyncMarkersSGIX(PGENASYNCMARKERSSGIX fnptr, GLsizei  range) {
//   return (*fnptr)(range);
// }
// void  glowGenBuffers(PGENBUFFERS fnptr, GLsizei  n, GLuint * buffers) {
//   (*fnptr)(n, buffers);
// }
// void  glowGenBuffersARB(PGENBUFFERSARB fnptr, GLsizei  n, GLuint * buffers) {
//   (*fnptr)(n, buffers);
// }
// void  glowGenFencesAPPLE(PGENFENCESAPPLE fnptr, GLsizei  n, GLuint * fences) {
//   (*fnptr)(n, fences);
// }
// void  glowGenFencesNV(PGENFENCESNV fnptr, GLsizei  n, GLuint * fences) {
//   (*fnptr)(n, fences);
// }
// GLuint  glowGenFragmentShadersATI(PGENFRAGMENTSHADERSATI fnptr, GLuint  range) {
//   return (*fnptr)(range);
// }
// void  glowGenFramebuffers(PGENFRAMEBUFFERS fnptr, GLsizei  n, GLuint * framebuffers) {
//   (*fnptr)(n, framebuffers);
// }
// void  glowGenFramebuffersEXT(PGENFRAMEBUFFERSEXT fnptr, GLsizei  n, GLuint * framebuffers) {
//   (*fnptr)(n, framebuffers);
// }
// void  glowGenNamesAMD(PGENNAMESAMD fnptr, GLenum  identifier, GLuint  num, GLuint * names) {
//   (*fnptr)(identifier, num, names);
// }
// void  glowGenOcclusionQueriesNV(PGENOCCLUSIONQUERIESNV fnptr, GLsizei  n, GLuint * ids) {
//   (*fnptr)(n, ids);
// }
// GLuint  glowGenPathsNV(PGENPATHSNV fnptr, GLsizei  range) {
//   return (*fnptr)(range);
// }
// void  glowGenPerfMonitorsAMD(PGENPERFMONITORSAMD fnptr, GLsizei  n, GLuint * monitors) {
//   (*fnptr)(n, monitors);
// }
// void  glowGenProgramPipelines(PGENPROGRAMPIPELINES fnptr, GLsizei  n, GLuint * pipelines) {
//   (*fnptr)(n, pipelines);
// }
// void  glowGenProgramPipelinesEXT(PGENPROGRAMPIPELINESEXT fnptr, GLsizei  n, GLuint * pipelines) {
//   (*fnptr)(n, pipelines);
// }
// void  glowGenProgramsARB(PGENPROGRAMSARB fnptr, GLsizei  n, GLuint * programs) {
//   (*fnptr)(n, programs);
// }
// void  glowGenProgramsNV(PGENPROGRAMSNV fnptr, GLsizei  n, GLuint * programs) {
//   (*fnptr)(n, programs);
// }
// void  glowGenQueries(PGENQUERIES fnptr, GLsizei  n, GLuint * ids) {
//   (*fnptr)(n, ids);
// }
// void  glowGenQueriesARB(PGENQUERIESARB fnptr, GLsizei  n, GLuint * ids) {
//   (*fnptr)(n, ids);
// }
// void  glowGenRenderbuffers(PGENRENDERBUFFERS fnptr, GLsizei  n, GLuint * renderbuffers) {
//   (*fnptr)(n, renderbuffers);
// }
// void  glowGenRenderbuffersEXT(PGENRENDERBUFFERSEXT fnptr, GLsizei  n, GLuint * renderbuffers) {
//   (*fnptr)(n, renderbuffers);
// }
// void  glowGenSamplers(PGENSAMPLERS fnptr, GLsizei  count, GLuint * samplers) {
//   (*fnptr)(count, samplers);
// }
// GLuint  glowGenSymbolsEXT(PGENSYMBOLSEXT fnptr, GLenum  datatype, GLenum  storagetype, GLenum  range, GLuint  components) {
//   return (*fnptr)(datatype, storagetype, range, components);
// }
// void  glowGenTextures(PGENTEXTURES fnptr, GLsizei  n, GLuint * textures) {
//   (*fnptr)(n, textures);
// }
// void  glowGenTexturesEXT(PGENTEXTURESEXT fnptr, GLsizei  n, GLuint * textures) {
//   (*fnptr)(n, textures);
// }
// void  glowGenTransformFeedbacks(PGENTRANSFORMFEEDBACKS fnptr, GLsizei  n, GLuint * ids) {
//   (*fnptr)(n, ids);
// }
// void  glowGenTransformFeedbacksNV(PGENTRANSFORMFEEDBACKSNV fnptr, GLsizei  n, GLuint * ids) {
//   (*fnptr)(n, ids);
// }
// void  glowGenVertexArrays(PGENVERTEXARRAYS fnptr, GLsizei  n, GLuint * arrays) {
//   (*fnptr)(n, arrays);
// }
// void  glowGenVertexArraysAPPLE(PGENVERTEXARRAYSAPPLE fnptr, GLsizei  n, GLuint * arrays) {
//   (*fnptr)(n, arrays);
// }
// GLuint  glowGenVertexShadersEXT(PGENVERTEXSHADERSEXT fnptr, GLuint  range) {
//   return (*fnptr)(range);
// }
// void  glowGenerateMipmap(PGENERATEMIPMAP fnptr, GLenum  target) {
//   (*fnptr)(target);
// }
// void  glowGenerateMipmapEXT(PGENERATEMIPMAPEXT fnptr, GLenum  target) {
//   (*fnptr)(target);
// }
// void  glowGenerateMultiTexMipmapEXT(PGENERATEMULTITEXMIPMAPEXT fnptr, GLenum  texunit, GLenum  target) {
//   (*fnptr)(texunit, target);
// }
// void  glowGenerateTextureMipmapEXT(PGENERATETEXTUREMIPMAPEXT fnptr, GLuint  texture, GLenum  target) {
//   (*fnptr)(texture, target);
// }
// void  glowGetActiveAtomicCounterBufferiv(PGETACTIVEATOMICCOUNTERBUFFERIV fnptr, GLuint  program, GLuint  bufferIndex, GLenum  pname, GLint * params) {
//   (*fnptr)(program, bufferIndex, pname, params);
// }
// void  glowGetActiveAttrib(PGETACTIVEATTRIB fnptr, GLuint  program, GLuint  index, GLsizei  bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name) {
//   (*fnptr)(program, index, bufSize, length, size, type, name);
// }
// void  glowGetActiveAttribARB(PGETACTIVEATTRIBARB fnptr, GLhandleARB  programObj, GLuint  index, GLsizei  maxLength, GLsizei * length, GLint * size, GLenum * type, GLcharARB * name) {
//   (*fnptr)(programObj, index, maxLength, length, size, type, name);
// }
// void  glowGetActiveSubroutineName(PGETACTIVESUBROUTINENAME fnptr, GLuint  program, GLenum  shadertype, GLuint  index, GLsizei  bufsize, GLsizei * length, GLchar * name) {
//   (*fnptr)(program, shadertype, index, bufsize, length, name);
// }
// void  glowGetActiveSubroutineUniformName(PGETACTIVESUBROUTINEUNIFORMNAME fnptr, GLuint  program, GLenum  shadertype, GLuint  index, GLsizei  bufsize, GLsizei * length, GLchar * name) {
//   (*fnptr)(program, shadertype, index, bufsize, length, name);
// }
// void  glowGetActiveSubroutineUniformiv(PGETACTIVESUBROUTINEUNIFORMIV fnptr, GLuint  program, GLenum  shadertype, GLuint  index, GLenum  pname, GLint * values) {
//   (*fnptr)(program, shadertype, index, pname, values);
// }
// void  glowGetActiveUniform(PGETACTIVEUNIFORM fnptr, GLuint  program, GLuint  index, GLsizei  bufSize, GLsizei * length, GLint * size, GLenum * type, GLchar * name) {
//   (*fnptr)(program, index, bufSize, length, size, type, name);
// }
// void  glowGetActiveUniformARB(PGETACTIVEUNIFORMARB fnptr, GLhandleARB  programObj, GLuint  index, GLsizei  maxLength, GLsizei * length, GLint * size, GLenum * type, GLcharARB * name) {
//   (*fnptr)(programObj, index, maxLength, length, size, type, name);
// }
// void  glowGetActiveUniformBlockName(PGETACTIVEUNIFORMBLOCKNAME fnptr, GLuint  program, GLuint  uniformBlockIndex, GLsizei  bufSize, GLsizei * length, GLchar * uniformBlockName) {
//   (*fnptr)(program, uniformBlockIndex, bufSize, length, uniformBlockName);
// }
// void  glowGetActiveUniformBlockiv(PGETACTIVEUNIFORMBLOCKIV fnptr, GLuint  program, GLuint  uniformBlockIndex, GLenum  pname, GLint * params) {
//   (*fnptr)(program, uniformBlockIndex, pname, params);
// }
// void  glowGetActiveUniformName(PGETACTIVEUNIFORMNAME fnptr, GLuint  program, GLuint  uniformIndex, GLsizei  bufSize, GLsizei * length, GLchar * uniformName) {
//   (*fnptr)(program, uniformIndex, bufSize, length, uniformName);
// }
// void  glowGetActiveUniformsiv(PGETACTIVEUNIFORMSIV fnptr, GLuint  program, GLsizei  uniformCount, const GLuint * uniformIndices, GLenum  pname, GLint * params) {
//   (*fnptr)(program, uniformCount, uniformIndices, pname, params);
// }
// void  glowGetActiveVaryingNV(PGETACTIVEVARYINGNV fnptr, GLuint  program, GLuint  index, GLsizei  bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name) {
//   (*fnptr)(program, index, bufSize, length, size, type, name);
// }
// void  glowGetArrayObjectfvATI(PGETARRAYOBJECTFVATI fnptr, GLenum  array, GLenum  pname, GLfloat * params) {
//   (*fnptr)(array, pname, params);
// }
// void  glowGetArrayObjectivATI(PGETARRAYOBJECTIVATI fnptr, GLenum  array, GLenum  pname, GLint * params) {
//   (*fnptr)(array, pname, params);
// }
// void  glowGetAttachedObjectsARB(PGETATTACHEDOBJECTSARB fnptr, GLhandleARB  containerObj, GLsizei  maxCount, GLsizei * count, GLhandleARB * obj) {
//   (*fnptr)(containerObj, maxCount, count, obj);
// }
// void  glowGetAttachedShaders(PGETATTACHEDSHADERS fnptr, GLuint  program, GLsizei  maxCount, GLsizei * count, GLuint * shaders) {
//   (*fnptr)(program, maxCount, count, shaders);
// }
// GLint  glowGetAttribLocation(PGETATTRIBLOCATION fnptr, GLuint  program, const GLchar * name) {
//   return (*fnptr)(program, name);
// }
// GLint  glowGetAttribLocationARB(PGETATTRIBLOCATIONARB fnptr, GLhandleARB  programObj, const GLcharARB * name) {
//   return (*fnptr)(programObj, name);
// }
// void  glowGetBooleanIndexedvEXT(PGETBOOLEANINDEXEDVEXT fnptr, GLenum  target, GLuint  index, GLboolean * data) {
//   (*fnptr)(target, index, data);
// }
// void  glowGetBooleani_v(PGETBOOLEANI_V fnptr, GLenum  target, GLuint  index, GLboolean * data) {
//   (*fnptr)(target, index, data);
// }
// void  glowGetBooleanv(PGETBOOLEANV fnptr, GLenum  pname, GLboolean * data) {
//   (*fnptr)(pname, data);
// }
// void  glowGetBufferParameteri64v(PGETBUFFERPARAMETERI64V fnptr, GLenum  target, GLenum  pname, GLint64 * params) {
//   (*fnptr)(target, pname, params);
// }
// void  glowGetBufferParameteriv(PGETBUFFERPARAMETERIV fnptr, GLenum  target, GLenum  pname, GLint * params) {
//   (*fnptr)(target, pname, params);
// }
// void  glowGetBufferParameterivARB(PGETBUFFERPARAMETERIVARB fnptr, GLenum  target, GLenum  pname, GLint * params) {
//   (*fnptr)(target, pname, params);
// }
// void  glowGetBufferParameterui64vNV(PGETBUFFERPARAMETERUI64VNV fnptr, GLenum  target, GLenum  pname, GLuint64EXT * params) {
//   (*fnptr)(target, pname, params);
// }
// void  glowGetBufferPointerv(PGETBUFFERPOINTERV fnptr, GLenum  target, GLenum  pname, void ** params) {
//   (*fnptr)(target, pname, params);
// }
// void  glowGetBufferPointervARB(PGETBUFFERPOINTERVARB fnptr, GLenum  target, GLenum  pname, void ** params) {
//   (*fnptr)(target, pname, params);
// }
// void  glowGetBufferSubData(PGETBUFFERSUBDATA fnptr, GLenum  target, GLintptr  offset, GLsizeiptr  size, void * data) {
//   (*fnptr)(target, offset, size, data);
// }
// void  glowGetBufferSubDataARB(PGETBUFFERSUBDATAARB fnptr, GLenum  target, GLintptrARB  offset, GLsizeiptrARB  size, void * data) {
//   (*fnptr)(target, offset, size, data);
// }
// void  glowGetClipPlanefOES(PGETCLIPPLANEFOES fnptr, GLenum  plane, GLfloat * equation) {
//   (*fnptr)(plane, equation);
// }
// void  glowGetClipPlanexOES(PGETCLIPPLANEXOES fnptr, GLenum  plane, GLfixed * equation) {
//   (*fnptr)(plane, equation);
// }
// void  glowGetColorTableEXT(PGETCOLORTABLEEXT fnptr, GLenum  target, GLenum  format, GLenum  type, void * data) {
//   (*fnptr)(target, format, type, data);
// }
// void  glowGetColorTableParameterfvEXT(PGETCOLORTABLEPARAMETERFVEXT fnptr, GLenum  target, GLenum  pname, GLfloat * params) {
//   (*fnptr)(target, pname, params);
// }
// void  glowGetColorTableParameterfvSGI(PGETCOLORTABLEPARAMETERFVSGI fnptr, GLenum  target, GLenum  pname, GLfloat * params) {
//   (*fnptr)(target, pname, params);
// }
// void  glowGetColorTableParameterivEXT(PGETCOLORTABLEPARAMETERIVEXT fnptr, GLenum  target, GLenum  pname, GLint * params) {
//   (*fnptr)(target, pname, params);
// }
// void  glowGetColorTableParameterivSGI(PGETCOLORTABLEPARAMETERIVSGI fnptr, GLenum  target, GLenum  pname, GLint * params) {
//   (*fnptr)(target, pname, params);
// }
// void  glowGetColorTableSGI(PGETCOLORTABLESGI fnptr, GLenum  target, GLenum  format, GLenum  type, void * table) {
//   (*fnptr)(target, format, type, table);
// }
// void  glowGetCombinerInputParameterfvNV(PGETCOMBINERINPUTPARAMETERFVNV fnptr, GLenum  stage, GLenum  portion, GLenum  variable, GLenum  pname, GLfloat * params) {
//   (*fnptr)(stage, portion, variable, pname, params);
// }
// void  glowGetCombinerInputParameterivNV(PGETCOMBINERINPUTPARAMETERIVNV fnptr, GLenum  stage, GLenum  portion, GLenum  variable, GLenum  pname, GLint * params) {
//   (*fnptr)(stage, portion, variable, pname, params);
// }
// void  glowGetCombinerOutputParameterfvNV(PGETCOMBINEROUTPUTPARAMETERFVNV fnptr, GLenum  stage, GLenum  portion, GLenum  pname, GLfloat * params) {
//   (*fnptr)(stage, portion, pname, params);
// }
// void  glowGetCombinerOutputParameterivNV(PGETCOMBINEROUTPUTPARAMETERIVNV fnptr, GLenum  stage, GLenum  portion, GLenum  pname, GLint * params) {
//   (*fnptr)(stage, portion, pname, params);
// }
// void  glowGetCombinerStageParameterfvNV(PGETCOMBINERSTAGEPARAMETERFVNV fnptr, GLenum  stage, GLenum  pname, GLfloat * params) {
//   (*fnptr)(stage, pname, params);
// }
// void  glowGetCompressedMultiTexImageEXT(PGETCOMPRESSEDMULTITEXIMAGEEXT fnptr, GLenum  texunit, GLenum  target, GLint  lod, void * img) {
//   (*fnptr)(texunit, target, lod, img);
// }
// void  glowGetCompressedTexImage(PGETCOMPRESSEDTEXIMAGE fnptr, GLenum  target, GLint  level, void * img) {
//   (*fnptr)(target, level, img);
// }
// void  glowGetCompressedTexImageARB(PGETCOMPRESSEDTEXIMAGEARB fnptr, GLenum  target, GLint  level, void * img) {
//   (*fnptr)(target, level, img);
// }
// void  glowGetCompressedTextureImageEXT(PGETCOMPRESSEDTEXTUREIMAGEEXT fnptr, GLuint  texture, GLenum  target, GLint  lod, void * img) {
//   (*fnptr)(texture, target, lod, img);
// }
// void  glowGetConvolutionFilterEXT(PGETCONVOLUTIONFILTEREXT fnptr, GLenum  target, GLenum  format, GLenum  type, void * image) {
//   (*fnptr)(target, format, type, image);
// }
// void  glowGetConvolutionParameterfvEXT(PGETCONVOLUTIONPARAMETERFVEXT fnptr, GLenum  target, GLenum  pname, GLfloat * params) {
//   (*fnptr)(target, pname, params);
// }
// void  glowGetConvolutionParameterivEXT(PGETCONVOLUTIONPARAMETERIVEXT fnptr, GLenum  target, GLenum  pname, GLint * params) {
//   (*fnptr)(target, pname, params);
// }
// void  glowGetConvolutionParameterxvOES(PGETCONVOLUTIONPARAMETERXVOES fnptr, GLenum  target, GLenum  pname, GLfixed * params) {
//   (*fnptr)(target, pname, params);
// }
// GLuint  glowGetDebugMessageLog(PGETDEBUGMESSAGELOG fnptr, GLuint  count, GLsizei  bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog) {
//   return (*fnptr)(count, bufSize, sources, types, ids, severities, lengths, messageLog);
// }
// GLuint  glowGetDebugMessageLogAMD(PGETDEBUGMESSAGELOGAMD fnptr, GLuint  count, GLsizei  bufsize, GLenum * categories, GLuint * severities, GLuint * ids, GLsizei * lengths, GLchar * message) {
//   return (*fnptr)(count, bufsize, categories, severities, ids, lengths, message);
// }
// GLuint  glowGetDebugMessageLogARB(PGETDEBUGMESSAGELOGARB fnptr, GLuint  count, GLsizei  bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog) {
//   return (*fnptr)(count, bufSize, sources, types, ids, severities, lengths, messageLog);
// }
// GLuint  glowGetDebugMessageLogKHR(PGETDEBUGMESSAGELOGKHR fnptr, GLuint  count, GLsizei  bufSize, GLenum * sources, GLenum * types, GLuint * ids, GLenum * severities, GLsizei * lengths, GLchar * messageLog) {
//   return (*fnptr)(count, bufSize, sources, types, ids, severities, lengths, messageLog);
// }
// void  glowGetDetailTexFuncSGIS(PGETDETAILTEXFUNCSGIS fnptr, GLenum  target, GLfloat * points) {
//   (*fnptr)(target, points);
// }
// void  glowGetDoubleIndexedvEXT(PGETDOUBLEINDEXEDVEXT fnptr, GLenum  target, GLuint  index, GLdouble * data) {
//   (*fnptr)(target, index, data);
// }
// void  glowGetDoublei_v(PGETDOUBLEI_V fnptr, GLenum  target, GLuint  index, GLdouble * data) {
//   (*fnptr)(target, index, data);
// }
// void  glowGetDoublei_vEXT(PGETDOUBLEI_VEXT fnptr, GLenum  pname, GLuint  index, GLdouble * params) {
//   (*fnptr)(pname, index, params);
// }
// void  glowGetDoublev(PGETDOUBLEV fnptr, GLenum  pname, GLdouble * data) {
//   (*fnptr)(pname, data);
// }
// GLenum  glowGetError(PGETERROR fnptr) {
//   return (*fnptr)();
// }
// void  glowGetFenceivNV(PGETFENCEIVNV fnptr, GLuint  fence, GLenum  pname, GLint * params) {
//   (*fnptr)(fence, pname, params);
// }
// void  glowGetFinalCombinerInputParameterfvNV(PGETFINALCOMBINERINPUTPARAMETERFVNV fnptr, GLenum  variable, GLenum  pname, GLfloat * params) {
//   (*fnptr)(variable, pname, params);
// }
// void  glowGetFinalCombinerInputParameterivNV(PGETFINALCOMBINERINPUTPARAMETERIVNV fnptr, GLenum  variable, GLenum  pname, GLint * params) {
//   (*fnptr)(variable, pname, params);
// }
// void  glowGetFirstPerfQueryIdINTEL(PGETFIRSTPERFQUERYIDINTEL fnptr, GLuint * queryId) {
//   (*fnptr)(queryId);
// }
// void  glowGetFixedvOES(PGETFIXEDVOES fnptr, GLenum  pname, GLfixed * params) {
//   (*fnptr)(pname, params);
// }
// void  glowGetFloatIndexedvEXT(PGETFLOATINDEXEDVEXT fnptr, GLenum  target, GLuint  index, GLfloat * data) {
//   (*fnptr)(target, index, data);
// }
// void  glowGetFloati_v(PGETFLOATI_V fnptr, GLenum  target, GLuint  index, GLfloat * data) {
//   (*fnptr)(target, index, data);
// }
// void  glowGetFloati_vEXT(PGETFLOATI_VEXT fnptr, GLenum  pname, GLuint  index, GLfloat * params) {
//   (*fnptr)(pname, index, params);
// }
// void  glowGetFloatv(PGETFLOATV fnptr, GLenum  pname, GLfloat * data) {
//   (*fnptr)(pname, data);
// }
// void  glowGetFogFuncSGIS(PGETFOGFUNCSGIS fnptr, GLfloat * points) {
//   (*fnptr)(points);
// }
// GLint  glowGetFragDataIndex(PGETFRAGDATAINDEX fnptr, GLuint  program, const GLchar * name) {
//   return (*fnptr)(program, name);
// }
// GLint  glowGetFragDataLocation(PGETFRAGDATALOCATION fnptr, GLuint  program, const GLchar * name) {
//   return (*fnptr)(program, name);
// }
// GLint  glowGetFragDataLocationEXT(PGETFRAGDATALOCATIONEXT fnptr, GLuint  program, const GLchar * name) {
//   return (*fnptr)(program, name);
// }
// void  glowGetFragmentLightfvSGIX(PGETFRAGMENTLIGHTFVSGIX fnptr, GLenum  light, GLenum  pname, GLfloat * params) {
//   (*fnptr)(light, pname, params);
// }
// void  glowGetFragmentLightivSGIX(PGETFRAGMENTLIGHTIVSGIX fnptr, GLenum  light, GLenum  pname, GLint * params) {
//   (*fnptr)(light, pname, params);
// }
// void  glowGetFragmentMaterialfvSGIX(PGETFRAGMENTMATERIALFVSGIX fnptr, GLenum  face, GLenum  pname, GLfloat * params) {
//   (*fnptr)(face, pname, params);
// }
// void  glowGetFragmentMaterialivSGIX(PGETFRAGMENTMATERIALIVSGIX fnptr, GLenum  face, GLenum  pname, GLint * params) {
//   (*fnptr)(face, pname, params);
// }
// void  glowGetFramebufferAttachmentParameteriv(PGETFRAMEBUFFERATTACHMENTPARAMETERIV fnptr, GLenum  target, GLenum  attachment, GLenum  pname, GLint * params) {
//   (*fnptr)(target, attachment, pname, params);
// }
// void  glowGetFramebufferAttachmentParameterivEXT(PGETFRAMEBUFFERATTACHMENTPARAMETERIVEXT fnptr, GLenum  target, GLenum  attachment, GLenum  pname, GLint * params) {
//   (*fnptr)(target, attachment, pname, params);
// }
// void  glowGetFramebufferParameteriv(PGETFRAMEBUFFERPARAMETERIV fnptr, GLenum  target, GLenum  pname, GLint * params) {
//   (*fnptr)(target, pname, params);
// }
// void  glowGetFramebufferParameterivEXT(PGETFRAMEBUFFERPARAMETERIVEXT fnptr, GLuint  framebuffer, GLenum  pname, GLint * params) {
//   (*fnptr)(framebuffer, pname, params);
// }
// GLenum  glowGetGraphicsResetStatusARB(PGETGRAPHICSRESETSTATUSARB fnptr) {
//   return (*fnptr)();
// }
// GLhandleARB  glowGetHandleARB(PGETHANDLEARB fnptr, GLenum  pname) {
//   return (*fnptr)(pname);
// }
// void  glowGetHistogramEXT(PGETHISTOGRAMEXT fnptr, GLenum  target, GLboolean  reset, GLenum  format, GLenum  type, void * values) {
//   (*fnptr)(target, reset, format, type, values);
// }
// void  glowGetHistogramParameterfvEXT(PGETHISTOGRAMPARAMETERFVEXT fnptr, GLenum  target, GLenum  pname, GLfloat * params) {
//   (*fnptr)(target, pname, params);
// }
// void  glowGetHistogramParameterivEXT(PGETHISTOGRAMPARAMETERIVEXT fnptr, GLenum  target, GLenum  pname, GLint * params) {
//   (*fnptr)(target, pname, params);
// }
// void  glowGetHistogramParameterxvOES(PGETHISTOGRAMPARAMETERXVOES fnptr, GLenum  target, GLenum  pname, GLfixed * params) {
//   (*fnptr)(target, pname, params);
// }
// GLuint64  glowGetImageHandleARB(PGETIMAGEHANDLEARB fnptr, GLuint  texture, GLint  level, GLboolean  layered, GLint  layer, GLenum  format) {
//   return (*fnptr)(texture, level, layered, layer, format);
// }
// GLuint64  glowGetImageHandleNV(PGETIMAGEHANDLENV fnptr, GLuint  texture, GLint  level, GLboolean  layered, GLint  layer, GLenum  format) {
//   return (*fnptr)(texture, level, layered, layer, format);
// }
// void  glowGetImageTransformParameterfvHP(PGETIMAGETRANSFORMPARAMETERFVHP fnptr, GLenum  target, GLenum  pname, GLfloat * params) {
//   (*fnptr)(target, pname, params);
// }
// void  glowGetImageTransformParameterivHP(PGETIMAGETRANSFORMPARAMETERIVHP fnptr, GLenum  target, GLenum  pname, GLint * params) {
//   (*fnptr)(target, pname, params);
// }
// void  glowGetInfoLogARB(PGETINFOLOGARB fnptr, GLhandleARB  obj, GLsizei  maxLength, GLsizei * length, GLcharARB * infoLog) {
//   (*fnptr)(obj, maxLength, length, infoLog);
// }
// GLint  glowGetInstrumentsSGIX(PGETINSTRUMENTSSGIX fnptr) {
//   return (*fnptr)();
// }
// void  glowGetInteger64i_v(PGETINTEGER64I_V fnptr, GLenum  target, GLuint  index, GLint64 * data) {
//   (*fnptr)(target, index, data);
// }
// void  glowGetInteger64v(PGETINTEGER64V fnptr, GLenum  pname, GLint64 * data) {
//   (*fnptr)(pname, data);
// }
// void  glowGetIntegerIndexedvEXT(PGETINTEGERINDEXEDVEXT fnptr, GLenum  target, GLuint  index, GLint * data) {
//   (*fnptr)(target, index, data);
// }
// void  glowGetIntegeri_v(PGETINTEGERI_V fnptr, GLenum  target, GLuint  index, GLint * data) {
//   (*fnptr)(target, index, data);
// }
// void  glowGetIntegerui64i_vNV(PGETINTEGERUI64I_VNV fnptr, GLenum  value, GLuint  index, GLuint64EXT * result) {
//   (*fnptr)(value, index, result);
// }
// void  glowGetIntegerui64vNV(PGETINTEGERUI64VNV fnptr, GLenum  value, GLuint64EXT * result) {
//   (*fnptr)(value, result);
// }
// void  glowGetIntegerv(PGETINTEGERV fnptr, GLenum  pname, GLint * data) {
//   (*fnptr)(pname, data);
// }
// void  glowGetInternalformati64v(PGETINTERNALFORMATI64V fnptr, GLenum  target, GLenum  internalformat, GLenum  pname, GLsizei  bufSize, GLint64 * params) {
//   (*fnptr)(target, internalformat, pname, bufSize, params);
// }
// void  glowGetInternalformativ(PGETINTERNALFORMATIV fnptr, GLenum  target, GLenum  internalformat, GLenum  pname, GLsizei  bufSize, GLint * params) {
//   (*fnptr)(target, internalformat, pname, bufSize, params);
// }
// void  glowGetInvariantBooleanvEXT(PGETINVARIANTBOOLEANVEXT fnptr, GLuint  id, GLenum  value, GLboolean * data) {
//   (*fnptr)(id, value, data);
// }
// void  glowGetInvariantFloatvEXT(PGETINVARIANTFLOATVEXT fnptr, GLuint  id, GLenum  value, GLfloat * data) {
//   (*fnptr)(id, value, data);
// }
// void  glowGetInvariantIntegervEXT(PGETINVARIANTINTEGERVEXT fnptr, GLuint  id, GLenum  value, GLint * data) {
//   (*fnptr)(id, value, data);
// }
// void  glowGetLightxOES(PGETLIGHTXOES fnptr, GLenum  light, GLenum  pname, GLfixed * params) {
//   (*fnptr)(light, pname, params);
// }
// void  glowGetLightxvOES(PGETLIGHTXVOES fnptr, GLenum  light, GLenum  pname, GLfixed * params) {
//   (*fnptr)(light, pname, params);
// }
// void  glowGetListParameterfvSGIX(PGETLISTPARAMETERFVSGIX fnptr, GLuint  list, GLenum  pname, GLfloat * params) {
//   (*fnptr)(list, pname, params);
// }
// void  glowGetListParameterivSGIX(PGETLISTPARAMETERIVSGIX fnptr, GLuint  list, GLenum  pname, GLint * params) {
//   (*fnptr)(list, pname, params);
// }
// void  glowGetLocalConstantBooleanvEXT(PGETLOCALCONSTANTBOOLEANVEXT fnptr, GLuint  id, GLenum  value, GLboolean * data) {
//   (*fnptr)(id, value, data);
// }
// void  glowGetLocalConstantFloatvEXT(PGETLOCALCONSTANTFLOATVEXT fnptr, GLuint  id, GLenum  value, GLfloat * data) {
//   (*fnptr)(id, value, data);
// }
// void  glowGetLocalConstantIntegervEXT(PGETLOCALCONSTANTINTEGERVEXT fnptr, GLuint  id, GLenum  value, GLint * data) {
//   (*fnptr)(id, value, data);
// }
// void  glowGetMapAttribParameterfvNV(PGETMAPATTRIBPARAMETERFVNV fnptr, GLenum  target, GLuint  index, GLenum  pname, GLfloat * params) {
//   (*fnptr)(target, index, pname, params);
// }
// void  glowGetMapAttribParameterivNV(PGETMAPATTRIBPARAMETERIVNV fnptr, GLenum  target, GLuint  index, GLenum  pname, GLint * params) {
//   (*fnptr)(target, index, pname, params);
// }
// void  glowGetMapControlPointsNV(PGETMAPCONTROLPOINTSNV fnptr, GLenum  target, GLuint  index, GLenum  type, GLsizei  ustride, GLsizei  vstride, GLboolean  packed, void * points) {
//   (*fnptr)(target, index, type, ustride, vstride, packed, points);
// }
// void  glowGetMapParameterfvNV(PGETMAPPARAMETERFVNV fnptr, GLenum  target, GLenum  pname, GLfloat * params) {
//   (*fnptr)(target, pname, params);
// }
// void  glowGetMapParameterivNV(PGETMAPPARAMETERIVNV fnptr, GLenum  target, GLenum  pname, GLint * params) {
//   (*fnptr)(target, pname, params);
// }
// void  glowGetMapxvOES(PGETMAPXVOES fnptr, GLenum  target, GLenum  query, GLfixed * v) {
//   (*fnptr)(target, query, v);
// }
// void  glowGetMaterialxOES(PGETMATERIALXOES fnptr, GLenum  face, GLenum  pname, GLfixed  param) {
//   (*fnptr)(face, pname, param);
// }
// void  glowGetMaterialxvOES(PGETMATERIALXVOES fnptr, GLenum  face, GLenum  pname, GLfixed * params) {
//   (*fnptr)(face, pname, params);
// }
// void  glowGetMinmaxEXT(PGETMINMAXEXT fnptr, GLenum  target, GLboolean  reset, GLenum  format, GLenum  type, void * values) {
//   (*fnptr)(target, reset, format, type, values);
// }
// void  glowGetMinmaxParameterfvEXT(PGETMINMAXPARAMETERFVEXT fnptr, GLenum  target, GLenum  pname, GLfloat * params) {
//   (*fnptr)(target, pname, params);
// }
// void  glowGetMinmaxParameterivEXT(PGETMINMAXPARAMETERIVEXT fnptr, GLenum  target, GLenum  pname, GLint * params) {
//   (*fnptr)(target, pname, params);
// }
// void  glowGetMultiTexEnvfvEXT(PGETMULTITEXENVFVEXT fnptr, GLenum  texunit, GLenum  target, GLenum  pname, GLfloat * params) {
//   (*fnptr)(texunit, target, pname, params);
// }
// void  glowGetMultiTexEnvivEXT(PGETMULTITEXENVIVEXT fnptr, GLenum  texunit, GLenum  target, GLenum  pname, GLint * params) {
//   (*fnptr)(texunit, target, pname, params);
// }
// void  glowGetMultiTexGendvEXT(PGETMULTITEXGENDVEXT fnptr, GLenum  texunit, GLenum  coord, GLenum  pname, GLdouble * params) {
//   (*fnptr)(texunit, coord, pname, params);
// }
// void  glowGetMultiTexGenfvEXT(PGETMULTITEXGENFVEXT fnptr, GLenum  texunit, GLenum  coord, GLenum  pname, GLfloat * params) {
//   (*fnptr)(texunit, coord, pname, params);
// }
// void  glowGetMultiTexGenivEXT(PGETMULTITEXGENIVEXT fnptr, GLenum  texunit, GLenum  coord, GLenum  pname, GLint * params) {
//   (*fnptr)(texunit, coord, pname, params);
// }
// void  glowGetMultiTexImageEXT(PGETMULTITEXIMAGEEXT fnptr, GLenum  texunit, GLenum  target, GLint  level, GLenum  format, GLenum  type, void * pixels) {
//   (*fnptr)(texunit, target, level, format, type, pixels);
// }
// void  glowGetMultiTexLevelParameterfvEXT(PGETMULTITEXLEVELPARAMETERFVEXT fnptr, GLenum  texunit, GLenum  target, GLint  level, GLenum  pname, GLfloat * params) {
//   (*fnptr)(texunit, target, level, pname, params);
// }
// void  glowGetMultiTexLevelParameterivEXT(PGETMULTITEXLEVELPARAMETERIVEXT fnptr, GLenum  texunit, GLenum  target, GLint  level, GLenum  pname, GLint * params) {
//   (*fnptr)(texunit, target, level, pname, params);
// }
// void  glowGetMultiTexParameterIivEXT(PGETMULTITEXPARAMETERIIVEXT fnptr, GLenum  texunit, GLenum  target, GLenum  pname, GLint * params) {
//   (*fnptr)(texunit, target, pname, params);
// }
// void  glowGetMultiTexParameterIuivEXT(PGETMULTITEXPARAMETERIUIVEXT fnptr, GLenum  texunit, GLenum  target, GLenum  pname, GLuint * params) {
//   (*fnptr)(texunit, target, pname, params);
// }
// void  glowGetMultiTexParameterfvEXT(PGETMULTITEXPARAMETERFVEXT fnptr, GLenum  texunit, GLenum  target, GLenum  pname, GLfloat * params) {
//   (*fnptr)(texunit, target, pname, params);
// }
// void  glowGetMultiTexParameterivEXT(PGETMULTITEXPARAMETERIVEXT fnptr, GLenum  texunit, GLenum  target, GLenum  pname, GLint * params) {
//   (*fnptr)(texunit, target, pname, params);
// }
// void  glowGetMultisamplefv(PGETMULTISAMPLEFV fnptr, GLenum  pname, GLuint  index, GLfloat * val) {
//   (*fnptr)(pname, index, val);
// }
// void  glowGetMultisamplefvNV(PGETMULTISAMPLEFVNV fnptr, GLenum  pname, GLuint  index, GLfloat * val) {
//   (*fnptr)(pname, index, val);
// }
// void  glowGetNamedBufferParameterivEXT(PGETNAMEDBUFFERPARAMETERIVEXT fnptr, GLuint  buffer, GLenum  pname, GLint * params) {
//   (*fnptr)(buffer, pname, params);
// }
// void  glowGetNamedBufferParameterui64vNV(PGETNAMEDBUFFERPARAMETERUI64VNV fnptr, GLuint  buffer, GLenum  pname, GLuint64EXT * params) {
//   (*fnptr)(buffer, pname, params);
// }
// void  glowGetNamedBufferPointervEXT(PGETNAMEDBUFFERPOINTERVEXT fnptr, GLuint  buffer, GLenum  pname, void ** params) {
//   (*fnptr)(buffer, pname, params);
// }
// void  glowGetNamedBufferSubDataEXT(PGETNAMEDBUFFERSUBDATAEXT fnptr, GLuint  buffer, GLintptr  offset, GLsizeiptr  size, void * data) {
//   (*fnptr)(buffer, offset, size, data);
// }
// void  glowGetNamedFramebufferAttachmentParameterivEXT(PGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXT fnptr, GLuint  framebuffer, GLenum  attachment, GLenum  pname, GLint * params) {
//   (*fnptr)(framebuffer, attachment, pname, params);
// }
// void  glowGetNamedFramebufferParameterivEXT(PGETNAMEDFRAMEBUFFERPARAMETERIVEXT fnptr, GLuint  framebuffer, GLenum  pname, GLint * params) {
//   (*fnptr)(framebuffer, pname, params);
// }
// void  glowGetNamedProgramLocalParameterIivEXT(PGETNAMEDPROGRAMLOCALPARAMETERIIVEXT fnptr, GLuint  program, GLenum  target, GLuint  index, GLint * params) {
//   (*fnptr)(program, target, index, params);
// }
// void  glowGetNamedProgramLocalParameterIuivEXT(PGETNAMEDPROGRAMLOCALPARAMETERIUIVEXT fnptr, GLuint  program, GLenum  target, GLuint  index, GLuint * params) {
//   (*fnptr)(program, target, index, params);
// }
// void  glowGetNamedProgramLocalParameterdvEXT(PGETNAMEDPROGRAMLOCALPARAMETERDVEXT fnptr, GLuint  program, GLenum  target, GLuint  index, GLdouble * params) {
//   (*fnptr)(program, target, index, params);
// }
// void  glowGetNamedProgramLocalParameterfvEXT(PGETNAMEDPROGRAMLOCALPARAMETERFVEXT fnptr, GLuint  program, GLenum  target, GLuint  index, GLfloat * params) {
//   (*fnptr)(program, target, index, params);
// }
// void  glowGetNamedProgramStringEXT(PGETNAMEDPROGRAMSTRINGEXT fnptr, GLuint  program, GLenum  target, GLenum  pname, void * string) {
//   (*fnptr)(program, target, pname, string);
// }
// void  glowGetNamedProgramivEXT(PGETNAMEDPROGRAMIVEXT fnptr, GLuint  program, GLenum  target, GLenum  pname, GLint * params) {
//   (*fnptr)(program, target, pname, params);
// }
// void  glowGetNamedRenderbufferParameterivEXT(PGETNAMEDRENDERBUFFERPARAMETERIVEXT fnptr, GLuint  renderbuffer, GLenum  pname, GLint * params) {
//   (*fnptr)(renderbuffer, pname, params);
// }
// void  glowGetNamedStringARB(PGETNAMEDSTRINGARB fnptr, GLint  namelen, const GLchar * name, GLsizei  bufSize, GLint * stringlen, GLchar * string) {
//   (*fnptr)(namelen, name, bufSize, stringlen, string);
// }
// void  glowGetNamedStringivARB(PGETNAMEDSTRINGIVARB fnptr, GLint  namelen, const GLchar * name, GLenum  pname, GLint * params) {
//   (*fnptr)(namelen, name, pname, params);
// }
// void  glowGetNextPerfQueryIdINTEL(PGETNEXTPERFQUERYIDINTEL fnptr, GLuint  queryId, GLuint * nextQueryId) {
//   (*fnptr)(queryId, nextQueryId);
// }
// void  glowGetObjectBufferfvATI(PGETOBJECTBUFFERFVATI fnptr, GLuint  buffer, GLenum  pname, GLfloat * params) {
//   (*fnptr)(buffer, pname, params);
// }
// void  glowGetObjectBufferivATI(PGETOBJECTBUFFERIVATI fnptr, GLuint  buffer, GLenum  pname, GLint * params) {
//   (*fnptr)(buffer, pname, params);
// }
// void  glowGetObjectLabel(PGETOBJECTLABEL fnptr, GLenum  identifier, GLuint  name, GLsizei  bufSize, GLsizei * length, GLchar * label) {
//   (*fnptr)(identifier, name, bufSize, length, label);
// }
// void  glowGetObjectLabelEXT(PGETOBJECTLABELEXT fnptr, GLenum  type, GLuint  object, GLsizei  bufSize, GLsizei * length, GLchar * label) {
//   (*fnptr)(type, object, bufSize, length, label);
// }
// void  glowGetObjectLabelKHR(PGETOBJECTLABELKHR fnptr, GLenum  identifier, GLuint  name, GLsizei  bufSize, GLsizei * length, GLchar * label) {
//   (*fnptr)(identifier, name, bufSize, length, label);
// }
// void  glowGetObjectParameterfvARB(PGETOBJECTPARAMETERFVARB fnptr, GLhandleARB  obj, GLenum  pname, GLfloat * params) {
//   (*fnptr)(obj, pname, params);
// }
// void  glowGetObjectParameterivAPPLE(PGETOBJECTPARAMETERIVAPPLE fnptr, GLenum  objectType, GLuint  name, GLenum  pname, GLint * params) {
//   (*fnptr)(objectType, name, pname, params);
// }
// void  glowGetObjectParameterivARB(PGETOBJECTPARAMETERIVARB fnptr, GLhandleARB  obj, GLenum  pname, GLint * params) {
//   (*fnptr)(obj, pname, params);
// }
// void  glowGetObjectPtrLabel(PGETOBJECTPTRLABEL fnptr, const void * ptr, GLsizei  bufSize, GLsizei * length, GLchar * label) {
//   (*fnptr)(ptr, bufSize, length, label);
// }
// void  glowGetObjectPtrLabelKHR(PGETOBJECTPTRLABELKHR fnptr, const void * ptr, GLsizei  bufSize, GLsizei * length, GLchar * label) {
//   (*fnptr)(ptr, bufSize, length, label);
// }
// void  glowGetOcclusionQueryivNV(PGETOCCLUSIONQUERYIVNV fnptr, GLuint  id, GLenum  pname, GLint * params) {
//   (*fnptr)(id, pname, params);
// }
// void  glowGetOcclusionQueryuivNV(PGETOCCLUSIONQUERYUIVNV fnptr, GLuint  id, GLenum  pname, GLuint * params) {
//   (*fnptr)(id, pname, params);
// }
// void  glowGetPathColorGenfvNV(PGETPATHCOLORGENFVNV fnptr, GLenum  color, GLenum  pname, GLfloat * value) {
//   (*fnptr)(color, pname, value);
// }
// void  glowGetPathColorGenivNV(PGETPATHCOLORGENIVNV fnptr, GLenum  color, GLenum  pname, GLint * value) {
//   (*fnptr)(color, pname, value);
// }
// void  glowGetPathCommandsNV(PGETPATHCOMMANDSNV fnptr, GLuint  path, GLubyte * commands) {
//   (*fnptr)(path, commands);
// }
// void  glowGetPathCoordsNV(PGETPATHCOORDSNV fnptr, GLuint  path, GLfloat * coords) {
//   (*fnptr)(path, coords);
// }
// void  glowGetPathDashArrayNV(PGETPATHDASHARRAYNV fnptr, GLuint  path, GLfloat * dashArray) {
//   (*fnptr)(path, dashArray);
// }
// GLfloat  glowGetPathLengthNV(PGETPATHLENGTHNV fnptr, GLuint  path, GLsizei  startSegment, GLsizei  numSegments) {
//   return (*fnptr)(path, startSegment, numSegments);
// }
// void  glowGetPathMetricRangeNV(PGETPATHMETRICRANGENV fnptr, GLbitfield  metricQueryMask, GLuint  firstPathName, GLsizei  numPaths, GLsizei  stride, GLfloat * metrics) {
//   (*fnptr)(metricQueryMask, firstPathName, numPaths, stride, metrics);
// }
// void  glowGetPathMetricsNV(PGETPATHMETRICSNV fnptr, GLbitfield  metricQueryMask, GLsizei  numPaths, GLenum  pathNameType, const void * paths, GLuint  pathBase, GLsizei  stride, GLfloat * metrics) {
//   (*fnptr)(metricQueryMask, numPaths, pathNameType, paths, pathBase, stride, metrics);
// }
// void  glowGetPathParameterfvNV(PGETPATHPARAMETERFVNV fnptr, GLuint  path, GLenum  pname, GLfloat * value) {
//   (*fnptr)(path, pname, value);
// }
// void  glowGetPathParameterivNV(PGETPATHPARAMETERIVNV fnptr, GLuint  path, GLenum  pname, GLint * value) {
//   (*fnptr)(path, pname, value);
// }
// void  glowGetPathSpacingNV(PGETPATHSPACINGNV fnptr, GLenum  pathListMode, GLsizei  numPaths, GLenum  pathNameType, const void * paths, GLuint  pathBase, GLfloat  advanceScale, GLfloat  kerningScale, GLenum  transformType, GLfloat * returnedSpacing) {
//   (*fnptr)(pathListMode, numPaths, pathNameType, paths, pathBase, advanceScale, kerningScale, transformType, returnedSpacing);
// }
// void  glowGetPathTexGenfvNV(PGETPATHTEXGENFVNV fnptr, GLenum  texCoordSet, GLenum  pname, GLfloat * value) {
//   (*fnptr)(texCoordSet, pname, value);
// }
// void  glowGetPathTexGenivNV(PGETPATHTEXGENIVNV fnptr, GLenum  texCoordSet, GLenum  pname, GLint * value) {
//   (*fnptr)(texCoordSet, pname, value);
// }
// void  glowGetPerfCounterInfoINTEL(PGETPERFCOUNTERINFOINTEL fnptr, GLuint  queryId, GLuint  counterId, GLuint  counterNameLength, GLchar * counterName, GLuint  counterDescLength, GLchar * counterDesc, GLuint * counterOffset, GLuint * counterDataSize, GLuint * counterTypeEnum, GLuint * counterDataTypeEnum, GLuint64 * rawCounterMaxValue) {
//   (*fnptr)(queryId, counterId, counterNameLength, counterName, counterDescLength, counterDesc, counterOffset, counterDataSize, counterTypeEnum, counterDataTypeEnum, rawCounterMaxValue);
// }
// void  glowGetPerfMonitorCounterDataAMD(PGETPERFMONITORCOUNTERDATAAMD fnptr, GLuint  monitor, GLenum  pname, GLsizei  dataSize, GLuint * data, GLint * bytesWritten) {
//   (*fnptr)(monitor, pname, dataSize, data, bytesWritten);
// }
// void  glowGetPerfMonitorCounterInfoAMD(PGETPERFMONITORCOUNTERINFOAMD fnptr, GLuint  group, GLuint  counter, GLenum  pname, void * data) {
//   (*fnptr)(group, counter, pname, data);
// }
// void  glowGetPerfMonitorCounterStringAMD(PGETPERFMONITORCOUNTERSTRINGAMD fnptr, GLuint  group, GLuint  counter, GLsizei  bufSize, GLsizei * length, GLchar * counterString) {
//   (*fnptr)(group, counter, bufSize, length, counterString);
// }
// void  glowGetPerfMonitorCountersAMD(PGETPERFMONITORCOUNTERSAMD fnptr, GLuint  group, GLint * numCounters, GLint * maxActiveCounters, GLsizei  counterSize, GLuint * counters) {
//   (*fnptr)(group, numCounters, maxActiveCounters, counterSize, counters);
// }
// void  glowGetPerfMonitorGroupStringAMD(PGETPERFMONITORGROUPSTRINGAMD fnptr, GLuint  group, GLsizei  bufSize, GLsizei * length, GLchar * groupString) {
//   (*fnptr)(group, bufSize, length, groupString);
// }
// void  glowGetPerfMonitorGroupsAMD(PGETPERFMONITORGROUPSAMD fnptr, GLint * numGroups, GLsizei  groupsSize, GLuint * groups) {
//   (*fnptr)(numGroups, groupsSize, groups);
// }
// void  glowGetPerfQueryDataINTEL(PGETPERFQUERYDATAINTEL fnptr, GLuint  queryHandle, GLuint  flags, GLsizei  dataSize, GLvoid * data, GLuint * bytesWritten) {
//   (*fnptr)(queryHandle, flags, dataSize, data, bytesWritten);
// }
// void  glowGetPerfQueryIdByNameINTEL(PGETPERFQUERYIDBYNAMEINTEL fnptr, GLchar * queryName, GLuint * queryId) {
//   (*fnptr)(queryName, queryId);
// }
// void  glowGetPerfQueryInfoINTEL(PGETPERFQUERYINFOINTEL fnptr, GLuint  queryId, GLuint  queryNameLength, GLchar * queryName, GLuint * dataSize, GLuint * noCounters, GLuint * noInstances, GLuint * capsMask) {
//   (*fnptr)(queryId, queryNameLength, queryName, dataSize, noCounters, noInstances, capsMask);
// }
// void  glowGetPixelMapxv(PGETPIXELMAPXV fnptr, GLenum  map, GLint  size, GLfixed * values) {
//   (*fnptr)(map, size, values);
// }
// void  glowGetPixelTexGenParameterfvSGIS(PGETPIXELTEXGENPARAMETERFVSGIS fnptr, GLenum  pname, GLfloat * params) {
//   (*fnptr)(pname, params);
// }
// void  glowGetPixelTexGenParameterivSGIS(PGETPIXELTEXGENPARAMETERIVSGIS fnptr, GLenum  pname, GLint * params) {
//   (*fnptr)(pname, params);
// }
// void  glowGetPixelTransformParameterfvEXT(PGETPIXELTRANSFORMPARAMETERFVEXT fnptr, GLenum  target, GLenum  pname, GLfloat * params) {
//   (*fnptr)(target, pname, params);
// }
// void  glowGetPixelTransformParameterivEXT(PGETPIXELTRANSFORMPARAMETERIVEXT fnptr, GLenum  target, GLenum  pname, GLint * params) {
//   (*fnptr)(target, pname, params);
// }
// void  glowGetPointerIndexedvEXT(PGETPOINTERINDEXEDVEXT fnptr, GLenum  target, GLuint  index, void ** data) {
//   (*fnptr)(target, index, data);
// }
// void  glowGetPointeri_vEXT(PGETPOINTERI_VEXT fnptr, GLenum  pname, GLuint  index, void ** params) {
//   (*fnptr)(pname, index, params);
// }
// void  glowGetPointerv(PGETPOINTERV fnptr, GLenum  pname, void ** params) {
//   (*fnptr)(pname, params);
// }
// void  glowGetPointervEXT(PGETPOINTERVEXT fnptr, GLenum  pname, void ** params) {
//   (*fnptr)(pname, params);
// }
// void  glowGetPointervKHR(PGETPOINTERVKHR fnptr, GLenum  pname, void ** params) {
//   (*fnptr)(pname, params);
// }
// void  glowGetProgramBinary(PGETPROGRAMBINARY fnptr, GLuint  program, GLsizei  bufSize, GLsizei * length, GLenum * binaryFormat, void * binary) {
//   (*fnptr)(program, bufSize, length, binaryFormat, binary);
// }
// void  glowGetProgramEnvParameterIivNV(PGETPROGRAMENVPARAMETERIIVNV fnptr, GLenum  target, GLuint  index, GLint * params) {
//   (*fnptr)(target, index, params);
// }
// void  glowGetProgramEnvParameterIuivNV(PGETPROGRAMENVPARAMETERIUIVNV fnptr, GLenum  target, GLuint  index, GLuint * params) {
//   (*fnptr)(target, index, params);
// }
// void  glowGetProgramEnvParameterdvARB(PGETPROGRAMENVPARAMETERDVARB fnptr, GLenum  target, GLuint  index, GLdouble * params) {
//   (*fnptr)(target, index, params);
// }
// void  glowGetProgramEnvParameterfvARB(PGETPROGRAMENVPARAMETERFVARB fnptr, GLenum  target, GLuint  index, GLfloat * params) {
//   (*fnptr)(target, index, params);
// }
// void  glowGetProgramInfoLog(PGETPROGRAMINFOLOG fnptr, GLuint  program, GLsizei  bufSize, GLsizei * length, GLchar * infoLog) {
//   (*fnptr)(program, bufSize, length, infoLog);
// }
// void  glowGetProgramInterfaceiv(PGETPROGRAMINTERFACEIV fnptr, GLuint  program, GLenum  programInterface, GLenum  pname, GLint * params) {
//   (*fnptr)(program, programInterface, pname, params);
// }
// void  glowGetProgramLocalParameterIivNV(PGETPROGRAMLOCALPARAMETERIIVNV fnptr, GLenum  target, GLuint  index, GLint * params) {
//   (*fnptr)(target, index, params);
// }
// void  glowGetProgramLocalParameterIuivNV(PGETPROGRAMLOCALPARAMETERIUIVNV fnptr, GLenum  target, GLuint  index, GLuint * params) {
//   (*fnptr)(target, index, params);
// }
// void  glowGetProgramLocalParameterdvARB(PGETPROGRAMLOCALPARAMETERDVARB fnptr, GLenum  target, GLuint  index, GLdouble * params) {
//   (*fnptr)(target, index, params);
// }
// void  glowGetProgramLocalParameterfvARB(PGETPROGRAMLOCALPARAMETERFVARB fnptr, GLenum  target, GLuint  index, GLfloat * params) {
//   (*fnptr)(target, index, params);
// }
// void  glowGetProgramNamedParameterdvNV(PGETPROGRAMNAMEDPARAMETERDVNV fnptr, GLuint  id, GLsizei  len, const GLubyte * name, GLdouble * params) {
//   (*fnptr)(id, len, name, params);
// }
// void  glowGetProgramNamedParameterfvNV(PGETPROGRAMNAMEDPARAMETERFVNV fnptr, GLuint  id, GLsizei  len, const GLubyte * name, GLfloat * params) {
//   (*fnptr)(id, len, name, params);
// }
// void  glowGetProgramParameterdvNV(PGETPROGRAMPARAMETERDVNV fnptr, GLenum  target, GLuint  index, GLenum  pname, GLdouble * params) {
//   (*fnptr)(target, index, pname, params);
// }
// void  glowGetProgramParameterfvNV(PGETPROGRAMPARAMETERFVNV fnptr, GLenum  target, GLuint  index, GLenum  pname, GLfloat * params) {
//   (*fnptr)(target, index, pname, params);
// }
// void  glowGetProgramPipelineInfoLog(PGETPROGRAMPIPELINEINFOLOG fnptr, GLuint  pipeline, GLsizei  bufSize, GLsizei * length, GLchar * infoLog) {
//   (*fnptr)(pipeline, bufSize, length, infoLog);
// }
// void  glowGetProgramPipelineInfoLogEXT(PGETPROGRAMPIPELINEINFOLOGEXT fnptr, GLuint  pipeline, GLsizei  bufSize, GLsizei * length, GLchar * infoLog) {
//   (*fnptr)(pipeline, bufSize, length, infoLog);
// }
// void  glowGetProgramPipelineiv(PGETPROGRAMPIPELINEIV fnptr, GLuint  pipeline, GLenum  pname, GLint * params) {
//   (*fnptr)(pipeline, pname, params);
// }
// void  glowGetProgramPipelineivEXT(PGETPROGRAMPIPELINEIVEXT fnptr, GLuint  pipeline, GLenum  pname, GLint * params) {
//   (*fnptr)(pipeline, pname, params);
// }
// GLuint  glowGetProgramResourceIndex(PGETPROGRAMRESOURCEINDEX fnptr, GLuint  program, GLenum  programInterface, const GLchar * name) {
//   return (*fnptr)(program, programInterface, name);
// }
// GLint  glowGetProgramResourceLocation(PGETPROGRAMRESOURCELOCATION fnptr, GLuint  program, GLenum  programInterface, const GLchar * name) {
//   return (*fnptr)(program, programInterface, name);
// }
// GLint  glowGetProgramResourceLocationIndex(PGETPROGRAMRESOURCELOCATIONINDEX fnptr, GLuint  program, GLenum  programInterface, const GLchar * name) {
//   return (*fnptr)(program, programInterface, name);
// }
// void  glowGetProgramResourceName(PGETPROGRAMRESOURCENAME fnptr, GLuint  program, GLenum  programInterface, GLuint  index, GLsizei  bufSize, GLsizei * length, GLchar * name) {
//   (*fnptr)(program, programInterface, index, bufSize, length, name);
// }
// void  glowGetProgramResourceiv(PGETPROGRAMRESOURCEIV fnptr, GLuint  program, GLenum  programInterface, GLuint  index, GLsizei  propCount, const GLenum * props, GLsizei  bufSize, GLsizei * length, GLint * params) {
//   (*fnptr)(program, programInterface, index, propCount, props, bufSize, length, params);
// }
// void  glowGetProgramStageiv(PGETPROGRAMSTAGEIV fnptr, GLuint  program, GLenum  shadertype, GLenum  pname, GLint * values) {
//   (*fnptr)(program, shadertype, pname, values);
// }
// void  glowGetProgramStringARB(PGETPROGRAMSTRINGARB fnptr, GLenum  target, GLenum  pname, void * string) {
//   (*fnptr)(target, pname, string);
// }
// void  glowGetProgramStringNV(PGETPROGRAMSTRINGNV fnptr, GLuint  id, GLenum  pname, GLubyte * program) {
//   (*fnptr)(id, pname, program);
// }
// void  glowGetProgramSubroutineParameteruivNV(PGETPROGRAMSUBROUTINEPARAMETERUIVNV fnptr, GLenum  target, GLuint  index, GLuint * param) {
//   (*fnptr)(target, index, param);
// }
// void  glowGetProgramiv(PGETPROGRAMIV fnptr, GLuint  program, GLenum  pname, GLint * params) {
//   (*fnptr)(program, pname, params);
// }
// void  glowGetProgramivARB(PGETPROGRAMIVARB fnptr, GLenum  target, GLenum  pname, GLint * params) {
//   (*fnptr)(target, pname, params);
// }
// void  glowGetProgramivNV(PGETPROGRAMIVNV fnptr, GLuint  id, GLenum  pname, GLint * params) {
//   (*fnptr)(id, pname, params);
// }
// void  glowGetQueryIndexediv(PGETQUERYINDEXEDIV fnptr, GLenum  target, GLuint  index, GLenum  pname, GLint * params) {
//   (*fnptr)(target, index, pname, params);
// }
// void  glowGetQueryObjecti64v(PGETQUERYOBJECTI64V fnptr, GLuint  id, GLenum  pname, GLint64 * params) {
//   (*fnptr)(id, pname, params);
// }
// void  glowGetQueryObjecti64vEXT(PGETQUERYOBJECTI64VEXT fnptr, GLuint  id, GLenum  pname, GLint64 * params) {
//   (*fnptr)(id, pname, params);
// }
// void  glowGetQueryObjectiv(PGETQUERYOBJECTIV fnptr, GLuint  id, GLenum  pname, GLint * params) {
//   (*fnptr)(id, pname, params);
// }
// void  glowGetQueryObjectivARB(PGETQUERYOBJECTIVARB fnptr, GLuint  id, GLenum  pname, GLint * params) {
//   (*fnptr)(id, pname, params);
// }
// void  glowGetQueryObjectui64v(PGETQUERYOBJECTUI64V fnptr, GLuint  id, GLenum  pname, GLuint64 * params) {
//   (*fnptr)(id, pname, params);
// }
// void  glowGetQueryObjectui64vEXT(PGETQUERYOBJECTUI64VEXT fnptr, GLuint  id, GLenum  pname, GLuint64 * params) {
//   (*fnptr)(id, pname, params);
// }
// void  glowGetQueryObjectuiv(PGETQUERYOBJECTUIV fnptr, GLuint  id, GLenum  pname, GLuint * params) {
//   (*fnptr)(id, pname, params);
// }
// void  glowGetQueryObjectuivARB(PGETQUERYOBJECTUIVARB fnptr, GLuint  id, GLenum  pname, GLuint * params) {
//   (*fnptr)(id, pname, params);
// }
// void  glowGetQueryiv(PGETQUERYIV fnptr, GLenum  target, GLenum  pname, GLint * params) {
//   (*fnptr)(target, pname, params);
// }
// void  glowGetQueryivARB(PGETQUERYIVARB fnptr, GLenum  target, GLenum  pname, GLint * params) {
//   (*fnptr)(target, pname, params);
// }
// void  glowGetRenderbufferParameteriv(PGETRENDERBUFFERPARAMETERIV fnptr, GLenum  target, GLenum  pname, GLint * params) {
//   (*fnptr)(target, pname, params);
// }
// void  glowGetRenderbufferParameterivEXT(PGETRENDERBUFFERPARAMETERIVEXT fnptr, GLenum  target, GLenum  pname, GLint * params) {
//   (*fnptr)(target, pname, params);
// }
// void  glowGetSamplerParameterIiv(PGETSAMPLERPARAMETERIIV fnptr, GLuint  sampler, GLenum  pname, GLint * params) {
//   (*fnptr)(sampler, pname, params);
// }
// void  glowGetSamplerParameterIuiv(PGETSAMPLERPARAMETERIUIV fnptr, GLuint  sampler, GLenum  pname, GLuint * params) {
//   (*fnptr)(sampler, pname, params);
// }
// void  glowGetSamplerParameterfv(PGETSAMPLERPARAMETERFV fnptr, GLuint  sampler, GLenum  pname, GLfloat * params) {
//   (*fnptr)(sampler, pname, params);
// }
// void  glowGetSamplerParameteriv(PGETSAMPLERPARAMETERIV fnptr, GLuint  sampler, GLenum  pname, GLint * params) {
//   (*fnptr)(sampler, pname, params);
// }
// void  glowGetSeparableFilterEXT(PGETSEPARABLEFILTEREXT fnptr, GLenum  target, GLenum  format, GLenum  type, void * row, void * column, void * span) {
//   (*fnptr)(target, format, type, row, column, span);
// }
// void  glowGetShaderInfoLog(PGETSHADERINFOLOG fnptr, GLuint  shader, GLsizei  bufSize, GLsizei * length, GLchar * infoLog) {
//   (*fnptr)(shader, bufSize, length, infoLog);
// }
// void  glowGetShaderPrecisionFormat(PGETSHADERPRECISIONFORMAT fnptr, GLenum  shadertype, GLenum  precisiontype, GLint * range, GLint * precision) {
//   (*fnptr)(shadertype, precisiontype, range, precision);
// }
// void  glowGetShaderSource(PGETSHADERSOURCE fnptr, GLuint  shader, GLsizei  bufSize, GLsizei * length, GLchar * source) {
//   (*fnptr)(shader, bufSize, length, source);
// }
// void  glowGetShaderSourceARB(PGETSHADERSOURCEARB fnptr, GLhandleARB  obj, GLsizei  maxLength, GLsizei * length, GLcharARB * source) {
//   (*fnptr)(obj, maxLength, length, source);
// }
// void  glowGetShaderiv(PGETSHADERIV fnptr, GLuint  shader, GLenum  pname, GLint * params) {
//   (*fnptr)(shader, pname, params);
// }
// void  glowGetSharpenTexFuncSGIS(PGETSHARPENTEXFUNCSGIS fnptr, GLenum  target, GLfloat * points) {
//   (*fnptr)(target, points);
// }
// const GLubyte * glowGetString(PGETSTRING fnptr, GLenum  name) {
//   return (*fnptr)(name);
// }
// const GLubyte * glowGetStringi(PGETSTRINGI fnptr, GLenum  name, GLuint  index) {
//   return (*fnptr)(name, index);
// }
// GLuint  glowGetSubroutineIndex(PGETSUBROUTINEINDEX fnptr, GLuint  program, GLenum  shadertype, const GLchar * name) {
//   return (*fnptr)(program, shadertype, name);
// }
// GLint  glowGetSubroutineUniformLocation(PGETSUBROUTINEUNIFORMLOCATION fnptr, GLuint  program, GLenum  shadertype, const GLchar * name) {
//   return (*fnptr)(program, shadertype, name);
// }
// void  glowGetSynciv(PGETSYNCIV fnptr, GLsync  sync, GLenum  pname, GLsizei  bufSize, GLsizei * length, GLint * values) {
//   (*fnptr)(sync, pname, bufSize, length, values);
// }
// void  glowGetTexBumpParameterfvATI(PGETTEXBUMPPARAMETERFVATI fnptr, GLenum  pname, GLfloat * param) {
//   (*fnptr)(pname, param);
// }
// void  glowGetTexBumpParameterivATI(PGETTEXBUMPPARAMETERIVATI fnptr, GLenum  pname, GLint * param) {
//   (*fnptr)(pname, param);
// }
// void  glowGetTexEnvxvOES(PGETTEXENVXVOES fnptr, GLenum  target, GLenum  pname, GLfixed * params) {
//   (*fnptr)(target, pname, params);
// }
// void  glowGetTexFilterFuncSGIS(PGETTEXFILTERFUNCSGIS fnptr, GLenum  target, GLenum  filter, GLfloat * weights) {
//   (*fnptr)(target, filter, weights);
// }
// void  glowGetTexGenxvOES(PGETTEXGENXVOES fnptr, GLenum  coord, GLenum  pname, GLfixed * params) {
//   (*fnptr)(coord, pname, params);
// }
// void  glowGetTexImage(PGETTEXIMAGE fnptr, GLenum  target, GLint  level, GLenum  format, GLenum  type, void * pixels) {
//   (*fnptr)(target, level, format, type, pixels);
// }
// void  glowGetTexLevelParameterfv(PGETTEXLEVELPARAMETERFV fnptr, GLenum  target, GLint  level, GLenum  pname, GLfloat * params) {
//   (*fnptr)(target, level, pname, params);
// }
// void  glowGetTexLevelParameteriv(PGETTEXLEVELPARAMETERIV fnptr, GLenum  target, GLint  level, GLenum  pname, GLint * params) {
//   (*fnptr)(target, level, pname, params);
// }
// void  glowGetTexLevelParameterxvOES(PGETTEXLEVELPARAMETERXVOES fnptr, GLenum  target, GLint  level, GLenum  pname, GLfixed * params) {
//   (*fnptr)(target, level, pname, params);
// }
// void  glowGetTexParameterIiv(PGETTEXPARAMETERIIV fnptr, GLenum  target, GLenum  pname, GLint * params) {
//   (*fnptr)(target, pname, params);
// }
// void  glowGetTexParameterIivEXT(PGETTEXPARAMETERIIVEXT fnptr, GLenum  target, GLenum  pname, GLint * params) {
//   (*fnptr)(target, pname, params);
// }
// void  glowGetTexParameterIuiv(PGETTEXPARAMETERIUIV fnptr, GLenum  target, GLenum  pname, GLuint * params) {
//   (*fnptr)(target, pname, params);
// }
// void  glowGetTexParameterIuivEXT(PGETTEXPARAMETERIUIVEXT fnptr, GLenum  target, GLenum  pname, GLuint * params) {
//   (*fnptr)(target, pname, params);
// }
// void  glowGetTexParameterPointervAPPLE(PGETTEXPARAMETERPOINTERVAPPLE fnptr, GLenum  target, GLenum  pname, void ** params) {
//   (*fnptr)(target, pname, params);
// }
// void  glowGetTexParameterfv(PGETTEXPARAMETERFV fnptr, GLenum  target, GLenum  pname, GLfloat * params) {
//   (*fnptr)(target, pname, params);
// }
// void  glowGetTexParameteriv(PGETTEXPARAMETERIV fnptr, GLenum  target, GLenum  pname, GLint * params) {
//   (*fnptr)(target, pname, params);
// }
// void  glowGetTexParameterxvOES(PGETTEXPARAMETERXVOES fnptr, GLenum  target, GLenum  pname, GLfixed * params) {
//   (*fnptr)(target, pname, params);
// }
// GLuint64  glowGetTextureHandleARB(PGETTEXTUREHANDLEARB fnptr, GLuint  texture) {
//   return (*fnptr)(texture);
// }
// GLuint64  glowGetTextureHandleNV(PGETTEXTUREHANDLENV fnptr, GLuint  texture) {
//   return (*fnptr)(texture);
// }
// void  glowGetTextureImageEXT(PGETTEXTUREIMAGEEXT fnptr, GLuint  texture, GLenum  target, GLint  level, GLenum  format, GLenum  type, void * pixels) {
//   (*fnptr)(texture, target, level, format, type, pixels);
// }
// void  glowGetTextureLevelParameterfvEXT(PGETTEXTURELEVELPARAMETERFVEXT fnptr, GLuint  texture, GLenum  target, GLint  level, GLenum  pname, GLfloat * params) {
//   (*fnptr)(texture, target, level, pname, params);
// }
// void  glowGetTextureLevelParameterivEXT(PGETTEXTURELEVELPARAMETERIVEXT fnptr, GLuint  texture, GLenum  target, GLint  level, GLenum  pname, GLint * params) {
//   (*fnptr)(texture, target, level, pname, params);
// }
// void  glowGetTextureParameterIivEXT(PGETTEXTUREPARAMETERIIVEXT fnptr, GLuint  texture, GLenum  target, GLenum  pname, GLint * params) {
//   (*fnptr)(texture, target, pname, params);
// }
// void  glowGetTextureParameterIuivEXT(PGETTEXTUREPARAMETERIUIVEXT fnptr, GLuint  texture, GLenum  target, GLenum  pname, GLuint * params) {
//   (*fnptr)(texture, target, pname, params);
// }
// void  glowGetTextureParameterfvEXT(PGETTEXTUREPARAMETERFVEXT fnptr, GLuint  texture, GLenum  target, GLenum  pname, GLfloat * params) {
//   (*fnptr)(texture, target, pname, params);
// }
// void  glowGetTextureParameterivEXT(PGETTEXTUREPARAMETERIVEXT fnptr, GLuint  texture, GLenum  target, GLenum  pname, GLint * params) {
//   (*fnptr)(texture, target, pname, params);
// }
// GLuint64  glowGetTextureSamplerHandleARB(PGETTEXTURESAMPLERHANDLEARB fnptr, GLuint  texture, GLuint  sampler) {
//   return (*fnptr)(texture, sampler);
// }
// GLuint64  glowGetTextureSamplerHandleNV(PGETTEXTURESAMPLERHANDLENV fnptr, GLuint  texture, GLuint  sampler) {
//   return (*fnptr)(texture, sampler);
// }
// void  glowGetTrackMatrixivNV(PGETTRACKMATRIXIVNV fnptr, GLenum  target, GLuint  address, GLenum  pname, GLint * params) {
//   (*fnptr)(target, address, pname, params);
// }
// void  glowGetTransformFeedbackVarying(PGETTRANSFORMFEEDBACKVARYING fnptr, GLuint  program, GLuint  index, GLsizei  bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name) {
//   (*fnptr)(program, index, bufSize, length, size, type, name);
// }
// void  glowGetTransformFeedbackVaryingEXT(PGETTRANSFORMFEEDBACKVARYINGEXT fnptr, GLuint  program, GLuint  index, GLsizei  bufSize, GLsizei * length, GLsizei * size, GLenum * type, GLchar * name) {
//   (*fnptr)(program, index, bufSize, length, size, type, name);
// }
// void  glowGetTransformFeedbackVaryingNV(PGETTRANSFORMFEEDBACKVARYINGNV fnptr, GLuint  program, GLuint  index, GLint * location) {
//   (*fnptr)(program, index, location);
// }
// GLuint  glowGetUniformBlockIndex(PGETUNIFORMBLOCKINDEX fnptr, GLuint  program, const GLchar * uniformBlockName) {
//   return (*fnptr)(program, uniformBlockName);
// }
// GLint  glowGetUniformBufferSizeEXT(PGETUNIFORMBUFFERSIZEEXT fnptr, GLuint  program, GLint  location) {
//   return (*fnptr)(program, location);
// }
// void  glowGetUniformIndices(PGETUNIFORMINDICES fnptr, GLuint  program, GLsizei  uniformCount, const GLchar *const* uniformNames, GLuint * uniformIndices) {
//   (*fnptr)(program, uniformCount, uniformNames, uniformIndices);
// }
// GLint  glowGetUniformLocation(PGETUNIFORMLOCATION fnptr, GLuint  program, const GLchar * name) {
//   return (*fnptr)(program, name);
// }
// GLint  glowGetUniformLocationARB(PGETUNIFORMLOCATIONARB fnptr, GLhandleARB  programObj, const GLcharARB * name) {
//   return (*fnptr)(programObj, name);
// }
// GLintptr  glowGetUniformOffsetEXT(PGETUNIFORMOFFSETEXT fnptr, GLuint  program, GLint  location) {
//   return (*fnptr)(program, location);
// }
// void  glowGetUniformSubroutineuiv(PGETUNIFORMSUBROUTINEUIV fnptr, GLenum  shadertype, GLint  location, GLuint * params) {
//   (*fnptr)(shadertype, location, params);
// }
// void  glowGetUniformdv(PGETUNIFORMDV fnptr, GLuint  program, GLint  location, GLdouble * params) {
//   (*fnptr)(program, location, params);
// }
// void  glowGetUniformfv(PGETUNIFORMFV fnptr, GLuint  program, GLint  location, GLfloat * params) {
//   (*fnptr)(program, location, params);
// }
// void  glowGetUniformfvARB(PGETUNIFORMFVARB fnptr, GLhandleARB  programObj, GLint  location, GLfloat * params) {
//   (*fnptr)(programObj, location, params);
// }
// void  glowGetUniformi64vNV(PGETUNIFORMI64VNV fnptr, GLuint  program, GLint  location, GLint64EXT * params) {
//   (*fnptr)(program, location, params);
// }
// void  glowGetUniformiv(PGETUNIFORMIV fnptr, GLuint  program, GLint  location, GLint * params) {
//   (*fnptr)(program, location, params);
// }
// void  glowGetUniformivARB(PGETUNIFORMIVARB fnptr, GLhandleARB  programObj, GLint  location, GLint * params) {
//   (*fnptr)(programObj, location, params);
// }
// void  glowGetUniformui64vNV(PGETUNIFORMUI64VNV fnptr, GLuint  program, GLint  location, GLuint64EXT * params) {
//   (*fnptr)(program, location, params);
// }
// void  glowGetUniformuiv(PGETUNIFORMUIV fnptr, GLuint  program, GLint  location, GLuint * params) {
//   (*fnptr)(program, location, params);
// }
// void  glowGetUniformuivEXT(PGETUNIFORMUIVEXT fnptr, GLuint  program, GLint  location, GLuint * params) {
//   (*fnptr)(program, location, params);
// }
// void  glowGetVariantArrayObjectfvATI(PGETVARIANTARRAYOBJECTFVATI fnptr, GLuint  id, GLenum  pname, GLfloat * params) {
//   (*fnptr)(id, pname, params);
// }
// void  glowGetVariantArrayObjectivATI(PGETVARIANTARRAYOBJECTIVATI fnptr, GLuint  id, GLenum  pname, GLint * params) {
//   (*fnptr)(id, pname, params);
// }
// void  glowGetVariantBooleanvEXT(PGETVARIANTBOOLEANVEXT fnptr, GLuint  id, GLenum  value, GLboolean * data) {
//   (*fnptr)(id, value, data);
// }
// void  glowGetVariantFloatvEXT(PGETVARIANTFLOATVEXT fnptr, GLuint  id, GLenum  value, GLfloat * data) {
//   (*fnptr)(id, value, data);
// }
// void  glowGetVariantIntegervEXT(PGETVARIANTINTEGERVEXT fnptr, GLuint  id, GLenum  value, GLint * data) {
//   (*fnptr)(id, value, data);
// }
// void  glowGetVariantPointervEXT(PGETVARIANTPOINTERVEXT fnptr, GLuint  id, GLenum  value, void ** data) {
//   (*fnptr)(id, value, data);
// }
// GLint  glowGetVaryingLocationNV(PGETVARYINGLOCATIONNV fnptr, GLuint  program, const GLchar * name) {
//   return (*fnptr)(program, name);
// }
// void  glowGetVertexArrayIntegeri_vEXT(PGETVERTEXARRAYINTEGERI_VEXT fnptr, GLuint  vaobj, GLuint  index, GLenum  pname, GLint * param) {
//   (*fnptr)(vaobj, index, pname, param);
// }
// void  glowGetVertexArrayIntegervEXT(PGETVERTEXARRAYINTEGERVEXT fnptr, GLuint  vaobj, GLenum  pname, GLint * param) {
//   (*fnptr)(vaobj, pname, param);
// }
// void  glowGetVertexArrayPointeri_vEXT(PGETVERTEXARRAYPOINTERI_VEXT fnptr, GLuint  vaobj, GLuint  index, GLenum  pname, void ** param) {
//   (*fnptr)(vaobj, index, pname, param);
// }
// void  glowGetVertexArrayPointervEXT(PGETVERTEXARRAYPOINTERVEXT fnptr, GLuint  vaobj, GLenum  pname, void ** param) {
//   (*fnptr)(vaobj, pname, param);
// }
// void  glowGetVertexAttribArrayObjectfvATI(PGETVERTEXATTRIBARRAYOBJECTFVATI fnptr, GLuint  index, GLenum  pname, GLfloat * params) {
//   (*fnptr)(index, pname, params);
// }
// void  glowGetVertexAttribArrayObjectivATI(PGETVERTEXATTRIBARRAYOBJECTIVATI fnptr, GLuint  index, GLenum  pname, GLint * params) {
//   (*fnptr)(index, pname, params);
// }
// void  glowGetVertexAttribIiv(PGETVERTEXATTRIBIIV fnptr, GLuint  index, GLenum  pname, GLint * params) {
//   (*fnptr)(index, pname, params);
// }
// void  glowGetVertexAttribIivEXT(PGETVERTEXATTRIBIIVEXT fnptr, GLuint  index, GLenum  pname, GLint * params) {
//   (*fnptr)(index, pname, params);
// }
// void  glowGetVertexAttribIuiv(PGETVERTEXATTRIBIUIV fnptr, GLuint  index, GLenum  pname, GLuint * params) {
//   (*fnptr)(index, pname, params);
// }
// void  glowGetVertexAttribIuivEXT(PGETVERTEXATTRIBIUIVEXT fnptr, GLuint  index, GLenum  pname, GLuint * params) {
//   (*fnptr)(index, pname, params);
// }
// void  glowGetVertexAttribLdv(PGETVERTEXATTRIBLDV fnptr, GLuint  index, GLenum  pname, GLdouble * params) {
//   (*fnptr)(index, pname, params);
// }
// void  glowGetVertexAttribLdvEXT(PGETVERTEXATTRIBLDVEXT fnptr, GLuint  index, GLenum  pname, GLdouble * params) {
//   (*fnptr)(index, pname, params);
// }
// void  glowGetVertexAttribLi64vNV(PGETVERTEXATTRIBLI64VNV fnptr, GLuint  index, GLenum  pname, GLint64EXT * params) {
//   (*fnptr)(index, pname, params);
// }
// void  glowGetVertexAttribLui64vARB(PGETVERTEXATTRIBLUI64VARB fnptr, GLuint  index, GLenum  pname, GLuint64EXT * params) {
//   (*fnptr)(index, pname, params);
// }
// void  glowGetVertexAttribLui64vNV(PGETVERTEXATTRIBLUI64VNV fnptr, GLuint  index, GLenum  pname, GLuint64EXT * params) {
//   (*fnptr)(index, pname, params);
// }
// void  glowGetVertexAttribPointerv(PGETVERTEXATTRIBPOINTERV fnptr, GLuint  index, GLenum  pname, void ** pointer) {
//   (*fnptr)(index, pname, pointer);
// }
// void  glowGetVertexAttribPointervARB(PGETVERTEXATTRIBPOINTERVARB fnptr, GLuint  index, GLenum  pname, void ** pointer) {
//   (*fnptr)(index, pname, pointer);
// }
// void  glowGetVertexAttribPointervNV(PGETVERTEXATTRIBPOINTERVNV fnptr, GLuint  index, GLenum  pname, void ** pointer) {
//   (*fnptr)(index, pname, pointer);
// }
// void  glowGetVertexAttribdv(PGETVERTEXATTRIBDV fnptr, GLuint  index, GLenum  pname, GLdouble * params) {
//   (*fnptr)(index, pname, params);
// }
// void  glowGetVertexAttribdvARB(PGETVERTEXATTRIBDVARB fnptr, GLuint  index, GLenum  pname, GLdouble * params) {
//   (*fnptr)(index, pname, params);
// }
// void  glowGetVertexAttribdvNV(PGETVERTEXATTRIBDVNV fnptr, GLuint  index, GLenum  pname, GLdouble * params) {
//   (*fnptr)(index, pname, params);
// }
// void  glowGetVertexAttribfv(PGETVERTEXATTRIBFV fnptr, GLuint  index, GLenum  pname, GLfloat * params) {
//   (*fnptr)(index, pname, params);
// }
// void  glowGetVertexAttribfvARB(PGETVERTEXATTRIBFVARB fnptr, GLuint  index, GLenum  pname, GLfloat * params) {
//   (*fnptr)(index, pname, params);
// }
// void  glowGetVertexAttribfvNV(PGETVERTEXATTRIBFVNV fnptr, GLuint  index, GLenum  pname, GLfloat * params) {
//   (*fnptr)(index, pname, params);
// }
// void  glowGetVertexAttribiv(PGETVERTEXATTRIBIV fnptr, GLuint  index, GLenum  pname, GLint * params) {
//   (*fnptr)(index, pname, params);
// }
// void  glowGetVertexAttribivARB(PGETVERTEXATTRIBIVARB fnptr, GLuint  index, GLenum  pname, GLint * params) {
//   (*fnptr)(index, pname, params);
// }
// void  glowGetVertexAttribivNV(PGETVERTEXATTRIBIVNV fnptr, GLuint  index, GLenum  pname, GLint * params) {
//   (*fnptr)(index, pname, params);
// }
// void  glowGetVideoCaptureStreamdvNV(PGETVIDEOCAPTURESTREAMDVNV fnptr, GLuint  video_capture_slot, GLuint  stream, GLenum  pname, GLdouble * params) {
//   (*fnptr)(video_capture_slot, stream, pname, params);
// }
// void  glowGetVideoCaptureStreamfvNV(PGETVIDEOCAPTURESTREAMFVNV fnptr, GLuint  video_capture_slot, GLuint  stream, GLenum  pname, GLfloat * params) {
//   (*fnptr)(video_capture_slot, stream, pname, params);
// }
// void  glowGetVideoCaptureStreamivNV(PGETVIDEOCAPTURESTREAMIVNV fnptr, GLuint  video_capture_slot, GLuint  stream, GLenum  pname, GLint * params) {
//   (*fnptr)(video_capture_slot, stream, pname, params);
// }
// void  glowGetVideoCaptureivNV(PGETVIDEOCAPTUREIVNV fnptr, GLuint  video_capture_slot, GLenum  pname, GLint * params) {
//   (*fnptr)(video_capture_slot, pname, params);
// }
// void  glowGetVideoi64vNV(PGETVIDEOI64VNV fnptr, GLuint  video_slot, GLenum  pname, GLint64EXT * params) {
//   (*fnptr)(video_slot, pname, params);
// }
// void  glowGetVideoivNV(PGETVIDEOIVNV fnptr, GLuint  video_slot, GLenum  pname, GLint * params) {
//   (*fnptr)(video_slot, pname, params);
// }
// void  glowGetVideoui64vNV(PGETVIDEOUI64VNV fnptr, GLuint  video_slot, GLenum  pname, GLuint64EXT * params) {
//   (*fnptr)(video_slot, pname, params);
// }
// void  glowGetVideouivNV(PGETVIDEOUIVNV fnptr, GLuint  video_slot, GLenum  pname, GLuint * params) {
//   (*fnptr)(video_slot, pname, params);
// }
// void  glowGetnCompressedTexImageARB(PGETNCOMPRESSEDTEXIMAGEARB fnptr, GLenum  target, GLint  lod, GLsizei  bufSize, void * img) {
//   (*fnptr)(target, lod, bufSize, img);
// }
// void  glowGetnTexImageARB(PGETNTEXIMAGEARB fnptr, GLenum  target, GLint  level, GLenum  format, GLenum  type, GLsizei  bufSize, void * img) {
//   (*fnptr)(target, level, format, type, bufSize, img);
// }
// void  glowGetnUniformdvARB(PGETNUNIFORMDVARB fnptr, GLuint  program, GLint  location, GLsizei  bufSize, GLdouble * params) {
//   (*fnptr)(program, location, bufSize, params);
// }
// void  glowGetnUniformfvARB(PGETNUNIFORMFVARB fnptr, GLuint  program, GLint  location, GLsizei  bufSize, GLfloat * params) {
//   (*fnptr)(program, location, bufSize, params);
// }
// void  glowGetnUniformivARB(PGETNUNIFORMIVARB fnptr, GLuint  program, GLint  location, GLsizei  bufSize, GLint * params) {
//   (*fnptr)(program, location, bufSize, params);
// }
// void  glowGetnUniformuivARB(PGETNUNIFORMUIVARB fnptr, GLuint  program, GLint  location, GLsizei  bufSize, GLuint * params) {
//   (*fnptr)(program, location, bufSize, params);
// }
// void  glowGlobalAlphaFactorbSUN(PGLOBALALPHAFACTORBSUN fnptr, GLbyte  factor) {
//   (*fnptr)(factor);
// }
// void  glowGlobalAlphaFactordSUN(PGLOBALALPHAFACTORDSUN fnptr, GLdouble  factor) {
//   (*fnptr)(factor);
// }
// void  glowGlobalAlphaFactorfSUN(PGLOBALALPHAFACTORFSUN fnptr, GLfloat  factor) {
//   (*fnptr)(factor);
// }
// void  glowGlobalAlphaFactoriSUN(PGLOBALALPHAFACTORISUN fnptr, GLint  factor) {
//   (*fnptr)(factor);
// }
// void  glowGlobalAlphaFactorsSUN(PGLOBALALPHAFACTORSSUN fnptr, GLshort  factor) {
//   (*fnptr)(factor);
// }
// void  glowGlobalAlphaFactorubSUN(PGLOBALALPHAFACTORUBSUN fnptr, GLubyte  factor) {
//   (*fnptr)(factor);
// }
// void  glowGlobalAlphaFactoruiSUN(PGLOBALALPHAFACTORUISUN fnptr, GLuint  factor) {
//   (*fnptr)(factor);
// }
// void  glowGlobalAlphaFactorusSUN(PGLOBALALPHAFACTORUSSUN fnptr, GLushort  factor) {
//   (*fnptr)(factor);
// }
// void  glowHint(PHINT fnptr, GLenum  target, GLenum  mode) {
//   (*fnptr)(target, mode);
// }
// void  glowHintPGI(PHINTPGI fnptr, GLenum  target, GLint  mode) {
//   (*fnptr)(target, mode);
// }
// void  glowHistogramEXT(PHISTOGRAMEXT fnptr, GLenum  target, GLsizei  width, GLenum  internalformat, GLboolean  sink) {
//   (*fnptr)(target, width, internalformat, sink);
// }
// void  glowIglooInterfaceSGIX(PIGLOOINTERFACESGIX fnptr, GLenum  pname, const void * params) {
//   (*fnptr)(pname, params);
// }
// void  glowImageTransformParameterfHP(PIMAGETRANSFORMPARAMETERFHP fnptr, GLenum  target, GLenum  pname, GLfloat  param) {
//   (*fnptr)(target, pname, param);
// }
// void  glowImageTransformParameterfvHP(PIMAGETRANSFORMPARAMETERFVHP fnptr, GLenum  target, GLenum  pname, const GLfloat * params) {
//   (*fnptr)(target, pname, params);
// }
// void  glowImageTransformParameteriHP(PIMAGETRANSFORMPARAMETERIHP fnptr, GLenum  target, GLenum  pname, GLint  param) {
//   (*fnptr)(target, pname, param);
// }
// void  glowImageTransformParameterivHP(PIMAGETRANSFORMPARAMETERIVHP fnptr, GLenum  target, GLenum  pname, const GLint * params) {
//   (*fnptr)(target, pname, params);
// }
// GLsync  glowImportSyncEXT(PIMPORTSYNCEXT fnptr, GLenum  external_sync_type, GLintptr  external_sync, GLbitfield  flags) {
//   return (*fnptr)(external_sync_type, external_sync, flags);
// }
// void  glowIndexFormatNV(PINDEXFORMATNV fnptr, GLenum  type, GLsizei  stride) {
//   (*fnptr)(type, stride);
// }
// void  glowIndexFuncEXT(PINDEXFUNCEXT fnptr, GLenum  func, GLclampf  ref) {
//   (*fnptr)(func, ref);
// }
// void  glowIndexMaterialEXT(PINDEXMATERIALEXT fnptr, GLenum  face, GLenum  mode) {
//   (*fnptr)(face, mode);
// }
// void  glowIndexPointerEXT(PINDEXPOINTEREXT fnptr, GLenum  type, GLsizei  stride, GLsizei  count, const void * pointer) {
//   (*fnptr)(type, stride, count, pointer);
// }
// void  glowIndexPointerListIBM(PINDEXPOINTERLISTIBM fnptr, GLenum  type, GLint  stride, const void ** pointer, GLint  ptrstride) {
//   (*fnptr)(type, stride, pointer, ptrstride);
// }
// void  glowIndexxOES(PINDEXXOES fnptr, GLfixed  component) {
//   (*fnptr)(component);
// }
// void  glowIndexxvOES(PINDEXXVOES fnptr, const GLfixed * component) {
//   (*fnptr)(component);
// }
// void  glowInsertComponentEXT(PINSERTCOMPONENTEXT fnptr, GLuint  res, GLuint  src, GLuint  num) {
//   (*fnptr)(res, src, num);
// }
// void  glowInsertEventMarkerEXT(PINSERTEVENTMARKEREXT fnptr, GLsizei  length, const GLchar * marker) {
//   (*fnptr)(length, marker);
// }
// void  glowInstrumentsBufferSGIX(PINSTRUMENTSBUFFERSGIX fnptr, GLsizei  size, GLint * buffer) {
//   (*fnptr)(size, buffer);
// }
// void  glowInterpolatePathsNV(PINTERPOLATEPATHSNV fnptr, GLuint  resultPath, GLuint  pathA, GLuint  pathB, GLfloat  weight) {
//   (*fnptr)(resultPath, pathA, pathB, weight);
// }
// void  glowInvalidateBufferData(PINVALIDATEBUFFERDATA fnptr, GLuint  buffer) {
//   (*fnptr)(buffer);
// }
// void  glowInvalidateBufferSubData(PINVALIDATEBUFFERSUBDATA fnptr, GLuint  buffer, GLintptr  offset, GLsizeiptr  length) {
//   (*fnptr)(buffer, offset, length);
// }
// void  glowInvalidateFramebuffer(PINVALIDATEFRAMEBUFFER fnptr, GLenum  target, GLsizei  numAttachments, const GLenum * attachments) {
//   (*fnptr)(target, numAttachments, attachments);
// }
// void  glowInvalidateSubFramebuffer(PINVALIDATESUBFRAMEBUFFER fnptr, GLenum  target, GLsizei  numAttachments, const GLenum * attachments, GLint  x, GLint  y, GLsizei  width, GLsizei  height) {
//   (*fnptr)(target, numAttachments, attachments, x, y, width, height);
// }
// void  glowInvalidateTexImage(PINVALIDATETEXIMAGE fnptr, GLuint  texture, GLint  level) {
//   (*fnptr)(texture, level);
// }
// void  glowInvalidateTexSubImage(PINVALIDATETEXSUBIMAGE fnptr, GLuint  texture, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLsizei  width, GLsizei  height, GLsizei  depth) {
//   (*fnptr)(texture, level, xoffset, yoffset, zoffset, width, height, depth);
// }
// GLboolean  glowIsAsyncMarkerSGIX(PISASYNCMARKERSGIX fnptr, GLuint  marker) {
//   return (*fnptr)(marker);
// }
// GLboolean  glowIsBuffer(PISBUFFER fnptr, GLuint  buffer) {
//   return (*fnptr)(buffer);
// }
// GLboolean  glowIsBufferARB(PISBUFFERARB fnptr, GLuint  buffer) {
//   return (*fnptr)(buffer);
// }
// GLboolean  glowIsBufferResidentNV(PISBUFFERRESIDENTNV fnptr, GLenum  target) {
//   return (*fnptr)(target);
// }
// GLboolean  glowIsEnabled(PISENABLED fnptr, GLenum  cap) {
//   return (*fnptr)(cap);
// }
// GLboolean  glowIsEnabledIndexedEXT(PISENABLEDINDEXEDEXT fnptr, GLenum  target, GLuint  index) {
//   return (*fnptr)(target, index);
// }
// GLboolean  glowIsEnabledi(PISENABLEDI fnptr, GLenum  target, GLuint  index) {
//   return (*fnptr)(target, index);
// }
// GLboolean  glowIsFenceAPPLE(PISFENCEAPPLE fnptr, GLuint  fence) {
//   return (*fnptr)(fence);
// }
// GLboolean  glowIsFenceNV(PISFENCENV fnptr, GLuint  fence) {
//   return (*fnptr)(fence);
// }
// GLboolean  glowIsFramebuffer(PISFRAMEBUFFER fnptr, GLuint  framebuffer) {
//   return (*fnptr)(framebuffer);
// }
// GLboolean  glowIsFramebufferEXT(PISFRAMEBUFFEREXT fnptr, GLuint  framebuffer) {
//   return (*fnptr)(framebuffer);
// }
// GLboolean  glowIsImageHandleResidentARB(PISIMAGEHANDLERESIDENTARB fnptr, GLuint64  handle) {
//   return (*fnptr)(handle);
// }
// GLboolean  glowIsImageHandleResidentNV(PISIMAGEHANDLERESIDENTNV fnptr, GLuint64  handle) {
//   return (*fnptr)(handle);
// }
// GLboolean  glowIsNameAMD(PISNAMEAMD fnptr, GLenum  identifier, GLuint  name) {
//   return (*fnptr)(identifier, name);
// }
// GLboolean  glowIsNamedBufferResidentNV(PISNAMEDBUFFERRESIDENTNV fnptr, GLuint  buffer) {
//   return (*fnptr)(buffer);
// }
// GLboolean  glowIsNamedStringARB(PISNAMEDSTRINGARB fnptr, GLint  namelen, const GLchar * name) {
//   return (*fnptr)(namelen, name);
// }
// GLboolean  glowIsObjectBufferATI(PISOBJECTBUFFERATI fnptr, GLuint  buffer) {
//   return (*fnptr)(buffer);
// }
// GLboolean  glowIsOcclusionQueryNV(PISOCCLUSIONQUERYNV fnptr, GLuint  id) {
//   return (*fnptr)(id);
// }
// GLboolean  glowIsPathNV(PISPATHNV fnptr, GLuint  path) {
//   return (*fnptr)(path);
// }
// GLboolean  glowIsPointInFillPathNV(PISPOINTINFILLPATHNV fnptr, GLuint  path, GLuint  mask, GLfloat  x, GLfloat  y) {
//   return (*fnptr)(path, mask, x, y);
// }
// GLboolean  glowIsPointInStrokePathNV(PISPOINTINSTROKEPATHNV fnptr, GLuint  path, GLfloat  x, GLfloat  y) {
//   return (*fnptr)(path, x, y);
// }
// GLboolean  glowIsProgram(PISPROGRAM fnptr, GLuint  program) {
//   return (*fnptr)(program);
// }
// GLboolean  glowIsProgramARB(PISPROGRAMARB fnptr, GLuint  program) {
//   return (*fnptr)(program);
// }
// GLboolean  glowIsProgramNV(PISPROGRAMNV fnptr, GLuint  id) {
//   return (*fnptr)(id);
// }
// GLboolean  glowIsProgramPipeline(PISPROGRAMPIPELINE fnptr, GLuint  pipeline) {
//   return (*fnptr)(pipeline);
// }
// GLboolean  glowIsProgramPipelineEXT(PISPROGRAMPIPELINEEXT fnptr, GLuint  pipeline) {
//   return (*fnptr)(pipeline);
// }
// GLboolean  glowIsQuery(PISQUERY fnptr, GLuint  id) {
//   return (*fnptr)(id);
// }
// GLboolean  glowIsQueryARB(PISQUERYARB fnptr, GLuint  id) {
//   return (*fnptr)(id);
// }
// GLboolean  glowIsRenderbuffer(PISRENDERBUFFER fnptr, GLuint  renderbuffer) {
//   return (*fnptr)(renderbuffer);
// }
// GLboolean  glowIsRenderbufferEXT(PISRENDERBUFFEREXT fnptr, GLuint  renderbuffer) {
//   return (*fnptr)(renderbuffer);
// }
// GLboolean  glowIsSampler(PISSAMPLER fnptr, GLuint  sampler) {
//   return (*fnptr)(sampler);
// }
// GLboolean  glowIsShader(PISSHADER fnptr, GLuint  shader) {
//   return (*fnptr)(shader);
// }
// GLboolean  glowIsSync(PISSYNC fnptr, GLsync  sync) {
//   return (*fnptr)(sync);
// }
// GLboolean  glowIsTexture(PISTEXTURE fnptr, GLuint  texture) {
//   return (*fnptr)(texture);
// }
// GLboolean  glowIsTextureEXT(PISTEXTUREEXT fnptr, GLuint  texture) {
//   return (*fnptr)(texture);
// }
// GLboolean  glowIsTextureHandleResidentARB(PISTEXTUREHANDLERESIDENTARB fnptr, GLuint64  handle) {
//   return (*fnptr)(handle);
// }
// GLboolean  glowIsTextureHandleResidentNV(PISTEXTUREHANDLERESIDENTNV fnptr, GLuint64  handle) {
//   return (*fnptr)(handle);
// }
// GLboolean  glowIsTransformFeedback(PISTRANSFORMFEEDBACK fnptr, GLuint  id) {
//   return (*fnptr)(id);
// }
// GLboolean  glowIsTransformFeedbackNV(PISTRANSFORMFEEDBACKNV fnptr, GLuint  id) {
//   return (*fnptr)(id);
// }
// GLboolean  glowIsVariantEnabledEXT(PISVARIANTENABLEDEXT fnptr, GLuint  id, GLenum  cap) {
//   return (*fnptr)(id, cap);
// }
// GLboolean  glowIsVertexArray(PISVERTEXARRAY fnptr, GLuint  array) {
//   return (*fnptr)(array);
// }
// GLboolean  glowIsVertexArrayAPPLE(PISVERTEXARRAYAPPLE fnptr, GLuint  array) {
//   return (*fnptr)(array);
// }
// GLboolean  glowIsVertexAttribEnabledAPPLE(PISVERTEXATTRIBENABLEDAPPLE fnptr, GLuint  index, GLenum  pname) {
//   return (*fnptr)(index, pname);
// }
// void  glowLabelObjectEXT(PLABELOBJECTEXT fnptr, GLenum  type, GLuint  object, GLsizei  length, const GLchar * label) {
//   (*fnptr)(type, object, length, label);
// }
// void  glowLightEnviSGIX(PLIGHTENVISGIX fnptr, GLenum  pname, GLint  param) {
//   (*fnptr)(pname, param);
// }
// void  glowLightModelxOES(PLIGHTMODELXOES fnptr, GLenum  pname, GLfixed  param) {
//   (*fnptr)(pname, param);
// }
// void  glowLightModelxvOES(PLIGHTMODELXVOES fnptr, GLenum  pname, const GLfixed * param) {
//   (*fnptr)(pname, param);
// }
// void  glowLightxOES(PLIGHTXOES fnptr, GLenum  light, GLenum  pname, GLfixed  param) {
//   (*fnptr)(light, pname, param);
// }
// void  glowLightxvOES(PLIGHTXVOES fnptr, GLenum  light, GLenum  pname, const GLfixed * params) {
//   (*fnptr)(light, pname, params);
// }
// void  glowLineWidth(PLINEWIDTH fnptr, GLfloat  width) {
//   (*fnptr)(width);
// }
// void  glowLineWidthxOES(PLINEWIDTHXOES fnptr, GLfixed  width) {
//   (*fnptr)(width);
// }
// void  glowLinkProgram(PLINKPROGRAM fnptr, GLuint  program) {
//   (*fnptr)(program);
// }
// void  glowLinkProgramARB(PLINKPROGRAMARB fnptr, GLhandleARB  programObj) {
//   (*fnptr)(programObj);
// }
// void  glowListParameterfSGIX(PLISTPARAMETERFSGIX fnptr, GLuint  list, GLenum  pname, GLfloat  param) {
//   (*fnptr)(list, pname, param);
// }
// void  glowListParameterfvSGIX(PLISTPARAMETERFVSGIX fnptr, GLuint  list, GLenum  pname, const GLfloat * params) {
//   (*fnptr)(list, pname, params);
// }
// void  glowListParameteriSGIX(PLISTPARAMETERISGIX fnptr, GLuint  list, GLenum  pname, GLint  param) {
//   (*fnptr)(list, pname, param);
// }
// void  glowListParameterivSGIX(PLISTPARAMETERIVSGIX fnptr, GLuint  list, GLenum  pname, const GLint * params) {
//   (*fnptr)(list, pname, params);
// }
// void  glowLoadIdentityDeformationMapSGIX(PLOADIDENTITYDEFORMATIONMAPSGIX fnptr, GLbitfield  mask) {
//   (*fnptr)(mask);
// }
// void  glowLoadMatrixxOES(PLOADMATRIXXOES fnptr, const GLfixed * m) {
//   (*fnptr)(m);
// }
// void  glowLoadProgramNV(PLOADPROGRAMNV fnptr, GLenum  target, GLuint  id, GLsizei  len, const GLubyte * program) {
//   (*fnptr)(target, id, len, program);
// }
// void  glowLoadTransposeMatrixdARB(PLOADTRANSPOSEMATRIXDARB fnptr, const GLdouble * m) {
//   (*fnptr)(m);
// }
// void  glowLoadTransposeMatrixfARB(PLOADTRANSPOSEMATRIXFARB fnptr, const GLfloat * m) {
//   (*fnptr)(m);
// }
// void  glowLoadTransposeMatrixxOES(PLOADTRANSPOSEMATRIXXOES fnptr, const GLfixed * m) {
//   (*fnptr)(m);
// }
// void  glowLockArraysEXT(PLOCKARRAYSEXT fnptr, GLint  first, GLsizei  count) {
//   (*fnptr)(first, count);
// }
// void  glowLogicOp(PLOGICOP fnptr, GLenum  opcode) {
//   (*fnptr)(opcode);
// }
// void  glowMakeBufferNonResidentNV(PMAKEBUFFERNONRESIDENTNV fnptr, GLenum  target) {
//   (*fnptr)(target);
// }
// void  glowMakeBufferResidentNV(PMAKEBUFFERRESIDENTNV fnptr, GLenum  target, GLenum  access) {
//   (*fnptr)(target, access);
// }
// void  glowMakeImageHandleNonResidentARB(PMAKEIMAGEHANDLENONRESIDENTARB fnptr, GLuint64  handle) {
//   (*fnptr)(handle);
// }
// void  glowMakeImageHandleNonResidentNV(PMAKEIMAGEHANDLENONRESIDENTNV fnptr, GLuint64  handle) {
//   (*fnptr)(handle);
// }
// void  glowMakeImageHandleResidentARB(PMAKEIMAGEHANDLERESIDENTARB fnptr, GLuint64  handle, GLenum  access) {
//   (*fnptr)(handle, access);
// }
// void  glowMakeImageHandleResidentNV(PMAKEIMAGEHANDLERESIDENTNV fnptr, GLuint64  handle, GLenum  access) {
//   (*fnptr)(handle, access);
// }
// void  glowMakeNamedBufferNonResidentNV(PMAKENAMEDBUFFERNONRESIDENTNV fnptr, GLuint  buffer) {
//   (*fnptr)(buffer);
// }
// void  glowMakeNamedBufferResidentNV(PMAKENAMEDBUFFERRESIDENTNV fnptr, GLuint  buffer, GLenum  access) {
//   (*fnptr)(buffer, access);
// }
// void  glowMakeTextureHandleNonResidentARB(PMAKETEXTUREHANDLENONRESIDENTARB fnptr, GLuint64  handle) {
//   (*fnptr)(handle);
// }
// void  glowMakeTextureHandleNonResidentNV(PMAKETEXTUREHANDLENONRESIDENTNV fnptr, GLuint64  handle) {
//   (*fnptr)(handle);
// }
// void  glowMakeTextureHandleResidentARB(PMAKETEXTUREHANDLERESIDENTARB fnptr, GLuint64  handle) {
//   (*fnptr)(handle);
// }
// void  glowMakeTextureHandleResidentNV(PMAKETEXTUREHANDLERESIDENTNV fnptr, GLuint64  handle) {
//   (*fnptr)(handle);
// }
// void  glowMap1xOES(PMAP1XOES fnptr, GLenum  target, GLfixed  u1, GLfixed  u2, GLint  stride, GLint  order, GLfixed  points) {
//   (*fnptr)(target, u1, u2, stride, order, points);
// }
// void  glowMap2xOES(PMAP2XOES fnptr, GLenum  target, GLfixed  u1, GLfixed  u2, GLint  ustride, GLint  uorder, GLfixed  v1, GLfixed  v2, GLint  vstride, GLint  vorder, GLfixed  points) {
//   (*fnptr)(target, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
// }
// void * glowMapBuffer(PMAPBUFFER fnptr, GLenum  target, GLenum  access) {
//   return (*fnptr)(target, access);
// }
// void * glowMapBufferARB(PMAPBUFFERARB fnptr, GLenum  target, GLenum  access) {
//   return (*fnptr)(target, access);
// }
// void * glowMapBufferRange(PMAPBUFFERRANGE fnptr, GLenum  target, GLintptr  offset, GLsizeiptr  length, GLbitfield  access) {
//   return (*fnptr)(target, offset, length, access);
// }
// void  glowMapControlPointsNV(PMAPCONTROLPOINTSNV fnptr, GLenum  target, GLuint  index, GLenum  type, GLsizei  ustride, GLsizei  vstride, GLint  uorder, GLint  vorder, GLboolean  packed, const void * points) {
//   (*fnptr)(target, index, type, ustride, vstride, uorder, vorder, packed, points);
// }
// void  glowMapGrid1xOES(PMAPGRID1XOES fnptr, GLint  n, GLfixed  u1, GLfixed  u2) {
//   (*fnptr)(n, u1, u2);
// }
// void  glowMapGrid2xOES(PMAPGRID2XOES fnptr, GLint  n, GLfixed  u1, GLfixed  u2, GLfixed  v1, GLfixed  v2) {
//   (*fnptr)(n, u1, u2, v1, v2);
// }
// void * glowMapNamedBufferEXT(PMAPNAMEDBUFFEREXT fnptr, GLuint  buffer, GLenum  access) {
//   return (*fnptr)(buffer, access);
// }
// void * glowMapNamedBufferRangeEXT(PMAPNAMEDBUFFERRANGEEXT fnptr, GLuint  buffer, GLintptr  offset, GLsizeiptr  length, GLbitfield  access) {
//   return (*fnptr)(buffer, offset, length, access);
// }
// void * glowMapObjectBufferATI(PMAPOBJECTBUFFERATI fnptr, GLuint  buffer) {
//   return (*fnptr)(buffer);
// }
// void  glowMapParameterfvNV(PMAPPARAMETERFVNV fnptr, GLenum  target, GLenum  pname, const GLfloat * params) {
//   (*fnptr)(target, pname, params);
// }
// void  glowMapParameterivNV(PMAPPARAMETERIVNV fnptr, GLenum  target, GLenum  pname, const GLint * params) {
//   (*fnptr)(target, pname, params);
// }
// void * glowMapTexture2DINTEL(PMAPTEXTURE2DINTEL fnptr, GLuint  texture, GLint  level, GLbitfield  access, GLint * stride, GLenum * layout) {
//   return (*fnptr)(texture, level, access, stride, layout);
// }
// void  glowMapVertexAttrib1dAPPLE(PMAPVERTEXATTRIB1DAPPLE fnptr, GLuint  index, GLuint  size, GLdouble  u1, GLdouble  u2, GLint  stride, GLint  order, const GLdouble * points) {
//   (*fnptr)(index, size, u1, u2, stride, order, points);
// }
// void  glowMapVertexAttrib1fAPPLE(PMAPVERTEXATTRIB1FAPPLE fnptr, GLuint  index, GLuint  size, GLfloat  u1, GLfloat  u2, GLint  stride, GLint  order, const GLfloat * points) {
//   (*fnptr)(index, size, u1, u2, stride, order, points);
// }
// void  glowMapVertexAttrib2dAPPLE(PMAPVERTEXATTRIB2DAPPLE fnptr, GLuint  index, GLuint  size, GLdouble  u1, GLdouble  u2, GLint  ustride, GLint  uorder, GLdouble  v1, GLdouble  v2, GLint  vstride, GLint  vorder, const GLdouble * points) {
//   (*fnptr)(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
// }
// void  glowMapVertexAttrib2fAPPLE(PMAPVERTEXATTRIB2FAPPLE fnptr, GLuint  index, GLuint  size, GLfloat  u1, GLfloat  u2, GLint  ustride, GLint  uorder, GLfloat  v1, GLfloat  v2, GLint  vstride, GLint  vorder, const GLfloat * points) {
//   (*fnptr)(index, size, u1, u2, ustride, uorder, v1, v2, vstride, vorder, points);
// }
// void  glowMaterialxOES(PMATERIALXOES fnptr, GLenum  face, GLenum  pname, GLfixed  param) {
//   (*fnptr)(face, pname, param);
// }
// void  glowMaterialxvOES(PMATERIALXVOES fnptr, GLenum  face, GLenum  pname, const GLfixed * param) {
//   (*fnptr)(face, pname, param);
// }
// void  glowMatrixFrustumEXT(PMATRIXFRUSTUMEXT fnptr, GLenum  mode, GLdouble  left, GLdouble  right, GLdouble  bottom, GLdouble  top, GLdouble  zNear, GLdouble  zFar) {
//   (*fnptr)(mode, left, right, bottom, top, zNear, zFar);
// }
// void  glowMatrixIndexPointerARB(PMATRIXINDEXPOINTERARB fnptr, GLint  size, GLenum  type, GLsizei  stride, const void * pointer) {
//   (*fnptr)(size, type, stride, pointer);
// }
// void  glowMatrixIndexubvARB(PMATRIXINDEXUBVARB fnptr, GLint  size, const GLubyte * indices) {
//   (*fnptr)(size, indices);
// }
// void  glowMatrixIndexuivARB(PMATRIXINDEXUIVARB fnptr, GLint  size, const GLuint * indices) {
//   (*fnptr)(size, indices);
// }
// void  glowMatrixIndexusvARB(PMATRIXINDEXUSVARB fnptr, GLint  size, const GLushort * indices) {
//   (*fnptr)(size, indices);
// }
// void  glowMatrixLoadIdentityEXT(PMATRIXLOADIDENTITYEXT fnptr, GLenum  mode) {
//   (*fnptr)(mode);
// }
// void  glowMatrixLoadTransposedEXT(PMATRIXLOADTRANSPOSEDEXT fnptr, GLenum  mode, const GLdouble * m) {
//   (*fnptr)(mode, m);
// }
// void  glowMatrixLoadTransposefEXT(PMATRIXLOADTRANSPOSEFEXT fnptr, GLenum  mode, const GLfloat * m) {
//   (*fnptr)(mode, m);
// }
// void  glowMatrixLoaddEXT(PMATRIXLOADDEXT fnptr, GLenum  mode, const GLdouble * m) {
//   (*fnptr)(mode, m);
// }
// void  glowMatrixLoadfEXT(PMATRIXLOADFEXT fnptr, GLenum  mode, const GLfloat * m) {
//   (*fnptr)(mode, m);
// }
// void  glowMatrixMultTransposedEXT(PMATRIXMULTTRANSPOSEDEXT fnptr, GLenum  mode, const GLdouble * m) {
//   (*fnptr)(mode, m);
// }
// void  glowMatrixMultTransposefEXT(PMATRIXMULTTRANSPOSEFEXT fnptr, GLenum  mode, const GLfloat * m) {
//   (*fnptr)(mode, m);
// }
// void  glowMatrixMultdEXT(PMATRIXMULTDEXT fnptr, GLenum  mode, const GLdouble * m) {
//   (*fnptr)(mode, m);
// }
// void  glowMatrixMultfEXT(PMATRIXMULTFEXT fnptr, GLenum  mode, const GLfloat * m) {
//   (*fnptr)(mode, m);
// }
// void  glowMatrixOrthoEXT(PMATRIXORTHOEXT fnptr, GLenum  mode, GLdouble  left, GLdouble  right, GLdouble  bottom, GLdouble  top, GLdouble  zNear, GLdouble  zFar) {
//   (*fnptr)(mode, left, right, bottom, top, zNear, zFar);
// }
// void  glowMatrixPopEXT(PMATRIXPOPEXT fnptr, GLenum  mode) {
//   (*fnptr)(mode);
// }
// void  glowMatrixPushEXT(PMATRIXPUSHEXT fnptr, GLenum  mode) {
//   (*fnptr)(mode);
// }
// void  glowMatrixRotatedEXT(PMATRIXROTATEDEXT fnptr, GLenum  mode, GLdouble  angle, GLdouble  x, GLdouble  y, GLdouble  z) {
//   (*fnptr)(mode, angle, x, y, z);
// }
// void  glowMatrixRotatefEXT(PMATRIXROTATEFEXT fnptr, GLenum  mode, GLfloat  angle, GLfloat  x, GLfloat  y, GLfloat  z) {
//   (*fnptr)(mode, angle, x, y, z);
// }
// void  glowMatrixScaledEXT(PMATRIXSCALEDEXT fnptr, GLenum  mode, GLdouble  x, GLdouble  y, GLdouble  z) {
//   (*fnptr)(mode, x, y, z);
// }
// void  glowMatrixScalefEXT(PMATRIXSCALEFEXT fnptr, GLenum  mode, GLfloat  x, GLfloat  y, GLfloat  z) {
//   (*fnptr)(mode, x, y, z);
// }
// void  glowMatrixTranslatedEXT(PMATRIXTRANSLATEDEXT fnptr, GLenum  mode, GLdouble  x, GLdouble  y, GLdouble  z) {
//   (*fnptr)(mode, x, y, z);
// }
// void  glowMatrixTranslatefEXT(PMATRIXTRANSLATEFEXT fnptr, GLenum  mode, GLfloat  x, GLfloat  y, GLfloat  z) {
//   (*fnptr)(mode, x, y, z);
// }
// void  glowMemoryBarrier(PMEMORYBARRIER fnptr, GLbitfield  barriers) {
//   (*fnptr)(barriers);
// }
// void  glowMemoryBarrierEXT(PMEMORYBARRIEREXT fnptr, GLbitfield  barriers) {
//   (*fnptr)(barriers);
// }
// void  glowMinSampleShading(PMINSAMPLESHADING fnptr, GLfloat  value) {
//   (*fnptr)(value);
// }
// void  glowMinSampleShadingARB(PMINSAMPLESHADINGARB fnptr, GLfloat  value) {
//   (*fnptr)(value);
// }
// void  glowMinmaxEXT(PMINMAXEXT fnptr, GLenum  target, GLenum  internalformat, GLboolean  sink) {
//   (*fnptr)(target, internalformat, sink);
// }
// void  glowMultMatrixxOES(PMULTMATRIXXOES fnptr, const GLfixed * m) {
//   (*fnptr)(m);
// }
// void  glowMultTransposeMatrixdARB(PMULTTRANSPOSEMATRIXDARB fnptr, const GLdouble * m) {
//   (*fnptr)(m);
// }
// void  glowMultTransposeMatrixfARB(PMULTTRANSPOSEMATRIXFARB fnptr, const GLfloat * m) {
//   (*fnptr)(m);
// }
// void  glowMultTransposeMatrixxOES(PMULTTRANSPOSEMATRIXXOES fnptr, const GLfixed * m) {
//   (*fnptr)(m);
// }
// void  glowMultiDrawArrays(PMULTIDRAWARRAYS fnptr, GLenum  mode, const GLint * first, const GLsizei * count, GLsizei  drawcount) {
//   (*fnptr)(mode, first, count, drawcount);
// }
// void  glowMultiDrawArraysEXT(PMULTIDRAWARRAYSEXT fnptr, GLenum  mode, const GLint * first, const GLsizei * count, GLsizei  primcount) {
//   (*fnptr)(mode, first, count, primcount);
// }
// void  glowMultiDrawArraysIndirect(PMULTIDRAWARRAYSINDIRECT fnptr, GLenum  mode, const void * indirect, GLsizei  drawcount, GLsizei  stride) {
//   (*fnptr)(mode, indirect, drawcount, stride);
// }
// void  glowMultiDrawArraysIndirectAMD(PMULTIDRAWARRAYSINDIRECTAMD fnptr, GLenum  mode, const void * indirect, GLsizei  primcount, GLsizei  stride) {
//   (*fnptr)(mode, indirect, primcount, stride);
// }
// void  glowMultiDrawArraysIndirectBindlessNV(PMULTIDRAWARRAYSINDIRECTBINDLESSNV fnptr, GLenum  mode, const void * indirect, GLsizei  drawCount, GLsizei  stride, GLint  vertexBufferCount) {
//   (*fnptr)(mode, indirect, drawCount, stride, vertexBufferCount);
// }
// void  glowMultiDrawArraysIndirectCountARB(PMULTIDRAWARRAYSINDIRECTCOUNTARB fnptr, GLenum  mode, GLintptr  indirect, GLintptr  drawcount, GLsizei  maxdrawcount, GLsizei  stride) {
//   (*fnptr)(mode, indirect, drawcount, maxdrawcount, stride);
// }
// void  glowMultiDrawElementArrayAPPLE(PMULTIDRAWELEMENTARRAYAPPLE fnptr, GLenum  mode, const GLint * first, const GLsizei * count, GLsizei  primcount) {
//   (*fnptr)(mode, first, count, primcount);
// }
// void  glowMultiDrawElements(PMULTIDRAWELEMENTS fnptr, GLenum  mode, const GLsizei * count, GLenum  type, const void *const* indices, GLsizei  drawcount) {
//   (*fnptr)(mode, count, type, indices, drawcount);
// }
// void  glowMultiDrawElementsBaseVertex(PMULTIDRAWELEMENTSBASEVERTEX fnptr, GLenum  mode, const GLsizei * count, GLenum  type, const void *const* indices, GLsizei  drawcount, const GLint * basevertex) {
//   (*fnptr)(mode, count, type, indices, drawcount, basevertex);
// }
// void  glowMultiDrawElementsEXT(PMULTIDRAWELEMENTSEXT fnptr, GLenum  mode, const GLsizei * count, GLenum  type, const void *const* indices, GLsizei  primcount) {
//   (*fnptr)(mode, count, type, indices, primcount);
// }
// void  glowMultiDrawElementsIndirect(PMULTIDRAWELEMENTSINDIRECT fnptr, GLenum  mode, GLenum  type, const void * indirect, GLsizei  drawcount, GLsizei  stride) {
//   (*fnptr)(mode, type, indirect, drawcount, stride);
// }
// void  glowMultiDrawElementsIndirectAMD(PMULTIDRAWELEMENTSINDIRECTAMD fnptr, GLenum  mode, GLenum  type, const void * indirect, GLsizei  primcount, GLsizei  stride) {
//   (*fnptr)(mode, type, indirect, primcount, stride);
// }
// void  glowMultiDrawElementsIndirectBindlessNV(PMULTIDRAWELEMENTSINDIRECTBINDLESSNV fnptr, GLenum  mode, GLenum  type, const void * indirect, GLsizei  drawCount, GLsizei  stride, GLint  vertexBufferCount) {
//   (*fnptr)(mode, type, indirect, drawCount, stride, vertexBufferCount);
// }
// void  glowMultiDrawElementsIndirectCountARB(PMULTIDRAWELEMENTSINDIRECTCOUNTARB fnptr, GLenum  mode, GLenum  type, GLintptr  indirect, GLintptr  drawcount, GLsizei  maxdrawcount, GLsizei  stride) {
//   (*fnptr)(mode, type, indirect, drawcount, maxdrawcount, stride);
// }
// void  glowMultiDrawRangeElementArrayAPPLE(PMULTIDRAWRANGEELEMENTARRAYAPPLE fnptr, GLenum  mode, GLuint  start, GLuint  end, const GLint * first, const GLsizei * count, GLsizei  primcount) {
//   (*fnptr)(mode, start, end, first, count, primcount);
// }
// void  glowMultiModeDrawArraysIBM(PMULTIMODEDRAWARRAYSIBM fnptr, const GLenum * mode, const GLint * first, const GLsizei * count, GLsizei  primcount, GLint  modestride) {
//   (*fnptr)(mode, first, count, primcount, modestride);
// }
// void  glowMultiModeDrawElementsIBM(PMULTIMODEDRAWELEMENTSIBM fnptr, const GLenum * mode, const GLsizei * count, GLenum  type, const void *const* indices, GLsizei  primcount, GLint  modestride) {
//   (*fnptr)(mode, count, type, indices, primcount, modestride);
// }
// void  glowMultiTexBufferEXT(PMULTITEXBUFFEREXT fnptr, GLenum  texunit, GLenum  target, GLenum  internalformat, GLuint  buffer) {
//   (*fnptr)(texunit, target, internalformat, buffer);
// }
// void  glowMultiTexCoord1bOES(PMULTITEXCOORD1BOES fnptr, GLenum  texture, GLbyte  s) {
//   (*fnptr)(texture, s);
// }
// void  glowMultiTexCoord1bvOES(PMULTITEXCOORD1BVOES fnptr, GLenum  texture, const GLbyte * coords) {
//   (*fnptr)(texture, coords);
// }
// void  glowMultiTexCoord1dARB(PMULTITEXCOORD1DARB fnptr, GLenum  target, GLdouble  s) {
//   (*fnptr)(target, s);
// }
// void  glowMultiTexCoord1dvARB(PMULTITEXCOORD1DVARB fnptr, GLenum  target, const GLdouble * v) {
//   (*fnptr)(target, v);
// }
// void  glowMultiTexCoord1fARB(PMULTITEXCOORD1FARB fnptr, GLenum  target, GLfloat  s) {
//   (*fnptr)(target, s);
// }
// void  glowMultiTexCoord1fvARB(PMULTITEXCOORD1FVARB fnptr, GLenum  target, const GLfloat * v) {
//   (*fnptr)(target, v);
// }
// void  glowMultiTexCoord1hNV(PMULTITEXCOORD1HNV fnptr, GLenum  target, GLhalfNV  s) {
//   (*fnptr)(target, s);
// }
// void  glowMultiTexCoord1hvNV(PMULTITEXCOORD1HVNV fnptr, GLenum  target, const GLhalfNV * v) {
//   (*fnptr)(target, v);
// }
// void  glowMultiTexCoord1iARB(PMULTITEXCOORD1IARB fnptr, GLenum  target, GLint  s) {
//   (*fnptr)(target, s);
// }
// void  glowMultiTexCoord1ivARB(PMULTITEXCOORD1IVARB fnptr, GLenum  target, const GLint * v) {
//   (*fnptr)(target, v);
// }
// void  glowMultiTexCoord1sARB(PMULTITEXCOORD1SARB fnptr, GLenum  target, GLshort  s) {
//   (*fnptr)(target, s);
// }
// void  glowMultiTexCoord1svARB(PMULTITEXCOORD1SVARB fnptr, GLenum  target, const GLshort * v) {
//   (*fnptr)(target, v);
// }
// void  glowMultiTexCoord1xOES(PMULTITEXCOORD1XOES fnptr, GLenum  texture, GLfixed  s) {
//   (*fnptr)(texture, s);
// }
// void  glowMultiTexCoord1xvOES(PMULTITEXCOORD1XVOES fnptr, GLenum  texture, const GLfixed * coords) {
//   (*fnptr)(texture, coords);
// }
// void  glowMultiTexCoord2bOES(PMULTITEXCOORD2BOES fnptr, GLenum  texture, GLbyte  s, GLbyte  t) {
//   (*fnptr)(texture, s, t);
// }
// void  glowMultiTexCoord2bvOES(PMULTITEXCOORD2BVOES fnptr, GLenum  texture, const GLbyte * coords) {
//   (*fnptr)(texture, coords);
// }
// void  glowMultiTexCoord2dARB(PMULTITEXCOORD2DARB fnptr, GLenum  target, GLdouble  s, GLdouble  t) {
//   (*fnptr)(target, s, t);
// }
// void  glowMultiTexCoord2dvARB(PMULTITEXCOORD2DVARB fnptr, GLenum  target, const GLdouble * v) {
//   (*fnptr)(target, v);
// }
// void  glowMultiTexCoord2fARB(PMULTITEXCOORD2FARB fnptr, GLenum  target, GLfloat  s, GLfloat  t) {
//   (*fnptr)(target, s, t);
// }
// void  glowMultiTexCoord2fvARB(PMULTITEXCOORD2FVARB fnptr, GLenum  target, const GLfloat * v) {
//   (*fnptr)(target, v);
// }
// void  glowMultiTexCoord2hNV(PMULTITEXCOORD2HNV fnptr, GLenum  target, GLhalfNV  s, GLhalfNV  t) {
//   (*fnptr)(target, s, t);
// }
// void  glowMultiTexCoord2hvNV(PMULTITEXCOORD2HVNV fnptr, GLenum  target, const GLhalfNV * v) {
//   (*fnptr)(target, v);
// }
// void  glowMultiTexCoord2iARB(PMULTITEXCOORD2IARB fnptr, GLenum  target, GLint  s, GLint  t) {
//   (*fnptr)(target, s, t);
// }
// void  glowMultiTexCoord2ivARB(PMULTITEXCOORD2IVARB fnptr, GLenum  target, const GLint * v) {
//   (*fnptr)(target, v);
// }
// void  glowMultiTexCoord2sARB(PMULTITEXCOORD2SARB fnptr, GLenum  target, GLshort  s, GLshort  t) {
//   (*fnptr)(target, s, t);
// }
// void  glowMultiTexCoord2svARB(PMULTITEXCOORD2SVARB fnptr, GLenum  target, const GLshort * v) {
//   (*fnptr)(target, v);
// }
// void  glowMultiTexCoord2xOES(PMULTITEXCOORD2XOES fnptr, GLenum  texture, GLfixed  s, GLfixed  t) {
//   (*fnptr)(texture, s, t);
// }
// void  glowMultiTexCoord2xvOES(PMULTITEXCOORD2XVOES fnptr, GLenum  texture, const GLfixed * coords) {
//   (*fnptr)(texture, coords);
// }
// void  glowMultiTexCoord3bOES(PMULTITEXCOORD3BOES fnptr, GLenum  texture, GLbyte  s, GLbyte  t, GLbyte  r) {
//   (*fnptr)(texture, s, t, r);
// }
// void  glowMultiTexCoord3bvOES(PMULTITEXCOORD3BVOES fnptr, GLenum  texture, const GLbyte * coords) {
//   (*fnptr)(texture, coords);
// }
// void  glowMultiTexCoord3dARB(PMULTITEXCOORD3DARB fnptr, GLenum  target, GLdouble  s, GLdouble  t, GLdouble  r) {
//   (*fnptr)(target, s, t, r);
// }
// void  glowMultiTexCoord3dvARB(PMULTITEXCOORD3DVARB fnptr, GLenum  target, const GLdouble * v) {
//   (*fnptr)(target, v);
// }
// void  glowMultiTexCoord3fARB(PMULTITEXCOORD3FARB fnptr, GLenum  target, GLfloat  s, GLfloat  t, GLfloat  r) {
//   (*fnptr)(target, s, t, r);
// }
// void  glowMultiTexCoord3fvARB(PMULTITEXCOORD3FVARB fnptr, GLenum  target, const GLfloat * v) {
//   (*fnptr)(target, v);
// }
// void  glowMultiTexCoord3hNV(PMULTITEXCOORD3HNV fnptr, GLenum  target, GLhalfNV  s, GLhalfNV  t, GLhalfNV  r) {
//   (*fnptr)(target, s, t, r);
// }
// void  glowMultiTexCoord3hvNV(PMULTITEXCOORD3HVNV fnptr, GLenum  target, const GLhalfNV * v) {
//   (*fnptr)(target, v);
// }
// void  glowMultiTexCoord3iARB(PMULTITEXCOORD3IARB fnptr, GLenum  target, GLint  s, GLint  t, GLint  r) {
//   (*fnptr)(target, s, t, r);
// }
// void  glowMultiTexCoord3ivARB(PMULTITEXCOORD3IVARB fnptr, GLenum  target, const GLint * v) {
//   (*fnptr)(target, v);
// }
// void  glowMultiTexCoord3sARB(PMULTITEXCOORD3SARB fnptr, GLenum  target, GLshort  s, GLshort  t, GLshort  r) {
//   (*fnptr)(target, s, t, r);
// }
// void  glowMultiTexCoord3svARB(PMULTITEXCOORD3SVARB fnptr, GLenum  target, const GLshort * v) {
//   (*fnptr)(target, v);
// }
// void  glowMultiTexCoord3xOES(PMULTITEXCOORD3XOES fnptr, GLenum  texture, GLfixed  s, GLfixed  t, GLfixed  r) {
//   (*fnptr)(texture, s, t, r);
// }
// void  glowMultiTexCoord3xvOES(PMULTITEXCOORD3XVOES fnptr, GLenum  texture, const GLfixed * coords) {
//   (*fnptr)(texture, coords);
// }
// void  glowMultiTexCoord4bOES(PMULTITEXCOORD4BOES fnptr, GLenum  texture, GLbyte  s, GLbyte  t, GLbyte  r, GLbyte  q) {
//   (*fnptr)(texture, s, t, r, q);
// }
// void  glowMultiTexCoord4bvOES(PMULTITEXCOORD4BVOES fnptr, GLenum  texture, const GLbyte * coords) {
//   (*fnptr)(texture, coords);
// }
// void  glowMultiTexCoord4dARB(PMULTITEXCOORD4DARB fnptr, GLenum  target, GLdouble  s, GLdouble  t, GLdouble  r, GLdouble  q) {
//   (*fnptr)(target, s, t, r, q);
// }
// void  glowMultiTexCoord4dvARB(PMULTITEXCOORD4DVARB fnptr, GLenum  target, const GLdouble * v) {
//   (*fnptr)(target, v);
// }
// void  glowMultiTexCoord4fARB(PMULTITEXCOORD4FARB fnptr, GLenum  target, GLfloat  s, GLfloat  t, GLfloat  r, GLfloat  q) {
//   (*fnptr)(target, s, t, r, q);
// }
// void  glowMultiTexCoord4fvARB(PMULTITEXCOORD4FVARB fnptr, GLenum  target, const GLfloat * v) {
//   (*fnptr)(target, v);
// }
// void  glowMultiTexCoord4hNV(PMULTITEXCOORD4HNV fnptr, GLenum  target, GLhalfNV  s, GLhalfNV  t, GLhalfNV  r, GLhalfNV  q) {
//   (*fnptr)(target, s, t, r, q);
// }
// void  glowMultiTexCoord4hvNV(PMULTITEXCOORD4HVNV fnptr, GLenum  target, const GLhalfNV * v) {
//   (*fnptr)(target, v);
// }
// void  glowMultiTexCoord4iARB(PMULTITEXCOORD4IARB fnptr, GLenum  target, GLint  s, GLint  t, GLint  r, GLint  q) {
//   (*fnptr)(target, s, t, r, q);
// }
// void  glowMultiTexCoord4ivARB(PMULTITEXCOORD4IVARB fnptr, GLenum  target, const GLint * v) {
//   (*fnptr)(target, v);
// }
// void  glowMultiTexCoord4sARB(PMULTITEXCOORD4SARB fnptr, GLenum  target, GLshort  s, GLshort  t, GLshort  r, GLshort  q) {
//   (*fnptr)(target, s, t, r, q);
// }
// void  glowMultiTexCoord4svARB(PMULTITEXCOORD4SVARB fnptr, GLenum  target, const GLshort * v) {
//   (*fnptr)(target, v);
// }
// void  glowMultiTexCoord4xOES(PMULTITEXCOORD4XOES fnptr, GLenum  texture, GLfixed  s, GLfixed  t, GLfixed  r, GLfixed  q) {
//   (*fnptr)(texture, s, t, r, q);
// }
// void  glowMultiTexCoord4xvOES(PMULTITEXCOORD4XVOES fnptr, GLenum  texture, const GLfixed * coords) {
//   (*fnptr)(texture, coords);
// }
// void  glowMultiTexCoordPointerEXT(PMULTITEXCOORDPOINTEREXT fnptr, GLenum  texunit, GLint  size, GLenum  type, GLsizei  stride, const void * pointer) {
//   (*fnptr)(texunit, size, type, stride, pointer);
// }
// void  glowMultiTexEnvfEXT(PMULTITEXENVFEXT fnptr, GLenum  texunit, GLenum  target, GLenum  pname, GLfloat  param) {
//   (*fnptr)(texunit, target, pname, param);
// }
// void  glowMultiTexEnvfvEXT(PMULTITEXENVFVEXT fnptr, GLenum  texunit, GLenum  target, GLenum  pname, const GLfloat * params) {
//   (*fnptr)(texunit, target, pname, params);
// }
// void  glowMultiTexEnviEXT(PMULTITEXENVIEXT fnptr, GLenum  texunit, GLenum  target, GLenum  pname, GLint  param) {
//   (*fnptr)(texunit, target, pname, param);
// }
// void  glowMultiTexEnvivEXT(PMULTITEXENVIVEXT fnptr, GLenum  texunit, GLenum  target, GLenum  pname, const GLint * params) {
//   (*fnptr)(texunit, target, pname, params);
// }
// void  glowMultiTexGendEXT(PMULTITEXGENDEXT fnptr, GLenum  texunit, GLenum  coord, GLenum  pname, GLdouble  param) {
//   (*fnptr)(texunit, coord, pname, param);
// }
// void  glowMultiTexGendvEXT(PMULTITEXGENDVEXT fnptr, GLenum  texunit, GLenum  coord, GLenum  pname, const GLdouble * params) {
//   (*fnptr)(texunit, coord, pname, params);
// }
// void  glowMultiTexGenfEXT(PMULTITEXGENFEXT fnptr, GLenum  texunit, GLenum  coord, GLenum  pname, GLfloat  param) {
//   (*fnptr)(texunit, coord, pname, param);
// }
// void  glowMultiTexGenfvEXT(PMULTITEXGENFVEXT fnptr, GLenum  texunit, GLenum  coord, GLenum  pname, const GLfloat * params) {
//   (*fnptr)(texunit, coord, pname, params);
// }
// void  glowMultiTexGeniEXT(PMULTITEXGENIEXT fnptr, GLenum  texunit, GLenum  coord, GLenum  pname, GLint  param) {
//   (*fnptr)(texunit, coord, pname, param);
// }
// void  glowMultiTexGenivEXT(PMULTITEXGENIVEXT fnptr, GLenum  texunit, GLenum  coord, GLenum  pname, const GLint * params) {
//   (*fnptr)(texunit, coord, pname, params);
// }
// void  glowMultiTexImage1DEXT(PMULTITEXIMAGE1DEXT fnptr, GLenum  texunit, GLenum  target, GLint  level, GLint  internalformat, GLsizei  width, GLint  border, GLenum  format, GLenum  type, const void * pixels) {
//   (*fnptr)(texunit, target, level, internalformat, width, border, format, type, pixels);
// }
// void  glowMultiTexImage2DEXT(PMULTITEXIMAGE2DEXT fnptr, GLenum  texunit, GLenum  target, GLint  level, GLint  internalformat, GLsizei  width, GLsizei  height, GLint  border, GLenum  format, GLenum  type, const void * pixels) {
//   (*fnptr)(texunit, target, level, internalformat, width, height, border, format, type, pixels);
// }
// void  glowMultiTexImage3DEXT(PMULTITEXIMAGE3DEXT fnptr, GLenum  texunit, GLenum  target, GLint  level, GLint  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth, GLint  border, GLenum  format, GLenum  type, const void * pixels) {
//   (*fnptr)(texunit, target, level, internalformat, width, height, depth, border, format, type, pixels);
// }
// void  glowMultiTexParameterIivEXT(PMULTITEXPARAMETERIIVEXT fnptr, GLenum  texunit, GLenum  target, GLenum  pname, const GLint * params) {
//   (*fnptr)(texunit, target, pname, params);
// }
// void  glowMultiTexParameterIuivEXT(PMULTITEXPARAMETERIUIVEXT fnptr, GLenum  texunit, GLenum  target, GLenum  pname, const GLuint * params) {
//   (*fnptr)(texunit, target, pname, params);
// }
// void  glowMultiTexParameterfEXT(PMULTITEXPARAMETERFEXT fnptr, GLenum  texunit, GLenum  target, GLenum  pname, GLfloat  param) {
//   (*fnptr)(texunit, target, pname, param);
// }
// void  glowMultiTexParameterfvEXT(PMULTITEXPARAMETERFVEXT fnptr, GLenum  texunit, GLenum  target, GLenum  pname, const GLfloat * params) {
//   (*fnptr)(texunit, target, pname, params);
// }
// void  glowMultiTexParameteriEXT(PMULTITEXPARAMETERIEXT fnptr, GLenum  texunit, GLenum  target, GLenum  pname, GLint  param) {
//   (*fnptr)(texunit, target, pname, param);
// }
// void  glowMultiTexParameterivEXT(PMULTITEXPARAMETERIVEXT fnptr, GLenum  texunit, GLenum  target, GLenum  pname, const GLint * params) {
//   (*fnptr)(texunit, target, pname, params);
// }
// void  glowMultiTexRenderbufferEXT(PMULTITEXRENDERBUFFEREXT fnptr, GLenum  texunit, GLenum  target, GLuint  renderbuffer) {
//   (*fnptr)(texunit, target, renderbuffer);
// }
// void  glowMultiTexSubImage1DEXT(PMULTITEXSUBIMAGE1DEXT fnptr, GLenum  texunit, GLenum  target, GLint  level, GLint  xoffset, GLsizei  width, GLenum  format, GLenum  type, const void * pixels) {
//   (*fnptr)(texunit, target, level, xoffset, width, format, type, pixels);
// }
// void  glowMultiTexSubImage2DEXT(PMULTITEXSUBIMAGE2DEXT fnptr, GLenum  texunit, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLsizei  width, GLsizei  height, GLenum  format, GLenum  type, const void * pixels) {
//   (*fnptr)(texunit, target, level, xoffset, yoffset, width, height, format, type, pixels);
// }
// void  glowMultiTexSubImage3DEXT(PMULTITEXSUBIMAGE3DEXT fnptr, GLenum  texunit, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLsizei  width, GLsizei  height, GLsizei  depth, GLenum  format, GLenum  type, const void * pixels) {
//   (*fnptr)(texunit, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
// }
// void  glowNamedBufferDataEXT(PNAMEDBUFFERDATAEXT fnptr, GLuint  buffer, GLsizeiptr  size, const void * data, GLenum  usage) {
//   (*fnptr)(buffer, size, data, usage);
// }
// void  glowNamedBufferStorageEXT(PNAMEDBUFFERSTORAGEEXT fnptr, GLuint  buffer, GLsizeiptr  size, const void * data, GLbitfield  flags) {
//   (*fnptr)(buffer, size, data, flags);
// }
// void  glowNamedBufferSubDataEXT(PNAMEDBUFFERSUBDATAEXT fnptr, GLuint  buffer, GLintptr  offset, GLsizeiptr  size, const void * data) {
//   (*fnptr)(buffer, offset, size, data);
// }
// void  glowNamedCopyBufferSubDataEXT(PNAMEDCOPYBUFFERSUBDATAEXT fnptr, GLuint  readBuffer, GLuint  writeBuffer, GLintptr  readOffset, GLintptr  writeOffset, GLsizeiptr  size) {
//   (*fnptr)(readBuffer, writeBuffer, readOffset, writeOffset, size);
// }
// void  glowNamedFramebufferParameteriEXT(PNAMEDFRAMEBUFFERPARAMETERIEXT fnptr, GLuint  framebuffer, GLenum  pname, GLint  param) {
//   (*fnptr)(framebuffer, pname, param);
// }
// void  glowNamedFramebufferRenderbufferEXT(PNAMEDFRAMEBUFFERRENDERBUFFEREXT fnptr, GLuint  framebuffer, GLenum  attachment, GLenum  renderbuffertarget, GLuint  renderbuffer) {
//   (*fnptr)(framebuffer, attachment, renderbuffertarget, renderbuffer);
// }
// void  glowNamedFramebufferTexture1DEXT(PNAMEDFRAMEBUFFERTEXTURE1DEXT fnptr, GLuint  framebuffer, GLenum  attachment, GLenum  textarget, GLuint  texture, GLint  level) {
//   (*fnptr)(framebuffer, attachment, textarget, texture, level);
// }
// void  glowNamedFramebufferTexture2DEXT(PNAMEDFRAMEBUFFERTEXTURE2DEXT fnptr, GLuint  framebuffer, GLenum  attachment, GLenum  textarget, GLuint  texture, GLint  level) {
//   (*fnptr)(framebuffer, attachment, textarget, texture, level);
// }
// void  glowNamedFramebufferTexture3DEXT(PNAMEDFRAMEBUFFERTEXTURE3DEXT fnptr, GLuint  framebuffer, GLenum  attachment, GLenum  textarget, GLuint  texture, GLint  level, GLint  zoffset) {
//   (*fnptr)(framebuffer, attachment, textarget, texture, level, zoffset);
// }
// void  glowNamedFramebufferTextureEXT(PNAMEDFRAMEBUFFERTEXTUREEXT fnptr, GLuint  framebuffer, GLenum  attachment, GLuint  texture, GLint  level) {
//   (*fnptr)(framebuffer, attachment, texture, level);
// }
// void  glowNamedFramebufferTextureFaceEXT(PNAMEDFRAMEBUFFERTEXTUREFACEEXT fnptr, GLuint  framebuffer, GLenum  attachment, GLuint  texture, GLint  level, GLenum  face) {
//   (*fnptr)(framebuffer, attachment, texture, level, face);
// }
// void  glowNamedFramebufferTextureLayerEXT(PNAMEDFRAMEBUFFERTEXTURELAYEREXT fnptr, GLuint  framebuffer, GLenum  attachment, GLuint  texture, GLint  level, GLint  layer) {
//   (*fnptr)(framebuffer, attachment, texture, level, layer);
// }
// void  glowNamedProgramLocalParameter4dEXT(PNAMEDPROGRAMLOCALPARAMETER4DEXT fnptr, GLuint  program, GLenum  target, GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w) {
//   (*fnptr)(program, target, index, x, y, z, w);
// }
// void  glowNamedProgramLocalParameter4dvEXT(PNAMEDPROGRAMLOCALPARAMETER4DVEXT fnptr, GLuint  program, GLenum  target, GLuint  index, const GLdouble * params) {
//   (*fnptr)(program, target, index, params);
// }
// void  glowNamedProgramLocalParameter4fEXT(PNAMEDPROGRAMLOCALPARAMETER4FEXT fnptr, GLuint  program, GLenum  target, GLuint  index, GLfloat  x, GLfloat  y, GLfloat  z, GLfloat  w) {
//   (*fnptr)(program, target, index, x, y, z, w);
// }
// void  glowNamedProgramLocalParameter4fvEXT(PNAMEDPROGRAMLOCALPARAMETER4FVEXT fnptr, GLuint  program, GLenum  target, GLuint  index, const GLfloat * params) {
//   (*fnptr)(program, target, index, params);
// }
// void  glowNamedProgramLocalParameterI4iEXT(PNAMEDPROGRAMLOCALPARAMETERI4IEXT fnptr, GLuint  program, GLenum  target, GLuint  index, GLint  x, GLint  y, GLint  z, GLint  w) {
//   (*fnptr)(program, target, index, x, y, z, w);
// }
// void  glowNamedProgramLocalParameterI4ivEXT(PNAMEDPROGRAMLOCALPARAMETERI4IVEXT fnptr, GLuint  program, GLenum  target, GLuint  index, const GLint * params) {
//   (*fnptr)(program, target, index, params);
// }
// void  glowNamedProgramLocalParameterI4uiEXT(PNAMEDPROGRAMLOCALPARAMETERI4UIEXT fnptr, GLuint  program, GLenum  target, GLuint  index, GLuint  x, GLuint  y, GLuint  z, GLuint  w) {
//   (*fnptr)(program, target, index, x, y, z, w);
// }
// void  glowNamedProgramLocalParameterI4uivEXT(PNAMEDPROGRAMLOCALPARAMETERI4UIVEXT fnptr, GLuint  program, GLenum  target, GLuint  index, const GLuint * params) {
//   (*fnptr)(program, target, index, params);
// }
// void  glowNamedProgramLocalParameters4fvEXT(PNAMEDPROGRAMLOCALPARAMETERS4FVEXT fnptr, GLuint  program, GLenum  target, GLuint  index, GLsizei  count, const GLfloat * params) {
//   (*fnptr)(program, target, index, count, params);
// }
// void  glowNamedProgramLocalParametersI4ivEXT(PNAMEDPROGRAMLOCALPARAMETERSI4IVEXT fnptr, GLuint  program, GLenum  target, GLuint  index, GLsizei  count, const GLint * params) {
//   (*fnptr)(program, target, index, count, params);
// }
// void  glowNamedProgramLocalParametersI4uivEXT(PNAMEDPROGRAMLOCALPARAMETERSI4UIVEXT fnptr, GLuint  program, GLenum  target, GLuint  index, GLsizei  count, const GLuint * params) {
//   (*fnptr)(program, target, index, count, params);
// }
// void  glowNamedProgramStringEXT(PNAMEDPROGRAMSTRINGEXT fnptr, GLuint  program, GLenum  target, GLenum  format, GLsizei  len, const void * string) {
//   (*fnptr)(program, target, format, len, string);
// }
// void  glowNamedRenderbufferStorageEXT(PNAMEDRENDERBUFFERSTORAGEEXT fnptr, GLuint  renderbuffer, GLenum  internalformat, GLsizei  width, GLsizei  height) {
//   (*fnptr)(renderbuffer, internalformat, width, height);
// }
// void  glowNamedRenderbufferStorageMultisampleCoverageEXT(PNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXT fnptr, GLuint  renderbuffer, GLsizei  coverageSamples, GLsizei  colorSamples, GLenum  internalformat, GLsizei  width, GLsizei  height) {
//   (*fnptr)(renderbuffer, coverageSamples, colorSamples, internalformat, width, height);
// }
// void  glowNamedRenderbufferStorageMultisampleEXT(PNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXT fnptr, GLuint  renderbuffer, GLsizei  samples, GLenum  internalformat, GLsizei  width, GLsizei  height) {
//   (*fnptr)(renderbuffer, samples, internalformat, width, height);
// }
// void  glowNamedStringARB(PNAMEDSTRINGARB fnptr, GLenum  type, GLint  namelen, const GLchar * name, GLint  stringlen, const GLchar * string) {
//   (*fnptr)(type, namelen, name, stringlen, string);
// }
// GLuint  glowNewObjectBufferATI(PNEWOBJECTBUFFERATI fnptr, GLsizei  size, const void * pointer, GLenum  usage) {
//   return (*fnptr)(size, pointer, usage);
// }
// void  glowNormal3fVertex3fSUN(PNORMAL3FVERTEX3FSUN fnptr, GLfloat  nx, GLfloat  ny, GLfloat  nz, GLfloat  x, GLfloat  y, GLfloat  z) {
//   (*fnptr)(nx, ny, nz, x, y, z);
// }
// void  glowNormal3fVertex3fvSUN(PNORMAL3FVERTEX3FVSUN fnptr, const GLfloat * n, const GLfloat * v) {
//   (*fnptr)(n, v);
// }
// void  glowNormal3hNV(PNORMAL3HNV fnptr, GLhalfNV  nx, GLhalfNV  ny, GLhalfNV  nz) {
//   (*fnptr)(nx, ny, nz);
// }
// void  glowNormal3hvNV(PNORMAL3HVNV fnptr, const GLhalfNV * v) {
//   (*fnptr)(v);
// }
// void  glowNormal3xOES(PNORMAL3XOES fnptr, GLfixed  nx, GLfixed  ny, GLfixed  nz) {
//   (*fnptr)(nx, ny, nz);
// }
// void  glowNormal3xvOES(PNORMAL3XVOES fnptr, const GLfixed * coords) {
//   (*fnptr)(coords);
// }
// void  glowNormalFormatNV(PNORMALFORMATNV fnptr, GLenum  type, GLsizei  stride) {
//   (*fnptr)(type, stride);
// }
// void  glowNormalPointerEXT(PNORMALPOINTEREXT fnptr, GLenum  type, GLsizei  stride, GLsizei  count, const void * pointer) {
//   (*fnptr)(type, stride, count, pointer);
// }
// void  glowNormalPointerListIBM(PNORMALPOINTERLISTIBM fnptr, GLenum  type, GLint  stride, const void ** pointer, GLint  ptrstride) {
//   (*fnptr)(type, stride, pointer, ptrstride);
// }
// void  glowNormalPointervINTEL(PNORMALPOINTERVINTEL fnptr, GLenum  type, const void ** pointer) {
//   (*fnptr)(type, pointer);
// }
// void  glowNormalStream3bATI(PNORMALSTREAM3BATI fnptr, GLenum  stream, GLbyte  nx, GLbyte  ny, GLbyte  nz) {
//   (*fnptr)(stream, nx, ny, nz);
// }
// void  glowNormalStream3bvATI(PNORMALSTREAM3BVATI fnptr, GLenum  stream, const GLbyte * coords) {
//   (*fnptr)(stream, coords);
// }
// void  glowNormalStream3dATI(PNORMALSTREAM3DATI fnptr, GLenum  stream, GLdouble  nx, GLdouble  ny, GLdouble  nz) {
//   (*fnptr)(stream, nx, ny, nz);
// }
// void  glowNormalStream3dvATI(PNORMALSTREAM3DVATI fnptr, GLenum  stream, const GLdouble * coords) {
//   (*fnptr)(stream, coords);
// }
// void  glowNormalStream3fATI(PNORMALSTREAM3FATI fnptr, GLenum  stream, GLfloat  nx, GLfloat  ny, GLfloat  nz) {
//   (*fnptr)(stream, nx, ny, nz);
// }
// void  glowNormalStream3fvATI(PNORMALSTREAM3FVATI fnptr, GLenum  stream, const GLfloat * coords) {
//   (*fnptr)(stream, coords);
// }
// void  glowNormalStream3iATI(PNORMALSTREAM3IATI fnptr, GLenum  stream, GLint  nx, GLint  ny, GLint  nz) {
//   (*fnptr)(stream, nx, ny, nz);
// }
// void  glowNormalStream3ivATI(PNORMALSTREAM3IVATI fnptr, GLenum  stream, const GLint * coords) {
//   (*fnptr)(stream, coords);
// }
// void  glowNormalStream3sATI(PNORMALSTREAM3SATI fnptr, GLenum  stream, GLshort  nx, GLshort  ny, GLshort  nz) {
//   (*fnptr)(stream, nx, ny, nz);
// }
// void  glowNormalStream3svATI(PNORMALSTREAM3SVATI fnptr, GLenum  stream, const GLshort * coords) {
//   (*fnptr)(stream, coords);
// }
// void  glowObjectLabel(POBJECTLABEL fnptr, GLenum  identifier, GLuint  name, GLsizei  length, const GLchar * label) {
//   (*fnptr)(identifier, name, length, label);
// }
// void  glowObjectLabelKHR(POBJECTLABELKHR fnptr, GLenum  identifier, GLuint  name, GLsizei  length, const GLchar * label) {
//   (*fnptr)(identifier, name, length, label);
// }
// void  glowObjectPtrLabel(POBJECTPTRLABEL fnptr, const void * ptr, GLsizei  length, const GLchar * label) {
//   (*fnptr)(ptr, length, label);
// }
// void  glowObjectPtrLabelKHR(POBJECTPTRLABELKHR fnptr, const void * ptr, GLsizei  length, const GLchar * label) {
//   (*fnptr)(ptr, length, label);
// }
// GLenum  glowObjectPurgeableAPPLE(POBJECTPURGEABLEAPPLE fnptr, GLenum  objectType, GLuint  name, GLenum  option) {
//   return (*fnptr)(objectType, name, option);
// }
// GLenum  glowObjectUnpurgeableAPPLE(POBJECTUNPURGEABLEAPPLE fnptr, GLenum  objectType, GLuint  name, GLenum  option) {
//   return (*fnptr)(objectType, name, option);
// }
// void  glowOrthofOES(PORTHOFOES fnptr, GLfloat  l, GLfloat  r, GLfloat  b, GLfloat  t, GLfloat  n, GLfloat  f) {
//   (*fnptr)(l, r, b, t, n, f);
// }
// void  glowOrthoxOES(PORTHOXOES fnptr, GLfixed  l, GLfixed  r, GLfixed  b, GLfixed  t, GLfixed  n, GLfixed  f) {
//   (*fnptr)(l, r, b, t, n, f);
// }
// void  glowPNTrianglesfATI(PPNTRIANGLESFATI fnptr, GLenum  pname, GLfloat  param) {
//   (*fnptr)(pname, param);
// }
// void  glowPNTrianglesiATI(PPNTRIANGLESIATI fnptr, GLenum  pname, GLint  param) {
//   (*fnptr)(pname, param);
// }
// void  glowPassTexCoordATI(PPASSTEXCOORDATI fnptr, GLuint  dst, GLuint  coord, GLenum  swizzle) {
//   (*fnptr)(dst, coord, swizzle);
// }
// void  glowPassThroughxOES(PPASSTHROUGHXOES fnptr, GLfixed  token) {
//   (*fnptr)(token);
// }
// void  glowPatchParameterfv(PPATCHPARAMETERFV fnptr, GLenum  pname, const GLfloat * values) {
//   (*fnptr)(pname, values);
// }
// void  glowPatchParameteri(PPATCHPARAMETERI fnptr, GLenum  pname, GLint  value) {
//   (*fnptr)(pname, value);
// }
// void  glowPathColorGenNV(PPATHCOLORGENNV fnptr, GLenum  color, GLenum  genMode, GLenum  colorFormat, const GLfloat * coeffs) {
//   (*fnptr)(color, genMode, colorFormat, coeffs);
// }
// void  glowPathCommandsNV(PPATHCOMMANDSNV fnptr, GLuint  path, GLsizei  numCommands, const GLubyte * commands, GLsizei  numCoords, GLenum  coordType, const void * coords) {
//   (*fnptr)(path, numCommands, commands, numCoords, coordType, coords);
// }
// void  glowPathCoordsNV(PPATHCOORDSNV fnptr, GLuint  path, GLsizei  numCoords, GLenum  coordType, const void * coords) {
//   (*fnptr)(path, numCoords, coordType, coords);
// }
// void  glowPathCoverDepthFuncNV(PPATHCOVERDEPTHFUNCNV fnptr, GLenum  func) {
//   (*fnptr)(func);
// }
// void  glowPathDashArrayNV(PPATHDASHARRAYNV fnptr, GLuint  path, GLsizei  dashCount, const GLfloat * dashArray) {
//   (*fnptr)(path, dashCount, dashArray);
// }
// void  glowPathFogGenNV(PPATHFOGGENNV fnptr, GLenum  genMode) {
//   (*fnptr)(genMode);
// }
// void  glowPathGlyphRangeNV(PPATHGLYPHRANGENV fnptr, GLuint  firstPathName, GLenum  fontTarget, const void * fontName, GLbitfield  fontStyle, GLuint  firstGlyph, GLsizei  numGlyphs, GLenum  handleMissingGlyphs, GLuint  pathParameterTemplate, GLfloat  emScale) {
//   (*fnptr)(firstPathName, fontTarget, fontName, fontStyle, firstGlyph, numGlyphs, handleMissingGlyphs, pathParameterTemplate, emScale);
// }
// void  glowPathGlyphsNV(PPATHGLYPHSNV fnptr, GLuint  firstPathName, GLenum  fontTarget, const void * fontName, GLbitfield  fontStyle, GLsizei  numGlyphs, GLenum  type, const void * charcodes, GLenum  handleMissingGlyphs, GLuint  pathParameterTemplate, GLfloat  emScale) {
//   (*fnptr)(firstPathName, fontTarget, fontName, fontStyle, numGlyphs, type, charcodes, handleMissingGlyphs, pathParameterTemplate, emScale);
// }
// void  glowPathParameterfNV(PPATHPARAMETERFNV fnptr, GLuint  path, GLenum  pname, GLfloat  value) {
//   (*fnptr)(path, pname, value);
// }
// void  glowPathParameterfvNV(PPATHPARAMETERFVNV fnptr, GLuint  path, GLenum  pname, const GLfloat * value) {
//   (*fnptr)(path, pname, value);
// }
// void  glowPathParameteriNV(PPATHPARAMETERINV fnptr, GLuint  path, GLenum  pname, GLint  value) {
//   (*fnptr)(path, pname, value);
// }
// void  glowPathParameterivNV(PPATHPARAMETERIVNV fnptr, GLuint  path, GLenum  pname, const GLint * value) {
//   (*fnptr)(path, pname, value);
// }
// void  glowPathStencilDepthOffsetNV(PPATHSTENCILDEPTHOFFSETNV fnptr, GLfloat  factor, GLfloat  units) {
//   (*fnptr)(factor, units);
// }
// void  glowPathStencilFuncNV(PPATHSTENCILFUNCNV fnptr, GLenum  func, GLint  ref, GLuint  mask) {
//   (*fnptr)(func, ref, mask);
// }
// void  glowPathStringNV(PPATHSTRINGNV fnptr, GLuint  path, GLenum  format, GLsizei  length, const void * pathString) {
//   (*fnptr)(path, format, length, pathString);
// }
// void  glowPathSubCommandsNV(PPATHSUBCOMMANDSNV fnptr, GLuint  path, GLsizei  commandStart, GLsizei  commandsToDelete, GLsizei  numCommands, const GLubyte * commands, GLsizei  numCoords, GLenum  coordType, const void * coords) {
//   (*fnptr)(path, commandStart, commandsToDelete, numCommands, commands, numCoords, coordType, coords);
// }
// void  glowPathSubCoordsNV(PPATHSUBCOORDSNV fnptr, GLuint  path, GLsizei  coordStart, GLsizei  numCoords, GLenum  coordType, const void * coords) {
//   (*fnptr)(path, coordStart, numCoords, coordType, coords);
// }
// void  glowPathTexGenNV(PPATHTEXGENNV fnptr, GLenum  texCoordSet, GLenum  genMode, GLint  components, const GLfloat * coeffs) {
//   (*fnptr)(texCoordSet, genMode, components, coeffs);
// }
// void  glowPauseTransformFeedback(PPAUSETRANSFORMFEEDBACK fnptr) {
//   (*fnptr)();
// }
// void  glowPauseTransformFeedbackNV(PPAUSETRANSFORMFEEDBACKNV fnptr) {
//   (*fnptr)();
// }
// void  glowPixelDataRangeNV(PPIXELDATARANGENV fnptr, GLenum  target, GLsizei  length, const void * pointer) {
//   (*fnptr)(target, length, pointer);
// }
// void  glowPixelMapx(PPIXELMAPX fnptr, GLenum  map, GLint  size, const GLfixed * values) {
//   (*fnptr)(map, size, values);
// }
// void  glowPixelStoref(PPIXELSTOREF fnptr, GLenum  pname, GLfloat  param) {
//   (*fnptr)(pname, param);
// }
// void  glowPixelStorei(PPIXELSTOREI fnptr, GLenum  pname, GLint  param) {
//   (*fnptr)(pname, param);
// }
// void  glowPixelStorex(PPIXELSTOREX fnptr, GLenum  pname, GLfixed  param) {
//   (*fnptr)(pname, param);
// }
// void  glowPixelTexGenParameterfSGIS(PPIXELTEXGENPARAMETERFSGIS fnptr, GLenum  pname, GLfloat  param) {
//   (*fnptr)(pname, param);
// }
// void  glowPixelTexGenParameterfvSGIS(PPIXELTEXGENPARAMETERFVSGIS fnptr, GLenum  pname, const GLfloat * params) {
//   (*fnptr)(pname, params);
// }
// void  glowPixelTexGenParameteriSGIS(PPIXELTEXGENPARAMETERISGIS fnptr, GLenum  pname, GLint  param) {
//   (*fnptr)(pname, param);
// }
// void  glowPixelTexGenParameterivSGIS(PPIXELTEXGENPARAMETERIVSGIS fnptr, GLenum  pname, const GLint * params) {
//   (*fnptr)(pname, params);
// }
// void  glowPixelTexGenSGIX(PPIXELTEXGENSGIX fnptr, GLenum  mode) {
//   (*fnptr)(mode);
// }
// void  glowPixelTransferxOES(PPIXELTRANSFERXOES fnptr, GLenum  pname, GLfixed  param) {
//   (*fnptr)(pname, param);
// }
// void  glowPixelTransformParameterfEXT(PPIXELTRANSFORMPARAMETERFEXT fnptr, GLenum  target, GLenum  pname, GLfloat  param) {
//   (*fnptr)(target, pname, param);
// }
// void  glowPixelTransformParameterfvEXT(PPIXELTRANSFORMPARAMETERFVEXT fnptr, GLenum  target, GLenum  pname, const GLfloat * params) {
//   (*fnptr)(target, pname, params);
// }
// void  glowPixelTransformParameteriEXT(PPIXELTRANSFORMPARAMETERIEXT fnptr, GLenum  target, GLenum  pname, GLint  param) {
//   (*fnptr)(target, pname, param);
// }
// void  glowPixelTransformParameterivEXT(PPIXELTRANSFORMPARAMETERIVEXT fnptr, GLenum  target, GLenum  pname, const GLint * params) {
//   (*fnptr)(target, pname, params);
// }
// void  glowPixelZoomxOES(PPIXELZOOMXOES fnptr, GLfixed  xfactor, GLfixed  yfactor) {
//   (*fnptr)(xfactor, yfactor);
// }
// GLboolean  glowPointAlongPathNV(PPOINTALONGPATHNV fnptr, GLuint  path, GLsizei  startSegment, GLsizei  numSegments, GLfloat  distance, GLfloat * x, GLfloat * y, GLfloat * tangentX, GLfloat * tangentY) {
//   return (*fnptr)(path, startSegment, numSegments, distance, x, y, tangentX, tangentY);
// }
// void  glowPointParameterf(PPOINTPARAMETERF fnptr, GLenum  pname, GLfloat  param) {
//   (*fnptr)(pname, param);
// }
// void  glowPointParameterfARB(PPOINTPARAMETERFARB fnptr, GLenum  pname, GLfloat  param) {
//   (*fnptr)(pname, param);
// }
// void  glowPointParameterfEXT(PPOINTPARAMETERFEXT fnptr, GLenum  pname, GLfloat  param) {
//   (*fnptr)(pname, param);
// }
// void  glowPointParameterfSGIS(PPOINTPARAMETERFSGIS fnptr, GLenum  pname, GLfloat  param) {
//   (*fnptr)(pname, param);
// }
// void  glowPointParameterfv(PPOINTPARAMETERFV fnptr, GLenum  pname, const GLfloat * params) {
//   (*fnptr)(pname, params);
// }
// void  glowPointParameterfvARB(PPOINTPARAMETERFVARB fnptr, GLenum  pname, const GLfloat * params) {
//   (*fnptr)(pname, params);
// }
// void  glowPointParameterfvEXT(PPOINTPARAMETERFVEXT fnptr, GLenum  pname, const GLfloat * params) {
//   (*fnptr)(pname, params);
// }
// void  glowPointParameterfvSGIS(PPOINTPARAMETERFVSGIS fnptr, GLenum  pname, const GLfloat * params) {
//   (*fnptr)(pname, params);
// }
// void  glowPointParameteri(PPOINTPARAMETERI fnptr, GLenum  pname, GLint  param) {
//   (*fnptr)(pname, param);
// }
// void  glowPointParameteriNV(PPOINTPARAMETERINV fnptr, GLenum  pname, GLint  param) {
//   (*fnptr)(pname, param);
// }
// void  glowPointParameteriv(PPOINTPARAMETERIV fnptr, GLenum  pname, const GLint * params) {
//   (*fnptr)(pname, params);
// }
// void  glowPointParameterivNV(PPOINTPARAMETERIVNV fnptr, GLenum  pname, const GLint * params) {
//   (*fnptr)(pname, params);
// }
// void  glowPointParameterxOES(PPOINTPARAMETERXOES fnptr, GLenum  pname, GLfixed  param) {
//   (*fnptr)(pname, param);
// }
// void  glowPointParameterxvOES(PPOINTPARAMETERXVOES fnptr, GLenum  pname, const GLfixed * params) {
//   (*fnptr)(pname, params);
// }
// void  glowPointSize(PPOINTSIZE fnptr, GLfloat  size) {
//   (*fnptr)(size);
// }
// void  glowPointSizexOES(PPOINTSIZEXOES fnptr, GLfixed  size) {
//   (*fnptr)(size);
// }
// GLint  glowPollAsyncSGIX(PPOLLASYNCSGIX fnptr, GLuint * markerp) {
//   return (*fnptr)(markerp);
// }
// GLint  glowPollInstrumentsSGIX(PPOLLINSTRUMENTSSGIX fnptr, GLint * marker_p) {
//   return (*fnptr)(marker_p);
// }
// void  glowPolygonMode(PPOLYGONMODE fnptr, GLenum  face, GLenum  mode) {
//   (*fnptr)(face, mode);
// }
// void  glowPolygonOffset(PPOLYGONOFFSET fnptr, GLfloat  factor, GLfloat  units) {
//   (*fnptr)(factor, units);
// }
// void  glowPolygonOffsetEXT(PPOLYGONOFFSETEXT fnptr, GLfloat  factor, GLfloat  bias) {
//   (*fnptr)(factor, bias);
// }
// void  glowPolygonOffsetxOES(PPOLYGONOFFSETXOES fnptr, GLfixed  factor, GLfixed  units) {
//   (*fnptr)(factor, units);
// }
// void  glowPopDebugGroup(PPOPDEBUGGROUP fnptr) {
//   (*fnptr)();
// }
// void  glowPopDebugGroupKHR(PPOPDEBUGGROUPKHR fnptr) {
//   (*fnptr)();
// }
// void  glowPopGroupMarkerEXT(PPOPGROUPMARKEREXT fnptr) {
//   (*fnptr)();
// }
// void  glowPresentFrameDualFillNV(PPRESENTFRAMEDUALFILLNV fnptr, GLuint  video_slot, GLuint64EXT  minPresentTime, GLuint  beginPresentTimeId, GLuint  presentDurationId, GLenum  type, GLenum  target0, GLuint  fill0, GLenum  target1, GLuint  fill1, GLenum  target2, GLuint  fill2, GLenum  target3, GLuint  fill3) {
//   (*fnptr)(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, target1, fill1, target2, fill2, target3, fill3);
// }
// void  glowPresentFrameKeyedNV(PPRESENTFRAMEKEYEDNV fnptr, GLuint  video_slot, GLuint64EXT  minPresentTime, GLuint  beginPresentTimeId, GLuint  presentDurationId, GLenum  type, GLenum  target0, GLuint  fill0, GLuint  key0, GLenum  target1, GLuint  fill1, GLuint  key1) {
//   (*fnptr)(video_slot, minPresentTime, beginPresentTimeId, presentDurationId, type, target0, fill0, key0, target1, fill1, key1);
// }
// void  glowPrimitiveRestartIndex(PPRIMITIVERESTARTINDEX fnptr, GLuint  index) {
//   (*fnptr)(index);
// }
// void  glowPrimitiveRestartIndexNV(PPRIMITIVERESTARTINDEXNV fnptr, GLuint  index) {
//   (*fnptr)(index);
// }
// void  glowPrimitiveRestartNV(PPRIMITIVERESTARTNV fnptr) {
//   (*fnptr)();
// }
// void  glowPrioritizeTexturesEXT(PPRIORITIZETEXTURESEXT fnptr, GLsizei  n, const GLuint * textures, const GLclampf * priorities) {
//   (*fnptr)(n, textures, priorities);
// }
// void  glowPrioritizeTexturesxOES(PPRIORITIZETEXTURESXOES fnptr, GLsizei  n, const GLuint * textures, const GLfixed * priorities) {
//   (*fnptr)(n, textures, priorities);
// }
// void  glowProgramBinary(PPROGRAMBINARY fnptr, GLuint  program, GLenum  binaryFormat, const void * binary, GLsizei  length) {
//   (*fnptr)(program, binaryFormat, binary, length);
// }
// void  glowProgramBufferParametersIivNV(PPROGRAMBUFFERPARAMETERSIIVNV fnptr, GLenum  target, GLuint  bindingIndex, GLuint  wordIndex, GLsizei  count, const GLint * params) {
//   (*fnptr)(target, bindingIndex, wordIndex, count, params);
// }
// void  glowProgramBufferParametersIuivNV(PPROGRAMBUFFERPARAMETERSIUIVNV fnptr, GLenum  target, GLuint  bindingIndex, GLuint  wordIndex, GLsizei  count, const GLuint * params) {
//   (*fnptr)(target, bindingIndex, wordIndex, count, params);
// }
// void  glowProgramBufferParametersfvNV(PPROGRAMBUFFERPARAMETERSFVNV fnptr, GLenum  target, GLuint  bindingIndex, GLuint  wordIndex, GLsizei  count, const GLfloat * params) {
//   (*fnptr)(target, bindingIndex, wordIndex, count, params);
// }
// void  glowProgramEnvParameter4dARB(PPROGRAMENVPARAMETER4DARB fnptr, GLenum  target, GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w) {
//   (*fnptr)(target, index, x, y, z, w);
// }
// void  glowProgramEnvParameter4dvARB(PPROGRAMENVPARAMETER4DVARB fnptr, GLenum  target, GLuint  index, const GLdouble * params) {
//   (*fnptr)(target, index, params);
// }
// void  glowProgramEnvParameter4fARB(PPROGRAMENVPARAMETER4FARB fnptr, GLenum  target, GLuint  index, GLfloat  x, GLfloat  y, GLfloat  z, GLfloat  w) {
//   (*fnptr)(target, index, x, y, z, w);
// }
// void  glowProgramEnvParameter4fvARB(PPROGRAMENVPARAMETER4FVARB fnptr, GLenum  target, GLuint  index, const GLfloat * params) {
//   (*fnptr)(target, index, params);
// }
// void  glowProgramEnvParameterI4iNV(PPROGRAMENVPARAMETERI4INV fnptr, GLenum  target, GLuint  index, GLint  x, GLint  y, GLint  z, GLint  w) {
//   (*fnptr)(target, index, x, y, z, w);
// }
// void  glowProgramEnvParameterI4ivNV(PPROGRAMENVPARAMETERI4IVNV fnptr, GLenum  target, GLuint  index, const GLint * params) {
//   (*fnptr)(target, index, params);
// }
// void  glowProgramEnvParameterI4uiNV(PPROGRAMENVPARAMETERI4UINV fnptr, GLenum  target, GLuint  index, GLuint  x, GLuint  y, GLuint  z, GLuint  w) {
//   (*fnptr)(target, index, x, y, z, w);
// }
// void  glowProgramEnvParameterI4uivNV(PPROGRAMENVPARAMETERI4UIVNV fnptr, GLenum  target, GLuint  index, const GLuint * params) {
//   (*fnptr)(target, index, params);
// }
// void  glowProgramEnvParameters4fvEXT(PPROGRAMENVPARAMETERS4FVEXT fnptr, GLenum  target, GLuint  index, GLsizei  count, const GLfloat * params) {
//   (*fnptr)(target, index, count, params);
// }
// void  glowProgramEnvParametersI4ivNV(PPROGRAMENVPARAMETERSI4IVNV fnptr, GLenum  target, GLuint  index, GLsizei  count, const GLint * params) {
//   (*fnptr)(target, index, count, params);
// }
// void  glowProgramEnvParametersI4uivNV(PPROGRAMENVPARAMETERSI4UIVNV fnptr, GLenum  target, GLuint  index, GLsizei  count, const GLuint * params) {
//   (*fnptr)(target, index, count, params);
// }
// void  glowProgramLocalParameter4dARB(PPROGRAMLOCALPARAMETER4DARB fnptr, GLenum  target, GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w) {
//   (*fnptr)(target, index, x, y, z, w);
// }
// void  glowProgramLocalParameter4dvARB(PPROGRAMLOCALPARAMETER4DVARB fnptr, GLenum  target, GLuint  index, const GLdouble * params) {
//   (*fnptr)(target, index, params);
// }
// void  glowProgramLocalParameter4fARB(PPROGRAMLOCALPARAMETER4FARB fnptr, GLenum  target, GLuint  index, GLfloat  x, GLfloat  y, GLfloat  z, GLfloat  w) {
//   (*fnptr)(target, index, x, y, z, w);
// }
// void  glowProgramLocalParameter4fvARB(PPROGRAMLOCALPARAMETER4FVARB fnptr, GLenum  target, GLuint  index, const GLfloat * params) {
//   (*fnptr)(target, index, params);
// }
// void  glowProgramLocalParameterI4iNV(PPROGRAMLOCALPARAMETERI4INV fnptr, GLenum  target, GLuint  index, GLint  x, GLint  y, GLint  z, GLint  w) {
//   (*fnptr)(target, index, x, y, z, w);
// }
// void  glowProgramLocalParameterI4ivNV(PPROGRAMLOCALPARAMETERI4IVNV fnptr, GLenum  target, GLuint  index, const GLint * params) {
//   (*fnptr)(target, index, params);
// }
// void  glowProgramLocalParameterI4uiNV(PPROGRAMLOCALPARAMETERI4UINV fnptr, GLenum  target, GLuint  index, GLuint  x, GLuint  y, GLuint  z, GLuint  w) {
//   (*fnptr)(target, index, x, y, z, w);
// }
// void  glowProgramLocalParameterI4uivNV(PPROGRAMLOCALPARAMETERI4UIVNV fnptr, GLenum  target, GLuint  index, const GLuint * params) {
//   (*fnptr)(target, index, params);
// }
// void  glowProgramLocalParameters4fvEXT(PPROGRAMLOCALPARAMETERS4FVEXT fnptr, GLenum  target, GLuint  index, GLsizei  count, const GLfloat * params) {
//   (*fnptr)(target, index, count, params);
// }
// void  glowProgramLocalParametersI4ivNV(PPROGRAMLOCALPARAMETERSI4IVNV fnptr, GLenum  target, GLuint  index, GLsizei  count, const GLint * params) {
//   (*fnptr)(target, index, count, params);
// }
// void  glowProgramLocalParametersI4uivNV(PPROGRAMLOCALPARAMETERSI4UIVNV fnptr, GLenum  target, GLuint  index, GLsizei  count, const GLuint * params) {
//   (*fnptr)(target, index, count, params);
// }
// void  glowProgramNamedParameter4dNV(PPROGRAMNAMEDPARAMETER4DNV fnptr, GLuint  id, GLsizei  len, const GLubyte * name, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w) {
//   (*fnptr)(id, len, name, x, y, z, w);
// }
// void  glowProgramNamedParameter4dvNV(PPROGRAMNAMEDPARAMETER4DVNV fnptr, GLuint  id, GLsizei  len, const GLubyte * name, const GLdouble * v) {
//   (*fnptr)(id, len, name, v);
// }
// void  glowProgramNamedParameter4fNV(PPROGRAMNAMEDPARAMETER4FNV fnptr, GLuint  id, GLsizei  len, const GLubyte * name, GLfloat  x, GLfloat  y, GLfloat  z, GLfloat  w) {
//   (*fnptr)(id, len, name, x, y, z, w);
// }
// void  glowProgramNamedParameter4fvNV(PPROGRAMNAMEDPARAMETER4FVNV fnptr, GLuint  id, GLsizei  len, const GLubyte * name, const GLfloat * v) {
//   (*fnptr)(id, len, name, v);
// }
// void  glowProgramParameter4dNV(PPROGRAMPARAMETER4DNV fnptr, GLenum  target, GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w) {
//   (*fnptr)(target, index, x, y, z, w);
// }
// void  glowProgramParameter4dvNV(PPROGRAMPARAMETER4DVNV fnptr, GLenum  target, GLuint  index, const GLdouble * v) {
//   (*fnptr)(target, index, v);
// }
// void  glowProgramParameter4fNV(PPROGRAMPARAMETER4FNV fnptr, GLenum  target, GLuint  index, GLfloat  x, GLfloat  y, GLfloat  z, GLfloat  w) {
//   (*fnptr)(target, index, x, y, z, w);
// }
// void  glowProgramParameter4fvNV(PPROGRAMPARAMETER4FVNV fnptr, GLenum  target, GLuint  index, const GLfloat * v) {
//   (*fnptr)(target, index, v);
// }
// void  glowProgramParameteri(PPROGRAMPARAMETERI fnptr, GLuint  program, GLenum  pname, GLint  value) {
//   (*fnptr)(program, pname, value);
// }
// void  glowProgramParameteriARB(PPROGRAMPARAMETERIARB fnptr, GLuint  program, GLenum  pname, GLint  value) {
//   (*fnptr)(program, pname, value);
// }
// void  glowProgramParameteriEXT(PPROGRAMPARAMETERIEXT fnptr, GLuint  program, GLenum  pname, GLint  value) {
//   (*fnptr)(program, pname, value);
// }
// void  glowProgramParameters4dvNV(PPROGRAMPARAMETERS4DVNV fnptr, GLenum  target, GLuint  index, GLsizei  count, const GLdouble * v) {
//   (*fnptr)(target, index, count, v);
// }
// void  glowProgramParameters4fvNV(PPROGRAMPARAMETERS4FVNV fnptr, GLenum  target, GLuint  index, GLsizei  count, const GLfloat * v) {
//   (*fnptr)(target, index, count, v);
// }
// void  glowProgramStringARB(PPROGRAMSTRINGARB fnptr, GLenum  target, GLenum  format, GLsizei  len, const void * string) {
//   (*fnptr)(target, format, len, string);
// }
// void  glowProgramSubroutineParametersuivNV(PPROGRAMSUBROUTINEPARAMETERSUIVNV fnptr, GLenum  target, GLsizei  count, const GLuint * params) {
//   (*fnptr)(target, count, params);
// }
// void  glowProgramUniform1d(PPROGRAMUNIFORM1D fnptr, GLuint  program, GLint  location, GLdouble  v0) {
//   (*fnptr)(program, location, v0);
// }
// void  glowProgramUniform1dEXT(PPROGRAMUNIFORM1DEXT fnptr, GLuint  program, GLint  location, GLdouble  x) {
//   (*fnptr)(program, location, x);
// }
// void  glowProgramUniform1dv(PPROGRAMUNIFORM1DV fnptr, GLuint  program, GLint  location, GLsizei  count, const GLdouble * value) {
//   (*fnptr)(program, location, count, value);
// }
// void  glowProgramUniform1dvEXT(PPROGRAMUNIFORM1DVEXT fnptr, GLuint  program, GLint  location, GLsizei  count, const GLdouble * value) {
//   (*fnptr)(program, location, count, value);
// }
// void  glowProgramUniform1f(PPROGRAMUNIFORM1F fnptr, GLuint  program, GLint  location, GLfloat  v0) {
//   (*fnptr)(program, location, v0);
// }
// void  glowProgramUniform1fEXT(PPROGRAMUNIFORM1FEXT fnptr, GLuint  program, GLint  location, GLfloat  v0) {
//   (*fnptr)(program, location, v0);
// }
// void  glowProgramUniform1fv(PPROGRAMUNIFORM1FV fnptr, GLuint  program, GLint  location, GLsizei  count, const GLfloat * value) {
//   (*fnptr)(program, location, count, value);
// }
// void  glowProgramUniform1fvEXT(PPROGRAMUNIFORM1FVEXT fnptr, GLuint  program, GLint  location, GLsizei  count, const GLfloat * value) {
//   (*fnptr)(program, location, count, value);
// }
// void  glowProgramUniform1i(PPROGRAMUNIFORM1I fnptr, GLuint  program, GLint  location, GLint  v0) {
//   (*fnptr)(program, location, v0);
// }
// void  glowProgramUniform1i64NV(PPROGRAMUNIFORM1I64NV fnptr, GLuint  program, GLint  location, GLint64EXT  x) {
//   (*fnptr)(program, location, x);
// }
// void  glowProgramUniform1i64vNV(PPROGRAMUNIFORM1I64VNV fnptr, GLuint  program, GLint  location, GLsizei  count, const GLint64EXT * value) {
//   (*fnptr)(program, location, count, value);
// }
// void  glowProgramUniform1iEXT(PPROGRAMUNIFORM1IEXT fnptr, GLuint  program, GLint  location, GLint  v0) {
//   (*fnptr)(program, location, v0);
// }
// void  glowProgramUniform1iv(PPROGRAMUNIFORM1IV fnptr, GLuint  program, GLint  location, GLsizei  count, const GLint * value) {
//   (*fnptr)(program, location, count, value);
// }
// void  glowProgramUniform1ivEXT(PPROGRAMUNIFORM1IVEXT fnptr, GLuint  program, GLint  location, GLsizei  count, const GLint * value) {
//   (*fnptr)(program, location, count, value);
// }
// void  glowProgramUniform1ui(PPROGRAMUNIFORM1UI fnptr, GLuint  program, GLint  location, GLuint  v0) {
//   (*fnptr)(program, location, v0);
// }
// void  glowProgramUniform1ui64NV(PPROGRAMUNIFORM1UI64NV fnptr, GLuint  program, GLint  location, GLuint64EXT  x) {
//   (*fnptr)(program, location, x);
// }
// void  glowProgramUniform1ui64vNV(PPROGRAMUNIFORM1UI64VNV fnptr, GLuint  program, GLint  location, GLsizei  count, const GLuint64EXT * value) {
//   (*fnptr)(program, location, count, value);
// }
// void  glowProgramUniform1uiEXT(PPROGRAMUNIFORM1UIEXT fnptr, GLuint  program, GLint  location, GLuint  v0) {
//   (*fnptr)(program, location, v0);
// }
// void  glowProgramUniform1uiv(PPROGRAMUNIFORM1UIV fnptr, GLuint  program, GLint  location, GLsizei  count, const GLuint * value) {
//   (*fnptr)(program, location, count, value);
// }
// void  glowProgramUniform1uivEXT(PPROGRAMUNIFORM1UIVEXT fnptr, GLuint  program, GLint  location, GLsizei  count, const GLuint * value) {
//   (*fnptr)(program, location, count, value);
// }
// void  glowProgramUniform2d(PPROGRAMUNIFORM2D fnptr, GLuint  program, GLint  location, GLdouble  v0, GLdouble  v1) {
//   (*fnptr)(program, location, v0, v1);
// }
// void  glowProgramUniform2dEXT(PPROGRAMUNIFORM2DEXT fnptr, GLuint  program, GLint  location, GLdouble  x, GLdouble  y) {
//   (*fnptr)(program, location, x, y);
// }
// void  glowProgramUniform2dv(PPROGRAMUNIFORM2DV fnptr, GLuint  program, GLint  location, GLsizei  count, const GLdouble * value) {
//   (*fnptr)(program, location, count, value);
// }
// void  glowProgramUniform2dvEXT(PPROGRAMUNIFORM2DVEXT fnptr, GLuint  program, GLint  location, GLsizei  count, const GLdouble * value) {
//   (*fnptr)(program, location, count, value);
// }
// void  glowProgramUniform2f(PPROGRAMUNIFORM2F fnptr, GLuint  program, GLint  location, GLfloat  v0, GLfloat  v1) {
//   (*fnptr)(program, location, v0, v1);
// }
// void  glowProgramUniform2fEXT(PPROGRAMUNIFORM2FEXT fnptr, GLuint  program, GLint  location, GLfloat  v0, GLfloat  v1) {
//   (*fnptr)(program, location, v0, v1);
// }
// void  glowProgramUniform2fv(PPROGRAMUNIFORM2FV fnptr, GLuint  program, GLint  location, GLsizei  count, const GLfloat * value) {
//   (*fnptr)(program, location, count, value);
// }
// void  glowProgramUniform2fvEXT(PPROGRAMUNIFORM2FVEXT fnptr, GLuint  program, GLint  location, GLsizei  count, const GLfloat * value) {
//   (*fnptr)(program, location, count, value);
// }
// void  glowProgramUniform2i(PPROGRAMUNIFORM2I fnptr, GLuint  program, GLint  location, GLint  v0, GLint  v1) {
//   (*fnptr)(program, location, v0, v1);
// }
// void  glowProgramUniform2i64NV(PPROGRAMUNIFORM2I64NV fnptr, GLuint  program, GLint  location, GLint64EXT  x, GLint64EXT  y) {
//   (*fnptr)(program, location, x, y);
// }
// void  glowProgramUniform2i64vNV(PPROGRAMUNIFORM2I64VNV fnptr, GLuint  program, GLint  location, GLsizei  count, const GLint64EXT * value) {
//   (*fnptr)(program, location, count, value);
// }
// void  glowProgramUniform2iEXT(PPROGRAMUNIFORM2IEXT fnptr, GLuint  program, GLint  location, GLint  v0, GLint  v1) {
//   (*fnptr)(program, location, v0, v1);
// }
// void  glowProgramUniform2iv(PPROGRAMUNIFORM2IV fnptr, GLuint  program, GLint  location, GLsizei  count, const GLint * value) {
//   (*fnptr)(program, location, count, value);
// }
// void  glowProgramUniform2ivEXT(PPROGRAMUNIFORM2IVEXT fnptr, GLuint  program, GLint  location, GLsizei  count, const GLint * value) {
//   (*fnptr)(program, location, count, value);
// }
// void  glowProgramUniform2ui(PPROGRAMUNIFORM2UI fnptr, GLuint  program, GLint  location, GLuint  v0, GLuint  v1) {
//   (*fnptr)(program, location, v0, v1);
// }
// void  glowProgramUniform2ui64NV(PPROGRAMUNIFORM2UI64NV fnptr, GLuint  program, GLint  location, GLuint64EXT  x, GLuint64EXT  y) {
//   (*fnptr)(program, location, x, y);
// }
// void  glowProgramUniform2ui64vNV(PPROGRAMUNIFORM2UI64VNV fnptr, GLuint  program, GLint  location, GLsizei  count, const GLuint64EXT * value) {
//   (*fnptr)(program, location, count, value);
// }
// void  glowProgramUniform2uiEXT(PPROGRAMUNIFORM2UIEXT fnptr, GLuint  program, GLint  location, GLuint  v0, GLuint  v1) {
//   (*fnptr)(program, location, v0, v1);
// }
// void  glowProgramUniform2uiv(PPROGRAMUNIFORM2UIV fnptr, GLuint  program, GLint  location, GLsizei  count, const GLuint * value) {
//   (*fnptr)(program, location, count, value);
// }
// void  glowProgramUniform2uivEXT(PPROGRAMUNIFORM2UIVEXT fnptr, GLuint  program, GLint  location, GLsizei  count, const GLuint * value) {
//   (*fnptr)(program, location, count, value);
// }
// void  glowProgramUniform3d(PPROGRAMUNIFORM3D fnptr, GLuint  program, GLint  location, GLdouble  v0, GLdouble  v1, GLdouble  v2) {
//   (*fnptr)(program, location, v0, v1, v2);
// }
// void  glowProgramUniform3dEXT(PPROGRAMUNIFORM3DEXT fnptr, GLuint  program, GLint  location, GLdouble  x, GLdouble  y, GLdouble  z) {
//   (*fnptr)(program, location, x, y, z);
// }
// void  glowProgramUniform3dv(PPROGRAMUNIFORM3DV fnptr, GLuint  program, GLint  location, GLsizei  count, const GLdouble * value) {
//   (*fnptr)(program, location, count, value);
// }
// void  glowProgramUniform3dvEXT(PPROGRAMUNIFORM3DVEXT fnptr, GLuint  program, GLint  location, GLsizei  count, const GLdouble * value) {
//   (*fnptr)(program, location, count, value);
// }
// void  glowProgramUniform3f(PPROGRAMUNIFORM3F fnptr, GLuint  program, GLint  location, GLfloat  v0, GLfloat  v1, GLfloat  v2) {
//   (*fnptr)(program, location, v0, v1, v2);
// }
// void  glowProgramUniform3fEXT(PPROGRAMUNIFORM3FEXT fnptr, GLuint  program, GLint  location, GLfloat  v0, GLfloat  v1, GLfloat  v2) {
//   (*fnptr)(program, location, v0, v1, v2);
// }
// void  glowProgramUniform3fv(PPROGRAMUNIFORM3FV fnptr, GLuint  program, GLint  location, GLsizei  count, const GLfloat * value) {
//   (*fnptr)(program, location, count, value);
// }
// void  glowProgramUniform3fvEXT(PPROGRAMUNIFORM3FVEXT fnptr, GLuint  program, GLint  location, GLsizei  count, const GLfloat * value) {
//   (*fnptr)(program, location, count, value);
// }
// void  glowProgramUniform3i(PPROGRAMUNIFORM3I fnptr, GLuint  program, GLint  location, GLint  v0, GLint  v1, GLint  v2) {
//   (*fnptr)(program, location, v0, v1, v2);
// }
// void  glowProgramUniform3i64NV(PPROGRAMUNIFORM3I64NV fnptr, GLuint  program, GLint  location, GLint64EXT  x, GLint64EXT  y, GLint64EXT  z) {
//   (*fnptr)(program, location, x, y, z);
// }
// void  glowProgramUniform3i64vNV(PPROGRAMUNIFORM3I64VNV fnptr, GLuint  program, GLint  location, GLsizei  count, const GLint64EXT * value) {
//   (*fnptr)(program, location, count, value);
// }
// void  glowProgramUniform3iEXT(PPROGRAMUNIFORM3IEXT fnptr, GLuint  program, GLint  location, GLint  v0, GLint  v1, GLint  v2) {
//   (*fnptr)(program, location, v0, v1, v2);
// }
// void  glowProgramUniform3iv(PPROGRAMUNIFORM3IV fnptr, GLuint  program, GLint  location, GLsizei  count, const GLint * value) {
//   (*fnptr)(program, location, count, value);
// }
// void  glowProgramUniform3ivEXT(PPROGRAMUNIFORM3IVEXT fnptr, GLuint  program, GLint  location, GLsizei  count, const GLint * value) {
//   (*fnptr)(program, location, count, value);
// }
// void  glowProgramUniform3ui(PPROGRAMUNIFORM3UI fnptr, GLuint  program, GLint  location, GLuint  v0, GLuint  v1, GLuint  v2) {
//   (*fnptr)(program, location, v0, v1, v2);
// }
// void  glowProgramUniform3ui64NV(PPROGRAMUNIFORM3UI64NV fnptr, GLuint  program, GLint  location, GLuint64EXT  x, GLuint64EXT  y, GLuint64EXT  z) {
//   (*fnptr)(program, location, x, y, z);
// }
// void  glowProgramUniform3ui64vNV(PPROGRAMUNIFORM3UI64VNV fnptr, GLuint  program, GLint  location, GLsizei  count, const GLuint64EXT * value) {
//   (*fnptr)(program, location, count, value);
// }
// void  glowProgramUniform3uiEXT(PPROGRAMUNIFORM3UIEXT fnptr, GLuint  program, GLint  location, GLuint  v0, GLuint  v1, GLuint  v2) {
//   (*fnptr)(program, location, v0, v1, v2);
// }
// void  glowProgramUniform3uiv(PPROGRAMUNIFORM3UIV fnptr, GLuint  program, GLint  location, GLsizei  count, const GLuint * value) {
//   (*fnptr)(program, location, count, value);
// }
// void  glowProgramUniform3uivEXT(PPROGRAMUNIFORM3UIVEXT fnptr, GLuint  program, GLint  location, GLsizei  count, const GLuint * value) {
//   (*fnptr)(program, location, count, value);
// }
// void  glowProgramUniform4d(PPROGRAMUNIFORM4D fnptr, GLuint  program, GLint  location, GLdouble  v0, GLdouble  v1, GLdouble  v2, GLdouble  v3) {
//   (*fnptr)(program, location, v0, v1, v2, v3);
// }
// void  glowProgramUniform4dEXT(PPROGRAMUNIFORM4DEXT fnptr, GLuint  program, GLint  location, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w) {
//   (*fnptr)(program, location, x, y, z, w);
// }
// void  glowProgramUniform4dv(PPROGRAMUNIFORM4DV fnptr, GLuint  program, GLint  location, GLsizei  count, const GLdouble * value) {
//   (*fnptr)(program, location, count, value);
// }
// void  glowProgramUniform4dvEXT(PPROGRAMUNIFORM4DVEXT fnptr, GLuint  program, GLint  location, GLsizei  count, const GLdouble * value) {
//   (*fnptr)(program, location, count, value);
// }
// void  glowProgramUniform4f(PPROGRAMUNIFORM4F fnptr, GLuint  program, GLint  location, GLfloat  v0, GLfloat  v1, GLfloat  v2, GLfloat  v3) {
//   (*fnptr)(program, location, v0, v1, v2, v3);
// }
// void  glowProgramUniform4fEXT(PPROGRAMUNIFORM4FEXT fnptr, GLuint  program, GLint  location, GLfloat  v0, GLfloat  v1, GLfloat  v2, GLfloat  v3) {
//   (*fnptr)(program, location, v0, v1, v2, v3);
// }
// void  glowProgramUniform4fv(PPROGRAMUNIFORM4FV fnptr, GLuint  program, GLint  location, GLsizei  count, const GLfloat * value) {
//   (*fnptr)(program, location, count, value);
// }
// void  glowProgramUniform4fvEXT(PPROGRAMUNIFORM4FVEXT fnptr, GLuint  program, GLint  location, GLsizei  count, const GLfloat * value) {
//   (*fnptr)(program, location, count, value);
// }
// void  glowProgramUniform4i(PPROGRAMUNIFORM4I fnptr, GLuint  program, GLint  location, GLint  v0, GLint  v1, GLint  v2, GLint  v3) {
//   (*fnptr)(program, location, v0, v1, v2, v3);
// }
// void  glowProgramUniform4i64NV(PPROGRAMUNIFORM4I64NV fnptr, GLuint  program, GLint  location, GLint64EXT  x, GLint64EXT  y, GLint64EXT  z, GLint64EXT  w) {
//   (*fnptr)(program, location, x, y, z, w);
// }
// void  glowProgramUniform4i64vNV(PPROGRAMUNIFORM4I64VNV fnptr, GLuint  program, GLint  location, GLsizei  count, const GLint64EXT * value) {
//   (*fnptr)(program, location, count, value);
// }
// void  glowProgramUniform4iEXT(PPROGRAMUNIFORM4IEXT fnptr, GLuint  program, GLint  location, GLint  v0, GLint  v1, GLint  v2, GLint  v3) {
//   (*fnptr)(program, location, v0, v1, v2, v3);
// }
// void  glowProgramUniform4iv(PPROGRAMUNIFORM4IV fnptr, GLuint  program, GLint  location, GLsizei  count, const GLint * value) {
//   (*fnptr)(program, location, count, value);
// }
// void  glowProgramUniform4ivEXT(PPROGRAMUNIFORM4IVEXT fnptr, GLuint  program, GLint  location, GLsizei  count, const GLint * value) {
//   (*fnptr)(program, location, count, value);
// }
// void  glowProgramUniform4ui(PPROGRAMUNIFORM4UI fnptr, GLuint  program, GLint  location, GLuint  v0, GLuint  v1, GLuint  v2, GLuint  v3) {
//   (*fnptr)(program, location, v0, v1, v2, v3);
// }
// void  glowProgramUniform4ui64NV(PPROGRAMUNIFORM4UI64NV fnptr, GLuint  program, GLint  location, GLuint64EXT  x, GLuint64EXT  y, GLuint64EXT  z, GLuint64EXT  w) {
//   (*fnptr)(program, location, x, y, z, w);
// }
// void  glowProgramUniform4ui64vNV(PPROGRAMUNIFORM4UI64VNV fnptr, GLuint  program, GLint  location, GLsizei  count, const GLuint64EXT * value) {
//   (*fnptr)(program, location, count, value);
// }
// void  glowProgramUniform4uiEXT(PPROGRAMUNIFORM4UIEXT fnptr, GLuint  program, GLint  location, GLuint  v0, GLuint  v1, GLuint  v2, GLuint  v3) {
//   (*fnptr)(program, location, v0, v1, v2, v3);
// }
// void  glowProgramUniform4uiv(PPROGRAMUNIFORM4UIV fnptr, GLuint  program, GLint  location, GLsizei  count, const GLuint * value) {
//   (*fnptr)(program, location, count, value);
// }
// void  glowProgramUniform4uivEXT(PPROGRAMUNIFORM4UIVEXT fnptr, GLuint  program, GLint  location, GLsizei  count, const GLuint * value) {
//   (*fnptr)(program, location, count, value);
// }
// void  glowProgramUniformHandleui64ARB(PPROGRAMUNIFORMHANDLEUI64ARB fnptr, GLuint  program, GLint  location, GLuint64  value) {
//   (*fnptr)(program, location, value);
// }
// void  glowProgramUniformHandleui64NV(PPROGRAMUNIFORMHANDLEUI64NV fnptr, GLuint  program, GLint  location, GLuint64  value) {
//   (*fnptr)(program, location, value);
// }
// void  glowProgramUniformHandleui64vARB(PPROGRAMUNIFORMHANDLEUI64VARB fnptr, GLuint  program, GLint  location, GLsizei  count, const GLuint64 * values) {
//   (*fnptr)(program, location, count, values);
// }
// void  glowProgramUniformHandleui64vNV(PPROGRAMUNIFORMHANDLEUI64VNV fnptr, GLuint  program, GLint  location, GLsizei  count, const GLuint64 * values) {
//   (*fnptr)(program, location, count, values);
// }
// void  glowProgramUniformMatrix2dv(PPROGRAMUNIFORMMATRIX2DV fnptr, GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value) {
//   (*fnptr)(program, location, count, transpose, value);
// }
// void  glowProgramUniformMatrix2dvEXT(PPROGRAMUNIFORMMATRIX2DVEXT fnptr, GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value) {
//   (*fnptr)(program, location, count, transpose, value);
// }
// void  glowProgramUniformMatrix2fv(PPROGRAMUNIFORMMATRIX2FV fnptr, GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value) {
//   (*fnptr)(program, location, count, transpose, value);
// }
// void  glowProgramUniformMatrix2fvEXT(PPROGRAMUNIFORMMATRIX2FVEXT fnptr, GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value) {
//   (*fnptr)(program, location, count, transpose, value);
// }
// void  glowProgramUniformMatrix2x3dv(PPROGRAMUNIFORMMATRIX2X3DV fnptr, GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value) {
//   (*fnptr)(program, location, count, transpose, value);
// }
// void  glowProgramUniformMatrix2x3dvEXT(PPROGRAMUNIFORMMATRIX2X3DVEXT fnptr, GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value) {
//   (*fnptr)(program, location, count, transpose, value);
// }
// void  glowProgramUniformMatrix2x3fv(PPROGRAMUNIFORMMATRIX2X3FV fnptr, GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value) {
//   (*fnptr)(program, location, count, transpose, value);
// }
// void  glowProgramUniformMatrix2x3fvEXT(PPROGRAMUNIFORMMATRIX2X3FVEXT fnptr, GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value) {
//   (*fnptr)(program, location, count, transpose, value);
// }
// void  glowProgramUniformMatrix2x4dv(PPROGRAMUNIFORMMATRIX2X4DV fnptr, GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value) {
//   (*fnptr)(program, location, count, transpose, value);
// }
// void  glowProgramUniformMatrix2x4dvEXT(PPROGRAMUNIFORMMATRIX2X4DVEXT fnptr, GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value) {
//   (*fnptr)(program, location, count, transpose, value);
// }
// void  glowProgramUniformMatrix2x4fv(PPROGRAMUNIFORMMATRIX2X4FV fnptr, GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value) {
//   (*fnptr)(program, location, count, transpose, value);
// }
// void  glowProgramUniformMatrix2x4fvEXT(PPROGRAMUNIFORMMATRIX2X4FVEXT fnptr, GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value) {
//   (*fnptr)(program, location, count, transpose, value);
// }
// void  glowProgramUniformMatrix3dv(PPROGRAMUNIFORMMATRIX3DV fnptr, GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value) {
//   (*fnptr)(program, location, count, transpose, value);
// }
// void  glowProgramUniformMatrix3dvEXT(PPROGRAMUNIFORMMATRIX3DVEXT fnptr, GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value) {
//   (*fnptr)(program, location, count, transpose, value);
// }
// void  glowProgramUniformMatrix3fv(PPROGRAMUNIFORMMATRIX3FV fnptr, GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value) {
//   (*fnptr)(program, location, count, transpose, value);
// }
// void  glowProgramUniformMatrix3fvEXT(PPROGRAMUNIFORMMATRIX3FVEXT fnptr, GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value) {
//   (*fnptr)(program, location, count, transpose, value);
// }
// void  glowProgramUniformMatrix3x2dv(PPROGRAMUNIFORMMATRIX3X2DV fnptr, GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value) {
//   (*fnptr)(program, location, count, transpose, value);
// }
// void  glowProgramUniformMatrix3x2dvEXT(PPROGRAMUNIFORMMATRIX3X2DVEXT fnptr, GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value) {
//   (*fnptr)(program, location, count, transpose, value);
// }
// void  glowProgramUniformMatrix3x2fv(PPROGRAMUNIFORMMATRIX3X2FV fnptr, GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value) {
//   (*fnptr)(program, location, count, transpose, value);
// }
// void  glowProgramUniformMatrix3x2fvEXT(PPROGRAMUNIFORMMATRIX3X2FVEXT fnptr, GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value) {
//   (*fnptr)(program, location, count, transpose, value);
// }
// void  glowProgramUniformMatrix3x4dv(PPROGRAMUNIFORMMATRIX3X4DV fnptr, GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value) {
//   (*fnptr)(program, location, count, transpose, value);
// }
// void  glowProgramUniformMatrix3x4dvEXT(PPROGRAMUNIFORMMATRIX3X4DVEXT fnptr, GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value) {
//   (*fnptr)(program, location, count, transpose, value);
// }
// void  glowProgramUniformMatrix3x4fv(PPROGRAMUNIFORMMATRIX3X4FV fnptr, GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value) {
//   (*fnptr)(program, location, count, transpose, value);
// }
// void  glowProgramUniformMatrix3x4fvEXT(PPROGRAMUNIFORMMATRIX3X4FVEXT fnptr, GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value) {
//   (*fnptr)(program, location, count, transpose, value);
// }
// void  glowProgramUniformMatrix4dv(PPROGRAMUNIFORMMATRIX4DV fnptr, GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value) {
//   (*fnptr)(program, location, count, transpose, value);
// }
// void  glowProgramUniformMatrix4dvEXT(PPROGRAMUNIFORMMATRIX4DVEXT fnptr, GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value) {
//   (*fnptr)(program, location, count, transpose, value);
// }
// void  glowProgramUniformMatrix4fv(PPROGRAMUNIFORMMATRIX4FV fnptr, GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value) {
//   (*fnptr)(program, location, count, transpose, value);
// }
// void  glowProgramUniformMatrix4fvEXT(PPROGRAMUNIFORMMATRIX4FVEXT fnptr, GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value) {
//   (*fnptr)(program, location, count, transpose, value);
// }
// void  glowProgramUniformMatrix4x2dv(PPROGRAMUNIFORMMATRIX4X2DV fnptr, GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value) {
//   (*fnptr)(program, location, count, transpose, value);
// }
// void  glowProgramUniformMatrix4x2dvEXT(PPROGRAMUNIFORMMATRIX4X2DVEXT fnptr, GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value) {
//   (*fnptr)(program, location, count, transpose, value);
// }
// void  glowProgramUniformMatrix4x2fv(PPROGRAMUNIFORMMATRIX4X2FV fnptr, GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value) {
//   (*fnptr)(program, location, count, transpose, value);
// }
// void  glowProgramUniformMatrix4x2fvEXT(PPROGRAMUNIFORMMATRIX4X2FVEXT fnptr, GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value) {
//   (*fnptr)(program, location, count, transpose, value);
// }
// void  glowProgramUniformMatrix4x3dv(PPROGRAMUNIFORMMATRIX4X3DV fnptr, GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value) {
//   (*fnptr)(program, location, count, transpose, value);
// }
// void  glowProgramUniformMatrix4x3dvEXT(PPROGRAMUNIFORMMATRIX4X3DVEXT fnptr, GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value) {
//   (*fnptr)(program, location, count, transpose, value);
// }
// void  glowProgramUniformMatrix4x3fv(PPROGRAMUNIFORMMATRIX4X3FV fnptr, GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value) {
//   (*fnptr)(program, location, count, transpose, value);
// }
// void  glowProgramUniformMatrix4x3fvEXT(PPROGRAMUNIFORMMATRIX4X3FVEXT fnptr, GLuint  program, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value) {
//   (*fnptr)(program, location, count, transpose, value);
// }
// void  glowProgramUniformui64NV(PPROGRAMUNIFORMUI64NV fnptr, GLuint  program, GLint  location, GLuint64EXT  value) {
//   (*fnptr)(program, location, value);
// }
// void  glowProgramUniformui64vNV(PPROGRAMUNIFORMUI64VNV fnptr, GLuint  program, GLint  location, GLsizei  count, const GLuint64EXT * value) {
//   (*fnptr)(program, location, count, value);
// }
// void  glowProgramVertexLimitNV(PPROGRAMVERTEXLIMITNV fnptr, GLenum  target, GLint  limit) {
//   (*fnptr)(target, limit);
// }
// void  glowProvokingVertex(PPROVOKINGVERTEX fnptr, GLenum  mode) {
//   (*fnptr)(mode);
// }
// void  glowProvokingVertexEXT(PPROVOKINGVERTEXEXT fnptr, GLenum  mode) {
//   (*fnptr)(mode);
// }
// void  glowPushClientAttribDefaultEXT(PPUSHCLIENTATTRIBDEFAULTEXT fnptr, GLbitfield  mask) {
//   (*fnptr)(mask);
// }
// void  glowPushDebugGroup(PPUSHDEBUGGROUP fnptr, GLenum  source, GLuint  id, GLsizei  length, const GLchar * message) {
//   (*fnptr)(source, id, length, message);
// }
// void  glowPushDebugGroupKHR(PPUSHDEBUGGROUPKHR fnptr, GLenum  source, GLuint  id, GLsizei  length, const GLchar * message) {
//   (*fnptr)(source, id, length, message);
// }
// void  glowPushGroupMarkerEXT(PPUSHGROUPMARKEREXT fnptr, GLsizei  length, const GLchar * marker) {
//   (*fnptr)(length, marker);
// }
// void  glowQueryCounter(PQUERYCOUNTER fnptr, GLuint  id, GLenum  target) {
//   (*fnptr)(id, target);
// }
// GLbitfield  glowQueryMatrixxOES(PQUERYMATRIXXOES fnptr, GLfixed * mantissa, GLint * exponent) {
//   return (*fnptr)(mantissa, exponent);
// }
// void  glowQueryObjectParameteruiAMD(PQUERYOBJECTPARAMETERUIAMD fnptr, GLenum  target, GLuint  id, GLenum  pname, GLuint  param) {
//   (*fnptr)(target, id, pname, param);
// }
// void  glowRasterPos2xOES(PRASTERPOS2XOES fnptr, GLfixed  x, GLfixed  y) {
//   (*fnptr)(x, y);
// }
// void  glowRasterPos2xvOES(PRASTERPOS2XVOES fnptr, const GLfixed * coords) {
//   (*fnptr)(coords);
// }
// void  glowRasterPos3xOES(PRASTERPOS3XOES fnptr, GLfixed  x, GLfixed  y, GLfixed  z) {
//   (*fnptr)(x, y, z);
// }
// void  glowRasterPos3xvOES(PRASTERPOS3XVOES fnptr, const GLfixed * coords) {
//   (*fnptr)(coords);
// }
// void  glowRasterPos4xOES(PRASTERPOS4XOES fnptr, GLfixed  x, GLfixed  y, GLfixed  z, GLfixed  w) {
//   (*fnptr)(x, y, z, w);
// }
// void  glowRasterPos4xvOES(PRASTERPOS4XVOES fnptr, const GLfixed * coords) {
//   (*fnptr)(coords);
// }
// void  glowReadBuffer(PREADBUFFER fnptr, GLenum  mode) {
//   (*fnptr)(mode);
// }
// void  glowReadInstrumentsSGIX(PREADINSTRUMENTSSGIX fnptr, GLint  marker) {
//   (*fnptr)(marker);
// }
// void  glowReadPixels(PREADPIXELS fnptr, GLint  x, GLint  y, GLsizei  width, GLsizei  height, GLenum  format, GLenum  type, void * pixels) {
//   (*fnptr)(x, y, width, height, format, type, pixels);
// }
// void  glowReadnPixelsARB(PREADNPIXELSARB fnptr, GLint  x, GLint  y, GLsizei  width, GLsizei  height, GLenum  format, GLenum  type, GLsizei  bufSize, void * data) {
//   (*fnptr)(x, y, width, height, format, type, bufSize, data);
// }
// void  glowRectxOES(PRECTXOES fnptr, GLfixed  x1, GLfixed  y1, GLfixed  x2, GLfixed  y2) {
//   (*fnptr)(x1, y1, x2, y2);
// }
// void  glowRectxvOES(PRECTXVOES fnptr, const GLfixed * v1, const GLfixed * v2) {
//   (*fnptr)(v1, v2);
// }
// void  glowReferencePlaneSGIX(PREFERENCEPLANESGIX fnptr, const GLdouble * equation) {
//   (*fnptr)(equation);
// }
// void  glowReleaseShaderCompiler(PRELEASESHADERCOMPILER fnptr) {
//   (*fnptr)();
// }
// void  glowRenderbufferStorage(PRENDERBUFFERSTORAGE fnptr, GLenum  target, GLenum  internalformat, GLsizei  width, GLsizei  height) {
//   (*fnptr)(target, internalformat, width, height);
// }
// void  glowRenderbufferStorageEXT(PRENDERBUFFERSTORAGEEXT fnptr, GLenum  target, GLenum  internalformat, GLsizei  width, GLsizei  height) {
//   (*fnptr)(target, internalformat, width, height);
// }
// void  glowRenderbufferStorageMultisample(PRENDERBUFFERSTORAGEMULTISAMPLE fnptr, GLenum  target, GLsizei  samples, GLenum  internalformat, GLsizei  width, GLsizei  height) {
//   (*fnptr)(target, samples, internalformat, width, height);
// }
// void  glowRenderbufferStorageMultisampleCoverageNV(PRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENV fnptr, GLenum  target, GLsizei  coverageSamples, GLsizei  colorSamples, GLenum  internalformat, GLsizei  width, GLsizei  height) {
//   (*fnptr)(target, coverageSamples, colorSamples, internalformat, width, height);
// }
// void  glowRenderbufferStorageMultisampleEXT(PRENDERBUFFERSTORAGEMULTISAMPLEEXT fnptr, GLenum  target, GLsizei  samples, GLenum  internalformat, GLsizei  width, GLsizei  height) {
//   (*fnptr)(target, samples, internalformat, width, height);
// }
// void  glowReplacementCodePointerSUN(PREPLACEMENTCODEPOINTERSUN fnptr, GLenum  type, GLsizei  stride, const void ** pointer) {
//   (*fnptr)(type, stride, pointer);
// }
// void  glowReplacementCodeubSUN(PREPLACEMENTCODEUBSUN fnptr, GLubyte  code) {
//   (*fnptr)(code);
// }
// void  glowReplacementCodeubvSUN(PREPLACEMENTCODEUBVSUN fnptr, const GLubyte * code) {
//   (*fnptr)(code);
// }
// void  glowReplacementCodeuiColor3fVertex3fSUN(PREPLACEMENTCODEUICOLOR3FVERTEX3FSUN fnptr, GLuint  rc, GLfloat  r, GLfloat  g, GLfloat  b, GLfloat  x, GLfloat  y, GLfloat  z) {
//   (*fnptr)(rc, r, g, b, x, y, z);
// }
// void  glowReplacementCodeuiColor3fVertex3fvSUN(PREPLACEMENTCODEUICOLOR3FVERTEX3FVSUN fnptr, const GLuint * rc, const GLfloat * c, const GLfloat * v) {
//   (*fnptr)(rc, c, v);
// }
// void  glowReplacementCodeuiColor4fNormal3fVertex3fSUN(PREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUN fnptr, GLuint  rc, GLfloat  r, GLfloat  g, GLfloat  b, GLfloat  a, GLfloat  nx, GLfloat  ny, GLfloat  nz, GLfloat  x, GLfloat  y, GLfloat  z) {
//   (*fnptr)(rc, r, g, b, a, nx, ny, nz, x, y, z);
// }
// void  glowReplacementCodeuiColor4fNormal3fVertex3fvSUN(PREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUN fnptr, const GLuint * rc, const GLfloat * c, const GLfloat * n, const GLfloat * v) {
//   (*fnptr)(rc, c, n, v);
// }
// void  glowReplacementCodeuiColor4ubVertex3fSUN(PREPLACEMENTCODEUICOLOR4UBVERTEX3FSUN fnptr, GLuint  rc, GLubyte  r, GLubyte  g, GLubyte  b, GLubyte  a, GLfloat  x, GLfloat  y, GLfloat  z) {
//   (*fnptr)(rc, r, g, b, a, x, y, z);
// }
// void  glowReplacementCodeuiColor4ubVertex3fvSUN(PREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUN fnptr, const GLuint * rc, const GLubyte * c, const GLfloat * v) {
//   (*fnptr)(rc, c, v);
// }
// void  glowReplacementCodeuiNormal3fVertex3fSUN(PREPLACEMENTCODEUINORMAL3FVERTEX3FSUN fnptr, GLuint  rc, GLfloat  nx, GLfloat  ny, GLfloat  nz, GLfloat  x, GLfloat  y, GLfloat  z) {
//   (*fnptr)(rc, nx, ny, nz, x, y, z);
// }
// void  glowReplacementCodeuiNormal3fVertex3fvSUN(PREPLACEMENTCODEUINORMAL3FVERTEX3FVSUN fnptr, const GLuint * rc, const GLfloat * n, const GLfloat * v) {
//   (*fnptr)(rc, n, v);
// }
// void  glowReplacementCodeuiSUN(PREPLACEMENTCODEUISUN fnptr, GLuint  code) {
//   (*fnptr)(code);
// }
// void  glowReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(PREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUN fnptr, GLuint  rc, GLfloat  s, GLfloat  t, GLfloat  r, GLfloat  g, GLfloat  b, GLfloat  a, GLfloat  nx, GLfloat  ny, GLfloat  nz, GLfloat  x, GLfloat  y, GLfloat  z) {
//   (*fnptr)(rc, s, t, r, g, b, a, nx, ny, nz, x, y, z);
// }
// void  glowReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(PREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUN fnptr, const GLuint * rc, const GLfloat * tc, const GLfloat * c, const GLfloat * n, const GLfloat * v) {
//   (*fnptr)(rc, tc, c, n, v);
// }
// void  glowReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(PREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUN fnptr, GLuint  rc, GLfloat  s, GLfloat  t, GLfloat  nx, GLfloat  ny, GLfloat  nz, GLfloat  x, GLfloat  y, GLfloat  z) {
//   (*fnptr)(rc, s, t, nx, ny, nz, x, y, z);
// }
// void  glowReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(PREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUN fnptr, const GLuint * rc, const GLfloat * tc, const GLfloat * n, const GLfloat * v) {
//   (*fnptr)(rc, tc, n, v);
// }
// void  glowReplacementCodeuiTexCoord2fVertex3fSUN(PREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUN fnptr, GLuint  rc, GLfloat  s, GLfloat  t, GLfloat  x, GLfloat  y, GLfloat  z) {
//   (*fnptr)(rc, s, t, x, y, z);
// }
// void  glowReplacementCodeuiTexCoord2fVertex3fvSUN(PREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUN fnptr, const GLuint * rc, const GLfloat * tc, const GLfloat * v) {
//   (*fnptr)(rc, tc, v);
// }
// void  glowReplacementCodeuiVertex3fSUN(PREPLACEMENTCODEUIVERTEX3FSUN fnptr, GLuint  rc, GLfloat  x, GLfloat  y, GLfloat  z) {
//   (*fnptr)(rc, x, y, z);
// }
// void  glowReplacementCodeuiVertex3fvSUN(PREPLACEMENTCODEUIVERTEX3FVSUN fnptr, const GLuint * rc, const GLfloat * v) {
//   (*fnptr)(rc, v);
// }
// void  glowReplacementCodeuivSUN(PREPLACEMENTCODEUIVSUN fnptr, const GLuint * code) {
//   (*fnptr)(code);
// }
// void  glowReplacementCodeusSUN(PREPLACEMENTCODEUSSUN fnptr, GLushort  code) {
//   (*fnptr)(code);
// }
// void  glowReplacementCodeusvSUN(PREPLACEMENTCODEUSVSUN fnptr, const GLushort * code) {
//   (*fnptr)(code);
// }
// void  glowRequestResidentProgramsNV(PREQUESTRESIDENTPROGRAMSNV fnptr, GLsizei  n, const GLuint * programs) {
//   (*fnptr)(n, programs);
// }
// void  glowResetHistogramEXT(PRESETHISTOGRAMEXT fnptr, GLenum  target) {
//   (*fnptr)(target);
// }
// void  glowResetMinmaxEXT(PRESETMINMAXEXT fnptr, GLenum  target) {
//   (*fnptr)(target);
// }
// void  glowResizeBuffersMESA(PRESIZEBUFFERSMESA fnptr) {
//   (*fnptr)();
// }
// void  glowResumeTransformFeedback(PRESUMETRANSFORMFEEDBACK fnptr) {
//   (*fnptr)();
// }
// void  glowResumeTransformFeedbackNV(PRESUMETRANSFORMFEEDBACKNV fnptr) {
//   (*fnptr)();
// }
// void  glowRotatexOES(PROTATEXOES fnptr, GLfixed  angle, GLfixed  x, GLfixed  y, GLfixed  z) {
//   (*fnptr)(angle, x, y, z);
// }
// void  glowSampleCoverage(PSAMPLECOVERAGE fnptr, GLfloat  value, GLboolean  invert) {
//   (*fnptr)(value, invert);
// }
// void  glowSampleCoverageARB(PSAMPLECOVERAGEARB fnptr, GLfloat  value, GLboolean  invert) {
//   (*fnptr)(value, invert);
// }
// void  glowSampleCoverageOES(PSAMPLECOVERAGEOES fnptr, GLfixed  value, GLboolean  invert) {
//   (*fnptr)(value, invert);
// }
// void  glowSampleCoveragexOES(PSAMPLECOVERAGEXOES fnptr, GLclampx  value, GLboolean  invert) {
//   (*fnptr)(value, invert);
// }
// void  glowSampleMapATI(PSAMPLEMAPATI fnptr, GLuint  dst, GLuint  interp, GLenum  swizzle) {
//   (*fnptr)(dst, interp, swizzle);
// }
// void  glowSampleMaskEXT(PSAMPLEMASKEXT fnptr, GLclampf  value, GLboolean  invert) {
//   (*fnptr)(value, invert);
// }
// void  glowSampleMaskIndexedNV(PSAMPLEMASKINDEXEDNV fnptr, GLuint  index, GLbitfield  mask) {
//   (*fnptr)(index, mask);
// }
// void  glowSampleMaskSGIS(PSAMPLEMASKSGIS fnptr, GLclampf  value, GLboolean  invert) {
//   (*fnptr)(value, invert);
// }
// void  glowSampleMaski(PSAMPLEMASKI fnptr, GLuint  maskNumber, GLbitfield  mask) {
//   (*fnptr)(maskNumber, mask);
// }
// void  glowSamplePatternEXT(PSAMPLEPATTERNEXT fnptr, GLenum  pattern) {
//   (*fnptr)(pattern);
// }
// void  glowSamplePatternSGIS(PSAMPLEPATTERNSGIS fnptr, GLenum  pattern) {
//   (*fnptr)(pattern);
// }
// void  glowSamplerParameterIiv(PSAMPLERPARAMETERIIV fnptr, GLuint  sampler, GLenum  pname, const GLint * param) {
//   (*fnptr)(sampler, pname, param);
// }
// void  glowSamplerParameterIuiv(PSAMPLERPARAMETERIUIV fnptr, GLuint  sampler, GLenum  pname, const GLuint * param) {
//   (*fnptr)(sampler, pname, param);
// }
// void  glowSamplerParameterf(PSAMPLERPARAMETERF fnptr, GLuint  sampler, GLenum  pname, GLfloat  param) {
//   (*fnptr)(sampler, pname, param);
// }
// void  glowSamplerParameterfv(PSAMPLERPARAMETERFV fnptr, GLuint  sampler, GLenum  pname, const GLfloat * param) {
//   (*fnptr)(sampler, pname, param);
// }
// void  glowSamplerParameteri(PSAMPLERPARAMETERI fnptr, GLuint  sampler, GLenum  pname, GLint  param) {
//   (*fnptr)(sampler, pname, param);
// }
// void  glowSamplerParameteriv(PSAMPLERPARAMETERIV fnptr, GLuint  sampler, GLenum  pname, const GLint * param) {
//   (*fnptr)(sampler, pname, param);
// }
// void  glowScalexOES(PSCALEXOES fnptr, GLfixed  x, GLfixed  y, GLfixed  z) {
//   (*fnptr)(x, y, z);
// }
// void  glowScissor(PSCISSOR fnptr, GLint  x, GLint  y, GLsizei  width, GLsizei  height) {
//   (*fnptr)(x, y, width, height);
// }
// void  glowScissorArrayv(PSCISSORARRAYV fnptr, GLuint  first, GLsizei  count, const GLint * v) {
//   (*fnptr)(first, count, v);
// }
// void  glowScissorIndexed(PSCISSORINDEXED fnptr, GLuint  index, GLint  left, GLint  bottom, GLsizei  width, GLsizei  height) {
//   (*fnptr)(index, left, bottom, width, height);
// }
// void  glowScissorIndexedv(PSCISSORINDEXEDV fnptr, GLuint  index, const GLint * v) {
//   (*fnptr)(index, v);
// }
// void  glowSecondaryColor3bEXT(PSECONDARYCOLOR3BEXT fnptr, GLbyte  red, GLbyte  green, GLbyte  blue) {
//   (*fnptr)(red, green, blue);
// }
// void  glowSecondaryColor3bvEXT(PSECONDARYCOLOR3BVEXT fnptr, const GLbyte * v) {
//   (*fnptr)(v);
// }
// void  glowSecondaryColor3dEXT(PSECONDARYCOLOR3DEXT fnptr, GLdouble  red, GLdouble  green, GLdouble  blue) {
//   (*fnptr)(red, green, blue);
// }
// void  glowSecondaryColor3dvEXT(PSECONDARYCOLOR3DVEXT fnptr, const GLdouble * v) {
//   (*fnptr)(v);
// }
// void  glowSecondaryColor3fEXT(PSECONDARYCOLOR3FEXT fnptr, GLfloat  red, GLfloat  green, GLfloat  blue) {
//   (*fnptr)(red, green, blue);
// }
// void  glowSecondaryColor3fvEXT(PSECONDARYCOLOR3FVEXT fnptr, const GLfloat * v) {
//   (*fnptr)(v);
// }
// void  glowSecondaryColor3hNV(PSECONDARYCOLOR3HNV fnptr, GLhalfNV  red, GLhalfNV  green, GLhalfNV  blue) {
//   (*fnptr)(red, green, blue);
// }
// void  glowSecondaryColor3hvNV(PSECONDARYCOLOR3HVNV fnptr, const GLhalfNV * v) {
//   (*fnptr)(v);
// }
// void  glowSecondaryColor3iEXT(PSECONDARYCOLOR3IEXT fnptr, GLint  red, GLint  green, GLint  blue) {
//   (*fnptr)(red, green, blue);
// }
// void  glowSecondaryColor3ivEXT(PSECONDARYCOLOR3IVEXT fnptr, const GLint * v) {
//   (*fnptr)(v);
// }
// void  glowSecondaryColor3sEXT(PSECONDARYCOLOR3SEXT fnptr, GLshort  red, GLshort  green, GLshort  blue) {
//   (*fnptr)(red, green, blue);
// }
// void  glowSecondaryColor3svEXT(PSECONDARYCOLOR3SVEXT fnptr, const GLshort * v) {
//   (*fnptr)(v);
// }
// void  glowSecondaryColor3ubEXT(PSECONDARYCOLOR3UBEXT fnptr, GLubyte  red, GLubyte  green, GLubyte  blue) {
//   (*fnptr)(red, green, blue);
// }
// void  glowSecondaryColor3ubvEXT(PSECONDARYCOLOR3UBVEXT fnptr, const GLubyte * v) {
//   (*fnptr)(v);
// }
// void  glowSecondaryColor3uiEXT(PSECONDARYCOLOR3UIEXT fnptr, GLuint  red, GLuint  green, GLuint  blue) {
//   (*fnptr)(red, green, blue);
// }
// void  glowSecondaryColor3uivEXT(PSECONDARYCOLOR3UIVEXT fnptr, const GLuint * v) {
//   (*fnptr)(v);
// }
// void  glowSecondaryColor3usEXT(PSECONDARYCOLOR3USEXT fnptr, GLushort  red, GLushort  green, GLushort  blue) {
//   (*fnptr)(red, green, blue);
// }
// void  glowSecondaryColor3usvEXT(PSECONDARYCOLOR3USVEXT fnptr, const GLushort * v) {
//   (*fnptr)(v);
// }
// void  glowSecondaryColorFormatNV(PSECONDARYCOLORFORMATNV fnptr, GLint  size, GLenum  type, GLsizei  stride) {
//   (*fnptr)(size, type, stride);
// }
// void  glowSecondaryColorPointerEXT(PSECONDARYCOLORPOINTEREXT fnptr, GLint  size, GLenum  type, GLsizei  stride, const void * pointer) {
//   (*fnptr)(size, type, stride, pointer);
// }
// void  glowSecondaryColorPointerListIBM(PSECONDARYCOLORPOINTERLISTIBM fnptr, GLint  size, GLenum  type, GLint  stride, const void ** pointer, GLint  ptrstride) {
//   (*fnptr)(size, type, stride, pointer, ptrstride);
// }
// void  glowSelectPerfMonitorCountersAMD(PSELECTPERFMONITORCOUNTERSAMD fnptr, GLuint  monitor, GLboolean  enable, GLuint  group, GLint  numCounters, GLuint * counterList) {
//   (*fnptr)(monitor, enable, group, numCounters, counterList);
// }
// void  glowSeparableFilter2DEXT(PSEPARABLEFILTER2DEXT fnptr, GLenum  target, GLenum  internalformat, GLsizei  width, GLsizei  height, GLenum  format, GLenum  type, const void * row, const void * column) {
//   (*fnptr)(target, internalformat, width, height, format, type, row, column);
// }
// void  glowSetFenceAPPLE(PSETFENCEAPPLE fnptr, GLuint  fence) {
//   (*fnptr)(fence);
// }
// void  glowSetFenceNV(PSETFENCENV fnptr, GLuint  fence, GLenum  condition) {
//   (*fnptr)(fence, condition);
// }
// void  glowSetFragmentShaderConstantATI(PSETFRAGMENTSHADERCONSTANTATI fnptr, GLuint  dst, const GLfloat * value) {
//   (*fnptr)(dst, value);
// }
// void  glowSetInvariantEXT(PSETINVARIANTEXT fnptr, GLuint  id, GLenum  type, const void * addr) {
//   (*fnptr)(id, type, addr);
// }
// void  glowSetLocalConstantEXT(PSETLOCALCONSTANTEXT fnptr, GLuint  id, GLenum  type, const void * addr) {
//   (*fnptr)(id, type, addr);
// }
// void  glowSetMultisamplefvAMD(PSETMULTISAMPLEFVAMD fnptr, GLenum  pname, GLuint  index, const GLfloat * val) {
//   (*fnptr)(pname, index, val);
// }
// void  glowShaderBinary(PSHADERBINARY fnptr, GLsizei  count, const GLuint * shaders, GLenum  binaryformat, const void * binary, GLsizei  length) {
//   (*fnptr)(count, shaders, binaryformat, binary, length);
// }
// void  glowShaderOp1EXT(PSHADEROP1EXT fnptr, GLenum  op, GLuint  res, GLuint  arg1) {
//   (*fnptr)(op, res, arg1);
// }
// void  glowShaderOp2EXT(PSHADEROP2EXT fnptr, GLenum  op, GLuint  res, GLuint  arg1, GLuint  arg2) {
//   (*fnptr)(op, res, arg1, arg2);
// }
// void  glowShaderOp3EXT(PSHADEROP3EXT fnptr, GLenum  op, GLuint  res, GLuint  arg1, GLuint  arg2, GLuint  arg3) {
//   (*fnptr)(op, res, arg1, arg2, arg3);
// }
// void  glowShaderSource(PSHADERSOURCE fnptr, GLuint  shader, GLsizei  count, const GLchar *const* string, const GLint * length) {
//   (*fnptr)(shader, count, string, length);
// }
// void  glowShaderSourceARB(PSHADERSOURCEARB fnptr, GLhandleARB  shaderObj, GLsizei  count, const GLcharARB ** string, const GLint * length) {
//   (*fnptr)(shaderObj, count, string, length);
// }
// void  glowShaderStorageBlockBinding(PSHADERSTORAGEBLOCKBINDING fnptr, GLuint  program, GLuint  storageBlockIndex, GLuint  storageBlockBinding) {
//   (*fnptr)(program, storageBlockIndex, storageBlockBinding);
// }
// void  glowSharpenTexFuncSGIS(PSHARPENTEXFUNCSGIS fnptr, GLenum  target, GLsizei  n, const GLfloat * points) {
//   (*fnptr)(target, n, points);
// }
// void  glowSpriteParameterfSGIX(PSPRITEPARAMETERFSGIX fnptr, GLenum  pname, GLfloat  param) {
//   (*fnptr)(pname, param);
// }
// void  glowSpriteParameterfvSGIX(PSPRITEPARAMETERFVSGIX fnptr, GLenum  pname, const GLfloat * params) {
//   (*fnptr)(pname, params);
// }
// void  glowSpriteParameteriSGIX(PSPRITEPARAMETERISGIX fnptr, GLenum  pname, GLint  param) {
//   (*fnptr)(pname, param);
// }
// void  glowSpriteParameterivSGIX(PSPRITEPARAMETERIVSGIX fnptr, GLenum  pname, const GLint * params) {
//   (*fnptr)(pname, params);
// }
// void  glowStartInstrumentsSGIX(PSTARTINSTRUMENTSSGIX fnptr) {
//   (*fnptr)();
// }
// void  glowStencilClearTagEXT(PSTENCILCLEARTAGEXT fnptr, GLsizei  stencilTagBits, GLuint  stencilClearTag) {
//   (*fnptr)(stencilTagBits, stencilClearTag);
// }
// void  glowStencilFillPathInstancedNV(PSTENCILFILLPATHINSTANCEDNV fnptr, GLsizei  numPaths, GLenum  pathNameType, const void * paths, GLuint  pathBase, GLenum  fillMode, GLuint  mask, GLenum  transformType, const GLfloat * transformValues) {
//   (*fnptr)(numPaths, pathNameType, paths, pathBase, fillMode, mask, transformType, transformValues);
// }
// void  glowStencilFillPathNV(PSTENCILFILLPATHNV fnptr, GLuint  path, GLenum  fillMode, GLuint  mask) {
//   (*fnptr)(path, fillMode, mask);
// }
// void  glowStencilFunc(PSTENCILFUNC fnptr, GLenum  func, GLint  ref, GLuint  mask) {
//   (*fnptr)(func, ref, mask);
// }
// void  glowStencilFuncSeparate(PSTENCILFUNCSEPARATE fnptr, GLenum  face, GLenum  func, GLint  ref, GLuint  mask) {
//   (*fnptr)(face, func, ref, mask);
// }
// void  glowStencilFuncSeparateATI(PSTENCILFUNCSEPARATEATI fnptr, GLenum  frontfunc, GLenum  backfunc, GLint  ref, GLuint  mask) {
//   (*fnptr)(frontfunc, backfunc, ref, mask);
// }
// void  glowStencilMask(PSTENCILMASK fnptr, GLuint  mask) {
//   (*fnptr)(mask);
// }
// void  glowStencilMaskSeparate(PSTENCILMASKSEPARATE fnptr, GLenum  face, GLuint  mask) {
//   (*fnptr)(face, mask);
// }
// void  glowStencilOp(PSTENCILOP fnptr, GLenum  fail, GLenum  zfail, GLenum  zpass) {
//   (*fnptr)(fail, zfail, zpass);
// }
// void  glowStencilOpSeparate(PSTENCILOPSEPARATE fnptr, GLenum  face, GLenum  sfail, GLenum  dpfail, GLenum  dppass) {
//   (*fnptr)(face, sfail, dpfail, dppass);
// }
// void  glowStencilOpSeparateATI(PSTENCILOPSEPARATEATI fnptr, GLenum  face, GLenum  sfail, GLenum  dpfail, GLenum  dppass) {
//   (*fnptr)(face, sfail, dpfail, dppass);
// }
// void  glowStencilOpValueAMD(PSTENCILOPVALUEAMD fnptr, GLenum  face, GLuint  value) {
//   (*fnptr)(face, value);
// }
// void  glowStencilStrokePathInstancedNV(PSTENCILSTROKEPATHINSTANCEDNV fnptr, GLsizei  numPaths, GLenum  pathNameType, const void * paths, GLuint  pathBase, GLint  reference, GLuint  mask, GLenum  transformType, const GLfloat * transformValues) {
//   (*fnptr)(numPaths, pathNameType, paths, pathBase, reference, mask, transformType, transformValues);
// }
// void  glowStencilStrokePathNV(PSTENCILSTROKEPATHNV fnptr, GLuint  path, GLint  reference, GLuint  mask) {
//   (*fnptr)(path, reference, mask);
// }
// void  glowStopInstrumentsSGIX(PSTOPINSTRUMENTSSGIX fnptr, GLint  marker) {
//   (*fnptr)(marker);
// }
// void  glowStringMarkerGREMEDY(PSTRINGMARKERGREMEDY fnptr, GLsizei  len, const void * string) {
//   (*fnptr)(len, string);
// }
// void  glowSwizzleEXT(PSWIZZLEEXT fnptr, GLuint  res, GLuint  in, GLenum  outX, GLenum  outY, GLenum  outZ, GLenum  outW) {
//   (*fnptr)(res, in, outX, outY, outZ, outW);
// }
// void  glowSyncTextureINTEL(PSYNCTEXTUREINTEL fnptr, GLuint  texture) {
//   (*fnptr)(texture);
// }
// void  glowTagSampleBufferSGIX(PTAGSAMPLEBUFFERSGIX fnptr) {
//   (*fnptr)();
// }
// void  glowTangent3bEXT(PTANGENT3BEXT fnptr, GLbyte  tx, GLbyte  ty, GLbyte  tz) {
//   (*fnptr)(tx, ty, tz);
// }
// void  glowTangent3bvEXT(PTANGENT3BVEXT fnptr, const GLbyte * v) {
//   (*fnptr)(v);
// }
// void  glowTangent3dEXT(PTANGENT3DEXT fnptr, GLdouble  tx, GLdouble  ty, GLdouble  tz) {
//   (*fnptr)(tx, ty, tz);
// }
// void  glowTangent3dvEXT(PTANGENT3DVEXT fnptr, const GLdouble * v) {
//   (*fnptr)(v);
// }
// void  glowTangent3fEXT(PTANGENT3FEXT fnptr, GLfloat  tx, GLfloat  ty, GLfloat  tz) {
//   (*fnptr)(tx, ty, tz);
// }
// void  glowTangent3fvEXT(PTANGENT3FVEXT fnptr, const GLfloat * v) {
//   (*fnptr)(v);
// }
// void  glowTangent3iEXT(PTANGENT3IEXT fnptr, GLint  tx, GLint  ty, GLint  tz) {
//   (*fnptr)(tx, ty, tz);
// }
// void  glowTangent3ivEXT(PTANGENT3IVEXT fnptr, const GLint * v) {
//   (*fnptr)(v);
// }
// void  glowTangent3sEXT(PTANGENT3SEXT fnptr, GLshort  tx, GLshort  ty, GLshort  tz) {
//   (*fnptr)(tx, ty, tz);
// }
// void  glowTangent3svEXT(PTANGENT3SVEXT fnptr, const GLshort * v) {
//   (*fnptr)(v);
// }
// void  glowTangentPointerEXT(PTANGENTPOINTEREXT fnptr, GLenum  type, GLsizei  stride, const void * pointer) {
//   (*fnptr)(type, stride, pointer);
// }
// void  glowTbufferMask3DFX(PTBUFFERMASK3DFX fnptr, GLuint  mask) {
//   (*fnptr)(mask);
// }
// void  glowTessellationFactorAMD(PTESSELLATIONFACTORAMD fnptr, GLfloat  factor) {
//   (*fnptr)(factor);
// }
// void  glowTessellationModeAMD(PTESSELLATIONMODEAMD fnptr, GLenum  mode) {
//   (*fnptr)(mode);
// }
// GLboolean  glowTestFenceAPPLE(PTESTFENCEAPPLE fnptr, GLuint  fence) {
//   return (*fnptr)(fence);
// }
// GLboolean  glowTestFenceNV(PTESTFENCENV fnptr, GLuint  fence) {
//   return (*fnptr)(fence);
// }
// GLboolean  glowTestObjectAPPLE(PTESTOBJECTAPPLE fnptr, GLenum  object, GLuint  name) {
//   return (*fnptr)(object, name);
// }
// void  glowTexBuffer(PTEXBUFFER fnptr, GLenum  target, GLenum  internalformat, GLuint  buffer) {
//   (*fnptr)(target, internalformat, buffer);
// }
// void  glowTexBufferARB(PTEXBUFFERARB fnptr, GLenum  target, GLenum  internalformat, GLuint  buffer) {
//   (*fnptr)(target, internalformat, buffer);
// }
// void  glowTexBufferEXT(PTEXBUFFEREXT fnptr, GLenum  target, GLenum  internalformat, GLuint  buffer) {
//   (*fnptr)(target, internalformat, buffer);
// }
// void  glowTexBufferRange(PTEXBUFFERRANGE fnptr, GLenum  target, GLenum  internalformat, GLuint  buffer, GLintptr  offset, GLsizeiptr  size) {
//   (*fnptr)(target, internalformat, buffer, offset, size);
// }
// void  glowTexBumpParameterfvATI(PTEXBUMPPARAMETERFVATI fnptr, GLenum  pname, const GLfloat * param) {
//   (*fnptr)(pname, param);
// }
// void  glowTexBumpParameterivATI(PTEXBUMPPARAMETERIVATI fnptr, GLenum  pname, const GLint * param) {
//   (*fnptr)(pname, param);
// }
// void  glowTexCoord1bOES(PTEXCOORD1BOES fnptr, GLbyte  s) {
//   (*fnptr)(s);
// }
// void  glowTexCoord1bvOES(PTEXCOORD1BVOES fnptr, const GLbyte * coords) {
//   (*fnptr)(coords);
// }
// void  glowTexCoord1hNV(PTEXCOORD1HNV fnptr, GLhalfNV  s) {
//   (*fnptr)(s);
// }
// void  glowTexCoord1hvNV(PTEXCOORD1HVNV fnptr, const GLhalfNV * v) {
//   (*fnptr)(v);
// }
// void  glowTexCoord1xOES(PTEXCOORD1XOES fnptr, GLfixed  s) {
//   (*fnptr)(s);
// }
// void  glowTexCoord1xvOES(PTEXCOORD1XVOES fnptr, const GLfixed * coords) {
//   (*fnptr)(coords);
// }
// void  glowTexCoord2bOES(PTEXCOORD2BOES fnptr, GLbyte  s, GLbyte  t) {
//   (*fnptr)(s, t);
// }
// void  glowTexCoord2bvOES(PTEXCOORD2BVOES fnptr, const GLbyte * coords) {
//   (*fnptr)(coords);
// }
// void  glowTexCoord2fColor3fVertex3fSUN(PTEXCOORD2FCOLOR3FVERTEX3FSUN fnptr, GLfloat  s, GLfloat  t, GLfloat  r, GLfloat  g, GLfloat  b, GLfloat  x, GLfloat  y, GLfloat  z) {
//   (*fnptr)(s, t, r, g, b, x, y, z);
// }
// void  glowTexCoord2fColor3fVertex3fvSUN(PTEXCOORD2FCOLOR3FVERTEX3FVSUN fnptr, const GLfloat * tc, const GLfloat * c, const GLfloat * v) {
//   (*fnptr)(tc, c, v);
// }
// void  glowTexCoord2fColor4fNormal3fVertex3fSUN(PTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUN fnptr, GLfloat  s, GLfloat  t, GLfloat  r, GLfloat  g, GLfloat  b, GLfloat  a, GLfloat  nx, GLfloat  ny, GLfloat  nz, GLfloat  x, GLfloat  y, GLfloat  z) {
//   (*fnptr)(s, t, r, g, b, a, nx, ny, nz, x, y, z);
// }
// void  glowTexCoord2fColor4fNormal3fVertex3fvSUN(PTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUN fnptr, const GLfloat * tc, const GLfloat * c, const GLfloat * n, const GLfloat * v) {
//   (*fnptr)(tc, c, n, v);
// }
// void  glowTexCoord2fColor4ubVertex3fSUN(PTEXCOORD2FCOLOR4UBVERTEX3FSUN fnptr, GLfloat  s, GLfloat  t, GLubyte  r, GLubyte  g, GLubyte  b, GLubyte  a, GLfloat  x, GLfloat  y, GLfloat  z) {
//   (*fnptr)(s, t, r, g, b, a, x, y, z);
// }
// void  glowTexCoord2fColor4ubVertex3fvSUN(PTEXCOORD2FCOLOR4UBVERTEX3FVSUN fnptr, const GLfloat * tc, const GLubyte * c, const GLfloat * v) {
//   (*fnptr)(tc, c, v);
// }
// void  glowTexCoord2fNormal3fVertex3fSUN(PTEXCOORD2FNORMAL3FVERTEX3FSUN fnptr, GLfloat  s, GLfloat  t, GLfloat  nx, GLfloat  ny, GLfloat  nz, GLfloat  x, GLfloat  y, GLfloat  z) {
//   (*fnptr)(s, t, nx, ny, nz, x, y, z);
// }
// void  glowTexCoord2fNormal3fVertex3fvSUN(PTEXCOORD2FNORMAL3FVERTEX3FVSUN fnptr, const GLfloat * tc, const GLfloat * n, const GLfloat * v) {
//   (*fnptr)(tc, n, v);
// }
// void  glowTexCoord2fVertex3fSUN(PTEXCOORD2FVERTEX3FSUN fnptr, GLfloat  s, GLfloat  t, GLfloat  x, GLfloat  y, GLfloat  z) {
//   (*fnptr)(s, t, x, y, z);
// }
// void  glowTexCoord2fVertex3fvSUN(PTEXCOORD2FVERTEX3FVSUN fnptr, const GLfloat * tc, const GLfloat * v) {
//   (*fnptr)(tc, v);
// }
// void  glowTexCoord2hNV(PTEXCOORD2HNV fnptr, GLhalfNV  s, GLhalfNV  t) {
//   (*fnptr)(s, t);
// }
// void  glowTexCoord2hvNV(PTEXCOORD2HVNV fnptr, const GLhalfNV * v) {
//   (*fnptr)(v);
// }
// void  glowTexCoord2xOES(PTEXCOORD2XOES fnptr, GLfixed  s, GLfixed  t) {
//   (*fnptr)(s, t);
// }
// void  glowTexCoord2xvOES(PTEXCOORD2XVOES fnptr, const GLfixed * coords) {
//   (*fnptr)(coords);
// }
// void  glowTexCoord3bOES(PTEXCOORD3BOES fnptr, GLbyte  s, GLbyte  t, GLbyte  r) {
//   (*fnptr)(s, t, r);
// }
// void  glowTexCoord3bvOES(PTEXCOORD3BVOES fnptr, const GLbyte * coords) {
//   (*fnptr)(coords);
// }
// void  glowTexCoord3hNV(PTEXCOORD3HNV fnptr, GLhalfNV  s, GLhalfNV  t, GLhalfNV  r) {
//   (*fnptr)(s, t, r);
// }
// void  glowTexCoord3hvNV(PTEXCOORD3HVNV fnptr, const GLhalfNV * v) {
//   (*fnptr)(v);
// }
// void  glowTexCoord3xOES(PTEXCOORD3XOES fnptr, GLfixed  s, GLfixed  t, GLfixed  r) {
//   (*fnptr)(s, t, r);
// }
// void  glowTexCoord3xvOES(PTEXCOORD3XVOES fnptr, const GLfixed * coords) {
//   (*fnptr)(coords);
// }
// void  glowTexCoord4bOES(PTEXCOORD4BOES fnptr, GLbyte  s, GLbyte  t, GLbyte  r, GLbyte  q) {
//   (*fnptr)(s, t, r, q);
// }
// void  glowTexCoord4bvOES(PTEXCOORD4BVOES fnptr, const GLbyte * coords) {
//   (*fnptr)(coords);
// }
// void  glowTexCoord4fColor4fNormal3fVertex4fSUN(PTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUN fnptr, GLfloat  s, GLfloat  t, GLfloat  p, GLfloat  q, GLfloat  r, GLfloat  g, GLfloat  b, GLfloat  a, GLfloat  nx, GLfloat  ny, GLfloat  nz, GLfloat  x, GLfloat  y, GLfloat  z, GLfloat  w) {
//   (*fnptr)(s, t, p, q, r, g, b, a, nx, ny, nz, x, y, z, w);
// }
// void  glowTexCoord4fColor4fNormal3fVertex4fvSUN(PTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUN fnptr, const GLfloat * tc, const GLfloat * c, const GLfloat * n, const GLfloat * v) {
//   (*fnptr)(tc, c, n, v);
// }
// void  glowTexCoord4fVertex4fSUN(PTEXCOORD4FVERTEX4FSUN fnptr, GLfloat  s, GLfloat  t, GLfloat  p, GLfloat  q, GLfloat  x, GLfloat  y, GLfloat  z, GLfloat  w) {
//   (*fnptr)(s, t, p, q, x, y, z, w);
// }
// void  glowTexCoord4fVertex4fvSUN(PTEXCOORD4FVERTEX4FVSUN fnptr, const GLfloat * tc, const GLfloat * v) {
//   (*fnptr)(tc, v);
// }
// void  glowTexCoord4hNV(PTEXCOORD4HNV fnptr, GLhalfNV  s, GLhalfNV  t, GLhalfNV  r, GLhalfNV  q) {
//   (*fnptr)(s, t, r, q);
// }
// void  glowTexCoord4hvNV(PTEXCOORD4HVNV fnptr, const GLhalfNV * v) {
//   (*fnptr)(v);
// }
// void  glowTexCoord4xOES(PTEXCOORD4XOES fnptr, GLfixed  s, GLfixed  t, GLfixed  r, GLfixed  q) {
//   (*fnptr)(s, t, r, q);
// }
// void  glowTexCoord4xvOES(PTEXCOORD4XVOES fnptr, const GLfixed * coords) {
//   (*fnptr)(coords);
// }
// void  glowTexCoordFormatNV(PTEXCOORDFORMATNV fnptr, GLint  size, GLenum  type, GLsizei  stride) {
//   (*fnptr)(size, type, stride);
// }
// void  glowTexCoordPointerEXT(PTEXCOORDPOINTEREXT fnptr, GLint  size, GLenum  type, GLsizei  stride, GLsizei  count, const void * pointer) {
//   (*fnptr)(size, type, stride, count, pointer);
// }
// void  glowTexCoordPointerListIBM(PTEXCOORDPOINTERLISTIBM fnptr, GLint  size, GLenum  type, GLint  stride, const void ** pointer, GLint  ptrstride) {
//   (*fnptr)(size, type, stride, pointer, ptrstride);
// }
// void  glowTexCoordPointervINTEL(PTEXCOORDPOINTERVINTEL fnptr, GLint  size, GLenum  type, const void ** pointer) {
//   (*fnptr)(size, type, pointer);
// }
// void  glowTexEnvxOES(PTEXENVXOES fnptr, GLenum  target, GLenum  pname, GLfixed  param) {
//   (*fnptr)(target, pname, param);
// }
// void  glowTexEnvxvOES(PTEXENVXVOES fnptr, GLenum  target, GLenum  pname, const GLfixed * params) {
//   (*fnptr)(target, pname, params);
// }
// void  glowTexFilterFuncSGIS(PTEXFILTERFUNCSGIS fnptr, GLenum  target, GLenum  filter, GLsizei  n, const GLfloat * weights) {
//   (*fnptr)(target, filter, n, weights);
// }
// void  glowTexGenxOES(PTEXGENXOES fnptr, GLenum  coord, GLenum  pname, GLfixed  param) {
//   (*fnptr)(coord, pname, param);
// }
// void  glowTexGenxvOES(PTEXGENXVOES fnptr, GLenum  coord, GLenum  pname, const GLfixed * params) {
//   (*fnptr)(coord, pname, params);
// }
// void  glowTexImage1D(PTEXIMAGE1D fnptr, GLenum  target, GLint  level, GLint  internalformat, GLsizei  width, GLint  border, GLenum  format, GLenum  type, const void * pixels) {
//   (*fnptr)(target, level, internalformat, width, border, format, type, pixels);
// }
// void  glowTexImage2D(PTEXIMAGE2D fnptr, GLenum  target, GLint  level, GLint  internalformat, GLsizei  width, GLsizei  height, GLint  border, GLenum  format, GLenum  type, const void * pixels) {
//   (*fnptr)(target, level, internalformat, width, height, border, format, type, pixels);
// }
// void  glowTexImage2DMultisample(PTEXIMAGE2DMULTISAMPLE fnptr, GLenum  target, GLsizei  samples, GLenum  internalformat, GLsizei  width, GLsizei  height, GLboolean  fixedsamplelocations) {
//   (*fnptr)(target, samples, internalformat, width, height, fixedsamplelocations);
// }
// void  glowTexImage2DMultisampleCoverageNV(PTEXIMAGE2DMULTISAMPLECOVERAGENV fnptr, GLenum  target, GLsizei  coverageSamples, GLsizei  colorSamples, GLint  internalFormat, GLsizei  width, GLsizei  height, GLboolean  fixedSampleLocations) {
//   (*fnptr)(target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);
// }
// void  glowTexImage3D(PTEXIMAGE3D fnptr, GLenum  target, GLint  level, GLint  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth, GLint  border, GLenum  format, GLenum  type, const void * pixels) {
//   (*fnptr)(target, level, internalformat, width, height, depth, border, format, type, pixels);
// }
// void  glowTexImage3DEXT(PTEXIMAGE3DEXT fnptr, GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth, GLint  border, GLenum  format, GLenum  type, const void * pixels) {
//   (*fnptr)(target, level, internalformat, width, height, depth, border, format, type, pixels);
// }
// void  glowTexImage3DMultisample(PTEXIMAGE3DMULTISAMPLE fnptr, GLenum  target, GLsizei  samples, GLenum  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth, GLboolean  fixedsamplelocations) {
//   (*fnptr)(target, samples, internalformat, width, height, depth, fixedsamplelocations);
// }
// void  glowTexImage3DMultisampleCoverageNV(PTEXIMAGE3DMULTISAMPLECOVERAGENV fnptr, GLenum  target, GLsizei  coverageSamples, GLsizei  colorSamples, GLint  internalFormat, GLsizei  width, GLsizei  height, GLsizei  depth, GLboolean  fixedSampleLocations) {
//   (*fnptr)(target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);
// }
// void  glowTexImage4DSGIS(PTEXIMAGE4DSGIS fnptr, GLenum  target, GLint  level, GLenum  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth, GLsizei  size4d, GLint  border, GLenum  format, GLenum  type, const void * pixels) {
//   (*fnptr)(target, level, internalformat, width, height, depth, size4d, border, format, type, pixels);
// }
// void  glowTexPageCommitmentARB(PTEXPAGECOMMITMENTARB fnptr, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLsizei  width, GLsizei  height, GLsizei  depth, GLboolean  resident) {
//   (*fnptr)(target, level, xoffset, yoffset, zoffset, width, height, depth, resident);
// }
// void  glowTexParameterIiv(PTEXPARAMETERIIV fnptr, GLenum  target, GLenum  pname, const GLint * params) {
//   (*fnptr)(target, pname, params);
// }
// void  glowTexParameterIivEXT(PTEXPARAMETERIIVEXT fnptr, GLenum  target, GLenum  pname, const GLint * params) {
//   (*fnptr)(target, pname, params);
// }
// void  glowTexParameterIuiv(PTEXPARAMETERIUIV fnptr, GLenum  target, GLenum  pname, const GLuint * params) {
//   (*fnptr)(target, pname, params);
// }
// void  glowTexParameterIuivEXT(PTEXPARAMETERIUIVEXT fnptr, GLenum  target, GLenum  pname, const GLuint * params) {
//   (*fnptr)(target, pname, params);
// }
// void  glowTexParameterf(PTEXPARAMETERF fnptr, GLenum  target, GLenum  pname, GLfloat  param) {
//   (*fnptr)(target, pname, param);
// }
// void  glowTexParameterfv(PTEXPARAMETERFV fnptr, GLenum  target, GLenum  pname, const GLfloat * params) {
//   (*fnptr)(target, pname, params);
// }
// void  glowTexParameteri(PTEXPARAMETERI fnptr, GLenum  target, GLenum  pname, GLint  param) {
//   (*fnptr)(target, pname, param);
// }
// void  glowTexParameteriv(PTEXPARAMETERIV fnptr, GLenum  target, GLenum  pname, const GLint * params) {
//   (*fnptr)(target, pname, params);
// }
// void  glowTexParameterxOES(PTEXPARAMETERXOES fnptr, GLenum  target, GLenum  pname, GLfixed  param) {
//   (*fnptr)(target, pname, param);
// }
// void  glowTexParameterxvOES(PTEXPARAMETERXVOES fnptr, GLenum  target, GLenum  pname, const GLfixed * params) {
//   (*fnptr)(target, pname, params);
// }
// void  glowTexRenderbufferNV(PTEXRENDERBUFFERNV fnptr, GLenum  target, GLuint  renderbuffer) {
//   (*fnptr)(target, renderbuffer);
// }
// void  glowTexStorage1D(PTEXSTORAGE1D fnptr, GLenum  target, GLsizei  levels, GLenum  internalformat, GLsizei  width) {
//   (*fnptr)(target, levels, internalformat, width);
// }
// void  glowTexStorage2D(PTEXSTORAGE2D fnptr, GLenum  target, GLsizei  levels, GLenum  internalformat, GLsizei  width, GLsizei  height) {
//   (*fnptr)(target, levels, internalformat, width, height);
// }
// void  glowTexStorage2DMultisample(PTEXSTORAGE2DMULTISAMPLE fnptr, GLenum  target, GLsizei  samples, GLenum  internalformat, GLsizei  width, GLsizei  height, GLboolean  fixedsamplelocations) {
//   (*fnptr)(target, samples, internalformat, width, height, fixedsamplelocations);
// }
// void  glowTexStorage3D(PTEXSTORAGE3D fnptr, GLenum  target, GLsizei  levels, GLenum  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth) {
//   (*fnptr)(target, levels, internalformat, width, height, depth);
// }
// void  glowTexStorage3DMultisample(PTEXSTORAGE3DMULTISAMPLE fnptr, GLenum  target, GLsizei  samples, GLenum  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth, GLboolean  fixedsamplelocations) {
//   (*fnptr)(target, samples, internalformat, width, height, depth, fixedsamplelocations);
// }
// void  glowTexStorageSparseAMD(PTEXSTORAGESPARSEAMD fnptr, GLenum  target, GLenum  internalFormat, GLsizei  width, GLsizei  height, GLsizei  depth, GLsizei  layers, GLbitfield  flags) {
//   (*fnptr)(target, internalFormat, width, height, depth, layers, flags);
// }
// void  glowTexSubImage1D(PTEXSUBIMAGE1D fnptr, GLenum  target, GLint  level, GLint  xoffset, GLsizei  width, GLenum  format, GLenum  type, const void * pixels) {
//   (*fnptr)(target, level, xoffset, width, format, type, pixels);
// }
// void  glowTexSubImage1DEXT(PTEXSUBIMAGE1DEXT fnptr, GLenum  target, GLint  level, GLint  xoffset, GLsizei  width, GLenum  format, GLenum  type, const void * pixels) {
//   (*fnptr)(target, level, xoffset, width, format, type, pixels);
// }
// void  glowTexSubImage2D(PTEXSUBIMAGE2D fnptr, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLsizei  width, GLsizei  height, GLenum  format, GLenum  type, const void * pixels) {
//   (*fnptr)(target, level, xoffset, yoffset, width, height, format, type, pixels);
// }
// void  glowTexSubImage2DEXT(PTEXSUBIMAGE2DEXT fnptr, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLsizei  width, GLsizei  height, GLenum  format, GLenum  type, const void * pixels) {
//   (*fnptr)(target, level, xoffset, yoffset, width, height, format, type, pixels);
// }
// void  glowTexSubImage3D(PTEXSUBIMAGE3D fnptr, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLsizei  width, GLsizei  height, GLsizei  depth, GLenum  format, GLenum  type, const void * pixels) {
//   (*fnptr)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
// }
// void  glowTexSubImage3DEXT(PTEXSUBIMAGE3DEXT fnptr, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLsizei  width, GLsizei  height, GLsizei  depth, GLenum  format, GLenum  type, const void * pixels) {
//   (*fnptr)(target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
// }
// void  glowTexSubImage4DSGIS(PTEXSUBIMAGE4DSGIS fnptr, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLint  woffset, GLsizei  width, GLsizei  height, GLsizei  depth, GLsizei  size4d, GLenum  format, GLenum  type, const void * pixels) {
//   (*fnptr)(target, level, xoffset, yoffset, zoffset, woffset, width, height, depth, size4d, format, type, pixels);
// }
// void  glowTextureBarrierNV(PTEXTUREBARRIERNV fnptr) {
//   (*fnptr)();
// }
// void  glowTextureBufferEXT(PTEXTUREBUFFEREXT fnptr, GLuint  texture, GLenum  target, GLenum  internalformat, GLuint  buffer) {
//   (*fnptr)(texture, target, internalformat, buffer);
// }
// void  glowTextureBufferRangeEXT(PTEXTUREBUFFERRANGEEXT fnptr, GLuint  texture, GLenum  target, GLenum  internalformat, GLuint  buffer, GLintptr  offset, GLsizeiptr  size) {
//   (*fnptr)(texture, target, internalformat, buffer, offset, size);
// }
// void  glowTextureColorMaskSGIS(PTEXTURECOLORMASKSGIS fnptr, GLboolean  red, GLboolean  green, GLboolean  blue, GLboolean  alpha) {
//   (*fnptr)(red, green, blue, alpha);
// }
// void  glowTextureImage1DEXT(PTEXTUREIMAGE1DEXT fnptr, GLuint  texture, GLenum  target, GLint  level, GLint  internalformat, GLsizei  width, GLint  border, GLenum  format, GLenum  type, const void * pixels) {
//   (*fnptr)(texture, target, level, internalformat, width, border, format, type, pixels);
// }
// void  glowTextureImage2DEXT(PTEXTUREIMAGE2DEXT fnptr, GLuint  texture, GLenum  target, GLint  level, GLint  internalformat, GLsizei  width, GLsizei  height, GLint  border, GLenum  format, GLenum  type, const void * pixels) {
//   (*fnptr)(texture, target, level, internalformat, width, height, border, format, type, pixels);
// }
// void  glowTextureImage2DMultisampleCoverageNV(PTEXTUREIMAGE2DMULTISAMPLECOVERAGENV fnptr, GLuint  texture, GLenum  target, GLsizei  coverageSamples, GLsizei  colorSamples, GLint  internalFormat, GLsizei  width, GLsizei  height, GLboolean  fixedSampleLocations) {
//   (*fnptr)(texture, target, coverageSamples, colorSamples, internalFormat, width, height, fixedSampleLocations);
// }
// void  glowTextureImage2DMultisampleNV(PTEXTUREIMAGE2DMULTISAMPLENV fnptr, GLuint  texture, GLenum  target, GLsizei  samples, GLint  internalFormat, GLsizei  width, GLsizei  height, GLboolean  fixedSampleLocations) {
//   (*fnptr)(texture, target, samples, internalFormat, width, height, fixedSampleLocations);
// }
// void  glowTextureImage3DEXT(PTEXTUREIMAGE3DEXT fnptr, GLuint  texture, GLenum  target, GLint  level, GLint  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth, GLint  border, GLenum  format, GLenum  type, const void * pixels) {
//   (*fnptr)(texture, target, level, internalformat, width, height, depth, border, format, type, pixels);
// }
// void  glowTextureImage3DMultisampleCoverageNV(PTEXTUREIMAGE3DMULTISAMPLECOVERAGENV fnptr, GLuint  texture, GLenum  target, GLsizei  coverageSamples, GLsizei  colorSamples, GLint  internalFormat, GLsizei  width, GLsizei  height, GLsizei  depth, GLboolean  fixedSampleLocations) {
//   (*fnptr)(texture, target, coverageSamples, colorSamples, internalFormat, width, height, depth, fixedSampleLocations);
// }
// void  glowTextureImage3DMultisampleNV(PTEXTUREIMAGE3DMULTISAMPLENV fnptr, GLuint  texture, GLenum  target, GLsizei  samples, GLint  internalFormat, GLsizei  width, GLsizei  height, GLsizei  depth, GLboolean  fixedSampleLocations) {
//   (*fnptr)(texture, target, samples, internalFormat, width, height, depth, fixedSampleLocations);
// }
// void  glowTextureLightEXT(PTEXTURELIGHTEXT fnptr, GLenum  pname) {
//   (*fnptr)(pname);
// }
// void  glowTextureMaterialEXT(PTEXTUREMATERIALEXT fnptr, GLenum  face, GLenum  mode) {
//   (*fnptr)(face, mode);
// }
// void  glowTextureNormalEXT(PTEXTURENORMALEXT fnptr, GLenum  mode) {
//   (*fnptr)(mode);
// }
// void  glowTexturePageCommitmentEXT(PTEXTUREPAGECOMMITMENTEXT fnptr, GLuint  texture, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLsizei  width, GLsizei  height, GLsizei  depth, GLboolean  resident) {
//   (*fnptr)(texture, level, xoffset, yoffset, zoffset, width, height, depth, resident);
// }
// void  glowTextureParameterIivEXT(PTEXTUREPARAMETERIIVEXT fnptr, GLuint  texture, GLenum  target, GLenum  pname, const GLint * params) {
//   (*fnptr)(texture, target, pname, params);
// }
// void  glowTextureParameterIuivEXT(PTEXTUREPARAMETERIUIVEXT fnptr, GLuint  texture, GLenum  target, GLenum  pname, const GLuint * params) {
//   (*fnptr)(texture, target, pname, params);
// }
// void  glowTextureParameterfEXT(PTEXTUREPARAMETERFEXT fnptr, GLuint  texture, GLenum  target, GLenum  pname, GLfloat  param) {
//   (*fnptr)(texture, target, pname, param);
// }
// void  glowTextureParameterfvEXT(PTEXTUREPARAMETERFVEXT fnptr, GLuint  texture, GLenum  target, GLenum  pname, const GLfloat * params) {
//   (*fnptr)(texture, target, pname, params);
// }
// void  glowTextureParameteriEXT(PTEXTUREPARAMETERIEXT fnptr, GLuint  texture, GLenum  target, GLenum  pname, GLint  param) {
//   (*fnptr)(texture, target, pname, param);
// }
// void  glowTextureParameterivEXT(PTEXTUREPARAMETERIVEXT fnptr, GLuint  texture, GLenum  target, GLenum  pname, const GLint * params) {
//   (*fnptr)(texture, target, pname, params);
// }
// void  glowTextureRangeAPPLE(PTEXTURERANGEAPPLE fnptr, GLenum  target, GLsizei  length, const void * pointer) {
//   (*fnptr)(target, length, pointer);
// }
// void  glowTextureRenderbufferEXT(PTEXTURERENDERBUFFEREXT fnptr, GLuint  texture, GLenum  target, GLuint  renderbuffer) {
//   (*fnptr)(texture, target, renderbuffer);
// }
// void  glowTextureStorage1DEXT(PTEXTURESTORAGE1DEXT fnptr, GLuint  texture, GLenum  target, GLsizei  levels, GLenum  internalformat, GLsizei  width) {
//   (*fnptr)(texture, target, levels, internalformat, width);
// }
// void  glowTextureStorage2DEXT(PTEXTURESTORAGE2DEXT fnptr, GLuint  texture, GLenum  target, GLsizei  levels, GLenum  internalformat, GLsizei  width, GLsizei  height) {
//   (*fnptr)(texture, target, levels, internalformat, width, height);
// }
// void  glowTextureStorage2DMultisampleEXT(PTEXTURESTORAGE2DMULTISAMPLEEXT fnptr, GLuint  texture, GLenum  target, GLsizei  samples, GLenum  internalformat, GLsizei  width, GLsizei  height, GLboolean  fixedsamplelocations) {
//   (*fnptr)(texture, target, samples, internalformat, width, height, fixedsamplelocations);
// }
// void  glowTextureStorage3DEXT(PTEXTURESTORAGE3DEXT fnptr, GLuint  texture, GLenum  target, GLsizei  levels, GLenum  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth) {
//   (*fnptr)(texture, target, levels, internalformat, width, height, depth);
// }
// void  glowTextureStorage3DMultisampleEXT(PTEXTURESTORAGE3DMULTISAMPLEEXT fnptr, GLuint  texture, GLenum  target, GLsizei  samples, GLenum  internalformat, GLsizei  width, GLsizei  height, GLsizei  depth, GLboolean  fixedsamplelocations) {
//   (*fnptr)(texture, target, samples, internalformat, width, height, depth, fixedsamplelocations);
// }
// void  glowTextureStorageSparseAMD(PTEXTURESTORAGESPARSEAMD fnptr, GLuint  texture, GLenum  target, GLenum  internalFormat, GLsizei  width, GLsizei  height, GLsizei  depth, GLsizei  layers, GLbitfield  flags) {
//   (*fnptr)(texture, target, internalFormat, width, height, depth, layers, flags);
// }
// void  glowTextureSubImage1DEXT(PTEXTURESUBIMAGE1DEXT fnptr, GLuint  texture, GLenum  target, GLint  level, GLint  xoffset, GLsizei  width, GLenum  format, GLenum  type, const void * pixels) {
//   (*fnptr)(texture, target, level, xoffset, width, format, type, pixels);
// }
// void  glowTextureSubImage2DEXT(PTEXTURESUBIMAGE2DEXT fnptr, GLuint  texture, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLsizei  width, GLsizei  height, GLenum  format, GLenum  type, const void * pixels) {
//   (*fnptr)(texture, target, level, xoffset, yoffset, width, height, format, type, pixels);
// }
// void  glowTextureSubImage3DEXT(PTEXTURESUBIMAGE3DEXT fnptr, GLuint  texture, GLenum  target, GLint  level, GLint  xoffset, GLint  yoffset, GLint  zoffset, GLsizei  width, GLsizei  height, GLsizei  depth, GLenum  format, GLenum  type, const void * pixels) {
//   (*fnptr)(texture, target, level, xoffset, yoffset, zoffset, width, height, depth, format, type, pixels);
// }
// void  glowTextureView(PTEXTUREVIEW fnptr, GLuint  texture, GLenum  target, GLuint  origtexture, GLenum  internalformat, GLuint  minlevel, GLuint  numlevels, GLuint  minlayer, GLuint  numlayers) {
//   (*fnptr)(texture, target, origtexture, internalformat, minlevel, numlevels, minlayer, numlayers);
// }
// void  glowTrackMatrixNV(PTRACKMATRIXNV fnptr, GLenum  target, GLuint  address, GLenum  matrix, GLenum  transform) {
//   (*fnptr)(target, address, matrix, transform);
// }
// void  glowTransformFeedbackAttribsNV(PTRANSFORMFEEDBACKATTRIBSNV fnptr, GLuint  count, const GLint * attribs, GLenum  bufferMode) {
//   (*fnptr)(count, attribs, bufferMode);
// }
// void  glowTransformFeedbackStreamAttribsNV(PTRANSFORMFEEDBACKSTREAMATTRIBSNV fnptr, GLsizei  count, const GLint * attribs, GLsizei  nbuffers, const GLint * bufstreams, GLenum  bufferMode) {
//   (*fnptr)(count, attribs, nbuffers, bufstreams, bufferMode);
// }
// void  glowTransformFeedbackVaryings(PTRANSFORMFEEDBACKVARYINGS fnptr, GLuint  program, GLsizei  count, const GLchar *const* varyings, GLenum  bufferMode) {
//   (*fnptr)(program, count, varyings, bufferMode);
// }
// void  glowTransformFeedbackVaryingsEXT(PTRANSFORMFEEDBACKVARYINGSEXT fnptr, GLuint  program, GLsizei  count, const GLchar *const* varyings, GLenum  bufferMode) {
//   (*fnptr)(program, count, varyings, bufferMode);
// }
// void  glowTransformFeedbackVaryingsNV(PTRANSFORMFEEDBACKVARYINGSNV fnptr, GLuint  program, GLsizei  count, const GLint * locations, GLenum  bufferMode) {
//   (*fnptr)(program, count, locations, bufferMode);
// }
// void  glowTransformPathNV(PTRANSFORMPATHNV fnptr, GLuint  resultPath, GLuint  srcPath, GLenum  transformType, const GLfloat * transformValues) {
//   (*fnptr)(resultPath, srcPath, transformType, transformValues);
// }
// void  glowTranslatexOES(PTRANSLATEXOES fnptr, GLfixed  x, GLfixed  y, GLfixed  z) {
//   (*fnptr)(x, y, z);
// }
// void  glowUniform1d(PUNIFORM1D fnptr, GLint  location, GLdouble  x) {
//   (*fnptr)(location, x);
// }
// void  glowUniform1dv(PUNIFORM1DV fnptr, GLint  location, GLsizei  count, const GLdouble * value) {
//   (*fnptr)(location, count, value);
// }
// void  glowUniform1f(PUNIFORM1F fnptr, GLint  location, GLfloat  v0) {
//   (*fnptr)(location, v0);
// }
// void  glowUniform1fARB(PUNIFORM1FARB fnptr, GLint  location, GLfloat  v0) {
//   (*fnptr)(location, v0);
// }
// void  glowUniform1fv(PUNIFORM1FV fnptr, GLint  location, GLsizei  count, const GLfloat * value) {
//   (*fnptr)(location, count, value);
// }
// void  glowUniform1fvARB(PUNIFORM1FVARB fnptr, GLint  location, GLsizei  count, const GLfloat * value) {
//   (*fnptr)(location, count, value);
// }
// void  glowUniform1i(PUNIFORM1I fnptr, GLint  location, GLint  v0) {
//   (*fnptr)(location, v0);
// }
// void  glowUniform1i64NV(PUNIFORM1I64NV fnptr, GLint  location, GLint64EXT  x) {
//   (*fnptr)(location, x);
// }
// void  glowUniform1i64vNV(PUNIFORM1I64VNV fnptr, GLint  location, GLsizei  count, const GLint64EXT * value) {
//   (*fnptr)(location, count, value);
// }
// void  glowUniform1iARB(PUNIFORM1IARB fnptr, GLint  location, GLint  v0) {
//   (*fnptr)(location, v0);
// }
// void  glowUniform1iv(PUNIFORM1IV fnptr, GLint  location, GLsizei  count, const GLint * value) {
//   (*fnptr)(location, count, value);
// }
// void  glowUniform1ivARB(PUNIFORM1IVARB fnptr, GLint  location, GLsizei  count, const GLint * value) {
//   (*fnptr)(location, count, value);
// }
// void  glowUniform1ui(PUNIFORM1UI fnptr, GLint  location, GLuint  v0) {
//   (*fnptr)(location, v0);
// }
// void  glowUniform1ui64NV(PUNIFORM1UI64NV fnptr, GLint  location, GLuint64EXT  x) {
//   (*fnptr)(location, x);
// }
// void  glowUniform1ui64vNV(PUNIFORM1UI64VNV fnptr, GLint  location, GLsizei  count, const GLuint64EXT * value) {
//   (*fnptr)(location, count, value);
// }
// void  glowUniform1uiEXT(PUNIFORM1UIEXT fnptr, GLint  location, GLuint  v0) {
//   (*fnptr)(location, v0);
// }
// void  glowUniform1uiv(PUNIFORM1UIV fnptr, GLint  location, GLsizei  count, const GLuint * value) {
//   (*fnptr)(location, count, value);
// }
// void  glowUniform1uivEXT(PUNIFORM1UIVEXT fnptr, GLint  location, GLsizei  count, const GLuint * value) {
//   (*fnptr)(location, count, value);
// }
// void  glowUniform2d(PUNIFORM2D fnptr, GLint  location, GLdouble  x, GLdouble  y) {
//   (*fnptr)(location, x, y);
// }
// void  glowUniform2dv(PUNIFORM2DV fnptr, GLint  location, GLsizei  count, const GLdouble * value) {
//   (*fnptr)(location, count, value);
// }
// void  glowUniform2f(PUNIFORM2F fnptr, GLint  location, GLfloat  v0, GLfloat  v1) {
//   (*fnptr)(location, v0, v1);
// }
// void  glowUniform2fARB(PUNIFORM2FARB fnptr, GLint  location, GLfloat  v0, GLfloat  v1) {
//   (*fnptr)(location, v0, v1);
// }
// void  glowUniform2fv(PUNIFORM2FV fnptr, GLint  location, GLsizei  count, const GLfloat * value) {
//   (*fnptr)(location, count, value);
// }
// void  glowUniform2fvARB(PUNIFORM2FVARB fnptr, GLint  location, GLsizei  count, const GLfloat * value) {
//   (*fnptr)(location, count, value);
// }
// void  glowUniform2i(PUNIFORM2I fnptr, GLint  location, GLint  v0, GLint  v1) {
//   (*fnptr)(location, v0, v1);
// }
// void  glowUniform2i64NV(PUNIFORM2I64NV fnptr, GLint  location, GLint64EXT  x, GLint64EXT  y) {
//   (*fnptr)(location, x, y);
// }
// void  glowUniform2i64vNV(PUNIFORM2I64VNV fnptr, GLint  location, GLsizei  count, const GLint64EXT * value) {
//   (*fnptr)(location, count, value);
// }
// void  glowUniform2iARB(PUNIFORM2IARB fnptr, GLint  location, GLint  v0, GLint  v1) {
//   (*fnptr)(location, v0, v1);
// }
// void  glowUniform2iv(PUNIFORM2IV fnptr, GLint  location, GLsizei  count, const GLint * value) {
//   (*fnptr)(location, count, value);
// }
// void  glowUniform2ivARB(PUNIFORM2IVARB fnptr, GLint  location, GLsizei  count, const GLint * value) {
//   (*fnptr)(location, count, value);
// }
// void  glowUniform2ui(PUNIFORM2UI fnptr, GLint  location, GLuint  v0, GLuint  v1) {
//   (*fnptr)(location, v0, v1);
// }
// void  glowUniform2ui64NV(PUNIFORM2UI64NV fnptr, GLint  location, GLuint64EXT  x, GLuint64EXT  y) {
//   (*fnptr)(location, x, y);
// }
// void  glowUniform2ui64vNV(PUNIFORM2UI64VNV fnptr, GLint  location, GLsizei  count, const GLuint64EXT * value) {
//   (*fnptr)(location, count, value);
// }
// void  glowUniform2uiEXT(PUNIFORM2UIEXT fnptr, GLint  location, GLuint  v0, GLuint  v1) {
//   (*fnptr)(location, v0, v1);
// }
// void  glowUniform2uiv(PUNIFORM2UIV fnptr, GLint  location, GLsizei  count, const GLuint * value) {
//   (*fnptr)(location, count, value);
// }
// void  glowUniform2uivEXT(PUNIFORM2UIVEXT fnptr, GLint  location, GLsizei  count, const GLuint * value) {
//   (*fnptr)(location, count, value);
// }
// void  glowUniform3d(PUNIFORM3D fnptr, GLint  location, GLdouble  x, GLdouble  y, GLdouble  z) {
//   (*fnptr)(location, x, y, z);
// }
// void  glowUniform3dv(PUNIFORM3DV fnptr, GLint  location, GLsizei  count, const GLdouble * value) {
//   (*fnptr)(location, count, value);
// }
// void  glowUniform3f(PUNIFORM3F fnptr, GLint  location, GLfloat  v0, GLfloat  v1, GLfloat  v2) {
//   (*fnptr)(location, v0, v1, v2);
// }
// void  glowUniform3fARB(PUNIFORM3FARB fnptr, GLint  location, GLfloat  v0, GLfloat  v1, GLfloat  v2) {
//   (*fnptr)(location, v0, v1, v2);
// }
// void  glowUniform3fv(PUNIFORM3FV fnptr, GLint  location, GLsizei  count, const GLfloat * value) {
//   (*fnptr)(location, count, value);
// }
// void  glowUniform3fvARB(PUNIFORM3FVARB fnptr, GLint  location, GLsizei  count, const GLfloat * value) {
//   (*fnptr)(location, count, value);
// }
// void  glowUniform3i(PUNIFORM3I fnptr, GLint  location, GLint  v0, GLint  v1, GLint  v2) {
//   (*fnptr)(location, v0, v1, v2);
// }
// void  glowUniform3i64NV(PUNIFORM3I64NV fnptr, GLint  location, GLint64EXT  x, GLint64EXT  y, GLint64EXT  z) {
//   (*fnptr)(location, x, y, z);
// }
// void  glowUniform3i64vNV(PUNIFORM3I64VNV fnptr, GLint  location, GLsizei  count, const GLint64EXT * value) {
//   (*fnptr)(location, count, value);
// }
// void  glowUniform3iARB(PUNIFORM3IARB fnptr, GLint  location, GLint  v0, GLint  v1, GLint  v2) {
//   (*fnptr)(location, v0, v1, v2);
// }
// void  glowUniform3iv(PUNIFORM3IV fnptr, GLint  location, GLsizei  count, const GLint * value) {
//   (*fnptr)(location, count, value);
// }
// void  glowUniform3ivARB(PUNIFORM3IVARB fnptr, GLint  location, GLsizei  count, const GLint * value) {
//   (*fnptr)(location, count, value);
// }
// void  glowUniform3ui(PUNIFORM3UI fnptr, GLint  location, GLuint  v0, GLuint  v1, GLuint  v2) {
//   (*fnptr)(location, v0, v1, v2);
// }
// void  glowUniform3ui64NV(PUNIFORM3UI64NV fnptr, GLint  location, GLuint64EXT  x, GLuint64EXT  y, GLuint64EXT  z) {
//   (*fnptr)(location, x, y, z);
// }
// void  glowUniform3ui64vNV(PUNIFORM3UI64VNV fnptr, GLint  location, GLsizei  count, const GLuint64EXT * value) {
//   (*fnptr)(location, count, value);
// }
// void  glowUniform3uiEXT(PUNIFORM3UIEXT fnptr, GLint  location, GLuint  v0, GLuint  v1, GLuint  v2) {
//   (*fnptr)(location, v0, v1, v2);
// }
// void  glowUniform3uiv(PUNIFORM3UIV fnptr, GLint  location, GLsizei  count, const GLuint * value) {
//   (*fnptr)(location, count, value);
// }
// void  glowUniform3uivEXT(PUNIFORM3UIVEXT fnptr, GLint  location, GLsizei  count, const GLuint * value) {
//   (*fnptr)(location, count, value);
// }
// void  glowUniform4d(PUNIFORM4D fnptr, GLint  location, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w) {
//   (*fnptr)(location, x, y, z, w);
// }
// void  glowUniform4dv(PUNIFORM4DV fnptr, GLint  location, GLsizei  count, const GLdouble * value) {
//   (*fnptr)(location, count, value);
// }
// void  glowUniform4f(PUNIFORM4F fnptr, GLint  location, GLfloat  v0, GLfloat  v1, GLfloat  v2, GLfloat  v3) {
//   (*fnptr)(location, v0, v1, v2, v3);
// }
// void  glowUniform4fARB(PUNIFORM4FARB fnptr, GLint  location, GLfloat  v0, GLfloat  v1, GLfloat  v2, GLfloat  v3) {
//   (*fnptr)(location, v0, v1, v2, v3);
// }
// void  glowUniform4fv(PUNIFORM4FV fnptr, GLint  location, GLsizei  count, const GLfloat * value) {
//   (*fnptr)(location, count, value);
// }
// void  glowUniform4fvARB(PUNIFORM4FVARB fnptr, GLint  location, GLsizei  count, const GLfloat * value) {
//   (*fnptr)(location, count, value);
// }
// void  glowUniform4i(PUNIFORM4I fnptr, GLint  location, GLint  v0, GLint  v1, GLint  v2, GLint  v3) {
//   (*fnptr)(location, v0, v1, v2, v3);
// }
// void  glowUniform4i64NV(PUNIFORM4I64NV fnptr, GLint  location, GLint64EXT  x, GLint64EXT  y, GLint64EXT  z, GLint64EXT  w) {
//   (*fnptr)(location, x, y, z, w);
// }
// void  glowUniform4i64vNV(PUNIFORM4I64VNV fnptr, GLint  location, GLsizei  count, const GLint64EXT * value) {
//   (*fnptr)(location, count, value);
// }
// void  glowUniform4iARB(PUNIFORM4IARB fnptr, GLint  location, GLint  v0, GLint  v1, GLint  v2, GLint  v3) {
//   (*fnptr)(location, v0, v1, v2, v3);
// }
// void  glowUniform4iv(PUNIFORM4IV fnptr, GLint  location, GLsizei  count, const GLint * value) {
//   (*fnptr)(location, count, value);
// }
// void  glowUniform4ivARB(PUNIFORM4IVARB fnptr, GLint  location, GLsizei  count, const GLint * value) {
//   (*fnptr)(location, count, value);
// }
// void  glowUniform4ui(PUNIFORM4UI fnptr, GLint  location, GLuint  v0, GLuint  v1, GLuint  v2, GLuint  v3) {
//   (*fnptr)(location, v0, v1, v2, v3);
// }
// void  glowUniform4ui64NV(PUNIFORM4UI64NV fnptr, GLint  location, GLuint64EXT  x, GLuint64EXT  y, GLuint64EXT  z, GLuint64EXT  w) {
//   (*fnptr)(location, x, y, z, w);
// }
// void  glowUniform4ui64vNV(PUNIFORM4UI64VNV fnptr, GLint  location, GLsizei  count, const GLuint64EXT * value) {
//   (*fnptr)(location, count, value);
// }
// void  glowUniform4uiEXT(PUNIFORM4UIEXT fnptr, GLint  location, GLuint  v0, GLuint  v1, GLuint  v2, GLuint  v3) {
//   (*fnptr)(location, v0, v1, v2, v3);
// }
// void  glowUniform4uiv(PUNIFORM4UIV fnptr, GLint  location, GLsizei  count, const GLuint * value) {
//   (*fnptr)(location, count, value);
// }
// void  glowUniform4uivEXT(PUNIFORM4UIVEXT fnptr, GLint  location, GLsizei  count, const GLuint * value) {
//   (*fnptr)(location, count, value);
// }
// void  glowUniformBlockBinding(PUNIFORMBLOCKBINDING fnptr, GLuint  program, GLuint  uniformBlockIndex, GLuint  uniformBlockBinding) {
//   (*fnptr)(program, uniformBlockIndex, uniformBlockBinding);
// }
// void  glowUniformBufferEXT(PUNIFORMBUFFEREXT fnptr, GLuint  program, GLint  location, GLuint  buffer) {
//   (*fnptr)(program, location, buffer);
// }
// void  glowUniformHandleui64ARB(PUNIFORMHANDLEUI64ARB fnptr, GLint  location, GLuint64  value) {
//   (*fnptr)(location, value);
// }
// void  glowUniformHandleui64NV(PUNIFORMHANDLEUI64NV fnptr, GLint  location, GLuint64  value) {
//   (*fnptr)(location, value);
// }
// void  glowUniformHandleui64vARB(PUNIFORMHANDLEUI64VARB fnptr, GLint  location, GLsizei  count, const GLuint64 * value) {
//   (*fnptr)(location, count, value);
// }
// void  glowUniformHandleui64vNV(PUNIFORMHANDLEUI64VNV fnptr, GLint  location, GLsizei  count, const GLuint64 * value) {
//   (*fnptr)(location, count, value);
// }
// void  glowUniformMatrix2dv(PUNIFORMMATRIX2DV fnptr, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value) {
//   (*fnptr)(location, count, transpose, value);
// }
// void  glowUniformMatrix2fv(PUNIFORMMATRIX2FV fnptr, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value) {
//   (*fnptr)(location, count, transpose, value);
// }
// void  glowUniformMatrix2fvARB(PUNIFORMMATRIX2FVARB fnptr, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value) {
//   (*fnptr)(location, count, transpose, value);
// }
// void  glowUniformMatrix2x3dv(PUNIFORMMATRIX2X3DV fnptr, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value) {
//   (*fnptr)(location, count, transpose, value);
// }
// void  glowUniformMatrix2x3fv(PUNIFORMMATRIX2X3FV fnptr, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value) {
//   (*fnptr)(location, count, transpose, value);
// }
// void  glowUniformMatrix2x4dv(PUNIFORMMATRIX2X4DV fnptr, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value) {
//   (*fnptr)(location, count, transpose, value);
// }
// void  glowUniformMatrix2x4fv(PUNIFORMMATRIX2X4FV fnptr, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value) {
//   (*fnptr)(location, count, transpose, value);
// }
// void  glowUniformMatrix3dv(PUNIFORMMATRIX3DV fnptr, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value) {
//   (*fnptr)(location, count, transpose, value);
// }
// void  glowUniformMatrix3fv(PUNIFORMMATRIX3FV fnptr, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value) {
//   (*fnptr)(location, count, transpose, value);
// }
// void  glowUniformMatrix3fvARB(PUNIFORMMATRIX3FVARB fnptr, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value) {
//   (*fnptr)(location, count, transpose, value);
// }
// void  glowUniformMatrix3x2dv(PUNIFORMMATRIX3X2DV fnptr, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value) {
//   (*fnptr)(location, count, transpose, value);
// }
// void  glowUniformMatrix3x2fv(PUNIFORMMATRIX3X2FV fnptr, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value) {
//   (*fnptr)(location, count, transpose, value);
// }
// void  glowUniformMatrix3x4dv(PUNIFORMMATRIX3X4DV fnptr, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value) {
//   (*fnptr)(location, count, transpose, value);
// }
// void  glowUniformMatrix3x4fv(PUNIFORMMATRIX3X4FV fnptr, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value) {
//   (*fnptr)(location, count, transpose, value);
// }
// void  glowUniformMatrix4dv(PUNIFORMMATRIX4DV fnptr, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value) {
//   (*fnptr)(location, count, transpose, value);
// }
// void  glowUniformMatrix4fv(PUNIFORMMATRIX4FV fnptr, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value) {
//   (*fnptr)(location, count, transpose, value);
// }
// void  glowUniformMatrix4fvARB(PUNIFORMMATRIX4FVARB fnptr, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value) {
//   (*fnptr)(location, count, transpose, value);
// }
// void  glowUniformMatrix4x2dv(PUNIFORMMATRIX4X2DV fnptr, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value) {
//   (*fnptr)(location, count, transpose, value);
// }
// void  glowUniformMatrix4x2fv(PUNIFORMMATRIX4X2FV fnptr, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value) {
//   (*fnptr)(location, count, transpose, value);
// }
// void  glowUniformMatrix4x3dv(PUNIFORMMATRIX4X3DV fnptr, GLint  location, GLsizei  count, GLboolean  transpose, const GLdouble * value) {
//   (*fnptr)(location, count, transpose, value);
// }
// void  glowUniformMatrix4x3fv(PUNIFORMMATRIX4X3FV fnptr, GLint  location, GLsizei  count, GLboolean  transpose, const GLfloat * value) {
//   (*fnptr)(location, count, transpose, value);
// }
// void  glowUniformSubroutinesuiv(PUNIFORMSUBROUTINESUIV fnptr, GLenum  shadertype, GLsizei  count, const GLuint * indices) {
//   (*fnptr)(shadertype, count, indices);
// }
// void  glowUniformui64NV(PUNIFORMUI64NV fnptr, GLint  location, GLuint64EXT  value) {
//   (*fnptr)(location, value);
// }
// void  glowUniformui64vNV(PUNIFORMUI64VNV fnptr, GLint  location, GLsizei  count, const GLuint64EXT * value) {
//   (*fnptr)(location, count, value);
// }
// void  glowUnlockArraysEXT(PUNLOCKARRAYSEXT fnptr) {
//   (*fnptr)();
// }
// GLboolean  glowUnmapBuffer(PUNMAPBUFFER fnptr, GLenum  target) {
//   return (*fnptr)(target);
// }
// GLboolean  glowUnmapBufferARB(PUNMAPBUFFERARB fnptr, GLenum  target) {
//   return (*fnptr)(target);
// }
// GLboolean  glowUnmapNamedBufferEXT(PUNMAPNAMEDBUFFEREXT fnptr, GLuint  buffer) {
//   return (*fnptr)(buffer);
// }
// void  glowUnmapObjectBufferATI(PUNMAPOBJECTBUFFERATI fnptr, GLuint  buffer) {
//   (*fnptr)(buffer);
// }
// void  glowUnmapTexture2DINTEL(PUNMAPTEXTURE2DINTEL fnptr, GLuint  texture, GLint  level) {
//   (*fnptr)(texture, level);
// }
// void  glowUpdateObjectBufferATI(PUPDATEOBJECTBUFFERATI fnptr, GLuint  buffer, GLuint  offset, GLsizei  size, const void * pointer, GLenum  preserve) {
//   (*fnptr)(buffer, offset, size, pointer, preserve);
// }
// void  glowUseProgram(PUSEPROGRAM fnptr, GLuint  program) {
//   (*fnptr)(program);
// }
// void  glowUseProgramObjectARB(PUSEPROGRAMOBJECTARB fnptr, GLhandleARB  programObj) {
//   (*fnptr)(programObj);
// }
// void  glowUseProgramStages(PUSEPROGRAMSTAGES fnptr, GLuint  pipeline, GLbitfield  stages, GLuint  program) {
//   (*fnptr)(pipeline, stages, program);
// }
// void  glowUseProgramStagesEXT(PUSEPROGRAMSTAGESEXT fnptr, GLuint  pipeline, GLbitfield  stages, GLuint  program) {
//   (*fnptr)(pipeline, stages, program);
// }
// void  glowUseShaderProgramEXT(PUSESHADERPROGRAMEXT fnptr, GLenum  type, GLuint  program) {
//   (*fnptr)(type, program);
// }
// void  glowVDPAUFiniNV(PVDPAUFININV fnptr) {
//   (*fnptr)();
// }
// void  glowVDPAUGetSurfaceivNV(PVDPAUGETSURFACEIVNV fnptr, GLvdpauSurfaceNV  surface, GLenum  pname, GLsizei  bufSize, GLsizei * length, GLint * values) {
//   (*fnptr)(surface, pname, bufSize, length, values);
// }
// void  glowVDPAUInitNV(PVDPAUINITNV fnptr, const void * vdpDevice, const void * getProcAddress) {
//   (*fnptr)(vdpDevice, getProcAddress);
// }
// GLboolean  glowVDPAUIsSurfaceNV(PVDPAUISSURFACENV fnptr, GLvdpauSurfaceNV  surface) {
//   return (*fnptr)(surface);
// }
// void  glowVDPAUMapSurfacesNV(PVDPAUMAPSURFACESNV fnptr, GLsizei  numSurfaces, const GLvdpauSurfaceNV * surfaces) {
//   (*fnptr)(numSurfaces, surfaces);
// }
// GLvdpauSurfaceNV  glowVDPAURegisterOutputSurfaceNV(PVDPAUREGISTEROUTPUTSURFACENV fnptr, const void * vdpSurface, GLenum  target, GLsizei  numTextureNames, const GLuint * textureNames) {
//   return (*fnptr)(vdpSurface, target, numTextureNames, textureNames);
// }
// GLvdpauSurfaceNV  glowVDPAURegisterVideoSurfaceNV(PVDPAUREGISTERVIDEOSURFACENV fnptr, const void * vdpSurface, GLenum  target, GLsizei  numTextureNames, const GLuint * textureNames) {
//   return (*fnptr)(vdpSurface, target, numTextureNames, textureNames);
// }
// void  glowVDPAUSurfaceAccessNV(PVDPAUSURFACEACCESSNV fnptr, GLvdpauSurfaceNV  surface, GLenum  access) {
//   (*fnptr)(surface, access);
// }
// void  glowVDPAUUnmapSurfacesNV(PVDPAUUNMAPSURFACESNV fnptr, GLsizei  numSurface, const GLvdpauSurfaceNV * surfaces) {
//   (*fnptr)(numSurface, surfaces);
// }
// void  glowVDPAUUnregisterSurfaceNV(PVDPAUUNREGISTERSURFACENV fnptr, GLvdpauSurfaceNV  surface) {
//   (*fnptr)(surface);
// }
// void  glowValidateProgram(PVALIDATEPROGRAM fnptr, GLuint  program) {
//   (*fnptr)(program);
// }
// void  glowValidateProgramARB(PVALIDATEPROGRAMARB fnptr, GLhandleARB  programObj) {
//   (*fnptr)(programObj);
// }
// void  glowValidateProgramPipeline(PVALIDATEPROGRAMPIPELINE fnptr, GLuint  pipeline) {
//   (*fnptr)(pipeline);
// }
// void  glowValidateProgramPipelineEXT(PVALIDATEPROGRAMPIPELINEEXT fnptr, GLuint  pipeline) {
//   (*fnptr)(pipeline);
// }
// void  glowVariantArrayObjectATI(PVARIANTARRAYOBJECTATI fnptr, GLuint  id, GLenum  type, GLsizei  stride, GLuint  buffer, GLuint  offset) {
//   (*fnptr)(id, type, stride, buffer, offset);
// }
// void  glowVariantPointerEXT(PVARIANTPOINTEREXT fnptr, GLuint  id, GLenum  type, GLuint  stride, const void * addr) {
//   (*fnptr)(id, type, stride, addr);
// }
// void  glowVariantbvEXT(PVARIANTBVEXT fnptr, GLuint  id, const GLbyte * addr) {
//   (*fnptr)(id, addr);
// }
// void  glowVariantdvEXT(PVARIANTDVEXT fnptr, GLuint  id, const GLdouble * addr) {
//   (*fnptr)(id, addr);
// }
// void  glowVariantfvEXT(PVARIANTFVEXT fnptr, GLuint  id, const GLfloat * addr) {
//   (*fnptr)(id, addr);
// }
// void  glowVariantivEXT(PVARIANTIVEXT fnptr, GLuint  id, const GLint * addr) {
//   (*fnptr)(id, addr);
// }
// void  glowVariantsvEXT(PVARIANTSVEXT fnptr, GLuint  id, const GLshort * addr) {
//   (*fnptr)(id, addr);
// }
// void  glowVariantubvEXT(PVARIANTUBVEXT fnptr, GLuint  id, const GLubyte * addr) {
//   (*fnptr)(id, addr);
// }
// void  glowVariantuivEXT(PVARIANTUIVEXT fnptr, GLuint  id, const GLuint * addr) {
//   (*fnptr)(id, addr);
// }
// void  glowVariantusvEXT(PVARIANTUSVEXT fnptr, GLuint  id, const GLushort * addr) {
//   (*fnptr)(id, addr);
// }
// void  glowVertex2bOES(PVERTEX2BOES fnptr, GLbyte  x) {
//   (*fnptr)(x);
// }
// void  glowVertex2bvOES(PVERTEX2BVOES fnptr, const GLbyte * coords) {
//   (*fnptr)(coords);
// }
// void  glowVertex2hNV(PVERTEX2HNV fnptr, GLhalfNV  x, GLhalfNV  y) {
//   (*fnptr)(x, y);
// }
// void  glowVertex2hvNV(PVERTEX2HVNV fnptr, const GLhalfNV * v) {
//   (*fnptr)(v);
// }
// void  glowVertex2xOES(PVERTEX2XOES fnptr, GLfixed  x) {
//   (*fnptr)(x);
// }
// void  glowVertex2xvOES(PVERTEX2XVOES fnptr, const GLfixed * coords) {
//   (*fnptr)(coords);
// }
// void  glowVertex3bOES(PVERTEX3BOES fnptr, GLbyte  x, GLbyte  y) {
//   (*fnptr)(x, y);
// }
// void  glowVertex3bvOES(PVERTEX3BVOES fnptr, const GLbyte * coords) {
//   (*fnptr)(coords);
// }
// void  glowVertex3hNV(PVERTEX3HNV fnptr, GLhalfNV  x, GLhalfNV  y, GLhalfNV  z) {
//   (*fnptr)(x, y, z);
// }
// void  glowVertex3hvNV(PVERTEX3HVNV fnptr, const GLhalfNV * v) {
//   (*fnptr)(v);
// }
// void  glowVertex3xOES(PVERTEX3XOES fnptr, GLfixed  x, GLfixed  y) {
//   (*fnptr)(x, y);
// }
// void  glowVertex3xvOES(PVERTEX3XVOES fnptr, const GLfixed * coords) {
//   (*fnptr)(coords);
// }
// void  glowVertex4bOES(PVERTEX4BOES fnptr, GLbyte  x, GLbyte  y, GLbyte  z) {
//   (*fnptr)(x, y, z);
// }
// void  glowVertex4bvOES(PVERTEX4BVOES fnptr, const GLbyte * coords) {
//   (*fnptr)(coords);
// }
// void  glowVertex4hNV(PVERTEX4HNV fnptr, GLhalfNV  x, GLhalfNV  y, GLhalfNV  z, GLhalfNV  w) {
//   (*fnptr)(x, y, z, w);
// }
// void  glowVertex4hvNV(PVERTEX4HVNV fnptr, const GLhalfNV * v) {
//   (*fnptr)(v);
// }
// void  glowVertex4xOES(PVERTEX4XOES fnptr, GLfixed  x, GLfixed  y, GLfixed  z) {
//   (*fnptr)(x, y, z);
// }
// void  glowVertex4xvOES(PVERTEX4XVOES fnptr, const GLfixed * coords) {
//   (*fnptr)(coords);
// }
// void  glowVertexArrayBindVertexBufferEXT(PVERTEXARRAYBINDVERTEXBUFFEREXT fnptr, GLuint  vaobj, GLuint  bindingindex, GLuint  buffer, GLintptr  offset, GLsizei  stride) {
//   (*fnptr)(vaobj, bindingindex, buffer, offset, stride);
// }
// void  glowVertexArrayColorOffsetEXT(PVERTEXARRAYCOLOROFFSETEXT fnptr, GLuint  vaobj, GLuint  buffer, GLint  size, GLenum  type, GLsizei  stride, GLintptr  offset) {
//   (*fnptr)(vaobj, buffer, size, type, stride, offset);
// }
// void  glowVertexArrayEdgeFlagOffsetEXT(PVERTEXARRAYEDGEFLAGOFFSETEXT fnptr, GLuint  vaobj, GLuint  buffer, GLsizei  stride, GLintptr  offset) {
//   (*fnptr)(vaobj, buffer, stride, offset);
// }
// void  glowVertexArrayFogCoordOffsetEXT(PVERTEXARRAYFOGCOORDOFFSETEXT fnptr, GLuint  vaobj, GLuint  buffer, GLenum  type, GLsizei  stride, GLintptr  offset) {
//   (*fnptr)(vaobj, buffer, type, stride, offset);
// }
// void  glowVertexArrayIndexOffsetEXT(PVERTEXARRAYINDEXOFFSETEXT fnptr, GLuint  vaobj, GLuint  buffer, GLenum  type, GLsizei  stride, GLintptr  offset) {
//   (*fnptr)(vaobj, buffer, type, stride, offset);
// }
// void  glowVertexArrayMultiTexCoordOffsetEXT(PVERTEXARRAYMULTITEXCOORDOFFSETEXT fnptr, GLuint  vaobj, GLuint  buffer, GLenum  texunit, GLint  size, GLenum  type, GLsizei  stride, GLintptr  offset) {
//   (*fnptr)(vaobj, buffer, texunit, size, type, stride, offset);
// }
// void  glowVertexArrayNormalOffsetEXT(PVERTEXARRAYNORMALOFFSETEXT fnptr, GLuint  vaobj, GLuint  buffer, GLenum  type, GLsizei  stride, GLintptr  offset) {
//   (*fnptr)(vaobj, buffer, type, stride, offset);
// }
// void  glowVertexArrayParameteriAPPLE(PVERTEXARRAYPARAMETERIAPPLE fnptr, GLenum  pname, GLint  param) {
//   (*fnptr)(pname, param);
// }
// void  glowVertexArrayRangeAPPLE(PVERTEXARRAYRANGEAPPLE fnptr, GLsizei  length, void * pointer) {
//   (*fnptr)(length, pointer);
// }
// void  glowVertexArrayRangeNV(PVERTEXARRAYRANGENV fnptr, GLsizei  length, const void * pointer) {
//   (*fnptr)(length, pointer);
// }
// void  glowVertexArraySecondaryColorOffsetEXT(PVERTEXARRAYSECONDARYCOLOROFFSETEXT fnptr, GLuint  vaobj, GLuint  buffer, GLint  size, GLenum  type, GLsizei  stride, GLintptr  offset) {
//   (*fnptr)(vaobj, buffer, size, type, stride, offset);
// }
// void  glowVertexArrayTexCoordOffsetEXT(PVERTEXARRAYTEXCOORDOFFSETEXT fnptr, GLuint  vaobj, GLuint  buffer, GLint  size, GLenum  type, GLsizei  stride, GLintptr  offset) {
//   (*fnptr)(vaobj, buffer, size, type, stride, offset);
// }
// void  glowVertexArrayVertexAttribBindingEXT(PVERTEXARRAYVERTEXATTRIBBINDINGEXT fnptr, GLuint  vaobj, GLuint  attribindex, GLuint  bindingindex) {
//   (*fnptr)(vaobj, attribindex, bindingindex);
// }
// void  glowVertexArrayVertexAttribDivisorEXT(PVERTEXARRAYVERTEXATTRIBDIVISOREXT fnptr, GLuint  vaobj, GLuint  index, GLuint  divisor) {
//   (*fnptr)(vaobj, index, divisor);
// }
// void  glowVertexArrayVertexAttribFormatEXT(PVERTEXARRAYVERTEXATTRIBFORMATEXT fnptr, GLuint  vaobj, GLuint  attribindex, GLint  size, GLenum  type, GLboolean  normalized, GLuint  relativeoffset) {
//   (*fnptr)(vaobj, attribindex, size, type, normalized, relativeoffset);
// }
// void  glowVertexArrayVertexAttribIFormatEXT(PVERTEXARRAYVERTEXATTRIBIFORMATEXT fnptr, GLuint  vaobj, GLuint  attribindex, GLint  size, GLenum  type, GLuint  relativeoffset) {
//   (*fnptr)(vaobj, attribindex, size, type, relativeoffset);
// }
// void  glowVertexArrayVertexAttribIOffsetEXT(PVERTEXARRAYVERTEXATTRIBIOFFSETEXT fnptr, GLuint  vaobj, GLuint  buffer, GLuint  index, GLint  size, GLenum  type, GLsizei  stride, GLintptr  offset) {
//   (*fnptr)(vaobj, buffer, index, size, type, stride, offset);
// }
// void  glowVertexArrayVertexAttribLFormatEXT(PVERTEXARRAYVERTEXATTRIBLFORMATEXT fnptr, GLuint  vaobj, GLuint  attribindex, GLint  size, GLenum  type, GLuint  relativeoffset) {
//   (*fnptr)(vaobj, attribindex, size, type, relativeoffset);
// }
// void  glowVertexArrayVertexAttribLOffsetEXT(PVERTEXARRAYVERTEXATTRIBLOFFSETEXT fnptr, GLuint  vaobj, GLuint  buffer, GLuint  index, GLint  size, GLenum  type, GLsizei  stride, GLintptr  offset) {
//   (*fnptr)(vaobj, buffer, index, size, type, stride, offset);
// }
// void  glowVertexArrayVertexAttribOffsetEXT(PVERTEXARRAYVERTEXATTRIBOFFSETEXT fnptr, GLuint  vaobj, GLuint  buffer, GLuint  index, GLint  size, GLenum  type, GLboolean  normalized, GLsizei  stride, GLintptr  offset) {
//   (*fnptr)(vaobj, buffer, index, size, type, normalized, stride, offset);
// }
// void  glowVertexArrayVertexBindingDivisorEXT(PVERTEXARRAYVERTEXBINDINGDIVISOREXT fnptr, GLuint  vaobj, GLuint  bindingindex, GLuint  divisor) {
//   (*fnptr)(vaobj, bindingindex, divisor);
// }
// void  glowVertexArrayVertexOffsetEXT(PVERTEXARRAYVERTEXOFFSETEXT fnptr, GLuint  vaobj, GLuint  buffer, GLint  size, GLenum  type, GLsizei  stride, GLintptr  offset) {
//   (*fnptr)(vaobj, buffer, size, type, stride, offset);
// }
// void  glowVertexAttrib1d(PVERTEXATTRIB1D fnptr, GLuint  index, GLdouble  x) {
//   (*fnptr)(index, x);
// }
// void  glowVertexAttrib1dARB(PVERTEXATTRIB1DARB fnptr, GLuint  index, GLdouble  x) {
//   (*fnptr)(index, x);
// }
// void  glowVertexAttrib1dNV(PVERTEXATTRIB1DNV fnptr, GLuint  index, GLdouble  x) {
//   (*fnptr)(index, x);
// }
// void  glowVertexAttrib1dv(PVERTEXATTRIB1DV fnptr, GLuint  index, const GLdouble * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttrib1dvARB(PVERTEXATTRIB1DVARB fnptr, GLuint  index, const GLdouble * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttrib1dvNV(PVERTEXATTRIB1DVNV fnptr, GLuint  index, const GLdouble * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttrib1f(PVERTEXATTRIB1F fnptr, GLuint  index, GLfloat  x) {
//   (*fnptr)(index, x);
// }
// void  glowVertexAttrib1fARB(PVERTEXATTRIB1FARB fnptr, GLuint  index, GLfloat  x) {
//   (*fnptr)(index, x);
// }
// void  glowVertexAttrib1fNV(PVERTEXATTRIB1FNV fnptr, GLuint  index, GLfloat  x) {
//   (*fnptr)(index, x);
// }
// void  glowVertexAttrib1fv(PVERTEXATTRIB1FV fnptr, GLuint  index, const GLfloat * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttrib1fvARB(PVERTEXATTRIB1FVARB fnptr, GLuint  index, const GLfloat * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttrib1fvNV(PVERTEXATTRIB1FVNV fnptr, GLuint  index, const GLfloat * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttrib1hNV(PVERTEXATTRIB1HNV fnptr, GLuint  index, GLhalfNV  x) {
//   (*fnptr)(index, x);
// }
// void  glowVertexAttrib1hvNV(PVERTEXATTRIB1HVNV fnptr, GLuint  index, const GLhalfNV * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttrib1s(PVERTEXATTRIB1S fnptr, GLuint  index, GLshort  x) {
//   (*fnptr)(index, x);
// }
// void  glowVertexAttrib1sARB(PVERTEXATTRIB1SARB fnptr, GLuint  index, GLshort  x) {
//   (*fnptr)(index, x);
// }
// void  glowVertexAttrib1sNV(PVERTEXATTRIB1SNV fnptr, GLuint  index, GLshort  x) {
//   (*fnptr)(index, x);
// }
// void  glowVertexAttrib1sv(PVERTEXATTRIB1SV fnptr, GLuint  index, const GLshort * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttrib1svARB(PVERTEXATTRIB1SVARB fnptr, GLuint  index, const GLshort * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttrib1svNV(PVERTEXATTRIB1SVNV fnptr, GLuint  index, const GLshort * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttrib2d(PVERTEXATTRIB2D fnptr, GLuint  index, GLdouble  x, GLdouble  y) {
//   (*fnptr)(index, x, y);
// }
// void  glowVertexAttrib2dARB(PVERTEXATTRIB2DARB fnptr, GLuint  index, GLdouble  x, GLdouble  y) {
//   (*fnptr)(index, x, y);
// }
// void  glowVertexAttrib2dNV(PVERTEXATTRIB2DNV fnptr, GLuint  index, GLdouble  x, GLdouble  y) {
//   (*fnptr)(index, x, y);
// }
// void  glowVertexAttrib2dv(PVERTEXATTRIB2DV fnptr, GLuint  index, const GLdouble * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttrib2dvARB(PVERTEXATTRIB2DVARB fnptr, GLuint  index, const GLdouble * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttrib2dvNV(PVERTEXATTRIB2DVNV fnptr, GLuint  index, const GLdouble * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttrib2f(PVERTEXATTRIB2F fnptr, GLuint  index, GLfloat  x, GLfloat  y) {
//   (*fnptr)(index, x, y);
// }
// void  glowVertexAttrib2fARB(PVERTEXATTRIB2FARB fnptr, GLuint  index, GLfloat  x, GLfloat  y) {
//   (*fnptr)(index, x, y);
// }
// void  glowVertexAttrib2fNV(PVERTEXATTRIB2FNV fnptr, GLuint  index, GLfloat  x, GLfloat  y) {
//   (*fnptr)(index, x, y);
// }
// void  glowVertexAttrib2fv(PVERTEXATTRIB2FV fnptr, GLuint  index, const GLfloat * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttrib2fvARB(PVERTEXATTRIB2FVARB fnptr, GLuint  index, const GLfloat * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttrib2fvNV(PVERTEXATTRIB2FVNV fnptr, GLuint  index, const GLfloat * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttrib2hNV(PVERTEXATTRIB2HNV fnptr, GLuint  index, GLhalfNV  x, GLhalfNV  y) {
//   (*fnptr)(index, x, y);
// }
// void  glowVertexAttrib2hvNV(PVERTEXATTRIB2HVNV fnptr, GLuint  index, const GLhalfNV * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttrib2s(PVERTEXATTRIB2S fnptr, GLuint  index, GLshort  x, GLshort  y) {
//   (*fnptr)(index, x, y);
// }
// void  glowVertexAttrib2sARB(PVERTEXATTRIB2SARB fnptr, GLuint  index, GLshort  x, GLshort  y) {
//   (*fnptr)(index, x, y);
// }
// void  glowVertexAttrib2sNV(PVERTEXATTRIB2SNV fnptr, GLuint  index, GLshort  x, GLshort  y) {
//   (*fnptr)(index, x, y);
// }
// void  glowVertexAttrib2sv(PVERTEXATTRIB2SV fnptr, GLuint  index, const GLshort * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttrib2svARB(PVERTEXATTRIB2SVARB fnptr, GLuint  index, const GLshort * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttrib2svNV(PVERTEXATTRIB2SVNV fnptr, GLuint  index, const GLshort * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttrib3d(PVERTEXATTRIB3D fnptr, GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z) {
//   (*fnptr)(index, x, y, z);
// }
// void  glowVertexAttrib3dARB(PVERTEXATTRIB3DARB fnptr, GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z) {
//   (*fnptr)(index, x, y, z);
// }
// void  glowVertexAttrib3dNV(PVERTEXATTRIB3DNV fnptr, GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z) {
//   (*fnptr)(index, x, y, z);
// }
// void  glowVertexAttrib3dv(PVERTEXATTRIB3DV fnptr, GLuint  index, const GLdouble * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttrib3dvARB(PVERTEXATTRIB3DVARB fnptr, GLuint  index, const GLdouble * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttrib3dvNV(PVERTEXATTRIB3DVNV fnptr, GLuint  index, const GLdouble * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttrib3f(PVERTEXATTRIB3F fnptr, GLuint  index, GLfloat  x, GLfloat  y, GLfloat  z) {
//   (*fnptr)(index, x, y, z);
// }
// void  glowVertexAttrib3fARB(PVERTEXATTRIB3FARB fnptr, GLuint  index, GLfloat  x, GLfloat  y, GLfloat  z) {
//   (*fnptr)(index, x, y, z);
// }
// void  glowVertexAttrib3fNV(PVERTEXATTRIB3FNV fnptr, GLuint  index, GLfloat  x, GLfloat  y, GLfloat  z) {
//   (*fnptr)(index, x, y, z);
// }
// void  glowVertexAttrib3fv(PVERTEXATTRIB3FV fnptr, GLuint  index, const GLfloat * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttrib3fvARB(PVERTEXATTRIB3FVARB fnptr, GLuint  index, const GLfloat * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttrib3fvNV(PVERTEXATTRIB3FVNV fnptr, GLuint  index, const GLfloat * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttrib3hNV(PVERTEXATTRIB3HNV fnptr, GLuint  index, GLhalfNV  x, GLhalfNV  y, GLhalfNV  z) {
//   (*fnptr)(index, x, y, z);
// }
// void  glowVertexAttrib3hvNV(PVERTEXATTRIB3HVNV fnptr, GLuint  index, const GLhalfNV * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttrib3s(PVERTEXATTRIB3S fnptr, GLuint  index, GLshort  x, GLshort  y, GLshort  z) {
//   (*fnptr)(index, x, y, z);
// }
// void  glowVertexAttrib3sARB(PVERTEXATTRIB3SARB fnptr, GLuint  index, GLshort  x, GLshort  y, GLshort  z) {
//   (*fnptr)(index, x, y, z);
// }
// void  glowVertexAttrib3sNV(PVERTEXATTRIB3SNV fnptr, GLuint  index, GLshort  x, GLshort  y, GLshort  z) {
//   (*fnptr)(index, x, y, z);
// }
// void  glowVertexAttrib3sv(PVERTEXATTRIB3SV fnptr, GLuint  index, const GLshort * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttrib3svARB(PVERTEXATTRIB3SVARB fnptr, GLuint  index, const GLshort * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttrib3svNV(PVERTEXATTRIB3SVNV fnptr, GLuint  index, const GLshort * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttrib4Nbv(PVERTEXATTRIB4NBV fnptr, GLuint  index, const GLbyte * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttrib4NbvARB(PVERTEXATTRIB4NBVARB fnptr, GLuint  index, const GLbyte * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttrib4Niv(PVERTEXATTRIB4NIV fnptr, GLuint  index, const GLint * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttrib4NivARB(PVERTEXATTRIB4NIVARB fnptr, GLuint  index, const GLint * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttrib4Nsv(PVERTEXATTRIB4NSV fnptr, GLuint  index, const GLshort * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttrib4NsvARB(PVERTEXATTRIB4NSVARB fnptr, GLuint  index, const GLshort * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttrib4Nub(PVERTEXATTRIB4NUB fnptr, GLuint  index, GLubyte  x, GLubyte  y, GLubyte  z, GLubyte  w) {
//   (*fnptr)(index, x, y, z, w);
// }
// void  glowVertexAttrib4NubARB(PVERTEXATTRIB4NUBARB fnptr, GLuint  index, GLubyte  x, GLubyte  y, GLubyte  z, GLubyte  w) {
//   (*fnptr)(index, x, y, z, w);
// }
// void  glowVertexAttrib4Nubv(PVERTEXATTRIB4NUBV fnptr, GLuint  index, const GLubyte * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttrib4NubvARB(PVERTEXATTRIB4NUBVARB fnptr, GLuint  index, const GLubyte * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttrib4Nuiv(PVERTEXATTRIB4NUIV fnptr, GLuint  index, const GLuint * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttrib4NuivARB(PVERTEXATTRIB4NUIVARB fnptr, GLuint  index, const GLuint * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttrib4Nusv(PVERTEXATTRIB4NUSV fnptr, GLuint  index, const GLushort * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttrib4NusvARB(PVERTEXATTRIB4NUSVARB fnptr, GLuint  index, const GLushort * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttrib4bv(PVERTEXATTRIB4BV fnptr, GLuint  index, const GLbyte * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttrib4bvARB(PVERTEXATTRIB4BVARB fnptr, GLuint  index, const GLbyte * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttrib4d(PVERTEXATTRIB4D fnptr, GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w) {
//   (*fnptr)(index, x, y, z, w);
// }
// void  glowVertexAttrib4dARB(PVERTEXATTRIB4DARB fnptr, GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w) {
//   (*fnptr)(index, x, y, z, w);
// }
// void  glowVertexAttrib4dNV(PVERTEXATTRIB4DNV fnptr, GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w) {
//   (*fnptr)(index, x, y, z, w);
// }
// void  glowVertexAttrib4dv(PVERTEXATTRIB4DV fnptr, GLuint  index, const GLdouble * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttrib4dvARB(PVERTEXATTRIB4DVARB fnptr, GLuint  index, const GLdouble * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttrib4dvNV(PVERTEXATTRIB4DVNV fnptr, GLuint  index, const GLdouble * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttrib4f(PVERTEXATTRIB4F fnptr, GLuint  index, GLfloat  x, GLfloat  y, GLfloat  z, GLfloat  w) {
//   (*fnptr)(index, x, y, z, w);
// }
// void  glowVertexAttrib4fARB(PVERTEXATTRIB4FARB fnptr, GLuint  index, GLfloat  x, GLfloat  y, GLfloat  z, GLfloat  w) {
//   (*fnptr)(index, x, y, z, w);
// }
// void  glowVertexAttrib4fNV(PVERTEXATTRIB4FNV fnptr, GLuint  index, GLfloat  x, GLfloat  y, GLfloat  z, GLfloat  w) {
//   (*fnptr)(index, x, y, z, w);
// }
// void  glowVertexAttrib4fv(PVERTEXATTRIB4FV fnptr, GLuint  index, const GLfloat * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttrib4fvARB(PVERTEXATTRIB4FVARB fnptr, GLuint  index, const GLfloat * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttrib4fvNV(PVERTEXATTRIB4FVNV fnptr, GLuint  index, const GLfloat * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttrib4hNV(PVERTEXATTRIB4HNV fnptr, GLuint  index, GLhalfNV  x, GLhalfNV  y, GLhalfNV  z, GLhalfNV  w) {
//   (*fnptr)(index, x, y, z, w);
// }
// void  glowVertexAttrib4hvNV(PVERTEXATTRIB4HVNV fnptr, GLuint  index, const GLhalfNV * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttrib4iv(PVERTEXATTRIB4IV fnptr, GLuint  index, const GLint * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttrib4ivARB(PVERTEXATTRIB4IVARB fnptr, GLuint  index, const GLint * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttrib4s(PVERTEXATTRIB4S fnptr, GLuint  index, GLshort  x, GLshort  y, GLshort  z, GLshort  w) {
//   (*fnptr)(index, x, y, z, w);
// }
// void  glowVertexAttrib4sARB(PVERTEXATTRIB4SARB fnptr, GLuint  index, GLshort  x, GLshort  y, GLshort  z, GLshort  w) {
//   (*fnptr)(index, x, y, z, w);
// }
// void  glowVertexAttrib4sNV(PVERTEXATTRIB4SNV fnptr, GLuint  index, GLshort  x, GLshort  y, GLshort  z, GLshort  w) {
//   (*fnptr)(index, x, y, z, w);
// }
// void  glowVertexAttrib4sv(PVERTEXATTRIB4SV fnptr, GLuint  index, const GLshort * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttrib4svARB(PVERTEXATTRIB4SVARB fnptr, GLuint  index, const GLshort * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttrib4svNV(PVERTEXATTRIB4SVNV fnptr, GLuint  index, const GLshort * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttrib4ubNV(PVERTEXATTRIB4UBNV fnptr, GLuint  index, GLubyte  x, GLubyte  y, GLubyte  z, GLubyte  w) {
//   (*fnptr)(index, x, y, z, w);
// }
// void  glowVertexAttrib4ubv(PVERTEXATTRIB4UBV fnptr, GLuint  index, const GLubyte * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttrib4ubvARB(PVERTEXATTRIB4UBVARB fnptr, GLuint  index, const GLubyte * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttrib4ubvNV(PVERTEXATTRIB4UBVNV fnptr, GLuint  index, const GLubyte * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttrib4uiv(PVERTEXATTRIB4UIV fnptr, GLuint  index, const GLuint * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttrib4uivARB(PVERTEXATTRIB4UIVARB fnptr, GLuint  index, const GLuint * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttrib4usv(PVERTEXATTRIB4USV fnptr, GLuint  index, const GLushort * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttrib4usvARB(PVERTEXATTRIB4USVARB fnptr, GLuint  index, const GLushort * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttribArrayObjectATI(PVERTEXATTRIBARRAYOBJECTATI fnptr, GLuint  index, GLint  size, GLenum  type, GLboolean  normalized, GLsizei  stride, GLuint  buffer, GLuint  offset) {
//   (*fnptr)(index, size, type, normalized, stride, buffer, offset);
// }
// void  glowVertexAttribBinding(PVERTEXATTRIBBINDING fnptr, GLuint  attribindex, GLuint  bindingindex) {
//   (*fnptr)(attribindex, bindingindex);
// }
// void  glowVertexAttribDivisor(PVERTEXATTRIBDIVISOR fnptr, GLuint  index, GLuint  divisor) {
//   (*fnptr)(index, divisor);
// }
// void  glowVertexAttribDivisorARB(PVERTEXATTRIBDIVISORARB fnptr, GLuint  index, GLuint  divisor) {
//   (*fnptr)(index, divisor);
// }
// void  glowVertexAttribFormat(PVERTEXATTRIBFORMAT fnptr, GLuint  attribindex, GLint  size, GLenum  type, GLboolean  normalized, GLuint  relativeoffset) {
//   (*fnptr)(attribindex, size, type, normalized, relativeoffset);
// }
// void  glowVertexAttribFormatNV(PVERTEXATTRIBFORMATNV fnptr, GLuint  index, GLint  size, GLenum  type, GLboolean  normalized, GLsizei  stride) {
//   (*fnptr)(index, size, type, normalized, stride);
// }
// void  glowVertexAttribI1i(PVERTEXATTRIBI1I fnptr, GLuint  index, GLint  x) {
//   (*fnptr)(index, x);
// }
// void  glowVertexAttribI1iEXT(PVERTEXATTRIBI1IEXT fnptr, GLuint  index, GLint  x) {
//   (*fnptr)(index, x);
// }
// void  glowVertexAttribI1iv(PVERTEXATTRIBI1IV fnptr, GLuint  index, const GLint * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttribI1ivEXT(PVERTEXATTRIBI1IVEXT fnptr, GLuint  index, const GLint * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttribI1ui(PVERTEXATTRIBI1UI fnptr, GLuint  index, GLuint  x) {
//   (*fnptr)(index, x);
// }
// void  glowVertexAttribI1uiEXT(PVERTEXATTRIBI1UIEXT fnptr, GLuint  index, GLuint  x) {
//   (*fnptr)(index, x);
// }
// void  glowVertexAttribI1uiv(PVERTEXATTRIBI1UIV fnptr, GLuint  index, const GLuint * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttribI1uivEXT(PVERTEXATTRIBI1UIVEXT fnptr, GLuint  index, const GLuint * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttribI2i(PVERTEXATTRIBI2I fnptr, GLuint  index, GLint  x, GLint  y) {
//   (*fnptr)(index, x, y);
// }
// void  glowVertexAttribI2iEXT(PVERTEXATTRIBI2IEXT fnptr, GLuint  index, GLint  x, GLint  y) {
//   (*fnptr)(index, x, y);
// }
// void  glowVertexAttribI2iv(PVERTEXATTRIBI2IV fnptr, GLuint  index, const GLint * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttribI2ivEXT(PVERTEXATTRIBI2IVEXT fnptr, GLuint  index, const GLint * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttribI2ui(PVERTEXATTRIBI2UI fnptr, GLuint  index, GLuint  x, GLuint  y) {
//   (*fnptr)(index, x, y);
// }
// void  glowVertexAttribI2uiEXT(PVERTEXATTRIBI2UIEXT fnptr, GLuint  index, GLuint  x, GLuint  y) {
//   (*fnptr)(index, x, y);
// }
// void  glowVertexAttribI2uiv(PVERTEXATTRIBI2UIV fnptr, GLuint  index, const GLuint * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttribI2uivEXT(PVERTEXATTRIBI2UIVEXT fnptr, GLuint  index, const GLuint * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttribI3i(PVERTEXATTRIBI3I fnptr, GLuint  index, GLint  x, GLint  y, GLint  z) {
//   (*fnptr)(index, x, y, z);
// }
// void  glowVertexAttribI3iEXT(PVERTEXATTRIBI3IEXT fnptr, GLuint  index, GLint  x, GLint  y, GLint  z) {
//   (*fnptr)(index, x, y, z);
// }
// void  glowVertexAttribI3iv(PVERTEXATTRIBI3IV fnptr, GLuint  index, const GLint * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttribI3ivEXT(PVERTEXATTRIBI3IVEXT fnptr, GLuint  index, const GLint * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttribI3ui(PVERTEXATTRIBI3UI fnptr, GLuint  index, GLuint  x, GLuint  y, GLuint  z) {
//   (*fnptr)(index, x, y, z);
// }
// void  glowVertexAttribI3uiEXT(PVERTEXATTRIBI3UIEXT fnptr, GLuint  index, GLuint  x, GLuint  y, GLuint  z) {
//   (*fnptr)(index, x, y, z);
// }
// void  glowVertexAttribI3uiv(PVERTEXATTRIBI3UIV fnptr, GLuint  index, const GLuint * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttribI3uivEXT(PVERTEXATTRIBI3UIVEXT fnptr, GLuint  index, const GLuint * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttribI4bv(PVERTEXATTRIBI4BV fnptr, GLuint  index, const GLbyte * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttribI4bvEXT(PVERTEXATTRIBI4BVEXT fnptr, GLuint  index, const GLbyte * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttribI4i(PVERTEXATTRIBI4I fnptr, GLuint  index, GLint  x, GLint  y, GLint  z, GLint  w) {
//   (*fnptr)(index, x, y, z, w);
// }
// void  glowVertexAttribI4iEXT(PVERTEXATTRIBI4IEXT fnptr, GLuint  index, GLint  x, GLint  y, GLint  z, GLint  w) {
//   (*fnptr)(index, x, y, z, w);
// }
// void  glowVertexAttribI4iv(PVERTEXATTRIBI4IV fnptr, GLuint  index, const GLint * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttribI4ivEXT(PVERTEXATTRIBI4IVEXT fnptr, GLuint  index, const GLint * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttribI4sv(PVERTEXATTRIBI4SV fnptr, GLuint  index, const GLshort * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttribI4svEXT(PVERTEXATTRIBI4SVEXT fnptr, GLuint  index, const GLshort * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttribI4ubv(PVERTEXATTRIBI4UBV fnptr, GLuint  index, const GLubyte * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttribI4ubvEXT(PVERTEXATTRIBI4UBVEXT fnptr, GLuint  index, const GLubyte * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttribI4ui(PVERTEXATTRIBI4UI fnptr, GLuint  index, GLuint  x, GLuint  y, GLuint  z, GLuint  w) {
//   (*fnptr)(index, x, y, z, w);
// }
// void  glowVertexAttribI4uiEXT(PVERTEXATTRIBI4UIEXT fnptr, GLuint  index, GLuint  x, GLuint  y, GLuint  z, GLuint  w) {
//   (*fnptr)(index, x, y, z, w);
// }
// void  glowVertexAttribI4uiv(PVERTEXATTRIBI4UIV fnptr, GLuint  index, const GLuint * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttribI4uivEXT(PVERTEXATTRIBI4UIVEXT fnptr, GLuint  index, const GLuint * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttribI4usv(PVERTEXATTRIBI4USV fnptr, GLuint  index, const GLushort * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttribI4usvEXT(PVERTEXATTRIBI4USVEXT fnptr, GLuint  index, const GLushort * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttribIFormat(PVERTEXATTRIBIFORMAT fnptr, GLuint  attribindex, GLint  size, GLenum  type, GLuint  relativeoffset) {
//   (*fnptr)(attribindex, size, type, relativeoffset);
// }
// void  glowVertexAttribIFormatNV(PVERTEXATTRIBIFORMATNV fnptr, GLuint  index, GLint  size, GLenum  type, GLsizei  stride) {
//   (*fnptr)(index, size, type, stride);
// }
// void  glowVertexAttribIPointer(PVERTEXATTRIBIPOINTER fnptr, GLuint  index, GLint  size, GLenum  type, GLsizei  stride, const void * pointer) {
//   (*fnptr)(index, size, type, stride, pointer);
// }
// void  glowVertexAttribIPointerEXT(PVERTEXATTRIBIPOINTEREXT fnptr, GLuint  index, GLint  size, GLenum  type, GLsizei  stride, const void * pointer) {
//   (*fnptr)(index, size, type, stride, pointer);
// }
// void  glowVertexAttribL1d(PVERTEXATTRIBL1D fnptr, GLuint  index, GLdouble  x) {
//   (*fnptr)(index, x);
// }
// void  glowVertexAttribL1dEXT(PVERTEXATTRIBL1DEXT fnptr, GLuint  index, GLdouble  x) {
//   (*fnptr)(index, x);
// }
// void  glowVertexAttribL1dv(PVERTEXATTRIBL1DV fnptr, GLuint  index, const GLdouble * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttribL1dvEXT(PVERTEXATTRIBL1DVEXT fnptr, GLuint  index, const GLdouble * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttribL1i64NV(PVERTEXATTRIBL1I64NV fnptr, GLuint  index, GLint64EXT  x) {
//   (*fnptr)(index, x);
// }
// void  glowVertexAttribL1i64vNV(PVERTEXATTRIBL1I64VNV fnptr, GLuint  index, const GLint64EXT * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttribL1ui64ARB(PVERTEXATTRIBL1UI64ARB fnptr, GLuint  index, GLuint64EXT  x) {
//   (*fnptr)(index, x);
// }
// void  glowVertexAttribL1ui64NV(PVERTEXATTRIBL1UI64NV fnptr, GLuint  index, GLuint64EXT  x) {
//   (*fnptr)(index, x);
// }
// void  glowVertexAttribL1ui64vARB(PVERTEXATTRIBL1UI64VARB fnptr, GLuint  index, const GLuint64EXT * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttribL1ui64vNV(PVERTEXATTRIBL1UI64VNV fnptr, GLuint  index, const GLuint64EXT * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttribL2d(PVERTEXATTRIBL2D fnptr, GLuint  index, GLdouble  x, GLdouble  y) {
//   (*fnptr)(index, x, y);
// }
// void  glowVertexAttribL2dEXT(PVERTEXATTRIBL2DEXT fnptr, GLuint  index, GLdouble  x, GLdouble  y) {
//   (*fnptr)(index, x, y);
// }
// void  glowVertexAttribL2dv(PVERTEXATTRIBL2DV fnptr, GLuint  index, const GLdouble * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttribL2dvEXT(PVERTEXATTRIBL2DVEXT fnptr, GLuint  index, const GLdouble * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttribL2i64NV(PVERTEXATTRIBL2I64NV fnptr, GLuint  index, GLint64EXT  x, GLint64EXT  y) {
//   (*fnptr)(index, x, y);
// }
// void  glowVertexAttribL2i64vNV(PVERTEXATTRIBL2I64VNV fnptr, GLuint  index, const GLint64EXT * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttribL2ui64NV(PVERTEXATTRIBL2UI64NV fnptr, GLuint  index, GLuint64EXT  x, GLuint64EXT  y) {
//   (*fnptr)(index, x, y);
// }
// void  glowVertexAttribL2ui64vNV(PVERTEXATTRIBL2UI64VNV fnptr, GLuint  index, const GLuint64EXT * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttribL3d(PVERTEXATTRIBL3D fnptr, GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z) {
//   (*fnptr)(index, x, y, z);
// }
// void  glowVertexAttribL3dEXT(PVERTEXATTRIBL3DEXT fnptr, GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z) {
//   (*fnptr)(index, x, y, z);
// }
// void  glowVertexAttribL3dv(PVERTEXATTRIBL3DV fnptr, GLuint  index, const GLdouble * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttribL3dvEXT(PVERTEXATTRIBL3DVEXT fnptr, GLuint  index, const GLdouble * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttribL3i64NV(PVERTEXATTRIBL3I64NV fnptr, GLuint  index, GLint64EXT  x, GLint64EXT  y, GLint64EXT  z) {
//   (*fnptr)(index, x, y, z);
// }
// void  glowVertexAttribL3i64vNV(PVERTEXATTRIBL3I64VNV fnptr, GLuint  index, const GLint64EXT * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttribL3ui64NV(PVERTEXATTRIBL3UI64NV fnptr, GLuint  index, GLuint64EXT  x, GLuint64EXT  y, GLuint64EXT  z) {
//   (*fnptr)(index, x, y, z);
// }
// void  glowVertexAttribL3ui64vNV(PVERTEXATTRIBL3UI64VNV fnptr, GLuint  index, const GLuint64EXT * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttribL4d(PVERTEXATTRIBL4D fnptr, GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w) {
//   (*fnptr)(index, x, y, z, w);
// }
// void  glowVertexAttribL4dEXT(PVERTEXATTRIBL4DEXT fnptr, GLuint  index, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w) {
//   (*fnptr)(index, x, y, z, w);
// }
// void  glowVertexAttribL4dv(PVERTEXATTRIBL4DV fnptr, GLuint  index, const GLdouble * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttribL4dvEXT(PVERTEXATTRIBL4DVEXT fnptr, GLuint  index, const GLdouble * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttribL4i64NV(PVERTEXATTRIBL4I64NV fnptr, GLuint  index, GLint64EXT  x, GLint64EXT  y, GLint64EXT  z, GLint64EXT  w) {
//   (*fnptr)(index, x, y, z, w);
// }
// void  glowVertexAttribL4i64vNV(PVERTEXATTRIBL4I64VNV fnptr, GLuint  index, const GLint64EXT * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttribL4ui64NV(PVERTEXATTRIBL4UI64NV fnptr, GLuint  index, GLuint64EXT  x, GLuint64EXT  y, GLuint64EXT  z, GLuint64EXT  w) {
//   (*fnptr)(index, x, y, z, w);
// }
// void  glowVertexAttribL4ui64vNV(PVERTEXATTRIBL4UI64VNV fnptr, GLuint  index, const GLuint64EXT * v) {
//   (*fnptr)(index, v);
// }
// void  glowVertexAttribLFormat(PVERTEXATTRIBLFORMAT fnptr, GLuint  attribindex, GLint  size, GLenum  type, GLuint  relativeoffset) {
//   (*fnptr)(attribindex, size, type, relativeoffset);
// }
// void  glowVertexAttribLFormatNV(PVERTEXATTRIBLFORMATNV fnptr, GLuint  index, GLint  size, GLenum  type, GLsizei  stride) {
//   (*fnptr)(index, size, type, stride);
// }
// void  glowVertexAttribLPointer(PVERTEXATTRIBLPOINTER fnptr, GLuint  index, GLint  size, GLenum  type, GLsizei  stride, const void * pointer) {
//   (*fnptr)(index, size, type, stride, pointer);
// }
// void  glowVertexAttribLPointerEXT(PVERTEXATTRIBLPOINTEREXT fnptr, GLuint  index, GLint  size, GLenum  type, GLsizei  stride, const void * pointer) {
//   (*fnptr)(index, size, type, stride, pointer);
// }
// void  glowVertexAttribP1ui(PVERTEXATTRIBP1UI fnptr, GLuint  index, GLenum  type, GLboolean  normalized, GLuint  value) {
//   (*fnptr)(index, type, normalized, value);
// }
// void  glowVertexAttribP1uiv(PVERTEXATTRIBP1UIV fnptr, GLuint  index, GLenum  type, GLboolean  normalized, const GLuint * value) {
//   (*fnptr)(index, type, normalized, value);
// }
// void  glowVertexAttribP2ui(PVERTEXATTRIBP2UI fnptr, GLuint  index, GLenum  type, GLboolean  normalized, GLuint  value) {
//   (*fnptr)(index, type, normalized, value);
// }
// void  glowVertexAttribP2uiv(PVERTEXATTRIBP2UIV fnptr, GLuint  index, GLenum  type, GLboolean  normalized, const GLuint * value) {
//   (*fnptr)(index, type, normalized, value);
// }
// void  glowVertexAttribP3ui(PVERTEXATTRIBP3UI fnptr, GLuint  index, GLenum  type, GLboolean  normalized, GLuint  value) {
//   (*fnptr)(index, type, normalized, value);
// }
// void  glowVertexAttribP3uiv(PVERTEXATTRIBP3UIV fnptr, GLuint  index, GLenum  type, GLboolean  normalized, const GLuint * value) {
//   (*fnptr)(index, type, normalized, value);
// }
// void  glowVertexAttribP4ui(PVERTEXATTRIBP4UI fnptr, GLuint  index, GLenum  type, GLboolean  normalized, GLuint  value) {
//   (*fnptr)(index, type, normalized, value);
// }
// void  glowVertexAttribP4uiv(PVERTEXATTRIBP4UIV fnptr, GLuint  index, GLenum  type, GLboolean  normalized, const GLuint * value) {
//   (*fnptr)(index, type, normalized, value);
// }
// void  glowVertexAttribParameteriAMD(PVERTEXATTRIBPARAMETERIAMD fnptr, GLuint  index, GLenum  pname, GLint  param) {
//   (*fnptr)(index, pname, param);
// }
// void  glowVertexAttribPointer(PVERTEXATTRIBPOINTER fnptr, GLuint  index, GLint  size, GLenum  type, GLboolean  normalized, GLsizei  stride, const void * pointer) {
//   (*fnptr)(index, size, type, normalized, stride, pointer);
// }
// void  glowVertexAttribPointerARB(PVERTEXATTRIBPOINTERARB fnptr, GLuint  index, GLint  size, GLenum  type, GLboolean  normalized, GLsizei  stride, const void * pointer) {
//   (*fnptr)(index, size, type, normalized, stride, pointer);
// }
// void  glowVertexAttribPointerNV(PVERTEXATTRIBPOINTERNV fnptr, GLuint  index, GLint  fsize, GLenum  type, GLsizei  stride, const void * pointer) {
//   (*fnptr)(index, fsize, type, stride, pointer);
// }
// void  glowVertexAttribs1dvNV(PVERTEXATTRIBS1DVNV fnptr, GLuint  index, GLsizei  count, const GLdouble * v) {
//   (*fnptr)(index, count, v);
// }
// void  glowVertexAttribs1fvNV(PVERTEXATTRIBS1FVNV fnptr, GLuint  index, GLsizei  count, const GLfloat * v) {
//   (*fnptr)(index, count, v);
// }
// void  glowVertexAttribs1hvNV(PVERTEXATTRIBS1HVNV fnptr, GLuint  index, GLsizei  n, const GLhalfNV * v) {
//   (*fnptr)(index, n, v);
// }
// void  glowVertexAttribs1svNV(PVERTEXATTRIBS1SVNV fnptr, GLuint  index, GLsizei  count, const GLshort * v) {
//   (*fnptr)(index, count, v);
// }
// void  glowVertexAttribs2dvNV(PVERTEXATTRIBS2DVNV fnptr, GLuint  index, GLsizei  count, const GLdouble * v) {
//   (*fnptr)(index, count, v);
// }
// void  glowVertexAttribs2fvNV(PVERTEXATTRIBS2FVNV fnptr, GLuint  index, GLsizei  count, const GLfloat * v) {
//   (*fnptr)(index, count, v);
// }
// void  glowVertexAttribs2hvNV(PVERTEXATTRIBS2HVNV fnptr, GLuint  index, GLsizei  n, const GLhalfNV * v) {
//   (*fnptr)(index, n, v);
// }
// void  glowVertexAttribs2svNV(PVERTEXATTRIBS2SVNV fnptr, GLuint  index, GLsizei  count, const GLshort * v) {
//   (*fnptr)(index, count, v);
// }
// void  glowVertexAttribs3dvNV(PVERTEXATTRIBS3DVNV fnptr, GLuint  index, GLsizei  count, const GLdouble * v) {
//   (*fnptr)(index, count, v);
// }
// void  glowVertexAttribs3fvNV(PVERTEXATTRIBS3FVNV fnptr, GLuint  index, GLsizei  count, const GLfloat * v) {
//   (*fnptr)(index, count, v);
// }
// void  glowVertexAttribs3hvNV(PVERTEXATTRIBS3HVNV fnptr, GLuint  index, GLsizei  n, const GLhalfNV * v) {
//   (*fnptr)(index, n, v);
// }
// void  glowVertexAttribs3svNV(PVERTEXATTRIBS3SVNV fnptr, GLuint  index, GLsizei  count, const GLshort * v) {
//   (*fnptr)(index, count, v);
// }
// void  glowVertexAttribs4dvNV(PVERTEXATTRIBS4DVNV fnptr, GLuint  index, GLsizei  count, const GLdouble * v) {
//   (*fnptr)(index, count, v);
// }
// void  glowVertexAttribs4fvNV(PVERTEXATTRIBS4FVNV fnptr, GLuint  index, GLsizei  count, const GLfloat * v) {
//   (*fnptr)(index, count, v);
// }
// void  glowVertexAttribs4hvNV(PVERTEXATTRIBS4HVNV fnptr, GLuint  index, GLsizei  n, const GLhalfNV * v) {
//   (*fnptr)(index, n, v);
// }
// void  glowVertexAttribs4svNV(PVERTEXATTRIBS4SVNV fnptr, GLuint  index, GLsizei  count, const GLshort * v) {
//   (*fnptr)(index, count, v);
// }
// void  glowVertexAttribs4ubvNV(PVERTEXATTRIBS4UBVNV fnptr, GLuint  index, GLsizei  count, const GLubyte * v) {
//   (*fnptr)(index, count, v);
// }
// void  glowVertexBindingDivisor(PVERTEXBINDINGDIVISOR fnptr, GLuint  bindingindex, GLuint  divisor) {
//   (*fnptr)(bindingindex, divisor);
// }
// void  glowVertexBlendARB(PVERTEXBLENDARB fnptr, GLint  count) {
//   (*fnptr)(count);
// }
// void  glowVertexBlendEnvfATI(PVERTEXBLENDENVFATI fnptr, GLenum  pname, GLfloat  param) {
//   (*fnptr)(pname, param);
// }
// void  glowVertexBlendEnviATI(PVERTEXBLENDENVIATI fnptr, GLenum  pname, GLint  param) {
//   (*fnptr)(pname, param);
// }
// void  glowVertexFormatNV(PVERTEXFORMATNV fnptr, GLint  size, GLenum  type, GLsizei  stride) {
//   (*fnptr)(size, type, stride);
// }
// void  glowVertexPointerEXT(PVERTEXPOINTEREXT fnptr, GLint  size, GLenum  type, GLsizei  stride, GLsizei  count, const void * pointer) {
//   (*fnptr)(size, type, stride, count, pointer);
// }
// void  glowVertexPointerListIBM(PVERTEXPOINTERLISTIBM fnptr, GLint  size, GLenum  type, GLint  stride, const void ** pointer, GLint  ptrstride) {
//   (*fnptr)(size, type, stride, pointer, ptrstride);
// }
// void  glowVertexPointervINTEL(PVERTEXPOINTERVINTEL fnptr, GLint  size, GLenum  type, const void ** pointer) {
//   (*fnptr)(size, type, pointer);
// }
// void  glowVertexStream1dATI(PVERTEXSTREAM1DATI fnptr, GLenum  stream, GLdouble  x) {
//   (*fnptr)(stream, x);
// }
// void  glowVertexStream1dvATI(PVERTEXSTREAM1DVATI fnptr, GLenum  stream, const GLdouble * coords) {
//   (*fnptr)(stream, coords);
// }
// void  glowVertexStream1fATI(PVERTEXSTREAM1FATI fnptr, GLenum  stream, GLfloat  x) {
//   (*fnptr)(stream, x);
// }
// void  glowVertexStream1fvATI(PVERTEXSTREAM1FVATI fnptr, GLenum  stream, const GLfloat * coords) {
//   (*fnptr)(stream, coords);
// }
// void  glowVertexStream1iATI(PVERTEXSTREAM1IATI fnptr, GLenum  stream, GLint  x) {
//   (*fnptr)(stream, x);
// }
// void  glowVertexStream1ivATI(PVERTEXSTREAM1IVATI fnptr, GLenum  stream, const GLint * coords) {
//   (*fnptr)(stream, coords);
// }
// void  glowVertexStream1sATI(PVERTEXSTREAM1SATI fnptr, GLenum  stream, GLshort  x) {
//   (*fnptr)(stream, x);
// }
// void  glowVertexStream1svATI(PVERTEXSTREAM1SVATI fnptr, GLenum  stream, const GLshort * coords) {
//   (*fnptr)(stream, coords);
// }
// void  glowVertexStream2dATI(PVERTEXSTREAM2DATI fnptr, GLenum  stream, GLdouble  x, GLdouble  y) {
//   (*fnptr)(stream, x, y);
// }
// void  glowVertexStream2dvATI(PVERTEXSTREAM2DVATI fnptr, GLenum  stream, const GLdouble * coords) {
//   (*fnptr)(stream, coords);
// }
// void  glowVertexStream2fATI(PVERTEXSTREAM2FATI fnptr, GLenum  stream, GLfloat  x, GLfloat  y) {
//   (*fnptr)(stream, x, y);
// }
// void  glowVertexStream2fvATI(PVERTEXSTREAM2FVATI fnptr, GLenum  stream, const GLfloat * coords) {
//   (*fnptr)(stream, coords);
// }
// void  glowVertexStream2iATI(PVERTEXSTREAM2IATI fnptr, GLenum  stream, GLint  x, GLint  y) {
//   (*fnptr)(stream, x, y);
// }
// void  glowVertexStream2ivATI(PVERTEXSTREAM2IVATI fnptr, GLenum  stream, const GLint * coords) {
//   (*fnptr)(stream, coords);
// }
// void  glowVertexStream2sATI(PVERTEXSTREAM2SATI fnptr, GLenum  stream, GLshort  x, GLshort  y) {
//   (*fnptr)(stream, x, y);
// }
// void  glowVertexStream2svATI(PVERTEXSTREAM2SVATI fnptr, GLenum  stream, const GLshort * coords) {
//   (*fnptr)(stream, coords);
// }
// void  glowVertexStream3dATI(PVERTEXSTREAM3DATI fnptr, GLenum  stream, GLdouble  x, GLdouble  y, GLdouble  z) {
//   (*fnptr)(stream, x, y, z);
// }
// void  glowVertexStream3dvATI(PVERTEXSTREAM3DVATI fnptr, GLenum  stream, const GLdouble * coords) {
//   (*fnptr)(stream, coords);
// }
// void  glowVertexStream3fATI(PVERTEXSTREAM3FATI fnptr, GLenum  stream, GLfloat  x, GLfloat  y, GLfloat  z) {
//   (*fnptr)(stream, x, y, z);
// }
// void  glowVertexStream3fvATI(PVERTEXSTREAM3FVATI fnptr, GLenum  stream, const GLfloat * coords) {
//   (*fnptr)(stream, coords);
// }
// void  glowVertexStream3iATI(PVERTEXSTREAM3IATI fnptr, GLenum  stream, GLint  x, GLint  y, GLint  z) {
//   (*fnptr)(stream, x, y, z);
// }
// void  glowVertexStream3ivATI(PVERTEXSTREAM3IVATI fnptr, GLenum  stream, const GLint * coords) {
//   (*fnptr)(stream, coords);
// }
// void  glowVertexStream3sATI(PVERTEXSTREAM3SATI fnptr, GLenum  stream, GLshort  x, GLshort  y, GLshort  z) {
//   (*fnptr)(stream, x, y, z);
// }
// void  glowVertexStream3svATI(PVERTEXSTREAM3SVATI fnptr, GLenum  stream, const GLshort * coords) {
//   (*fnptr)(stream, coords);
// }
// void  glowVertexStream4dATI(PVERTEXSTREAM4DATI fnptr, GLenum  stream, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w) {
//   (*fnptr)(stream, x, y, z, w);
// }
// void  glowVertexStream4dvATI(PVERTEXSTREAM4DVATI fnptr, GLenum  stream, const GLdouble * coords) {
//   (*fnptr)(stream, coords);
// }
// void  glowVertexStream4fATI(PVERTEXSTREAM4FATI fnptr, GLenum  stream, GLfloat  x, GLfloat  y, GLfloat  z, GLfloat  w) {
//   (*fnptr)(stream, x, y, z, w);
// }
// void  glowVertexStream4fvATI(PVERTEXSTREAM4FVATI fnptr, GLenum  stream, const GLfloat * coords) {
//   (*fnptr)(stream, coords);
// }
// void  glowVertexStream4iATI(PVERTEXSTREAM4IATI fnptr, GLenum  stream, GLint  x, GLint  y, GLint  z, GLint  w) {
//   (*fnptr)(stream, x, y, z, w);
// }
// void  glowVertexStream4ivATI(PVERTEXSTREAM4IVATI fnptr, GLenum  stream, const GLint * coords) {
//   (*fnptr)(stream, coords);
// }
// void  glowVertexStream4sATI(PVERTEXSTREAM4SATI fnptr, GLenum  stream, GLshort  x, GLshort  y, GLshort  z, GLshort  w) {
//   (*fnptr)(stream, x, y, z, w);
// }
// void  glowVertexStream4svATI(PVERTEXSTREAM4SVATI fnptr, GLenum  stream, const GLshort * coords) {
//   (*fnptr)(stream, coords);
// }
// void  glowVertexWeightPointerEXT(PVERTEXWEIGHTPOINTEREXT fnptr, GLint  size, GLenum  type, GLsizei  stride, const void * pointer) {
//   (*fnptr)(size, type, stride, pointer);
// }
// void  glowVertexWeightfEXT(PVERTEXWEIGHTFEXT fnptr, GLfloat  weight) {
//   (*fnptr)(weight);
// }
// void  glowVertexWeightfvEXT(PVERTEXWEIGHTFVEXT fnptr, const GLfloat * weight) {
//   (*fnptr)(weight);
// }
// void  glowVertexWeighthNV(PVERTEXWEIGHTHNV fnptr, GLhalfNV  weight) {
//   (*fnptr)(weight);
// }
// void  glowVertexWeighthvNV(PVERTEXWEIGHTHVNV fnptr, const GLhalfNV * weight) {
//   (*fnptr)(weight);
// }
// GLenum  glowVideoCaptureNV(PVIDEOCAPTURENV fnptr, GLuint  video_capture_slot, GLuint * sequence_num, GLuint64EXT * capture_time) {
//   return (*fnptr)(video_capture_slot, sequence_num, capture_time);
// }
// void  glowVideoCaptureStreamParameterdvNV(PVIDEOCAPTURESTREAMPARAMETERDVNV fnptr, GLuint  video_capture_slot, GLuint  stream, GLenum  pname, const GLdouble * params) {
//   (*fnptr)(video_capture_slot, stream, pname, params);
// }
// void  glowVideoCaptureStreamParameterfvNV(PVIDEOCAPTURESTREAMPARAMETERFVNV fnptr, GLuint  video_capture_slot, GLuint  stream, GLenum  pname, const GLfloat * params) {
//   (*fnptr)(video_capture_slot, stream, pname, params);
// }
// void  glowVideoCaptureStreamParameterivNV(PVIDEOCAPTURESTREAMPARAMETERIVNV fnptr, GLuint  video_capture_slot, GLuint  stream, GLenum  pname, const GLint * params) {
//   (*fnptr)(video_capture_slot, stream, pname, params);
// }
// void  glowViewport(PVIEWPORT fnptr, GLint  x, GLint  y, GLsizei  width, GLsizei  height) {
//   (*fnptr)(x, y, width, height);
// }
// void  glowViewportArrayv(PVIEWPORTARRAYV fnptr, GLuint  first, GLsizei  count, const GLfloat * v) {
//   (*fnptr)(first, count, v);
// }
// void  glowViewportIndexedf(PVIEWPORTINDEXEDF fnptr, GLuint  index, GLfloat  x, GLfloat  y, GLfloat  w, GLfloat  h) {
//   (*fnptr)(index, x, y, w, h);
// }
// void  glowViewportIndexedfv(PVIEWPORTINDEXEDFV fnptr, GLuint  index, const GLfloat * v) {
//   (*fnptr)(index, v);
// }
// void  glowWaitSync(PWAITSYNC fnptr, GLsync  sync, GLbitfield  flags, GLuint64  timeout) {
//   (*fnptr)(sync, flags, timeout);
// }
// void  glowWeightPathsNV(PWEIGHTPATHSNV fnptr, GLuint  resultPath, GLsizei  numPaths, const GLuint * paths, const GLfloat * weights) {
//   (*fnptr)(resultPath, numPaths, paths, weights);
// }
// void  glowWeightPointerARB(PWEIGHTPOINTERARB fnptr, GLint  size, GLenum  type, GLsizei  stride, const void * pointer) {
//   (*fnptr)(size, type, stride, pointer);
// }
// void  glowWeightbvARB(PWEIGHTBVARB fnptr, GLint  size, const GLbyte * weights) {
//   (*fnptr)(size, weights);
// }
// void  glowWeightdvARB(PWEIGHTDVARB fnptr, GLint  size, const GLdouble * weights) {
//   (*fnptr)(size, weights);
// }
// void  glowWeightfvARB(PWEIGHTFVARB fnptr, GLint  size, const GLfloat * weights) {
//   (*fnptr)(size, weights);
// }
// void  glowWeightivARB(PWEIGHTIVARB fnptr, GLint  size, const GLint * weights) {
//   (*fnptr)(size, weights);
// }
// void  glowWeightsvARB(PWEIGHTSVARB fnptr, GLint  size, const GLshort * weights) {
//   (*fnptr)(size, weights);
// }
// void  glowWeightubvARB(PWEIGHTUBVARB fnptr, GLint  size, const GLubyte * weights) {
//   (*fnptr)(size, weights);
// }
// void  glowWeightuivARB(PWEIGHTUIVARB fnptr, GLint  size, const GLuint * weights) {
//   (*fnptr)(size, weights);
// }
// void  glowWeightusvARB(PWEIGHTUSVARB fnptr, GLint  size, const GLushort * weights) {
//   (*fnptr)(size, weights);
// }
// void  glowWindowPos2dARB(PWINDOWPOS2DARB fnptr, GLdouble  x, GLdouble  y) {
//   (*fnptr)(x, y);
// }
// void  glowWindowPos2dMESA(PWINDOWPOS2DMESA fnptr, GLdouble  x, GLdouble  y) {
//   (*fnptr)(x, y);
// }
// void  glowWindowPos2dvARB(PWINDOWPOS2DVARB fnptr, const GLdouble * v) {
//   (*fnptr)(v);
// }
// void  glowWindowPos2dvMESA(PWINDOWPOS2DVMESA fnptr, const GLdouble * v) {
//   (*fnptr)(v);
// }
// void  glowWindowPos2fARB(PWINDOWPOS2FARB fnptr, GLfloat  x, GLfloat  y) {
//   (*fnptr)(x, y);
// }
// void  glowWindowPos2fMESA(PWINDOWPOS2FMESA fnptr, GLfloat  x, GLfloat  y) {
//   (*fnptr)(x, y);
// }
// void  glowWindowPos2fvARB(PWINDOWPOS2FVARB fnptr, const GLfloat * v) {
//   (*fnptr)(v);
// }
// void  glowWindowPos2fvMESA(PWINDOWPOS2FVMESA fnptr, const GLfloat * v) {
//   (*fnptr)(v);
// }
// void  glowWindowPos2iARB(PWINDOWPOS2IARB fnptr, GLint  x, GLint  y) {
//   (*fnptr)(x, y);
// }
// void  glowWindowPos2iMESA(PWINDOWPOS2IMESA fnptr, GLint  x, GLint  y) {
//   (*fnptr)(x, y);
// }
// void  glowWindowPos2ivARB(PWINDOWPOS2IVARB fnptr, const GLint * v) {
//   (*fnptr)(v);
// }
// void  glowWindowPos2ivMESA(PWINDOWPOS2IVMESA fnptr, const GLint * v) {
//   (*fnptr)(v);
// }
// void  glowWindowPos2sARB(PWINDOWPOS2SARB fnptr, GLshort  x, GLshort  y) {
//   (*fnptr)(x, y);
// }
// void  glowWindowPos2sMESA(PWINDOWPOS2SMESA fnptr, GLshort  x, GLshort  y) {
//   (*fnptr)(x, y);
// }
// void  glowWindowPos2svARB(PWINDOWPOS2SVARB fnptr, const GLshort * v) {
//   (*fnptr)(v);
// }
// void  glowWindowPos2svMESA(PWINDOWPOS2SVMESA fnptr, const GLshort * v) {
//   (*fnptr)(v);
// }
// void  glowWindowPos3dARB(PWINDOWPOS3DARB fnptr, GLdouble  x, GLdouble  y, GLdouble  z) {
//   (*fnptr)(x, y, z);
// }
// void  glowWindowPos3dMESA(PWINDOWPOS3DMESA fnptr, GLdouble  x, GLdouble  y, GLdouble  z) {
//   (*fnptr)(x, y, z);
// }
// void  glowWindowPos3dvARB(PWINDOWPOS3DVARB fnptr, const GLdouble * v) {
//   (*fnptr)(v);
// }
// void  glowWindowPos3dvMESA(PWINDOWPOS3DVMESA fnptr, const GLdouble * v) {
//   (*fnptr)(v);
// }
// void  glowWindowPos3fARB(PWINDOWPOS3FARB fnptr, GLfloat  x, GLfloat  y, GLfloat  z) {
//   (*fnptr)(x, y, z);
// }
// void  glowWindowPos3fMESA(PWINDOWPOS3FMESA fnptr, GLfloat  x, GLfloat  y, GLfloat  z) {
//   (*fnptr)(x, y, z);
// }
// void  glowWindowPos3fvARB(PWINDOWPOS3FVARB fnptr, const GLfloat * v) {
//   (*fnptr)(v);
// }
// void  glowWindowPos3fvMESA(PWINDOWPOS3FVMESA fnptr, const GLfloat * v) {
//   (*fnptr)(v);
// }
// void  glowWindowPos3iARB(PWINDOWPOS3IARB fnptr, GLint  x, GLint  y, GLint  z) {
//   (*fnptr)(x, y, z);
// }
// void  glowWindowPos3iMESA(PWINDOWPOS3IMESA fnptr, GLint  x, GLint  y, GLint  z) {
//   (*fnptr)(x, y, z);
// }
// void  glowWindowPos3ivARB(PWINDOWPOS3IVARB fnptr, const GLint * v) {
//   (*fnptr)(v);
// }
// void  glowWindowPos3ivMESA(PWINDOWPOS3IVMESA fnptr, const GLint * v) {
//   (*fnptr)(v);
// }
// void  glowWindowPos3sARB(PWINDOWPOS3SARB fnptr, GLshort  x, GLshort  y, GLshort  z) {
//   (*fnptr)(x, y, z);
// }
// void  glowWindowPos3sMESA(PWINDOWPOS3SMESA fnptr, GLshort  x, GLshort  y, GLshort  z) {
//   (*fnptr)(x, y, z);
// }
// void  glowWindowPos3svARB(PWINDOWPOS3SVARB fnptr, const GLshort * v) {
//   (*fnptr)(v);
// }
// void  glowWindowPos3svMESA(PWINDOWPOS3SVMESA fnptr, const GLshort * v) {
//   (*fnptr)(v);
// }
// void  glowWindowPos4dMESA(PWINDOWPOS4DMESA fnptr, GLdouble  x, GLdouble  y, GLdouble  z, GLdouble  w) {
//   (*fnptr)(x, y, z, w);
// }
// void  glowWindowPos4dvMESA(PWINDOWPOS4DVMESA fnptr, const GLdouble * v) {
//   (*fnptr)(v);
// }
// void  glowWindowPos4fMESA(PWINDOWPOS4FMESA fnptr, GLfloat  x, GLfloat  y, GLfloat  z, GLfloat  w) {
//   (*fnptr)(x, y, z, w);
// }
// void  glowWindowPos4fvMESA(PWINDOWPOS4FVMESA fnptr, const GLfloat * v) {
//   (*fnptr)(v);
// }
// void  glowWindowPos4iMESA(PWINDOWPOS4IMESA fnptr, GLint  x, GLint  y, GLint  z, GLint  w) {
//   (*fnptr)(x, y, z, w);
// }
// void  glowWindowPos4ivMESA(PWINDOWPOS4IVMESA fnptr, const GLint * v) {
//   (*fnptr)(v);
// }
// void  glowWindowPos4sMESA(PWINDOWPOS4SMESA fnptr, GLshort  x, GLshort  y, GLshort  z, GLshort  w) {
//   (*fnptr)(x, y, z, w);
// }
// void  glowWindowPos4svMESA(PWINDOWPOS4SVMESA fnptr, const GLshort * v) {
//   (*fnptr)(v);
// }
// void  glowWriteMaskEXT(PWRITEMASKEXT fnptr, GLuint  res, GLuint  in, GLenum  outX, GLenum  outY, GLenum  outZ, GLenum  outW) {
//   (*fnptr)(res, in, outX, outY, outZ, outW);
// }
import "C"
import (
  "errors"
  "github.com/errcw/glow/procaddr"
  "github.com/errcw/glow/procaddr/auto"
  "unsafe"
)
const (
  GL_1PASS_EXT = 0x80A1
  GL_1PASS_SGIS = 0x80A1
  GL_2PASS_0_EXT = 0x80A2
  GL_2PASS_0_SGIS = 0x80A2
  GL_2PASS_1_EXT = 0x80A3
  GL_2PASS_1_SGIS = 0x80A3
  GL_2X_BIT_ATI = 0x00000001
  GL_422_AVERAGE_EXT = 0x80CE
  GL_422_EXT = 0x80CC
  GL_422_REV_AVERAGE_EXT = 0x80CF
  GL_422_REV_EXT = 0x80CD
  GL_4PASS_0_EXT = 0x80A4
  GL_4PASS_0_SGIS = 0x80A4
  GL_4PASS_1_EXT = 0x80A5
  GL_4PASS_1_SGIS = 0x80A5
  GL_4PASS_2_EXT = 0x80A6
  GL_4PASS_2_SGIS = 0x80A6
  GL_4PASS_3_EXT = 0x80A7
  GL_4PASS_3_SGIS = 0x80A7
  GL_4X_BIT_ATI = 0x00000002
  GL_8X_BIT_ATI = 0x00000004
  ABGR_EXT = 0x8000
  ACCUM_ADJACENT_PAIRS_NV = 0x90AD
  ACTIVE_ATOMIC_COUNTER_BUFFERS = 0x92D9
  ACTIVE_ATTRIBUTES = 0x8B89
  ACTIVE_ATTRIBUTE_MAX_LENGTH = 0x8B8A
  ACTIVE_PROGRAM = 0x8259
  ACTIVE_PROGRAM_EXT = 0x8B8D
  ACTIVE_RESOURCES = 0x92F5
  ACTIVE_STENCIL_FACE_EXT = 0x8911
  ACTIVE_SUBROUTINES = 0x8DE5
  ACTIVE_SUBROUTINE_MAX_LENGTH = 0x8E48
  ACTIVE_SUBROUTINE_UNIFORMS = 0x8DE6
  ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS = 0x8E47
  ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH = 0x8E49
  ACTIVE_TEXTURE = 0x84E0
  ACTIVE_TEXTURE_ARB = 0x84E0
  ACTIVE_UNIFORMS = 0x8B86
  ACTIVE_UNIFORM_BLOCKS = 0x8A36
  ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 0x8A35
  ACTIVE_UNIFORM_MAX_LENGTH = 0x8B87
  ACTIVE_VARIABLES = 0x9305
  ACTIVE_VARYINGS_NV = 0x8C81
  ACTIVE_VARYING_MAX_LENGTH_NV = 0x8C82
  ACTIVE_VERTEX_UNITS_ARB = 0x86A5
  ADD_ATI = 0x8963
  ADD_SIGNED_ARB = 0x8574
  ADD_SIGNED_EXT = 0x8574
  ADJACENT_PAIRS_NV = 0x90AE
  AFFINE_2D_NV = 0x9092
  AFFINE_3D_NV = 0x9094
  ALIASED_LINE_WIDTH_RANGE = 0x846E
  ALLOW_DRAW_FRG_HINT_PGI = 0x1A210
  ALLOW_DRAW_MEM_HINT_PGI = 0x1A211
  ALLOW_DRAW_OBJ_HINT_PGI = 0x1A20E
  ALLOW_DRAW_WIN_HINT_PGI = 0x1A20F
  ALL_BARRIER_BITS = 0xFFFFFFFF
  ALL_BARRIER_BITS_EXT = 0xFFFFFFFF
  ALL_COMPLETED_NV = 0x84F2
  ALL_SHADER_BITS = 0xFFFFFFFF
  ALL_SHADER_BITS_EXT = 0xFFFFFFFF
  ALL_STATIC_DATA_IBM = 103060
  ALPHA = 0x1906
  ALPHA12_EXT = 0x803D
  ALPHA16F_ARB = 0x881C
  ALPHA16I_EXT = 0x8D8A
  ALPHA16UI_EXT = 0x8D78
  ALPHA16_EXT = 0x803E
  ALPHA16_SNORM = 0x9018
  ALPHA32F_ARB = 0x8816
  ALPHA32I_EXT = 0x8D84
  ALPHA32UI_EXT = 0x8D72
  ALPHA4_EXT = 0x803B
  ALPHA8I_EXT = 0x8D90
  ALPHA8UI_EXT = 0x8D7E
  ALPHA8_EXT = 0x803C
  ALPHA8_SNORM = 0x9014
  ALPHA_FLOAT16_APPLE = 0x881C
  ALPHA_FLOAT16_ATI = 0x881C
  ALPHA_FLOAT32_APPLE = 0x8816
  ALPHA_FLOAT32_ATI = 0x8816
  ALPHA_INTEGER_EXT = 0x8D97
  ALPHA_MAX_CLAMP_INGR = 0x8567
  ALPHA_MAX_SGIX = 0x8321
  ALPHA_MIN_CLAMP_INGR = 0x8563
  ALPHA_MIN_SGIX = 0x8320
  ALPHA_SNORM = 0x9010
  ALREADY_SIGNALED = 0x911A
  ALWAYS = 0x0207
  ALWAYS_FAST_HINT_PGI = 0x1A20C
  ALWAYS_SOFT_HINT_PGI = 0x1A20D
  AND = 0x1501
  AND_INVERTED = 0x1504
  AND_REVERSE = 0x1502
  ANY_SAMPLES_PASSED = 0x8C2F
  ANY_SAMPLES_PASSED_CONSERVATIVE = 0x8D6A
  ARC_TO_NV = 0xFE
  ARRAY_BUFFER = 0x8892
  ARRAY_BUFFER_ARB = 0x8892
  ARRAY_BUFFER_BINDING = 0x8894
  ARRAY_BUFFER_BINDING_ARB = 0x8894
  ARRAY_ELEMENT_LOCK_COUNT_EXT = 0x81A9
  ARRAY_ELEMENT_LOCK_FIRST_EXT = 0x81A8
  ARRAY_OBJECT_BUFFER_ATI = 0x8766
  ARRAY_OBJECT_OFFSET_ATI = 0x8767
  ARRAY_SIZE = 0x92FB
  ARRAY_STRIDE = 0x92FE
  ASYNC_DRAW_PIXELS_SGIX = 0x835D
  ASYNC_HISTOGRAM_SGIX = 0x832C
  ASYNC_MARKER_SGIX = 0x8329
  ASYNC_READ_PIXELS_SGIX = 0x835E
  ASYNC_TEX_IMAGE_SGIX = 0x835C
  ATOMIC_COUNTER_BARRIER_BIT = 0x00001000
  ATOMIC_COUNTER_BARRIER_BIT_EXT = 0x00001000
  ATOMIC_COUNTER_BUFFER = 0x92C0
  ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS = 0x92C5
  ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES = 0x92C6
  ATOMIC_COUNTER_BUFFER_BINDING = 0x92C1
  ATOMIC_COUNTER_BUFFER_DATA_SIZE = 0x92C4
  ATOMIC_COUNTER_BUFFER_INDEX = 0x9301
  ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER = 0x90ED
  ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER = 0x92CB
  ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER = 0x92CA
  ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER = 0x92C8
  ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x92C9
  ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER = 0x92C7
  ATOMIC_COUNTER_BUFFER_SIZE = 0x92C3
  ATOMIC_COUNTER_BUFFER_START = 0x92C2
  ATTACHED_SHADERS = 0x8B85
  ATTENUATION_EXT = 0x834D
  ATTRIB_ARRAY_POINTER_NV = 0x8645
  ATTRIB_ARRAY_SIZE_NV = 0x8623
  ATTRIB_ARRAY_STRIDE_NV = 0x8624
  ATTRIB_ARRAY_TYPE_NV = 0x8625
  AUTO_GENERATE_MIPMAP = 0x8295
  AUX_DEPTH_STENCIL_APPLE = 0x8A14
  AVERAGE_EXT = 0x8335
  AVERAGE_HP = 0x8160
  BACK = 0x0405
  BACK_LEFT = 0x0402
  BACK_NORMALS_HINT_PGI = 0x1A223
  BACK_PRIMARY_COLOR_NV = 0x8C77
  BACK_RIGHT = 0x0403
  BACK_SECONDARY_COLOR_NV = 0x8C78
  BEVEL_NV = 0x90A6
  BGR = 0x80E0
  BGRA = 0x80E1
  BGRA_EXT = 0x80E1
  BGRA_INTEGER = 0x8D9B
  BGRA_INTEGER_EXT = 0x8D9B
  BGR_EXT = 0x80E0
  BGR_INTEGER = 0x8D9A
  BGR_INTEGER_EXT = 0x8D9A
  BIAS_BIT_ATI = 0x00000008
  BIAS_BY_NEGATIVE_ONE_HALF_NV = 0x8541
  BINORMAL_ARRAY_EXT = 0x843A
  BINORMAL_ARRAY_POINTER_EXT = 0x8443
  BINORMAL_ARRAY_STRIDE_EXT = 0x8441
  BINORMAL_ARRAY_TYPE_EXT = 0x8440
  BLEND = 0x0BE2
  BLEND_ADVANCED_COHERENT_NV = 0x9285
  BLEND_COLOR = 0x8005
  BLEND_COLOR_EXT = 0x8005
  BLEND_DST = 0x0BE0
  BLEND_DST_ALPHA = 0x80CA
  BLEND_DST_ALPHA_EXT = 0x80CA
  BLEND_DST_RGB = 0x80C8
  BLEND_DST_RGB_EXT = 0x80C8
  BLEND_EQUATION = 0x8009
  BLEND_EQUATION_ALPHA = 0x883D
  BLEND_EQUATION_ALPHA_EXT = 0x883D
  BLEND_EQUATION_EXT = 0x8009
  BLEND_EQUATION_RGB = 0x8009
  BLEND_EQUATION_RGB_EXT = 0x8009
  BLEND_OVERLAP_NV = 0x9281
  BLEND_PREMULTIPLIED_SRC_NV = 0x9280
  BLEND_SRC = 0x0BE1
  BLEND_SRC_ALPHA = 0x80CB
  BLEND_SRC_ALPHA_EXT = 0x80CB
  BLEND_SRC_RGB = 0x80C9
  BLEND_SRC_RGB_EXT = 0x80C9
  BLOCK_INDEX = 0x92FD
  BLUE = 0x1905
  BLUE_BIT_ATI = 0x00000004
  BLUE_INTEGER = 0x8D96
  BLUE_INTEGER_EXT = 0x8D96
  BLUE_MAX_CLAMP_INGR = 0x8566
  BLUE_MIN_CLAMP_INGR = 0x8562
  BLUE_NV = 0x1905
  BOLD_BIT_NV = 0x01
  BOOL = 0x8B56
  BOOL_ARB = 0x8B56
  BOOL_VEC2 = 0x8B57
  BOOL_VEC2_ARB = 0x8B57
  BOOL_VEC3 = 0x8B58
  BOOL_VEC3_ARB = 0x8B58
  BOOL_VEC4 = 0x8B59
  BOOL_VEC4_ARB = 0x8B59
  BOUNDING_BOX_NV = 0x908D
  BOUNDING_BOX_OF_BOUNDING_BOXES_NV = 0x909C
  BUFFER = 0x82E0
  BUFFER_ACCESS = 0x88BB
  BUFFER_ACCESS_ARB = 0x88BB
  BUFFER_ACCESS_FLAGS = 0x911F
  BUFFER_BINDING = 0x9302
  BUFFER_DATA_SIZE = 0x9303
  BUFFER_FLUSHING_UNMAP_APPLE = 0x8A13
  BUFFER_GPU_ADDRESS_NV = 0x8F1D
  BUFFER_IMMUTABLE_STORAGE = 0x821F
  BUFFER_KHR = 0x82E0
  BUFFER_MAPPED = 0x88BC
  BUFFER_MAPPED_ARB = 0x88BC
  BUFFER_MAP_LENGTH = 0x9120
  BUFFER_MAP_OFFSET = 0x9121
  BUFFER_MAP_POINTER = 0x88BD
  BUFFER_MAP_POINTER_ARB = 0x88BD
  BUFFER_OBJECT_APPLE = 0x85B3
  BUFFER_OBJECT_EXT = 0x9151
  BUFFER_SERIALIZED_MODIFY_APPLE = 0x8A12
  BUFFER_SIZE = 0x8764
  BUFFER_SIZE_ARB = 0x8764
  BUFFER_STORAGE_FLAGS = 0x8220
  BUFFER_UPDATE_BARRIER_BIT = 0x00000200
  BUFFER_UPDATE_BARRIER_BIT_EXT = 0x00000200
  BUFFER_USAGE = 0x8765
  BUFFER_USAGE_ARB = 0x8765
  BUFFER_VARIABLE = 0x92E5
  BUMP_ENVMAP_ATI = 0x877B
  BUMP_NUM_TEX_UNITS_ATI = 0x8777
  BUMP_ROT_MATRIX_ATI = 0x8775
  BUMP_ROT_MATRIX_SIZE_ATI = 0x8776
  BUMP_TARGET_ATI = 0x877C
  BUMP_TEX_UNITS_ATI = 0x8778
  BYTE = 0x1400
  CALLIGRAPHIC_FRAGMENT_SGIX = 0x8183
  CAVEAT_SUPPORT = 0x82B8
  CCW = 0x0901
  CIRCULAR_CCW_ARC_TO_NV = 0xF8
  CIRCULAR_CW_ARC_TO_NV = 0xFA
  CIRCULAR_TANGENT_ARC_TO_NV = 0xFC
  CLAMP_FRAGMENT_COLOR_ARB = 0x891B
  CLAMP_READ_COLOR = 0x891C
  CLAMP_READ_COLOR_ARB = 0x891C
  CLAMP_TO_BORDER = 0x812D
  CLAMP_TO_BORDER_ARB = 0x812D
  CLAMP_TO_BORDER_SGIS = 0x812D
  CLAMP_TO_EDGE = 0x812F
  CLAMP_TO_EDGE_SGIS = 0x812F
  CLAMP_VERTEX_COLOR_ARB = 0x891A
  CLEAR = 0x1500
  CLEAR_BUFFER = 0x82B4
  CLEAR_TEXTURE = 0x9365
  CLIENT_ACTIVE_TEXTURE_ARB = 0x84E1
  CLIENT_MAPPED_BUFFER_BARRIER_BIT = 0x00004000
  CLIENT_STORAGE_BIT = 0x0200
  CLIP_DISTANCE0 = 0x3000
  CLIP_DISTANCE1 = 0x3001
  CLIP_DISTANCE2 = 0x3002
  CLIP_DISTANCE3 = 0x3003
  CLIP_DISTANCE4 = 0x3004
  CLIP_DISTANCE5 = 0x3005
  CLIP_DISTANCE6 = 0x3006
  CLIP_DISTANCE7 = 0x3007
  CLIP_DISTANCE_NV = 0x8C7A
  CLIP_FAR_HINT_PGI = 0x1A221
  CLIP_NEAR_HINT_PGI = 0x1A220
  CLIP_VOLUME_CLIPPING_HINT_EXT = 0x80F0
  CLOSE_PATH_NV = 0x00
  CMYKA_EXT = 0x800D
  CMYK_EXT = 0x800C
  CND0_ATI = 0x896B
  CND_ATI = 0x896A
  COLOR = 0x1800
  COLOR3_BIT_PGI = 0x00010000
  COLOR4_BIT_PGI = 0x00020000
  COLORBURN_NV = 0x929A
  COLORDODGE_NV = 0x9299
  COLOR_ALPHA_PAIRING_ATI = 0x8975
  COLOR_ARRAY_ADDRESS_NV = 0x8F23
  COLOR_ARRAY_BUFFER_BINDING_ARB = 0x8898
  COLOR_ARRAY_COUNT_EXT = 0x8084
  COLOR_ARRAY_EXT = 0x8076
  COLOR_ARRAY_LENGTH_NV = 0x8F2D
  COLOR_ARRAY_LIST_IBM = 103072
  COLOR_ARRAY_LIST_STRIDE_IBM = 103082
  COLOR_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F7
  COLOR_ARRAY_POINTER_EXT = 0x8090
  COLOR_ARRAY_SIZE_EXT = 0x8081
  COLOR_ARRAY_STRIDE_EXT = 0x8083
  COLOR_ARRAY_TYPE_EXT = 0x8082
  COLOR_ATTACHMENT0 = 0x8CE0
  COLOR_ATTACHMENT0_EXT = 0x8CE0
  COLOR_ATTACHMENT1 = 0x8CE1
  COLOR_ATTACHMENT10 = 0x8CEA
  COLOR_ATTACHMENT10_EXT = 0x8CEA
  COLOR_ATTACHMENT11 = 0x8CEB
  COLOR_ATTACHMENT11_EXT = 0x8CEB
  COLOR_ATTACHMENT12 = 0x8CEC
  COLOR_ATTACHMENT12_EXT = 0x8CEC
  COLOR_ATTACHMENT13 = 0x8CED
  COLOR_ATTACHMENT13_EXT = 0x8CED
  COLOR_ATTACHMENT14 = 0x8CEE
  COLOR_ATTACHMENT14_EXT = 0x8CEE
  COLOR_ATTACHMENT15 = 0x8CEF
  COLOR_ATTACHMENT15_EXT = 0x8CEF
  COLOR_ATTACHMENT1_EXT = 0x8CE1
  COLOR_ATTACHMENT2 = 0x8CE2
  COLOR_ATTACHMENT2_EXT = 0x8CE2
  COLOR_ATTACHMENT3 = 0x8CE3
  COLOR_ATTACHMENT3_EXT = 0x8CE3
  COLOR_ATTACHMENT4 = 0x8CE4
  COLOR_ATTACHMENT4_EXT = 0x8CE4
  COLOR_ATTACHMENT5 = 0x8CE5
  COLOR_ATTACHMENT5_EXT = 0x8CE5
  COLOR_ATTACHMENT6 = 0x8CE6
  COLOR_ATTACHMENT6_EXT = 0x8CE6
  COLOR_ATTACHMENT7 = 0x8CE7
  COLOR_ATTACHMENT7_EXT = 0x8CE7
  COLOR_ATTACHMENT8 = 0x8CE8
  COLOR_ATTACHMENT8_EXT = 0x8CE8
  COLOR_ATTACHMENT9 = 0x8CE9
  COLOR_ATTACHMENT9_EXT = 0x8CE9
  COLOR_BUFFER_BIT = 0x00004000
  COLOR_CLEAR_UNCLAMPED_VALUE_ATI = 0x8835
  COLOR_CLEAR_VALUE = 0x0C22
  COLOR_COMPONENTS = 0x8283
  COLOR_ENCODING = 0x8296
  COLOR_FLOAT_APPLE = 0x8A0F
  COLOR_INDEX12_EXT = 0x80E6
  COLOR_INDEX16_EXT = 0x80E7
  COLOR_INDEX1_EXT = 0x80E2
  COLOR_INDEX2_EXT = 0x80E3
  COLOR_INDEX4_EXT = 0x80E4
  COLOR_INDEX8_EXT = 0x80E5
  COLOR_LOGIC_OP = 0x0BF2
  COLOR_MATRIX_SGI = 0x80B1
  COLOR_MATRIX_STACK_DEPTH_SGI = 0x80B2
  COLOR_RENDERABLE = 0x8286
  COLOR_SAMPLES_NV = 0x8E20
  COLOR_SUM_ARB = 0x8458
  COLOR_SUM_CLAMP_NV = 0x854F
  COLOR_SUM_EXT = 0x8458
  COLOR_TABLE_ALPHA_SIZE_SGI = 0x80DD
  COLOR_TABLE_BIAS_SGI = 0x80D7
  COLOR_TABLE_BLUE_SIZE_SGI = 0x80DC
  COLOR_TABLE_FORMAT_SGI = 0x80D8
  COLOR_TABLE_GREEN_SIZE_SGI = 0x80DB
  COLOR_TABLE_INTENSITY_SIZE_SGI = 0x80DF
  COLOR_TABLE_LUMINANCE_SIZE_SGI = 0x80DE
  COLOR_TABLE_RED_SIZE_SGI = 0x80DA
  COLOR_TABLE_SCALE_SGI = 0x80D6
  COLOR_TABLE_SGI = 0x80D0
  COLOR_TABLE_WIDTH_SGI = 0x80D9
  COLOR_WRITEMASK = 0x0C23
  COMBINE4_NV = 0x8503
  COMBINER0_NV = 0x8550
  COMBINER1_NV = 0x8551
  COMBINER2_NV = 0x8552
  COMBINER3_NV = 0x8553
  COMBINER4_NV = 0x8554
  COMBINER5_NV = 0x8555
  COMBINER6_NV = 0x8556
  COMBINER7_NV = 0x8557
  COMBINER_AB_DOT_PRODUCT_NV = 0x8545
  COMBINER_AB_OUTPUT_NV = 0x854A
  COMBINER_BIAS_NV = 0x8549
  COMBINER_CD_DOT_PRODUCT_NV = 0x8546
  COMBINER_CD_OUTPUT_NV = 0x854B
  COMBINER_COMPONENT_USAGE_NV = 0x8544
  COMBINER_INPUT_NV = 0x8542
  COMBINER_MAPPING_NV = 0x8543
  COMBINER_MUX_SUM_NV = 0x8547
  COMBINER_SCALE_NV = 0x8548
  COMBINER_SUM_OUTPUT_NV = 0x854C
  COMBINE_ALPHA_ARB = 0x8572
  COMBINE_ALPHA_EXT = 0x8572
  COMBINE_ARB = 0x8570
  COMBINE_EXT = 0x8570
  COMBINE_RGB_ARB = 0x8571
  COMBINE_RGB_EXT = 0x8571
  COMMAND_BARRIER_BIT = 0x00000040
  COMMAND_BARRIER_BIT_EXT = 0x00000040
  COMPARE_REF_DEPTH_TO_TEXTURE_EXT = 0x884E
  COMPARE_REF_TO_TEXTURE = 0x884E
  COMPARE_R_TO_TEXTURE_ARB = 0x884E
  COMPATIBLE_SUBROUTINES = 0x8E4B
  COMPILE_STATUS = 0x8B81
  COMPRESSED_ALPHA_ARB = 0x84E9
  COMPRESSED_INTENSITY_ARB = 0x84EC
  COMPRESSED_LUMINANCE_ALPHA_ARB = 0x84EB
  COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT = 0x8C72
  COMPRESSED_LUMINANCE_ARB = 0x84EA
  COMPRESSED_LUMINANCE_LATC1_EXT = 0x8C70
  COMPRESSED_R11_EAC = 0x9270
  COMPRESSED_RED = 0x8225
  COMPRESSED_RED_GREEN_RGTC2_EXT = 0x8DBD
  COMPRESSED_RED_RGTC1 = 0x8DBB
  COMPRESSED_RED_RGTC1_EXT = 0x8DBB
  COMPRESSED_RG = 0x8226
  COMPRESSED_RG11_EAC = 0x9272
  COMPRESSED_RGB = 0x84ED
  COMPRESSED_RGB8_ETC2 = 0x9274
  COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9276
  COMPRESSED_RGBA = 0x84EE
  COMPRESSED_RGBA8_ETC2_EAC = 0x9278
  COMPRESSED_RGBA_ARB = 0x84EE
  COMPRESSED_RGBA_ASTC_10x10_KHR = 0x93BB
  COMPRESSED_RGBA_ASTC_10x5_KHR = 0x93B8
  COMPRESSED_RGBA_ASTC_10x6_KHR = 0x93B9
  COMPRESSED_RGBA_ASTC_10x8_KHR = 0x93BA
  COMPRESSED_RGBA_ASTC_12x10_KHR = 0x93BC
  COMPRESSED_RGBA_ASTC_12x12_KHR = 0x93BD
  COMPRESSED_RGBA_ASTC_4x4_KHR = 0x93B0
  COMPRESSED_RGBA_ASTC_5x4_KHR = 0x93B1
  COMPRESSED_RGBA_ASTC_5x5_KHR = 0x93B2
  COMPRESSED_RGBA_ASTC_6x5_KHR = 0x93B3
  COMPRESSED_RGBA_ASTC_6x6_KHR = 0x93B4
  COMPRESSED_RGBA_ASTC_8x5_KHR = 0x93B5
  COMPRESSED_RGBA_ASTC_8x6_KHR = 0x93B6
  COMPRESSED_RGBA_ASTC_8x8_KHR = 0x93B7
  COMPRESSED_RGBA_BPTC_UNORM_ARB = 0x8E8C
  COMPRESSED_RGBA_FXT1_3DFX = 0x86B1
  COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1
  COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2
  COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3
  COMPRESSED_RGB_ARB = 0x84ED
  COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB = 0x8E8E
  COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB = 0x8E8F
  COMPRESSED_RGB_FXT1_3DFX = 0x86B0
  COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0
  COMPRESSED_RG_RGTC2 = 0x8DBD
  COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT = 0x8C73
  COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT = 0x8C71
  COMPRESSED_SIGNED_R11_EAC = 0x9271
  COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT = 0x8DBE
  COMPRESSED_SIGNED_RED_RGTC1 = 0x8DBC
  COMPRESSED_SIGNED_RED_RGTC1_EXT = 0x8DBC
  COMPRESSED_SIGNED_RG11_EAC = 0x9273
  COMPRESSED_SIGNED_RG_RGTC2 = 0x8DBE
  COMPRESSED_SLUMINANCE_ALPHA_EXT = 0x8C4B
  COMPRESSED_SLUMINANCE_EXT = 0x8C4A
  COMPRESSED_SRGB = 0x8C48
  COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR = 0x93DB
  COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR = 0x93D8
  COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR = 0x93D9
  COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR = 0x93DA
  COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR = 0x93DC
  COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR = 0x93DD
  COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR = 0x93D0
  COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR = 0x93D1
  COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR = 0x93D2
  COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR = 0x93D3
  COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR = 0x93D4
  COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR = 0x93D5
  COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR = 0x93D6
  COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR = 0x93D7
  COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 0x9279
  COMPRESSED_SRGB8_ETC2 = 0x9275
  COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277
  COMPRESSED_SRGB_ALPHA = 0x8C49
  COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB = 0x8E8D
  COMPRESSED_SRGB_ALPHA_EXT = 0x8C49
  COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = 0x8C4D
  COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = 0x8C4E
  COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = 0x8C4F
  COMPRESSED_SRGB_EXT = 0x8C48
  COMPRESSED_SRGB_S3TC_DXT1_EXT = 0x8C4C
  COMPRESSED_TEXTURE_FORMATS = 0x86A3
  COMPRESSED_TEXTURE_FORMATS_ARB = 0x86A3
  COMPUTE_PROGRAM_NV = 0x90FB
  COMPUTE_PROGRAM_PARAMETER_BUFFER_NV = 0x90FC
  COMPUTE_SHADER = 0x91B9
  COMPUTE_SHADER_BIT = 0x00000020
  COMPUTE_SUBROUTINE = 0x92ED
  COMPUTE_SUBROUTINE_UNIFORM = 0x92F3
  COMPUTE_TEXTURE = 0x82A0
  COMPUTE_WORK_GROUP_SIZE = 0x8267
  COMP_BIT_ATI = 0x00000002
  CONDITION_SATISFIED = 0x911C
  CONJOINT_NV = 0x9284
  CONSERVE_MEMORY_HINT_PGI = 0x1A1FD
  CONSTANT_ALPHA = 0x8003
  CONSTANT_ALPHA_EXT = 0x8003
  CONSTANT_ARB = 0x8576
  CONSTANT_BORDER_HP = 0x8151
  CONSTANT_COLOR = 0x8001
  CONSTANT_COLOR0_NV = 0x852A
  CONSTANT_COLOR1_NV = 0x852B
  CONSTANT_COLOR_EXT = 0x8001
  CONSTANT_EXT = 0x8576
  CONST_EYE_NV = 0x86E5
  CONTEXT_COMPATIBILITY_PROFILE_BIT = 0x00000002
  CONTEXT_CORE_PROFILE_BIT = 0x00000001
  CONTEXT_FLAGS = 0x821E
  CONTEXT_FLAG_DEBUG_BIT = 0x00000002
  CONTEXT_FLAG_DEBUG_BIT_KHR = 0x00000002
  CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = 0x00000001
  CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB = 0x00000004
  CONTEXT_PROFILE_MASK = 0x9126
  CONTINUOUS_AMD = 0x9007
  CONTRAST_NV = 0x92A1
  CONVEX_HULL_NV = 0x908B
  CONVOLUTION_1D_EXT = 0x8010
  CONVOLUTION_2D_EXT = 0x8011
  CONVOLUTION_BORDER_COLOR_HP = 0x8154
  CONVOLUTION_BORDER_MODE_EXT = 0x8013
  CONVOLUTION_FILTER_BIAS_EXT = 0x8015
  CONVOLUTION_FILTER_SCALE_EXT = 0x8014
  CONVOLUTION_FORMAT_EXT = 0x8017
  CONVOLUTION_HEIGHT_EXT = 0x8019
  CONVOLUTION_HINT_SGIX = 0x8316
  CONVOLUTION_WIDTH_EXT = 0x8018
  CON_0_ATI = 0x8941
  CON_10_ATI = 0x894B
  CON_11_ATI = 0x894C
  CON_12_ATI = 0x894D
  CON_13_ATI = 0x894E
  CON_14_ATI = 0x894F
  CON_15_ATI = 0x8950
  CON_16_ATI = 0x8951
  CON_17_ATI = 0x8952
  CON_18_ATI = 0x8953
  CON_19_ATI = 0x8954
  CON_1_ATI = 0x8942
  CON_20_ATI = 0x8955
  CON_21_ATI = 0x8956
  CON_22_ATI = 0x8957
  CON_23_ATI = 0x8958
  CON_24_ATI = 0x8959
  CON_25_ATI = 0x895A
  CON_26_ATI = 0x895B
  CON_27_ATI = 0x895C
  CON_28_ATI = 0x895D
  CON_29_ATI = 0x895E
  CON_2_ATI = 0x8943
  CON_30_ATI = 0x895F
  CON_31_ATI = 0x8960
  CON_3_ATI = 0x8944
  CON_4_ATI = 0x8945
  CON_5_ATI = 0x8946
  CON_6_ATI = 0x8947
  CON_7_ATI = 0x8948
  CON_8_ATI = 0x8949
  CON_9_ATI = 0x894A
  COORD_REPLACE_ARB = 0x8862
  COORD_REPLACE_NV = 0x8862
  COPY = 0x1503
  COPY_INVERTED = 0x150C
  COPY_READ_BUFFER = 0x8F36
  COPY_READ_BUFFER_BINDING = 0x8F36
  COPY_WRITE_BUFFER = 0x8F37
  COPY_WRITE_BUFFER_BINDING = 0x8F37
  COUNTER_RANGE_AMD = 0x8BC1
  COUNTER_TYPE_AMD = 0x8BC0
  COUNT_DOWN_NV = 0x9089
  COUNT_UP_NV = 0x9088
  CUBIC_CURVE_TO_NV = 0x0C
  CUBIC_EXT = 0x8334
  CUBIC_HP = 0x815F
  CULL_FACE = 0x0B44
  CULL_FACE_MODE = 0x0B45
  CULL_FRAGMENT_NV = 0x86E7
  CULL_MODES_NV = 0x86E0
  CULL_VERTEX_EXT = 0x81AA
  CULL_VERTEX_EYE_POSITION_EXT = 0x81AB
  CULL_VERTEX_IBM = 103050
  CULL_VERTEX_OBJECT_POSITION_EXT = 0x81AC
  CURRENT_ATTRIB_NV = 0x8626
  CURRENT_BINORMAL_EXT = 0x843C
  CURRENT_FOG_COORDINATE_EXT = 0x8453
  CURRENT_MATRIX_ARB = 0x8641
  CURRENT_MATRIX_INDEX_ARB = 0x8845
  CURRENT_MATRIX_NV = 0x8641
  CURRENT_MATRIX_STACK_DEPTH_ARB = 0x8640
  CURRENT_MATRIX_STACK_DEPTH_NV = 0x8640
  CURRENT_OCCLUSION_QUERY_ID_NV = 0x8865
  CURRENT_PALETTE_MATRIX_ARB = 0x8843
  CURRENT_PROGRAM = 0x8B8D
  CURRENT_QUERY = 0x8865
  CURRENT_QUERY_ARB = 0x8865
  CURRENT_RASTER_NORMAL_SGIX = 0x8406
  CURRENT_SECONDARY_COLOR_EXT = 0x8459
  CURRENT_TANGENT_EXT = 0x843B
  CURRENT_TIME_NV = 0x8E28
  CURRENT_VERTEX_ATTRIB = 0x8626
  CURRENT_VERTEX_ATTRIB_ARB = 0x8626
  CURRENT_VERTEX_EXT = 0x87E2
  CURRENT_VERTEX_WEIGHT_EXT = 0x850B
  CURRENT_WEIGHT_ARB = 0x86A8
  CW = 0x0900
  DARKEN_NV = 0x9297
  DATA_BUFFER_AMD = 0x9151
  DEBUG_CALLBACK_FUNCTION = 0x8244
  DEBUG_CALLBACK_FUNCTION_ARB = 0x8244
  DEBUG_CALLBACK_FUNCTION_KHR = 0x8244
  DEBUG_CALLBACK_USER_PARAM = 0x8245
  DEBUG_CALLBACK_USER_PARAM_ARB = 0x8245
  DEBUG_CALLBACK_USER_PARAM_KHR = 0x8245
  DEBUG_CATEGORY_API_ERROR_AMD = 0x9149
  DEBUG_CATEGORY_APPLICATION_AMD = 0x914F
  DEBUG_CATEGORY_DEPRECATION_AMD = 0x914B
  DEBUG_CATEGORY_OTHER_AMD = 0x9150
  DEBUG_CATEGORY_PERFORMANCE_AMD = 0x914D
  DEBUG_CATEGORY_SHADER_COMPILER_AMD = 0x914E
  DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD = 0x914C
  DEBUG_CATEGORY_WINDOW_SYSTEM_AMD = 0x914A
  DEBUG_GROUP_STACK_DEPTH = 0x826D
  DEBUG_GROUP_STACK_DEPTH_KHR = 0x826D
  DEBUG_LOGGED_MESSAGES = 0x9145
  DEBUG_LOGGED_MESSAGES_AMD = 0x9145
  DEBUG_LOGGED_MESSAGES_ARB = 0x9145
  DEBUG_LOGGED_MESSAGES_KHR = 0x9145
  DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = 0x8243
  DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB = 0x8243
  DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR = 0x8243
  DEBUG_OUTPUT = 0x92E0
  DEBUG_OUTPUT_KHR = 0x92E0
  DEBUG_OUTPUT_SYNCHRONOUS = 0x8242
  DEBUG_OUTPUT_SYNCHRONOUS_ARB = 0x8242
  DEBUG_OUTPUT_SYNCHRONOUS_KHR = 0x8242
  DEBUG_SEVERITY_HIGH = 0x9146
  DEBUG_SEVERITY_HIGH_AMD = 0x9146
  DEBUG_SEVERITY_HIGH_ARB = 0x9146
  DEBUG_SEVERITY_HIGH_KHR = 0x9146
  DEBUG_SEVERITY_LOW = 0x9148
  DEBUG_SEVERITY_LOW_AMD = 0x9148
  DEBUG_SEVERITY_LOW_ARB = 0x9148
  DEBUG_SEVERITY_LOW_KHR = 0x9148
  DEBUG_SEVERITY_MEDIUM = 0x9147
  DEBUG_SEVERITY_MEDIUM_AMD = 0x9147
  DEBUG_SEVERITY_MEDIUM_ARB = 0x9147
  DEBUG_SEVERITY_MEDIUM_KHR = 0x9147
  DEBUG_SEVERITY_NOTIFICATION = 0x826B
  DEBUG_SEVERITY_NOTIFICATION_KHR = 0x826B
  DEBUG_SOURCE_API = 0x8246
  DEBUG_SOURCE_API_ARB = 0x8246
  DEBUG_SOURCE_API_KHR = 0x8246
  DEBUG_SOURCE_APPLICATION = 0x824A
  DEBUG_SOURCE_APPLICATION_ARB = 0x824A
  DEBUG_SOURCE_APPLICATION_KHR = 0x824A
  DEBUG_SOURCE_OTHER = 0x824B
  DEBUG_SOURCE_OTHER_ARB = 0x824B
  DEBUG_SOURCE_OTHER_KHR = 0x824B
  DEBUG_SOURCE_SHADER_COMPILER = 0x8248
  DEBUG_SOURCE_SHADER_COMPILER_ARB = 0x8248
  DEBUG_SOURCE_SHADER_COMPILER_KHR = 0x8248
  DEBUG_SOURCE_THIRD_PARTY = 0x8249
  DEBUG_SOURCE_THIRD_PARTY_ARB = 0x8249
  DEBUG_SOURCE_THIRD_PARTY_KHR = 0x8249
  DEBUG_SOURCE_WINDOW_SYSTEM = 0x8247
  DEBUG_SOURCE_WINDOW_SYSTEM_ARB = 0x8247
  DEBUG_SOURCE_WINDOW_SYSTEM_KHR = 0x8247
  DEBUG_TYPE_DEPRECATED_BEHAVIOR = 0x824D
  DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB = 0x824D
  DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR = 0x824D
  DEBUG_TYPE_ERROR = 0x824C
  DEBUG_TYPE_ERROR_ARB = 0x824C
  DEBUG_TYPE_ERROR_KHR = 0x824C
  DEBUG_TYPE_MARKER = 0x8268
  DEBUG_TYPE_MARKER_KHR = 0x8268
  DEBUG_TYPE_OTHER = 0x8251
  DEBUG_TYPE_OTHER_ARB = 0x8251
  DEBUG_TYPE_OTHER_KHR = 0x8251
  DEBUG_TYPE_PERFORMANCE = 0x8250
  DEBUG_TYPE_PERFORMANCE_ARB = 0x8250
  DEBUG_TYPE_PERFORMANCE_KHR = 0x8250
  DEBUG_TYPE_POP_GROUP = 0x826A
  DEBUG_TYPE_POP_GROUP_KHR = 0x826A
  DEBUG_TYPE_PORTABILITY = 0x824F
  DEBUG_TYPE_PORTABILITY_ARB = 0x824F
  DEBUG_TYPE_PORTABILITY_KHR = 0x824F
  DEBUG_TYPE_PUSH_GROUP = 0x8269
  DEBUG_TYPE_PUSH_GROUP_KHR = 0x8269
  DEBUG_TYPE_UNDEFINED_BEHAVIOR = 0x824E
  DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB = 0x824E
  DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR = 0x824E
  DECODE_EXT = 0x8A49
  DECR = 0x1E03
  DECR_WRAP = 0x8508
  DECR_WRAP_EXT = 0x8508
  DEFORMATIONS_MASK_SGIX = 0x8196
  DELETE_STATUS = 0x8B80
  DEPENDENT_AR_TEXTURE_2D_NV = 0x86E9
  DEPENDENT_GB_TEXTURE_2D_NV = 0x86EA
  DEPENDENT_HILO_TEXTURE_2D_NV = 0x8858
  DEPENDENT_RGB_TEXTURE_3D_NV = 0x8859
  DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV = 0x885A
  DEPTH = 0x1801
  DEPTH24_STENCIL8 = 0x88F0
  DEPTH24_STENCIL8_EXT = 0x88F0
  DEPTH32F_STENCIL8 = 0x8CAD
  DEPTH32F_STENCIL8_NV = 0x8DAC
  DEPTH_ATTACHMENT = 0x8D00
  DEPTH_ATTACHMENT_EXT = 0x8D00
  DEPTH_BOUNDS_EXT = 0x8891
  DEPTH_BOUNDS_TEST_EXT = 0x8890
  DEPTH_BUFFER_BIT = 0x00000100
  DEPTH_BUFFER_FLOAT_MODE_NV = 0x8DAF
  DEPTH_CLAMP = 0x864F
  DEPTH_CLAMP_FAR_AMD = 0x901F
  DEPTH_CLAMP_NEAR_AMD = 0x901E
  DEPTH_CLAMP_NV = 0x864F
  DEPTH_CLEAR_VALUE = 0x0B73
  DEPTH_COMPONENT = 0x1902
  DEPTH_COMPONENT16 = 0x81A5
  DEPTH_COMPONENT16_ARB = 0x81A5
  DEPTH_COMPONENT16_SGIX = 0x81A5
  DEPTH_COMPONENT24 = 0x81A6
  DEPTH_COMPONENT24_ARB = 0x81A6
  DEPTH_COMPONENT24_SGIX = 0x81A6
  DEPTH_COMPONENT32 = 0x81A7
  DEPTH_COMPONENT32F = 0x8CAC
  DEPTH_COMPONENT32F_NV = 0x8DAB
  DEPTH_COMPONENT32_ARB = 0x81A7
  DEPTH_COMPONENT32_SGIX = 0x81A7
  DEPTH_COMPONENTS = 0x8284
  DEPTH_FUNC = 0x0B74
  DEPTH_RANGE = 0x0B70
  DEPTH_RENDERABLE = 0x8287
  DEPTH_STENCIL = 0x84F9
  DEPTH_STENCIL_ATTACHMENT = 0x821A
  DEPTH_STENCIL_EXT = 0x84F9
  DEPTH_STENCIL_NV = 0x84F9
  DEPTH_STENCIL_TEXTURE_MODE = 0x90EA
  DEPTH_STENCIL_TO_BGRA_NV = 0x886F
  DEPTH_STENCIL_TO_RGBA_NV = 0x886E
  DEPTH_TEST = 0x0B71
  DEPTH_TEXTURE_MODE_ARB = 0x884B
  DEPTH_WRITEMASK = 0x0B72
  DETAIL_TEXTURE_2D_BINDING_SGIS = 0x8096
  DETAIL_TEXTURE_2D_SGIS = 0x8095
  DETAIL_TEXTURE_FUNC_POINTS_SGIS = 0x809C
  DETAIL_TEXTURE_LEVEL_SGIS = 0x809A
  DETAIL_TEXTURE_MODE_SGIS = 0x809B
  DIFFERENCE_NV = 0x929E
  DISCARD_ATI = 0x8763
  DISCARD_NV = 0x8530
  DISCRETE_AMD = 0x9006
  DISJOINT_NV = 0x9283
  DISPATCH_INDIRECT_BUFFER = 0x90EE
  DISPATCH_INDIRECT_BUFFER_BINDING = 0x90EF
  DISTANCE_ATTENUATION_EXT = 0x8129
  DISTANCE_ATTENUATION_SGIS = 0x8129
  DITHER = 0x0BD0
  DONT_CARE = 0x1100
  DOT2_ADD_ATI = 0x896C
  DOT3_ATI = 0x8966
  DOT3_RGBA_ARB = 0x86AF
  DOT3_RGBA_EXT = 0x8741
  DOT3_RGB_ARB = 0x86AE
  DOT3_RGB_EXT = 0x8740
  DOT4_ATI = 0x8967
  DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV = 0x885D
  DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV = 0x86F3
  DOT_PRODUCT_DEPTH_REPLACE_NV = 0x86ED
  DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV = 0x86F1
  DOT_PRODUCT_NV = 0x86EC
  DOT_PRODUCT_PASS_THROUGH_NV = 0x885B
  DOT_PRODUCT_REFLECT_CUBE_MAP_NV = 0x86F2
  DOT_PRODUCT_TEXTURE_1D_NV = 0x885C
  DOT_PRODUCT_TEXTURE_2D_NV = 0x86EE
  DOT_PRODUCT_TEXTURE_3D_NV = 0x86EF
  DOT_PRODUCT_TEXTURE_CUBE_MAP_NV = 0x86F0
  DOT_PRODUCT_TEXTURE_RECTANGLE_NV = 0x864E
  DOUBLE = 0x140A
  DOUBLEBUFFER = 0x0C32
  DOUBLE_MAT2 = 0x8F46
  DOUBLE_MAT2_EXT = 0x8F46
  DOUBLE_MAT2x3 = 0x8F49
  DOUBLE_MAT2x3_EXT = 0x8F49
  DOUBLE_MAT2x4 = 0x8F4A
  DOUBLE_MAT2x4_EXT = 0x8F4A
  DOUBLE_MAT3 = 0x8F47
  DOUBLE_MAT3_EXT = 0x8F47
  DOUBLE_MAT3x2 = 0x8F4B
  DOUBLE_MAT3x2_EXT = 0x8F4B
  DOUBLE_MAT3x4 = 0x8F4C
  DOUBLE_MAT3x4_EXT = 0x8F4C
  DOUBLE_MAT4 = 0x8F48
  DOUBLE_MAT4_EXT = 0x8F48
  DOUBLE_MAT4x2 = 0x8F4D
  DOUBLE_MAT4x2_EXT = 0x8F4D
  DOUBLE_MAT4x3 = 0x8F4E
  DOUBLE_MAT4x3_EXT = 0x8F4E
  DOUBLE_VEC2 = 0x8FFC
  DOUBLE_VEC2_EXT = 0x8FFC
  DOUBLE_VEC3 = 0x8FFD
  DOUBLE_VEC3_EXT = 0x8FFD
  DOUBLE_VEC4 = 0x8FFE
  DOUBLE_VEC4_EXT = 0x8FFE
  DRAW_BUFFER = 0x0C01
  DRAW_BUFFER0 = 0x8825
  DRAW_BUFFER0_ARB = 0x8825
  DRAW_BUFFER0_ATI = 0x8825
  DRAW_BUFFER1 = 0x8826
  DRAW_BUFFER10 = 0x882F
  DRAW_BUFFER10_ARB = 0x882F
  DRAW_BUFFER10_ATI = 0x882F
  DRAW_BUFFER11 = 0x8830
  DRAW_BUFFER11_ARB = 0x8830
  DRAW_BUFFER11_ATI = 0x8830
  DRAW_BUFFER12 = 0x8831
  DRAW_BUFFER12_ARB = 0x8831
  DRAW_BUFFER12_ATI = 0x8831
  DRAW_BUFFER13 = 0x8832
  DRAW_BUFFER13_ARB = 0x8832
  DRAW_BUFFER13_ATI = 0x8832
  DRAW_BUFFER14 = 0x8833
  DRAW_BUFFER14_ARB = 0x8833
  DRAW_BUFFER14_ATI = 0x8833
  DRAW_BUFFER15 = 0x8834
  DRAW_BUFFER15_ARB = 0x8834
  DRAW_BUFFER15_ATI = 0x8834
  DRAW_BUFFER1_ARB = 0x8826
  DRAW_BUFFER1_ATI = 0x8826
  DRAW_BUFFER2 = 0x8827
  DRAW_BUFFER2_ARB = 0x8827
  DRAW_BUFFER2_ATI = 0x8827
  DRAW_BUFFER3 = 0x8828
  DRAW_BUFFER3_ARB = 0x8828
  DRAW_BUFFER3_ATI = 0x8828
  DRAW_BUFFER4 = 0x8829
  DRAW_BUFFER4_ARB = 0x8829
  DRAW_BUFFER4_ATI = 0x8829
  DRAW_BUFFER5 = 0x882A
  DRAW_BUFFER5_ARB = 0x882A
  DRAW_BUFFER5_ATI = 0x882A
  DRAW_BUFFER6 = 0x882B
  DRAW_BUFFER6_ARB = 0x882B
  DRAW_BUFFER6_ATI = 0x882B
  DRAW_BUFFER7 = 0x882C
  DRAW_BUFFER7_ARB = 0x882C
  DRAW_BUFFER7_ATI = 0x882C
  DRAW_BUFFER8 = 0x882D
  DRAW_BUFFER8_ARB = 0x882D
  DRAW_BUFFER8_ATI = 0x882D
  DRAW_BUFFER9 = 0x882E
  DRAW_BUFFER9_ARB = 0x882E
  DRAW_BUFFER9_ATI = 0x882E
  DRAW_FRAMEBUFFER = 0x8CA9
  DRAW_FRAMEBUFFER_BINDING = 0x8CA6
  DRAW_FRAMEBUFFER_BINDING_EXT = 0x8CA6
  DRAW_FRAMEBUFFER_EXT = 0x8CA9
  DRAW_INDIRECT_ADDRESS_NV = 0x8F41
  DRAW_INDIRECT_BUFFER = 0x8F3F
  DRAW_INDIRECT_BUFFER_BINDING = 0x8F43
  DRAW_INDIRECT_LENGTH_NV = 0x8F42
  DRAW_INDIRECT_UNIFIED_NV = 0x8F40
  DRAW_PIXELS_APPLE = 0x8A0A
  DSDT8_MAG8_INTENSITY8_NV = 0x870B
  DSDT8_MAG8_NV = 0x870A
  DSDT8_NV = 0x8709
  DSDT_MAG_INTENSITY_NV = 0x86DC
  DSDT_MAG_NV = 0x86F6
  DSDT_MAG_VIB_NV = 0x86F7
  DSDT_NV = 0x86F5
  DST_ALPHA = 0x0304
  DST_ATOP_NV = 0x928F
  DST_COLOR = 0x0306
  DST_IN_NV = 0x928B
  DST_NV = 0x9287
  DST_OUT_NV = 0x928D
  DST_OVER_NV = 0x9289
  DS_BIAS_NV = 0x8716
  DS_SCALE_NV = 0x8710
  DT_BIAS_NV = 0x8717
  DT_SCALE_NV = 0x8711
  DU8DV8_ATI = 0x877A
  DUAL_ALPHA12_SGIS = 0x8112
  DUAL_ALPHA16_SGIS = 0x8113
  DUAL_ALPHA4_SGIS = 0x8110
  DUAL_ALPHA8_SGIS = 0x8111
  DUAL_INTENSITY12_SGIS = 0x811A
  DUAL_INTENSITY16_SGIS = 0x811B
  DUAL_INTENSITY4_SGIS = 0x8118
  DUAL_INTENSITY8_SGIS = 0x8119
  DUAL_LUMINANCE12_SGIS = 0x8116
  DUAL_LUMINANCE16_SGIS = 0x8117
  DUAL_LUMINANCE4_SGIS = 0x8114
  DUAL_LUMINANCE8_SGIS = 0x8115
  DUAL_LUMINANCE_ALPHA4_SGIS = 0x811C
  DUAL_LUMINANCE_ALPHA8_SGIS = 0x811D
  DUAL_TEXTURE_SELECT_SGIS = 0x8124
  DUDV_ATI = 0x8779
  DUP_FIRST_CUBIC_CURVE_TO_NV = 0xF2
  DUP_LAST_CUBIC_CURVE_TO_NV = 0xF4
  DYNAMIC_ATI = 0x8761
  DYNAMIC_COPY = 0x88EA
  DYNAMIC_COPY_ARB = 0x88EA
  DYNAMIC_DRAW = 0x88E8
  DYNAMIC_DRAW_ARB = 0x88E8
  DYNAMIC_READ = 0x88E9
  DYNAMIC_READ_ARB = 0x88E9
  DYNAMIC_STORAGE_BIT = 0x0100
  EDGEFLAG_BIT_PGI = 0x00040000
  EDGE_FLAG_ARRAY_ADDRESS_NV = 0x8F26
  EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB = 0x889B
  EDGE_FLAG_ARRAY_COUNT_EXT = 0x808D
  EDGE_FLAG_ARRAY_EXT = 0x8079
  EDGE_FLAG_ARRAY_LENGTH_NV = 0x8F30
  EDGE_FLAG_ARRAY_LIST_IBM = 103075
  EDGE_FLAG_ARRAY_LIST_STRIDE_IBM = 103085
  EDGE_FLAG_ARRAY_POINTER_EXT = 0x8093
  EDGE_FLAG_ARRAY_STRIDE_EXT = 0x808C
  EIGHTH_BIT_ATI = 0x00000020
  ELEMENT_ARRAY_ADDRESS_NV = 0x8F29
  ELEMENT_ARRAY_APPLE = 0x8A0C
  ELEMENT_ARRAY_ATI = 0x8768
  ELEMENT_ARRAY_BARRIER_BIT = 0x00000002
  ELEMENT_ARRAY_BARRIER_BIT_EXT = 0x00000002
  ELEMENT_ARRAY_BUFFER = 0x8893
  ELEMENT_ARRAY_BUFFER_ARB = 0x8893
  ELEMENT_ARRAY_BUFFER_BINDING = 0x8895
  ELEMENT_ARRAY_BUFFER_BINDING_ARB = 0x8895
  ELEMENT_ARRAY_LENGTH_NV = 0x8F33
  ELEMENT_ARRAY_POINTER_APPLE = 0x8A0E
  ELEMENT_ARRAY_POINTER_ATI = 0x876A
  ELEMENT_ARRAY_TYPE_APPLE = 0x8A0D
  ELEMENT_ARRAY_TYPE_ATI = 0x8769
  ELEMENT_ARRAY_UNIFIED_NV = 0x8F1F
  EMBOSS_CONSTANT_NV = 0x855E
  EMBOSS_LIGHT_NV = 0x855D
  EMBOSS_MAP_NV = 0x855F
  EQUAL = 0x0202
  EQUIV = 0x1509
  EVAL_2D_NV = 0x86C0
  EVAL_FRACTIONAL_TESSELLATION_NV = 0x86C5
  EVAL_TRIANGULAR_2D_NV = 0x86C1
  EVAL_VERTEX_ATTRIB0_NV = 0x86C6
  EVAL_VERTEX_ATTRIB10_NV = 0x86D0
  EVAL_VERTEX_ATTRIB11_NV = 0x86D1
  EVAL_VERTEX_ATTRIB12_NV = 0x86D2
  EVAL_VERTEX_ATTRIB13_NV = 0x86D3
  EVAL_VERTEX_ATTRIB14_NV = 0x86D4
  EVAL_VERTEX_ATTRIB15_NV = 0x86D5
  EVAL_VERTEX_ATTRIB1_NV = 0x86C7
  EVAL_VERTEX_ATTRIB2_NV = 0x86C8
  EVAL_VERTEX_ATTRIB3_NV = 0x86C9
  EVAL_VERTEX_ATTRIB4_NV = 0x86CA
  EVAL_VERTEX_ATTRIB5_NV = 0x86CB
  EVAL_VERTEX_ATTRIB6_NV = 0x86CC
  EVAL_VERTEX_ATTRIB7_NV = 0x86CD
  EVAL_VERTEX_ATTRIB8_NV = 0x86CE
  EVAL_VERTEX_ATTRIB9_NV = 0x86CF
  EXCLUSION_NV = 0x92A0
  EXPAND_NEGATE_NV = 0x8539
  EXPAND_NORMAL_NV = 0x8538
  EXTENSIONS = 0x1F03
  EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD = 0x9160
  EYE_DISTANCE_TO_LINE_SGIS = 0x81F2
  EYE_DISTANCE_TO_POINT_SGIS = 0x81F0
  EYE_LINE_SGIS = 0x81F6
  EYE_PLANE = 0x2502
  EYE_PLANE_ABSOLUTE_NV = 0x855C
  EYE_POINT_SGIS = 0x81F4
  EYE_RADIAL_NV = 0x855B
  E_TIMES_F_NV = 0x8531
  FACTOR_MAX_AMD = 0x901D
  FACTOR_MIN_AMD = 0x901C
  FAILURE_NV = 0x9030
  FALSE = 0
  FASTEST = 0x1101
  FENCE_APPLE = 0x8A0B
  FENCE_CONDITION_NV = 0x84F4
  FENCE_STATUS_NV = 0x84F3
  FIELDS_NV = 0x8E27
  FIELD_LOWER_NV = 0x9023
  FIELD_UPPER_NV = 0x9022
  FILE_NAME_NV = 0x9074
  FILL = 0x1B02
  FILTER = 0x829A
  FILTER4_SGIS = 0x8146
  FIRST_TO_REST_NV = 0x90AF
  FIRST_VERTEX_CONVENTION = 0x8E4D
  FIRST_VERTEX_CONVENTION_EXT = 0x8E4D
  FIXED = 0x140C
  FIXED_OES = 0x140C
  FIXED_ONLY = 0x891D
  FIXED_ONLY_ARB = 0x891D
  FLOAT = 0x1406
  FLOAT16_NV = 0x8FF8
  FLOAT16_VEC2_NV = 0x8FF9
  FLOAT16_VEC3_NV = 0x8FFA
  FLOAT16_VEC4_NV = 0x8FFB
  FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD
  FLOAT_32_UNSIGNED_INT_24_8_REV_NV = 0x8DAD
  FLOAT_CLEAR_COLOR_VALUE_NV = 0x888D
  FLOAT_MAT2 = 0x8B5A
  FLOAT_MAT2_ARB = 0x8B5A
  FLOAT_MAT2x3 = 0x8B65
  FLOAT_MAT2x4 = 0x8B66
  FLOAT_MAT3 = 0x8B5B
  FLOAT_MAT3_ARB = 0x8B5B
  FLOAT_MAT3x2 = 0x8B67
  FLOAT_MAT3x4 = 0x8B68
  FLOAT_MAT4 = 0x8B5C
  FLOAT_MAT4_ARB = 0x8B5C
  FLOAT_MAT4x2 = 0x8B69
  FLOAT_MAT4x3 = 0x8B6A
  FLOAT_R16_NV = 0x8884
  FLOAT_R32_NV = 0x8885
  FLOAT_RG16_NV = 0x8886
  FLOAT_RG32_NV = 0x8887
  FLOAT_RGB16_NV = 0x8888
  FLOAT_RGB32_NV = 0x8889
  FLOAT_RGBA16_NV = 0x888A
  FLOAT_RGBA32_NV = 0x888B
  FLOAT_RGBA_MODE_NV = 0x888E
  FLOAT_RGBA_NV = 0x8883
  FLOAT_RGB_NV = 0x8882
  FLOAT_RG_NV = 0x8881
  FLOAT_R_NV = 0x8880
  FLOAT_VEC2 = 0x8B50
  FLOAT_VEC2_ARB = 0x8B50
  FLOAT_VEC3 = 0x8B51
  FLOAT_VEC3_ARB = 0x8B51
  FLOAT_VEC4 = 0x8B52
  FLOAT_VEC4_ARB = 0x8B52
  FOG = 0x0B60
  FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB = 0x889D
  FOG_COORDINATE_ARRAY_EXT = 0x8457
  FOG_COORDINATE_ARRAY_LIST_IBM = 103076
  FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM = 103086
  FOG_COORDINATE_ARRAY_POINTER_EXT = 0x8456
  FOG_COORDINATE_ARRAY_STRIDE_EXT = 0x8455
  FOG_COORDINATE_ARRAY_TYPE_EXT = 0x8454
  FOG_COORDINATE_EXT = 0x8451
  FOG_COORDINATE_SOURCE_EXT = 0x8450
  FOG_COORD_ARRAY_ADDRESS_NV = 0x8F28
  FOG_COORD_ARRAY_LENGTH_NV = 0x8F32
  FOG_DISTANCE_MODE_NV = 0x855A
  FOG_FUNC_POINTS_SGIS = 0x812B
  FOG_FUNC_SGIS = 0x812A
  FOG_OFFSET_SGIX = 0x8198
  FOG_OFFSET_VALUE_SGIX = 0x8199
  FOG_SPECULAR_TEXTURE_WIN = 0x80EC
  FONT_ASCENDER_BIT_NV = 0x00200000
  FONT_DESCENDER_BIT_NV = 0x00400000
  FONT_HAS_KERNING_BIT_NV = 0x10000000
  FONT_HEIGHT_BIT_NV = 0x00800000
  FONT_MAX_ADVANCE_HEIGHT_BIT_NV = 0x02000000
  FONT_MAX_ADVANCE_WIDTH_BIT_NV = 0x01000000
  FONT_UNDERLINE_POSITION_BIT_NV = 0x04000000
  FONT_UNDERLINE_THICKNESS_BIT_NV = 0x08000000
  FONT_UNITS_PER_EM_BIT_NV = 0x00100000
  FONT_X_MAX_BOUNDS_BIT_NV = 0x00040000
  FONT_X_MIN_BOUNDS_BIT_NV = 0x00010000
  FONT_Y_MAX_BOUNDS_BIT_NV = 0x00080000
  FONT_Y_MIN_BOUNDS_BIT_NV = 0x00020000
  FORCE_BLUE_TO_ONE_NV = 0x8860
  FORMAT_SUBSAMPLE_244_244_OML = 0x8983
  FORMAT_SUBSAMPLE_24_24_OML = 0x8982
  FRACTIONAL_EVEN = 0x8E7C
  FRACTIONAL_ODD = 0x8E7B
  FRAGMENT_COLOR_EXT = 0x834C
  FRAGMENT_COLOR_MATERIAL_FACE_SGIX = 0x8402
  FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX = 0x8403
  FRAGMENT_COLOR_MATERIAL_SGIX = 0x8401
  FRAGMENT_DEPTH_EXT = 0x8452
  FRAGMENT_INTERPOLATION_OFFSET_BITS = 0x8E5D
  FRAGMENT_LIGHT0_SGIX = 0x840C
  FRAGMENT_LIGHT1_SGIX = 0x840D
  FRAGMENT_LIGHT2_SGIX = 0x840E
  FRAGMENT_LIGHT3_SGIX = 0x840F
  FRAGMENT_LIGHT4_SGIX = 0x8410
  FRAGMENT_LIGHT5_SGIX = 0x8411
  FRAGMENT_LIGHT6_SGIX = 0x8412
  FRAGMENT_LIGHT7_SGIX = 0x8413
  FRAGMENT_LIGHTING_SGIX = 0x8400
  FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX = 0x840A
  FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX = 0x8408
  FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX = 0x840B
  FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX = 0x8409
  FRAGMENT_MATERIAL_EXT = 0x8349
  FRAGMENT_NORMAL_EXT = 0x834A
  FRAGMENT_PROGRAM_ARB = 0x8804
  FRAGMENT_PROGRAM_BINDING_NV = 0x8873
  FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV = 0x8E5D
  FRAGMENT_PROGRAM_NV = 0x8870
  FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV = 0x8DA4
  FRAGMENT_SHADER = 0x8B30
  FRAGMENT_SHADER_ARB = 0x8B30
  FRAGMENT_SHADER_ATI = 0x8920
  FRAGMENT_SHADER_BIT = 0x00000002
  FRAGMENT_SHADER_BIT_EXT = 0x00000002
  FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8B
  FRAGMENT_SHADER_DERIVATIVE_HINT_ARB = 0x8B8B
  FRAGMENT_SUBROUTINE = 0x92EC
  FRAGMENT_SUBROUTINE_UNIFORM = 0x92F2
  FRAGMENT_TEXTURE = 0x829F
  FRAMEBUFFER = 0x8D40
  FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 0x8215
  FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 0x8214
  FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 0x8210
  FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 0x8211
  FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 0x8216
  FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 0x8213
  FRAMEBUFFER_ATTACHMENT_LAYERED = 0x8DA7
  FRAMEBUFFER_ATTACHMENT_LAYERED_ARB = 0x8DA7
  FRAMEBUFFER_ATTACHMENT_LAYERED_EXT = 0x8DA7
  FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1
  FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT = 0x8CD1
  FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0
  FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT = 0x8CD0
  FRAMEBUFFER_ATTACHMENT_RED_SIZE = 0x8212
  FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 0x8217
  FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT = 0x8CD4
  FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3
  FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT = 0x8CD3
  FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 0x8CD4
  FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT = 0x8CD4
  FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2
  FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT = 0x8CD2
  FRAMEBUFFER_BARRIER_BIT = 0x00000400
  FRAMEBUFFER_BARRIER_BIT_EXT = 0x00000400
  FRAMEBUFFER_BINDING = 0x8CA6
  FRAMEBUFFER_BINDING_EXT = 0x8CA6
  FRAMEBUFFER_BLEND = 0x828B
  FRAMEBUFFER_COMPLETE = 0x8CD5
  FRAMEBUFFER_COMPLETE_EXT = 0x8CD5
  FRAMEBUFFER_DEFAULT = 0x8218
  FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = 0x9314
  FRAMEBUFFER_DEFAULT_HEIGHT = 0x9311
  FRAMEBUFFER_DEFAULT_LAYERS = 0x9312
  FRAMEBUFFER_DEFAULT_SAMPLES = 0x9313
  FRAMEBUFFER_DEFAULT_WIDTH = 0x9310
  FRAMEBUFFER_EXT = 0x8D40
  FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6
  FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT = 0x8CD6
  FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT = 0x8CD9
  FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = 0x8CDB
  FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT = 0x8CDB
  FRAMEBUFFER_INCOMPLETE_FORMATS_EXT = 0x8CDA
  FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB = 0x8DA9
  FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT = 0x8DA9
  FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = 0x8DA8
  FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB = 0x8DA8
  FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT = 0x8DA8
  FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7
  FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT = 0x8CD7
  FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 0x8D56
  FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT = 0x8D56
  FRAMEBUFFER_INCOMPLETE_READ_BUFFER = 0x8CDC
  FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT = 0x8CDC
  FRAMEBUFFER_RENDERABLE = 0x8289
  FRAMEBUFFER_RENDERABLE_LAYERED = 0x828A
  FRAMEBUFFER_SRGB = 0x8DB9
  FRAMEBUFFER_SRGB_CAPABLE_EXT = 0x8DBA
  FRAMEBUFFER_SRGB_EXT = 0x8DB9
  FRAMEBUFFER_UNDEFINED = 0x8219
  FRAMEBUFFER_UNSUPPORTED = 0x8CDD
  FRAMEBUFFER_UNSUPPORTED_EXT = 0x8CDD
  FRAMEZOOM_FACTOR_SGIX = 0x818C
  FRAMEZOOM_SGIX = 0x818B
  FRAME_NV = 0x8E26
  FRONT = 0x0404
  FRONT_AND_BACK = 0x0408
  FRONT_FACE = 0x0B46
  FRONT_LEFT = 0x0400
  FRONT_RIGHT = 0x0401
  FULL_RANGE_EXT = 0x87E1
  FULL_STIPPLE_HINT_PGI = 0x1A219
  FULL_SUPPORT = 0x82B7
  FUNC_ADD = 0x8006
  FUNC_ADD_EXT = 0x8006
  FUNC_REVERSE_SUBTRACT = 0x800B
  FUNC_REVERSE_SUBTRACT_EXT = 0x800B
  FUNC_SUBTRACT = 0x800A
  FUNC_SUBTRACT_EXT = 0x800A
  GENERATE_MIPMAP_HINT_SGIS = 0x8192
  GENERATE_MIPMAP_SGIS = 0x8191
  GENERIC_ATTRIB_NV = 0x8C7D
  GEOMETRY_DEFORMATION_BIT_SGIX = 0x00000002
  GEOMETRY_DEFORMATION_SGIX = 0x8194
  GEOMETRY_INPUT_TYPE = 0x8917
  GEOMETRY_INPUT_TYPE_ARB = 0x8DDB
  GEOMETRY_INPUT_TYPE_EXT = 0x8DDB
  GEOMETRY_OUTPUT_TYPE = 0x8918
  GEOMETRY_OUTPUT_TYPE_ARB = 0x8DDC
  GEOMETRY_OUTPUT_TYPE_EXT = 0x8DDC
  GEOMETRY_PROGRAM_NV = 0x8C26
  GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV = 0x8DA3
  GEOMETRY_SHADER = 0x8DD9
  GEOMETRY_SHADER_ARB = 0x8DD9
  GEOMETRY_SHADER_BIT = 0x00000004
  GEOMETRY_SHADER_EXT = 0x8DD9
  GEOMETRY_SHADER_INVOCATIONS = 0x887F
  GEOMETRY_SUBROUTINE = 0x92EB
  GEOMETRY_SUBROUTINE_UNIFORM = 0x92F1
  GEOMETRY_TEXTURE = 0x829E
  GEOMETRY_VERTICES_OUT = 0x8916
  GEOMETRY_VERTICES_OUT_ARB = 0x8DDA
  GEOMETRY_VERTICES_OUT_EXT = 0x8DDA
  GEQUAL = 0x0206
  GET_TEXTURE_IMAGE_FORMAT = 0x8291
  GET_TEXTURE_IMAGE_TYPE = 0x8292
  GLOBAL_ALPHA_FACTOR_SUN = 0x81DA
  GLOBAL_ALPHA_SUN = 0x81D9
  GLYPH_HAS_KERNING_BIT_NV = 0x100
  GLYPH_HEIGHT_BIT_NV = 0x02
  GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV = 0x10
  GLYPH_HORIZONTAL_BEARING_X_BIT_NV = 0x04
  GLYPH_HORIZONTAL_BEARING_Y_BIT_NV = 0x08
  GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV = 0x80
  GLYPH_VERTICAL_BEARING_X_BIT_NV = 0x20
  GLYPH_VERTICAL_BEARING_Y_BIT_NV = 0x40
  GLYPH_WIDTH_BIT_NV = 0x01
  GPU_ADDRESS_NV = 0x8F34
  GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX = 0x9049
  GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX = 0x9047
  GPU_MEMORY_INFO_EVICTED_MEMORY_NVX = 0x904B
  GPU_MEMORY_INFO_EVICTION_COUNT_NVX = 0x904A
  GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX = 0x9048
  GREATER = 0x0204
  GREEN = 0x1904
  GREEN_BIT_ATI = 0x00000002
  GREEN_INTEGER = 0x8D95
  GREEN_INTEGER_EXT = 0x8D95
  GREEN_MAX_CLAMP_INGR = 0x8565
  GREEN_MIN_CLAMP_INGR = 0x8561
  GREEN_NV = 0x1904
  GUILTY_CONTEXT_RESET_ARB = 0x8253
  HALF_APPLE = 0x140B
  HALF_BIAS_NEGATE_NV = 0x853B
  HALF_BIAS_NORMAL_NV = 0x853A
  HALF_BIT_ATI = 0x00000008
  HALF_FLOAT = 0x140B
  HALF_FLOAT_ARB = 0x140B
  HALF_FLOAT_NV = 0x140B
  HARDLIGHT_NV = 0x929B
  HARDMIX_NV = 0x92A9
  HIGH_FLOAT = 0x8DF2
  HIGH_INT = 0x8DF5
  HILO16_NV = 0x86F8
  HILO8_NV = 0x885E
  HILO_NV = 0x86F4
  HISTOGRAM_ALPHA_SIZE_EXT = 0x802B
  HISTOGRAM_BLUE_SIZE_EXT = 0x802A
  HISTOGRAM_EXT = 0x8024
  HISTOGRAM_FORMAT_EXT = 0x8027
  HISTOGRAM_GREEN_SIZE_EXT = 0x8029
  HISTOGRAM_LUMINANCE_SIZE_EXT = 0x802C
  HISTOGRAM_RED_SIZE_EXT = 0x8028
  HISTOGRAM_SINK_EXT = 0x802D
  HISTOGRAM_WIDTH_EXT = 0x8026
  HI_BIAS_NV = 0x8714
  HI_SCALE_NV = 0x870E
  HORIZONTAL_LINE_TO_NV = 0x06
  HSL_COLOR_NV = 0x92AF
  HSL_HUE_NV = 0x92AD
  HSL_LUMINOSITY_NV = 0x92B0
  HSL_SATURATION_NV = 0x92AE
  IDENTITY_NV = 0x862A
  IGNORE_BORDER_HP = 0x8150
  IMAGE_1D = 0x904C
  IMAGE_1D_ARRAY = 0x9052
  IMAGE_1D_ARRAY_EXT = 0x9052
  IMAGE_1D_EXT = 0x904C
  IMAGE_2D = 0x904D
  IMAGE_2D_ARRAY = 0x9053
  IMAGE_2D_ARRAY_EXT = 0x9053
  IMAGE_2D_EXT = 0x904D
  IMAGE_2D_MULTISAMPLE = 0x9055
  IMAGE_2D_MULTISAMPLE_ARRAY = 0x9056
  IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 0x9056
  IMAGE_2D_MULTISAMPLE_EXT = 0x9055
  IMAGE_2D_RECT = 0x904F
  IMAGE_2D_RECT_EXT = 0x904F
  IMAGE_3D = 0x904E
  IMAGE_3D_EXT = 0x904E
  IMAGE_BINDING_ACCESS = 0x8F3E
  IMAGE_BINDING_ACCESS_EXT = 0x8F3E
  IMAGE_BINDING_FORMAT = 0x906E
  IMAGE_BINDING_FORMAT_EXT = 0x906E
  IMAGE_BINDING_LAYER = 0x8F3D
  IMAGE_BINDING_LAYERED = 0x8F3C
  IMAGE_BINDING_LAYERED_EXT = 0x8F3C
  IMAGE_BINDING_LAYER_EXT = 0x8F3D
  IMAGE_BINDING_LEVEL = 0x8F3B
  IMAGE_BINDING_LEVEL_EXT = 0x8F3B
  IMAGE_BINDING_NAME = 0x8F3A
  IMAGE_BINDING_NAME_EXT = 0x8F3A
  IMAGE_BUFFER = 0x9051
  IMAGE_BUFFER_EXT = 0x9051
  IMAGE_CLASS_10_10_10_2 = 0x82C3
  IMAGE_CLASS_11_11_10 = 0x82C2
  IMAGE_CLASS_1_X_16 = 0x82BE
  IMAGE_CLASS_1_X_32 = 0x82BB
  IMAGE_CLASS_1_X_8 = 0x82C1
  IMAGE_CLASS_2_X_16 = 0x82BD
  IMAGE_CLASS_2_X_32 = 0x82BA
  IMAGE_CLASS_2_X_8 = 0x82C0
  IMAGE_CLASS_4_X_16 = 0x82BC
  IMAGE_CLASS_4_X_32 = 0x82B9
  IMAGE_CLASS_4_X_8 = 0x82BF
  IMAGE_COMPATIBILITY_CLASS = 0x82A8
  IMAGE_CUBE = 0x9050
  IMAGE_CUBE_EXT = 0x9050
  IMAGE_CUBE_MAP_ARRAY = 0x9054
  IMAGE_CUBE_MAP_ARRAY_EXT = 0x9054
  IMAGE_CUBIC_WEIGHT_HP = 0x815E
  IMAGE_FORMAT_COMPATIBILITY_BY_CLASS = 0x90C9
  IMAGE_FORMAT_COMPATIBILITY_BY_SIZE = 0x90C8
  IMAGE_FORMAT_COMPATIBILITY_TYPE = 0x90C7
  IMAGE_MAG_FILTER_HP = 0x815C
  IMAGE_MIN_FILTER_HP = 0x815D
  IMAGE_PIXEL_FORMAT = 0x82A9
  IMAGE_PIXEL_TYPE = 0x82AA
  IMAGE_ROTATE_ANGLE_HP = 0x8159
  IMAGE_ROTATE_ORIGIN_X_HP = 0x815A
  IMAGE_ROTATE_ORIGIN_Y_HP = 0x815B
  IMAGE_SCALE_X_HP = 0x8155
  IMAGE_SCALE_Y_HP = 0x8156
  IMAGE_TEXEL_SIZE = 0x82A7
  IMAGE_TRANSFORM_2D_HP = 0x8161
  IMAGE_TRANSLATE_X_HP = 0x8157
  IMAGE_TRANSLATE_Y_HP = 0x8158
  IMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9B
  IMPLEMENTATION_COLOR_READ_FORMAT_OES = 0x8B9B
  IMPLEMENTATION_COLOR_READ_TYPE = 0x8B9A
  IMPLEMENTATION_COLOR_READ_TYPE_OES = 0x8B9A
  INCR = 0x1E02
  INCR_WRAP = 0x8507
  INCR_WRAP_EXT = 0x8507
  INDEX_ARRAY_ADDRESS_NV = 0x8F24
  INDEX_ARRAY_BUFFER_BINDING_ARB = 0x8899
  INDEX_ARRAY_COUNT_EXT = 0x8087
  INDEX_ARRAY_EXT = 0x8077
  INDEX_ARRAY_LENGTH_NV = 0x8F2E
  INDEX_ARRAY_LIST_IBM = 103073
  INDEX_ARRAY_LIST_STRIDE_IBM = 103083
  INDEX_ARRAY_POINTER_EXT = 0x8091
  INDEX_ARRAY_STRIDE_EXT = 0x8086
  INDEX_ARRAY_TYPE_EXT = 0x8085
  INDEX_BIT_PGI = 0x00080000
  INDEX_MATERIAL_EXT = 0x81B8
  INDEX_MATERIAL_FACE_EXT = 0x81BA
  INDEX_MATERIAL_PARAMETER_EXT = 0x81B9
  INDEX_TEST_EXT = 0x81B5
  INDEX_TEST_FUNC_EXT = 0x81B6
  INDEX_TEST_REF_EXT = 0x81B7
  INFO_LOG_LENGTH = 0x8B84
  INNOCENT_CONTEXT_RESET_ARB = 0x8254
  INSTRUMENT_BUFFER_POINTER_SGIX = 0x8180
  INSTRUMENT_MEASUREMENTS_SGIX = 0x8181
  INT = 0x1404
  INT16_NV = 0x8FE4
  INT16_VEC2_NV = 0x8FE5
  INT16_VEC3_NV = 0x8FE6
  INT16_VEC4_NV = 0x8FE7
  INT64_NV = 0x140E
  INT64_VEC2_NV = 0x8FE9
  INT64_VEC3_NV = 0x8FEA
  INT64_VEC4_NV = 0x8FEB
  INT8_NV = 0x8FE0
  INT8_VEC2_NV = 0x8FE1
  INT8_VEC3_NV = 0x8FE2
  INT8_VEC4_NV = 0x8FE3
  INTENSITY12_EXT = 0x804C
  INTENSITY16F_ARB = 0x881D
  INTENSITY16I_EXT = 0x8D8B
  INTENSITY16UI_EXT = 0x8D79
  INTENSITY16_EXT = 0x804D
  INTENSITY16_SNORM = 0x901B
  INTENSITY32F_ARB = 0x8817
  INTENSITY32I_EXT = 0x8D85
  INTENSITY32UI_EXT = 0x8D73
  INTENSITY4_EXT = 0x804A
  INTENSITY8I_EXT = 0x8D91
  INTENSITY8UI_EXT = 0x8D7F
  INTENSITY8_EXT = 0x804B
  INTENSITY8_SNORM = 0x9017
  INTENSITY_EXT = 0x8049
  INTENSITY_FLOAT16_APPLE = 0x881D
  INTENSITY_FLOAT16_ATI = 0x881D
  INTENSITY_FLOAT32_APPLE = 0x8817
  INTENSITY_FLOAT32_ATI = 0x8817
  INTENSITY_SNORM = 0x9013
  INTERLACE_OML = 0x8980
  INTERLACE_READ_INGR = 0x8568
  INTERLACE_READ_OML = 0x8981
  INTERLACE_SGIX = 0x8094
  INTERLEAVED_ATTRIBS = 0x8C8C
  INTERLEAVED_ATTRIBS_EXT = 0x8C8C
  INTERLEAVED_ATTRIBS_NV = 0x8C8C
  INTERNALFORMAT_ALPHA_SIZE = 0x8274
  INTERNALFORMAT_ALPHA_TYPE = 0x827B
  INTERNALFORMAT_BLUE_SIZE = 0x8273
  INTERNALFORMAT_BLUE_TYPE = 0x827A
  INTERNALFORMAT_DEPTH_SIZE = 0x8275
  INTERNALFORMAT_DEPTH_TYPE = 0x827C
  INTERNALFORMAT_GREEN_SIZE = 0x8272
  INTERNALFORMAT_GREEN_TYPE = 0x8279
  INTERNALFORMAT_PREFERRED = 0x8270
  INTERNALFORMAT_RED_SIZE = 0x8271
  INTERNALFORMAT_RED_TYPE = 0x8278
  INTERNALFORMAT_SHARED_SIZE = 0x8277
  INTERNALFORMAT_STENCIL_SIZE = 0x8276
  INTERNALFORMAT_STENCIL_TYPE = 0x827D
  INTERNALFORMAT_SUPPORTED = 0x826F
  INTERPOLATE_ARB = 0x8575
  INTERPOLATE_EXT = 0x8575
  INT_2_10_10_10_REV = 0x8D9F
  INT_IMAGE_1D = 0x9057
  INT_IMAGE_1D_ARRAY = 0x905D
  INT_IMAGE_1D_ARRAY_EXT = 0x905D
  INT_IMAGE_1D_EXT = 0x9057
  INT_IMAGE_2D = 0x9058
  INT_IMAGE_2D_ARRAY = 0x905E
  INT_IMAGE_2D_ARRAY_EXT = 0x905E
  INT_IMAGE_2D_EXT = 0x9058
  INT_IMAGE_2D_MULTISAMPLE = 0x9060
  INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x9061
  INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 0x9061
  INT_IMAGE_2D_MULTISAMPLE_EXT = 0x9060
  INT_IMAGE_2D_RECT = 0x905A
  INT_IMAGE_2D_RECT_EXT = 0x905A
  INT_IMAGE_3D = 0x9059
  INT_IMAGE_3D_EXT = 0x9059
  INT_IMAGE_BUFFER = 0x905C
  INT_IMAGE_BUFFER_EXT = 0x905C
  INT_IMAGE_CUBE = 0x905B
  INT_IMAGE_CUBE_EXT = 0x905B
  INT_IMAGE_CUBE_MAP_ARRAY = 0x905F
  INT_IMAGE_CUBE_MAP_ARRAY_EXT = 0x905F
  INT_SAMPLER_1D = 0x8DC9
  INT_SAMPLER_1D_ARRAY = 0x8DCE
  INT_SAMPLER_1D_ARRAY_EXT = 0x8DCE
  INT_SAMPLER_1D_EXT = 0x8DC9
  INT_SAMPLER_2D = 0x8DCA
  INT_SAMPLER_2D_ARRAY = 0x8DCF
  INT_SAMPLER_2D_ARRAY_EXT = 0x8DCF
  INT_SAMPLER_2D_EXT = 0x8DCA
  INT_SAMPLER_2D_MULTISAMPLE = 0x9109
  INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910C
  INT_SAMPLER_2D_RECT = 0x8DCD
  INT_SAMPLER_2D_RECT_EXT = 0x8DCD
  INT_SAMPLER_3D = 0x8DCB
  INT_SAMPLER_3D_EXT = 0x8DCB
  INT_SAMPLER_BUFFER = 0x8DD0
  INT_SAMPLER_BUFFER_AMD = 0x9002
  INT_SAMPLER_BUFFER_EXT = 0x8DD0
  INT_SAMPLER_CUBE = 0x8DCC
  INT_SAMPLER_CUBE_EXT = 0x8DCC
  INT_SAMPLER_CUBE_MAP_ARRAY = 0x900E
  INT_SAMPLER_CUBE_MAP_ARRAY_ARB = 0x900E
  INT_SAMPLER_RENDERBUFFER_NV = 0x8E57
  INT_VEC2 = 0x8B53
  INT_VEC2_ARB = 0x8B53
  INT_VEC3 = 0x8B54
  INT_VEC3_ARB = 0x8B54
  INT_VEC4 = 0x8B55
  INT_VEC4_ARB = 0x8B55
  INVALID_ENUM = 0x0500
  INVALID_FRAMEBUFFER_OPERATION = 0x0506
  INVALID_FRAMEBUFFER_OPERATION_EXT = 0x0506
  INVALID_INDEX = 0xFFFFFFFF
  INVALID_OPERATION = 0x0502
  INVALID_VALUE = 0x0501
  INVARIANT_DATATYPE_EXT = 0x87EB
  INVARIANT_EXT = 0x87C2
  INVARIANT_VALUE_EXT = 0x87EA
  INVERSE_NV = 0x862B
  INVERSE_TRANSPOSE_NV = 0x862D
  INVERT = 0x150A
  INVERTED_SCREEN_W_REND = 0x8491
  INVERT_OVG_NV = 0x92B4
  INVERT_RGB_NV = 0x92A3
  IR_INSTRUMENT1_SGIX = 0x817F
  ISOLINES = 0x8E7A
  IS_PER_PATCH = 0x92E7
  IS_ROW_MAJOR = 0x9300
  ITALIC_BIT_NV = 0x02
  IUI_N3F_V2F_EXT = 0x81AF
  IUI_N3F_V3F_EXT = 0x81B0
  IUI_V2F_EXT = 0x81AD
  IUI_V3F_EXT = 0x81AE
  KEEP = 0x1E00
  LARGE_CCW_ARC_TO_NV = 0x16
  LARGE_CW_ARC_TO_NV = 0x18
  LAST_VERTEX_CONVENTION = 0x8E4E
  LAST_VERTEX_CONVENTION_EXT = 0x8E4E
  LAST_VIDEO_CAPTURE_STATUS_NV = 0x9027
  LAYER_NV = 0x8DAA
  LAYER_PROVOKING_VERTEX = 0x825E
  LAYOUT_DEFAULT_INTEL = 0
  LAYOUT_LINEAR_CPU_CACHED_INTEL = 2
  LAYOUT_LINEAR_INTEL = 1
  LEFT = 0x0406
  LEQUAL = 0x0203
  LERP_ATI = 0x8969
  LESS = 0x0201
  LIGHTEN_NV = 0x9298
  LIGHT_ENV_MODE_SGIX = 0x8407
  LIGHT_MODEL_COLOR_CONTROL_EXT = 0x81F8
  LIGHT_MODEL_SPECULAR_VECTOR_APPLE = 0x85B0
  LINE = 0x1B01
  LINEAR = 0x2601
  LINEARBURN_NV = 0x92A5
  LINEARDODGE_NV = 0x92A4
  LINEARLIGHT_NV = 0x92A7
  LINEAR_CLIPMAP_LINEAR_SGIX = 0x8170
  LINEAR_CLIPMAP_NEAREST_SGIX = 0x844F
  LINEAR_DETAIL_ALPHA_SGIS = 0x8098
  LINEAR_DETAIL_COLOR_SGIS = 0x8099
  LINEAR_DETAIL_SGIS = 0x8097
  LINEAR_MIPMAP_LINEAR = 0x2703
  LINEAR_MIPMAP_NEAREST = 0x2701
  LINEAR_SHARPEN_ALPHA_SGIS = 0x80AE
  LINEAR_SHARPEN_COLOR_SGIS = 0x80AF
  LINEAR_SHARPEN_SGIS = 0x80AD
  LINES = 0x0001
  LINES_ADJACENCY = 0x000A
  LINES_ADJACENCY_ARB = 0x000A
  LINES_ADJACENCY_EXT = 0x000A
  LINE_LOOP = 0x0002
  LINE_SMOOTH = 0x0B20
  LINE_SMOOTH_HINT = 0x0C52
  LINE_STRIP = 0x0003
  LINE_STRIP_ADJACENCY = 0x000B
  LINE_STRIP_ADJACENCY_ARB = 0x000B
  LINE_STRIP_ADJACENCY_EXT = 0x000B
  LINE_TO_NV = 0x04
  LINE_WIDTH = 0x0B21
  LINE_WIDTH_GRANULARITY = 0x0B23
  LINE_WIDTH_RANGE = 0x0B22
  LINK_STATUS = 0x8B82
  LIST_PRIORITY_SGIX = 0x8182
  LOCAL_CONSTANT_DATATYPE_EXT = 0x87ED
  LOCAL_CONSTANT_EXT = 0x87C3
  LOCAL_CONSTANT_VALUE_EXT = 0x87EC
  LOCAL_EXT = 0x87C4
  LOCATION = 0x930E
  LOCATION_COMPONENT = 0x934A
  LOCATION_INDEX = 0x930F
  LOGIC_OP_MODE = 0x0BF0
  LOSE_CONTEXT_ON_RESET_ARB = 0x8252
  LOWER_LEFT = 0x8CA1
  LOW_FLOAT = 0x8DF0
  LOW_INT = 0x8DF3
  LO_BIAS_NV = 0x8715
  LO_SCALE_NV = 0x870F
  LUMINANCE12_ALPHA12_EXT = 0x8047
  LUMINANCE12_ALPHA4_EXT = 0x8046
  LUMINANCE12_EXT = 0x8041
  LUMINANCE16F_ARB = 0x881E
  LUMINANCE16I_EXT = 0x8D8C
  LUMINANCE16UI_EXT = 0x8D7A
  LUMINANCE16_ALPHA16_EXT = 0x8048
  LUMINANCE16_ALPHA16_SNORM = 0x901A
  LUMINANCE16_EXT = 0x8042
  LUMINANCE16_SNORM = 0x9019
  LUMINANCE32F_ARB = 0x8818
  LUMINANCE32I_EXT = 0x8D86
  LUMINANCE32UI_EXT = 0x8D74
  LUMINANCE4_ALPHA4_EXT = 0x8043
  LUMINANCE4_EXT = 0x803F
  LUMINANCE6_ALPHA2_EXT = 0x8044
  LUMINANCE8I_EXT = 0x8D92
  LUMINANCE8UI_EXT = 0x8D80
  LUMINANCE8_ALPHA8_EXT = 0x8045
  LUMINANCE8_ALPHA8_SNORM = 0x9016
  LUMINANCE8_EXT = 0x8040
  LUMINANCE8_SNORM = 0x9015
  LUMINANCE_ALPHA16F_ARB = 0x881F
  LUMINANCE_ALPHA16I_EXT = 0x8D8D
  LUMINANCE_ALPHA16UI_EXT = 0x8D7B
  LUMINANCE_ALPHA32F_ARB = 0x8819
  LUMINANCE_ALPHA32I_EXT = 0x8D87
  LUMINANCE_ALPHA32UI_EXT = 0x8D75
  LUMINANCE_ALPHA8I_EXT = 0x8D93
  LUMINANCE_ALPHA8UI_EXT = 0x8D81
  LUMINANCE_ALPHA_FLOAT16_APPLE = 0x881F
  LUMINANCE_ALPHA_FLOAT16_ATI = 0x881F
  LUMINANCE_ALPHA_FLOAT32_APPLE = 0x8819
  LUMINANCE_ALPHA_FLOAT32_ATI = 0x8819
  LUMINANCE_ALPHA_INTEGER_EXT = 0x8D9D
  LUMINANCE_ALPHA_SNORM = 0x9012
  LUMINANCE_FLOAT16_APPLE = 0x881E
  LUMINANCE_FLOAT16_ATI = 0x881E
  LUMINANCE_FLOAT32_APPLE = 0x8818
  LUMINANCE_FLOAT32_ATI = 0x8818
  LUMINANCE_INTEGER_EXT = 0x8D9C
  LUMINANCE_SNORM = 0x9011
  MAD_ATI = 0x8968
  MAGNITUDE_BIAS_NV = 0x8718
  MAGNITUDE_SCALE_NV = 0x8712
  MAJOR_VERSION = 0x821B
  MANUAL_GENERATE_MIPMAP = 0x8294
  MAP1_BINORMAL_EXT = 0x8446
  MAP1_TANGENT_EXT = 0x8444
  MAP1_VERTEX_ATTRIB0_4_NV = 0x8660
  MAP1_VERTEX_ATTRIB10_4_NV = 0x866A
  MAP1_VERTEX_ATTRIB11_4_NV = 0x866B
  MAP1_VERTEX_ATTRIB12_4_NV = 0x866C
  MAP1_VERTEX_ATTRIB13_4_NV = 0x866D
  MAP1_VERTEX_ATTRIB14_4_NV = 0x866E
  MAP1_VERTEX_ATTRIB15_4_NV = 0x866F
  MAP1_VERTEX_ATTRIB1_4_NV = 0x8661
  MAP1_VERTEX_ATTRIB2_4_NV = 0x8662
  MAP1_VERTEX_ATTRIB3_4_NV = 0x8663
  MAP1_VERTEX_ATTRIB4_4_NV = 0x8664
  MAP1_VERTEX_ATTRIB5_4_NV = 0x8665
  MAP1_VERTEX_ATTRIB6_4_NV = 0x8666
  MAP1_VERTEX_ATTRIB7_4_NV = 0x8667
  MAP1_VERTEX_ATTRIB8_4_NV = 0x8668
  MAP1_VERTEX_ATTRIB9_4_NV = 0x8669
  MAP2_BINORMAL_EXT = 0x8447
  MAP2_TANGENT_EXT = 0x8445
  MAP2_VERTEX_ATTRIB0_4_NV = 0x8670
  MAP2_VERTEX_ATTRIB10_4_NV = 0x867A
  MAP2_VERTEX_ATTRIB11_4_NV = 0x867B
  MAP2_VERTEX_ATTRIB12_4_NV = 0x867C
  MAP2_VERTEX_ATTRIB13_4_NV = 0x867D
  MAP2_VERTEX_ATTRIB14_4_NV = 0x867E
  MAP2_VERTEX_ATTRIB15_4_NV = 0x867F
  MAP2_VERTEX_ATTRIB1_4_NV = 0x8671
  MAP2_VERTEX_ATTRIB2_4_NV = 0x8672
  MAP2_VERTEX_ATTRIB3_4_NV = 0x8673
  MAP2_VERTEX_ATTRIB4_4_NV = 0x8674
  MAP2_VERTEX_ATTRIB5_4_NV = 0x8675
  MAP2_VERTEX_ATTRIB6_4_NV = 0x8676
  MAP2_VERTEX_ATTRIB7_4_NV = 0x8677
  MAP2_VERTEX_ATTRIB8_4_NV = 0x8678
  MAP2_VERTEX_ATTRIB9_4_NV = 0x8679
  MAP_ATTRIB_U_ORDER_NV = 0x86C3
  MAP_ATTRIB_V_ORDER_NV = 0x86C4
  MAP_COHERENT_BIT = 0x0080
  MAP_FLUSH_EXPLICIT_BIT = 0x0010
  MAP_INVALIDATE_BUFFER_BIT = 0x0008
  MAP_INVALIDATE_RANGE_BIT = 0x0004
  MAP_PERSISTENT_BIT = 0x0040
  MAP_READ_BIT = 0x0001
  MAP_TESSELLATION_NV = 0x86C2
  MAP_UNSYNCHRONIZED_BIT = 0x0020
  MAP_WRITE_BIT = 0x0002
  MATERIAL_SIDE_HINT_PGI = 0x1A22C
  MATRIX0_ARB = 0x88C0
  MATRIX0_NV = 0x8630
  MATRIX10_ARB = 0x88CA
  MATRIX11_ARB = 0x88CB
  MATRIX12_ARB = 0x88CC
  MATRIX13_ARB = 0x88CD
  MATRIX14_ARB = 0x88CE
  MATRIX15_ARB = 0x88CF
  MATRIX16_ARB = 0x88D0
  MATRIX17_ARB = 0x88D1
  MATRIX18_ARB = 0x88D2
  MATRIX19_ARB = 0x88D3
  MATRIX1_ARB = 0x88C1
  MATRIX1_NV = 0x8631
  MATRIX20_ARB = 0x88D4
  MATRIX21_ARB = 0x88D5
  MATRIX22_ARB = 0x88D6
  MATRIX23_ARB = 0x88D7
  MATRIX24_ARB = 0x88D8
  MATRIX25_ARB = 0x88D9
  MATRIX26_ARB = 0x88DA
  MATRIX27_ARB = 0x88DB
  MATRIX28_ARB = 0x88DC
  MATRIX29_ARB = 0x88DD
  MATRIX2_ARB = 0x88C2
  MATRIX2_NV = 0x8632
  MATRIX30_ARB = 0x88DE
  MATRIX31_ARB = 0x88DF
  MATRIX3_ARB = 0x88C3
  MATRIX3_NV = 0x8633
  MATRIX4_ARB = 0x88C4
  MATRIX4_NV = 0x8634
  MATRIX5_ARB = 0x88C5
  MATRIX5_NV = 0x8635
  MATRIX6_ARB = 0x88C6
  MATRIX6_NV = 0x8636
  MATRIX7_ARB = 0x88C7
  MATRIX7_NV = 0x8637
  MATRIX8_ARB = 0x88C8
  MATRIX9_ARB = 0x88C9
  MATRIX_EXT = 0x87C0
  MATRIX_INDEX_ARRAY_ARB = 0x8844
  MATRIX_INDEX_ARRAY_POINTER_ARB = 0x8849
  MATRIX_INDEX_ARRAY_SIZE_ARB = 0x8846
  MATRIX_INDEX_ARRAY_STRIDE_ARB = 0x8848
  MATRIX_INDEX_ARRAY_TYPE_ARB = 0x8847
  MATRIX_PALETTE_ARB = 0x8840
  MATRIX_STRIDE = 0x92FF
  MAT_AMBIENT_AND_DIFFUSE_BIT_PGI = 0x00200000
  MAT_AMBIENT_BIT_PGI = 0x00100000
  MAT_COLOR_INDEXES_BIT_PGI = 0x01000000
  MAT_DIFFUSE_BIT_PGI = 0x00400000
  MAT_EMISSION_BIT_PGI = 0x00800000
  MAT_SHININESS_BIT_PGI = 0x02000000
  MAT_SPECULAR_BIT_PGI = 0x04000000
  MAX = 0x8008
  MAX_3D_TEXTURE_SIZE = 0x8073
  MAX_3D_TEXTURE_SIZE_EXT = 0x8073
  MAX_4D_TEXTURE_SIZE_SGIS = 0x8138
  MAX_ACTIVE_LIGHTS_SGIX = 0x8405
  MAX_ARRAY_TEXTURE_LAYERS = 0x88FF
  MAX_ARRAY_TEXTURE_LAYERS_EXT = 0x88FF
  MAX_ASYNC_DRAW_PIXELS_SGIX = 0x8360
  MAX_ASYNC_HISTOGRAM_SGIX = 0x832D
  MAX_ASYNC_READ_PIXELS_SGIX = 0x8361
  MAX_ASYNC_TEX_IMAGE_SGIX = 0x835F
  MAX_ATOMIC_COUNTER_BUFFER_BINDINGS = 0x92DC
  MAX_ATOMIC_COUNTER_BUFFER_SIZE = 0x92D8
  MAX_BINDABLE_UNIFORM_SIZE_EXT = 0x8DED
  MAX_CLIPMAP_DEPTH_SGIX = 0x8177
  MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX = 0x8178
  MAX_CLIP_DISTANCES = 0x0D32
  MAX_COLOR_ATTACHMENTS = 0x8CDF
  MAX_COLOR_ATTACHMENTS_EXT = 0x8CDF
  MAX_COLOR_MATRIX_STACK_DEPTH_SGI = 0x80B3
  MAX_COLOR_TEXTURE_SAMPLES = 0x910E
  MAX_COMBINED_ATOMIC_COUNTERS = 0x92D7
  MAX_COMBINED_ATOMIC_COUNTER_BUFFERS = 0x92D1
  MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = 0x8266
  MAX_COMBINED_DIMENSIONS = 0x8282
  MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 0x8A33
  MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = 0x8A32
  MAX_COMBINED_IMAGE_UNIFORMS = 0x90CF
  MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS = 0x8F39
  MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT = 0x8F39
  MAX_COMBINED_SHADER_OUTPUT_RESOURCES = 0x8F39
  MAX_COMBINED_SHADER_STORAGE_BLOCKS = 0x90DC
  MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E1E
  MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E1F
  MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D
  MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB = 0x8B4D
  MAX_COMBINED_UNIFORM_BLOCKS = 0x8A2E
  MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 0x8A31
  MAX_COMPUTE_ATOMIC_COUNTERS = 0x8265
  MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = 0x8264
  MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB = 0x90EB
  MAX_COMPUTE_FIXED_GROUP_SIZE_ARB = 0x91BF
  MAX_COMPUTE_IMAGE_UNIFORMS = 0x91BD
  MAX_COMPUTE_SHADER_STORAGE_BLOCKS = 0x90DB
  MAX_COMPUTE_SHARED_MEMORY_SIZE = 0x8262
  MAX_COMPUTE_TEXTURE_IMAGE_UNITS = 0x91BC
  MAX_COMPUTE_UNIFORM_BLOCKS = 0x91BB
  MAX_COMPUTE_UNIFORM_COMPONENTS = 0x8263
  MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB = 0x9344
  MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB = 0x9345
  MAX_COMPUTE_WORK_GROUP_COUNT = 0x91BE
  MAX_COMPUTE_WORK_GROUP_INVOCATIONS = 0x90EB
  MAX_COMPUTE_WORK_GROUP_SIZE = 0x91BF
  MAX_CONVOLUTION_HEIGHT_EXT = 0x801B
  MAX_CONVOLUTION_WIDTH_EXT = 0x801A
  MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C
  MAX_CUBE_MAP_TEXTURE_SIZE_ARB = 0x851C
  MAX_CUBE_MAP_TEXTURE_SIZE_EXT = 0x851C
  MAX_DEBUG_GROUP_STACK_DEPTH = 0x826C
  MAX_DEBUG_GROUP_STACK_DEPTH_KHR = 0x826C
  MAX_DEBUG_LOGGED_MESSAGES = 0x9144
  MAX_DEBUG_LOGGED_MESSAGES_AMD = 0x9144
  MAX_DEBUG_LOGGED_MESSAGES_ARB = 0x9144
  MAX_DEBUG_LOGGED_MESSAGES_KHR = 0x9144
  MAX_DEBUG_MESSAGE_LENGTH = 0x9143
  MAX_DEBUG_MESSAGE_LENGTH_AMD = 0x9143
  MAX_DEBUG_MESSAGE_LENGTH_ARB = 0x9143
  MAX_DEBUG_MESSAGE_LENGTH_KHR = 0x9143
  MAX_DEEP_3D_TEXTURE_DEPTH_NV = 0x90D1
  MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV = 0x90D0
  MAX_DEFORMATION_ORDER_SGIX = 0x8197
  MAX_DEPTH = 0x8280
  MAX_DEPTH_TEXTURE_SAMPLES = 0x910F
  MAX_DRAW_BUFFERS = 0x8824
  MAX_DRAW_BUFFERS_ARB = 0x8824
  MAX_DRAW_BUFFERS_ATI = 0x8824
  MAX_DUAL_SOURCE_DRAW_BUFFERS = 0x88FC
  MAX_ELEMENTS_INDICES = 0x80E9
  MAX_ELEMENTS_INDICES_EXT = 0x80E9
  MAX_ELEMENTS_VERTICES = 0x80E8
  MAX_ELEMENTS_VERTICES_EXT = 0x80E8
  MAX_ELEMENT_INDEX = 0x8D6B
  MAX_EXT = 0x8008
  MAX_FOG_FUNC_POINTS_SGIS = 0x812C
  MAX_FRAGMENT_ATOMIC_COUNTERS = 0x92D6
  MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS = 0x92D0
  MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT = 0x8DE3
  MAX_FRAGMENT_IMAGE_UNIFORMS = 0x90CE
  MAX_FRAGMENT_INPUT_COMPONENTS = 0x9125
  MAX_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5C
  MAX_FRAGMENT_INTERPOLATION_OFFSET_NV = 0x8E5C
  MAX_FRAGMENT_LIGHTS_SGIX = 0x8404
  MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV = 0x8868
  MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = 0x90DA
  MAX_FRAGMENT_UNIFORM_BLOCKS = 0x8A2D
  MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8B49
  MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB = 0x8B49
  MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD
  MAX_FRAMEBUFFER_HEIGHT = 0x9316
  MAX_FRAMEBUFFER_LAYERS = 0x9317
  MAX_FRAMEBUFFER_SAMPLES = 0x9318
  MAX_FRAMEBUFFER_WIDTH = 0x9315
  MAX_FRAMEZOOM_FACTOR_SGIX = 0x818D
  MAX_GENERAL_COMBINERS_NV = 0x854D
  MAX_GEOMETRY_ATOMIC_COUNTERS = 0x92D5
  MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS = 0x92CF
  MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT = 0x8DE4
  MAX_GEOMETRY_IMAGE_UNIFORMS = 0x90CD
  MAX_GEOMETRY_INPUT_COMPONENTS = 0x9123
  MAX_GEOMETRY_OUTPUT_COMPONENTS = 0x9124
  MAX_GEOMETRY_OUTPUT_VERTICES = 0x8DE0
  MAX_GEOMETRY_OUTPUT_VERTICES_ARB = 0x8DE0
  MAX_GEOMETRY_OUTPUT_VERTICES_EXT = 0x8DE0
  MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV = 0x8E5A
  MAX_GEOMETRY_SHADER_INVOCATIONS = 0x8E5A
  MAX_GEOMETRY_SHADER_STORAGE_BLOCKS = 0x90D7
  MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = 0x8C29
  MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB = 0x8C29
  MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT = 0x8C29
  MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = 0x8DE1
  MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB = 0x8DE1
  MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT = 0x8DE1
  MAX_GEOMETRY_UNIFORM_BLOCKS = 0x8A2C
  MAX_GEOMETRY_UNIFORM_COMPONENTS = 0x8DDF
  MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB = 0x8DDF
  MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT = 0x8DDF
  MAX_GEOMETRY_VARYING_COMPONENTS_ARB = 0x8DDD
  MAX_GEOMETRY_VARYING_COMPONENTS_EXT = 0x8DDD
  MAX_HEIGHT = 0x827F
  MAX_IMAGE_SAMPLES = 0x906D
  MAX_IMAGE_SAMPLES_EXT = 0x906D
  MAX_IMAGE_UNITS = 0x8F38
  MAX_IMAGE_UNITS_EXT = 0x8F38
  MAX_INTEGER_SAMPLES = 0x9110
  MAX_LABEL_LENGTH = 0x82E8
  MAX_LABEL_LENGTH_KHR = 0x82E8
  MAX_LAYERS = 0x8281
  MAX_MAP_TESSELLATION_NV = 0x86D6
  MAX_MATRIX_PALETTE_STACK_DEPTH_ARB = 0x8841
  MAX_MULTISAMPLE_COVERAGE_MODES_NV = 0x8E11
  MAX_NAME_LENGTH = 0x92F6
  MAX_NUM_ACTIVE_VARIABLES = 0x92F7
  MAX_NUM_COMPATIBLE_SUBROUTINES = 0x92F8
  MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87CA
  MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT = 0x87CD
  MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT = 0x87CE
  MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87CC
  MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT = 0x87CB
  MAX_PALETTE_MATRICES_ARB = 0x8842
  MAX_PATCH_VERTICES = 0x8E7D
  MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 0x8337
  MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI = 0x87F1
  MAX_PROGRAM_ADDRESS_REGISTERS_ARB = 0x88B1
  MAX_PROGRAM_ALU_INSTRUCTIONS_ARB = 0x880B
  MAX_PROGRAM_ATTRIBS_ARB = 0x88AD
  MAX_PROGRAM_ATTRIB_COMPONENTS_NV = 0x8908
  MAX_PROGRAM_CALL_DEPTH_NV = 0x88F5
  MAX_PROGRAM_ENV_PARAMETERS_ARB = 0x88B5
  MAX_PROGRAM_EXEC_INSTRUCTIONS_NV = 0x88F4
  MAX_PROGRAM_GENERIC_ATTRIBS_NV = 0x8DA5
  MAX_PROGRAM_GENERIC_RESULTS_NV = 0x8DA6
  MAX_PROGRAM_IF_DEPTH_NV = 0x88F6
  MAX_PROGRAM_INSTRUCTIONS_ARB = 0x88A1
  MAX_PROGRAM_LOCAL_PARAMETERS_ARB = 0x88B4
  MAX_PROGRAM_LOOP_COUNT_NV = 0x88F8
  MAX_PROGRAM_LOOP_DEPTH_NV = 0x88F7
  MAX_PROGRAM_MATRICES_ARB = 0x862F
  MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB = 0x862E
  MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 0x88B3
  MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 0x880E
  MAX_PROGRAM_NATIVE_ATTRIBS_ARB = 0x88AF
  MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 0x88A3
  MAX_PROGRAM_NATIVE_PARAMETERS_ARB = 0x88AB
  MAX_PROGRAM_NATIVE_TEMPORARIES_ARB = 0x88A7
  MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 0x8810
  MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 0x880F
  MAX_PROGRAM_OUTPUT_VERTICES_NV = 0x8C27
  MAX_PROGRAM_PARAMETERS_ARB = 0x88A9
  MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV = 0x8DA0
  MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV = 0x8DA1
  MAX_PROGRAM_PATCH_ATTRIBS_NV = 0x86D8
  MAX_PROGRAM_RESULT_COMPONENTS_NV = 0x8909
  MAX_PROGRAM_SUBROUTINE_NUM_NV = 0x8F45
  MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV = 0x8F44
  MAX_PROGRAM_TEMPORARIES_ARB = 0x88A5
  MAX_PROGRAM_TEXEL_OFFSET = 0x8905
  MAX_PROGRAM_TEXEL_OFFSET_EXT = 0x8905
  MAX_PROGRAM_TEXEL_OFFSET_NV = 0x8905
  MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB = 0x8F9F
  MAX_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5F
  MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = 0x8E5F
  MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV = 0x8E5F
  MAX_PROGRAM_TEX_INDIRECTIONS_ARB = 0x880D
  MAX_PROGRAM_TEX_INSTRUCTIONS_ARB = 0x880C
  MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV = 0x8C28
  MAX_RATIONAL_EVAL_ORDER_NV = 0x86D7
  MAX_RECTANGLE_TEXTURE_SIZE = 0x84F8
  MAX_RECTANGLE_TEXTURE_SIZE_ARB = 0x84F8
  MAX_RECTANGLE_TEXTURE_SIZE_NV = 0x84F8
  MAX_RENDERBUFFER_SIZE = 0x84E8
  MAX_RENDERBUFFER_SIZE_EXT = 0x84E8
  MAX_SAMPLES = 0x8D57
  MAX_SAMPLES_EXT = 0x8D57
  MAX_SAMPLE_MASK_WORDS = 0x8E59
  MAX_SAMPLE_MASK_WORDS_NV = 0x8E59
  MAX_SERVER_WAIT_TIMEOUT = 0x9111
  MAX_SHADER_BUFFER_ADDRESS_NV = 0x8F35
  MAX_SHADER_STORAGE_BLOCK_SIZE = 0x90DE
  MAX_SHADER_STORAGE_BUFFER_BINDINGS = 0x90DD
  MAX_SHININESS_NV = 0x8504
  MAX_SPARSE_3D_TEXTURE_SIZE_AMD = 0x9199
  MAX_SPARSE_3D_TEXTURE_SIZE_ARB = 0x9199
  MAX_SPARSE_ARRAY_TEXTURE_LAYERS = 0x919A
  MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB = 0x919A
  MAX_SPARSE_TEXTURE_SIZE_AMD = 0x9198
  MAX_SPARSE_TEXTURE_SIZE_ARB = 0x9198
  MAX_SPOT_EXPONENT_NV = 0x8505
  MAX_SUBROUTINES = 0x8DE7
  MAX_SUBROUTINE_UNIFORM_LOCATIONS = 0x8DE8
  MAX_TESS_CONTROL_ATOMIC_COUNTERS = 0x92D3
  MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS = 0x92CD
  MAX_TESS_CONTROL_IMAGE_UNIFORMS = 0x90CB
  MAX_TESS_CONTROL_INPUT_COMPONENTS = 0x886C
  MAX_TESS_CONTROL_OUTPUT_COMPONENTS = 0x8E83
  MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = 0x90D8
  MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = 0x8E81
  MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = 0x8E85
  MAX_TESS_CONTROL_UNIFORM_BLOCKS = 0x8E89
  MAX_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E7F
  MAX_TESS_EVALUATION_ATOMIC_COUNTERS = 0x92D4
  MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS = 0x92CE
  MAX_TESS_EVALUATION_IMAGE_UNIFORMS = 0x90CC
  MAX_TESS_EVALUATION_INPUT_COMPONENTS = 0x886D
  MAX_TESS_EVALUATION_OUTPUT_COMPONENTS = 0x8E86
  MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS = 0x90D9
  MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = 0x8E82
  MAX_TESS_EVALUATION_UNIFORM_BLOCKS = 0x8E8A
  MAX_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E80
  MAX_TESS_GEN_LEVEL = 0x8E7E
  MAX_TESS_PATCH_COMPONENTS = 0x8E84
  MAX_TEXTURE_BUFFER_SIZE = 0x8C2B
  MAX_TEXTURE_BUFFER_SIZE_ARB = 0x8C2B
  MAX_TEXTURE_BUFFER_SIZE_EXT = 0x8C2B
  MAX_TEXTURE_COORDS_ARB = 0x8871
  MAX_TEXTURE_COORDS_NV = 0x8871
  MAX_TEXTURE_IMAGE_UNITS = 0x8872
  MAX_TEXTURE_IMAGE_UNITS_ARB = 0x8872
  MAX_TEXTURE_IMAGE_UNITS_NV = 0x8872
  MAX_TEXTURE_LOD_BIAS = 0x84FD
  MAX_TEXTURE_LOD_BIAS_EXT = 0x84FD
  MAX_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FF
  MAX_TEXTURE_SIZE = 0x0D33
  MAX_TEXTURE_UNITS_ARB = 0x84E2
  MAX_TRACK_MATRICES_NV = 0x862F
  MAX_TRACK_MATRIX_STACK_DEPTH_NV = 0x862E
  MAX_TRANSFORM_FEEDBACK_BUFFERS = 0x8E70
  MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 0x8C8A
  MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT = 0x8C8A
  MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV = 0x8C8A
  MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 0x8C8B
  MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT = 0x8C8B
  MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV = 0x8C8B
  MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 0x8C80
  MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT = 0x8C80
  MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV = 0x8C80
  MAX_UNIFORM_BLOCK_SIZE = 0x8A30
  MAX_UNIFORM_BUFFER_BINDINGS = 0x8A2F
  MAX_UNIFORM_LOCATIONS = 0x826E
  MAX_VARYING_COMPONENTS = 0x8B4B
  MAX_VARYING_COMPONENTS_EXT = 0x8B4B
  MAX_VARYING_FLOATS = 0x8B4B
  MAX_VARYING_FLOATS_ARB = 0x8B4B
  MAX_VARYING_VECTORS = 0x8DFC
  MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV = 0x8520
  MAX_VERTEX_ATOMIC_COUNTERS = 0x92D2
  MAX_VERTEX_ATOMIC_COUNTER_BUFFERS = 0x92CC
  MAX_VERTEX_ATTRIBS = 0x8869
  MAX_VERTEX_ATTRIBS_ARB = 0x8869
  MAX_VERTEX_ATTRIB_BINDINGS = 0x82DA
  MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D9
  MAX_VERTEX_BINDABLE_UNIFORMS_EXT = 0x8DE2
  MAX_VERTEX_HINT_PGI = 0x1A22D
  MAX_VERTEX_IMAGE_UNIFORMS = 0x90CA
  MAX_VERTEX_OUTPUT_COMPONENTS = 0x9122
  MAX_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87C5
  MAX_VERTEX_SHADER_INVARIANTS_EXT = 0x87C7
  MAX_VERTEX_SHADER_LOCALS_EXT = 0x87C9
  MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87C8
  MAX_VERTEX_SHADER_STORAGE_BLOCKS = 0x90D6
  MAX_VERTEX_SHADER_VARIANTS_EXT = 0x87C6
  MAX_VERTEX_STREAMS = 0x8E71
  MAX_VERTEX_STREAMS_ATI = 0x876B
  MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C
  MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB = 0x8B4C
  MAX_VERTEX_UNIFORM_BLOCKS = 0x8A2B
  MAX_VERTEX_UNIFORM_COMPONENTS = 0x8B4A
  MAX_VERTEX_UNIFORM_COMPONENTS_ARB = 0x8B4A
  MAX_VERTEX_UNIFORM_VECTORS = 0x8DFB
  MAX_VERTEX_UNITS_ARB = 0x86A4
  MAX_VERTEX_VARYING_COMPONENTS_ARB = 0x8DDE
  MAX_VERTEX_VARYING_COMPONENTS_EXT = 0x8DDE
  MAX_VIEWPORTS = 0x825B
  MAX_VIEWPORT_DIMS = 0x0D3A
  MAX_WIDTH = 0x827E
  MEDIUM_FLOAT = 0x8DF1
  MEDIUM_INT = 0x8DF4
  MIN = 0x8007
  MINMAX_EXT = 0x802E
  MINMAX_FORMAT_EXT = 0x802F
  MINMAX_SINK_EXT = 0x8030
  MINOR_VERSION = 0x821C
  MINUS_CLAMPED_NV = 0x92B3
  MINUS_NV = 0x929F
  MIN_EXT = 0x8007
  MIN_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5B
  MIN_FRAGMENT_INTERPOLATION_OFFSET_NV = 0x8E5B
  MIN_LOD_WARNING_AMD = 0x919C
  MIN_MAP_BUFFER_ALIGNMENT = 0x90BC
  MIN_PROGRAM_TEXEL_OFFSET = 0x8904
  MIN_PROGRAM_TEXEL_OFFSET_EXT = 0x8904
  MIN_PROGRAM_TEXEL_OFFSET_NV = 0x8904
  MIN_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5E
  MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = 0x8E5E
  MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV = 0x8E5E
  MIN_SAMPLE_SHADING_VALUE = 0x8C37
  MIN_SAMPLE_SHADING_VALUE_ARB = 0x8C37
  MIN_SPARSE_LEVEL_AMD = 0x919B
  MIN_SPARSE_LEVEL_ARB = 0x919B
  MIPMAP = 0x8293
  MIRRORED_REPEAT = 0x8370
  MIRRORED_REPEAT_ARB = 0x8370
  MIRRORED_REPEAT_IBM = 0x8370
  MIRROR_CLAMP_ATI = 0x8742
  MIRROR_CLAMP_EXT = 0x8742
  MIRROR_CLAMP_TO_BORDER_EXT = 0x8912
  MIRROR_CLAMP_TO_EDGE = 0x8743
  MIRROR_CLAMP_TO_EDGE_ATI = 0x8743
  MIRROR_CLAMP_TO_EDGE_EXT = 0x8743
  MITER_REVERT_NV = 0x90A7
  MITER_TRUNCATE_NV = 0x90A8
  MODELVIEW0_ARB = 0x1700
  MODELVIEW0_EXT = 0x1700
  MODELVIEW0_MATRIX_EXT = 0x0BA6
  MODELVIEW0_STACK_DEPTH_EXT = 0x0BA3
  MODELVIEW10_ARB = 0x872A
  MODELVIEW11_ARB = 0x872B
  MODELVIEW12_ARB = 0x872C
  MODELVIEW13_ARB = 0x872D
  MODELVIEW14_ARB = 0x872E
  MODELVIEW15_ARB = 0x872F
  MODELVIEW16_ARB = 0x8730
  MODELVIEW17_ARB = 0x8731
  MODELVIEW18_ARB = 0x8732
  MODELVIEW19_ARB = 0x8733
  MODELVIEW1_ARB = 0x850A
  MODELVIEW1_EXT = 0x850A
  MODELVIEW1_MATRIX_EXT = 0x8506
  MODELVIEW1_STACK_DEPTH_EXT = 0x8502
  MODELVIEW20_ARB = 0x8734
  MODELVIEW21_ARB = 0x8735
  MODELVIEW22_ARB = 0x8736
  MODELVIEW23_ARB = 0x8737
  MODELVIEW24_ARB = 0x8738
  MODELVIEW25_ARB = 0x8739
  MODELVIEW26_ARB = 0x873A
  MODELVIEW27_ARB = 0x873B
  MODELVIEW28_ARB = 0x873C
  MODELVIEW29_ARB = 0x873D
  MODELVIEW2_ARB = 0x8722
  MODELVIEW30_ARB = 0x873E
  MODELVIEW31_ARB = 0x873F
  MODELVIEW3_ARB = 0x8723
  MODELVIEW4_ARB = 0x8724
  MODELVIEW5_ARB = 0x8725
  MODELVIEW6_ARB = 0x8726
  MODELVIEW7_ARB = 0x8727
  MODELVIEW8_ARB = 0x8728
  MODELVIEW9_ARB = 0x8729
  MODELVIEW_PROJECTION_NV = 0x8629
  MODULATE_ADD_ATI = 0x8744
  MODULATE_SIGNED_ADD_ATI = 0x8745
  MODULATE_SUBTRACT_ATI = 0x8746
  MOVE_TO_CONTINUES_NV = 0x90B6
  MOVE_TO_NV = 0x02
  MOVE_TO_RESETS_NV = 0x90B5
  MOV_ATI = 0x8961
  MULTIPLY_NV = 0x9294
  MULTISAMPLE = 0x809D
  MULTISAMPLE_3DFX = 0x86B2
  MULTISAMPLE_ARB = 0x809D
  MULTISAMPLE_BIT_3DFX = 0x20000000
  MULTISAMPLE_BIT_ARB = 0x20000000
  MULTISAMPLE_BIT_EXT = 0x20000000
  MULTISAMPLE_COVERAGE_MODES_NV = 0x8E12
  MULTISAMPLE_EXT = 0x809D
  MULTISAMPLE_FILTER_HINT_NV = 0x8534
  MULTISAMPLE_SGIS = 0x809D
  MUL_ATI = 0x8964
  MVP_MATRIX_EXT = 0x87E3
  NAMED_STRING_LENGTH_ARB = 0x8DE9
  NAMED_STRING_TYPE_ARB = 0x8DEA
  NAME_LENGTH = 0x92F9
  NAND = 0x150E
  NATIVE_GRAPHICS_BEGIN_HINT_PGI = 0x1A203
  NATIVE_GRAPHICS_END_HINT_PGI = 0x1A204
  NATIVE_GRAPHICS_HANDLE_PGI = 0x1A202
  NEAREST = 0x2600
  NEAREST_CLIPMAP_LINEAR_SGIX = 0x844E
  NEAREST_CLIPMAP_NEAREST_SGIX = 0x844D
  NEAREST_MIPMAP_LINEAR = 0x2702
  NEAREST_MIPMAP_NEAREST = 0x2700
  NEGATE_BIT_ATI = 0x00000004
  NEGATIVE_ONE_EXT = 0x87DF
  NEGATIVE_W_EXT = 0x87DC
  NEGATIVE_X_EXT = 0x87D9
  NEGATIVE_Y_EXT = 0x87DA
  NEGATIVE_Z_EXT = 0x87DB
  NEVER = 0x0200
  NEXT_BUFFER_NV = -2
  NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV = 0x9025
  NICEST = 0x1102
  NONE = 0
  NOOP = 0x1505
  NOR = 0x1508
  NORMALIZED_RANGE_EXT = 0x87E0
  NORMAL_ARRAY_ADDRESS_NV = 0x8F22
  NORMAL_ARRAY_BUFFER_BINDING_ARB = 0x8897
  NORMAL_ARRAY_COUNT_EXT = 0x8080
  NORMAL_ARRAY_EXT = 0x8075
  NORMAL_ARRAY_LENGTH_NV = 0x8F2C
  NORMAL_ARRAY_LIST_IBM = 103071
  NORMAL_ARRAY_LIST_STRIDE_IBM = 103081
  NORMAL_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F6
  NORMAL_ARRAY_POINTER_EXT = 0x808F
  NORMAL_ARRAY_STRIDE_EXT = 0x807F
  NORMAL_ARRAY_TYPE_EXT = 0x807E
  NORMAL_BIT_PGI = 0x08000000
  NORMAL_MAP_ARB = 0x8511
  NORMAL_MAP_EXT = 0x8511
  NORMAL_MAP_NV = 0x8511
  NOTEQUAL = 0x0205
  NO_ERROR = 0
  NO_RESET_NOTIFICATION_ARB = 0x8261
  NUM_ACTIVE_VARIABLES = 0x9304
  NUM_COMPATIBLE_SUBROUTINES = 0x8E4A
  NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2
  NUM_COMPRESSED_TEXTURE_FORMATS_ARB = 0x86A2
  NUM_EXTENSIONS = 0x821D
  NUM_FILL_STREAMS_NV = 0x8E29
  NUM_FRAGMENT_CONSTANTS_ATI = 0x896F
  NUM_FRAGMENT_REGISTERS_ATI = 0x896E
  NUM_GENERAL_COMBINERS_NV = 0x854E
  NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI = 0x8973
  NUM_INSTRUCTIONS_PER_PASS_ATI = 0x8971
  NUM_INSTRUCTIONS_TOTAL_ATI = 0x8972
  NUM_LOOPBACK_COMPONENTS_ATI = 0x8974
  NUM_PASSES_ATI = 0x8970
  NUM_PROGRAM_BINARY_FORMATS = 0x87FE
  NUM_SAMPLE_COUNTS = 0x9380
  NUM_SHADER_BINARY_FORMATS = 0x8DF9
  NUM_VIDEO_CAPTURE_STREAMS_NV = 0x9024
  NUM_VIRTUAL_PAGE_SIZES_ARB = 0x91A8
  OBJECT_ACTIVE_ATTRIBUTES_ARB = 0x8B89
  OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB = 0x8B8A
  OBJECT_ACTIVE_UNIFORMS_ARB = 0x8B86
  OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB = 0x8B87
  OBJECT_ATTACHED_OBJECTS_ARB = 0x8B85
  OBJECT_BUFFER_SIZE_ATI = 0x8764
  OBJECT_BUFFER_USAGE_ATI = 0x8765
  OBJECT_COMPILE_STATUS_ARB = 0x8B81
  OBJECT_DELETE_STATUS_ARB = 0x8B80
  OBJECT_DISTANCE_TO_LINE_SGIS = 0x81F3
  OBJECT_DISTANCE_TO_POINT_SGIS = 0x81F1
  OBJECT_INFO_LOG_LENGTH_ARB = 0x8B84
  OBJECT_LINE_SGIS = 0x81F7
  OBJECT_LINK_STATUS_ARB = 0x8B82
  OBJECT_POINT_SGIS = 0x81F5
  OBJECT_SHADER_SOURCE_LENGTH_ARB = 0x8B88
  OBJECT_SUBTYPE_ARB = 0x8B4F
  OBJECT_TYPE = 0x9112
  OBJECT_TYPE_ARB = 0x8B4E
  OBJECT_VALIDATE_STATUS_ARB = 0x8B83
  OCCLUSION_QUERY_EVENT_MASK_AMD = 0x874F
  OCCLUSION_TEST_HP = 0x8165
  OCCLUSION_TEST_RESULT_HP = 0x8166
  OFFSET = 0x92FC
  OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV = 0x8856
  OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV = 0x8857
  OFFSET_HILO_TEXTURE_2D_NV = 0x8854
  OFFSET_HILO_TEXTURE_RECTANGLE_NV = 0x8855
  OFFSET_PROJECTIVE_TEXTURE_2D_NV = 0x8850
  OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV = 0x8851
  OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV = 0x8852
  OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV = 0x8853
  OFFSET_TEXTURE_2D_BIAS_NV = 0x86E3
  OFFSET_TEXTURE_2D_MATRIX_NV = 0x86E1
  OFFSET_TEXTURE_2D_NV = 0x86E8
  OFFSET_TEXTURE_2D_SCALE_NV = 0x86E2
  OFFSET_TEXTURE_BIAS_NV = 0x86E3
  OFFSET_TEXTURE_MATRIX_NV = 0x86E1
  OFFSET_TEXTURE_RECTANGLE_NV = 0x864C
  OFFSET_TEXTURE_RECTANGLE_SCALE_NV = 0x864D
  OFFSET_TEXTURE_SCALE_NV = 0x86E2
  ONE = 1
  ONE_EXT = 0x87DE
  ONE_MINUS_CONSTANT_ALPHA = 0x8004
  ONE_MINUS_CONSTANT_ALPHA_EXT = 0x8004
  ONE_MINUS_CONSTANT_COLOR = 0x8002
  ONE_MINUS_CONSTANT_COLOR_EXT = 0x8002
  ONE_MINUS_DST_ALPHA = 0x0305
  ONE_MINUS_DST_COLOR = 0x0307
  ONE_MINUS_SRC1_ALPHA = 0x88FB
  ONE_MINUS_SRC1_COLOR = 0x88FA
  ONE_MINUS_SRC_ALPHA = 0x0303
  ONE_MINUS_SRC_COLOR = 0x0301
  OPERAND0_ALPHA_ARB = 0x8598
  OPERAND0_ALPHA_EXT = 0x8598
  OPERAND0_RGB_ARB = 0x8590
  OPERAND0_RGB_EXT = 0x8590
  OPERAND1_ALPHA_ARB = 0x8599
  OPERAND1_ALPHA_EXT = 0x8599
  OPERAND1_RGB_ARB = 0x8591
  OPERAND1_RGB_EXT = 0x8591
  OPERAND2_ALPHA_ARB = 0x859A
  OPERAND2_ALPHA_EXT = 0x859A
  OPERAND2_RGB_ARB = 0x8592
  OPERAND2_RGB_EXT = 0x8592
  OPERAND3_ALPHA_NV = 0x859B
  OPERAND3_RGB_NV = 0x8593
  OP_ADD_EXT = 0x8787
  OP_CLAMP_EXT = 0x878E
  OP_CROSS_PRODUCT_EXT = 0x8797
  OP_DOT3_EXT = 0x8784
  OP_DOT4_EXT = 0x8785
  OP_EXP_BASE_2_EXT = 0x8791
  OP_FLOOR_EXT = 0x878F
  OP_FRAC_EXT = 0x8789
  OP_INDEX_EXT = 0x8782
  OP_LOG_BASE_2_EXT = 0x8792
  OP_MADD_EXT = 0x8788
  OP_MAX_EXT = 0x878A
  OP_MIN_EXT = 0x878B
  OP_MOV_EXT = 0x8799
  OP_MULTIPLY_MATRIX_EXT = 0x8798
  OP_MUL_EXT = 0x8786
  OP_NEGATE_EXT = 0x8783
  OP_POWER_EXT = 0x8793
  OP_RECIP_EXT = 0x8794
  OP_RECIP_SQRT_EXT = 0x8795
  OP_ROUND_EXT = 0x8790
  OP_SET_GE_EXT = 0x878C
  OP_SET_LT_EXT = 0x878D
  OP_SUB_EXT = 0x8796
  OR = 0x1507
  OR_INVERTED = 0x150D
  OR_REVERSE = 0x150B
  OUTPUT_COLOR0_EXT = 0x879B
  OUTPUT_COLOR1_EXT = 0x879C
  OUTPUT_FOG_EXT = 0x87BD
  OUTPUT_TEXTURE_COORD0_EXT = 0x879D
  OUTPUT_TEXTURE_COORD10_EXT = 0x87A7
  OUTPUT_TEXTURE_COORD11_EXT = 0x87A8
  OUTPUT_TEXTURE_COORD12_EXT = 0x87A9
  OUTPUT_TEXTURE_COORD13_EXT = 0x87AA
  OUTPUT_TEXTURE_COORD14_EXT = 0x87AB
  OUTPUT_TEXTURE_COORD15_EXT = 0x87AC
  OUTPUT_TEXTURE_COORD16_EXT = 0x87AD
  OUTPUT_TEXTURE_COORD17_EXT = 0x87AE
  OUTPUT_TEXTURE_COORD18_EXT = 0x87AF
  OUTPUT_TEXTURE_COORD19_EXT = 0x87B0
  OUTPUT_TEXTURE_COORD1_EXT = 0x879E
  OUTPUT_TEXTURE_COORD20_EXT = 0x87B1
  OUTPUT_TEXTURE_COORD21_EXT = 0x87B2
  OUTPUT_TEXTURE_COORD22_EXT = 0x87B3
  OUTPUT_TEXTURE_COORD23_EXT = 0x87B4
  OUTPUT_TEXTURE_COORD24_EXT = 0x87B5
  OUTPUT_TEXTURE_COORD25_EXT = 0x87B6
  OUTPUT_TEXTURE_COORD26_EXT = 0x87B7
  OUTPUT_TEXTURE_COORD27_EXT = 0x87B8
  OUTPUT_TEXTURE_COORD28_EXT = 0x87B9
  OUTPUT_TEXTURE_COORD29_EXT = 0x87BA
  OUTPUT_TEXTURE_COORD2_EXT = 0x879F
  OUTPUT_TEXTURE_COORD30_EXT = 0x87BB
  OUTPUT_TEXTURE_COORD31_EXT = 0x87BC
  OUTPUT_TEXTURE_COORD3_EXT = 0x87A0
  OUTPUT_TEXTURE_COORD4_EXT = 0x87A1
  OUTPUT_TEXTURE_COORD5_EXT = 0x87A2
  OUTPUT_TEXTURE_COORD6_EXT = 0x87A3
  OUTPUT_TEXTURE_COORD7_EXT = 0x87A4
  OUTPUT_TEXTURE_COORD8_EXT = 0x87A5
  OUTPUT_TEXTURE_COORD9_EXT = 0x87A6
  OUTPUT_VERTEX_EXT = 0x879A
  OUT_OF_MEMORY = 0x0505
  OVERLAY_NV = 0x9296
  PACK_ALIGNMENT = 0x0D05
  PACK_CMYK_HINT_EXT = 0x800E
  PACK_COMPRESSED_BLOCK_DEPTH = 0x912D
  PACK_COMPRESSED_BLOCK_HEIGHT = 0x912C
  PACK_COMPRESSED_BLOCK_SIZE = 0x912E
  PACK_COMPRESSED_BLOCK_WIDTH = 0x912B
  PACK_IMAGE_DEPTH_SGIS = 0x8131
  PACK_IMAGE_HEIGHT = 0x806C
  PACK_IMAGE_HEIGHT_EXT = 0x806C
  PACK_INVERT_MESA = 0x8758
  PACK_LSB_FIRST = 0x0D01
  PACK_RESAMPLE_OML = 0x8984
  PACK_RESAMPLE_SGIX = 0x842C
  PACK_ROW_BYTES_APPLE = 0x8A15
  PACK_ROW_LENGTH = 0x0D02
  PACK_SKIP_IMAGES = 0x806B
  PACK_SKIP_IMAGES_EXT = 0x806B
  PACK_SKIP_PIXELS = 0x0D04
  PACK_SKIP_ROWS = 0x0D03
  PACK_SKIP_VOLUMES_SGIS = 0x8130
  PACK_SUBSAMPLE_RATE_SGIX = 0x85A0
  PACK_SWAP_BYTES = 0x0D00
  PALETTE4_R5_G6_B5_OES = 0x8B92
  PALETTE4_RGB5_A1_OES = 0x8B94
  PALETTE4_RGB8_OES = 0x8B90
  PALETTE4_RGBA4_OES = 0x8B93
  PALETTE4_RGBA8_OES = 0x8B91
  PALETTE8_R5_G6_B5_OES = 0x8B97
  PALETTE8_RGB5_A1_OES = 0x8B99
  PALETTE8_RGB8_OES = 0x8B95
  PALETTE8_RGBA4_OES = 0x8B98
  PALETTE8_RGBA8_OES = 0x8B96
  PARALLEL_ARRAYS_INTEL = 0x83F4
  PARAMETER_BUFFER_ARB = 0x80EE
  PARAMETER_BUFFER_BINDING_ARB = 0x80EF
  PARTIAL_SUCCESS_NV = 0x902E
  PASS_THROUGH_NV = 0x86E6
  PATCHES = 0x000E
  PATCH_DEFAULT_INNER_LEVEL = 0x8E73
  PATCH_DEFAULT_OUTER_LEVEL = 0x8E74
  PATCH_VERTICES = 0x8E72
  PATH_CLIENT_LENGTH_NV = 0x907F
  PATH_COMMAND_COUNT_NV = 0x909D
  PATH_COMPUTED_LENGTH_NV = 0x90A0
  PATH_COORD_COUNT_NV = 0x909E
  PATH_COVER_DEPTH_FUNC_NV = 0x90BF
  PATH_DASH_ARRAY_COUNT_NV = 0x909F
  PATH_DASH_CAPS_NV = 0x907B
  PATH_DASH_OFFSET_NV = 0x907E
  PATH_DASH_OFFSET_RESET_NV = 0x90B4
  PATH_END_CAPS_NV = 0x9076
  PATH_ERROR_POSITION_NV = 0x90AB
  PATH_FILL_BOUNDING_BOX_NV = 0x90A1
  PATH_FILL_COVER_MODE_NV = 0x9082
  PATH_FILL_MASK_NV = 0x9081
  PATH_FILL_MODE_NV = 0x9080
  PATH_FOG_GEN_MODE_NV = 0x90AC
  PATH_FORMAT_PS_NV = 0x9071
  PATH_FORMAT_SVG_NV = 0x9070
  PATH_GEN_COEFF_NV = 0x90B1
  PATH_GEN_COLOR_FORMAT_NV = 0x90B2
  PATH_GEN_COMPONENTS_NV = 0x90B3
  PATH_GEN_MODE_NV = 0x90B0
  PATH_INITIAL_DASH_CAP_NV = 0x907C
  PATH_INITIAL_END_CAP_NV = 0x9077
  PATH_JOIN_STYLE_NV = 0x9079
  PATH_MITER_LIMIT_NV = 0x907A
  PATH_OBJECT_BOUNDING_BOX_NV = 0x908A
  PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV = 0x90BD
  PATH_STENCIL_DEPTH_OFFSET_UNITS_NV = 0x90BE
  PATH_STENCIL_FUNC_NV = 0x90B7
  PATH_STENCIL_REF_NV = 0x90B8
  PATH_STENCIL_VALUE_MASK_NV = 0x90B9
  PATH_STROKE_BOUNDING_BOX_NV = 0x90A2
  PATH_STROKE_COVER_MODE_NV = 0x9083
  PATH_STROKE_MASK_NV = 0x9084
  PATH_STROKE_WIDTH_NV = 0x9075
  PATH_TERMINAL_DASH_CAP_NV = 0x907D
  PATH_TERMINAL_END_CAP_NV = 0x9078
  PERCENTAGE_AMD = 0x8BC3
  PERFMON_RESULT_AMD = 0x8BC6
  PERFMON_RESULT_AVAILABLE_AMD = 0x8BC4
  PERFMON_RESULT_SIZE_AMD = 0x8BC5
  PERFORMANCE_MONITOR_AMD = 0x9152
  PERFQUERY_COUNTER_DATA_BOOL32_INTEL = 0x94FC
  PERFQUERY_COUNTER_DATA_DOUBLE_INTEL = 0x94FB
  PERFQUERY_COUNTER_DATA_FLOAT_INTEL = 0x94FA
  PERFQUERY_COUNTER_DATA_UINT32_INTEL = 0x94F8
  PERFQUERY_COUNTER_DATA_UINT64_INTEL = 0x94F9
  PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL = 0x94FF
  PERFQUERY_COUNTER_DURATION_NORM_INTEL = 0x94F1
  PERFQUERY_COUNTER_DURATION_RAW_INTEL = 0x94F2
  PERFQUERY_COUNTER_EVENT_INTEL = 0x94F0
  PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL = 0x94FE
  PERFQUERY_COUNTER_RAW_INTEL = 0x94F4
  PERFQUERY_COUNTER_THROUGHPUT_INTEL = 0x94F3
  PERFQUERY_COUNTER_TIMESTAMP_INTEL = 0x94F5
  PERFQUERY_DONOT_FLUSH_INTEL = 0x83F9
  PERFQUERY_FLUSH_INTEL = 0x83FA
  PERFQUERY_GLOBAL_CONTEXT_INTEL = 0x00000001
  PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL = 0x9500
  PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL = 0x94FD
  PERFQUERY_SINGLE_CONTEXT_INTEL = 0x00000000
  PERFQUERY_WAIT_INTEL = 0x83FB
  PERTURB_EXT = 0x85AE
  PER_STAGE_CONSTANTS_NV = 0x8535
  PHONG_HINT_WIN = 0x80EB
  PHONG_WIN = 0x80EA
  PINLIGHT_NV = 0x92A8
  PIXEL_BUFFER_BARRIER_BIT = 0x00000080
  PIXEL_BUFFER_BARRIER_BIT_EXT = 0x00000080
  PIXEL_COUNTER_BITS_NV = 0x8864
  PIXEL_COUNT_AVAILABLE_NV = 0x8867
  PIXEL_COUNT_NV = 0x8866
  PIXEL_CUBIC_WEIGHT_EXT = 0x8333
  PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS = 0x8355
  PIXEL_FRAGMENT_RGB_SOURCE_SGIS = 0x8354
  PIXEL_GROUP_COLOR_SGIS = 0x8356
  PIXEL_MAG_FILTER_EXT = 0x8331
  PIXEL_MIN_FILTER_EXT = 0x8332
  PIXEL_PACK_BUFFER = 0x88EB
  PIXEL_PACK_BUFFER_ARB = 0x88EB
  PIXEL_PACK_BUFFER_BINDING = 0x88ED
  PIXEL_PACK_BUFFER_BINDING_ARB = 0x88ED
  PIXEL_PACK_BUFFER_BINDING_EXT = 0x88ED
  PIXEL_PACK_BUFFER_EXT = 0x88EB
  PIXEL_SUBSAMPLE_2424_SGIX = 0x85A3
  PIXEL_SUBSAMPLE_4242_SGIX = 0x85A4
  PIXEL_SUBSAMPLE_4444_SGIX = 0x85A2
  PIXEL_TEXTURE_SGIS = 0x8353
  PIXEL_TEX_GEN_MODE_SGIX = 0x832B
  PIXEL_TEX_GEN_SGIX = 0x8139
  PIXEL_TILE_BEST_ALIGNMENT_SGIX = 0x813E
  PIXEL_TILE_CACHE_INCREMENT_SGIX = 0x813F
  PIXEL_TILE_CACHE_SIZE_SGIX = 0x8145
  PIXEL_TILE_GRID_DEPTH_SGIX = 0x8144
  PIXEL_TILE_GRID_HEIGHT_SGIX = 0x8143
  PIXEL_TILE_GRID_WIDTH_SGIX = 0x8142
  PIXEL_TILE_HEIGHT_SGIX = 0x8141
  PIXEL_TILE_WIDTH_SGIX = 0x8140
  PIXEL_TRANSFORM_2D_EXT = 0x8330
  PIXEL_TRANSFORM_2D_MATRIX_EXT = 0x8338
  PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 0x8336
  PIXEL_UNPACK_BUFFER = 0x88EC
  PIXEL_UNPACK_BUFFER_ARB = 0x88EC
  PIXEL_UNPACK_BUFFER_BINDING = 0x88EF
  PIXEL_UNPACK_BUFFER_BINDING_ARB = 0x88EF
  PIXEL_UNPACK_BUFFER_BINDING_EXT = 0x88EF
  PIXEL_UNPACK_BUFFER_EXT = 0x88EC
  PLUS_CLAMPED_ALPHA_NV = 0x92B2
  PLUS_CLAMPED_NV = 0x92B1
  PLUS_DARKER_NV = 0x9292
  PLUS_NV = 0x9291
  PN_TRIANGLES_ATI = 0x87F0
  PN_TRIANGLES_NORMAL_MODE_ATI = 0x87F3
  PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI = 0x87F7
  PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI = 0x87F8
  PN_TRIANGLES_POINT_MODE_ATI = 0x87F2
  PN_TRIANGLES_POINT_MODE_CUBIC_ATI = 0x87F6
  PN_TRIANGLES_POINT_MODE_LINEAR_ATI = 0x87F5
  PN_TRIANGLES_TESSELATION_LEVEL_ATI = 0x87F4
  POINT = 0x1B00
  POINTS = 0x0000
  POINT_DISTANCE_ATTENUATION_ARB = 0x8129
  POINT_FADE_THRESHOLD_SIZE = 0x8128
  POINT_FADE_THRESHOLD_SIZE_ARB = 0x8128
  POINT_FADE_THRESHOLD_SIZE_EXT = 0x8128
  POINT_FADE_THRESHOLD_SIZE_SGIS = 0x8128
  POINT_SIZE = 0x0B11
  POINT_SIZE_GRANULARITY = 0x0B13
  POINT_SIZE_MAX_ARB = 0x8127
  POINT_SIZE_MAX_EXT = 0x8127
  POINT_SIZE_MAX_SGIS = 0x8127
  POINT_SIZE_MIN_ARB = 0x8126
  POINT_SIZE_MIN_EXT = 0x8126
  POINT_SIZE_MIN_SGIS = 0x8126
  POINT_SIZE_RANGE = 0x0B12
  POINT_SPRITE_ARB = 0x8861
  POINT_SPRITE_COORD_ORIGIN = 0x8CA0
  POINT_SPRITE_NV = 0x8861
  POINT_SPRITE_R_MODE_NV = 0x8863
  POLYGON_MODE = 0x0B40
  POLYGON_OFFSET_BIAS_EXT = 0x8039
  POLYGON_OFFSET_EXT = 0x8037
  POLYGON_OFFSET_FACTOR = 0x8038
  POLYGON_OFFSET_FACTOR_EXT = 0x8038
  POLYGON_OFFSET_FILL = 0x8037
  POLYGON_OFFSET_LINE = 0x2A02
  POLYGON_OFFSET_POINT = 0x2A01
  POLYGON_OFFSET_UNITS = 0x2A00
  POLYGON_SMOOTH = 0x0B41
  POLYGON_SMOOTH_HINT = 0x0C53
  POST_COLOR_MATRIX_ALPHA_BIAS_SGI = 0x80BB
  POST_COLOR_MATRIX_ALPHA_SCALE_SGI = 0x80B7
  POST_COLOR_MATRIX_BLUE_BIAS_SGI = 0x80BA
  POST_COLOR_MATRIX_BLUE_SCALE_SGI = 0x80B6
  POST_COLOR_MATRIX_COLOR_TABLE_SGI = 0x80D2
  POST_COLOR_MATRIX_GREEN_BIAS_SGI = 0x80B9
  POST_COLOR_MATRIX_GREEN_SCALE_SGI = 0x80B5
  POST_COLOR_MATRIX_RED_BIAS_SGI = 0x80B8
  POST_COLOR_MATRIX_RED_SCALE_SGI = 0x80B4
  POST_CONVOLUTION_ALPHA_BIAS_EXT = 0x8023
  POST_CONVOLUTION_ALPHA_SCALE_EXT = 0x801F
  POST_CONVOLUTION_BLUE_BIAS_EXT = 0x8022
  POST_CONVOLUTION_BLUE_SCALE_EXT = 0x801E
  POST_CONVOLUTION_COLOR_TABLE_SGI = 0x80D1
  POST_CONVOLUTION_GREEN_BIAS_EXT = 0x8021
  POST_CONVOLUTION_GREEN_SCALE_EXT = 0x801D
  POST_CONVOLUTION_RED_BIAS_EXT = 0x8020
  POST_CONVOLUTION_RED_SCALE_EXT = 0x801C
  POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = 0x8162
  POST_TEXTURE_FILTER_BIAS_RANGE_SGIX = 0x817B
  POST_TEXTURE_FILTER_BIAS_SGIX = 0x8179
  POST_TEXTURE_FILTER_SCALE_RANGE_SGIX = 0x817C
  POST_TEXTURE_FILTER_SCALE_SGIX = 0x817A
  PREFER_DOUBLEBUFFER_HINT_PGI = 0x1A1F8
  PRESENT_DURATION_NV = 0x8E2B
  PRESENT_TIME_NV = 0x8E2A
  PRESERVE_ATI = 0x8762
  PREVIOUS_ARB = 0x8578
  PREVIOUS_EXT = 0x8578
  PREVIOUS_TEXTURE_INPUT_NV = 0x86E4
  PRIMARY_COLOR = 0x8577
  PRIMARY_COLOR_ARB = 0x8577
  PRIMARY_COLOR_EXT = 0x8577
  PRIMARY_COLOR_NV = 0x852C
  PRIMITIVES_GENERATED = 0x8C87
  PRIMITIVES_GENERATED_EXT = 0x8C87
  PRIMITIVES_GENERATED_NV = 0x8C87
  PRIMITIVE_ID_NV = 0x8C7C
  PRIMITIVE_RESTART = 0x8F9D
  PRIMITIVE_RESTART_FIXED_INDEX = 0x8D69
  PRIMITIVE_RESTART_INDEX = 0x8F9E
  PRIMITIVE_RESTART_INDEX_NV = 0x8559
  PRIMITIVE_RESTART_NV = 0x8558
  PROGRAM = 0x82E2
  PROGRAM_ADDRESS_REGISTERS_ARB = 0x88B0
  PROGRAM_ALU_INSTRUCTIONS_ARB = 0x8805
  PROGRAM_ATTRIBS_ARB = 0x88AC
  PROGRAM_ATTRIB_COMPONENTS_NV = 0x8906
  PROGRAM_BINARY_FORMATS = 0x87FF
  PROGRAM_BINARY_LENGTH = 0x8741
  PROGRAM_BINARY_RETRIEVABLE_HINT = 0x8257
  PROGRAM_BINDING_ARB = 0x8677
  PROGRAM_ERROR_POSITION_ARB = 0x864B
  PROGRAM_ERROR_POSITION_NV = 0x864B
  PROGRAM_ERROR_STRING_ARB = 0x8874
  PROGRAM_ERROR_STRING_NV = 0x8874
  PROGRAM_FORMAT_ARB = 0x8876
  PROGRAM_FORMAT_ASCII_ARB = 0x8875
  PROGRAM_INPUT = 0x92E3
  PROGRAM_INSTRUCTIONS_ARB = 0x88A0
  PROGRAM_KHR = 0x82E2
  PROGRAM_LENGTH_ARB = 0x8627
  PROGRAM_LENGTH_NV = 0x8627
  PROGRAM_MATRIX_EXT = 0x8E2D
  PROGRAM_MATRIX_STACK_DEPTH_EXT = 0x8E2F
  PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 0x88B2
  PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 0x8808
  PROGRAM_NATIVE_ATTRIBS_ARB = 0x88AE
  PROGRAM_NATIVE_INSTRUCTIONS_ARB = 0x88A2
  PROGRAM_NATIVE_PARAMETERS_ARB = 0x88AA
  PROGRAM_NATIVE_TEMPORARIES_ARB = 0x88A6
  PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 0x880A
  PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 0x8809
  PROGRAM_OBJECT_ARB = 0x8B40
  PROGRAM_OBJECT_EXT = 0x8B40
  PROGRAM_OUTPUT = 0x92E4
  PROGRAM_PARAMETERS_ARB = 0x88A8
  PROGRAM_PARAMETER_NV = 0x8644
  PROGRAM_PIPELINE = 0x82E4
  PROGRAM_PIPELINE_BINDING = 0x825A
  PROGRAM_PIPELINE_BINDING_EXT = 0x825A
  PROGRAM_PIPELINE_OBJECT_EXT = 0x8A4F
  PROGRAM_POINT_SIZE = 0x8642
  PROGRAM_POINT_SIZE_ARB = 0x8642
  PROGRAM_POINT_SIZE_EXT = 0x8642
  PROGRAM_RESIDENT_NV = 0x8647
  PROGRAM_RESULT_COMPONENTS_NV = 0x8907
  PROGRAM_SEPARABLE = 0x8258
  PROGRAM_SEPARABLE_EXT = 0x8258
  PROGRAM_STRING_ARB = 0x8628
  PROGRAM_STRING_NV = 0x8628
  PROGRAM_TARGET_NV = 0x8646
  PROGRAM_TEMPORARIES_ARB = 0x88A4
  PROGRAM_TEX_INDIRECTIONS_ARB = 0x8807
  PROGRAM_TEX_INSTRUCTIONS_ARB = 0x8806
  PROGRAM_UNDER_NATIVE_LIMITS_ARB = 0x88B6
  PROVOKING_VERTEX = 0x8E4F
  PROVOKING_VERTEX_EXT = 0x8E4F
  PROXY_COLOR_TABLE_SGI = 0x80D3
  PROXY_HISTOGRAM_EXT = 0x8025
  PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI = 0x80D5
  PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI = 0x80D4
  PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = 0x8163
  PROXY_TEXTURE_1D = 0x8063
  PROXY_TEXTURE_1D_ARRAY = 0x8C19
  PROXY_TEXTURE_1D_ARRAY_EXT = 0x8C19
  PROXY_TEXTURE_1D_EXT = 0x8063
  PROXY_TEXTURE_1D_STACK_MESAX = 0x875B
  PROXY_TEXTURE_2D = 0x8064
  PROXY_TEXTURE_2D_ARRAY = 0x8C1B
  PROXY_TEXTURE_2D_ARRAY_EXT = 0x8C1B
  PROXY_TEXTURE_2D_EXT = 0x8064
  PROXY_TEXTURE_2D_MULTISAMPLE = 0x9101
  PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9103
  PROXY_TEXTURE_2D_STACK_MESAX = 0x875C
  PROXY_TEXTURE_3D = 0x8070
  PROXY_TEXTURE_3D_EXT = 0x8070
  PROXY_TEXTURE_4D_SGIS = 0x8135
  PROXY_TEXTURE_COLOR_TABLE_SGI = 0x80BD
  PROXY_TEXTURE_CUBE_MAP = 0x851B
  PROXY_TEXTURE_CUBE_MAP_ARB = 0x851B
  PROXY_TEXTURE_CUBE_MAP_ARRAY = 0x900B
  PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB = 0x900B
  PROXY_TEXTURE_CUBE_MAP_EXT = 0x851B
  PROXY_TEXTURE_RECTANGLE = 0x84F7
  PROXY_TEXTURE_RECTANGLE_ARB = 0x84F7
  PROXY_TEXTURE_RECTANGLE_NV = 0x84F7
  PURGEABLE_APPLE = 0x8A1D
  QUADRATIC_CURVE_TO_NV = 0x0A
  QUADS = 0x0007
  QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = 0x8E4C
  QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT = 0x8E4C
  QUAD_ALPHA4_SGIS = 0x811E
  QUAD_ALPHA8_SGIS = 0x811F
  QUAD_INTENSITY4_SGIS = 0x8122
  QUAD_INTENSITY8_SGIS = 0x8123
  QUAD_LUMINANCE4_SGIS = 0x8120
  QUAD_LUMINANCE8_SGIS = 0x8121
  QUAD_MESH_SUN = 0x8614
  QUAD_TEXTURE_SELECT_SGIS = 0x8125
  QUARTER_BIT_ATI = 0x00000010
  QUERY = 0x82E3
  QUERY_ALL_EVENT_BITS_AMD = 0xFFFFFFFF
  QUERY_BUFFER = 0x9192
  QUERY_BUFFER_AMD = 0x9192
  QUERY_BUFFER_BARRIER_BIT = 0x00008000
  QUERY_BUFFER_BINDING = 0x9193
  QUERY_BUFFER_BINDING_AMD = 0x9193
  QUERY_BY_REGION_NO_WAIT = 0x8E16
  QUERY_BY_REGION_NO_WAIT_NV = 0x8E16
  QUERY_BY_REGION_WAIT = 0x8E15
  QUERY_BY_REGION_WAIT_NV = 0x8E15
  QUERY_COUNTER_BITS = 0x8864
  QUERY_COUNTER_BITS_ARB = 0x8864
  QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD = 0x00000008
  QUERY_DEPTH_FAIL_EVENT_BIT_AMD = 0x00000002
  QUERY_DEPTH_PASS_EVENT_BIT_AMD = 0x00000001
  QUERY_KHR = 0x82E3
  QUERY_NO_WAIT = 0x8E14
  QUERY_NO_WAIT_NV = 0x8E14
  QUERY_OBJECT_AMD = 0x9153
  QUERY_OBJECT_EXT = 0x9153
  QUERY_RESULT = 0x8866
  QUERY_RESULT_ARB = 0x8866
  QUERY_RESULT_AVAILABLE = 0x8867
  QUERY_RESULT_AVAILABLE_ARB = 0x8867
  QUERY_RESULT_NO_WAIT = 0x9194
  QUERY_RESULT_NO_WAIT_AMD = 0x9194
  QUERY_STENCIL_FAIL_EVENT_BIT_AMD = 0x00000004
  QUERY_WAIT = 0x8E13
  QUERY_WAIT_NV = 0x8E13
  R11F_G11F_B10F = 0x8C3A
  R11F_G11F_B10F_EXT = 0x8C3A
  R16 = 0x822A
  R16F = 0x822D
  R16I = 0x8233
  R16UI = 0x8234
  R16_SNORM = 0x8F98
  R1UI_C3F_V3F_SUN = 0x85C6
  R1UI_C4F_N3F_V3F_SUN = 0x85C8
  R1UI_C4UB_V3F_SUN = 0x85C5
  R1UI_N3F_V3F_SUN = 0x85C7
  R1UI_T2F_C4F_N3F_V3F_SUN = 0x85CB
  R1UI_T2F_N3F_V3F_SUN = 0x85CA
  R1UI_T2F_V3F_SUN = 0x85C9
  R1UI_V3F_SUN = 0x85C4
  R32F = 0x822E
  R32I = 0x8235
  R32UI = 0x8236
  R3_G3_B2 = 0x2A10
  R8 = 0x8229
  R8I = 0x8231
  R8UI = 0x8232
  R8_SNORM = 0x8F94
  RASTERIZER_DISCARD = 0x8C89
  RASTERIZER_DISCARD_EXT = 0x8C89
  RASTERIZER_DISCARD_NV = 0x8C89
  RASTER_POSITION_UNCLIPPED_IBM = 0x19262
  READ_BUFFER = 0x0C02
  READ_FRAMEBUFFER = 0x8CA8
  READ_FRAMEBUFFER_BINDING = 0x8CAA
  READ_FRAMEBUFFER_BINDING_EXT = 0x8CAA
  READ_FRAMEBUFFER_EXT = 0x8CA8
  READ_ONLY = 0x88B8
  READ_ONLY_ARB = 0x88B8
  READ_PIXELS = 0x828C
  READ_PIXELS_FORMAT = 0x828D
  READ_PIXELS_TYPE = 0x828E
  READ_PIXEL_DATA_RANGE_LENGTH_NV = 0x887B
  READ_PIXEL_DATA_RANGE_NV = 0x8879
  READ_PIXEL_DATA_RANGE_POINTER_NV = 0x887D
  READ_WRITE = 0x88BA
  READ_WRITE_ARB = 0x88BA
  RECLAIM_MEMORY_HINT_PGI = 0x1A1FE
  RECT_NV = 0xF6
  RED = 0x1903
  REDUCE_EXT = 0x8016
  RED_BIT_ATI = 0x00000001
  RED_INTEGER = 0x8D94
  RED_INTEGER_EXT = 0x8D94
  RED_MAX_CLAMP_INGR = 0x8564
  RED_MIN_CLAMP_INGR = 0x8560
  RED_NV = 0x1903
  RED_SNORM = 0x8F90
  REFERENCED_BY_COMPUTE_SHADER = 0x930B
  REFERENCED_BY_FRAGMENT_SHADER = 0x930A
  REFERENCED_BY_GEOMETRY_SHADER = 0x9309
  REFERENCED_BY_TESS_CONTROL_SHADER = 0x9307
  REFERENCED_BY_TESS_EVALUATION_SHADER = 0x9308
  REFERENCED_BY_VERTEX_SHADER = 0x9306
  REFERENCE_PLANE_EQUATION_SGIX = 0x817E
  REFERENCE_PLANE_SGIX = 0x817D
  REFLECTION_MAP_ARB = 0x8512
  REFLECTION_MAP_EXT = 0x8512
  REFLECTION_MAP_NV = 0x8512
  REGISTER_COMBINERS_NV = 0x8522
  REG_0_ATI = 0x8921
  REG_10_ATI = 0x892B
  REG_11_ATI = 0x892C
  REG_12_ATI = 0x892D
  REG_13_ATI = 0x892E
  REG_14_ATI = 0x892F
  REG_15_ATI = 0x8930
  REG_16_ATI = 0x8931
  REG_17_ATI = 0x8932
  REG_18_ATI = 0x8933
  REG_19_ATI = 0x8934
  REG_1_ATI = 0x8922
  REG_20_ATI = 0x8935
  REG_21_ATI = 0x8936
  REG_22_ATI = 0x8937
  REG_23_ATI = 0x8938
  REG_24_ATI = 0x8939
  REG_25_ATI = 0x893A
  REG_26_ATI = 0x893B
  REG_27_ATI = 0x893C
  REG_28_ATI = 0x893D
  REG_29_ATI = 0x893E
  REG_2_ATI = 0x8923
  REG_30_ATI = 0x893F
  REG_31_ATI = 0x8940
  REG_3_ATI = 0x8924
  REG_4_ATI = 0x8925
  REG_5_ATI = 0x8926
  REG_6_ATI = 0x8927
  REG_7_ATI = 0x8928
  REG_8_ATI = 0x8929
  REG_9_ATI = 0x892A
  RELATIVE_ARC_TO_NV = 0xFF
  RELATIVE_CUBIC_CURVE_TO_NV = 0x0D
  RELATIVE_HORIZONTAL_LINE_TO_NV = 0x07
  RELATIVE_LARGE_CCW_ARC_TO_NV = 0x17
  RELATIVE_LARGE_CW_ARC_TO_NV = 0x19
  RELATIVE_LINE_TO_NV = 0x05
  RELATIVE_MOVE_TO_NV = 0x03
  RELATIVE_QUADRATIC_CURVE_TO_NV = 0x0B
  RELATIVE_SMALL_CCW_ARC_TO_NV = 0x13
  RELATIVE_SMALL_CW_ARC_TO_NV = 0x15
  RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV = 0x11
  RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV = 0x0F
  RELATIVE_VERTICAL_LINE_TO_NV = 0x09
  RELEASED_APPLE = 0x8A19
  RENDERBUFFER = 0x8D41
  RENDERBUFFER_ALPHA_SIZE = 0x8D53
  RENDERBUFFER_ALPHA_SIZE_EXT = 0x8D53
  RENDERBUFFER_BINDING = 0x8CA7
  RENDERBUFFER_BINDING_EXT = 0x8CA7
  RENDERBUFFER_BLUE_SIZE = 0x8D52
  RENDERBUFFER_BLUE_SIZE_EXT = 0x8D52
  RENDERBUFFER_COLOR_SAMPLES_NV = 0x8E10
  RENDERBUFFER_COVERAGE_SAMPLES_NV = 0x8CAB
  RENDERBUFFER_DEPTH_SIZE = 0x8D54
  RENDERBUFFER_DEPTH_SIZE_EXT = 0x8D54
  RENDERBUFFER_EXT = 0x8D41
  RENDERBUFFER_FREE_MEMORY_ATI = 0x87FD
  RENDERBUFFER_GREEN_SIZE = 0x8D51
  RENDERBUFFER_GREEN_SIZE_EXT = 0x8D51
  RENDERBUFFER_HEIGHT = 0x8D43
  RENDERBUFFER_HEIGHT_EXT = 0x8D43
  RENDERBUFFER_INTERNAL_FORMAT = 0x8D44
  RENDERBUFFER_INTERNAL_FORMAT_EXT = 0x8D44
  RENDERBUFFER_RED_SIZE = 0x8D50
  RENDERBUFFER_RED_SIZE_EXT = 0x8D50
  RENDERBUFFER_SAMPLES = 0x8CAB
  RENDERBUFFER_SAMPLES_EXT = 0x8CAB
  RENDERBUFFER_STENCIL_SIZE = 0x8D55
  RENDERBUFFER_STENCIL_SIZE_EXT = 0x8D55
  RENDERBUFFER_WIDTH = 0x8D42
  RENDERBUFFER_WIDTH_EXT = 0x8D42
  RENDERER = 0x1F01
  REPEAT = 0x2901
  REPLACE = 0x1E01
  REPLACEMENT_CODE_ARRAY_POINTER_SUN = 0x85C3
  REPLACEMENT_CODE_ARRAY_STRIDE_SUN = 0x85C2
  REPLACEMENT_CODE_ARRAY_SUN = 0x85C0
  REPLACEMENT_CODE_ARRAY_TYPE_SUN = 0x85C1
  REPLACEMENT_CODE_SUN = 0x81D8
  REPLACE_EXT = 0x8062
  REPLACE_MIDDLE_SUN = 0x0002
  REPLACE_OLDEST_SUN = 0x0003
  REPLACE_VALUE_AMD = 0x874B
  REPLICATE_BORDER_HP = 0x8153
  RESAMPLE_AVERAGE_OML = 0x8988
  RESAMPLE_DECIMATE_OML = 0x8989
  RESAMPLE_DECIMATE_SGIX = 0x8430
  RESAMPLE_REPLICATE_OML = 0x8986
  RESAMPLE_REPLICATE_SGIX = 0x842E
  RESAMPLE_ZERO_FILL_OML = 0x8987
  RESAMPLE_ZERO_FILL_SGIX = 0x842F
  RESCALE_NORMAL_EXT = 0x803A
  RESET_NOTIFICATION_STRATEGY_ARB = 0x8256
  RESTART_PATH_NV = 0xF0
  RESTART_SUN = 0x0001
  RETAINED_APPLE = 0x8A1B
  RG = 0x8227
  RG16 = 0x822C
  RG16F = 0x822F
  RG16I = 0x8239
  RG16UI = 0x823A
  RG16_SNORM = 0x8F99
  RG32F = 0x8230
  RG32I = 0x823B
  RG32UI = 0x823C
  RG8 = 0x822B
  RG8I = 0x8237
  RG8UI = 0x8238
  RG8_SNORM = 0x8F95
  RGB = 0x1907
  RGB10 = 0x8052
  RGB10_A2 = 0x8059
  RGB10_A2UI = 0x906F
  RGB10_A2_EXT = 0x8059
  RGB10_EXT = 0x8052
  RGB12 = 0x8053
  RGB12_EXT = 0x8053
  RGB16 = 0x8054
  RGB16F = 0x881B
  RGB16F_ARB = 0x881B
  RGB16I = 0x8D89
  RGB16I_EXT = 0x8D89
  RGB16UI = 0x8D77
  RGB16UI_EXT = 0x8D77
  RGB16_EXT = 0x8054
  RGB16_SNORM = 0x8F9A
  RGB2_EXT = 0x804E
  RGB32F = 0x8815
  RGB32F_ARB = 0x8815
  RGB32I = 0x8D83
  RGB32I_EXT = 0x8D83
  RGB32UI = 0x8D71
  RGB32UI_EXT = 0x8D71
  RGB4 = 0x804F
  RGB4_EXT = 0x804F
  RGB4_S3TC = 0x83A1
  RGB5 = 0x8050
  RGB565 = 0x8D62
  RGB5_A1 = 0x8057
  RGB5_A1_EXT = 0x8057
  RGB5_EXT = 0x8050
  RGB8 = 0x8051
  RGB8I = 0x8D8F
  RGB8I_EXT = 0x8D8F
  RGB8UI = 0x8D7D
  RGB8UI_EXT = 0x8D7D
  RGB8_EXT = 0x8051
  RGB8_SNORM = 0x8F96
  RGB9_E5 = 0x8C3D
  RGB9_E5_EXT = 0x8C3D
  RGBA = 0x1908
  RGBA12 = 0x805A
  RGBA12_EXT = 0x805A
  RGBA16 = 0x805B
  RGBA16F = 0x881A
  RGBA16F_ARB = 0x881A
  RGBA16I = 0x8D88
  RGBA16I_EXT = 0x8D88
  RGBA16UI = 0x8D76
  RGBA16UI_EXT = 0x8D76
  RGBA16_EXT = 0x805B
  RGBA16_SNORM = 0x8F9B
  RGBA2 = 0x8055
  RGBA2_EXT = 0x8055
  RGBA32F = 0x8814
  RGBA32F_ARB = 0x8814
  RGBA32I = 0x8D82
  RGBA32I_EXT = 0x8D82
  RGBA32UI = 0x8D70
  RGBA32UI_EXT = 0x8D70
  RGBA4 = 0x8056
  RGBA4_DXT5_S3TC = 0x83A5
  RGBA4_EXT = 0x8056
  RGBA4_S3TC = 0x83A3
  RGBA8 = 0x8058
  RGBA8I = 0x8D8E
  RGBA8I_EXT = 0x8D8E
  RGBA8UI = 0x8D7C
  RGBA8UI_EXT = 0x8D7C
  RGBA8_EXT = 0x8058
  RGBA8_SNORM = 0x8F97
  RGBA_DXT5_S3TC = 0x83A4
  RGBA_FLOAT16_APPLE = 0x881A
  RGBA_FLOAT16_ATI = 0x881A
  RGBA_FLOAT32_APPLE = 0x8814
  RGBA_FLOAT32_ATI = 0x8814
  RGBA_FLOAT_MODE_ARB = 0x8820
  RGBA_FLOAT_MODE_ATI = 0x8820
  RGBA_INTEGER = 0x8D99
  RGBA_INTEGER_EXT = 0x8D99
  RGBA_INTEGER_MODE_EXT = 0x8D9E
  RGBA_S3TC = 0x83A2
  RGBA_SIGNED_COMPONENTS_EXT = 0x8C3C
  RGBA_SNORM = 0x8F93
  RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV = 0x86D9
  RGB_422_APPLE = 0x8A1F
  RGB_FLOAT16_APPLE = 0x881B
  RGB_FLOAT16_ATI = 0x881B
  RGB_FLOAT32_APPLE = 0x8815
  RGB_FLOAT32_ATI = 0x8815
  RGB_INTEGER = 0x8D98
  RGB_INTEGER_EXT = 0x8D98
  RGB_RAW_422_APPLE = 0x8A51
  RGB_S3TC = 0x83A0
  RGB_SCALE_ARB = 0x8573
  RGB_SCALE_EXT = 0x8573
  RGB_SNORM = 0x8F92
  RG_INTEGER = 0x8228
  RG_SNORM = 0x8F91
  RIGHT = 0x0407
  ROUND_NV = 0x90A4
  SAMPLER = 0x82E6
  SAMPLER_1D = 0x8B5D
  SAMPLER_1D_ARB = 0x8B5D
  SAMPLER_1D_ARRAY = 0x8DC0
  SAMPLER_1D_ARRAY_EXT = 0x8DC0
  SAMPLER_1D_ARRAY_SHADOW = 0x8DC3
  SAMPLER_1D_ARRAY_SHADOW_EXT = 0x8DC3
  SAMPLER_1D_SHADOW = 0x8B61
  SAMPLER_1D_SHADOW_ARB = 0x8B61
  SAMPLER_2D = 0x8B5E
  SAMPLER_2D_ARB = 0x8B5E
  SAMPLER_2D_ARRAY = 0x8DC1
  SAMPLER_2D_ARRAY_EXT = 0x8DC1
  SAMPLER_2D_ARRAY_SHADOW = 0x8DC4
  SAMPLER_2D_ARRAY_SHADOW_EXT = 0x8DC4
  SAMPLER_2D_MULTISAMPLE = 0x9108
  SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910B
  SAMPLER_2D_RECT = 0x8B63
  SAMPLER_2D_RECT_ARB = 0x8B63
  SAMPLER_2D_RECT_SHADOW = 0x8B64
  SAMPLER_2D_RECT_SHADOW_ARB = 0x8B64
  SAMPLER_2D_SHADOW = 0x8B62
  SAMPLER_2D_SHADOW_ARB = 0x8B62
  SAMPLER_3D = 0x8B5F
  SAMPLER_3D_ARB = 0x8B5F
  SAMPLER_BINDING = 0x8919
  SAMPLER_BUFFER = 0x8DC2
  SAMPLER_BUFFER_AMD = 0x9001
  SAMPLER_BUFFER_EXT = 0x8DC2
  SAMPLER_CUBE = 0x8B60
  SAMPLER_CUBE_ARB = 0x8B60
  SAMPLER_CUBE_MAP_ARRAY = 0x900C
  SAMPLER_CUBE_MAP_ARRAY_ARB = 0x900C
  SAMPLER_CUBE_MAP_ARRAY_SHADOW = 0x900D
  SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB = 0x900D
  SAMPLER_CUBE_SHADOW = 0x8DC5
  SAMPLER_CUBE_SHADOW_EXT = 0x8DC5
  SAMPLER_KHR = 0x82E6
  SAMPLER_OBJECT_AMD = 0x9155
  SAMPLER_RENDERBUFFER_NV = 0x8E56
  SAMPLES = 0x80A9
  SAMPLES_3DFX = 0x86B4
  SAMPLES_ARB = 0x80A9
  SAMPLES_EXT = 0x80A9
  SAMPLES_PASSED = 0x8914
  SAMPLES_PASSED_ARB = 0x8914
  SAMPLES_SGIS = 0x80A9
  SAMPLE_ALPHA_TO_COVERAGE = 0x809E
  SAMPLE_ALPHA_TO_COVERAGE_ARB = 0x809E
  SAMPLE_ALPHA_TO_MASK_EXT = 0x809E
  SAMPLE_ALPHA_TO_MASK_SGIS = 0x809E
  SAMPLE_ALPHA_TO_ONE = 0x809F
  SAMPLE_ALPHA_TO_ONE_ARB = 0x809F
  SAMPLE_ALPHA_TO_ONE_EXT = 0x809F
  SAMPLE_ALPHA_TO_ONE_SGIS = 0x809F
  SAMPLE_BUFFERS = 0x80A8
  SAMPLE_BUFFERS_3DFX = 0x86B3
  SAMPLE_BUFFERS_ARB = 0x80A8
  SAMPLE_BUFFERS_EXT = 0x80A8
  SAMPLE_BUFFERS_SGIS = 0x80A8
  SAMPLE_COVERAGE = 0x80A0
  SAMPLE_COVERAGE_ARB = 0x80A0
  SAMPLE_COVERAGE_INVERT = 0x80AB
  SAMPLE_COVERAGE_INVERT_ARB = 0x80AB
  SAMPLE_COVERAGE_VALUE = 0x80AA
  SAMPLE_COVERAGE_VALUE_ARB = 0x80AA
  SAMPLE_MASK = 0x8E51
  SAMPLE_MASK_EXT = 0x80A0
  SAMPLE_MASK_INVERT_EXT = 0x80AB
  SAMPLE_MASK_INVERT_SGIS = 0x80AB
  SAMPLE_MASK_NV = 0x8E51
  SAMPLE_MASK_SGIS = 0x80A0
  SAMPLE_MASK_VALUE = 0x8E52
  SAMPLE_MASK_VALUE_EXT = 0x80AA
  SAMPLE_MASK_VALUE_NV = 0x8E52
  SAMPLE_MASK_VALUE_SGIS = 0x80AA
  SAMPLE_PATTERN_EXT = 0x80AC
  SAMPLE_PATTERN_SGIS = 0x80AC
  SAMPLE_POSITION = 0x8E50
  SAMPLE_POSITION_NV = 0x8E50
  SAMPLE_SHADING = 0x8C36
  SAMPLE_SHADING_ARB = 0x8C36
  SATURATE_BIT_ATI = 0x00000040
  SCALAR_EXT = 0x87BE
  SCALEBIAS_HINT_SGIX = 0x8322
  SCALED_RESOLVE_FASTEST_EXT = 0x90BA
  SCALED_RESOLVE_NICEST_EXT = 0x90BB
  SCALE_BY_FOUR_NV = 0x853F
  SCALE_BY_ONE_HALF_NV = 0x8540
  SCALE_BY_TWO_NV = 0x853E
  SCISSOR_BOX = 0x0C10
  SCISSOR_TEST = 0x0C11
  SCREEN_COORDINATES_REND = 0x8490
  SCREEN_NV = 0x9295
  SECONDARY_COLOR_ARRAY_ADDRESS_NV = 0x8F27
  SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB = 0x889C
  SECONDARY_COLOR_ARRAY_EXT = 0x845E
  SECONDARY_COLOR_ARRAY_LENGTH_NV = 0x8F31
  SECONDARY_COLOR_ARRAY_LIST_IBM = 103077
  SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM = 103087
  SECONDARY_COLOR_ARRAY_POINTER_EXT = 0x845D
  SECONDARY_COLOR_ARRAY_SIZE_EXT = 0x845A
  SECONDARY_COLOR_ARRAY_STRIDE_EXT = 0x845C
  SECONDARY_COLOR_ARRAY_TYPE_EXT = 0x845B
  SECONDARY_COLOR_NV = 0x852D
  SECONDARY_INTERPOLATOR_ATI = 0x896D
  SEPARABLE_2D_EXT = 0x8012
  SEPARATE_ATTRIBS = 0x8C8D
  SEPARATE_ATTRIBS_EXT = 0x8C8D
  SEPARATE_ATTRIBS_NV = 0x8C8D
  SEPARATE_SPECULAR_COLOR_EXT = 0x81FA
  SET = 0x150F
  SET_AMD = 0x874A
  SHADER = 0x82E1
  SHADER_BINARY_FORMATS = 0x8DF8
  SHADER_COMPILER = 0x8DFA
  SHADER_CONSISTENT_NV = 0x86DD
  SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV = 0x00000010
  SHADER_IMAGE_ACCESS_BARRIER_BIT = 0x00000020
  SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT = 0x00000020
  SHADER_IMAGE_ATOMIC = 0x82A6
  SHADER_IMAGE_LOAD = 0x82A4
  SHADER_IMAGE_STORE = 0x82A5
  SHADER_INCLUDE_ARB = 0x8DAE
  SHADER_KHR = 0x82E1
  SHADER_OBJECT_ARB = 0x8B48
  SHADER_OBJECT_EXT = 0x8B48
  SHADER_OPERATION_NV = 0x86DF
  SHADER_SOURCE_LENGTH = 0x8B88
  SHADER_STORAGE_BARRIER_BIT = 0x00002000
  SHADER_STORAGE_BLOCK = 0x92E6
  SHADER_STORAGE_BUFFER = 0x90D2
  SHADER_STORAGE_BUFFER_BINDING = 0x90D3
  SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = 0x90DF
  SHADER_STORAGE_BUFFER_SIZE = 0x90D5
  SHADER_STORAGE_BUFFER_START = 0x90D4
  SHADER_TYPE = 0x8B4F
  SHADING_LANGUAGE_VERSION = 0x8B8C
  SHADING_LANGUAGE_VERSION_ARB = 0x8B8C
  SHADOW_AMBIENT_SGIX = 0x80BF
  SHADOW_ATTENUATION_EXT = 0x834E
  SHARED_TEXTURE_PALETTE_EXT = 0x81FB
  SHARPEN_TEXTURE_FUNC_POINTS_SGIS = 0x80B0
  SHORT = 0x1402
  SIGNALED = 0x9119
  SIGNED_ALPHA8_NV = 0x8706
  SIGNED_ALPHA_NV = 0x8705
  SIGNED_HILO16_NV = 0x86FA
  SIGNED_HILO8_NV = 0x885F
  SIGNED_HILO_NV = 0x86F9
  SIGNED_IDENTITY_NV = 0x853C
  SIGNED_INTENSITY8_NV = 0x8708
  SIGNED_INTENSITY_NV = 0x8707
  SIGNED_LUMINANCE8_ALPHA8_NV = 0x8704
  SIGNED_LUMINANCE8_NV = 0x8702
  SIGNED_LUMINANCE_ALPHA_NV = 0x8703
  SIGNED_LUMINANCE_NV = 0x8701
  SIGNED_NEGATE_NV = 0x853D
  SIGNED_NORMALIZED = 0x8F9C
  SIGNED_RGB8_NV = 0x86FF
  SIGNED_RGB8_UNSIGNED_ALPHA8_NV = 0x870D
  SIGNED_RGBA8_NV = 0x86FC
  SIGNED_RGBA_NV = 0x86FB
  SIGNED_RGB_NV = 0x86FE
  SIGNED_RGB_UNSIGNED_ALPHA_NV = 0x870C
  SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST = 0x82AC
  SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE = 0x82AE
  SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST = 0x82AD
  SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE = 0x82AF
  SINGLE_COLOR_EXT = 0x81F9
  SKIP_COMPONENTS1_NV = -6
  SKIP_COMPONENTS2_NV = -5
  SKIP_COMPONENTS3_NV = -4
  SKIP_COMPONENTS4_NV = -3
  SKIP_DECODE_EXT = 0x8A4A
  SKIP_MISSING_GLYPH_NV = 0x90A9
  SLICE_ACCUM_SUN = 0x85CC
  SLUMINANCE8_ALPHA8_EXT = 0x8C45
  SLUMINANCE8_EXT = 0x8C47
  SLUMINANCE_ALPHA_EXT = 0x8C44
  SLUMINANCE_EXT = 0x8C46
  SMALL_CCW_ARC_TO_NV = 0x12
  SMALL_CW_ARC_TO_NV = 0x14
  SMOOTH_CUBIC_CURVE_TO_NV = 0x10
  SMOOTH_LINE_WIDTH_GRANULARITY = 0x0B23
  SMOOTH_LINE_WIDTH_RANGE = 0x0B22
  SMOOTH_POINT_SIZE_GRANULARITY = 0x0B13
  SMOOTH_POINT_SIZE_RANGE = 0x0B12
  SMOOTH_QUADRATIC_CURVE_TO_NV = 0x0E
  SM_COUNT_NV = 0x933B
  SOFTLIGHT_NV = 0x929C
  SOURCE0_ALPHA_ARB = 0x8588
  SOURCE0_ALPHA_EXT = 0x8588
  SOURCE0_RGB_ARB = 0x8580
  SOURCE0_RGB_EXT = 0x8580
  SOURCE1_ALPHA_ARB = 0x8589
  SOURCE1_ALPHA_EXT = 0x8589
  SOURCE1_RGB_ARB = 0x8581
  SOURCE1_RGB_EXT = 0x8581
  SOURCE2_ALPHA_ARB = 0x858A
  SOURCE2_ALPHA_EXT = 0x858A
  SOURCE2_RGB_ARB = 0x8582
  SOURCE2_RGB_EXT = 0x8582
  SOURCE3_ALPHA_NV = 0x858B
  SOURCE3_RGB_NV = 0x8583
  SPARE0_NV = 0x852E
  SPARE0_PLUS_SECONDARY_COLOR_NV = 0x8532
  SPARE1_NV = 0x852F
  SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB = 0x91A9
  SPRITE_AXIAL_SGIX = 0x814C
  SPRITE_AXIS_SGIX = 0x814A
  SPRITE_EYE_ALIGNED_SGIX = 0x814E
  SPRITE_MODE_SGIX = 0x8149
  SPRITE_OBJECT_ALIGNED_SGIX = 0x814D
  SPRITE_SGIX = 0x8148
  SPRITE_TRANSLATION_SGIX = 0x814B
  SQUARE_NV = 0x90A3
  SRC1_ALPHA = 0x8589
  SRC1_COLOR = 0x88F9
  SRC_ALPHA = 0x0302
  SRC_ALPHA_SATURATE = 0x0308
  SRC_ATOP_NV = 0x928E
  SRC_COLOR = 0x0300
  SRC_IN_NV = 0x928A
  SRC_NV = 0x9286
  SRC_OUT_NV = 0x928C
  SRC_OVER_NV = 0x9288
  SRGB = 0x8C40
  SRGB8 = 0x8C41
  SRGB8_ALPHA8 = 0x8C43
  SRGB8_ALPHA8_EXT = 0x8C43
  SRGB8_EXT = 0x8C41
  SRGB_ALPHA = 0x8C42
  SRGB_ALPHA_EXT = 0x8C42
  SRGB_DECODE_ARB = 0x8299
  SRGB_EXT = 0x8C40
  SRGB_READ = 0x8297
  SRGB_WRITE = 0x8298
  STACK_OVERFLOW = 0x0503
  STACK_OVERFLOW_KHR = 0x0503
  STACK_UNDERFLOW = 0x0504
  STACK_UNDERFLOW_KHR = 0x0504
  STANDARD_FONT_NAME_NV = 0x9072
  STATIC_ATI = 0x8760
  STATIC_COPY = 0x88E6
  STATIC_COPY_ARB = 0x88E6
  STATIC_DRAW = 0x88E4
  STATIC_DRAW_ARB = 0x88E4
  STATIC_READ = 0x88E5
  STATIC_READ_ARB = 0x88E5
  STATIC_VERTEX_ARRAY_IBM = 103061
  STENCIL = 0x1802
  STENCIL_ATTACHMENT = 0x8D20
  STENCIL_ATTACHMENT_EXT = 0x8D20
  STENCIL_BACK_FAIL = 0x8801
  STENCIL_BACK_FAIL_ATI = 0x8801
  STENCIL_BACK_FUNC = 0x8800
  STENCIL_BACK_FUNC_ATI = 0x8800
  STENCIL_BACK_OP_VALUE_AMD = 0x874D
  STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802
  STENCIL_BACK_PASS_DEPTH_FAIL_ATI = 0x8802
  STENCIL_BACK_PASS_DEPTH_PASS = 0x8803
  STENCIL_BACK_PASS_DEPTH_PASS_ATI = 0x8803
  STENCIL_BACK_REF = 0x8CA3
  STENCIL_BACK_VALUE_MASK = 0x8CA4
  STENCIL_BACK_WRITEMASK = 0x8CA5
  STENCIL_BUFFER_BIT = 0x00000400
  STENCIL_CLEAR_TAG_VALUE_EXT = 0x88F3
  STENCIL_CLEAR_VALUE = 0x0B91
  STENCIL_COMPONENTS = 0x8285
  STENCIL_FAIL = 0x0B94
  STENCIL_FUNC = 0x0B92
  STENCIL_INDEX = 0x1901
  STENCIL_INDEX1 = 0x8D46
  STENCIL_INDEX16 = 0x8D49
  STENCIL_INDEX16_EXT = 0x8D49
  STENCIL_INDEX1_EXT = 0x8D46
  STENCIL_INDEX4 = 0x8D47
  STENCIL_INDEX4_EXT = 0x8D47
  STENCIL_INDEX8 = 0x8D48
  STENCIL_INDEX8_EXT = 0x8D48
  STENCIL_OP_VALUE_AMD = 0x874C
  STENCIL_PASS_DEPTH_FAIL = 0x0B95
  STENCIL_PASS_DEPTH_PASS = 0x0B96
  STENCIL_REF = 0x0B97
  STENCIL_RENDERABLE = 0x8288
  STENCIL_TAG_BITS_EXT = 0x88F2
  STENCIL_TEST = 0x0B90
  STENCIL_TEST_TWO_SIDE_EXT = 0x8910
  STENCIL_VALUE_MASK = 0x0B93
  STENCIL_WRITEMASK = 0x0B98
  STEREO = 0x0C33
  STORAGE_CACHED_APPLE = 0x85BE
  STORAGE_CLIENT_APPLE = 0x85B4
  STORAGE_PRIVATE_APPLE = 0x85BD
  STORAGE_SHARED_APPLE = 0x85BF
  STREAM_COPY = 0x88E2
  STREAM_COPY_ARB = 0x88E2
  STREAM_DRAW = 0x88E0
  STREAM_DRAW_ARB = 0x88E0
  STREAM_RASTERIZATION_AMD = 0x91A0
  STREAM_READ = 0x88E1
  STREAM_READ_ARB = 0x88E1
  STRICT_DEPTHFUNC_HINT_PGI = 0x1A216
  STRICT_LIGHTING_HINT_PGI = 0x1A217
  STRICT_SCISSOR_HINT_PGI = 0x1A218
  SUBPIXEL_BITS = 0x0D50
  SUBSAMPLE_DISTANCE_AMD = 0x883F
  SUBTRACT_ARB = 0x84E7
  SUB_ATI = 0x8965
  SUCCESS_NV = 0x902F
  SURFACE_MAPPED_NV = 0x8700
  SURFACE_REGISTERED_NV = 0x86FD
  SURFACE_STATE_NV = 0x86EB
  SWIZZLE_STQ_ATI = 0x8977
  SWIZZLE_STQ_DQ_ATI = 0x8979
  SWIZZLE_STRQ_ATI = 0x897A
  SWIZZLE_STRQ_DQ_ATI = 0x897B
  SWIZZLE_STR_ATI = 0x8976
  SWIZZLE_STR_DR_ATI = 0x8978
  SYNC_CL_EVENT_ARB = 0x8240
  SYNC_CL_EVENT_COMPLETE_ARB = 0x8241
  SYNC_CONDITION = 0x9113
  SYNC_FENCE = 0x9116
  SYNC_FLAGS = 0x9115
  SYNC_FLUSH_COMMANDS_BIT = 0x00000001
  SYNC_GPU_COMMANDS_COMPLETE = 0x9117
  SYNC_STATUS = 0x9114
  SYNC_X11_FENCE_EXT = 0x90E1
  SYSTEM_FONT_NAME_NV = 0x9073
  T2F_IUI_N3F_V2F_EXT = 0x81B3
  T2F_IUI_N3F_V3F_EXT = 0x81B4
  T2F_IUI_V2F_EXT = 0x81B1
  T2F_IUI_V3F_EXT = 0x81B2
  TABLE_TOO_LARGE_EXT = 0x8031
  TANGENT_ARRAY_EXT = 0x8439
  TANGENT_ARRAY_POINTER_EXT = 0x8442
  TANGENT_ARRAY_STRIDE_EXT = 0x843F
  TANGENT_ARRAY_TYPE_EXT = 0x843E
  TESSELLATION_FACTOR_AMD = 0x9005
  TESSELLATION_MODE_AMD = 0x9004
  TESS_CONTROL_OUTPUT_VERTICES = 0x8E75
  TESS_CONTROL_PROGRAM_NV = 0x891E
  TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV = 0x8C74
  TESS_CONTROL_SHADER = 0x8E88
  TESS_CONTROL_SHADER_BIT = 0x00000008
  TESS_CONTROL_SUBROUTINE = 0x92E9
  TESS_CONTROL_SUBROUTINE_UNIFORM = 0x92EF
  TESS_CONTROL_TEXTURE = 0x829C
  TESS_EVALUATION_PROGRAM_NV = 0x891F
  TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV = 0x8C75
  TESS_EVALUATION_SHADER = 0x8E87
  TESS_EVALUATION_SHADER_BIT = 0x00000010
  TESS_EVALUATION_SUBROUTINE = 0x92EA
  TESS_EVALUATION_SUBROUTINE_UNIFORM = 0x92F0
  TESS_EVALUATION_TEXTURE = 0x829D
  TESS_GEN_MODE = 0x8E76
  TESS_GEN_POINT_MODE = 0x8E79
  TESS_GEN_SPACING = 0x8E77
  TESS_GEN_VERTEX_ORDER = 0x8E78
  TEXCOORD1_BIT_PGI = 0x10000000
  TEXCOORD2_BIT_PGI = 0x20000000
  TEXCOORD3_BIT_PGI = 0x40000000
  TEXCOORD4_BIT_PGI = 0x80000000
  TEXTURE = 0x1702
  TEXTURE0 = 0x84C0
  TEXTURE0_ARB = 0x84C0
  TEXTURE1 = 0x84C1
  TEXTURE10 = 0x84CA
  TEXTURE10_ARB = 0x84CA
  TEXTURE11 = 0x84CB
  TEXTURE11_ARB = 0x84CB
  TEXTURE12 = 0x84CC
  TEXTURE12_ARB = 0x84CC
  TEXTURE13 = 0x84CD
  TEXTURE13_ARB = 0x84CD
  TEXTURE14 = 0x84CE
  TEXTURE14_ARB = 0x84CE
  TEXTURE15 = 0x84CF
  TEXTURE15_ARB = 0x84CF
  TEXTURE16 = 0x84D0
  TEXTURE16_ARB = 0x84D0
  TEXTURE17 = 0x84D1
  TEXTURE17_ARB = 0x84D1
  TEXTURE18 = 0x84D2
  TEXTURE18_ARB = 0x84D2
  TEXTURE19 = 0x84D3
  TEXTURE19_ARB = 0x84D3
  TEXTURE1_ARB = 0x84C1
  TEXTURE2 = 0x84C2
  TEXTURE20 = 0x84D4
  TEXTURE20_ARB = 0x84D4
  TEXTURE21 = 0x84D5
  TEXTURE21_ARB = 0x84D5
  TEXTURE22 = 0x84D6
  TEXTURE22_ARB = 0x84D6
  TEXTURE23 = 0x84D7
  TEXTURE23_ARB = 0x84D7
  TEXTURE24 = 0x84D8
  TEXTURE24_ARB = 0x84D8
  TEXTURE25 = 0x84D9
  TEXTURE25_ARB = 0x84D9
  TEXTURE26 = 0x84DA
  TEXTURE26_ARB = 0x84DA
  TEXTURE27 = 0x84DB
  TEXTURE27_ARB = 0x84DB
  TEXTURE28 = 0x84DC
  TEXTURE28_ARB = 0x84DC
  TEXTURE29 = 0x84DD
  TEXTURE29_ARB = 0x84DD
  TEXTURE2_ARB = 0x84C2
  TEXTURE3 = 0x84C3
  TEXTURE30 = 0x84DE
  TEXTURE30_ARB = 0x84DE
  TEXTURE31 = 0x84DF
  TEXTURE31_ARB = 0x84DF
  TEXTURE3_ARB = 0x84C3
  TEXTURE4 = 0x84C4
  TEXTURE4_ARB = 0x84C4
  TEXTURE5 = 0x84C5
  TEXTURE5_ARB = 0x84C5
  TEXTURE6 = 0x84C6
  TEXTURE6_ARB = 0x84C6
  TEXTURE7 = 0x84C7
  TEXTURE7_ARB = 0x84C7
  TEXTURE8 = 0x84C8
  TEXTURE8_ARB = 0x84C8
  TEXTURE9 = 0x84C9
  TEXTURE9_ARB = 0x84C9
  TEXTURE_1D = 0x0DE0
  TEXTURE_1D_ARRAY = 0x8C18
  TEXTURE_1D_ARRAY_EXT = 0x8C18
  TEXTURE_1D_BINDING_EXT = 0x8068
  TEXTURE_1D_STACK_BINDING_MESAX = 0x875D
  TEXTURE_1D_STACK_MESAX = 0x8759
  TEXTURE_2D = 0x0DE1
  TEXTURE_2D_ARRAY = 0x8C1A
  TEXTURE_2D_ARRAY_EXT = 0x8C1A
  TEXTURE_2D_BINDING_EXT = 0x8069
  TEXTURE_2D_MULTISAMPLE = 0x9100
  TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9102
  TEXTURE_2D_STACK_BINDING_MESAX = 0x875E
  TEXTURE_2D_STACK_MESAX = 0x875A
  TEXTURE_3D = 0x806F
  TEXTURE_3D_BINDING_EXT = 0x806A
  TEXTURE_3D_EXT = 0x806F
  TEXTURE_4DSIZE_SGIS = 0x8136
  TEXTURE_4D_BINDING_SGIS = 0x814F
  TEXTURE_4D_SGIS = 0x8134
  TEXTURE_ALPHA_SIZE = 0x805F
  TEXTURE_ALPHA_SIZE_EXT = 0x805F
  TEXTURE_ALPHA_TYPE = 0x8C13
  TEXTURE_ALPHA_TYPE_ARB = 0x8C13
  TEXTURE_APPLICATION_MODE_EXT = 0x834F
  TEXTURE_BASE_LEVEL = 0x813C
  TEXTURE_BASE_LEVEL_SGIS = 0x813C
  TEXTURE_BINDING_1D = 0x8068
  TEXTURE_BINDING_1D_ARRAY = 0x8C1C
  TEXTURE_BINDING_1D_ARRAY_EXT = 0x8C1C
  TEXTURE_BINDING_2D = 0x8069
  TEXTURE_BINDING_2D_ARRAY = 0x8C1D
  TEXTURE_BINDING_2D_ARRAY_EXT = 0x8C1D
  TEXTURE_BINDING_2D_MULTISAMPLE = 0x9104
  TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 0x9105
  TEXTURE_BINDING_3D = 0x806A
  TEXTURE_BINDING_BUFFER = 0x8C2C
  TEXTURE_BINDING_BUFFER_ARB = 0x8C2C
  TEXTURE_BINDING_BUFFER_EXT = 0x8C2C
  TEXTURE_BINDING_CUBE_MAP = 0x8514
  TEXTURE_BINDING_CUBE_MAP_ARB = 0x8514
  TEXTURE_BINDING_CUBE_MAP_ARRAY = 0x900A
  TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB = 0x900A
  TEXTURE_BINDING_CUBE_MAP_EXT = 0x8514
  TEXTURE_BINDING_RECTANGLE = 0x84F6
  TEXTURE_BINDING_RECTANGLE_ARB = 0x84F6
  TEXTURE_BINDING_RECTANGLE_NV = 0x84F6
  TEXTURE_BINDING_RENDERBUFFER_NV = 0x8E53
  TEXTURE_BLUE_SIZE = 0x805E
  TEXTURE_BLUE_SIZE_EXT = 0x805E
  TEXTURE_BLUE_TYPE = 0x8C12
  TEXTURE_BLUE_TYPE_ARB = 0x8C12
  TEXTURE_BORDER_COLOR = 0x1004
  TEXTURE_BORDER_VALUES_NV = 0x871A
  TEXTURE_BUFFER = 0x8C2A
  TEXTURE_BUFFER_ARB = 0x8C2A
  TEXTURE_BUFFER_DATA_STORE_BINDING = 0x8C2D
  TEXTURE_BUFFER_DATA_STORE_BINDING_ARB = 0x8C2D
  TEXTURE_BUFFER_DATA_STORE_BINDING_EXT = 0x8C2D
  TEXTURE_BUFFER_EXT = 0x8C2A
  TEXTURE_BUFFER_FORMAT_ARB = 0x8C2E
  TEXTURE_BUFFER_FORMAT_EXT = 0x8C2E
  TEXTURE_BUFFER_OFFSET = 0x919D
  TEXTURE_BUFFER_OFFSET_ALIGNMENT = 0x919F
  TEXTURE_BUFFER_SIZE = 0x919E
  TEXTURE_CLIPMAP_CENTER_SGIX = 0x8171
  TEXTURE_CLIPMAP_DEPTH_SGIX = 0x8176
  TEXTURE_CLIPMAP_FRAME_SGIX = 0x8172
  TEXTURE_CLIPMAP_LOD_OFFSET_SGIX = 0x8175
  TEXTURE_CLIPMAP_OFFSET_SGIX = 0x8173
  TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX = 0x8174
  TEXTURE_COLOR_SAMPLES_NV = 0x9046
  TEXTURE_COLOR_TABLE_SGI = 0x80BC
  TEXTURE_COLOR_WRITEMASK_SGIS = 0x81EF
  TEXTURE_COMPARE_FAIL_VALUE_ARB = 0x80BF
  TEXTURE_COMPARE_FUNC = 0x884D
  TEXTURE_COMPARE_FUNC_ARB = 0x884D
  TEXTURE_COMPARE_MODE = 0x884C
  TEXTURE_COMPARE_MODE_ARB = 0x884C
  TEXTURE_COMPARE_OPERATOR_SGIX = 0x819B
  TEXTURE_COMPARE_SGIX = 0x819A
  TEXTURE_COMPRESSED = 0x86A1
  TEXTURE_COMPRESSED_ARB = 0x86A1
  TEXTURE_COMPRESSED_BLOCK_HEIGHT = 0x82B2
  TEXTURE_COMPRESSED_BLOCK_SIZE = 0x82B3
  TEXTURE_COMPRESSED_BLOCK_WIDTH = 0x82B1
  TEXTURE_COMPRESSED_IMAGE_SIZE = 0x86A0
  TEXTURE_COMPRESSED_IMAGE_SIZE_ARB = 0x86A0
  TEXTURE_COMPRESSION_HINT = 0x84EF
  TEXTURE_COMPRESSION_HINT_ARB = 0x84EF
  TEXTURE_CONSTANT_DATA_SUNX = 0x81D6
  TEXTURE_COORD_ARRAY_ADDRESS_NV = 0x8F25
  TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB = 0x889A
  TEXTURE_COORD_ARRAY_COUNT_EXT = 0x808B
  TEXTURE_COORD_ARRAY_EXT = 0x8078
  TEXTURE_COORD_ARRAY_LENGTH_NV = 0x8F2F
  TEXTURE_COORD_ARRAY_LIST_IBM = 103074
  TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM = 103084
  TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F8
  TEXTURE_COORD_ARRAY_POINTER_EXT = 0x8092
  TEXTURE_COORD_ARRAY_SIZE_EXT = 0x8088
  TEXTURE_COORD_ARRAY_STRIDE_EXT = 0x808A
  TEXTURE_COORD_ARRAY_TYPE_EXT = 0x8089
  TEXTURE_COORD_NV = 0x8C79
  TEXTURE_COVERAGE_SAMPLES_NV = 0x9045
  TEXTURE_CUBE_MAP = 0x8513
  TEXTURE_CUBE_MAP_ARB = 0x8513
  TEXTURE_CUBE_MAP_ARRAY = 0x9009
  TEXTURE_CUBE_MAP_ARRAY_ARB = 0x9009
  TEXTURE_CUBE_MAP_EXT = 0x8513
  TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516
  TEXTURE_CUBE_MAP_NEGATIVE_X_ARB = 0x8516
  TEXTURE_CUBE_MAP_NEGATIVE_X_EXT = 0x8516
  TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518
  TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB = 0x8518
  TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT = 0x8518
  TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A
  TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB = 0x851A
  TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT = 0x851A
  TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515
  TEXTURE_CUBE_MAP_POSITIVE_X_ARB = 0x8515
  TEXTURE_CUBE_MAP_POSITIVE_X_EXT = 0x8515
  TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517
  TEXTURE_CUBE_MAP_POSITIVE_Y_ARB = 0x8517
  TEXTURE_CUBE_MAP_POSITIVE_Y_EXT = 0x8517
  TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519
  TEXTURE_CUBE_MAP_POSITIVE_Z_ARB = 0x8519
  TEXTURE_CUBE_MAP_POSITIVE_Z_EXT = 0x8519
  TEXTURE_CUBE_MAP_SEAMLESS = 0x884F
  TEXTURE_DEFORMATION_BIT_SGIX = 0x00000001
  TEXTURE_DEFORMATION_SGIX = 0x8195
  TEXTURE_DEPTH = 0x8071
  TEXTURE_DEPTH_EXT = 0x8071
  TEXTURE_DEPTH_SIZE = 0x884A
  TEXTURE_DEPTH_SIZE_ARB = 0x884A
  TEXTURE_DEPTH_TYPE = 0x8C16
  TEXTURE_DEPTH_TYPE_ARB = 0x8C16
  TEXTURE_DS_SIZE_NV = 0x871D
  TEXTURE_DT_SIZE_NV = 0x871E
  TEXTURE_ENV_BIAS_SGIX = 0x80BE
  TEXTURE_FETCH_BARRIER_BIT = 0x00000008
  TEXTURE_FETCH_BARRIER_BIT_EXT = 0x00000008
  TEXTURE_FILTER4_SIZE_SGIS = 0x8147
  TEXTURE_FILTER_CONTROL_EXT = 0x8500
  TEXTURE_FIXED_SAMPLE_LOCATIONS = 0x9107
  TEXTURE_FLOAT_COMPONENTS_NV = 0x888C
  TEXTURE_FREE_MEMORY_ATI = 0x87FC
  TEXTURE_GATHER = 0x82A2
  TEXTURE_GATHER_SHADOW = 0x82A3
  TEXTURE_GEQUAL_R_SGIX = 0x819D
  TEXTURE_GREEN_SIZE = 0x805D
  TEXTURE_GREEN_SIZE_EXT = 0x805D
  TEXTURE_GREEN_TYPE = 0x8C11
  TEXTURE_GREEN_TYPE_ARB = 0x8C11
  TEXTURE_HEIGHT = 0x1001
  TEXTURE_HI_SIZE_NV = 0x871B
  TEXTURE_IMAGE_FORMAT = 0x828F
  TEXTURE_IMAGE_TYPE = 0x8290
  TEXTURE_IMMUTABLE_FORMAT = 0x912F
  TEXTURE_IMMUTABLE_LEVELS = 0x82DF
  TEXTURE_INDEX_SIZE_EXT = 0x80ED
  TEXTURE_INTENSITY_SIZE_EXT = 0x8061
  TEXTURE_INTENSITY_TYPE_ARB = 0x8C15
  TEXTURE_INTERNAL_FORMAT = 0x1003
  TEXTURE_LEQUAL_R_SGIX = 0x819C
  TEXTURE_LIGHTING_MODE_HP = 0x8167
  TEXTURE_LIGHT_EXT = 0x8350
  TEXTURE_LOD_BIAS = 0x8501
  TEXTURE_LOD_BIAS_EXT = 0x8501
  TEXTURE_LOD_BIAS_R_SGIX = 0x8190
  TEXTURE_LOD_BIAS_S_SGIX = 0x818E
  TEXTURE_LOD_BIAS_T_SGIX = 0x818F
  TEXTURE_LO_SIZE_NV = 0x871C
  TEXTURE_LUMINANCE_SIZE_EXT = 0x8060
  TEXTURE_LUMINANCE_TYPE_ARB = 0x8C14
  TEXTURE_MAG_FILTER = 0x2800
  TEXTURE_MAG_SIZE_NV = 0x871F
  TEXTURE_MATERIAL_FACE_EXT = 0x8351
  TEXTURE_MATERIAL_PARAMETER_EXT = 0x8352
  TEXTURE_MAX_ANISOTROPY_EXT = 0x84FE
  TEXTURE_MAX_CLAMP_R_SGIX = 0x836B
  TEXTURE_MAX_CLAMP_S_SGIX = 0x8369
  TEXTURE_MAX_CLAMP_T_SGIX = 0x836A
  TEXTURE_MAX_LEVEL = 0x813D
  TEXTURE_MAX_LEVEL_SGIS = 0x813D
  TEXTURE_MAX_LOD = 0x813B
  TEXTURE_MAX_LOD_SGIS = 0x813B
  TEXTURE_MEMORY_LAYOUT_INTEL = 0x83FF
  TEXTURE_MIN_FILTER = 0x2801
  TEXTURE_MIN_LOD = 0x813A
  TEXTURE_MIN_LOD_SGIS = 0x813A
  TEXTURE_MULTI_BUFFER_HINT_SGIX = 0x812E
  TEXTURE_NORMAL_EXT = 0x85AF
  TEXTURE_POST_SPECULAR_HP = 0x8168
  TEXTURE_PRE_SPECULAR_HP = 0x8169
  TEXTURE_PRIORITY_EXT = 0x8066
  TEXTURE_RANGE_LENGTH_APPLE = 0x85B7
  TEXTURE_RANGE_POINTER_APPLE = 0x85B8
  TEXTURE_RECTANGLE = 0x84F5
  TEXTURE_RECTANGLE_ARB = 0x84F5
  TEXTURE_RECTANGLE_NV = 0x84F5
  TEXTURE_RED_SIZE = 0x805C
  TEXTURE_RED_SIZE_EXT = 0x805C
  TEXTURE_RED_TYPE = 0x8C10
  TEXTURE_RED_TYPE_ARB = 0x8C10
  TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV = 0x8E54
  TEXTURE_RENDERBUFFER_NV = 0x8E55
  TEXTURE_RESIDENT_EXT = 0x8067
  TEXTURE_SAMPLES = 0x9106
  TEXTURE_SHADER_NV = 0x86DE
  TEXTURE_SHADOW = 0x82A1
  TEXTURE_SHARED_SIZE = 0x8C3F
  TEXTURE_SHARED_SIZE_EXT = 0x8C3F
  TEXTURE_SPARSE_ARB = 0x91A6
  TEXTURE_SRGB_DECODE_EXT = 0x8A48
  TEXTURE_STENCIL_SIZE = 0x88F1
  TEXTURE_STENCIL_SIZE_EXT = 0x88F1
  TEXTURE_STORAGE_HINT_APPLE = 0x85BC
  TEXTURE_STORAGE_SPARSE_BIT_AMD = 0x00000001
  TEXTURE_SWIZZLE_A = 0x8E45
  TEXTURE_SWIZZLE_A_EXT = 0x8E45
  TEXTURE_SWIZZLE_B = 0x8E44
  TEXTURE_SWIZZLE_B_EXT = 0x8E44
  TEXTURE_SWIZZLE_G = 0x8E43
  TEXTURE_SWIZZLE_G_EXT = 0x8E43
  TEXTURE_SWIZZLE_R = 0x8E42
  TEXTURE_SWIZZLE_RGBA = 0x8E46
  TEXTURE_SWIZZLE_RGBA_EXT = 0x8E46
  TEXTURE_SWIZZLE_R_EXT = 0x8E42
  TEXTURE_TOO_LARGE_EXT = 0x8065
  TEXTURE_UNSIGNED_REMAP_MODE_NV = 0x888F
  TEXTURE_UPDATE_BARRIER_BIT = 0x00000100
  TEXTURE_UPDATE_BARRIER_BIT_EXT = 0x00000100
  TEXTURE_VIEW = 0x82B5
  TEXTURE_VIEW_MIN_LAYER = 0x82DD
  TEXTURE_VIEW_MIN_LEVEL = 0x82DB
  TEXTURE_VIEW_NUM_LAYERS = 0x82DE
  TEXTURE_VIEW_NUM_LEVELS = 0x82DC
  TEXTURE_WIDTH = 0x1000
  TEXTURE_WRAP_Q_SGIS = 0x8137
  TEXTURE_WRAP_R = 0x8072
  TEXTURE_WRAP_R_EXT = 0x8072
  TEXTURE_WRAP_S = 0x2802
  TEXTURE_WRAP_T = 0x2803
  TEXT_FRAGMENT_SHADER_ATI = 0x8200
  TIMEOUT_EXPIRED = 0x911B
  TIMEOUT_IGNORED = 0xFFFFFFFFFFFFFFFF
  TIMESTAMP = 0x8E28
  TIME_ELAPSED = 0x88BF
  TIME_ELAPSED_EXT = 0x88BF
  TOP_LEVEL_ARRAY_SIZE = 0x930C
  TOP_LEVEL_ARRAY_STRIDE = 0x930D
  TRACK_MATRIX_NV = 0x8648
  TRACK_MATRIX_TRANSFORM_NV = 0x8649
  TRANSFORM_FEEDBACK = 0x8E22
  TRANSFORM_FEEDBACK_ACTIVE = 0x8E24
  TRANSFORM_FEEDBACK_ATTRIBS_NV = 0x8C7E
  TRANSFORM_FEEDBACK_BARRIER_BIT = 0x00000800
  TRANSFORM_FEEDBACK_BARRIER_BIT_EXT = 0x00000800
  TRANSFORM_FEEDBACK_BINDING = 0x8E25
  TRANSFORM_FEEDBACK_BINDING_NV = 0x8E25
  TRANSFORM_FEEDBACK_BUFFER = 0x8C8E
  TRANSFORM_FEEDBACK_BUFFER_ACTIVE = 0x8E24
  TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV = 0x8E24
  TRANSFORM_FEEDBACK_BUFFER_BINDING = 0x8C8F
  TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT = 0x8C8F
  TRANSFORM_FEEDBACK_BUFFER_BINDING_NV = 0x8C8F
  TRANSFORM_FEEDBACK_BUFFER_EXT = 0x8C8E
  TRANSFORM_FEEDBACK_BUFFER_INDEX = 0x934B
  TRANSFORM_FEEDBACK_BUFFER_MODE = 0x8C7F
  TRANSFORM_FEEDBACK_BUFFER_MODE_EXT = 0x8C7F
  TRANSFORM_FEEDBACK_BUFFER_MODE_NV = 0x8C7F
  TRANSFORM_FEEDBACK_BUFFER_NV = 0x8C8E
  TRANSFORM_FEEDBACK_BUFFER_PAUSED = 0x8E23
  TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV = 0x8E23
  TRANSFORM_FEEDBACK_BUFFER_SIZE = 0x8C85
  TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT = 0x8C85
  TRANSFORM_FEEDBACK_BUFFER_SIZE_NV = 0x8C85
  TRANSFORM_FEEDBACK_BUFFER_START = 0x8C84
  TRANSFORM_FEEDBACK_BUFFER_START_EXT = 0x8C84
  TRANSFORM_FEEDBACK_BUFFER_START_NV = 0x8C84
  TRANSFORM_FEEDBACK_BUFFER_STRIDE = 0x934C
  TRANSFORM_FEEDBACK_NV = 0x8E22
  TRANSFORM_FEEDBACK_PAUSED = 0x8E23
  TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8C88
  TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT = 0x8C88
  TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV = 0x8C88
  TRANSFORM_FEEDBACK_RECORD_NV = 0x8C86
  TRANSFORM_FEEDBACK_VARYING = 0x92F4
  TRANSFORM_FEEDBACK_VARYINGS = 0x8C83
  TRANSFORM_FEEDBACK_VARYINGS_EXT = 0x8C83
  TRANSFORM_FEEDBACK_VARYINGS_NV = 0x8C83
  TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = 0x8C76
  TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT = 0x8C76
  TRANSFORM_HINT_APPLE = 0x85B1
  TRANSLATE_2D_NV = 0x9090
  TRANSLATE_3D_NV = 0x9091
  TRANSLATE_X_NV = 0x908E
  TRANSLATE_Y_NV = 0x908F
  TRANSPOSE_AFFINE_2D_NV = 0x9096
  TRANSPOSE_AFFINE_3D_NV = 0x9098
  TRANSPOSE_COLOR_MATRIX_ARB = 0x84E6
  TRANSPOSE_CURRENT_MATRIX_ARB = 0x88B7
  TRANSPOSE_MODELVIEW_MATRIX_ARB = 0x84E3
  TRANSPOSE_NV = 0x862C
  TRANSPOSE_PROGRAM_MATRIX_EXT = 0x8E2E
  TRANSPOSE_PROJECTION_MATRIX_ARB = 0x84E4
  TRANSPOSE_TEXTURE_MATRIX_ARB = 0x84E5
  TRIANGLES = 0x0004
  TRIANGLES_ADJACENCY = 0x000C
  TRIANGLES_ADJACENCY_ARB = 0x000C
  TRIANGLES_ADJACENCY_EXT = 0x000C
  TRIANGLE_FAN = 0x0006
  TRIANGLE_LIST_SUN = 0x81D7
  TRIANGLE_MESH_SUN = 0x8615
  TRIANGLE_STRIP = 0x0005
  TRIANGLE_STRIP_ADJACENCY = 0x000D
  TRIANGLE_STRIP_ADJACENCY_ARB = 0x000D
  TRIANGLE_STRIP_ADJACENCY_EXT = 0x000D
  TRIANGULAR_NV = 0x90A5
  TRUE = 1
  TYPE = 0x92FA
  UNCORRELATED_NV = 0x9282
  UNDEFINED_APPLE = 0x8A1C
  UNDEFINED_VERTEX = 0x8260
  UNIFORM = 0x92E1
  UNIFORM_ARRAY_STRIDE = 0x8A3C
  UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX = 0x92DA
  UNIFORM_BARRIER_BIT = 0x00000004
  UNIFORM_BARRIER_BIT_EXT = 0x00000004
  UNIFORM_BLOCK = 0x92E2
  UNIFORM_BLOCK_ACTIVE_UNIFORMS = 0x8A42
  UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 0x8A43
  UNIFORM_BLOCK_BINDING = 0x8A3F
  UNIFORM_BLOCK_DATA_SIZE = 0x8A40
  UNIFORM_BLOCK_INDEX = 0x8A3A
  UNIFORM_BLOCK_NAME_LENGTH = 0x8A41
  UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER = 0x90EC
  UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8A46
  UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = 0x8A45
  UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER = 0x84F0
  UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x84F1
  UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 0x8A44
  UNIFORM_BUFFER = 0x8A11
  UNIFORM_BUFFER_BINDING = 0x8A28
  UNIFORM_BUFFER_BINDING_EXT = 0x8DEF
  UNIFORM_BUFFER_EXT = 0x8DEE
  UNIFORM_BUFFER_OFFSET_ALIGNMENT = 0x8A34
  UNIFORM_BUFFER_SIZE = 0x8A2A
  UNIFORM_BUFFER_START = 0x8A29
  UNIFORM_IS_ROW_MAJOR = 0x8A3E
  UNIFORM_MATRIX_STRIDE = 0x8A3D
  UNIFORM_NAME_LENGTH = 0x8A39
  UNIFORM_OFFSET = 0x8A3B
  UNIFORM_SIZE = 0x8A38
  UNIFORM_TYPE = 0x8A37
  UNKNOWN_CONTEXT_RESET_ARB = 0x8255
  UNPACK_ALIGNMENT = 0x0CF5
  UNPACK_CLIENT_STORAGE_APPLE = 0x85B2
  UNPACK_CMYK_HINT_EXT = 0x800F
  UNPACK_COMPRESSED_BLOCK_DEPTH = 0x9129
  UNPACK_COMPRESSED_BLOCK_HEIGHT = 0x9128
  UNPACK_COMPRESSED_BLOCK_SIZE = 0x912A
  UNPACK_COMPRESSED_BLOCK_WIDTH = 0x9127
  UNPACK_CONSTANT_DATA_SUNX = 0x81D5
  UNPACK_IMAGE_DEPTH_SGIS = 0x8133
  UNPACK_IMAGE_HEIGHT = 0x806E
  UNPACK_IMAGE_HEIGHT_EXT = 0x806E
  UNPACK_LSB_FIRST = 0x0CF1
  UNPACK_RESAMPLE_OML = 0x8985
  UNPACK_RESAMPLE_SGIX = 0x842D
  UNPACK_ROW_BYTES_APPLE = 0x8A16
  UNPACK_ROW_LENGTH = 0x0CF2
  UNPACK_SKIP_IMAGES = 0x806D
  UNPACK_SKIP_IMAGES_EXT = 0x806D
  UNPACK_SKIP_PIXELS = 0x0CF4
  UNPACK_SKIP_ROWS = 0x0CF3
  UNPACK_SKIP_VOLUMES_SGIS = 0x8132
  UNPACK_SUBSAMPLE_RATE_SGIX = 0x85A1
  UNPACK_SWAP_BYTES = 0x0CF0
  UNSIGNALED = 0x9118
  UNSIGNED_BYTE = 0x1401
  UNSIGNED_BYTE_2_3_3_REV = 0x8362
  UNSIGNED_BYTE_3_3_2 = 0x8032
  UNSIGNED_BYTE_3_3_2_EXT = 0x8032
  UNSIGNED_IDENTITY_NV = 0x8536
  UNSIGNED_INT = 0x1405
  UNSIGNED_INT16_NV = 0x8FF0
  UNSIGNED_INT16_VEC2_NV = 0x8FF1
  UNSIGNED_INT16_VEC3_NV = 0x8FF2
  UNSIGNED_INT16_VEC4_NV = 0x8FF3
  UNSIGNED_INT64_AMD = 0x8BC2
  UNSIGNED_INT64_ARB = 0x140F
  UNSIGNED_INT64_NV = 0x140F
  UNSIGNED_INT64_VEC2_NV = 0x8FF5
  UNSIGNED_INT64_VEC3_NV = 0x8FF6
  UNSIGNED_INT64_VEC4_NV = 0x8FF7
  UNSIGNED_INT8_NV = 0x8FEC
  UNSIGNED_INT8_VEC2_NV = 0x8FED
  UNSIGNED_INT8_VEC3_NV = 0x8FEE
  UNSIGNED_INT8_VEC4_NV = 0x8FEF
  UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B
  UNSIGNED_INT_10F_11F_11F_REV_EXT = 0x8C3B
  UNSIGNED_INT_10_10_10_2 = 0x8036
  UNSIGNED_INT_10_10_10_2_EXT = 0x8036
  UNSIGNED_INT_24_8 = 0x84FA
  UNSIGNED_INT_24_8_EXT = 0x84FA
  UNSIGNED_INT_24_8_NV = 0x84FA
  UNSIGNED_INT_2_10_10_10_REV = 0x8368
  UNSIGNED_INT_5_9_9_9_REV = 0x8C3E
  UNSIGNED_INT_5_9_9_9_REV_EXT = 0x8C3E
  UNSIGNED_INT_8_8_8_8 = 0x8035
  UNSIGNED_INT_8_8_8_8_EXT = 0x8035
  UNSIGNED_INT_8_8_8_8_REV = 0x8367
  UNSIGNED_INT_8_8_S8_S8_REV_NV = 0x86DB
  UNSIGNED_INT_ATOMIC_COUNTER = 0x92DB
  UNSIGNED_INT_IMAGE_1D = 0x9062
  UNSIGNED_INT_IMAGE_1D_ARRAY = 0x9068
  UNSIGNED_INT_IMAGE_1D_ARRAY_EXT = 0x9068
  UNSIGNED_INT_IMAGE_1D_EXT = 0x9062
  UNSIGNED_INT_IMAGE_2D = 0x9063
  UNSIGNED_INT_IMAGE_2D_ARRAY = 0x9069
  UNSIGNED_INT_IMAGE_2D_ARRAY_EXT = 0x9069
  UNSIGNED_INT_IMAGE_2D_EXT = 0x9063
  UNSIGNED_INT_IMAGE_2D_MULTISAMPLE = 0x906B
  UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x906C
  UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 0x906C
  UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT = 0x906B
  UNSIGNED_INT_IMAGE_2D_RECT = 0x9065
  UNSIGNED_INT_IMAGE_2D_RECT_EXT = 0x9065
  UNSIGNED_INT_IMAGE_3D = 0x9064
  UNSIGNED_INT_IMAGE_3D_EXT = 0x9064
  UNSIGNED_INT_IMAGE_BUFFER = 0x9067
  UNSIGNED_INT_IMAGE_BUFFER_EXT = 0x9067
  UNSIGNED_INT_IMAGE_CUBE = 0x9066
  UNSIGNED_INT_IMAGE_CUBE_EXT = 0x9066
  UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY = 0x906A
  UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT = 0x906A
  UNSIGNED_INT_S8_S8_8_8_NV = 0x86DA
  UNSIGNED_INT_SAMPLER_1D = 0x8DD1
  UNSIGNED_INT_SAMPLER_1D_ARRAY = 0x8DD6
  UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT = 0x8DD6
  UNSIGNED_INT_SAMPLER_1D_EXT = 0x8DD1
  UNSIGNED_INT_SAMPLER_2D = 0x8DD2
  UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7
  UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT = 0x8DD7
  UNSIGNED_INT_SAMPLER_2D_EXT = 0x8DD2
  UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = 0x910A
  UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910D
  UNSIGNED_INT_SAMPLER_2D_RECT = 0x8DD5
  UNSIGNED_INT_SAMPLER_2D_RECT_EXT = 0x8DD5
  UNSIGNED_INT_SAMPLER_3D = 0x8DD3
  UNSIGNED_INT_SAMPLER_3D_EXT = 0x8DD3
  UNSIGNED_INT_SAMPLER_BUFFER = 0x8DD8
  UNSIGNED_INT_SAMPLER_BUFFER_AMD = 0x9003
  UNSIGNED_INT_SAMPLER_BUFFER_EXT = 0x8DD8
  UNSIGNED_INT_SAMPLER_CUBE = 0x8DD4
  UNSIGNED_INT_SAMPLER_CUBE_EXT = 0x8DD4
  UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900F
  UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB = 0x900F
  UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV = 0x8E58
  UNSIGNED_INT_VEC2 = 0x8DC6
  UNSIGNED_INT_VEC2_EXT = 0x8DC6
  UNSIGNED_INT_VEC3 = 0x8DC7
  UNSIGNED_INT_VEC3_EXT = 0x8DC7
  UNSIGNED_INT_VEC4 = 0x8DC8
  UNSIGNED_INT_VEC4_EXT = 0x8DC8
  UNSIGNED_INVERT_NV = 0x8537
  UNSIGNED_NORMALIZED = 0x8C17
  UNSIGNED_NORMALIZED_ARB = 0x8C17
  UNSIGNED_SHORT = 0x1403
  UNSIGNED_SHORT_1_5_5_5_REV = 0x8366
  UNSIGNED_SHORT_4_4_4_4 = 0x8033
  UNSIGNED_SHORT_4_4_4_4_EXT = 0x8033
  UNSIGNED_SHORT_4_4_4_4_REV = 0x8365
  UNSIGNED_SHORT_5_5_5_1 = 0x8034
  UNSIGNED_SHORT_5_5_5_1_EXT = 0x8034
  UNSIGNED_SHORT_5_6_5 = 0x8363
  UNSIGNED_SHORT_5_6_5_REV = 0x8364
  UNSIGNED_SHORT_8_8_APPLE = 0x85BA
  UNSIGNED_SHORT_8_8_MESA = 0x85BA
  UNSIGNED_SHORT_8_8_REV_APPLE = 0x85BB
  UNSIGNED_SHORT_8_8_REV_MESA = 0x85BB
  UPPER_LEFT = 0x8CA2
  USE_MISSING_GLYPH_NV = 0x90AA
  UTF16_NV = 0x909B
  UTF8_NV = 0x909A
  VALIDATE_STATUS = 0x8B83
  VARIABLE_A_NV = 0x8523
  VARIABLE_B_NV = 0x8524
  VARIABLE_C_NV = 0x8525
  VARIABLE_D_NV = 0x8526
  VARIABLE_E_NV = 0x8527
  VARIABLE_F_NV = 0x8528
  VARIABLE_G_NV = 0x8529
  VARIANT_ARRAY_EXT = 0x87E8
  VARIANT_ARRAY_POINTER_EXT = 0x87E9
  VARIANT_ARRAY_STRIDE_EXT = 0x87E6
  VARIANT_ARRAY_TYPE_EXT = 0x87E7
  VARIANT_DATATYPE_EXT = 0x87E5
  VARIANT_EXT = 0x87C1
  VARIANT_VALUE_EXT = 0x87E4
  VBO_FREE_MEMORY_ATI = 0x87FB
  VECTOR_EXT = 0x87BF
  VENDOR = 0x1F00
  VERSION = 0x1F02
  VERTEX23_BIT_PGI = 0x00000004
  VERTEX4_BIT_PGI = 0x00000008
  VERTEX_ARRAY = 0x8074
  VERTEX_ARRAY_ADDRESS_NV = 0x8F21
  VERTEX_ARRAY_BINDING = 0x85B5
  VERTEX_ARRAY_BINDING_APPLE = 0x85B5
  VERTEX_ARRAY_BUFFER_BINDING_ARB = 0x8896
  VERTEX_ARRAY_COUNT_EXT = 0x807D
  VERTEX_ARRAY_EXT = 0x8074
  VERTEX_ARRAY_KHR = 0x8074
  VERTEX_ARRAY_LENGTH_NV = 0x8F2B
  VERTEX_ARRAY_LIST_IBM = 103070
  VERTEX_ARRAY_LIST_STRIDE_IBM = 103080
  VERTEX_ARRAY_OBJECT_AMD = 0x9154
  VERTEX_ARRAY_OBJECT_EXT = 0x9154
  VERTEX_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F5
  VERTEX_ARRAY_POINTER_EXT = 0x808E
  VERTEX_ARRAY_RANGE_APPLE = 0x851D
  VERTEX_ARRAY_RANGE_LENGTH_APPLE = 0x851E
  VERTEX_ARRAY_RANGE_LENGTH_NV = 0x851E
  VERTEX_ARRAY_RANGE_NV = 0x851D
  VERTEX_ARRAY_RANGE_POINTER_APPLE = 0x8521
  VERTEX_ARRAY_RANGE_POINTER_NV = 0x8521
  VERTEX_ARRAY_RANGE_VALID_NV = 0x851F
  VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV = 0x8533
  VERTEX_ARRAY_SIZE_EXT = 0x807A
  VERTEX_ARRAY_STORAGE_HINT_APPLE = 0x851F
  VERTEX_ARRAY_STRIDE_EXT = 0x807C
  VERTEX_ARRAY_TYPE_EXT = 0x807B
  VERTEX_ATTRIB_ARRAY0_NV = 0x8650
  VERTEX_ATTRIB_ARRAY10_NV = 0x865A
  VERTEX_ATTRIB_ARRAY11_NV = 0x865B
  VERTEX_ATTRIB_ARRAY12_NV = 0x865C
  VERTEX_ATTRIB_ARRAY13_NV = 0x865D
  VERTEX_ATTRIB_ARRAY14_NV = 0x865E
  VERTEX_ATTRIB_ARRAY15_NV = 0x865F
  VERTEX_ATTRIB_ARRAY1_NV = 0x8651
  VERTEX_ATTRIB_ARRAY2_NV = 0x8652
  VERTEX_ATTRIB_ARRAY3_NV = 0x8653
  VERTEX_ATTRIB_ARRAY4_NV = 0x8654
  VERTEX_ATTRIB_ARRAY5_NV = 0x8655
  VERTEX_ATTRIB_ARRAY6_NV = 0x8656
  VERTEX_ATTRIB_ARRAY7_NV = 0x8657
  VERTEX_ATTRIB_ARRAY8_NV = 0x8658
  VERTEX_ATTRIB_ARRAY9_NV = 0x8659
  VERTEX_ATTRIB_ARRAY_ADDRESS_NV = 0x8F20
  VERTEX_ATTRIB_ARRAY_BARRIER_BIT = 0x00000001
  VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT = 0x00000001
  VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F
  VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB = 0x889F
  VERTEX_ATTRIB_ARRAY_DIVISOR = 0x88FE
  VERTEX_ATTRIB_ARRAY_DIVISOR_ARB = 0x88FE
  VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622
  VERTEX_ATTRIB_ARRAY_ENABLED_ARB = 0x8622
  VERTEX_ATTRIB_ARRAY_INTEGER = 0x88FD
  VERTEX_ATTRIB_ARRAY_INTEGER_EXT = 0x88FD
  VERTEX_ATTRIB_ARRAY_INTEGER_NV = 0x88FD
  VERTEX_ATTRIB_ARRAY_LENGTH_NV = 0x8F2A
  VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A
  VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB = 0x886A
  VERTEX_ATTRIB_ARRAY_POINTER = 0x8645
  VERTEX_ATTRIB_ARRAY_POINTER_ARB = 0x8645
  VERTEX_ATTRIB_ARRAY_SIZE = 0x8623
  VERTEX_ATTRIB_ARRAY_SIZE_ARB = 0x8623
  VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624
  VERTEX_ATTRIB_ARRAY_STRIDE_ARB = 0x8624
  VERTEX_ATTRIB_ARRAY_TYPE = 0x8625
  VERTEX_ATTRIB_ARRAY_TYPE_ARB = 0x8625
  VERTEX_ATTRIB_ARRAY_UNIFIED_NV = 0x8F1E
  VERTEX_ATTRIB_BINDING = 0x82D4
  VERTEX_ATTRIB_MAP1_APPLE = 0x8A00
  VERTEX_ATTRIB_MAP1_COEFF_APPLE = 0x8A03
  VERTEX_ATTRIB_MAP1_DOMAIN_APPLE = 0x8A05
  VERTEX_ATTRIB_MAP1_ORDER_APPLE = 0x8A04
  VERTEX_ATTRIB_MAP1_SIZE_APPLE = 0x8A02
  VERTEX_ATTRIB_MAP2_APPLE = 0x8A01
  VERTEX_ATTRIB_MAP2_COEFF_APPLE = 0x8A07
  VERTEX_ATTRIB_MAP2_DOMAIN_APPLE = 0x8A09
  VERTEX_ATTRIB_MAP2_ORDER_APPLE = 0x8A08
  VERTEX_ATTRIB_MAP2_SIZE_APPLE = 0x8A06
  VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D5
  VERTEX_BINDING_DIVISOR = 0x82D6
  VERTEX_BINDING_OFFSET = 0x82D7
  VERTEX_BINDING_STRIDE = 0x82D8
  VERTEX_BLEND_ARB = 0x86A7
  VERTEX_CONSISTENT_HINT_PGI = 0x1A22B
  VERTEX_DATA_HINT_PGI = 0x1A22A
  VERTEX_ELEMENT_SWIZZLE_AMD = 0x91A4
  VERTEX_ID_NV = 0x8C7B
  VERTEX_ID_SWIZZLE_AMD = 0x91A5
  VERTEX_PRECLIP_HINT_SGIX = 0x83EF
  VERTEX_PRECLIP_SGIX = 0x83EE
  VERTEX_PROGRAM_ARB = 0x8620
  VERTEX_PROGRAM_BINDING_NV = 0x864A
  VERTEX_PROGRAM_NV = 0x8620
  VERTEX_PROGRAM_PARAMETER_BUFFER_NV = 0x8DA2
  VERTEX_PROGRAM_POINT_SIZE = 0x8642
  VERTEX_PROGRAM_POINT_SIZE_ARB = 0x8642
  VERTEX_PROGRAM_POINT_SIZE_NV = 0x8642
  VERTEX_PROGRAM_TWO_SIDE_ARB = 0x8643
  VERTEX_PROGRAM_TWO_SIDE_NV = 0x8643
  VERTEX_SHADER = 0x8B31
  VERTEX_SHADER_ARB = 0x8B31
  VERTEX_SHADER_BINDING_EXT = 0x8781
  VERTEX_SHADER_BIT = 0x00000001
  VERTEX_SHADER_BIT_EXT = 0x00000001
  VERTEX_SHADER_EXT = 0x8780
  VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87CF
  VERTEX_SHADER_INVARIANTS_EXT = 0x87D1
  VERTEX_SHADER_LOCALS_EXT = 0x87D3
  VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87D2
  VERTEX_SHADER_OPTIMIZED_EXT = 0x87D4
  VERTEX_SHADER_VARIANTS_EXT = 0x87D0
  VERTEX_SOURCE_ATI = 0x8774
  VERTEX_STATE_PROGRAM_NV = 0x8621
  VERTEX_STREAM0_ATI = 0x876C
  VERTEX_STREAM1_ATI = 0x876D
  VERTEX_STREAM2_ATI = 0x876E
  VERTEX_STREAM3_ATI = 0x876F
  VERTEX_STREAM4_ATI = 0x8770
  VERTEX_STREAM5_ATI = 0x8771
  VERTEX_STREAM6_ATI = 0x8772
  VERTEX_STREAM7_ATI = 0x8773
  VERTEX_SUBROUTINE = 0x92E8
  VERTEX_SUBROUTINE_UNIFORM = 0x92EE
  VERTEX_TEXTURE = 0x829B
  VERTEX_WEIGHTING_EXT = 0x8509
  VERTEX_WEIGHT_ARRAY_EXT = 0x850C
  VERTEX_WEIGHT_ARRAY_POINTER_EXT = 0x8510
  VERTEX_WEIGHT_ARRAY_SIZE_EXT = 0x850D
  VERTEX_WEIGHT_ARRAY_STRIDE_EXT = 0x850F
  VERTEX_WEIGHT_ARRAY_TYPE_EXT = 0x850E
  VERTICAL_LINE_TO_NV = 0x08
  VIBRANCE_BIAS_NV = 0x8719
  VIBRANCE_SCALE_NV = 0x8713
  VIDEO_BUFFER_BINDING_NV = 0x9021
  VIDEO_BUFFER_INTERNAL_FORMAT_NV = 0x902D
  VIDEO_BUFFER_NV = 0x9020
  VIDEO_BUFFER_PITCH_NV = 0x9028
  VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV = 0x903B
  VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV = 0x903A
  VIDEO_CAPTURE_FRAME_HEIGHT_NV = 0x9039
  VIDEO_CAPTURE_FRAME_WIDTH_NV = 0x9038
  VIDEO_CAPTURE_SURFACE_ORIGIN_NV = 0x903C
  VIDEO_CAPTURE_TO_422_SUPPORTED_NV = 0x9026
  VIDEO_COLOR_CONVERSION_MATRIX_NV = 0x9029
  VIDEO_COLOR_CONVERSION_MAX_NV = 0x902A
  VIDEO_COLOR_CONVERSION_MIN_NV = 0x902B
  VIDEO_COLOR_CONVERSION_OFFSET_NV = 0x902C
  VIEWPORT = 0x0BA2
  VIEWPORT_BOUNDS_RANGE = 0x825D
  VIEWPORT_INDEX_PROVOKING_VERTEX = 0x825F
  VIEWPORT_SUBPIXEL_BITS = 0x825C
  VIEW_CLASS_128_BITS = 0x82C4
  VIEW_CLASS_16_BITS = 0x82CA
  VIEW_CLASS_24_BITS = 0x82C9
  VIEW_CLASS_32_BITS = 0x82C8
  VIEW_CLASS_48_BITS = 0x82C7
  VIEW_CLASS_64_BITS = 0x82C6
  VIEW_CLASS_8_BITS = 0x82CB
  VIEW_CLASS_96_BITS = 0x82C5
  VIEW_CLASS_BPTC_FLOAT = 0x82D3
  VIEW_CLASS_BPTC_UNORM = 0x82D2
  VIEW_CLASS_RGTC1_RED = 0x82D0
  VIEW_CLASS_RGTC2_RG = 0x82D1
  VIEW_CLASS_S3TC_DXT1_RGB = 0x82CC
  VIEW_CLASS_S3TC_DXT1_RGBA = 0x82CD
  VIEW_CLASS_S3TC_DXT3_RGBA = 0x82CE
  VIEW_CLASS_S3TC_DXT5_RGBA = 0x82CF
  VIEW_COMPATIBILITY_CLASS = 0x82B6
  VIRTUAL_PAGE_SIZE_INDEX_ARB = 0x91A7
  VIRTUAL_PAGE_SIZE_X_AMD = 0x9195
  VIRTUAL_PAGE_SIZE_X_ARB = 0x9195
  VIRTUAL_PAGE_SIZE_Y_AMD = 0x9196
  VIRTUAL_PAGE_SIZE_Y_ARB = 0x9196
  VIRTUAL_PAGE_SIZE_Z_AMD = 0x9197
  VIRTUAL_PAGE_SIZE_Z_ARB = 0x9197
  VIVIDLIGHT_NV = 0x92A6
  VOLATILE_APPLE = 0x8A1A
  WAIT_FAILED = 0x911D
  WARPS_PER_SM_NV = 0x933A
  WARP_SIZE_NV = 0x9339
  WEIGHT_ARRAY_ARB = 0x86AD
  WEIGHT_ARRAY_BUFFER_BINDING_ARB = 0x889E
  WEIGHT_ARRAY_POINTER_ARB = 0x86AC
  WEIGHT_ARRAY_SIZE_ARB = 0x86AB
  WEIGHT_ARRAY_STRIDE_ARB = 0x86AA
  WEIGHT_ARRAY_TYPE_ARB = 0x86A9
  WEIGHT_SUM_UNITY_ARB = 0x86A6
  WIDE_LINE_HINT_PGI = 0x1A222
  WRAP_BORDER_SUN = 0x81D4
  WRITE_DISCARD_NV = 0x88BE
  WRITE_ONLY = 0x88B9
  WRITE_ONLY_ARB = 0x88B9
  WRITE_PIXEL_DATA_RANGE_LENGTH_NV = 0x887A
  WRITE_PIXEL_DATA_RANGE_NV = 0x8878
  WRITE_PIXEL_DATA_RANGE_POINTER_NV = 0x887C
  W_EXT = 0x87D8
  XOR = 0x1506
  XOR_NV = 0x1506
  X_EXT = 0x87D5
  YCBAYCR8A_4224_NV = 0x9032
  YCBCR_422_APPLE = 0x85B9
  YCBCR_MESA = 0x8757
  YCBYCR8_422_NV = 0x9031
  YCRCBA_SGIX = 0x8319
  YCRCB_422_SGIX = 0x81BB
  YCRCB_444_SGIX = 0x81BC
  YCRCB_SGIX = 0x8318
  Y_EXT = 0x87D6
  Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV = 0x9036
  Z4Y12Z4CB12Z4CR12_444_NV = 0x9037
  Z4Y12Z4CB12Z4Y12Z4CR12_422_NV = 0x9035
  Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV = 0x9034
  Z6Y10Z6CB10Z6Y10Z6CR10_422_NV = 0x9033
  ZERO = 0
  ZERO_EXT = 0x87DD
  Z_EXT = 0x87D7
)
var (
  pAccumxOES C.PACCUMXOES
  pActiveProgramEXT C.PACTIVEPROGRAMEXT
  pActiveShaderProgram C.PACTIVESHADERPROGRAM
  pActiveShaderProgramEXT C.PACTIVESHADERPROGRAMEXT
  pActiveStencilFaceEXT C.PACTIVESTENCILFACEEXT
  pActiveTexture C.PACTIVETEXTURE
  pActiveTextureARB C.PACTIVETEXTUREARB
  pActiveVaryingNV C.PACTIVEVARYINGNV
  pAlphaFragmentOp1ATI C.PALPHAFRAGMENTOP1ATI
  pAlphaFragmentOp2ATI C.PALPHAFRAGMENTOP2ATI
  pAlphaFragmentOp3ATI C.PALPHAFRAGMENTOP3ATI
  pAlphaFuncxOES C.PALPHAFUNCXOES
  pApplyTextureEXT C.PAPPLYTEXTUREEXT
  pAreProgramsResidentNV C.PAREPROGRAMSRESIDENTNV
  pAreTexturesResidentEXT C.PARETEXTURESRESIDENTEXT
  pArrayElementEXT C.PARRAYELEMENTEXT
  pArrayObjectATI C.PARRAYOBJECTATI
  pAsyncMarkerSGIX C.PASYNCMARKERSGIX
  pAttachObjectARB C.PATTACHOBJECTARB
  pAttachShader C.PATTACHSHADER
  pBeginConditionalRender C.PBEGINCONDITIONALRENDER
  pBeginConditionalRenderNV C.PBEGINCONDITIONALRENDERNV
  pBeginConditionalRenderNVX C.PBEGINCONDITIONALRENDERNVX
  pBeginFragmentShaderATI C.PBEGINFRAGMENTSHADERATI
  pBeginOcclusionQueryNV C.PBEGINOCCLUSIONQUERYNV
  pBeginPerfMonitorAMD C.PBEGINPERFMONITORAMD
  pBeginPerfQueryINTEL C.PBEGINPERFQUERYINTEL
  pBeginQuery C.PBEGINQUERY
  pBeginQueryARB C.PBEGINQUERYARB
  pBeginQueryIndexed C.PBEGINQUERYINDEXED
  pBeginTransformFeedback C.PBEGINTRANSFORMFEEDBACK
  pBeginTransformFeedbackEXT C.PBEGINTRANSFORMFEEDBACKEXT
  pBeginTransformFeedbackNV C.PBEGINTRANSFORMFEEDBACKNV
  pBeginVertexShaderEXT C.PBEGINVERTEXSHADEREXT
  pBeginVideoCaptureNV C.PBEGINVIDEOCAPTURENV
  pBindAttribLocation C.PBINDATTRIBLOCATION
  pBindAttribLocationARB C.PBINDATTRIBLOCATIONARB
  pBindBuffer C.PBINDBUFFER
  pBindBufferARB C.PBINDBUFFERARB
  pBindBufferBase C.PBINDBUFFERBASE
  pBindBufferBaseEXT C.PBINDBUFFERBASEEXT
  pBindBufferBaseNV C.PBINDBUFFERBASENV
  pBindBufferOffsetEXT C.PBINDBUFFEROFFSETEXT
  pBindBufferOffsetNV C.PBINDBUFFEROFFSETNV
  pBindBufferRange C.PBINDBUFFERRANGE
  pBindBufferRangeEXT C.PBINDBUFFERRANGEEXT
  pBindBufferRangeNV C.PBINDBUFFERRANGENV
  pBindBuffersBase C.PBINDBUFFERSBASE
  pBindBuffersRange C.PBINDBUFFERSRANGE
  pBindFragDataLocation C.PBINDFRAGDATALOCATION
  pBindFragDataLocationEXT C.PBINDFRAGDATALOCATIONEXT
  pBindFragDataLocationIndexed C.PBINDFRAGDATALOCATIONINDEXED
  pBindFragmentShaderATI C.PBINDFRAGMENTSHADERATI
  pBindFramebuffer C.PBINDFRAMEBUFFER
  pBindFramebufferEXT C.PBINDFRAMEBUFFEREXT
  pBindImageTexture C.PBINDIMAGETEXTURE
  pBindImageTextureEXT C.PBINDIMAGETEXTUREEXT
  pBindImageTextures C.PBINDIMAGETEXTURES
  pBindLightParameterEXT C.PBINDLIGHTPARAMETEREXT
  pBindMaterialParameterEXT C.PBINDMATERIALPARAMETEREXT
  pBindMultiTextureEXT C.PBINDMULTITEXTUREEXT
  pBindParameterEXT C.PBINDPARAMETEREXT
  pBindProgramARB C.PBINDPROGRAMARB
  pBindProgramNV C.PBINDPROGRAMNV
  pBindProgramPipeline C.PBINDPROGRAMPIPELINE
  pBindProgramPipelineEXT C.PBINDPROGRAMPIPELINEEXT
  pBindRenderbuffer C.PBINDRENDERBUFFER
  pBindRenderbufferEXT C.PBINDRENDERBUFFEREXT
  pBindSampler C.PBINDSAMPLER
  pBindSamplers C.PBINDSAMPLERS
  pBindTexGenParameterEXT C.PBINDTEXGENPARAMETEREXT
  pBindTexture C.PBINDTEXTURE
  pBindTextureEXT C.PBINDTEXTUREEXT
  pBindTextureUnitParameterEXT C.PBINDTEXTUREUNITPARAMETEREXT
  pBindTextures C.PBINDTEXTURES
  pBindTransformFeedback C.PBINDTRANSFORMFEEDBACK
  pBindTransformFeedbackNV C.PBINDTRANSFORMFEEDBACKNV
  pBindVertexArray C.PBINDVERTEXARRAY
  pBindVertexArrayAPPLE C.PBINDVERTEXARRAYAPPLE
  pBindVertexBuffer C.PBINDVERTEXBUFFER
  pBindVertexBuffers C.PBINDVERTEXBUFFERS
  pBindVertexShaderEXT C.PBINDVERTEXSHADEREXT
  pBindVideoCaptureStreamBufferNV C.PBINDVIDEOCAPTURESTREAMBUFFERNV
  pBindVideoCaptureStreamTextureNV C.PBINDVIDEOCAPTURESTREAMTEXTURENV
  pBinormal3bEXT C.PBINORMAL3BEXT
  pBinormal3bvEXT C.PBINORMAL3BVEXT
  pBinormal3dEXT C.PBINORMAL3DEXT
  pBinormal3dvEXT C.PBINORMAL3DVEXT
  pBinormal3fEXT C.PBINORMAL3FEXT
  pBinormal3fvEXT C.PBINORMAL3FVEXT
  pBinormal3iEXT C.PBINORMAL3IEXT
  pBinormal3ivEXT C.PBINORMAL3IVEXT
  pBinormal3sEXT C.PBINORMAL3SEXT
  pBinormal3svEXT C.PBINORMAL3SVEXT
  pBinormalPointerEXT C.PBINORMALPOINTEREXT
  pBitmapxOES C.PBITMAPXOES
  pBlendBarrierNV C.PBLENDBARRIERNV
  pBlendColor C.PBLENDCOLOR
  pBlendColorEXT C.PBLENDCOLOREXT
  pBlendColorxOES C.PBLENDCOLORXOES
  pBlendEquation C.PBLENDEQUATION
  pBlendEquationEXT C.PBLENDEQUATIONEXT
  pBlendEquationIndexedAMD C.PBLENDEQUATIONINDEXEDAMD
  pBlendEquationSeparate C.PBLENDEQUATIONSEPARATE
  pBlendEquationSeparateEXT C.PBLENDEQUATIONSEPARATEEXT
  pBlendEquationSeparateIndexedAMD C.PBLENDEQUATIONSEPARATEINDEXEDAMD
  pBlendEquationSeparatei C.PBLENDEQUATIONSEPARATEI
  pBlendEquationSeparateiARB C.PBLENDEQUATIONSEPARATEIARB
  pBlendEquationi C.PBLENDEQUATIONI
  pBlendEquationiARB C.PBLENDEQUATIONIARB
  pBlendFunc C.PBLENDFUNC
  pBlendFuncIndexedAMD C.PBLENDFUNCINDEXEDAMD
  pBlendFuncSeparate C.PBLENDFUNCSEPARATE
  pBlendFuncSeparateEXT C.PBLENDFUNCSEPARATEEXT
  pBlendFuncSeparateINGR C.PBLENDFUNCSEPARATEINGR
  pBlendFuncSeparateIndexedAMD C.PBLENDFUNCSEPARATEINDEXEDAMD
  pBlendFuncSeparatei C.PBLENDFUNCSEPARATEI
  pBlendFuncSeparateiARB C.PBLENDFUNCSEPARATEIARB
  pBlendFunci C.PBLENDFUNCI
  pBlendFunciARB C.PBLENDFUNCIARB
  pBlendParameteriNV C.PBLENDPARAMETERINV
  pBlitFramebuffer C.PBLITFRAMEBUFFER
  pBlitFramebufferEXT C.PBLITFRAMEBUFFEREXT
  pBufferAddressRangeNV C.PBUFFERADDRESSRANGENV
  pBufferData C.PBUFFERDATA
  pBufferDataARB C.PBUFFERDATAARB
  pBufferParameteriAPPLE C.PBUFFERPARAMETERIAPPLE
  pBufferStorage C.PBUFFERSTORAGE
  pBufferSubData C.PBUFFERSUBDATA
  pBufferSubDataARB C.PBUFFERSUBDATAARB
  pCheckFramebufferStatus C.PCHECKFRAMEBUFFERSTATUS
  pCheckFramebufferStatusEXT C.PCHECKFRAMEBUFFERSTATUSEXT
  pCheckNamedFramebufferStatusEXT C.PCHECKNAMEDFRAMEBUFFERSTATUSEXT
  pClampColor C.PCLAMPCOLOR
  pClampColorARB C.PCLAMPCOLORARB
  pClear C.PCLEAR
  pClearAccumxOES C.PCLEARACCUMXOES
  pClearBufferData C.PCLEARBUFFERDATA
  pClearBufferSubData C.PCLEARBUFFERSUBDATA
  pClearBufferfi C.PCLEARBUFFERFI
  pClearBufferfv C.PCLEARBUFFERFV
  pClearBufferiv C.PCLEARBUFFERIV
  pClearBufferuiv C.PCLEARBUFFERUIV
  pClearColor C.PCLEARCOLOR
  pClearColorIiEXT C.PCLEARCOLORIIEXT
  pClearColorIuiEXT C.PCLEARCOLORIUIEXT
  pClearColorxOES C.PCLEARCOLORXOES
  pClearDepth C.PCLEARDEPTH
  pClearDepthdNV C.PCLEARDEPTHDNV
  pClearDepthf C.PCLEARDEPTHF
  pClearDepthfOES C.PCLEARDEPTHFOES
  pClearDepthxOES C.PCLEARDEPTHXOES
  pClearNamedBufferDataEXT C.PCLEARNAMEDBUFFERDATAEXT
  pClearNamedBufferSubDataEXT C.PCLEARNAMEDBUFFERSUBDATAEXT
  pClearStencil C.PCLEARSTENCIL
  pClearTexImage C.PCLEARTEXIMAGE
  pClearTexSubImage C.PCLEARTEXSUBIMAGE
  pClientActiveTextureARB C.PCLIENTACTIVETEXTUREARB
  pClientActiveVertexStreamATI C.PCLIENTACTIVEVERTEXSTREAMATI
  pClientAttribDefaultEXT C.PCLIENTATTRIBDEFAULTEXT
  pClientWaitSync C.PCLIENTWAITSYNC
  pClipPlanefOES C.PCLIPPLANEFOES
  pClipPlanexOES C.PCLIPPLANEXOES
  pColor3fVertex3fSUN C.PCOLOR3FVERTEX3FSUN
  pColor3fVertex3fvSUN C.PCOLOR3FVERTEX3FVSUN
  pColor3hNV C.PCOLOR3HNV
  pColor3hvNV C.PCOLOR3HVNV
  pColor3xOES C.PCOLOR3XOES
  pColor3xvOES C.PCOLOR3XVOES
  pColor4fNormal3fVertex3fSUN C.PCOLOR4FNORMAL3FVERTEX3FSUN
  pColor4fNormal3fVertex3fvSUN C.PCOLOR4FNORMAL3FVERTEX3FVSUN
  pColor4hNV C.PCOLOR4HNV
  pColor4hvNV C.PCOLOR4HVNV
  pColor4ubVertex2fSUN C.PCOLOR4UBVERTEX2FSUN
  pColor4ubVertex2fvSUN C.PCOLOR4UBVERTEX2FVSUN
  pColor4ubVertex3fSUN C.PCOLOR4UBVERTEX3FSUN
  pColor4ubVertex3fvSUN C.PCOLOR4UBVERTEX3FVSUN
  pColor4xOES C.PCOLOR4XOES
  pColor4xvOES C.PCOLOR4XVOES
  pColorFormatNV C.PCOLORFORMATNV
  pColorFragmentOp1ATI C.PCOLORFRAGMENTOP1ATI
  pColorFragmentOp2ATI C.PCOLORFRAGMENTOP2ATI
  pColorFragmentOp3ATI C.PCOLORFRAGMENTOP3ATI
  pColorMask C.PCOLORMASK
  pColorMaskIndexedEXT C.PCOLORMASKINDEXEDEXT
  pColorMaski C.PCOLORMASKI
  pColorPointerEXT C.PCOLORPOINTEREXT
  pColorPointerListIBM C.PCOLORPOINTERLISTIBM
  pColorPointervINTEL C.PCOLORPOINTERVINTEL
  pColorSubTableEXT C.PCOLORSUBTABLEEXT
  pColorTableEXT C.PCOLORTABLEEXT
  pColorTableParameterfvSGI C.PCOLORTABLEPARAMETERFVSGI
  pColorTableParameterivSGI C.PCOLORTABLEPARAMETERIVSGI
  pColorTableSGI C.PCOLORTABLESGI
  pCombinerInputNV C.PCOMBINERINPUTNV
  pCombinerOutputNV C.PCOMBINEROUTPUTNV
  pCombinerParameterfNV C.PCOMBINERPARAMETERFNV
  pCombinerParameterfvNV C.PCOMBINERPARAMETERFVNV
  pCombinerParameteriNV C.PCOMBINERPARAMETERINV
  pCombinerParameterivNV C.PCOMBINERPARAMETERIVNV
  pCombinerStageParameterfvNV C.PCOMBINERSTAGEPARAMETERFVNV
  pCompileShader C.PCOMPILESHADER
  pCompileShaderARB C.PCOMPILESHADERARB
  pCompileShaderIncludeARB C.PCOMPILESHADERINCLUDEARB
  pCompressedMultiTexImage1DEXT C.PCOMPRESSEDMULTITEXIMAGE1DEXT
  pCompressedMultiTexImage2DEXT C.PCOMPRESSEDMULTITEXIMAGE2DEXT
  pCompressedMultiTexImage3DEXT C.PCOMPRESSEDMULTITEXIMAGE3DEXT
  pCompressedMultiTexSubImage1DEXT C.PCOMPRESSEDMULTITEXSUBIMAGE1DEXT
  pCompressedMultiTexSubImage2DEXT C.PCOMPRESSEDMULTITEXSUBIMAGE2DEXT
  pCompressedMultiTexSubImage3DEXT C.PCOMPRESSEDMULTITEXSUBIMAGE3DEXT
  pCompressedTexImage1D C.PCOMPRESSEDTEXIMAGE1D
  pCompressedTexImage1DARB C.PCOMPRESSEDTEXIMAGE1DARB
  pCompressedTexImage2D C.PCOMPRESSEDTEXIMAGE2D
  pCompressedTexImage2DARB C.PCOMPRESSEDTEXIMAGE2DARB
  pCompressedTexImage3D C.PCOMPRESSEDTEXIMAGE3D
  pCompressedTexImage3DARB C.PCOMPRESSEDTEXIMAGE3DARB
  pCompressedTexSubImage1D C.PCOMPRESSEDTEXSUBIMAGE1D
  pCompressedTexSubImage1DARB C.PCOMPRESSEDTEXSUBIMAGE1DARB
  pCompressedTexSubImage2D C.PCOMPRESSEDTEXSUBIMAGE2D
  pCompressedTexSubImage2DARB C.PCOMPRESSEDTEXSUBIMAGE2DARB
  pCompressedTexSubImage3D C.PCOMPRESSEDTEXSUBIMAGE3D
  pCompressedTexSubImage3DARB C.PCOMPRESSEDTEXSUBIMAGE3DARB
  pCompressedTextureImage1DEXT C.PCOMPRESSEDTEXTUREIMAGE1DEXT
  pCompressedTextureImage2DEXT C.PCOMPRESSEDTEXTUREIMAGE2DEXT
  pCompressedTextureImage3DEXT C.PCOMPRESSEDTEXTUREIMAGE3DEXT
  pCompressedTextureSubImage1DEXT C.PCOMPRESSEDTEXTURESUBIMAGE1DEXT
  pCompressedTextureSubImage2DEXT C.PCOMPRESSEDTEXTURESUBIMAGE2DEXT
  pCompressedTextureSubImage3DEXT C.PCOMPRESSEDTEXTURESUBIMAGE3DEXT
  pConvolutionFilter1DEXT C.PCONVOLUTIONFILTER1DEXT
  pConvolutionFilter2DEXT C.PCONVOLUTIONFILTER2DEXT
  pConvolutionParameterfEXT C.PCONVOLUTIONPARAMETERFEXT
  pConvolutionParameterfvEXT C.PCONVOLUTIONPARAMETERFVEXT
  pConvolutionParameteriEXT C.PCONVOLUTIONPARAMETERIEXT
  pConvolutionParameterivEXT C.PCONVOLUTIONPARAMETERIVEXT
  pConvolutionParameterxOES C.PCONVOLUTIONPARAMETERXOES
  pConvolutionParameterxvOES C.PCONVOLUTIONPARAMETERXVOES
  pCopyBufferSubData C.PCOPYBUFFERSUBDATA
  pCopyColorSubTableEXT C.PCOPYCOLORSUBTABLEEXT
  pCopyColorTableSGI C.PCOPYCOLORTABLESGI
  pCopyConvolutionFilter1DEXT C.PCOPYCONVOLUTIONFILTER1DEXT
  pCopyConvolutionFilter2DEXT C.PCOPYCONVOLUTIONFILTER2DEXT
  pCopyImageSubData C.PCOPYIMAGESUBDATA
  pCopyImageSubDataNV C.PCOPYIMAGESUBDATANV
  pCopyMultiTexImage1DEXT C.PCOPYMULTITEXIMAGE1DEXT
  pCopyMultiTexImage2DEXT C.PCOPYMULTITEXIMAGE2DEXT
  pCopyMultiTexSubImage1DEXT C.PCOPYMULTITEXSUBIMAGE1DEXT
  pCopyMultiTexSubImage2DEXT C.PCOPYMULTITEXSUBIMAGE2DEXT
  pCopyMultiTexSubImage3DEXT C.PCOPYMULTITEXSUBIMAGE3DEXT
  pCopyPathNV C.PCOPYPATHNV
  pCopyTexImage1D C.PCOPYTEXIMAGE1D
  pCopyTexImage1DEXT C.PCOPYTEXIMAGE1DEXT
  pCopyTexImage2D C.PCOPYTEXIMAGE2D
  pCopyTexImage2DEXT C.PCOPYTEXIMAGE2DEXT
  pCopyTexSubImage1D C.PCOPYTEXSUBIMAGE1D
  pCopyTexSubImage1DEXT C.PCOPYTEXSUBIMAGE1DEXT
  pCopyTexSubImage2D C.PCOPYTEXSUBIMAGE2D
  pCopyTexSubImage2DEXT C.PCOPYTEXSUBIMAGE2DEXT
  pCopyTexSubImage3D C.PCOPYTEXSUBIMAGE3D
  pCopyTexSubImage3DEXT C.PCOPYTEXSUBIMAGE3DEXT
  pCopyTextureImage1DEXT C.PCOPYTEXTUREIMAGE1DEXT
  pCopyTextureImage2DEXT C.PCOPYTEXTUREIMAGE2DEXT
  pCopyTextureSubImage1DEXT C.PCOPYTEXTURESUBIMAGE1DEXT
  pCopyTextureSubImage2DEXT C.PCOPYTEXTURESUBIMAGE2DEXT
  pCopyTextureSubImage3DEXT C.PCOPYTEXTURESUBIMAGE3DEXT
  pCoverFillPathInstancedNV C.PCOVERFILLPATHINSTANCEDNV
  pCoverFillPathNV C.PCOVERFILLPATHNV
  pCoverStrokePathInstancedNV C.PCOVERSTROKEPATHINSTANCEDNV
  pCoverStrokePathNV C.PCOVERSTROKEPATHNV
  pCreatePerfQueryINTEL C.PCREATEPERFQUERYINTEL
  pCreateProgram C.PCREATEPROGRAM
  pCreateProgramObjectARB C.PCREATEPROGRAMOBJECTARB
  pCreateShader C.PCREATESHADER
  pCreateShaderObjectARB C.PCREATESHADEROBJECTARB
  pCreateShaderProgramEXT C.PCREATESHADERPROGRAMEXT
  pCreateShaderProgramv C.PCREATESHADERPROGRAMV
  pCreateShaderProgramvEXT C.PCREATESHADERPROGRAMVEXT
  pCreateSyncFromCLeventARB C.PCREATESYNCFROMCLEVENTARB
  pCullFace C.PCULLFACE
  pCullParameterdvEXT C.PCULLPARAMETERDVEXT
  pCullParameterfvEXT C.PCULLPARAMETERFVEXT
  pCurrentPaletteMatrixARB C.PCURRENTPALETTEMATRIXARB
  pDebugMessageCallback C.PDEBUGMESSAGECALLBACK
  pDebugMessageCallbackAMD C.PDEBUGMESSAGECALLBACKAMD
  pDebugMessageCallbackARB C.PDEBUGMESSAGECALLBACKARB
  pDebugMessageCallbackKHR C.PDEBUGMESSAGECALLBACKKHR
  pDebugMessageControl C.PDEBUGMESSAGECONTROL
  pDebugMessageControlARB C.PDEBUGMESSAGECONTROLARB
  pDebugMessageControlKHR C.PDEBUGMESSAGECONTROLKHR
  pDebugMessageEnableAMD C.PDEBUGMESSAGEENABLEAMD
  pDebugMessageInsert C.PDEBUGMESSAGEINSERT
  pDebugMessageInsertAMD C.PDEBUGMESSAGEINSERTAMD
  pDebugMessageInsertARB C.PDEBUGMESSAGEINSERTARB
  pDebugMessageInsertKHR C.PDEBUGMESSAGEINSERTKHR
  pDeformSGIX C.PDEFORMSGIX
  pDeformationMap3dSGIX C.PDEFORMATIONMAP3DSGIX
  pDeformationMap3fSGIX C.PDEFORMATIONMAP3FSGIX
  pDeleteAsyncMarkersSGIX C.PDELETEASYNCMARKERSSGIX
  pDeleteBuffers C.PDELETEBUFFERS
  pDeleteBuffersARB C.PDELETEBUFFERSARB
  pDeleteFencesAPPLE C.PDELETEFENCESAPPLE
  pDeleteFencesNV C.PDELETEFENCESNV
  pDeleteFragmentShaderATI C.PDELETEFRAGMENTSHADERATI
  pDeleteFramebuffers C.PDELETEFRAMEBUFFERS
  pDeleteFramebuffersEXT C.PDELETEFRAMEBUFFERSEXT
  pDeleteNamedStringARB C.PDELETENAMEDSTRINGARB
  pDeleteNamesAMD C.PDELETENAMESAMD
  pDeleteObjectARB C.PDELETEOBJECTARB
  pDeleteOcclusionQueriesNV C.PDELETEOCCLUSIONQUERIESNV
  pDeletePathsNV C.PDELETEPATHSNV
  pDeletePerfMonitorsAMD C.PDELETEPERFMONITORSAMD
  pDeletePerfQueryINTEL C.PDELETEPERFQUERYINTEL
  pDeleteProgram C.PDELETEPROGRAM
  pDeleteProgramPipelines C.PDELETEPROGRAMPIPELINES
  pDeleteProgramPipelinesEXT C.PDELETEPROGRAMPIPELINESEXT
  pDeleteProgramsARB C.PDELETEPROGRAMSARB
  pDeleteProgramsNV C.PDELETEPROGRAMSNV
  pDeleteQueries C.PDELETEQUERIES
  pDeleteQueriesARB C.PDELETEQUERIESARB
  pDeleteRenderbuffers C.PDELETERENDERBUFFERS
  pDeleteRenderbuffersEXT C.PDELETERENDERBUFFERSEXT
  pDeleteSamplers C.PDELETESAMPLERS
  pDeleteShader C.PDELETESHADER
  pDeleteSync C.PDELETESYNC
  pDeleteTextures C.PDELETETEXTURES
  pDeleteTexturesEXT C.PDELETETEXTURESEXT
  pDeleteTransformFeedbacks C.PDELETETRANSFORMFEEDBACKS
  pDeleteTransformFeedbacksNV C.PDELETETRANSFORMFEEDBACKSNV
  pDeleteVertexArrays C.PDELETEVERTEXARRAYS
  pDeleteVertexArraysAPPLE C.PDELETEVERTEXARRAYSAPPLE
  pDeleteVertexShaderEXT C.PDELETEVERTEXSHADEREXT
  pDepthBoundsEXT C.PDEPTHBOUNDSEXT
  pDepthBoundsdNV C.PDEPTHBOUNDSDNV
  pDepthFunc C.PDEPTHFUNC
  pDepthMask C.PDEPTHMASK
  pDepthRange C.PDEPTHRANGE
  pDepthRangeArrayv C.PDEPTHRANGEARRAYV
  pDepthRangeIndexed C.PDEPTHRANGEINDEXED
  pDepthRangedNV C.PDEPTHRANGEDNV
  pDepthRangef C.PDEPTHRANGEF
  pDepthRangefOES C.PDEPTHRANGEFOES
  pDepthRangexOES C.PDEPTHRANGEXOES
  pDetachObjectARB C.PDETACHOBJECTARB
  pDetachShader C.PDETACHSHADER
  pDetailTexFuncSGIS C.PDETAILTEXFUNCSGIS
  pDisable C.PDISABLE
  pDisableClientStateIndexedEXT C.PDISABLECLIENTSTATEINDEXEDEXT
  pDisableClientStateiEXT C.PDISABLECLIENTSTATEIEXT
  pDisableIndexedEXT C.PDISABLEINDEXEDEXT
  pDisableVariantClientStateEXT C.PDISABLEVARIANTCLIENTSTATEEXT
  pDisableVertexArrayAttribEXT C.PDISABLEVERTEXARRAYATTRIBEXT
  pDisableVertexArrayEXT C.PDISABLEVERTEXARRAYEXT
  pDisableVertexAttribAPPLE C.PDISABLEVERTEXATTRIBAPPLE
  pDisableVertexAttribArray C.PDISABLEVERTEXATTRIBARRAY
  pDisableVertexAttribArrayARB C.PDISABLEVERTEXATTRIBARRAYARB
  pDisablei C.PDISABLEI
  pDispatchCompute C.PDISPATCHCOMPUTE
  pDispatchComputeGroupSizeARB C.PDISPATCHCOMPUTEGROUPSIZEARB
  pDispatchComputeIndirect C.PDISPATCHCOMPUTEINDIRECT
  pDrawArrays C.PDRAWARRAYS
  pDrawArraysEXT C.PDRAWARRAYSEXT
  pDrawArraysIndirect C.PDRAWARRAYSINDIRECT
  pDrawArraysInstanced C.PDRAWARRAYSINSTANCED
  pDrawArraysInstancedARB C.PDRAWARRAYSINSTANCEDARB
  pDrawArraysInstancedBaseInstance C.PDRAWARRAYSINSTANCEDBASEINSTANCE
  pDrawArraysInstancedEXT C.PDRAWARRAYSINSTANCEDEXT
  pDrawBuffer C.PDRAWBUFFER
  pDrawBuffers C.PDRAWBUFFERS
  pDrawBuffersARB C.PDRAWBUFFERSARB
  pDrawBuffersATI C.PDRAWBUFFERSATI
  pDrawElementArrayAPPLE C.PDRAWELEMENTARRAYAPPLE
  pDrawElementArrayATI C.PDRAWELEMENTARRAYATI
  pDrawElements C.PDRAWELEMENTS
  pDrawElementsBaseVertex C.PDRAWELEMENTSBASEVERTEX
  pDrawElementsIndirect C.PDRAWELEMENTSINDIRECT
  pDrawElementsInstanced C.PDRAWELEMENTSINSTANCED
  pDrawElementsInstancedARB C.PDRAWELEMENTSINSTANCEDARB
  pDrawElementsInstancedBaseInstance C.PDRAWELEMENTSINSTANCEDBASEINSTANCE
  pDrawElementsInstancedBaseVertex C.PDRAWELEMENTSINSTANCEDBASEVERTEX
  pDrawElementsInstancedBaseVertexBaseInstance C.PDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCE
  pDrawElementsInstancedEXT C.PDRAWELEMENTSINSTANCEDEXT
  pDrawMeshArraysSUN C.PDRAWMESHARRAYSSUN
  pDrawRangeElementArrayAPPLE C.PDRAWRANGEELEMENTARRAYAPPLE
  pDrawRangeElementArrayATI C.PDRAWRANGEELEMENTARRAYATI
  pDrawRangeElements C.PDRAWRANGEELEMENTS
  pDrawRangeElementsBaseVertex C.PDRAWRANGEELEMENTSBASEVERTEX
  pDrawRangeElementsEXT C.PDRAWRANGEELEMENTSEXT
  pDrawTextureNV C.PDRAWTEXTURENV
  pDrawTransformFeedback C.PDRAWTRANSFORMFEEDBACK
  pDrawTransformFeedbackInstanced C.PDRAWTRANSFORMFEEDBACKINSTANCED
  pDrawTransformFeedbackNV C.PDRAWTRANSFORMFEEDBACKNV
  pDrawTransformFeedbackStream C.PDRAWTRANSFORMFEEDBACKSTREAM
  pDrawTransformFeedbackStreamInstanced C.PDRAWTRANSFORMFEEDBACKSTREAMINSTANCED
  pEdgeFlagFormatNV C.PEDGEFLAGFORMATNV
  pEdgeFlagPointerEXT C.PEDGEFLAGPOINTEREXT
  pEdgeFlagPointerListIBM C.PEDGEFLAGPOINTERLISTIBM
  pElementPointerAPPLE C.PELEMENTPOINTERAPPLE
  pElementPointerATI C.PELEMENTPOINTERATI
  pEnable C.PENABLE
  pEnableClientStateIndexedEXT C.PENABLECLIENTSTATEINDEXEDEXT
  pEnableClientStateiEXT C.PENABLECLIENTSTATEIEXT
  pEnableIndexedEXT C.PENABLEINDEXEDEXT
  pEnableVariantClientStateEXT C.PENABLEVARIANTCLIENTSTATEEXT
  pEnableVertexArrayAttribEXT C.PENABLEVERTEXARRAYATTRIBEXT
  pEnableVertexArrayEXT C.PENABLEVERTEXARRAYEXT
  pEnableVertexAttribAPPLE C.PENABLEVERTEXATTRIBAPPLE
  pEnableVertexAttribArray C.PENABLEVERTEXATTRIBARRAY
  pEnableVertexAttribArrayARB C.PENABLEVERTEXATTRIBARRAYARB
  pEnablei C.PENABLEI
  pEndConditionalRender C.PENDCONDITIONALRENDER
  pEndConditionalRenderNV C.PENDCONDITIONALRENDERNV
  pEndConditionalRenderNVX C.PENDCONDITIONALRENDERNVX
  pEndFragmentShaderATI C.PENDFRAGMENTSHADERATI
  pEndOcclusionQueryNV C.PENDOCCLUSIONQUERYNV
  pEndPerfMonitorAMD C.PENDPERFMONITORAMD
  pEndPerfQueryINTEL C.PENDPERFQUERYINTEL
  pEndQuery C.PENDQUERY
  pEndQueryARB C.PENDQUERYARB
  pEndQueryIndexed C.PENDQUERYINDEXED
  pEndTransformFeedback C.PENDTRANSFORMFEEDBACK
  pEndTransformFeedbackEXT C.PENDTRANSFORMFEEDBACKEXT
  pEndTransformFeedbackNV C.PENDTRANSFORMFEEDBACKNV
  pEndVertexShaderEXT C.PENDVERTEXSHADEREXT
  pEndVideoCaptureNV C.PENDVIDEOCAPTURENV
  pEvalCoord1xOES C.PEVALCOORD1XOES
  pEvalCoord1xvOES C.PEVALCOORD1XVOES
  pEvalCoord2xOES C.PEVALCOORD2XOES
  pEvalCoord2xvOES C.PEVALCOORD2XVOES
  pEvalMapsNV C.PEVALMAPSNV
  pExecuteProgramNV C.PEXECUTEPROGRAMNV
  pExtractComponentEXT C.PEXTRACTCOMPONENTEXT
  pFeedbackBufferxOES C.PFEEDBACKBUFFERXOES
  pFenceSync C.PFENCESYNC
  pFinalCombinerInputNV C.PFINALCOMBINERINPUTNV
  pFinish C.PFINISH
  pFinishAsyncSGIX C.PFINISHASYNCSGIX
  pFinishFenceAPPLE C.PFINISHFENCEAPPLE
  pFinishFenceNV C.PFINISHFENCENV
  pFinishObjectAPPLE C.PFINISHOBJECTAPPLE
  pFinishTextureSUNX C.PFINISHTEXTURESUNX
  pFlush C.PFLUSH
  pFlushMappedBufferRange C.PFLUSHMAPPEDBUFFERRANGE
  pFlushMappedBufferRangeAPPLE C.PFLUSHMAPPEDBUFFERRANGEAPPLE
  pFlushMappedNamedBufferRangeEXT C.PFLUSHMAPPEDNAMEDBUFFERRANGEEXT
  pFlushPixelDataRangeNV C.PFLUSHPIXELDATARANGENV
  pFlushRasterSGIX C.PFLUSHRASTERSGIX
  pFlushStaticDataIBM C.PFLUSHSTATICDATAIBM
  pFlushVertexArrayRangeAPPLE C.PFLUSHVERTEXARRAYRANGEAPPLE
  pFlushVertexArrayRangeNV C.PFLUSHVERTEXARRAYRANGENV
  pFogCoordFormatNV C.PFOGCOORDFORMATNV
  pFogCoordPointerEXT C.PFOGCOORDPOINTEREXT
  pFogCoordPointerListIBM C.PFOGCOORDPOINTERLISTIBM
  pFogCoorddEXT C.PFOGCOORDDEXT
  pFogCoorddvEXT C.PFOGCOORDDVEXT
  pFogCoordfEXT C.PFOGCOORDFEXT
  pFogCoordfvEXT C.PFOGCOORDFVEXT
  pFogCoordhNV C.PFOGCOORDHNV
  pFogCoordhvNV C.PFOGCOORDHVNV
  pFogFuncSGIS C.PFOGFUNCSGIS
  pFogxOES C.PFOGXOES
  pFogxvOES C.PFOGXVOES
  pFragmentColorMaterialSGIX C.PFRAGMENTCOLORMATERIALSGIX
  pFragmentLightModelfSGIX C.PFRAGMENTLIGHTMODELFSGIX
  pFragmentLightModelfvSGIX C.PFRAGMENTLIGHTMODELFVSGIX
  pFragmentLightModeliSGIX C.PFRAGMENTLIGHTMODELISGIX
  pFragmentLightModelivSGIX C.PFRAGMENTLIGHTMODELIVSGIX
  pFragmentLightfSGIX C.PFRAGMENTLIGHTFSGIX
  pFragmentLightfvSGIX C.PFRAGMENTLIGHTFVSGIX
  pFragmentLightiSGIX C.PFRAGMENTLIGHTISGIX
  pFragmentLightivSGIX C.PFRAGMENTLIGHTIVSGIX
  pFragmentMaterialfSGIX C.PFRAGMENTMATERIALFSGIX
  pFragmentMaterialfvSGIX C.PFRAGMENTMATERIALFVSGIX
  pFragmentMaterialiSGIX C.PFRAGMENTMATERIALISGIX
  pFragmentMaterialivSGIX C.PFRAGMENTMATERIALIVSGIX
  pFrameTerminatorGREMEDY C.PFRAMETERMINATORGREMEDY
  pFrameZoomSGIX C.PFRAMEZOOMSGIX
  pFramebufferDrawBufferEXT C.PFRAMEBUFFERDRAWBUFFEREXT
  pFramebufferDrawBuffersEXT C.PFRAMEBUFFERDRAWBUFFERSEXT
  pFramebufferParameteri C.PFRAMEBUFFERPARAMETERI
  pFramebufferReadBufferEXT C.PFRAMEBUFFERREADBUFFEREXT
  pFramebufferRenderbuffer C.PFRAMEBUFFERRENDERBUFFER
  pFramebufferRenderbufferEXT C.PFRAMEBUFFERRENDERBUFFEREXT
  pFramebufferTexture C.PFRAMEBUFFERTEXTURE
  pFramebufferTexture1D C.PFRAMEBUFFERTEXTURE1D
  pFramebufferTexture1DEXT C.PFRAMEBUFFERTEXTURE1DEXT
  pFramebufferTexture2D C.PFRAMEBUFFERTEXTURE2D
  pFramebufferTexture2DEXT C.PFRAMEBUFFERTEXTURE2DEXT
  pFramebufferTexture3D C.PFRAMEBUFFERTEXTURE3D
  pFramebufferTexture3DEXT C.PFRAMEBUFFERTEXTURE3DEXT
  pFramebufferTextureARB C.PFRAMEBUFFERTEXTUREARB
  pFramebufferTextureEXT C.PFRAMEBUFFERTEXTUREEXT
  pFramebufferTextureFaceARB C.PFRAMEBUFFERTEXTUREFACEARB
  pFramebufferTextureFaceEXT C.PFRAMEBUFFERTEXTUREFACEEXT
  pFramebufferTextureLayer C.PFRAMEBUFFERTEXTURELAYER
  pFramebufferTextureLayerARB C.PFRAMEBUFFERTEXTURELAYERARB
  pFramebufferTextureLayerEXT C.PFRAMEBUFFERTEXTURELAYEREXT
  pFreeObjectBufferATI C.PFREEOBJECTBUFFERATI
  pFrontFace C.PFRONTFACE
  pFrustumfOES C.PFRUSTUMFOES
  pFrustumxOES C.PFRUSTUMXOES
  pGenAsyncMarkersSGIX C.PGENASYNCMARKERSSGIX
  pGenBuffers C.PGENBUFFERS
  pGenBuffersARB C.PGENBUFFERSARB
  pGenFencesAPPLE C.PGENFENCESAPPLE
  pGenFencesNV C.PGENFENCESNV
  pGenFragmentShadersATI C.PGENFRAGMENTSHADERSATI
  pGenFramebuffers C.PGENFRAMEBUFFERS
  pGenFramebuffersEXT C.PGENFRAMEBUFFERSEXT
  pGenNamesAMD C.PGENNAMESAMD
  pGenOcclusionQueriesNV C.PGENOCCLUSIONQUERIESNV
  pGenPathsNV C.PGENPATHSNV
  pGenPerfMonitorsAMD C.PGENPERFMONITORSAMD
  pGenProgramPipelines C.PGENPROGRAMPIPELINES
  pGenProgramPipelinesEXT C.PGENPROGRAMPIPELINESEXT
  pGenProgramsARB C.PGENPROGRAMSARB
  pGenProgramsNV C.PGENPROGRAMSNV
  pGenQueries C.PGENQUERIES
  pGenQueriesARB C.PGENQUERIESARB
  pGenRenderbuffers C.PGENRENDERBUFFERS
  pGenRenderbuffersEXT C.PGENRENDERBUFFERSEXT
  pGenSamplers C.PGENSAMPLERS
  pGenSymbolsEXT C.PGENSYMBOLSEXT
  pGenTextures C.PGENTEXTURES
  pGenTexturesEXT C.PGENTEXTURESEXT
  pGenTransformFeedbacks C.PGENTRANSFORMFEEDBACKS
  pGenTransformFeedbacksNV C.PGENTRANSFORMFEEDBACKSNV
  pGenVertexArrays C.PGENVERTEXARRAYS
  pGenVertexArraysAPPLE C.PGENVERTEXARRAYSAPPLE
  pGenVertexShadersEXT C.PGENVERTEXSHADERSEXT
  pGenerateMipmap C.PGENERATEMIPMAP
  pGenerateMipmapEXT C.PGENERATEMIPMAPEXT
  pGenerateMultiTexMipmapEXT C.PGENERATEMULTITEXMIPMAPEXT
  pGenerateTextureMipmapEXT C.PGENERATETEXTUREMIPMAPEXT
  pGetActiveAtomicCounterBufferiv C.PGETACTIVEATOMICCOUNTERBUFFERIV
  pGetActiveAttrib C.PGETACTIVEATTRIB
  pGetActiveAttribARB C.PGETACTIVEATTRIBARB
  pGetActiveSubroutineName C.PGETACTIVESUBROUTINENAME
  pGetActiveSubroutineUniformName C.PGETACTIVESUBROUTINEUNIFORMNAME
  pGetActiveSubroutineUniformiv C.PGETACTIVESUBROUTINEUNIFORMIV
  pGetActiveUniform C.PGETACTIVEUNIFORM
  pGetActiveUniformARB C.PGETACTIVEUNIFORMARB
  pGetActiveUniformBlockName C.PGETACTIVEUNIFORMBLOCKNAME
  pGetActiveUniformBlockiv C.PGETACTIVEUNIFORMBLOCKIV
  pGetActiveUniformName C.PGETACTIVEUNIFORMNAME
  pGetActiveUniformsiv C.PGETACTIVEUNIFORMSIV
  pGetActiveVaryingNV C.PGETACTIVEVARYINGNV
  pGetArrayObjectfvATI C.PGETARRAYOBJECTFVATI
  pGetArrayObjectivATI C.PGETARRAYOBJECTIVATI
  pGetAttachedObjectsARB C.PGETATTACHEDOBJECTSARB
  pGetAttachedShaders C.PGETATTACHEDSHADERS
  pGetAttribLocation C.PGETATTRIBLOCATION
  pGetAttribLocationARB C.PGETATTRIBLOCATIONARB
  pGetBooleanIndexedvEXT C.PGETBOOLEANINDEXEDVEXT
  pGetBooleani_v C.PGETBOOLEANI_V
  pGetBooleanv C.PGETBOOLEANV
  pGetBufferParameteri64v C.PGETBUFFERPARAMETERI64V
  pGetBufferParameteriv C.PGETBUFFERPARAMETERIV
  pGetBufferParameterivARB C.PGETBUFFERPARAMETERIVARB
  pGetBufferParameterui64vNV C.PGETBUFFERPARAMETERUI64VNV
  pGetBufferPointerv C.PGETBUFFERPOINTERV
  pGetBufferPointervARB C.PGETBUFFERPOINTERVARB
  pGetBufferSubData C.PGETBUFFERSUBDATA
  pGetBufferSubDataARB C.PGETBUFFERSUBDATAARB
  pGetClipPlanefOES C.PGETCLIPPLANEFOES
  pGetClipPlanexOES C.PGETCLIPPLANEXOES
  pGetColorTableEXT C.PGETCOLORTABLEEXT
  pGetColorTableParameterfvEXT C.PGETCOLORTABLEPARAMETERFVEXT
  pGetColorTableParameterfvSGI C.PGETCOLORTABLEPARAMETERFVSGI
  pGetColorTableParameterivEXT C.PGETCOLORTABLEPARAMETERIVEXT
  pGetColorTableParameterivSGI C.PGETCOLORTABLEPARAMETERIVSGI
  pGetColorTableSGI C.PGETCOLORTABLESGI
  pGetCombinerInputParameterfvNV C.PGETCOMBINERINPUTPARAMETERFVNV
  pGetCombinerInputParameterivNV C.PGETCOMBINERINPUTPARAMETERIVNV
  pGetCombinerOutputParameterfvNV C.PGETCOMBINEROUTPUTPARAMETERFVNV
  pGetCombinerOutputParameterivNV C.PGETCOMBINEROUTPUTPARAMETERIVNV
  pGetCombinerStageParameterfvNV C.PGETCOMBINERSTAGEPARAMETERFVNV
  pGetCompressedMultiTexImageEXT C.PGETCOMPRESSEDMULTITEXIMAGEEXT
  pGetCompressedTexImage C.PGETCOMPRESSEDTEXIMAGE
  pGetCompressedTexImageARB C.PGETCOMPRESSEDTEXIMAGEARB
  pGetCompressedTextureImageEXT C.PGETCOMPRESSEDTEXTUREIMAGEEXT
  pGetConvolutionFilterEXT C.PGETCONVOLUTIONFILTEREXT
  pGetConvolutionParameterfvEXT C.PGETCONVOLUTIONPARAMETERFVEXT
  pGetConvolutionParameterivEXT C.PGETCONVOLUTIONPARAMETERIVEXT
  pGetConvolutionParameterxvOES C.PGETCONVOLUTIONPARAMETERXVOES
  pGetDebugMessageLog C.PGETDEBUGMESSAGELOG
  pGetDebugMessageLogAMD C.PGETDEBUGMESSAGELOGAMD
  pGetDebugMessageLogARB C.PGETDEBUGMESSAGELOGARB
  pGetDebugMessageLogKHR C.PGETDEBUGMESSAGELOGKHR
  pGetDetailTexFuncSGIS C.PGETDETAILTEXFUNCSGIS
  pGetDoubleIndexedvEXT C.PGETDOUBLEINDEXEDVEXT
  pGetDoublei_v C.PGETDOUBLEI_V
  pGetDoublei_vEXT C.PGETDOUBLEI_VEXT
  pGetDoublev C.PGETDOUBLEV
  pGetError C.PGETERROR
  pGetFenceivNV C.PGETFENCEIVNV
  pGetFinalCombinerInputParameterfvNV C.PGETFINALCOMBINERINPUTPARAMETERFVNV
  pGetFinalCombinerInputParameterivNV C.PGETFINALCOMBINERINPUTPARAMETERIVNV
  pGetFirstPerfQueryIdINTEL C.PGETFIRSTPERFQUERYIDINTEL
  pGetFixedvOES C.PGETFIXEDVOES
  pGetFloatIndexedvEXT C.PGETFLOATINDEXEDVEXT
  pGetFloati_v C.PGETFLOATI_V
  pGetFloati_vEXT C.PGETFLOATI_VEXT
  pGetFloatv C.PGETFLOATV
  pGetFogFuncSGIS C.PGETFOGFUNCSGIS
  pGetFragDataIndex C.PGETFRAGDATAINDEX
  pGetFragDataLocation C.PGETFRAGDATALOCATION
  pGetFragDataLocationEXT C.PGETFRAGDATALOCATIONEXT
  pGetFragmentLightfvSGIX C.PGETFRAGMENTLIGHTFVSGIX
  pGetFragmentLightivSGIX C.PGETFRAGMENTLIGHTIVSGIX
  pGetFragmentMaterialfvSGIX C.PGETFRAGMENTMATERIALFVSGIX
  pGetFragmentMaterialivSGIX C.PGETFRAGMENTMATERIALIVSGIX
  pGetFramebufferAttachmentParameteriv C.PGETFRAMEBUFFERATTACHMENTPARAMETERIV
  pGetFramebufferAttachmentParameterivEXT C.PGETFRAMEBUFFERATTACHMENTPARAMETERIVEXT
  pGetFramebufferParameteriv C.PGETFRAMEBUFFERPARAMETERIV
  pGetFramebufferParameterivEXT C.PGETFRAMEBUFFERPARAMETERIVEXT
  pGetGraphicsResetStatusARB C.PGETGRAPHICSRESETSTATUSARB
  pGetHandleARB C.PGETHANDLEARB
  pGetHistogramEXT C.PGETHISTOGRAMEXT
  pGetHistogramParameterfvEXT C.PGETHISTOGRAMPARAMETERFVEXT
  pGetHistogramParameterivEXT C.PGETHISTOGRAMPARAMETERIVEXT
  pGetHistogramParameterxvOES C.PGETHISTOGRAMPARAMETERXVOES
  pGetImageHandleARB C.PGETIMAGEHANDLEARB
  pGetImageHandleNV C.PGETIMAGEHANDLENV
  pGetImageTransformParameterfvHP C.PGETIMAGETRANSFORMPARAMETERFVHP
  pGetImageTransformParameterivHP C.PGETIMAGETRANSFORMPARAMETERIVHP
  pGetInfoLogARB C.PGETINFOLOGARB
  pGetInstrumentsSGIX C.PGETINSTRUMENTSSGIX
  pGetInteger64i_v C.PGETINTEGER64I_V
  pGetInteger64v C.PGETINTEGER64V
  pGetIntegerIndexedvEXT C.PGETINTEGERINDEXEDVEXT
  pGetIntegeri_v C.PGETINTEGERI_V
  pGetIntegerui64i_vNV C.PGETINTEGERUI64I_VNV
  pGetIntegerui64vNV C.PGETINTEGERUI64VNV
  pGetIntegerv C.PGETINTEGERV
  pGetInternalformati64v C.PGETINTERNALFORMATI64V
  pGetInternalformativ C.PGETINTERNALFORMATIV
  pGetInvariantBooleanvEXT C.PGETINVARIANTBOOLEANVEXT
  pGetInvariantFloatvEXT C.PGETINVARIANTFLOATVEXT
  pGetInvariantIntegervEXT C.PGETINVARIANTINTEGERVEXT
  pGetLightxOES C.PGETLIGHTXOES
  pGetLightxvOES C.PGETLIGHTXVOES
  pGetListParameterfvSGIX C.PGETLISTPARAMETERFVSGIX
  pGetListParameterivSGIX C.PGETLISTPARAMETERIVSGIX
  pGetLocalConstantBooleanvEXT C.PGETLOCALCONSTANTBOOLEANVEXT
  pGetLocalConstantFloatvEXT C.PGETLOCALCONSTANTFLOATVEXT
  pGetLocalConstantIntegervEXT C.PGETLOCALCONSTANTINTEGERVEXT
  pGetMapAttribParameterfvNV C.PGETMAPATTRIBPARAMETERFVNV
  pGetMapAttribParameterivNV C.PGETMAPATTRIBPARAMETERIVNV
  pGetMapControlPointsNV C.PGETMAPCONTROLPOINTSNV
  pGetMapParameterfvNV C.PGETMAPPARAMETERFVNV
  pGetMapParameterivNV C.PGETMAPPARAMETERIVNV
  pGetMapxvOES C.PGETMAPXVOES
  pGetMaterialxOES C.PGETMATERIALXOES
  pGetMaterialxvOES C.PGETMATERIALXVOES
  pGetMinmaxEXT C.PGETMINMAXEXT
  pGetMinmaxParameterfvEXT C.PGETMINMAXPARAMETERFVEXT
  pGetMinmaxParameterivEXT C.PGETMINMAXPARAMETERIVEXT
  pGetMultiTexEnvfvEXT C.PGETMULTITEXENVFVEXT
  pGetMultiTexEnvivEXT C.PGETMULTITEXENVIVEXT
  pGetMultiTexGendvEXT C.PGETMULTITEXGENDVEXT
  pGetMultiTexGenfvEXT C.PGETMULTITEXGENFVEXT
  pGetMultiTexGenivEXT C.PGETMULTITEXGENIVEXT
  pGetMultiTexImageEXT C.PGETMULTITEXIMAGEEXT
  pGetMultiTexLevelParameterfvEXT C.PGETMULTITEXLEVELPARAMETERFVEXT
  pGetMultiTexLevelParameterivEXT C.PGETMULTITEXLEVELPARAMETERIVEXT
  pGetMultiTexParameterIivEXT C.PGETMULTITEXPARAMETERIIVEXT
  pGetMultiTexParameterIuivEXT C.PGETMULTITEXPARAMETERIUIVEXT
  pGetMultiTexParameterfvEXT C.PGETMULTITEXPARAMETERFVEXT
  pGetMultiTexParameterivEXT C.PGETMULTITEXPARAMETERIVEXT
  pGetMultisamplefv C.PGETMULTISAMPLEFV
  pGetMultisamplefvNV C.PGETMULTISAMPLEFVNV
  pGetNamedBufferParameterivEXT C.PGETNAMEDBUFFERPARAMETERIVEXT
  pGetNamedBufferParameterui64vNV C.PGETNAMEDBUFFERPARAMETERUI64VNV
  pGetNamedBufferPointervEXT C.PGETNAMEDBUFFERPOINTERVEXT
  pGetNamedBufferSubDataEXT C.PGETNAMEDBUFFERSUBDATAEXT
  pGetNamedFramebufferAttachmentParameterivEXT C.PGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXT
  pGetNamedFramebufferParameterivEXT C.PGETNAMEDFRAMEBUFFERPARAMETERIVEXT
  pGetNamedProgramLocalParameterIivEXT C.PGETNAMEDPROGRAMLOCALPARAMETERIIVEXT
  pGetNamedProgramLocalParameterIuivEXT C.PGETNAMEDPROGRAMLOCALPARAMETERIUIVEXT
  pGetNamedProgramLocalParameterdvEXT C.PGETNAMEDPROGRAMLOCALPARAMETERDVEXT
  pGetNamedProgramLocalParameterfvEXT C.PGETNAMEDPROGRAMLOCALPARAMETERFVEXT
  pGetNamedProgramStringEXT C.PGETNAMEDPROGRAMSTRINGEXT
  pGetNamedProgramivEXT C.PGETNAMEDPROGRAMIVEXT
  pGetNamedRenderbufferParameterivEXT C.PGETNAMEDRENDERBUFFERPARAMETERIVEXT
  pGetNamedStringARB C.PGETNAMEDSTRINGARB
  pGetNamedStringivARB C.PGETNAMEDSTRINGIVARB
  pGetNextPerfQueryIdINTEL C.PGETNEXTPERFQUERYIDINTEL
  pGetObjectBufferfvATI C.PGETOBJECTBUFFERFVATI
  pGetObjectBufferivATI C.PGETOBJECTBUFFERIVATI
  pGetObjectLabel C.PGETOBJECTLABEL
  pGetObjectLabelEXT C.PGETOBJECTLABELEXT
  pGetObjectLabelKHR C.PGETOBJECTLABELKHR
  pGetObjectParameterfvARB C.PGETOBJECTPARAMETERFVARB
  pGetObjectParameterivAPPLE C.PGETOBJECTPARAMETERIVAPPLE
  pGetObjectParameterivARB C.PGETOBJECTPARAMETERIVARB
  pGetObjectPtrLabel C.PGETOBJECTPTRLABEL
  pGetObjectPtrLabelKHR C.PGETOBJECTPTRLABELKHR
  pGetOcclusionQueryivNV C.PGETOCCLUSIONQUERYIVNV
  pGetOcclusionQueryuivNV C.PGETOCCLUSIONQUERYUIVNV
  pGetPathColorGenfvNV C.PGETPATHCOLORGENFVNV
  pGetPathColorGenivNV C.PGETPATHCOLORGENIVNV
  pGetPathCommandsNV C.PGETPATHCOMMANDSNV
  pGetPathCoordsNV C.PGETPATHCOORDSNV
  pGetPathDashArrayNV C.PGETPATHDASHARRAYNV
  pGetPathLengthNV C.PGETPATHLENGTHNV
  pGetPathMetricRangeNV C.PGETPATHMETRICRANGENV
  pGetPathMetricsNV C.PGETPATHMETRICSNV
  pGetPathParameterfvNV C.PGETPATHPARAMETERFVNV
  pGetPathParameterivNV C.PGETPATHPARAMETERIVNV
  pGetPathSpacingNV C.PGETPATHSPACINGNV
  pGetPathTexGenfvNV C.PGETPATHTEXGENFVNV
  pGetPathTexGenivNV C.PGETPATHTEXGENIVNV
  pGetPerfCounterInfoINTEL C.PGETPERFCOUNTERINFOINTEL
  pGetPerfMonitorCounterDataAMD C.PGETPERFMONITORCOUNTERDATAAMD
  pGetPerfMonitorCounterInfoAMD C.PGETPERFMONITORCOUNTERINFOAMD
  pGetPerfMonitorCounterStringAMD C.PGETPERFMONITORCOUNTERSTRINGAMD
  pGetPerfMonitorCountersAMD C.PGETPERFMONITORCOUNTERSAMD
  pGetPerfMonitorGroupStringAMD C.PGETPERFMONITORGROUPSTRINGAMD
  pGetPerfMonitorGroupsAMD C.PGETPERFMONITORGROUPSAMD
  pGetPerfQueryDataINTEL C.PGETPERFQUERYDATAINTEL
  pGetPerfQueryIdByNameINTEL C.PGETPERFQUERYIDBYNAMEINTEL
  pGetPerfQueryInfoINTEL C.PGETPERFQUERYINFOINTEL
  pGetPixelMapxv C.PGETPIXELMAPXV
  pGetPixelTexGenParameterfvSGIS C.PGETPIXELTEXGENPARAMETERFVSGIS
  pGetPixelTexGenParameterivSGIS C.PGETPIXELTEXGENPARAMETERIVSGIS
  pGetPixelTransformParameterfvEXT C.PGETPIXELTRANSFORMPARAMETERFVEXT
  pGetPixelTransformParameterivEXT C.PGETPIXELTRANSFORMPARAMETERIVEXT
  pGetPointerIndexedvEXT C.PGETPOINTERINDEXEDVEXT
  pGetPointeri_vEXT C.PGETPOINTERI_VEXT
  pGetPointerv C.PGETPOINTERV
  pGetPointervEXT C.PGETPOINTERVEXT
  pGetPointervKHR C.PGETPOINTERVKHR
  pGetProgramBinary C.PGETPROGRAMBINARY
  pGetProgramEnvParameterIivNV C.PGETPROGRAMENVPARAMETERIIVNV
  pGetProgramEnvParameterIuivNV C.PGETPROGRAMENVPARAMETERIUIVNV
  pGetProgramEnvParameterdvARB C.PGETPROGRAMENVPARAMETERDVARB
  pGetProgramEnvParameterfvARB C.PGETPROGRAMENVPARAMETERFVARB
  pGetProgramInfoLog C.PGETPROGRAMINFOLOG
  pGetProgramInterfaceiv C.PGETPROGRAMINTERFACEIV
  pGetProgramLocalParameterIivNV C.PGETPROGRAMLOCALPARAMETERIIVNV
  pGetProgramLocalParameterIuivNV C.PGETPROGRAMLOCALPARAMETERIUIVNV
  pGetProgramLocalParameterdvARB C.PGETPROGRAMLOCALPARAMETERDVARB
  pGetProgramLocalParameterfvARB C.PGETPROGRAMLOCALPARAMETERFVARB
  pGetProgramNamedParameterdvNV C.PGETPROGRAMNAMEDPARAMETERDVNV
  pGetProgramNamedParameterfvNV C.PGETPROGRAMNAMEDPARAMETERFVNV
  pGetProgramParameterdvNV C.PGETPROGRAMPARAMETERDVNV
  pGetProgramParameterfvNV C.PGETPROGRAMPARAMETERFVNV
  pGetProgramPipelineInfoLog C.PGETPROGRAMPIPELINEINFOLOG
  pGetProgramPipelineInfoLogEXT C.PGETPROGRAMPIPELINEINFOLOGEXT
  pGetProgramPipelineiv C.PGETPROGRAMPIPELINEIV
  pGetProgramPipelineivEXT C.PGETPROGRAMPIPELINEIVEXT
  pGetProgramResourceIndex C.PGETPROGRAMRESOURCEINDEX
  pGetProgramResourceLocation C.PGETPROGRAMRESOURCELOCATION
  pGetProgramResourceLocationIndex C.PGETPROGRAMRESOURCELOCATIONINDEX
  pGetProgramResourceName C.PGETPROGRAMRESOURCENAME
  pGetProgramResourceiv C.PGETPROGRAMRESOURCEIV
  pGetProgramStageiv C.PGETPROGRAMSTAGEIV
  pGetProgramStringARB C.PGETPROGRAMSTRINGARB
  pGetProgramStringNV C.PGETPROGRAMSTRINGNV
  pGetProgramSubroutineParameteruivNV C.PGETPROGRAMSUBROUTINEPARAMETERUIVNV
  pGetProgramiv C.PGETPROGRAMIV
  pGetProgramivARB C.PGETPROGRAMIVARB
  pGetProgramivNV C.PGETPROGRAMIVNV
  pGetQueryIndexediv C.PGETQUERYINDEXEDIV
  pGetQueryObjecti64v C.PGETQUERYOBJECTI64V
  pGetQueryObjecti64vEXT C.PGETQUERYOBJECTI64VEXT
  pGetQueryObjectiv C.PGETQUERYOBJECTIV
  pGetQueryObjectivARB C.PGETQUERYOBJECTIVARB
  pGetQueryObjectui64v C.PGETQUERYOBJECTUI64V
  pGetQueryObjectui64vEXT C.PGETQUERYOBJECTUI64VEXT
  pGetQueryObjectuiv C.PGETQUERYOBJECTUIV
  pGetQueryObjectuivARB C.PGETQUERYOBJECTUIVARB
  pGetQueryiv C.PGETQUERYIV
  pGetQueryivARB C.PGETQUERYIVARB
  pGetRenderbufferParameteriv C.PGETRENDERBUFFERPARAMETERIV
  pGetRenderbufferParameterivEXT C.PGETRENDERBUFFERPARAMETERIVEXT
  pGetSamplerParameterIiv C.PGETSAMPLERPARAMETERIIV
  pGetSamplerParameterIuiv C.PGETSAMPLERPARAMETERIUIV
  pGetSamplerParameterfv C.PGETSAMPLERPARAMETERFV
  pGetSamplerParameteriv C.PGETSAMPLERPARAMETERIV
  pGetSeparableFilterEXT C.PGETSEPARABLEFILTEREXT
  pGetShaderInfoLog C.PGETSHADERINFOLOG
  pGetShaderPrecisionFormat C.PGETSHADERPRECISIONFORMAT
  pGetShaderSource C.PGETSHADERSOURCE
  pGetShaderSourceARB C.PGETSHADERSOURCEARB
  pGetShaderiv C.PGETSHADERIV
  pGetSharpenTexFuncSGIS C.PGETSHARPENTEXFUNCSGIS
  pGetString C.PGETSTRING
  pGetStringi C.PGETSTRINGI
  pGetSubroutineIndex C.PGETSUBROUTINEINDEX
  pGetSubroutineUniformLocation C.PGETSUBROUTINEUNIFORMLOCATION
  pGetSynciv C.PGETSYNCIV
  pGetTexBumpParameterfvATI C.PGETTEXBUMPPARAMETERFVATI
  pGetTexBumpParameterivATI C.PGETTEXBUMPPARAMETERIVATI
  pGetTexEnvxvOES C.PGETTEXENVXVOES
  pGetTexFilterFuncSGIS C.PGETTEXFILTERFUNCSGIS
  pGetTexGenxvOES C.PGETTEXGENXVOES
  pGetTexImage C.PGETTEXIMAGE
  pGetTexLevelParameterfv C.PGETTEXLEVELPARAMETERFV
  pGetTexLevelParameteriv C.PGETTEXLEVELPARAMETERIV
  pGetTexLevelParameterxvOES C.PGETTEXLEVELPARAMETERXVOES
  pGetTexParameterIiv C.PGETTEXPARAMETERIIV
  pGetTexParameterIivEXT C.PGETTEXPARAMETERIIVEXT
  pGetTexParameterIuiv C.PGETTEXPARAMETERIUIV
  pGetTexParameterIuivEXT C.PGETTEXPARAMETERIUIVEXT
  pGetTexParameterPointervAPPLE C.PGETTEXPARAMETERPOINTERVAPPLE
  pGetTexParameterfv C.PGETTEXPARAMETERFV
  pGetTexParameteriv C.PGETTEXPARAMETERIV
  pGetTexParameterxvOES C.PGETTEXPARAMETERXVOES
  pGetTextureHandleARB C.PGETTEXTUREHANDLEARB
  pGetTextureHandleNV C.PGETTEXTUREHANDLENV
  pGetTextureImageEXT C.PGETTEXTUREIMAGEEXT
  pGetTextureLevelParameterfvEXT C.PGETTEXTURELEVELPARAMETERFVEXT
  pGetTextureLevelParameterivEXT C.PGETTEXTURELEVELPARAMETERIVEXT
  pGetTextureParameterIivEXT C.PGETTEXTUREPARAMETERIIVEXT
  pGetTextureParameterIuivEXT C.PGETTEXTUREPARAMETERIUIVEXT
  pGetTextureParameterfvEXT C.PGETTEXTUREPARAMETERFVEXT
  pGetTextureParameterivEXT C.PGETTEXTUREPARAMETERIVEXT
  pGetTextureSamplerHandleARB C.PGETTEXTURESAMPLERHANDLEARB
  pGetTextureSamplerHandleNV C.PGETTEXTURESAMPLERHANDLENV
  pGetTrackMatrixivNV C.PGETTRACKMATRIXIVNV
  pGetTransformFeedbackVarying C.PGETTRANSFORMFEEDBACKVARYING
  pGetTransformFeedbackVaryingEXT C.PGETTRANSFORMFEEDBACKVARYINGEXT
  pGetTransformFeedbackVaryingNV C.PGETTRANSFORMFEEDBACKVARYINGNV
  pGetUniformBlockIndex C.PGETUNIFORMBLOCKINDEX
  pGetUniformBufferSizeEXT C.PGETUNIFORMBUFFERSIZEEXT
  pGetUniformIndices C.PGETUNIFORMINDICES
  pGetUniformLocation C.PGETUNIFORMLOCATION
  pGetUniformLocationARB C.PGETUNIFORMLOCATIONARB
  pGetUniformOffsetEXT C.PGETUNIFORMOFFSETEXT
  pGetUniformSubroutineuiv C.PGETUNIFORMSUBROUTINEUIV
  pGetUniformdv C.PGETUNIFORMDV
  pGetUniformfv C.PGETUNIFORMFV
  pGetUniformfvARB C.PGETUNIFORMFVARB
  pGetUniformi64vNV C.PGETUNIFORMI64VNV
  pGetUniformiv C.PGETUNIFORMIV
  pGetUniformivARB C.PGETUNIFORMIVARB
  pGetUniformui64vNV C.PGETUNIFORMUI64VNV
  pGetUniformuiv C.PGETUNIFORMUIV
  pGetUniformuivEXT C.PGETUNIFORMUIVEXT
  pGetVariantArrayObjectfvATI C.PGETVARIANTARRAYOBJECTFVATI
  pGetVariantArrayObjectivATI C.PGETVARIANTARRAYOBJECTIVATI
  pGetVariantBooleanvEXT C.PGETVARIANTBOOLEANVEXT
  pGetVariantFloatvEXT C.PGETVARIANTFLOATVEXT
  pGetVariantIntegervEXT C.PGETVARIANTINTEGERVEXT
  pGetVariantPointervEXT C.PGETVARIANTPOINTERVEXT
  pGetVaryingLocationNV C.PGETVARYINGLOCATIONNV
  pGetVertexArrayIntegeri_vEXT C.PGETVERTEXARRAYINTEGERI_VEXT
  pGetVertexArrayIntegervEXT C.PGETVERTEXARRAYINTEGERVEXT
  pGetVertexArrayPointeri_vEXT C.PGETVERTEXARRAYPOINTERI_VEXT
  pGetVertexArrayPointervEXT C.PGETVERTEXARRAYPOINTERVEXT
  pGetVertexAttribArrayObjectfvATI C.PGETVERTEXATTRIBARRAYOBJECTFVATI
  pGetVertexAttribArrayObjectivATI C.PGETVERTEXATTRIBARRAYOBJECTIVATI
  pGetVertexAttribIiv C.PGETVERTEXATTRIBIIV
  pGetVertexAttribIivEXT C.PGETVERTEXATTRIBIIVEXT
  pGetVertexAttribIuiv C.PGETVERTEXATTRIBIUIV
  pGetVertexAttribIuivEXT C.PGETVERTEXATTRIBIUIVEXT
  pGetVertexAttribLdv C.PGETVERTEXATTRIBLDV
  pGetVertexAttribLdvEXT C.PGETVERTEXATTRIBLDVEXT
  pGetVertexAttribLi64vNV C.PGETVERTEXATTRIBLI64VNV
  pGetVertexAttribLui64vARB C.PGETVERTEXATTRIBLUI64VARB
  pGetVertexAttribLui64vNV C.PGETVERTEXATTRIBLUI64VNV
  pGetVertexAttribPointerv C.PGETVERTEXATTRIBPOINTERV
  pGetVertexAttribPointervARB C.PGETVERTEXATTRIBPOINTERVARB
  pGetVertexAttribPointervNV C.PGETVERTEXATTRIBPOINTERVNV
  pGetVertexAttribdv C.PGETVERTEXATTRIBDV
  pGetVertexAttribdvARB C.PGETVERTEXATTRIBDVARB
  pGetVertexAttribdvNV C.PGETVERTEXATTRIBDVNV
  pGetVertexAttribfv C.PGETVERTEXATTRIBFV
  pGetVertexAttribfvARB C.PGETVERTEXATTRIBFVARB
  pGetVertexAttribfvNV C.PGETVERTEXATTRIBFVNV
  pGetVertexAttribiv C.PGETVERTEXATTRIBIV
  pGetVertexAttribivARB C.PGETVERTEXATTRIBIVARB
  pGetVertexAttribivNV C.PGETVERTEXATTRIBIVNV
  pGetVideoCaptureStreamdvNV C.PGETVIDEOCAPTURESTREAMDVNV
  pGetVideoCaptureStreamfvNV C.PGETVIDEOCAPTURESTREAMFVNV
  pGetVideoCaptureStreamivNV C.PGETVIDEOCAPTURESTREAMIVNV
  pGetVideoCaptureivNV C.PGETVIDEOCAPTUREIVNV
  pGetVideoi64vNV C.PGETVIDEOI64VNV
  pGetVideoivNV C.PGETVIDEOIVNV
  pGetVideoui64vNV C.PGETVIDEOUI64VNV
  pGetVideouivNV C.PGETVIDEOUIVNV
  pGetnCompressedTexImageARB C.PGETNCOMPRESSEDTEXIMAGEARB
  pGetnTexImageARB C.PGETNTEXIMAGEARB
  pGetnUniformdvARB C.PGETNUNIFORMDVARB
  pGetnUniformfvARB C.PGETNUNIFORMFVARB
  pGetnUniformivARB C.PGETNUNIFORMIVARB
  pGetnUniformuivARB C.PGETNUNIFORMUIVARB
  pGlobalAlphaFactorbSUN C.PGLOBALALPHAFACTORBSUN
  pGlobalAlphaFactordSUN C.PGLOBALALPHAFACTORDSUN
  pGlobalAlphaFactorfSUN C.PGLOBALALPHAFACTORFSUN
  pGlobalAlphaFactoriSUN C.PGLOBALALPHAFACTORISUN
  pGlobalAlphaFactorsSUN C.PGLOBALALPHAFACTORSSUN
  pGlobalAlphaFactorubSUN C.PGLOBALALPHAFACTORUBSUN
  pGlobalAlphaFactoruiSUN C.PGLOBALALPHAFACTORUISUN
  pGlobalAlphaFactorusSUN C.PGLOBALALPHAFACTORUSSUN
  pHint C.PHINT
  pHintPGI C.PHINTPGI
  pHistogramEXT C.PHISTOGRAMEXT
  pIglooInterfaceSGIX C.PIGLOOINTERFACESGIX
  pImageTransformParameterfHP C.PIMAGETRANSFORMPARAMETERFHP
  pImageTransformParameterfvHP C.PIMAGETRANSFORMPARAMETERFVHP
  pImageTransformParameteriHP C.PIMAGETRANSFORMPARAMETERIHP
  pImageTransformParameterivHP C.PIMAGETRANSFORMPARAMETERIVHP
  pImportSyncEXT C.PIMPORTSYNCEXT
  pIndexFormatNV C.PINDEXFORMATNV
  pIndexFuncEXT C.PINDEXFUNCEXT
  pIndexMaterialEXT C.PINDEXMATERIALEXT
  pIndexPointerEXT C.PINDEXPOINTEREXT
  pIndexPointerListIBM C.PINDEXPOINTERLISTIBM
  pIndexxOES C.PINDEXXOES
  pIndexxvOES C.PINDEXXVOES
  pInsertComponentEXT C.PINSERTCOMPONENTEXT
  pInsertEventMarkerEXT C.PINSERTEVENTMARKEREXT
  pInstrumentsBufferSGIX C.PINSTRUMENTSBUFFERSGIX
  pInterpolatePathsNV C.PINTERPOLATEPATHSNV
  pInvalidateBufferData C.PINVALIDATEBUFFERDATA
  pInvalidateBufferSubData C.PINVALIDATEBUFFERSUBDATA
  pInvalidateFramebuffer C.PINVALIDATEFRAMEBUFFER
  pInvalidateSubFramebuffer C.PINVALIDATESUBFRAMEBUFFER
  pInvalidateTexImage C.PINVALIDATETEXIMAGE
  pInvalidateTexSubImage C.PINVALIDATETEXSUBIMAGE
  pIsAsyncMarkerSGIX C.PISASYNCMARKERSGIX
  pIsBuffer C.PISBUFFER
  pIsBufferARB C.PISBUFFERARB
  pIsBufferResidentNV C.PISBUFFERRESIDENTNV
  pIsEnabled C.PISENABLED
  pIsEnabledIndexedEXT C.PISENABLEDINDEXEDEXT
  pIsEnabledi C.PISENABLEDI
  pIsFenceAPPLE C.PISFENCEAPPLE
  pIsFenceNV C.PISFENCENV
  pIsFramebuffer C.PISFRAMEBUFFER
  pIsFramebufferEXT C.PISFRAMEBUFFEREXT
  pIsImageHandleResidentARB C.PISIMAGEHANDLERESIDENTARB
  pIsImageHandleResidentNV C.PISIMAGEHANDLERESIDENTNV
  pIsNameAMD C.PISNAMEAMD
  pIsNamedBufferResidentNV C.PISNAMEDBUFFERRESIDENTNV
  pIsNamedStringARB C.PISNAMEDSTRINGARB
  pIsObjectBufferATI C.PISOBJECTBUFFERATI
  pIsOcclusionQueryNV C.PISOCCLUSIONQUERYNV
  pIsPathNV C.PISPATHNV
  pIsPointInFillPathNV C.PISPOINTINFILLPATHNV
  pIsPointInStrokePathNV C.PISPOINTINSTROKEPATHNV
  pIsProgram C.PISPROGRAM
  pIsProgramARB C.PISPROGRAMARB
  pIsProgramNV C.PISPROGRAMNV
  pIsProgramPipeline C.PISPROGRAMPIPELINE
  pIsProgramPipelineEXT C.PISPROGRAMPIPELINEEXT
  pIsQuery C.PISQUERY
  pIsQueryARB C.PISQUERYARB
  pIsRenderbuffer C.PISRENDERBUFFER
  pIsRenderbufferEXT C.PISRENDERBUFFEREXT
  pIsSampler C.PISSAMPLER
  pIsShader C.PISSHADER
  pIsSync C.PISSYNC
  pIsTexture C.PISTEXTURE
  pIsTextureEXT C.PISTEXTUREEXT
  pIsTextureHandleResidentARB C.PISTEXTUREHANDLERESIDENTARB
  pIsTextureHandleResidentNV C.PISTEXTUREHANDLERESIDENTNV
  pIsTransformFeedback C.PISTRANSFORMFEEDBACK
  pIsTransformFeedbackNV C.PISTRANSFORMFEEDBACKNV
  pIsVariantEnabledEXT C.PISVARIANTENABLEDEXT
  pIsVertexArray C.PISVERTEXARRAY
  pIsVertexArrayAPPLE C.PISVERTEXARRAYAPPLE
  pIsVertexAttribEnabledAPPLE C.PISVERTEXATTRIBENABLEDAPPLE
  pLabelObjectEXT C.PLABELOBJECTEXT
  pLightEnviSGIX C.PLIGHTENVISGIX
  pLightModelxOES C.PLIGHTMODELXOES
  pLightModelxvOES C.PLIGHTMODELXVOES
  pLightxOES C.PLIGHTXOES
  pLightxvOES C.PLIGHTXVOES
  pLineWidth C.PLINEWIDTH
  pLineWidthxOES C.PLINEWIDTHXOES
  pLinkProgram C.PLINKPROGRAM
  pLinkProgramARB C.PLINKPROGRAMARB
  pListParameterfSGIX C.PLISTPARAMETERFSGIX
  pListParameterfvSGIX C.PLISTPARAMETERFVSGIX
  pListParameteriSGIX C.PLISTPARAMETERISGIX
  pListParameterivSGIX C.PLISTPARAMETERIVSGIX
  pLoadIdentityDeformationMapSGIX C.PLOADIDENTITYDEFORMATIONMAPSGIX
  pLoadMatrixxOES C.PLOADMATRIXXOES
  pLoadProgramNV C.PLOADPROGRAMNV
  pLoadTransposeMatrixdARB C.PLOADTRANSPOSEMATRIXDARB
  pLoadTransposeMatrixfARB C.PLOADTRANSPOSEMATRIXFARB
  pLoadTransposeMatrixxOES C.PLOADTRANSPOSEMATRIXXOES
  pLockArraysEXT C.PLOCKARRAYSEXT
  pLogicOp C.PLOGICOP
  pMakeBufferNonResidentNV C.PMAKEBUFFERNONRESIDENTNV
  pMakeBufferResidentNV C.PMAKEBUFFERRESIDENTNV
  pMakeImageHandleNonResidentARB C.PMAKEIMAGEHANDLENONRESIDENTARB
  pMakeImageHandleNonResidentNV C.PMAKEIMAGEHANDLENONRESIDENTNV
  pMakeImageHandleResidentARB C.PMAKEIMAGEHANDLERESIDENTARB
  pMakeImageHandleResidentNV C.PMAKEIMAGEHANDLERESIDENTNV
  pMakeNamedBufferNonResidentNV C.PMAKENAMEDBUFFERNONRESIDENTNV
  pMakeNamedBufferResidentNV C.PMAKENAMEDBUFFERRESIDENTNV
  pMakeTextureHandleNonResidentARB C.PMAKETEXTUREHANDLENONRESIDENTARB
  pMakeTextureHandleNonResidentNV C.PMAKETEXTUREHANDLENONRESIDENTNV
  pMakeTextureHandleResidentARB C.PMAKETEXTUREHANDLERESIDENTARB
  pMakeTextureHandleResidentNV C.PMAKETEXTUREHANDLERESIDENTNV
  pMap1xOES C.PMAP1XOES
  pMap2xOES C.PMAP2XOES
  pMapBuffer C.PMAPBUFFER
  pMapBufferARB C.PMAPBUFFERARB
  pMapBufferRange C.PMAPBUFFERRANGE
  pMapControlPointsNV C.PMAPCONTROLPOINTSNV
  pMapGrid1xOES C.PMAPGRID1XOES
  pMapGrid2xOES C.PMAPGRID2XOES
  pMapNamedBufferEXT C.PMAPNAMEDBUFFEREXT
  pMapNamedBufferRangeEXT C.PMAPNAMEDBUFFERRANGEEXT
  pMapObjectBufferATI C.PMAPOBJECTBUFFERATI
  pMapParameterfvNV C.PMAPPARAMETERFVNV
  pMapParameterivNV C.PMAPPARAMETERIVNV
  pMapTexture2DINTEL C.PMAPTEXTURE2DINTEL
  pMapVertexAttrib1dAPPLE C.PMAPVERTEXATTRIB1DAPPLE
  pMapVertexAttrib1fAPPLE C.PMAPVERTEXATTRIB1FAPPLE
  pMapVertexAttrib2dAPPLE C.PMAPVERTEXATTRIB2DAPPLE
  pMapVertexAttrib2fAPPLE C.PMAPVERTEXATTRIB2FAPPLE
  pMaterialxOES C.PMATERIALXOES
  pMaterialxvOES C.PMATERIALXVOES
  pMatrixFrustumEXT C.PMATRIXFRUSTUMEXT
  pMatrixIndexPointerARB C.PMATRIXINDEXPOINTERARB
  pMatrixIndexubvARB C.PMATRIXINDEXUBVARB
  pMatrixIndexuivARB C.PMATRIXINDEXUIVARB
  pMatrixIndexusvARB C.PMATRIXINDEXUSVARB
  pMatrixLoadIdentityEXT C.PMATRIXLOADIDENTITYEXT
  pMatrixLoadTransposedEXT C.PMATRIXLOADTRANSPOSEDEXT
  pMatrixLoadTransposefEXT C.PMATRIXLOADTRANSPOSEFEXT
  pMatrixLoaddEXT C.PMATRIXLOADDEXT
  pMatrixLoadfEXT C.PMATRIXLOADFEXT
  pMatrixMultTransposedEXT C.PMATRIXMULTTRANSPOSEDEXT
  pMatrixMultTransposefEXT C.PMATRIXMULTTRANSPOSEFEXT
  pMatrixMultdEXT C.PMATRIXMULTDEXT
  pMatrixMultfEXT C.PMATRIXMULTFEXT
  pMatrixOrthoEXT C.PMATRIXORTHOEXT
  pMatrixPopEXT C.PMATRIXPOPEXT
  pMatrixPushEXT C.PMATRIXPUSHEXT
  pMatrixRotatedEXT C.PMATRIXROTATEDEXT
  pMatrixRotatefEXT C.PMATRIXROTATEFEXT
  pMatrixScaledEXT C.PMATRIXSCALEDEXT
  pMatrixScalefEXT C.PMATRIXSCALEFEXT
  pMatrixTranslatedEXT C.PMATRIXTRANSLATEDEXT
  pMatrixTranslatefEXT C.PMATRIXTRANSLATEFEXT
  pMemoryBarrier C.PMEMORYBARRIER
  pMemoryBarrierEXT C.PMEMORYBARRIEREXT
  pMinSampleShading C.PMINSAMPLESHADING
  pMinSampleShadingARB C.PMINSAMPLESHADINGARB
  pMinmaxEXT C.PMINMAXEXT
  pMultMatrixxOES C.PMULTMATRIXXOES
  pMultTransposeMatrixdARB C.PMULTTRANSPOSEMATRIXDARB
  pMultTransposeMatrixfARB C.PMULTTRANSPOSEMATRIXFARB
  pMultTransposeMatrixxOES C.PMULTTRANSPOSEMATRIXXOES
  pMultiDrawArrays C.PMULTIDRAWARRAYS
  pMultiDrawArraysEXT C.PMULTIDRAWARRAYSEXT
  pMultiDrawArraysIndirect C.PMULTIDRAWARRAYSINDIRECT
  pMultiDrawArraysIndirectAMD C.PMULTIDRAWARRAYSINDIRECTAMD
  pMultiDrawArraysIndirectBindlessNV C.PMULTIDRAWARRAYSINDIRECTBINDLESSNV
  pMultiDrawArraysIndirectCountARB C.PMULTIDRAWARRAYSINDIRECTCOUNTARB
  pMultiDrawElementArrayAPPLE C.PMULTIDRAWELEMENTARRAYAPPLE
  pMultiDrawElements C.PMULTIDRAWELEMENTS
  pMultiDrawElementsBaseVertex C.PMULTIDRAWELEMENTSBASEVERTEX
  pMultiDrawElementsEXT C.PMULTIDRAWELEMENTSEXT
  pMultiDrawElementsIndirect C.PMULTIDRAWELEMENTSINDIRECT
  pMultiDrawElementsIndirectAMD C.PMULTIDRAWELEMENTSINDIRECTAMD
  pMultiDrawElementsIndirectBindlessNV C.PMULTIDRAWELEMENTSINDIRECTBINDLESSNV
  pMultiDrawElementsIndirectCountARB C.PMULTIDRAWELEMENTSINDIRECTCOUNTARB
  pMultiDrawRangeElementArrayAPPLE C.PMULTIDRAWRANGEELEMENTARRAYAPPLE
  pMultiModeDrawArraysIBM C.PMULTIMODEDRAWARRAYSIBM
  pMultiModeDrawElementsIBM C.PMULTIMODEDRAWELEMENTSIBM
  pMultiTexBufferEXT C.PMULTITEXBUFFEREXT
  pMultiTexCoord1bOES C.PMULTITEXCOORD1BOES
  pMultiTexCoord1bvOES C.PMULTITEXCOORD1BVOES
  pMultiTexCoord1dARB C.PMULTITEXCOORD1DARB
  pMultiTexCoord1dvARB C.PMULTITEXCOORD1DVARB
  pMultiTexCoord1fARB C.PMULTITEXCOORD1FARB
  pMultiTexCoord1fvARB C.PMULTITEXCOORD1FVARB
  pMultiTexCoord1hNV C.PMULTITEXCOORD1HNV
  pMultiTexCoord1hvNV C.PMULTITEXCOORD1HVNV
  pMultiTexCoord1iARB C.PMULTITEXCOORD1IARB
  pMultiTexCoord1ivARB C.PMULTITEXCOORD1IVARB
  pMultiTexCoord1sARB C.PMULTITEXCOORD1SARB
  pMultiTexCoord1svARB C.PMULTITEXCOORD1SVARB
  pMultiTexCoord1xOES C.PMULTITEXCOORD1XOES
  pMultiTexCoord1xvOES C.PMULTITEXCOORD1XVOES
  pMultiTexCoord2bOES C.PMULTITEXCOORD2BOES
  pMultiTexCoord2bvOES C.PMULTITEXCOORD2BVOES
  pMultiTexCoord2dARB C.PMULTITEXCOORD2DARB
  pMultiTexCoord2dvARB C.PMULTITEXCOORD2DVARB
  pMultiTexCoord2fARB C.PMULTITEXCOORD2FARB
  pMultiTexCoord2fvARB C.PMULTITEXCOORD2FVARB
  pMultiTexCoord2hNV C.PMULTITEXCOORD2HNV
  pMultiTexCoord2hvNV C.PMULTITEXCOORD2HVNV
  pMultiTexCoord2iARB C.PMULTITEXCOORD2IARB
  pMultiTexCoord2ivARB C.PMULTITEXCOORD2IVARB
  pMultiTexCoord2sARB C.PMULTITEXCOORD2SARB
  pMultiTexCoord2svARB C.PMULTITEXCOORD2SVARB
  pMultiTexCoord2xOES C.PMULTITEXCOORD2XOES
  pMultiTexCoord2xvOES C.PMULTITEXCOORD2XVOES
  pMultiTexCoord3bOES C.PMULTITEXCOORD3BOES
  pMultiTexCoord3bvOES C.PMULTITEXCOORD3BVOES
  pMultiTexCoord3dARB C.PMULTITEXCOORD3DARB
  pMultiTexCoord3dvARB C.PMULTITEXCOORD3DVARB
  pMultiTexCoord3fARB C.PMULTITEXCOORD3FARB
  pMultiTexCoord3fvARB C.PMULTITEXCOORD3FVARB
  pMultiTexCoord3hNV C.PMULTITEXCOORD3HNV
  pMultiTexCoord3hvNV C.PMULTITEXCOORD3HVNV
  pMultiTexCoord3iARB C.PMULTITEXCOORD3IARB
  pMultiTexCoord3ivARB C.PMULTITEXCOORD3IVARB
  pMultiTexCoord3sARB C.PMULTITEXCOORD3SARB
  pMultiTexCoord3svARB C.PMULTITEXCOORD3SVARB
  pMultiTexCoord3xOES C.PMULTITEXCOORD3XOES
  pMultiTexCoord3xvOES C.PMULTITEXCOORD3XVOES
  pMultiTexCoord4bOES C.PMULTITEXCOORD4BOES
  pMultiTexCoord4bvOES C.PMULTITEXCOORD4BVOES
  pMultiTexCoord4dARB C.PMULTITEXCOORD4DARB
  pMultiTexCoord4dvARB C.PMULTITEXCOORD4DVARB
  pMultiTexCoord4fARB C.PMULTITEXCOORD4FARB
  pMultiTexCoord4fvARB C.PMULTITEXCOORD4FVARB
  pMultiTexCoord4hNV C.PMULTITEXCOORD4HNV
  pMultiTexCoord4hvNV C.PMULTITEXCOORD4HVNV
  pMultiTexCoord4iARB C.PMULTITEXCOORD4IARB
  pMultiTexCoord4ivARB C.PMULTITEXCOORD4IVARB
  pMultiTexCoord4sARB C.PMULTITEXCOORD4SARB
  pMultiTexCoord4svARB C.PMULTITEXCOORD4SVARB
  pMultiTexCoord4xOES C.PMULTITEXCOORD4XOES
  pMultiTexCoord4xvOES C.PMULTITEXCOORD4XVOES
  pMultiTexCoordPointerEXT C.PMULTITEXCOORDPOINTEREXT
  pMultiTexEnvfEXT C.PMULTITEXENVFEXT
  pMultiTexEnvfvEXT C.PMULTITEXENVFVEXT
  pMultiTexEnviEXT C.PMULTITEXENVIEXT
  pMultiTexEnvivEXT C.PMULTITEXENVIVEXT
  pMultiTexGendEXT C.PMULTITEXGENDEXT
  pMultiTexGendvEXT C.PMULTITEXGENDVEXT
  pMultiTexGenfEXT C.PMULTITEXGENFEXT
  pMultiTexGenfvEXT C.PMULTITEXGENFVEXT
  pMultiTexGeniEXT C.PMULTITEXGENIEXT
  pMultiTexGenivEXT C.PMULTITEXGENIVEXT
  pMultiTexImage1DEXT C.PMULTITEXIMAGE1DEXT
  pMultiTexImage2DEXT C.PMULTITEXIMAGE2DEXT
  pMultiTexImage3DEXT C.PMULTITEXIMAGE3DEXT
  pMultiTexParameterIivEXT C.PMULTITEXPARAMETERIIVEXT
  pMultiTexParameterIuivEXT C.PMULTITEXPARAMETERIUIVEXT
  pMultiTexParameterfEXT C.PMULTITEXPARAMETERFEXT
  pMultiTexParameterfvEXT C.PMULTITEXPARAMETERFVEXT
  pMultiTexParameteriEXT C.PMULTITEXPARAMETERIEXT
  pMultiTexParameterivEXT C.PMULTITEXPARAMETERIVEXT
  pMultiTexRenderbufferEXT C.PMULTITEXRENDERBUFFEREXT
  pMultiTexSubImage1DEXT C.PMULTITEXSUBIMAGE1DEXT
  pMultiTexSubImage2DEXT C.PMULTITEXSUBIMAGE2DEXT
  pMultiTexSubImage3DEXT C.PMULTITEXSUBIMAGE3DEXT
  pNamedBufferDataEXT C.PNAMEDBUFFERDATAEXT
  pNamedBufferStorageEXT C.PNAMEDBUFFERSTORAGEEXT
  pNamedBufferSubDataEXT C.PNAMEDBUFFERSUBDATAEXT
  pNamedCopyBufferSubDataEXT C.PNAMEDCOPYBUFFERSUBDATAEXT
  pNamedFramebufferParameteriEXT C.PNAMEDFRAMEBUFFERPARAMETERIEXT
  pNamedFramebufferRenderbufferEXT C.PNAMEDFRAMEBUFFERRENDERBUFFEREXT
  pNamedFramebufferTexture1DEXT C.PNAMEDFRAMEBUFFERTEXTURE1DEXT
  pNamedFramebufferTexture2DEXT C.PNAMEDFRAMEBUFFERTEXTURE2DEXT
  pNamedFramebufferTexture3DEXT C.PNAMEDFRAMEBUFFERTEXTURE3DEXT
  pNamedFramebufferTextureEXT C.PNAMEDFRAMEBUFFERTEXTUREEXT
  pNamedFramebufferTextureFaceEXT C.PNAMEDFRAMEBUFFERTEXTUREFACEEXT
  pNamedFramebufferTextureLayerEXT C.PNAMEDFRAMEBUFFERTEXTURELAYEREXT
  pNamedProgramLocalParameter4dEXT C.PNAMEDPROGRAMLOCALPARAMETER4DEXT
  pNamedProgramLocalParameter4dvEXT C.PNAMEDPROGRAMLOCALPARAMETER4DVEXT
  pNamedProgramLocalParameter4fEXT C.PNAMEDPROGRAMLOCALPARAMETER4FEXT
  pNamedProgramLocalParameter4fvEXT C.PNAMEDPROGRAMLOCALPARAMETER4FVEXT
  pNamedProgramLocalParameterI4iEXT C.PNAMEDPROGRAMLOCALPARAMETERI4IEXT
  pNamedProgramLocalParameterI4ivEXT C.PNAMEDPROGRAMLOCALPARAMETERI4IVEXT
  pNamedProgramLocalParameterI4uiEXT C.PNAMEDPROGRAMLOCALPARAMETERI4UIEXT
  pNamedProgramLocalParameterI4uivEXT C.PNAMEDPROGRAMLOCALPARAMETERI4UIVEXT
  pNamedProgramLocalParameters4fvEXT C.PNAMEDPROGRAMLOCALPARAMETERS4FVEXT
  pNamedProgramLocalParametersI4ivEXT C.PNAMEDPROGRAMLOCALPARAMETERSI4IVEXT
  pNamedProgramLocalParametersI4uivEXT C.PNAMEDPROGRAMLOCALPARAMETERSI4UIVEXT
  pNamedProgramStringEXT C.PNAMEDPROGRAMSTRINGEXT
  pNamedRenderbufferStorageEXT C.PNAMEDRENDERBUFFERSTORAGEEXT
  pNamedRenderbufferStorageMultisampleCoverageEXT C.PNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXT
  pNamedRenderbufferStorageMultisampleEXT C.PNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXT
  pNamedStringARB C.PNAMEDSTRINGARB
  pNewObjectBufferATI C.PNEWOBJECTBUFFERATI
  pNormal3fVertex3fSUN C.PNORMAL3FVERTEX3FSUN
  pNormal3fVertex3fvSUN C.PNORMAL3FVERTEX3FVSUN
  pNormal3hNV C.PNORMAL3HNV
  pNormal3hvNV C.PNORMAL3HVNV
  pNormal3xOES C.PNORMAL3XOES
  pNormal3xvOES C.PNORMAL3XVOES
  pNormalFormatNV C.PNORMALFORMATNV
  pNormalPointerEXT C.PNORMALPOINTEREXT
  pNormalPointerListIBM C.PNORMALPOINTERLISTIBM
  pNormalPointervINTEL C.PNORMALPOINTERVINTEL
  pNormalStream3bATI C.PNORMALSTREAM3BATI
  pNormalStream3bvATI C.PNORMALSTREAM3BVATI
  pNormalStream3dATI C.PNORMALSTREAM3DATI
  pNormalStream3dvATI C.PNORMALSTREAM3DVATI
  pNormalStream3fATI C.PNORMALSTREAM3FATI
  pNormalStream3fvATI C.PNORMALSTREAM3FVATI
  pNormalStream3iATI C.PNORMALSTREAM3IATI
  pNormalStream3ivATI C.PNORMALSTREAM3IVATI
  pNormalStream3sATI C.PNORMALSTREAM3SATI
  pNormalStream3svATI C.PNORMALSTREAM3SVATI
  pObjectLabel C.POBJECTLABEL
  pObjectLabelKHR C.POBJECTLABELKHR
  pObjectPtrLabel C.POBJECTPTRLABEL
  pObjectPtrLabelKHR C.POBJECTPTRLABELKHR
  pObjectPurgeableAPPLE C.POBJECTPURGEABLEAPPLE
  pObjectUnpurgeableAPPLE C.POBJECTUNPURGEABLEAPPLE
  pOrthofOES C.PORTHOFOES
  pOrthoxOES C.PORTHOXOES
  pPNTrianglesfATI C.PPNTRIANGLESFATI
  pPNTrianglesiATI C.PPNTRIANGLESIATI
  pPassTexCoordATI C.PPASSTEXCOORDATI
  pPassThroughxOES C.PPASSTHROUGHXOES
  pPatchParameterfv C.PPATCHPARAMETERFV
  pPatchParameteri C.PPATCHPARAMETERI
  pPathColorGenNV C.PPATHCOLORGENNV
  pPathCommandsNV C.PPATHCOMMANDSNV
  pPathCoordsNV C.PPATHCOORDSNV
  pPathCoverDepthFuncNV C.PPATHCOVERDEPTHFUNCNV
  pPathDashArrayNV C.PPATHDASHARRAYNV
  pPathFogGenNV C.PPATHFOGGENNV
  pPathGlyphRangeNV C.PPATHGLYPHRANGENV
  pPathGlyphsNV C.PPATHGLYPHSNV
  pPathParameterfNV C.PPATHPARAMETERFNV
  pPathParameterfvNV C.PPATHPARAMETERFVNV
  pPathParameteriNV C.PPATHPARAMETERINV
  pPathParameterivNV C.PPATHPARAMETERIVNV
  pPathStencilDepthOffsetNV C.PPATHSTENCILDEPTHOFFSETNV
  pPathStencilFuncNV C.PPATHSTENCILFUNCNV
  pPathStringNV C.PPATHSTRINGNV
  pPathSubCommandsNV C.PPATHSUBCOMMANDSNV
  pPathSubCoordsNV C.PPATHSUBCOORDSNV
  pPathTexGenNV C.PPATHTEXGENNV
  pPauseTransformFeedback C.PPAUSETRANSFORMFEEDBACK
  pPauseTransformFeedbackNV C.PPAUSETRANSFORMFEEDBACKNV
  pPixelDataRangeNV C.PPIXELDATARANGENV
  pPixelMapx C.PPIXELMAPX
  pPixelStoref C.PPIXELSTOREF
  pPixelStorei C.PPIXELSTOREI
  pPixelStorex C.PPIXELSTOREX
  pPixelTexGenParameterfSGIS C.PPIXELTEXGENPARAMETERFSGIS
  pPixelTexGenParameterfvSGIS C.PPIXELTEXGENPARAMETERFVSGIS
  pPixelTexGenParameteriSGIS C.PPIXELTEXGENPARAMETERISGIS
  pPixelTexGenParameterivSGIS C.PPIXELTEXGENPARAMETERIVSGIS
  pPixelTexGenSGIX C.PPIXELTEXGENSGIX
  pPixelTransferxOES C.PPIXELTRANSFERXOES
  pPixelTransformParameterfEXT C.PPIXELTRANSFORMPARAMETERFEXT
  pPixelTransformParameterfvEXT C.PPIXELTRANSFORMPARAMETERFVEXT
  pPixelTransformParameteriEXT C.PPIXELTRANSFORMPARAMETERIEXT
  pPixelTransformParameterivEXT C.PPIXELTRANSFORMPARAMETERIVEXT
  pPixelZoomxOES C.PPIXELZOOMXOES
  pPointAlongPathNV C.PPOINTALONGPATHNV
  pPointParameterf C.PPOINTPARAMETERF
  pPointParameterfARB C.PPOINTPARAMETERFARB
  pPointParameterfEXT C.PPOINTPARAMETERFEXT
  pPointParameterfSGIS C.PPOINTPARAMETERFSGIS
  pPointParameterfv C.PPOINTPARAMETERFV
  pPointParameterfvARB C.PPOINTPARAMETERFVARB
  pPointParameterfvEXT C.PPOINTPARAMETERFVEXT
  pPointParameterfvSGIS C.PPOINTPARAMETERFVSGIS
  pPointParameteri C.PPOINTPARAMETERI
  pPointParameteriNV C.PPOINTPARAMETERINV
  pPointParameteriv C.PPOINTPARAMETERIV
  pPointParameterivNV C.PPOINTPARAMETERIVNV
  pPointParameterxOES C.PPOINTPARAMETERXOES
  pPointParameterxvOES C.PPOINTPARAMETERXVOES
  pPointSize C.PPOINTSIZE
  pPointSizexOES C.PPOINTSIZEXOES
  pPollAsyncSGIX C.PPOLLASYNCSGIX
  pPollInstrumentsSGIX C.PPOLLINSTRUMENTSSGIX
  pPolygonMode C.PPOLYGONMODE
  pPolygonOffset C.PPOLYGONOFFSET
  pPolygonOffsetEXT C.PPOLYGONOFFSETEXT
  pPolygonOffsetxOES C.PPOLYGONOFFSETXOES
  pPopDebugGroup C.PPOPDEBUGGROUP
  pPopDebugGroupKHR C.PPOPDEBUGGROUPKHR
  pPopGroupMarkerEXT C.PPOPGROUPMARKEREXT
  pPresentFrameDualFillNV C.PPRESENTFRAMEDUALFILLNV
  pPresentFrameKeyedNV C.PPRESENTFRAMEKEYEDNV
  pPrimitiveRestartIndex C.PPRIMITIVERESTARTINDEX
  pPrimitiveRestartIndexNV C.PPRIMITIVERESTARTINDEXNV
  pPrimitiveRestartNV C.PPRIMITIVERESTARTNV
  pPrioritizeTexturesEXT C.PPRIORITIZETEXTURESEXT
  pPrioritizeTexturesxOES C.PPRIORITIZETEXTURESXOES
  pProgramBinary C.PPROGRAMBINARY
  pProgramBufferParametersIivNV C.PPROGRAMBUFFERPARAMETERSIIVNV
  pProgramBufferParametersIuivNV C.PPROGRAMBUFFERPARAMETERSIUIVNV
  pProgramBufferParametersfvNV C.PPROGRAMBUFFERPARAMETERSFVNV
  pProgramEnvParameter4dARB C.PPROGRAMENVPARAMETER4DARB
  pProgramEnvParameter4dvARB C.PPROGRAMENVPARAMETER4DVARB
  pProgramEnvParameter4fARB C.PPROGRAMENVPARAMETER4FARB
  pProgramEnvParameter4fvARB C.PPROGRAMENVPARAMETER4FVARB
  pProgramEnvParameterI4iNV C.PPROGRAMENVPARAMETERI4INV
  pProgramEnvParameterI4ivNV C.PPROGRAMENVPARAMETERI4IVNV
  pProgramEnvParameterI4uiNV C.PPROGRAMENVPARAMETERI4UINV
  pProgramEnvParameterI4uivNV C.PPROGRAMENVPARAMETERI4UIVNV
  pProgramEnvParameters4fvEXT C.PPROGRAMENVPARAMETERS4FVEXT
  pProgramEnvParametersI4ivNV C.PPROGRAMENVPARAMETERSI4IVNV
  pProgramEnvParametersI4uivNV C.PPROGRAMENVPARAMETERSI4UIVNV
  pProgramLocalParameter4dARB C.PPROGRAMLOCALPARAMETER4DARB
  pProgramLocalParameter4dvARB C.PPROGRAMLOCALPARAMETER4DVARB
  pProgramLocalParameter4fARB C.PPROGRAMLOCALPARAMETER4FARB
  pProgramLocalParameter4fvARB C.PPROGRAMLOCALPARAMETER4FVARB
  pProgramLocalParameterI4iNV C.PPROGRAMLOCALPARAMETERI4INV
  pProgramLocalParameterI4ivNV C.PPROGRAMLOCALPARAMETERI4IVNV
  pProgramLocalParameterI4uiNV C.PPROGRAMLOCALPARAMETERI4UINV
  pProgramLocalParameterI4uivNV C.PPROGRAMLOCALPARAMETERI4UIVNV
  pProgramLocalParameters4fvEXT C.PPROGRAMLOCALPARAMETERS4FVEXT
  pProgramLocalParametersI4ivNV C.PPROGRAMLOCALPARAMETERSI4IVNV
  pProgramLocalParametersI4uivNV C.PPROGRAMLOCALPARAMETERSI4UIVNV
  pProgramNamedParameter4dNV C.PPROGRAMNAMEDPARAMETER4DNV
  pProgramNamedParameter4dvNV C.PPROGRAMNAMEDPARAMETER4DVNV
  pProgramNamedParameter4fNV C.PPROGRAMNAMEDPARAMETER4FNV
  pProgramNamedParameter4fvNV C.PPROGRAMNAMEDPARAMETER4FVNV
  pProgramParameter4dNV C.PPROGRAMPARAMETER4DNV
  pProgramParameter4dvNV C.PPROGRAMPARAMETER4DVNV
  pProgramParameter4fNV C.PPROGRAMPARAMETER4FNV
  pProgramParameter4fvNV C.PPROGRAMPARAMETER4FVNV
  pProgramParameteri C.PPROGRAMPARAMETERI
  pProgramParameteriARB C.PPROGRAMPARAMETERIARB
  pProgramParameteriEXT C.PPROGRAMPARAMETERIEXT
  pProgramParameters4dvNV C.PPROGRAMPARAMETERS4DVNV
  pProgramParameters4fvNV C.PPROGRAMPARAMETERS4FVNV
  pProgramStringARB C.PPROGRAMSTRINGARB
  pProgramSubroutineParametersuivNV C.PPROGRAMSUBROUTINEPARAMETERSUIVNV
  pProgramUniform1d C.PPROGRAMUNIFORM1D
  pProgramUniform1dEXT C.PPROGRAMUNIFORM1DEXT
  pProgramUniform1dv C.PPROGRAMUNIFORM1DV
  pProgramUniform1dvEXT C.PPROGRAMUNIFORM1DVEXT
  pProgramUniform1f C.PPROGRAMUNIFORM1F
  pProgramUniform1fEXT C.PPROGRAMUNIFORM1FEXT
  pProgramUniform1fv C.PPROGRAMUNIFORM1FV
  pProgramUniform1fvEXT C.PPROGRAMUNIFORM1FVEXT
  pProgramUniform1i C.PPROGRAMUNIFORM1I
  pProgramUniform1i64NV C.PPROGRAMUNIFORM1I64NV
  pProgramUniform1i64vNV C.PPROGRAMUNIFORM1I64VNV
  pProgramUniform1iEXT C.PPROGRAMUNIFORM1IEXT
  pProgramUniform1iv C.PPROGRAMUNIFORM1IV
  pProgramUniform1ivEXT C.PPROGRAMUNIFORM1IVEXT
  pProgramUniform1ui C.PPROGRAMUNIFORM1UI
  pProgramUniform1ui64NV C.PPROGRAMUNIFORM1UI64NV
  pProgramUniform1ui64vNV C.PPROGRAMUNIFORM1UI64VNV
  pProgramUniform1uiEXT C.PPROGRAMUNIFORM1UIEXT
  pProgramUniform1uiv C.PPROGRAMUNIFORM1UIV
  pProgramUniform1uivEXT C.PPROGRAMUNIFORM1UIVEXT
  pProgramUniform2d C.PPROGRAMUNIFORM2D
  pProgramUniform2dEXT C.PPROGRAMUNIFORM2DEXT
  pProgramUniform2dv C.PPROGRAMUNIFORM2DV
  pProgramUniform2dvEXT C.PPROGRAMUNIFORM2DVEXT
  pProgramUniform2f C.PPROGRAMUNIFORM2F
  pProgramUniform2fEXT C.PPROGRAMUNIFORM2FEXT
  pProgramUniform2fv C.PPROGRAMUNIFORM2FV
  pProgramUniform2fvEXT C.PPROGRAMUNIFORM2FVEXT
  pProgramUniform2i C.PPROGRAMUNIFORM2I
  pProgramUniform2i64NV C.PPROGRAMUNIFORM2I64NV
  pProgramUniform2i64vNV C.PPROGRAMUNIFORM2I64VNV
  pProgramUniform2iEXT C.PPROGRAMUNIFORM2IEXT
  pProgramUniform2iv C.PPROGRAMUNIFORM2IV
  pProgramUniform2ivEXT C.PPROGRAMUNIFORM2IVEXT
  pProgramUniform2ui C.PPROGRAMUNIFORM2UI
  pProgramUniform2ui64NV C.PPROGRAMUNIFORM2UI64NV
  pProgramUniform2ui64vNV C.PPROGRAMUNIFORM2UI64VNV
  pProgramUniform2uiEXT C.PPROGRAMUNIFORM2UIEXT
  pProgramUniform2uiv C.PPROGRAMUNIFORM2UIV
  pProgramUniform2uivEXT C.PPROGRAMUNIFORM2UIVEXT
  pProgramUniform3d C.PPROGRAMUNIFORM3D
  pProgramUniform3dEXT C.PPROGRAMUNIFORM3DEXT
  pProgramUniform3dv C.PPROGRAMUNIFORM3DV
  pProgramUniform3dvEXT C.PPROGRAMUNIFORM3DVEXT
  pProgramUniform3f C.PPROGRAMUNIFORM3F
  pProgramUniform3fEXT C.PPROGRAMUNIFORM3FEXT
  pProgramUniform3fv C.PPROGRAMUNIFORM3FV
  pProgramUniform3fvEXT C.PPROGRAMUNIFORM3FVEXT
  pProgramUniform3i C.PPROGRAMUNIFORM3I
  pProgramUniform3i64NV C.PPROGRAMUNIFORM3I64NV
  pProgramUniform3i64vNV C.PPROGRAMUNIFORM3I64VNV
  pProgramUniform3iEXT C.PPROGRAMUNIFORM3IEXT
  pProgramUniform3iv C.PPROGRAMUNIFORM3IV
  pProgramUniform3ivEXT C.PPROGRAMUNIFORM3IVEXT
  pProgramUniform3ui C.PPROGRAMUNIFORM3UI
  pProgramUniform3ui64NV C.PPROGRAMUNIFORM3UI64NV
  pProgramUniform3ui64vNV C.PPROGRAMUNIFORM3UI64VNV
  pProgramUniform3uiEXT C.PPROGRAMUNIFORM3UIEXT
  pProgramUniform3uiv C.PPROGRAMUNIFORM3UIV
  pProgramUniform3uivEXT C.PPROGRAMUNIFORM3UIVEXT
  pProgramUniform4d C.PPROGRAMUNIFORM4D
  pProgramUniform4dEXT C.PPROGRAMUNIFORM4DEXT
  pProgramUniform4dv C.PPROGRAMUNIFORM4DV
  pProgramUniform4dvEXT C.PPROGRAMUNIFORM4DVEXT
  pProgramUniform4f C.PPROGRAMUNIFORM4F
  pProgramUniform4fEXT C.PPROGRAMUNIFORM4FEXT
  pProgramUniform4fv C.PPROGRAMUNIFORM4FV
  pProgramUniform4fvEXT C.PPROGRAMUNIFORM4FVEXT
  pProgramUniform4i C.PPROGRAMUNIFORM4I
  pProgramUniform4i64NV C.PPROGRAMUNIFORM4I64NV
  pProgramUniform4i64vNV C.PPROGRAMUNIFORM4I64VNV
  pProgramUniform4iEXT C.PPROGRAMUNIFORM4IEXT
  pProgramUniform4iv C.PPROGRAMUNIFORM4IV
  pProgramUniform4ivEXT C.PPROGRAMUNIFORM4IVEXT
  pProgramUniform4ui C.PPROGRAMUNIFORM4UI
  pProgramUniform4ui64NV C.PPROGRAMUNIFORM4UI64NV
  pProgramUniform4ui64vNV C.PPROGRAMUNIFORM4UI64VNV
  pProgramUniform4uiEXT C.PPROGRAMUNIFORM4UIEXT
  pProgramUniform4uiv C.PPROGRAMUNIFORM4UIV
  pProgramUniform4uivEXT C.PPROGRAMUNIFORM4UIVEXT
  pProgramUniformHandleui64ARB C.PPROGRAMUNIFORMHANDLEUI64ARB
  pProgramUniformHandleui64NV C.PPROGRAMUNIFORMHANDLEUI64NV
  pProgramUniformHandleui64vARB C.PPROGRAMUNIFORMHANDLEUI64VARB
  pProgramUniformHandleui64vNV C.PPROGRAMUNIFORMHANDLEUI64VNV
  pProgramUniformMatrix2dv C.PPROGRAMUNIFORMMATRIX2DV
  pProgramUniformMatrix2dvEXT C.PPROGRAMUNIFORMMATRIX2DVEXT
  pProgramUniformMatrix2fv C.PPROGRAMUNIFORMMATRIX2FV
  pProgramUniformMatrix2fvEXT C.PPROGRAMUNIFORMMATRIX2FVEXT
  pProgramUniformMatrix2x3dv C.PPROGRAMUNIFORMMATRIX2X3DV
  pProgramUniformMatrix2x3dvEXT C.PPROGRAMUNIFORMMATRIX2X3DVEXT
  pProgramUniformMatrix2x3fv C.PPROGRAMUNIFORMMATRIX2X3FV
  pProgramUniformMatrix2x3fvEXT C.PPROGRAMUNIFORMMATRIX2X3FVEXT
  pProgramUniformMatrix2x4dv C.PPROGRAMUNIFORMMATRIX2X4DV
  pProgramUniformMatrix2x4dvEXT C.PPROGRAMUNIFORMMATRIX2X4DVEXT
  pProgramUniformMatrix2x4fv C.PPROGRAMUNIFORMMATRIX2X4FV
  pProgramUniformMatrix2x4fvEXT C.PPROGRAMUNIFORMMATRIX2X4FVEXT
  pProgramUniformMatrix3dv C.PPROGRAMUNIFORMMATRIX3DV
  pProgramUniformMatrix3dvEXT C.PPROGRAMUNIFORMMATRIX3DVEXT
  pProgramUniformMatrix3fv C.PPROGRAMUNIFORMMATRIX3FV
  pProgramUniformMatrix3fvEXT C.PPROGRAMUNIFORMMATRIX3FVEXT
  pProgramUniformMatrix3x2dv C.PPROGRAMUNIFORMMATRIX3X2DV
  pProgramUniformMatrix3x2dvEXT C.PPROGRAMUNIFORMMATRIX3X2DVEXT
  pProgramUniformMatrix3x2fv C.PPROGRAMUNIFORMMATRIX3X2FV
  pProgramUniformMatrix3x2fvEXT C.PPROGRAMUNIFORMMATRIX3X2FVEXT
  pProgramUniformMatrix3x4dv C.PPROGRAMUNIFORMMATRIX3X4DV
  pProgramUniformMatrix3x4dvEXT C.PPROGRAMUNIFORMMATRIX3X4DVEXT
  pProgramUniformMatrix3x4fv C.PPROGRAMUNIFORMMATRIX3X4FV
  pProgramUniformMatrix3x4fvEXT C.PPROGRAMUNIFORMMATRIX3X4FVEXT
  pProgramUniformMatrix4dv C.PPROGRAMUNIFORMMATRIX4DV
  pProgramUniformMatrix4dvEXT C.PPROGRAMUNIFORMMATRIX4DVEXT
  pProgramUniformMatrix4fv C.PPROGRAMUNIFORMMATRIX4FV
  pProgramUniformMatrix4fvEXT C.PPROGRAMUNIFORMMATRIX4FVEXT
  pProgramUniformMatrix4x2dv C.PPROGRAMUNIFORMMATRIX4X2DV
  pProgramUniformMatrix4x2dvEXT C.PPROGRAMUNIFORMMATRIX4X2DVEXT
  pProgramUniformMatrix4x2fv C.PPROGRAMUNIFORMMATRIX4X2FV
  pProgramUniformMatrix4x2fvEXT C.PPROGRAMUNIFORMMATRIX4X2FVEXT
  pProgramUniformMatrix4x3dv C.PPROGRAMUNIFORMMATRIX4X3DV
  pProgramUniformMatrix4x3dvEXT C.PPROGRAMUNIFORMMATRIX4X3DVEXT
  pProgramUniformMatrix4x3fv C.PPROGRAMUNIFORMMATRIX4X3FV
  pProgramUniformMatrix4x3fvEXT C.PPROGRAMUNIFORMMATRIX4X3FVEXT
  pProgramUniformui64NV C.PPROGRAMUNIFORMUI64NV
  pProgramUniformui64vNV C.PPROGRAMUNIFORMUI64VNV
  pProgramVertexLimitNV C.PPROGRAMVERTEXLIMITNV
  pProvokingVertex C.PPROVOKINGVERTEX
  pProvokingVertexEXT C.PPROVOKINGVERTEXEXT
  pPushClientAttribDefaultEXT C.PPUSHCLIENTATTRIBDEFAULTEXT
  pPushDebugGroup C.PPUSHDEBUGGROUP
  pPushDebugGroupKHR C.PPUSHDEBUGGROUPKHR
  pPushGroupMarkerEXT C.PPUSHGROUPMARKEREXT
  pQueryCounter C.PQUERYCOUNTER
  pQueryMatrixxOES C.PQUERYMATRIXXOES
  pQueryObjectParameteruiAMD C.PQUERYOBJECTPARAMETERUIAMD
  pRasterPos2xOES C.PRASTERPOS2XOES
  pRasterPos2xvOES C.PRASTERPOS2XVOES
  pRasterPos3xOES C.PRASTERPOS3XOES
  pRasterPos3xvOES C.PRASTERPOS3XVOES
  pRasterPos4xOES C.PRASTERPOS4XOES
  pRasterPos4xvOES C.PRASTERPOS4XVOES
  pReadBuffer C.PREADBUFFER
  pReadInstrumentsSGIX C.PREADINSTRUMENTSSGIX
  pReadPixels C.PREADPIXELS
  pReadnPixelsARB C.PREADNPIXELSARB
  pRectxOES C.PRECTXOES
  pRectxvOES C.PRECTXVOES
  pReferencePlaneSGIX C.PREFERENCEPLANESGIX
  pReleaseShaderCompiler C.PRELEASESHADERCOMPILER
  pRenderbufferStorage C.PRENDERBUFFERSTORAGE
  pRenderbufferStorageEXT C.PRENDERBUFFERSTORAGEEXT
  pRenderbufferStorageMultisample C.PRENDERBUFFERSTORAGEMULTISAMPLE
  pRenderbufferStorageMultisampleCoverageNV C.PRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENV
  pRenderbufferStorageMultisampleEXT C.PRENDERBUFFERSTORAGEMULTISAMPLEEXT
  pReplacementCodePointerSUN C.PREPLACEMENTCODEPOINTERSUN
  pReplacementCodeubSUN C.PREPLACEMENTCODEUBSUN
  pReplacementCodeubvSUN C.PREPLACEMENTCODEUBVSUN
  pReplacementCodeuiColor3fVertex3fSUN C.PREPLACEMENTCODEUICOLOR3FVERTEX3FSUN
  pReplacementCodeuiColor3fVertex3fvSUN C.PREPLACEMENTCODEUICOLOR3FVERTEX3FVSUN
  pReplacementCodeuiColor4fNormal3fVertex3fSUN C.PREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUN
  pReplacementCodeuiColor4fNormal3fVertex3fvSUN C.PREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUN
  pReplacementCodeuiColor4ubVertex3fSUN C.PREPLACEMENTCODEUICOLOR4UBVERTEX3FSUN
  pReplacementCodeuiColor4ubVertex3fvSUN C.PREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUN
  pReplacementCodeuiNormal3fVertex3fSUN C.PREPLACEMENTCODEUINORMAL3FVERTEX3FSUN
  pReplacementCodeuiNormal3fVertex3fvSUN C.PREPLACEMENTCODEUINORMAL3FVERTEX3FVSUN
  pReplacementCodeuiSUN C.PREPLACEMENTCODEUISUN
  pReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN C.PREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUN
  pReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN C.PREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUN
  pReplacementCodeuiTexCoord2fNormal3fVertex3fSUN C.PREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUN
  pReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN C.PREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUN
  pReplacementCodeuiTexCoord2fVertex3fSUN C.PREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUN
  pReplacementCodeuiTexCoord2fVertex3fvSUN C.PREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUN
  pReplacementCodeuiVertex3fSUN C.PREPLACEMENTCODEUIVERTEX3FSUN
  pReplacementCodeuiVertex3fvSUN C.PREPLACEMENTCODEUIVERTEX3FVSUN
  pReplacementCodeuivSUN C.PREPLACEMENTCODEUIVSUN
  pReplacementCodeusSUN C.PREPLACEMENTCODEUSSUN
  pReplacementCodeusvSUN C.PREPLACEMENTCODEUSVSUN
  pRequestResidentProgramsNV C.PREQUESTRESIDENTPROGRAMSNV
  pResetHistogramEXT C.PRESETHISTOGRAMEXT
  pResetMinmaxEXT C.PRESETMINMAXEXT
  pResizeBuffersMESA C.PRESIZEBUFFERSMESA
  pResumeTransformFeedback C.PRESUMETRANSFORMFEEDBACK
  pResumeTransformFeedbackNV C.PRESUMETRANSFORMFEEDBACKNV
  pRotatexOES C.PROTATEXOES
  pSampleCoverage C.PSAMPLECOVERAGE
  pSampleCoverageARB C.PSAMPLECOVERAGEARB
  pSampleCoverageOES C.PSAMPLECOVERAGEOES
  pSampleCoveragexOES C.PSAMPLECOVERAGEXOES
  pSampleMapATI C.PSAMPLEMAPATI
  pSampleMaskEXT C.PSAMPLEMASKEXT
  pSampleMaskIndexedNV C.PSAMPLEMASKINDEXEDNV
  pSampleMaskSGIS C.PSAMPLEMASKSGIS
  pSampleMaski C.PSAMPLEMASKI
  pSamplePatternEXT C.PSAMPLEPATTERNEXT
  pSamplePatternSGIS C.PSAMPLEPATTERNSGIS
  pSamplerParameterIiv C.PSAMPLERPARAMETERIIV
  pSamplerParameterIuiv C.PSAMPLERPARAMETERIUIV
  pSamplerParameterf C.PSAMPLERPARAMETERF
  pSamplerParameterfv C.PSAMPLERPARAMETERFV
  pSamplerParameteri C.PSAMPLERPARAMETERI
  pSamplerParameteriv C.PSAMPLERPARAMETERIV
  pScalexOES C.PSCALEXOES
  pScissor C.PSCISSOR
  pScissorArrayv C.PSCISSORARRAYV
  pScissorIndexed C.PSCISSORINDEXED
  pScissorIndexedv C.PSCISSORINDEXEDV
  pSecondaryColor3bEXT C.PSECONDARYCOLOR3BEXT
  pSecondaryColor3bvEXT C.PSECONDARYCOLOR3BVEXT
  pSecondaryColor3dEXT C.PSECONDARYCOLOR3DEXT
  pSecondaryColor3dvEXT C.PSECONDARYCOLOR3DVEXT
  pSecondaryColor3fEXT C.PSECONDARYCOLOR3FEXT
  pSecondaryColor3fvEXT C.PSECONDARYCOLOR3FVEXT
  pSecondaryColor3hNV C.PSECONDARYCOLOR3HNV
  pSecondaryColor3hvNV C.PSECONDARYCOLOR3HVNV
  pSecondaryColor3iEXT C.PSECONDARYCOLOR3IEXT
  pSecondaryColor3ivEXT C.PSECONDARYCOLOR3IVEXT
  pSecondaryColor3sEXT C.PSECONDARYCOLOR3SEXT
  pSecondaryColor3svEXT C.PSECONDARYCOLOR3SVEXT
  pSecondaryColor3ubEXT C.PSECONDARYCOLOR3UBEXT
  pSecondaryColor3ubvEXT C.PSECONDARYCOLOR3UBVEXT
  pSecondaryColor3uiEXT C.PSECONDARYCOLOR3UIEXT
  pSecondaryColor3uivEXT C.PSECONDARYCOLOR3UIVEXT
  pSecondaryColor3usEXT C.PSECONDARYCOLOR3USEXT
  pSecondaryColor3usvEXT C.PSECONDARYCOLOR3USVEXT
  pSecondaryColorFormatNV C.PSECONDARYCOLORFORMATNV
  pSecondaryColorPointerEXT C.PSECONDARYCOLORPOINTEREXT
  pSecondaryColorPointerListIBM C.PSECONDARYCOLORPOINTERLISTIBM
  pSelectPerfMonitorCountersAMD C.PSELECTPERFMONITORCOUNTERSAMD
  pSeparableFilter2DEXT C.PSEPARABLEFILTER2DEXT
  pSetFenceAPPLE C.PSETFENCEAPPLE
  pSetFenceNV C.PSETFENCENV
  pSetFragmentShaderConstantATI C.PSETFRAGMENTSHADERCONSTANTATI
  pSetInvariantEXT C.PSETINVARIANTEXT
  pSetLocalConstantEXT C.PSETLOCALCONSTANTEXT
  pSetMultisamplefvAMD C.PSETMULTISAMPLEFVAMD
  pShaderBinary C.PSHADERBINARY
  pShaderOp1EXT C.PSHADEROP1EXT
  pShaderOp2EXT C.PSHADEROP2EXT
  pShaderOp3EXT C.PSHADEROP3EXT
  pShaderSource C.PSHADERSOURCE
  pShaderSourceARB C.PSHADERSOURCEARB
  pShaderStorageBlockBinding C.PSHADERSTORAGEBLOCKBINDING
  pSharpenTexFuncSGIS C.PSHARPENTEXFUNCSGIS
  pSpriteParameterfSGIX C.PSPRITEPARAMETERFSGIX
  pSpriteParameterfvSGIX C.PSPRITEPARAMETERFVSGIX
  pSpriteParameteriSGIX C.PSPRITEPARAMETERISGIX
  pSpriteParameterivSGIX C.PSPRITEPARAMETERIVSGIX
  pStartInstrumentsSGIX C.PSTARTINSTRUMENTSSGIX
  pStencilClearTagEXT C.PSTENCILCLEARTAGEXT
  pStencilFillPathInstancedNV C.PSTENCILFILLPATHINSTANCEDNV
  pStencilFillPathNV C.PSTENCILFILLPATHNV
  pStencilFunc C.PSTENCILFUNC
  pStencilFuncSeparate C.PSTENCILFUNCSEPARATE
  pStencilFuncSeparateATI C.PSTENCILFUNCSEPARATEATI
  pStencilMask C.PSTENCILMASK
  pStencilMaskSeparate C.PSTENCILMASKSEPARATE
  pStencilOp C.PSTENCILOP
  pStencilOpSeparate C.PSTENCILOPSEPARATE
  pStencilOpSeparateATI C.PSTENCILOPSEPARATEATI
  pStencilOpValueAMD C.PSTENCILOPVALUEAMD
  pStencilStrokePathInstancedNV C.PSTENCILSTROKEPATHINSTANCEDNV
  pStencilStrokePathNV C.PSTENCILSTROKEPATHNV
  pStopInstrumentsSGIX C.PSTOPINSTRUMENTSSGIX
  pStringMarkerGREMEDY C.PSTRINGMARKERGREMEDY
  pSwizzleEXT C.PSWIZZLEEXT
  pSyncTextureINTEL C.PSYNCTEXTUREINTEL
  pTagSampleBufferSGIX C.PTAGSAMPLEBUFFERSGIX
  pTangent3bEXT C.PTANGENT3BEXT
  pTangent3bvEXT C.PTANGENT3BVEXT
  pTangent3dEXT C.PTANGENT3DEXT
  pTangent3dvEXT C.PTANGENT3DVEXT
  pTangent3fEXT C.PTANGENT3FEXT
  pTangent3fvEXT C.PTANGENT3FVEXT
  pTangent3iEXT C.PTANGENT3IEXT
  pTangent3ivEXT C.PTANGENT3IVEXT
  pTangent3sEXT C.PTANGENT3SEXT
  pTangent3svEXT C.PTANGENT3SVEXT
  pTangentPointerEXT C.PTANGENTPOINTEREXT
  pTbufferMask3DFX C.PTBUFFERMASK3DFX
  pTessellationFactorAMD C.PTESSELLATIONFACTORAMD
  pTessellationModeAMD C.PTESSELLATIONMODEAMD
  pTestFenceAPPLE C.PTESTFENCEAPPLE
  pTestFenceNV C.PTESTFENCENV
  pTestObjectAPPLE C.PTESTOBJECTAPPLE
  pTexBuffer C.PTEXBUFFER
  pTexBufferARB C.PTEXBUFFERARB
  pTexBufferEXT C.PTEXBUFFEREXT
  pTexBufferRange C.PTEXBUFFERRANGE
  pTexBumpParameterfvATI C.PTEXBUMPPARAMETERFVATI
  pTexBumpParameterivATI C.PTEXBUMPPARAMETERIVATI
  pTexCoord1bOES C.PTEXCOORD1BOES
  pTexCoord1bvOES C.PTEXCOORD1BVOES
  pTexCoord1hNV C.PTEXCOORD1HNV
  pTexCoord1hvNV C.PTEXCOORD1HVNV
  pTexCoord1xOES C.PTEXCOORD1XOES
  pTexCoord1xvOES C.PTEXCOORD1XVOES
  pTexCoord2bOES C.PTEXCOORD2BOES
  pTexCoord2bvOES C.PTEXCOORD2BVOES
  pTexCoord2fColor3fVertex3fSUN C.PTEXCOORD2FCOLOR3FVERTEX3FSUN
  pTexCoord2fColor3fVertex3fvSUN C.PTEXCOORD2FCOLOR3FVERTEX3FVSUN
  pTexCoord2fColor4fNormal3fVertex3fSUN C.PTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUN
  pTexCoord2fColor4fNormal3fVertex3fvSUN C.PTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUN
  pTexCoord2fColor4ubVertex3fSUN C.PTEXCOORD2FCOLOR4UBVERTEX3FSUN
  pTexCoord2fColor4ubVertex3fvSUN C.PTEXCOORD2FCOLOR4UBVERTEX3FVSUN
  pTexCoord2fNormal3fVertex3fSUN C.PTEXCOORD2FNORMAL3FVERTEX3FSUN
  pTexCoord2fNormal3fVertex3fvSUN C.PTEXCOORD2FNORMAL3FVERTEX3FVSUN
  pTexCoord2fVertex3fSUN C.PTEXCOORD2FVERTEX3FSUN
  pTexCoord2fVertex3fvSUN C.PTEXCOORD2FVERTEX3FVSUN
  pTexCoord2hNV C.PTEXCOORD2HNV
  pTexCoord2hvNV C.PTEXCOORD2HVNV
  pTexCoord2xOES C.PTEXCOORD2XOES
  pTexCoord2xvOES C.PTEXCOORD2XVOES
  pTexCoord3bOES C.PTEXCOORD3BOES
  pTexCoord3bvOES C.PTEXCOORD3BVOES
  pTexCoord3hNV C.PTEXCOORD3HNV
  pTexCoord3hvNV C.PTEXCOORD3HVNV
  pTexCoord3xOES C.PTEXCOORD3XOES
  pTexCoord3xvOES C.PTEXCOORD3XVOES
  pTexCoord4bOES C.PTEXCOORD4BOES
  pTexCoord4bvOES C.PTEXCOORD4BVOES
  pTexCoord4fColor4fNormal3fVertex4fSUN C.PTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUN
  pTexCoord4fColor4fNormal3fVertex4fvSUN C.PTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUN
  pTexCoord4fVertex4fSUN C.PTEXCOORD4FVERTEX4FSUN
  pTexCoord4fVertex4fvSUN C.PTEXCOORD4FVERTEX4FVSUN
  pTexCoord4hNV C.PTEXCOORD4HNV
  pTexCoord4hvNV C.PTEXCOORD4HVNV
  pTexCoord4xOES C.PTEXCOORD4XOES
  pTexCoord4xvOES C.PTEXCOORD4XVOES
  pTexCoordFormatNV C.PTEXCOORDFORMATNV
  pTexCoordPointerEXT C.PTEXCOORDPOINTEREXT
  pTexCoordPointerListIBM C.PTEXCOORDPOINTERLISTIBM
  pTexCoordPointervINTEL C.PTEXCOORDPOINTERVINTEL
  pTexEnvxOES C.PTEXENVXOES
  pTexEnvxvOES C.PTEXENVXVOES
  pTexFilterFuncSGIS C.PTEXFILTERFUNCSGIS
  pTexGenxOES C.PTEXGENXOES
  pTexGenxvOES C.PTEXGENXVOES
  pTexImage1D C.PTEXIMAGE1D
  pTexImage2D C.PTEXIMAGE2D
  pTexImage2DMultisample C.PTEXIMAGE2DMULTISAMPLE
  pTexImage2DMultisampleCoverageNV C.PTEXIMAGE2DMULTISAMPLECOVERAGENV
  pTexImage3D C.PTEXIMAGE3D
  pTexImage3DEXT C.PTEXIMAGE3DEXT
  pTexImage3DMultisample C.PTEXIMAGE3DMULTISAMPLE
  pTexImage3DMultisampleCoverageNV C.PTEXIMAGE3DMULTISAMPLECOVERAGENV
  pTexImage4DSGIS C.PTEXIMAGE4DSGIS
  pTexPageCommitmentARB C.PTEXPAGECOMMITMENTARB
  pTexParameterIiv C.PTEXPARAMETERIIV
  pTexParameterIivEXT C.PTEXPARAMETERIIVEXT
  pTexParameterIuiv C.PTEXPARAMETERIUIV
  pTexParameterIuivEXT C.PTEXPARAMETERIUIVEXT
  pTexParameterf C.PTEXPARAMETERF
  pTexParameterfv C.PTEXPARAMETERFV
  pTexParameteri C.PTEXPARAMETERI
  pTexParameteriv C.PTEXPARAMETERIV
  pTexParameterxOES C.PTEXPARAMETERXOES
  pTexParameterxvOES C.PTEXPARAMETERXVOES
  pTexRenderbufferNV C.PTEXRENDERBUFFERNV
  pTexStorage1D C.PTEXSTORAGE1D
  pTexStorage2D C.PTEXSTORAGE2D
  pTexStorage2DMultisample C.PTEXSTORAGE2DMULTISAMPLE
  pTexStorage3D C.PTEXSTORAGE3D
  pTexStorage3DMultisample C.PTEXSTORAGE3DMULTISAMPLE
  pTexStorageSparseAMD C.PTEXSTORAGESPARSEAMD
  pTexSubImage1D C.PTEXSUBIMAGE1D
  pTexSubImage1DEXT C.PTEXSUBIMAGE1DEXT
  pTexSubImage2D C.PTEXSUBIMAGE2D
  pTexSubImage2DEXT C.PTEXSUBIMAGE2DEXT
  pTexSubImage3D C.PTEXSUBIMAGE3D
  pTexSubImage3DEXT C.PTEXSUBIMAGE3DEXT
  pTexSubImage4DSGIS C.PTEXSUBIMAGE4DSGIS
  pTextureBarrierNV C.PTEXTUREBARRIERNV
  pTextureBufferEXT C.PTEXTUREBUFFEREXT
  pTextureBufferRangeEXT C.PTEXTUREBUFFERRANGEEXT
  pTextureColorMaskSGIS C.PTEXTURECOLORMASKSGIS
  pTextureImage1DEXT C.PTEXTUREIMAGE1DEXT
  pTextureImage2DEXT C.PTEXTUREIMAGE2DEXT
  pTextureImage2DMultisampleCoverageNV C.PTEXTUREIMAGE2DMULTISAMPLECOVERAGENV
  pTextureImage2DMultisampleNV C.PTEXTUREIMAGE2DMULTISAMPLENV
  pTextureImage3DEXT C.PTEXTUREIMAGE3DEXT
  pTextureImage3DMultisampleCoverageNV C.PTEXTUREIMAGE3DMULTISAMPLECOVERAGENV
  pTextureImage3DMultisampleNV C.PTEXTUREIMAGE3DMULTISAMPLENV
  pTextureLightEXT C.PTEXTURELIGHTEXT
  pTextureMaterialEXT C.PTEXTUREMATERIALEXT
  pTextureNormalEXT C.PTEXTURENORMALEXT
  pTexturePageCommitmentEXT C.PTEXTUREPAGECOMMITMENTEXT
  pTextureParameterIivEXT C.PTEXTUREPARAMETERIIVEXT
  pTextureParameterIuivEXT C.PTEXTUREPARAMETERIUIVEXT
  pTextureParameterfEXT C.PTEXTUREPARAMETERFEXT
  pTextureParameterfvEXT C.PTEXTUREPARAMETERFVEXT
  pTextureParameteriEXT C.PTEXTUREPARAMETERIEXT
  pTextureParameterivEXT C.PTEXTUREPARAMETERIVEXT
  pTextureRangeAPPLE C.PTEXTURERANGEAPPLE
  pTextureRenderbufferEXT C.PTEXTURERENDERBUFFEREXT
  pTextureStorage1DEXT C.PTEXTURESTORAGE1DEXT
  pTextureStorage2DEXT C.PTEXTURESTORAGE2DEXT
  pTextureStorage2DMultisampleEXT C.PTEXTURESTORAGE2DMULTISAMPLEEXT
  pTextureStorage3DEXT C.PTEXTURESTORAGE3DEXT
  pTextureStorage3DMultisampleEXT C.PTEXTURESTORAGE3DMULTISAMPLEEXT
  pTextureStorageSparseAMD C.PTEXTURESTORAGESPARSEAMD
  pTextureSubImage1DEXT C.PTEXTURESUBIMAGE1DEXT
  pTextureSubImage2DEXT C.PTEXTURESUBIMAGE2DEXT
  pTextureSubImage3DEXT C.PTEXTURESUBIMAGE3DEXT
  pTextureView C.PTEXTUREVIEW
  pTrackMatrixNV C.PTRACKMATRIXNV
  pTransformFeedbackAttribsNV C.PTRANSFORMFEEDBACKATTRIBSNV
  pTransformFeedbackStreamAttribsNV C.PTRANSFORMFEEDBACKSTREAMATTRIBSNV
  pTransformFeedbackVaryings C.PTRANSFORMFEEDBACKVARYINGS
  pTransformFeedbackVaryingsEXT C.PTRANSFORMFEEDBACKVARYINGSEXT
  pTransformFeedbackVaryingsNV C.PTRANSFORMFEEDBACKVARYINGSNV
  pTransformPathNV C.PTRANSFORMPATHNV
  pTranslatexOES C.PTRANSLATEXOES
  pUniform1d C.PUNIFORM1D
  pUniform1dv C.PUNIFORM1DV
  pUniform1f C.PUNIFORM1F
  pUniform1fARB C.PUNIFORM1FARB
  pUniform1fv C.PUNIFORM1FV
  pUniform1fvARB C.PUNIFORM1FVARB
  pUniform1i C.PUNIFORM1I
  pUniform1i64NV C.PUNIFORM1I64NV
  pUniform1i64vNV C.PUNIFORM1I64VNV
  pUniform1iARB C.PUNIFORM1IARB
  pUniform1iv C.PUNIFORM1IV
  pUniform1ivARB C.PUNIFORM1IVARB
  pUniform1ui C.PUNIFORM1UI
  pUniform1ui64NV C.PUNIFORM1UI64NV
  pUniform1ui64vNV C.PUNIFORM1UI64VNV
  pUniform1uiEXT C.PUNIFORM1UIEXT
  pUniform1uiv C.PUNIFORM1UIV
  pUniform1uivEXT C.PUNIFORM1UIVEXT
  pUniform2d C.PUNIFORM2D
  pUniform2dv C.PUNIFORM2DV
  pUniform2f C.PUNIFORM2F
  pUniform2fARB C.PUNIFORM2FARB
  pUniform2fv C.PUNIFORM2FV
  pUniform2fvARB C.PUNIFORM2FVARB
  pUniform2i C.PUNIFORM2I
  pUniform2i64NV C.PUNIFORM2I64NV
  pUniform2i64vNV C.PUNIFORM2I64VNV
  pUniform2iARB C.PUNIFORM2IARB
  pUniform2iv C.PUNIFORM2IV
  pUniform2ivARB C.PUNIFORM2IVARB
  pUniform2ui C.PUNIFORM2UI
  pUniform2ui64NV C.PUNIFORM2UI64NV
  pUniform2ui64vNV C.PUNIFORM2UI64VNV
  pUniform2uiEXT C.PUNIFORM2UIEXT
  pUniform2uiv C.PUNIFORM2UIV
  pUniform2uivEXT C.PUNIFORM2UIVEXT
  pUniform3d C.PUNIFORM3D
  pUniform3dv C.PUNIFORM3DV
  pUniform3f C.PUNIFORM3F
  pUniform3fARB C.PUNIFORM3FARB
  pUniform3fv C.PUNIFORM3FV
  pUniform3fvARB C.PUNIFORM3FVARB
  pUniform3i C.PUNIFORM3I
  pUniform3i64NV C.PUNIFORM3I64NV
  pUniform3i64vNV C.PUNIFORM3I64VNV
  pUniform3iARB C.PUNIFORM3IARB
  pUniform3iv C.PUNIFORM3IV
  pUniform3ivARB C.PUNIFORM3IVARB
  pUniform3ui C.PUNIFORM3UI
  pUniform3ui64NV C.PUNIFORM3UI64NV
  pUniform3ui64vNV C.PUNIFORM3UI64VNV
  pUniform3uiEXT C.PUNIFORM3UIEXT
  pUniform3uiv C.PUNIFORM3UIV
  pUniform3uivEXT C.PUNIFORM3UIVEXT
  pUniform4d C.PUNIFORM4D
  pUniform4dv C.PUNIFORM4DV
  pUniform4f C.PUNIFORM4F
  pUniform4fARB C.PUNIFORM4FARB
  pUniform4fv C.PUNIFORM4FV
  pUniform4fvARB C.PUNIFORM4FVARB
  pUniform4i C.PUNIFORM4I
  pUniform4i64NV C.PUNIFORM4I64NV
  pUniform4i64vNV C.PUNIFORM4I64VNV
  pUniform4iARB C.PUNIFORM4IARB
  pUniform4iv C.PUNIFORM4IV
  pUniform4ivARB C.PUNIFORM4IVARB
  pUniform4ui C.PUNIFORM4UI
  pUniform4ui64NV C.PUNIFORM4UI64NV
  pUniform4ui64vNV C.PUNIFORM4UI64VNV
  pUniform4uiEXT C.PUNIFORM4UIEXT
  pUniform4uiv C.PUNIFORM4UIV
  pUniform4uivEXT C.PUNIFORM4UIVEXT
  pUniformBlockBinding C.PUNIFORMBLOCKBINDING
  pUniformBufferEXT C.PUNIFORMBUFFEREXT
  pUniformHandleui64ARB C.PUNIFORMHANDLEUI64ARB
  pUniformHandleui64NV C.PUNIFORMHANDLEUI64NV
  pUniformHandleui64vARB C.PUNIFORMHANDLEUI64VARB
  pUniformHandleui64vNV C.PUNIFORMHANDLEUI64VNV
  pUniformMatrix2dv C.PUNIFORMMATRIX2DV
  pUniformMatrix2fv C.PUNIFORMMATRIX2FV
  pUniformMatrix2fvARB C.PUNIFORMMATRIX2FVARB
  pUniformMatrix2x3dv C.PUNIFORMMATRIX2X3DV
  pUniformMatrix2x3fv C.PUNIFORMMATRIX2X3FV
  pUniformMatrix2x4dv C.PUNIFORMMATRIX2X4DV
  pUniformMatrix2x4fv C.PUNIFORMMATRIX2X4FV
  pUniformMatrix3dv C.PUNIFORMMATRIX3DV
  pUniformMatrix3fv C.PUNIFORMMATRIX3FV
  pUniformMatrix3fvARB C.PUNIFORMMATRIX3FVARB
  pUniformMatrix3x2dv C.PUNIFORMMATRIX3X2DV
  pUniformMatrix3x2fv C.PUNIFORMMATRIX3X2FV
  pUniformMatrix3x4dv C.PUNIFORMMATRIX3X4DV
  pUniformMatrix3x4fv C.PUNIFORMMATRIX3X4FV
  pUniformMatrix4dv C.PUNIFORMMATRIX4DV
  pUniformMatrix4fv C.PUNIFORMMATRIX4FV
  pUniformMatrix4fvARB C.PUNIFORMMATRIX4FVARB
  pUniformMatrix4x2dv C.PUNIFORMMATRIX4X2DV
  pUniformMatrix4x2fv C.PUNIFORMMATRIX4X2FV
  pUniformMatrix4x3dv C.PUNIFORMMATRIX4X3DV
  pUniformMatrix4x3fv C.PUNIFORMMATRIX4X3FV
  pUniformSubroutinesuiv C.PUNIFORMSUBROUTINESUIV
  pUniformui64NV C.PUNIFORMUI64NV
  pUniformui64vNV C.PUNIFORMUI64VNV
  pUnlockArraysEXT C.PUNLOCKARRAYSEXT
  pUnmapBuffer C.PUNMAPBUFFER
  pUnmapBufferARB C.PUNMAPBUFFERARB
  pUnmapNamedBufferEXT C.PUNMAPNAMEDBUFFEREXT
  pUnmapObjectBufferATI C.PUNMAPOBJECTBUFFERATI
  pUnmapTexture2DINTEL C.PUNMAPTEXTURE2DINTEL
  pUpdateObjectBufferATI C.PUPDATEOBJECTBUFFERATI
  pUseProgram C.PUSEPROGRAM
  pUseProgramObjectARB C.PUSEPROGRAMOBJECTARB
  pUseProgramStages C.PUSEPROGRAMSTAGES
  pUseProgramStagesEXT C.PUSEPROGRAMSTAGESEXT
  pUseShaderProgramEXT C.PUSESHADERPROGRAMEXT
  pVDPAUFiniNV C.PVDPAUFININV
  pVDPAUGetSurfaceivNV C.PVDPAUGETSURFACEIVNV
  pVDPAUInitNV C.PVDPAUINITNV
  pVDPAUIsSurfaceNV C.PVDPAUISSURFACENV
  pVDPAUMapSurfacesNV C.PVDPAUMAPSURFACESNV
  pVDPAURegisterOutputSurfaceNV C.PVDPAUREGISTEROUTPUTSURFACENV
  pVDPAURegisterVideoSurfaceNV C.PVDPAUREGISTERVIDEOSURFACENV
  pVDPAUSurfaceAccessNV C.PVDPAUSURFACEACCESSNV
  pVDPAUUnmapSurfacesNV C.PVDPAUUNMAPSURFACESNV
  pVDPAUUnregisterSurfaceNV C.PVDPAUUNREGISTERSURFACENV
  pValidateProgram C.PVALIDATEPROGRAM
  pValidateProgramARB C.PVALIDATEPROGRAMARB
  pValidateProgramPipeline C.PVALIDATEPROGRAMPIPELINE
  pValidateProgramPipelineEXT C.PVALIDATEPROGRAMPIPELINEEXT
  pVariantArrayObjectATI C.PVARIANTARRAYOBJECTATI
  pVariantPointerEXT C.PVARIANTPOINTEREXT
  pVariantbvEXT C.PVARIANTBVEXT
  pVariantdvEXT C.PVARIANTDVEXT
  pVariantfvEXT C.PVARIANTFVEXT
  pVariantivEXT C.PVARIANTIVEXT
  pVariantsvEXT C.PVARIANTSVEXT
  pVariantubvEXT C.PVARIANTUBVEXT
  pVariantuivEXT C.PVARIANTUIVEXT
  pVariantusvEXT C.PVARIANTUSVEXT
  pVertex2bOES C.PVERTEX2BOES
  pVertex2bvOES C.PVERTEX2BVOES
  pVertex2hNV C.PVERTEX2HNV
  pVertex2hvNV C.PVERTEX2HVNV
  pVertex2xOES C.PVERTEX2XOES
  pVertex2xvOES C.PVERTEX2XVOES
  pVertex3bOES C.PVERTEX3BOES
  pVertex3bvOES C.PVERTEX3BVOES
  pVertex3hNV C.PVERTEX3HNV
  pVertex3hvNV C.PVERTEX3HVNV
  pVertex3xOES C.PVERTEX3XOES
  pVertex3xvOES C.PVERTEX3XVOES
  pVertex4bOES C.PVERTEX4BOES
  pVertex4bvOES C.PVERTEX4BVOES
  pVertex4hNV C.PVERTEX4HNV
  pVertex4hvNV C.PVERTEX4HVNV
  pVertex4xOES C.PVERTEX4XOES
  pVertex4xvOES C.PVERTEX4XVOES
  pVertexArrayBindVertexBufferEXT C.PVERTEXARRAYBINDVERTEXBUFFEREXT
  pVertexArrayColorOffsetEXT C.PVERTEXARRAYCOLOROFFSETEXT
  pVertexArrayEdgeFlagOffsetEXT C.PVERTEXARRAYEDGEFLAGOFFSETEXT
  pVertexArrayFogCoordOffsetEXT C.PVERTEXARRAYFOGCOORDOFFSETEXT
  pVertexArrayIndexOffsetEXT C.PVERTEXARRAYINDEXOFFSETEXT
  pVertexArrayMultiTexCoordOffsetEXT C.PVERTEXARRAYMULTITEXCOORDOFFSETEXT
  pVertexArrayNormalOffsetEXT C.PVERTEXARRAYNORMALOFFSETEXT
  pVertexArrayParameteriAPPLE C.PVERTEXARRAYPARAMETERIAPPLE
  pVertexArrayRangeAPPLE C.PVERTEXARRAYRANGEAPPLE
  pVertexArrayRangeNV C.PVERTEXARRAYRANGENV
  pVertexArraySecondaryColorOffsetEXT C.PVERTEXARRAYSECONDARYCOLOROFFSETEXT
  pVertexArrayTexCoordOffsetEXT C.PVERTEXARRAYTEXCOORDOFFSETEXT
  pVertexArrayVertexAttribBindingEXT C.PVERTEXARRAYVERTEXATTRIBBINDINGEXT
  pVertexArrayVertexAttribDivisorEXT C.PVERTEXARRAYVERTEXATTRIBDIVISOREXT
  pVertexArrayVertexAttribFormatEXT C.PVERTEXARRAYVERTEXATTRIBFORMATEXT
  pVertexArrayVertexAttribIFormatEXT C.PVERTEXARRAYVERTEXATTRIBIFORMATEXT
  pVertexArrayVertexAttribIOffsetEXT C.PVERTEXARRAYVERTEXATTRIBIOFFSETEXT
  pVertexArrayVertexAttribLFormatEXT C.PVERTEXARRAYVERTEXATTRIBLFORMATEXT
  pVertexArrayVertexAttribLOffsetEXT C.PVERTEXARRAYVERTEXATTRIBLOFFSETEXT
  pVertexArrayVertexAttribOffsetEXT C.PVERTEXARRAYVERTEXATTRIBOFFSETEXT
  pVertexArrayVertexBindingDivisorEXT C.PVERTEXARRAYVERTEXBINDINGDIVISOREXT
  pVertexArrayVertexOffsetEXT C.PVERTEXARRAYVERTEXOFFSETEXT
  pVertexAttrib1d C.PVERTEXATTRIB1D
  pVertexAttrib1dARB C.PVERTEXATTRIB1DARB
  pVertexAttrib1dNV C.PVERTEXATTRIB1DNV
  pVertexAttrib1dv C.PVERTEXATTRIB1DV
  pVertexAttrib1dvARB C.PVERTEXATTRIB1DVARB
  pVertexAttrib1dvNV C.PVERTEXATTRIB1DVNV
  pVertexAttrib1f C.PVERTEXATTRIB1F
  pVertexAttrib1fARB C.PVERTEXATTRIB1FARB
  pVertexAttrib1fNV C.PVERTEXATTRIB1FNV
  pVertexAttrib1fv C.PVERTEXATTRIB1FV
  pVertexAttrib1fvARB C.PVERTEXATTRIB1FVARB
  pVertexAttrib1fvNV C.PVERTEXATTRIB1FVNV
  pVertexAttrib1hNV C.PVERTEXATTRIB1HNV
  pVertexAttrib1hvNV C.PVERTEXATTRIB1HVNV
  pVertexAttrib1s C.PVERTEXATTRIB1S
  pVertexAttrib1sARB C.PVERTEXATTRIB1SARB
  pVertexAttrib1sNV C.PVERTEXATTRIB1SNV
  pVertexAttrib1sv C.PVERTEXATTRIB1SV
  pVertexAttrib1svARB C.PVERTEXATTRIB1SVARB
  pVertexAttrib1svNV C.PVERTEXATTRIB1SVNV
  pVertexAttrib2d C.PVERTEXATTRIB2D
  pVertexAttrib2dARB C.PVERTEXATTRIB2DARB
  pVertexAttrib2dNV C.PVERTEXATTRIB2DNV
  pVertexAttrib2dv C.PVERTEXATTRIB2DV
  pVertexAttrib2dvARB C.PVERTEXATTRIB2DVARB
  pVertexAttrib2dvNV C.PVERTEXATTRIB2DVNV
  pVertexAttrib2f C.PVERTEXATTRIB2F
  pVertexAttrib2fARB C.PVERTEXATTRIB2FARB
  pVertexAttrib2fNV C.PVERTEXATTRIB2FNV
  pVertexAttrib2fv C.PVERTEXATTRIB2FV
  pVertexAttrib2fvARB C.PVERTEXATTRIB2FVARB
  pVertexAttrib2fvNV C.PVERTEXATTRIB2FVNV
  pVertexAttrib2hNV C.PVERTEXATTRIB2HNV
  pVertexAttrib2hvNV C.PVERTEXATTRIB2HVNV
  pVertexAttrib2s C.PVERTEXATTRIB2S
  pVertexAttrib2sARB C.PVERTEXATTRIB2SARB
  pVertexAttrib2sNV C.PVERTEXATTRIB2SNV
  pVertexAttrib2sv C.PVERTEXATTRIB2SV
  pVertexAttrib2svARB C.PVERTEXATTRIB2SVARB
  pVertexAttrib2svNV C.PVERTEXATTRIB2SVNV
  pVertexAttrib3d C.PVERTEXATTRIB3D
  pVertexAttrib3dARB C.PVERTEXATTRIB3DARB
  pVertexAttrib3dNV C.PVERTEXATTRIB3DNV
  pVertexAttrib3dv C.PVERTEXATTRIB3DV
  pVertexAttrib3dvARB C.PVERTEXATTRIB3DVARB
  pVertexAttrib3dvNV C.PVERTEXATTRIB3DVNV
  pVertexAttrib3f C.PVERTEXATTRIB3F
  pVertexAttrib3fARB C.PVERTEXATTRIB3FARB
  pVertexAttrib3fNV C.PVERTEXATTRIB3FNV
  pVertexAttrib3fv C.PVERTEXATTRIB3FV
  pVertexAttrib3fvARB C.PVERTEXATTRIB3FVARB
  pVertexAttrib3fvNV C.PVERTEXATTRIB3FVNV
  pVertexAttrib3hNV C.PVERTEXATTRIB3HNV
  pVertexAttrib3hvNV C.PVERTEXATTRIB3HVNV
  pVertexAttrib3s C.PVERTEXATTRIB3S
  pVertexAttrib3sARB C.PVERTEXATTRIB3SARB
  pVertexAttrib3sNV C.PVERTEXATTRIB3SNV
  pVertexAttrib3sv C.PVERTEXATTRIB3SV
  pVertexAttrib3svARB C.PVERTEXATTRIB3SVARB
  pVertexAttrib3svNV C.PVERTEXATTRIB3SVNV
  pVertexAttrib4Nbv C.PVERTEXATTRIB4NBV
  pVertexAttrib4NbvARB C.PVERTEXATTRIB4NBVARB
  pVertexAttrib4Niv C.PVERTEXATTRIB4NIV
  pVertexAttrib4NivARB C.PVERTEXATTRIB4NIVARB
  pVertexAttrib4Nsv C.PVERTEXATTRIB4NSV
  pVertexAttrib4NsvARB C.PVERTEXATTRIB4NSVARB
  pVertexAttrib4Nub C.PVERTEXATTRIB4NUB
  pVertexAttrib4NubARB C.PVERTEXATTRIB4NUBARB
  pVertexAttrib4Nubv C.PVERTEXATTRIB4NUBV
  pVertexAttrib4NubvARB C.PVERTEXATTRIB4NUBVARB
  pVertexAttrib4Nuiv C.PVERTEXATTRIB4NUIV
  pVertexAttrib4NuivARB C.PVERTEXATTRIB4NUIVARB
  pVertexAttrib4Nusv C.PVERTEXATTRIB4NUSV
  pVertexAttrib4NusvARB C.PVERTEXATTRIB4NUSVARB
  pVertexAttrib4bv C.PVERTEXATTRIB4BV
  pVertexAttrib4bvARB C.PVERTEXATTRIB4BVARB
  pVertexAttrib4d C.PVERTEXATTRIB4D
  pVertexAttrib4dARB C.PVERTEXATTRIB4DARB
  pVertexAttrib4dNV C.PVERTEXATTRIB4DNV
  pVertexAttrib4dv C.PVERTEXATTRIB4DV
  pVertexAttrib4dvARB C.PVERTEXATTRIB4DVARB
  pVertexAttrib4dvNV C.PVERTEXATTRIB4DVNV
  pVertexAttrib4f C.PVERTEXATTRIB4F
  pVertexAttrib4fARB C.PVERTEXATTRIB4FARB
  pVertexAttrib4fNV C.PVERTEXATTRIB4FNV
  pVertexAttrib4fv C.PVERTEXATTRIB4FV
  pVertexAttrib4fvARB C.PVERTEXATTRIB4FVARB
  pVertexAttrib4fvNV C.PVERTEXATTRIB4FVNV
  pVertexAttrib4hNV C.PVERTEXATTRIB4HNV
  pVertexAttrib4hvNV C.PVERTEXATTRIB4HVNV
  pVertexAttrib4iv C.PVERTEXATTRIB4IV
  pVertexAttrib4ivARB C.PVERTEXATTRIB4IVARB
  pVertexAttrib4s C.PVERTEXATTRIB4S
  pVertexAttrib4sARB C.PVERTEXATTRIB4SARB
  pVertexAttrib4sNV C.PVERTEXATTRIB4SNV
  pVertexAttrib4sv C.PVERTEXATTRIB4SV
  pVertexAttrib4svARB C.PVERTEXATTRIB4SVARB
  pVertexAttrib4svNV C.PVERTEXATTRIB4SVNV
  pVertexAttrib4ubNV C.PVERTEXATTRIB4UBNV
  pVertexAttrib4ubv C.PVERTEXATTRIB4UBV
  pVertexAttrib4ubvARB C.PVERTEXATTRIB4UBVARB
  pVertexAttrib4ubvNV C.PVERTEXATTRIB4UBVNV
  pVertexAttrib4uiv C.PVERTEXATTRIB4UIV
  pVertexAttrib4uivARB C.PVERTEXATTRIB4UIVARB
  pVertexAttrib4usv C.PVERTEXATTRIB4USV
  pVertexAttrib4usvARB C.PVERTEXATTRIB4USVARB
  pVertexAttribArrayObjectATI C.PVERTEXATTRIBARRAYOBJECTATI
  pVertexAttribBinding C.PVERTEXATTRIBBINDING
  pVertexAttribDivisor C.PVERTEXATTRIBDIVISOR
  pVertexAttribDivisorARB C.PVERTEXATTRIBDIVISORARB
  pVertexAttribFormat C.PVERTEXATTRIBFORMAT
  pVertexAttribFormatNV C.PVERTEXATTRIBFORMATNV
  pVertexAttribI1i C.PVERTEXATTRIBI1I
  pVertexAttribI1iEXT C.PVERTEXATTRIBI1IEXT
  pVertexAttribI1iv C.PVERTEXATTRIBI1IV
  pVertexAttribI1ivEXT C.PVERTEXATTRIBI1IVEXT
  pVertexAttribI1ui C.PVERTEXATTRIBI1UI
  pVertexAttribI1uiEXT C.PVERTEXATTRIBI1UIEXT
  pVertexAttribI1uiv C.PVERTEXATTRIBI1UIV
  pVertexAttribI1uivEXT C.PVERTEXATTRIBI1UIVEXT
  pVertexAttribI2i C.PVERTEXATTRIBI2I
  pVertexAttribI2iEXT C.PVERTEXATTRIBI2IEXT
  pVertexAttribI2iv C.PVERTEXATTRIBI2IV
  pVertexAttribI2ivEXT C.PVERTEXATTRIBI2IVEXT
  pVertexAttribI2ui C.PVERTEXATTRIBI2UI
  pVertexAttribI2uiEXT C.PVERTEXATTRIBI2UIEXT
  pVertexAttribI2uiv C.PVERTEXATTRIBI2UIV
  pVertexAttribI2uivEXT C.PVERTEXATTRIBI2UIVEXT
  pVertexAttribI3i C.PVERTEXATTRIBI3I
  pVertexAttribI3iEXT C.PVERTEXATTRIBI3IEXT
  pVertexAttribI3iv C.PVERTEXATTRIBI3IV
  pVertexAttribI3ivEXT C.PVERTEXATTRIBI3IVEXT
  pVertexAttribI3ui C.PVERTEXATTRIBI3UI
  pVertexAttribI3uiEXT C.PVERTEXATTRIBI3UIEXT
  pVertexAttribI3uiv C.PVERTEXATTRIBI3UIV
  pVertexAttribI3uivEXT C.PVERTEXATTRIBI3UIVEXT
  pVertexAttribI4bv C.PVERTEXATTRIBI4BV
  pVertexAttribI4bvEXT C.PVERTEXATTRIBI4BVEXT
  pVertexAttribI4i C.PVERTEXATTRIBI4I
  pVertexAttribI4iEXT C.PVERTEXATTRIBI4IEXT
  pVertexAttribI4iv C.PVERTEXATTRIBI4IV
  pVertexAttribI4ivEXT C.PVERTEXATTRIBI4IVEXT
  pVertexAttribI4sv C.PVERTEXATTRIBI4SV
  pVertexAttribI4svEXT C.PVERTEXATTRIBI4SVEXT
  pVertexAttribI4ubv C.PVERTEXATTRIBI4UBV
  pVertexAttribI4ubvEXT C.PVERTEXATTRIBI4UBVEXT
  pVertexAttribI4ui C.PVERTEXATTRIBI4UI
  pVertexAttribI4uiEXT C.PVERTEXATTRIBI4UIEXT
  pVertexAttribI4uiv C.PVERTEXATTRIBI4UIV
  pVertexAttribI4uivEXT C.PVERTEXATTRIBI4UIVEXT
  pVertexAttribI4usv C.PVERTEXATTRIBI4USV
  pVertexAttribI4usvEXT C.PVERTEXATTRIBI4USVEXT
  pVertexAttribIFormat C.PVERTEXATTRIBIFORMAT
  pVertexAttribIFormatNV C.PVERTEXATTRIBIFORMATNV
  pVertexAttribIPointer C.PVERTEXATTRIBIPOINTER
  pVertexAttribIPointerEXT C.PVERTEXATTRIBIPOINTEREXT
  pVertexAttribL1d C.PVERTEXATTRIBL1D
  pVertexAttribL1dEXT C.PVERTEXATTRIBL1DEXT
  pVertexAttribL1dv C.PVERTEXATTRIBL1DV
  pVertexAttribL1dvEXT C.PVERTEXATTRIBL1DVEXT
  pVertexAttribL1i64NV C.PVERTEXATTRIBL1I64NV
  pVertexAttribL1i64vNV C.PVERTEXATTRIBL1I64VNV
  pVertexAttribL1ui64ARB C.PVERTEXATTRIBL1UI64ARB
  pVertexAttribL1ui64NV C.PVERTEXATTRIBL1UI64NV
  pVertexAttribL1ui64vARB C.PVERTEXATTRIBL1UI64VARB
  pVertexAttribL1ui64vNV C.PVERTEXATTRIBL1UI64VNV
  pVertexAttribL2d C.PVERTEXATTRIBL2D
  pVertexAttribL2dEXT C.PVERTEXATTRIBL2DEXT
  pVertexAttribL2dv C.PVERTEXATTRIBL2DV
  pVertexAttribL2dvEXT C.PVERTEXATTRIBL2DVEXT
  pVertexAttribL2i64NV C.PVERTEXATTRIBL2I64NV
  pVertexAttribL2i64vNV C.PVERTEXATTRIBL2I64VNV
  pVertexAttribL2ui64NV C.PVERTEXATTRIBL2UI64NV
  pVertexAttribL2ui64vNV C.PVERTEXATTRIBL2UI64VNV
  pVertexAttribL3d C.PVERTEXATTRIBL3D
  pVertexAttribL3dEXT C.PVERTEXATTRIBL3DEXT
  pVertexAttribL3dv C.PVERTEXATTRIBL3DV
  pVertexAttribL3dvEXT C.PVERTEXATTRIBL3DVEXT
  pVertexAttribL3i64NV C.PVERTEXATTRIBL3I64NV
  pVertexAttribL3i64vNV C.PVERTEXATTRIBL3I64VNV
  pVertexAttribL3ui64NV C.PVERTEXATTRIBL3UI64NV
  pVertexAttribL3ui64vNV C.PVERTEXATTRIBL3UI64VNV
  pVertexAttribL4d C.PVERTEXATTRIBL4D
  pVertexAttribL4dEXT C.PVERTEXATTRIBL4DEXT
  pVertexAttribL4dv C.PVERTEXATTRIBL4DV
  pVertexAttribL4dvEXT C.PVERTEXATTRIBL4DVEXT
  pVertexAttribL4i64NV C.PVERTEXATTRIBL4I64NV
  pVertexAttribL4i64vNV C.PVERTEXATTRIBL4I64VNV
  pVertexAttribL4ui64NV C.PVERTEXATTRIBL4UI64NV
  pVertexAttribL4ui64vNV C.PVERTEXATTRIBL4UI64VNV
  pVertexAttribLFormat C.PVERTEXATTRIBLFORMAT
  pVertexAttribLFormatNV C.PVERTEXATTRIBLFORMATNV
  pVertexAttribLPointer C.PVERTEXATTRIBLPOINTER
  pVertexAttribLPointerEXT C.PVERTEXATTRIBLPOINTEREXT
  pVertexAttribP1ui C.PVERTEXATTRIBP1UI
  pVertexAttribP1uiv C.PVERTEXATTRIBP1UIV
  pVertexAttribP2ui C.PVERTEXATTRIBP2UI
  pVertexAttribP2uiv C.PVERTEXATTRIBP2UIV
  pVertexAttribP3ui C.PVERTEXATTRIBP3UI
  pVertexAttribP3uiv C.PVERTEXATTRIBP3UIV
  pVertexAttribP4ui C.PVERTEXATTRIBP4UI
  pVertexAttribP4uiv C.PVERTEXATTRIBP4UIV
  pVertexAttribParameteriAMD C.PVERTEXATTRIBPARAMETERIAMD
  pVertexAttribPointer C.PVERTEXATTRIBPOINTER
  pVertexAttribPointerARB C.PVERTEXATTRIBPOINTERARB
  pVertexAttribPointerNV C.PVERTEXATTRIBPOINTERNV
  pVertexAttribs1dvNV C.PVERTEXATTRIBS1DVNV
  pVertexAttribs1fvNV C.PVERTEXATTRIBS1FVNV
  pVertexAttribs1hvNV C.PVERTEXATTRIBS1HVNV
  pVertexAttribs1svNV C.PVERTEXATTRIBS1SVNV
  pVertexAttribs2dvNV C.PVERTEXATTRIBS2DVNV
  pVertexAttribs2fvNV C.PVERTEXATTRIBS2FVNV
  pVertexAttribs2hvNV C.PVERTEXATTRIBS2HVNV
  pVertexAttribs2svNV C.PVERTEXATTRIBS2SVNV
  pVertexAttribs3dvNV C.PVERTEXATTRIBS3DVNV
  pVertexAttribs3fvNV C.PVERTEXATTRIBS3FVNV
  pVertexAttribs3hvNV C.PVERTEXATTRIBS3HVNV
  pVertexAttribs3svNV C.PVERTEXATTRIBS3SVNV
  pVertexAttribs4dvNV C.PVERTEXATTRIBS4DVNV
  pVertexAttribs4fvNV C.PVERTEXATTRIBS4FVNV
  pVertexAttribs4hvNV C.PVERTEXATTRIBS4HVNV
  pVertexAttribs4svNV C.PVERTEXATTRIBS4SVNV
  pVertexAttribs4ubvNV C.PVERTEXATTRIBS4UBVNV
  pVertexBindingDivisor C.PVERTEXBINDINGDIVISOR
  pVertexBlendARB C.PVERTEXBLENDARB
  pVertexBlendEnvfATI C.PVERTEXBLENDENVFATI
  pVertexBlendEnviATI C.PVERTEXBLENDENVIATI
  pVertexFormatNV C.PVERTEXFORMATNV
  pVertexPointerEXT C.PVERTEXPOINTEREXT
  pVertexPointerListIBM C.PVERTEXPOINTERLISTIBM
  pVertexPointervINTEL C.PVERTEXPOINTERVINTEL
  pVertexStream1dATI C.PVERTEXSTREAM1DATI
  pVertexStream1dvATI C.PVERTEXSTREAM1DVATI
  pVertexStream1fATI C.PVERTEXSTREAM1FATI
  pVertexStream1fvATI C.PVERTEXSTREAM1FVATI
  pVertexStream1iATI C.PVERTEXSTREAM1IATI
  pVertexStream1ivATI C.PVERTEXSTREAM1IVATI
  pVertexStream1sATI C.PVERTEXSTREAM1SATI
  pVertexStream1svATI C.PVERTEXSTREAM1SVATI
  pVertexStream2dATI C.PVERTEXSTREAM2DATI
  pVertexStream2dvATI C.PVERTEXSTREAM2DVATI
  pVertexStream2fATI C.PVERTEXSTREAM2FATI
  pVertexStream2fvATI C.PVERTEXSTREAM2FVATI
  pVertexStream2iATI C.PVERTEXSTREAM2IATI
  pVertexStream2ivATI C.PVERTEXSTREAM2IVATI
  pVertexStream2sATI C.PVERTEXSTREAM2SATI
  pVertexStream2svATI C.PVERTEXSTREAM2SVATI
  pVertexStream3dATI C.PVERTEXSTREAM3DATI
  pVertexStream3dvATI C.PVERTEXSTREAM3DVATI
  pVertexStream3fATI C.PVERTEXSTREAM3FATI
  pVertexStream3fvATI C.PVERTEXSTREAM3FVATI
  pVertexStream3iATI C.PVERTEXSTREAM3IATI
  pVertexStream3ivATI C.PVERTEXSTREAM3IVATI
  pVertexStream3sATI C.PVERTEXSTREAM3SATI
  pVertexStream3svATI C.PVERTEXSTREAM3SVATI
  pVertexStream4dATI C.PVERTEXSTREAM4DATI
  pVertexStream4dvATI C.PVERTEXSTREAM4DVATI
  pVertexStream4fATI C.PVERTEXSTREAM4FATI
  pVertexStream4fvATI C.PVERTEXSTREAM4FVATI
  pVertexStream4iATI C.PVERTEXSTREAM4IATI
  pVertexStream4ivATI C.PVERTEXSTREAM4IVATI
  pVertexStream4sATI C.PVERTEXSTREAM4SATI
  pVertexStream4svATI C.PVERTEXSTREAM4SVATI
  pVertexWeightPointerEXT C.PVERTEXWEIGHTPOINTEREXT
  pVertexWeightfEXT C.PVERTEXWEIGHTFEXT
  pVertexWeightfvEXT C.PVERTEXWEIGHTFVEXT
  pVertexWeighthNV C.PVERTEXWEIGHTHNV
  pVertexWeighthvNV C.PVERTEXWEIGHTHVNV
  pVideoCaptureNV C.PVIDEOCAPTURENV
  pVideoCaptureStreamParameterdvNV C.PVIDEOCAPTURESTREAMPARAMETERDVNV
  pVideoCaptureStreamParameterfvNV C.PVIDEOCAPTURESTREAMPARAMETERFVNV
  pVideoCaptureStreamParameterivNV C.PVIDEOCAPTURESTREAMPARAMETERIVNV
  pViewport C.PVIEWPORT
  pViewportArrayv C.PVIEWPORTARRAYV
  pViewportIndexedf C.PVIEWPORTINDEXEDF
  pViewportIndexedfv C.PVIEWPORTINDEXEDFV
  pWaitSync C.PWAITSYNC
  pWeightPathsNV C.PWEIGHTPATHSNV
  pWeightPointerARB C.PWEIGHTPOINTERARB
  pWeightbvARB C.PWEIGHTBVARB
  pWeightdvARB C.PWEIGHTDVARB
  pWeightfvARB C.PWEIGHTFVARB
  pWeightivARB C.PWEIGHTIVARB
  pWeightsvARB C.PWEIGHTSVARB
  pWeightubvARB C.PWEIGHTUBVARB
  pWeightuivARB C.PWEIGHTUIVARB
  pWeightusvARB C.PWEIGHTUSVARB
  pWindowPos2dARB C.PWINDOWPOS2DARB
  pWindowPos2dMESA C.PWINDOWPOS2DMESA
  pWindowPos2dvARB C.PWINDOWPOS2DVARB
  pWindowPos2dvMESA C.PWINDOWPOS2DVMESA
  pWindowPos2fARB C.PWINDOWPOS2FARB
  pWindowPos2fMESA C.PWINDOWPOS2FMESA
  pWindowPos2fvARB C.PWINDOWPOS2FVARB
  pWindowPos2fvMESA C.PWINDOWPOS2FVMESA
  pWindowPos2iARB C.PWINDOWPOS2IARB
  pWindowPos2iMESA C.PWINDOWPOS2IMESA
  pWindowPos2ivARB C.PWINDOWPOS2IVARB
  pWindowPos2ivMESA C.PWINDOWPOS2IVMESA
  pWindowPos2sARB C.PWINDOWPOS2SARB
  pWindowPos2sMESA C.PWINDOWPOS2SMESA
  pWindowPos2svARB C.PWINDOWPOS2SVARB
  pWindowPos2svMESA C.PWINDOWPOS2SVMESA
  pWindowPos3dARB C.PWINDOWPOS3DARB
  pWindowPos3dMESA C.PWINDOWPOS3DMESA
  pWindowPos3dvARB C.PWINDOWPOS3DVARB
  pWindowPos3dvMESA C.PWINDOWPOS3DVMESA
  pWindowPos3fARB C.PWINDOWPOS3FARB
  pWindowPos3fMESA C.PWINDOWPOS3FMESA
  pWindowPos3fvARB C.PWINDOWPOS3FVARB
  pWindowPos3fvMESA C.PWINDOWPOS3FVMESA
  pWindowPos3iARB C.PWINDOWPOS3IARB
  pWindowPos3iMESA C.PWINDOWPOS3IMESA
  pWindowPos3ivARB C.PWINDOWPOS3IVARB
  pWindowPos3ivMESA C.PWINDOWPOS3IVMESA
  pWindowPos3sARB C.PWINDOWPOS3SARB
  pWindowPos3sMESA C.PWINDOWPOS3SMESA
  pWindowPos3svARB C.PWINDOWPOS3SVARB
  pWindowPos3svMESA C.PWINDOWPOS3SVMESA
  pWindowPos4dMESA C.PWINDOWPOS4DMESA
  pWindowPos4dvMESA C.PWINDOWPOS4DVMESA
  pWindowPos4fMESA C.PWINDOWPOS4FMESA
  pWindowPos4fvMESA C.PWINDOWPOS4FVMESA
  pWindowPos4iMESA C.PWINDOWPOS4IMESA
  pWindowPos4ivMESA C.PWINDOWPOS4IVMESA
  pWindowPos4sMESA C.PWINDOWPOS4SMESA
  pWindowPos4svMESA C.PWINDOWPOS4SVMESA
  pWriteMaskEXT C.PWRITEMASKEXT
)
var (
  AMD_debug_output = true
  AMD_draw_buffers_blend = true
  AMD_gpu_shader_int64 = true
  AMD_interleaved_elements = true
  AMD_multi_draw_indirect = true
  AMD_name_gen_delete = true
  AMD_occlusion_query_event = true
  AMD_performance_monitor = true
  AMD_sample_positions = true
  AMD_sparse_texture = true
  AMD_stencil_operation_extended = true
  AMD_vertex_shader_tessellator = true
  APPLE_element_array = true
  APPLE_fence = true
  APPLE_flush_buffer_range = true
  APPLE_object_purgeable = true
  APPLE_texture_range = true
  APPLE_vertex_array_object = true
  APPLE_vertex_array_range = true
  APPLE_vertex_program_evaluators = true
  ARB_ES2_compatibility = true
  ARB_base_instance = true
  ARB_bindless_texture = true
  ARB_blend_func_extended = true
  ARB_buffer_storage = true
  ARB_cl_event = true
  ARB_clear_buffer_object = true
  ARB_clear_texture = true
  ARB_color_buffer_float = true
  ARB_compute_shader = true
  ARB_compute_variable_group_size = true
  ARB_copy_buffer = true
  ARB_copy_image = true
  ARB_debug_output = true
  ARB_draw_buffers = true
  ARB_draw_buffers_blend = true
  ARB_draw_elements_base_vertex = true
  ARB_draw_indirect = true
  ARB_draw_instanced = true
  ARB_fragment_program = true
  ARB_framebuffer_no_attachments = true
  ARB_framebuffer_object = true
  ARB_geometry_shader4 = true
  ARB_get_program_binary = true
  ARB_gpu_shader_fp64 = true
  ARB_imaging = true
  ARB_indirect_parameters = true
  ARB_instanced_arrays = true
  ARB_internalformat_query = true
  ARB_internalformat_query2 = true
  ARB_invalidate_subdata = true
  ARB_map_buffer_range = true
  ARB_matrix_palette = true
  ARB_multi_bind = true
  ARB_multi_draw_indirect = true
  ARB_multisample = true
  ARB_multitexture = true
  ARB_occlusion_query = true
  ARB_point_parameters = true
  ARB_program_interface_query = true
  ARB_provoking_vertex = true
  ARB_robustness = true
  ARB_sample_shading = true
  ARB_sampler_objects = true
  ARB_separate_shader_objects = true
  ARB_shader_atomic_counters = true
  ARB_shader_image_load_store = true
  ARB_shader_objects = true
  ARB_shader_storage_buffer_object = true
  ARB_shader_subroutine = true
  ARB_shading_language_include = true
  ARB_sparse_texture = true
  ARB_sync = true
  ARB_tessellation_shader = true
  ARB_texture_buffer_object = true
  ARB_texture_buffer_range = true
  ARB_texture_compression = true
  ARB_texture_multisample = true
  ARB_texture_storage = true
  ARB_texture_storage_multisample = true
  ARB_texture_view = true
  ARB_timer_query = true
  ARB_transform_feedback2 = true
  ARB_transform_feedback3 = true
  ARB_transform_feedback_instanced = true
  ARB_transpose_matrix = true
  ARB_uniform_buffer_object = true
  ARB_vertex_array_object = true
  ARB_vertex_attrib_64bit = true
  ARB_vertex_attrib_binding = true
  ARB_vertex_blend = true
  ARB_vertex_buffer_object = true
  ARB_vertex_program = true
  ARB_vertex_shader = true
  ARB_vertex_type_2_10_10_10_rev = true
  ARB_viewport_array = true
  ARB_window_pos = true
  ATI_draw_buffers = true
  ATI_element_array = true
  ATI_envmap_bumpmap = true
  ATI_fragment_shader = true
  ATI_map_object_buffer = true
  ATI_pn_triangles = true
  ATI_separate_stencil = true
  ATI_vertex_array_object = true
  ATI_vertex_attrib_array_object = true
  ATI_vertex_streams = true
  EXT_bindable_uniform = true
  EXT_blend_color = true
  EXT_blend_equation_separate = true
  EXT_blend_func_separate = true
  EXT_blend_minmax = true
  EXT_color_subtable = true
  EXT_compiled_vertex_array = true
  EXT_convolution = true
  EXT_coordinate_frame = true
  EXT_copy_texture = true
  EXT_cull_vertex = true
  EXT_debug_label = true
  EXT_debug_marker = true
  EXT_depth_bounds_test = true
  EXT_direct_state_access = true
  EXT_draw_buffers2 = true
  EXT_draw_instanced = true
  EXT_draw_range_elements = true
  EXT_fog_coord = true
  EXT_framebuffer_blit = true
  EXT_framebuffer_multisample = true
  EXT_framebuffer_object = true
  EXT_geometry_shader4 = true
  EXT_gpu_program_parameters = true
  EXT_gpu_shader4 = true
  EXT_histogram = true
  EXT_index_func = true
  EXT_index_material = true
  EXT_light_texture = true
  EXT_multi_draw_arrays = true
  EXT_multisample = true
  EXT_paletted_texture = true
  EXT_pixel_transform = true
  EXT_point_parameters = true
  EXT_polygon_offset = true
  EXT_provoking_vertex = true
  EXT_secondary_color = true
  EXT_separate_shader_objects = true
  EXT_shader_image_load_store = true
  EXT_stencil_clear_tag = true
  EXT_stencil_two_side = true
  EXT_subtexture = true
  EXT_texture3D = true
  EXT_texture_buffer_object = true
  EXT_texture_integer = true
  EXT_texture_object = true
  EXT_texture_perturb_normal = true
  EXT_timer_query = true
  EXT_transform_feedback = true
  EXT_vertex_array = true
  EXT_vertex_attrib_64bit = true
  EXT_vertex_shader = true
  EXT_vertex_weighting = true
  EXT_x11_sync_object = true
  GL_3DFX_tbuffer = true
  GREMEDY_frame_terminator = true
  GREMEDY_string_marker = true
  HP_image_transform = true
  IBM_multimode_draw_arrays = true
  IBM_static_data = true
  IBM_vertex_array_lists = true
  INGR_blend_func_separate = true
  INTEL_map_texture = true
  INTEL_parallel_arrays = true
  INTEL_performance_query = true
  KHR_debug = true
  MESA_resize_buffers = true
  MESA_window_pos = true
  NVX_conditional_render = true
  NV_bindless_multi_draw_indirect = true
  NV_bindless_texture = true
  NV_blend_equation_advanced = true
  NV_conditional_render = true
  NV_copy_image = true
  NV_depth_buffer_float = true
  NV_draw_texture = true
  NV_evaluators = true
  NV_explicit_multisample = true
  NV_fence = true
  NV_fragment_program = true
  NV_framebuffer_multisample_coverage = true
  NV_geometry_program4 = true
  NV_gpu_program4 = true
  NV_gpu_program5 = true
  NV_gpu_shader5 = true
  NV_half_float = true
  NV_occlusion_query = true
  NV_parameter_buffer_object = true
  NV_path_rendering = true
  NV_pixel_data_range = true
  NV_point_sprite = true
  NV_present_video = true
  NV_primitive_restart = true
  NV_register_combiners = true
  NV_register_combiners2 = true
  NV_shader_buffer_load = true
  NV_texture_barrier = true
  NV_texture_multisample = true
  NV_transform_feedback = true
  NV_transform_feedback2 = true
  NV_vdpau_interop = true
  NV_vertex_array_range = true
  NV_vertex_attrib_integer_64bit = true
  NV_vertex_buffer_unified_memory = true
  NV_vertex_program = true
  NV_vertex_program4 = true
  NV_video_capture = true
  OES_byte_coordinates = true
  OES_fixed_point = true
  OES_query_matrix = true
  OES_single_precision = true
  PGI_misc_hints = true
  SGIS_detail_texture = true
  SGIS_fog_function = true
  SGIS_multisample = true
  SGIS_pixel_texture = true
  SGIS_point_parameters = true
  SGIS_sharpen_texture = true
  SGIS_texture4D = true
  SGIS_texture_color_mask = true
  SGIS_texture_filter4 = true
  SGIX_async = true
  SGIX_flush_raster = true
  SGIX_fragment_lighting = true
  SGIX_framezoom = true
  SGIX_igloo_interface = true
  SGIX_instruments = true
  SGIX_list_priority = true
  SGIX_pixel_texture = true
  SGIX_polynomial_ffd = true
  SGIX_reference_plane = true
  SGIX_sprite = true
  SGIX_tag_sample_buffer = true
  SGI_color_table = true
  SUNX_constant_data = true
  SUN_global_alpha = true
  SUN_mesh_array = true
  SUN_triangle_list = true
  SUN_vertex = true
)
// Helper functions
func boolToInt(b bool) int {
	if b { return 1 }
	return 0
}
func AccumxOES(op uint32, value int32) {
  C.glowAccumxOES(pAccumxOES, (C.GLenum)(op), (C.GLfixed)(value))
}
func ActiveProgramEXT(program uint32) {
  C.glowActiveProgramEXT(pActiveProgramEXT, (C.GLuint)(program))
}
// set the active program object for a program pipeline object
func ActiveShaderProgram(pipeline uint32, program uint32) {
  C.glowActiveShaderProgram(pActiveShaderProgram, (C.GLuint)(pipeline), (C.GLuint)(program))
}
func ActiveShaderProgramEXT(pipeline uint32, program uint32) {
  C.glowActiveShaderProgramEXT(pActiveShaderProgramEXT, (C.GLuint)(pipeline), (C.GLuint)(program))
}
func ActiveStencilFaceEXT(face uint32) {
  C.glowActiveStencilFaceEXT(pActiveStencilFaceEXT, (C.GLenum)(face))
}
// select active texture unit
func ActiveTexture(texture uint32) {
  C.glowActiveTexture(pActiveTexture, (C.GLenum)(texture))
}
func ActiveTextureARB(texture uint32) {
  C.glowActiveTextureARB(pActiveTextureARB, (C.GLenum)(texture))
}
func ActiveVaryingNV(program uint32, name *int8) {
  C.glowActiveVaryingNV(pActiveVaryingNV, (C.GLuint)(program), (*C.GLchar)(unsafe.Pointer(name)))
}
func AlphaFragmentOp1ATI(op uint32, dst uint32, dstMod uint32, arg1 uint32, arg1Rep uint32, arg1Mod uint32) {
  C.glowAlphaFragmentOp1ATI(pAlphaFragmentOp1ATI, (C.GLenum)(op), (C.GLuint)(dst), (C.GLuint)(dstMod), (C.GLuint)(arg1), (C.GLuint)(arg1Rep), (C.GLuint)(arg1Mod))
}
func AlphaFragmentOp2ATI(op uint32, dst uint32, dstMod uint32, arg1 uint32, arg1Rep uint32, arg1Mod uint32, arg2 uint32, arg2Rep uint32, arg2Mod uint32) {
  C.glowAlphaFragmentOp2ATI(pAlphaFragmentOp2ATI, (C.GLenum)(op), (C.GLuint)(dst), (C.GLuint)(dstMod), (C.GLuint)(arg1), (C.GLuint)(arg1Rep), (C.GLuint)(arg1Mod), (C.GLuint)(arg2), (C.GLuint)(arg2Rep), (C.GLuint)(arg2Mod))
}
func AlphaFragmentOp3ATI(op uint32, dst uint32, dstMod uint32, arg1 uint32, arg1Rep uint32, arg1Mod uint32, arg2 uint32, arg2Rep uint32, arg2Mod uint32, arg3 uint32, arg3Rep uint32, arg3Mod uint32) {
  C.glowAlphaFragmentOp3ATI(pAlphaFragmentOp3ATI, (C.GLenum)(op), (C.GLuint)(dst), (C.GLuint)(dstMod), (C.GLuint)(arg1), (C.GLuint)(arg1Rep), (C.GLuint)(arg1Mod), (C.GLuint)(arg2), (C.GLuint)(arg2Rep), (C.GLuint)(arg2Mod), (C.GLuint)(arg3), (C.GLuint)(arg3Rep), (C.GLuint)(arg3Mod))
}
func AlphaFuncxOES(xfunc uint32, ref int32) {
  C.glowAlphaFuncxOES(pAlphaFuncxOES, (C.GLenum)(xfunc), (C.GLfixed)(ref))
}
func ApplyTextureEXT(mode uint32) {
  C.glowApplyTextureEXT(pApplyTextureEXT, (C.GLenum)(mode))
}
func AreProgramsResidentNV(n int32, programs *uint32, residences *bool) bool {
  ret := C.glowAreProgramsResidentNV(pAreProgramsResidentNV, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(programs)), (*C.GLboolean)(unsafe.Pointer(residences)))
  return ret == TRUE
}
func AreTexturesResidentEXT(n int32, textures *uint32, residences *bool) bool {
  ret := C.glowAreTexturesResidentEXT(pAreTexturesResidentEXT, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(textures)), (*C.GLboolean)(unsafe.Pointer(residences)))
  return ret == TRUE
}
func ArrayElementEXT(i int32) {
  C.glowArrayElementEXT(pArrayElementEXT, (C.GLint)(i))
}
func ArrayObjectATI(array uint32, size int32, xtype uint32, stride int32, buffer uint32, offset uint32) {
  C.glowArrayObjectATI(pArrayObjectATI, (C.GLenum)(array), (C.GLint)(size), (C.GLenum)(xtype), (C.GLsizei)(stride), (C.GLuint)(buffer), (C.GLuint)(offset))
}
func AsyncMarkerSGIX(marker uint32) {
  C.glowAsyncMarkerSGIX(pAsyncMarkerSGIX, (C.GLuint)(marker))
}
func AttachObjectARB(containerObj uintptr, obj uintptr) {
  C.glowAttachObjectARB(pAttachObjectARB, (C.GLhandleARB)(containerObj), (C.GLhandleARB)(obj))
}
// Attaches a shader object to a program object
func AttachShader(program uint32, shader uint32) {
  C.glowAttachShader(pAttachShader, (C.GLuint)(program), (C.GLuint)(shader))
}
// start conditional rendering
func BeginConditionalRender(id uint32, mode uint32) {
  C.glowBeginConditionalRender(pBeginConditionalRender, (C.GLuint)(id), (C.GLenum)(mode))
}
func BeginConditionalRenderNV(id uint32, mode uint32) {
  C.glowBeginConditionalRenderNV(pBeginConditionalRenderNV, (C.GLuint)(id), (C.GLenum)(mode))
}
func BeginConditionalRenderNVX(id uint32) {
  C.glowBeginConditionalRenderNVX(pBeginConditionalRenderNVX, (C.GLuint)(id))
}
func BeginFragmentShaderATI() {
  C.glowBeginFragmentShaderATI(pBeginFragmentShaderATI)
}
func BeginOcclusionQueryNV(id uint32) {
  C.glowBeginOcclusionQueryNV(pBeginOcclusionQueryNV, (C.GLuint)(id))
}
func BeginPerfMonitorAMD(monitor uint32) {
  C.glowBeginPerfMonitorAMD(pBeginPerfMonitorAMD, (C.GLuint)(monitor))
}
func BeginPerfQueryINTEL(queryHandle uint32) {
  C.glowBeginPerfQueryINTEL(pBeginPerfQueryINTEL, (C.GLuint)(queryHandle))
}
// delimit the boundaries of a query object
func BeginQuery(target uint32, id uint32) {
  C.glowBeginQuery(pBeginQuery, (C.GLenum)(target), (C.GLuint)(id))
}
func BeginQueryARB(target uint32, id uint32) {
  C.glowBeginQueryARB(pBeginQueryARB, (C.GLenum)(target), (C.GLuint)(id))
}
func BeginQueryIndexed(target uint32, index uint32, id uint32) {
  C.glowBeginQueryIndexed(pBeginQueryIndexed, (C.GLenum)(target), (C.GLuint)(index), (C.GLuint)(id))
}
// start transform feedback operation
func BeginTransformFeedback(primitiveMode uint32) {
  C.glowBeginTransformFeedback(pBeginTransformFeedback, (C.GLenum)(primitiveMode))
}
func BeginTransformFeedbackEXT(primitiveMode uint32) {
  C.glowBeginTransformFeedbackEXT(pBeginTransformFeedbackEXT, (C.GLenum)(primitiveMode))
}
func BeginTransformFeedbackNV(primitiveMode uint32) {
  C.glowBeginTransformFeedbackNV(pBeginTransformFeedbackNV, (C.GLenum)(primitiveMode))
}
func BeginVertexShaderEXT() {
  C.glowBeginVertexShaderEXT(pBeginVertexShaderEXT)
}
func BeginVideoCaptureNV(video_capture_slot uint32) {
  C.glowBeginVideoCaptureNV(pBeginVideoCaptureNV, (C.GLuint)(video_capture_slot))
}
// Associates a generic vertex attribute index with a named attribute variable
func BindAttribLocation(program uint32, index uint32, name *int8) {
  C.glowBindAttribLocation(pBindAttribLocation, (C.GLuint)(program), (C.GLuint)(index), (*C.GLchar)(unsafe.Pointer(name)))
}
func BindAttribLocationARB(programObj uintptr, index uint32, name *int8) {
  C.glowBindAttribLocationARB(pBindAttribLocationARB, (C.GLhandleARB)(programObj), (C.GLuint)(index), (*C.GLcharARB)(unsafe.Pointer(name)))
}
// bind a named buffer object
func BindBuffer(target uint32, buffer uint32) {
  C.glowBindBuffer(pBindBuffer, (C.GLenum)(target), (C.GLuint)(buffer))
}
func BindBufferARB(target uint32, buffer uint32) {
  C.glowBindBufferARB(pBindBufferARB, (C.GLenum)(target), (C.GLuint)(buffer))
}
// bind a buffer object to an indexed buffer target
func BindBufferBase(target uint32, index uint32, buffer uint32) {
  C.glowBindBufferBase(pBindBufferBase, (C.GLenum)(target), (C.GLuint)(index), (C.GLuint)(buffer))
}
func BindBufferBaseEXT(target uint32, index uint32, buffer uint32) {
  C.glowBindBufferBaseEXT(pBindBufferBaseEXT, (C.GLenum)(target), (C.GLuint)(index), (C.GLuint)(buffer))
}
func BindBufferBaseNV(target uint32, index uint32, buffer uint32) {
  C.glowBindBufferBaseNV(pBindBufferBaseNV, (C.GLenum)(target), (C.GLuint)(index), (C.GLuint)(buffer))
}
func BindBufferOffsetEXT(target uint32, index uint32, buffer uint32, offset int) {
  C.glowBindBufferOffsetEXT(pBindBufferOffsetEXT, (C.GLenum)(target), (C.GLuint)(index), (C.GLuint)(buffer), (C.GLintptr)(offset))
}
func BindBufferOffsetNV(target uint32, index uint32, buffer uint32, offset int) {
  C.glowBindBufferOffsetNV(pBindBufferOffsetNV, (C.GLenum)(target), (C.GLuint)(index), (C.GLuint)(buffer), (C.GLintptr)(offset))
}
// bind a range within a buffer object to an indexed buffer target
func BindBufferRange(target uint32, index uint32, buffer uint32, offset int, size int) {
  C.glowBindBufferRange(pBindBufferRange, (C.GLenum)(target), (C.GLuint)(index), (C.GLuint)(buffer), (C.GLintptr)(offset), (C.GLsizeiptr)(size))
}
func BindBufferRangeEXT(target uint32, index uint32, buffer uint32, offset int, size int) {
  C.glowBindBufferRangeEXT(pBindBufferRangeEXT, (C.GLenum)(target), (C.GLuint)(index), (C.GLuint)(buffer), (C.GLintptr)(offset), (C.GLsizeiptr)(size))
}
func BindBufferRangeNV(target uint32, index uint32, buffer uint32, offset int, size int) {
  C.glowBindBufferRangeNV(pBindBufferRangeNV, (C.GLenum)(target), (C.GLuint)(index), (C.GLuint)(buffer), (C.GLintptr)(offset), (C.GLsizeiptr)(size))
}
// bind one or more buffer objects to a sequence of indexed buffer targets
func BindBuffersBase(target uint32, first uint32, count int32, buffers *uint32) {
  C.glowBindBuffersBase(pBindBuffersBase, (C.GLenum)(target), (C.GLuint)(first), (C.GLsizei)(count), (*C.GLuint)(unsafe.Pointer(buffers)))
}
// bind ranges of one or more buffer objects to a sequence of indexed buffer targets
func BindBuffersRange(target uint32, first uint32, count int32, buffers *uint32, offsets *int, sizes *int) {
  C.glowBindBuffersRange(pBindBuffersRange, (C.GLenum)(target), (C.GLuint)(first), (C.GLsizei)(count), (*C.GLuint)(unsafe.Pointer(buffers)), (*C.GLintptr)(unsafe.Pointer(offsets)), (*C.GLsizeiptr)(unsafe.Pointer(sizes)))
}
// bind a user-defined varying out variable to a fragment shader color number
func BindFragDataLocation(program uint32, color uint32, name *int8) {
  C.glowBindFragDataLocation(pBindFragDataLocation, (C.GLuint)(program), (C.GLuint)(color), (*C.GLchar)(unsafe.Pointer(name)))
}
func BindFragDataLocationEXT(program uint32, color uint32, name *int8) {
  C.glowBindFragDataLocationEXT(pBindFragDataLocationEXT, (C.GLuint)(program), (C.GLuint)(color), (*C.GLchar)(unsafe.Pointer(name)))
}
// bind a user-defined varying out variable to a fragment shader color number and index
func BindFragDataLocationIndexed(program uint32, colorNumber uint32, index uint32, name *int8) {
  C.glowBindFragDataLocationIndexed(pBindFragDataLocationIndexed, (C.GLuint)(program), (C.GLuint)(colorNumber), (C.GLuint)(index), (*C.GLchar)(unsafe.Pointer(name)))
}
func BindFragmentShaderATI(id uint32) {
  C.glowBindFragmentShaderATI(pBindFragmentShaderATI, (C.GLuint)(id))
}
// bind a framebuffer to a framebuffer target
func BindFramebuffer(target uint32, framebuffer uint32) {
  C.glowBindFramebuffer(pBindFramebuffer, (C.GLenum)(target), (C.GLuint)(framebuffer))
}
func BindFramebufferEXT(target uint32, framebuffer uint32) {
  C.glowBindFramebufferEXT(pBindFramebufferEXT, (C.GLenum)(target), (C.GLuint)(framebuffer))
}
// bind a level of a texture to an image unit
func BindImageTexture(unit uint32, texture uint32, level int32, layered bool, layer int32, access uint32, format uint32) {
  C.glowBindImageTexture(pBindImageTexture, (C.GLuint)(unit), (C.GLuint)(texture), (C.GLint)(level), (C.GLboolean)(boolToInt(layered)), (C.GLint)(layer), (C.GLenum)(access), (C.GLenum)(format))
}
func BindImageTextureEXT(index uint32, texture uint32, level int32, layered bool, layer int32, access uint32, format int32) {
  C.glowBindImageTextureEXT(pBindImageTextureEXT, (C.GLuint)(index), (C.GLuint)(texture), (C.GLint)(level), (C.GLboolean)(boolToInt(layered)), (C.GLint)(layer), (C.GLenum)(access), (C.GLint)(format))
}
// bind one or more named texture images to a sequence of consecutive image units
func BindImageTextures(first uint32, count int32, textures *uint32) {
  C.glowBindImageTextures(pBindImageTextures, (C.GLuint)(first), (C.GLsizei)(count), (*C.GLuint)(unsafe.Pointer(textures)))
}
func BindLightParameterEXT(light uint32, value uint32) uint32 {
  ret := C.glowBindLightParameterEXT(pBindLightParameterEXT, (C.GLenum)(light), (C.GLenum)(value))
  return (uint32)(ret)
}
func BindMaterialParameterEXT(face uint32, value uint32) uint32 {
  ret := C.glowBindMaterialParameterEXT(pBindMaterialParameterEXT, (C.GLenum)(face), (C.GLenum)(value))
  return (uint32)(ret)
}
func BindMultiTextureEXT(texunit uint32, target uint32, texture uint32) {
  C.glowBindMultiTextureEXT(pBindMultiTextureEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLuint)(texture))
}
func BindParameterEXT(value uint32) uint32 {
  ret := C.glowBindParameterEXT(pBindParameterEXT, (C.GLenum)(value))
  return (uint32)(ret)
}
func BindProgramARB(target uint32, program uint32) {
  C.glowBindProgramARB(pBindProgramARB, (C.GLenum)(target), (C.GLuint)(program))
}
func BindProgramNV(target uint32, id uint32) {
  C.glowBindProgramNV(pBindProgramNV, (C.GLenum)(target), (C.GLuint)(id))
}
// bind a program pipeline to the current context
func BindProgramPipeline(pipeline uint32) {
  C.glowBindProgramPipeline(pBindProgramPipeline, (C.GLuint)(pipeline))
}
func BindProgramPipelineEXT(pipeline uint32) {
  C.glowBindProgramPipelineEXT(pBindProgramPipelineEXT, (C.GLuint)(pipeline))
}
// bind a renderbuffer to a renderbuffer target
func BindRenderbuffer(target uint32, renderbuffer uint32) {
  C.glowBindRenderbuffer(pBindRenderbuffer, (C.GLenum)(target), (C.GLuint)(renderbuffer))
}
func BindRenderbufferEXT(target uint32, renderbuffer uint32) {
  C.glowBindRenderbufferEXT(pBindRenderbufferEXT, (C.GLenum)(target), (C.GLuint)(renderbuffer))
}
// bind a named sampler to a texturing target
func BindSampler(unit uint32, sampler uint32) {
  C.glowBindSampler(pBindSampler, (C.GLuint)(unit), (C.GLuint)(sampler))
}
// bind one or more named sampler objects to a sequence of consecutive sampler units
func BindSamplers(first uint32, count int32, samplers *uint32) {
  C.glowBindSamplers(pBindSamplers, (C.GLuint)(first), (C.GLsizei)(count), (*C.GLuint)(unsafe.Pointer(samplers)))
}
func BindTexGenParameterEXT(unit uint32, coord uint32, value uint32) uint32 {
  ret := C.glowBindTexGenParameterEXT(pBindTexGenParameterEXT, (C.GLenum)(unit), (C.GLenum)(coord), (C.GLenum)(value))
  return (uint32)(ret)
}
// bind a named texture to a texturing target
func BindTexture(target uint32, texture uint32) {
  C.glowBindTexture(pBindTexture, (C.GLenum)(target), (C.GLuint)(texture))
}
func BindTextureEXT(target uint32, texture uint32) {
  C.glowBindTextureEXT(pBindTextureEXT, (C.GLenum)(target), (C.GLuint)(texture))
}
func BindTextureUnitParameterEXT(unit uint32, value uint32) uint32 {
  ret := C.glowBindTextureUnitParameterEXT(pBindTextureUnitParameterEXT, (C.GLenum)(unit), (C.GLenum)(value))
  return (uint32)(ret)
}
// bind one or more named textures to a sequence of consecutive texture units
func BindTextures(first uint32, count int32, textures *uint32) {
  C.glowBindTextures(pBindTextures, (C.GLuint)(first), (C.GLsizei)(count), (*C.GLuint)(unsafe.Pointer(textures)))
}
// bind a transform feedback object
func BindTransformFeedback(target uint32, id uint32) {
  C.glowBindTransformFeedback(pBindTransformFeedback, (C.GLenum)(target), (C.GLuint)(id))
}
func BindTransformFeedbackNV(target uint32, id uint32) {
  C.glowBindTransformFeedbackNV(pBindTransformFeedbackNV, (C.GLenum)(target), (C.GLuint)(id))
}
// bind a vertex array object
func BindVertexArray(array uint32) {
  C.glowBindVertexArray(pBindVertexArray, (C.GLuint)(array))
}
func BindVertexArrayAPPLE(array uint32) {
  C.glowBindVertexArrayAPPLE(pBindVertexArrayAPPLE, (C.GLuint)(array))
}
// bind a buffer to a vertex buffer bind point
func BindVertexBuffer(bindingindex uint32, buffer uint32, offset int, stride int32) {
  C.glowBindVertexBuffer(pBindVertexBuffer, (C.GLuint)(bindingindex), (C.GLuint)(buffer), (C.GLintptr)(offset), (C.GLsizei)(stride))
}
// bind one or more named buffer objects to a sequence of consecutive vertex buffer binding points
func BindVertexBuffers(first uint32, count int32, buffers *uint32, offsets *int, strides *int32) {
  C.glowBindVertexBuffers(pBindVertexBuffers, (C.GLuint)(first), (C.GLsizei)(count), (*C.GLuint)(unsafe.Pointer(buffers)), (*C.GLintptr)(unsafe.Pointer(offsets)), (*C.GLsizei)(unsafe.Pointer(strides)))
}
func BindVertexShaderEXT(id uint32) {
  C.glowBindVertexShaderEXT(pBindVertexShaderEXT, (C.GLuint)(id))
}
func BindVideoCaptureStreamBufferNV(video_capture_slot uint32, stream uint32, frame_region uint32, offset int) {
  C.glowBindVideoCaptureStreamBufferNV(pBindVideoCaptureStreamBufferNV, (C.GLuint)(video_capture_slot), (C.GLuint)(stream), (C.GLenum)(frame_region), (C.GLintptrARB)(offset))
}
func BindVideoCaptureStreamTextureNV(video_capture_slot uint32, stream uint32, frame_region uint32, target uint32, texture uint32) {
  C.glowBindVideoCaptureStreamTextureNV(pBindVideoCaptureStreamTextureNV, (C.GLuint)(video_capture_slot), (C.GLuint)(stream), (C.GLenum)(frame_region), (C.GLenum)(target), (C.GLuint)(texture))
}
func Binormal3bEXT(bx int8, by int8, bz int8) {
  C.glowBinormal3bEXT(pBinormal3bEXT, (C.GLbyte)(bx), (C.GLbyte)(by), (C.GLbyte)(bz))
}
func Binormal3bvEXT(v *int8) {
  C.glowBinormal3bvEXT(pBinormal3bvEXT, (*C.GLbyte)(unsafe.Pointer(v)))
}
func Binormal3dEXT(bx float64, by float64, bz float64) {
  C.glowBinormal3dEXT(pBinormal3dEXT, (C.GLdouble)(bx), (C.GLdouble)(by), (C.GLdouble)(bz))
}
func Binormal3dvEXT(v *float64) {
  C.glowBinormal3dvEXT(pBinormal3dvEXT, (*C.GLdouble)(unsafe.Pointer(v)))
}
func Binormal3fEXT(bx float32, by float32, bz float32) {
  C.glowBinormal3fEXT(pBinormal3fEXT, (C.GLfloat)(bx), (C.GLfloat)(by), (C.GLfloat)(bz))
}
func Binormal3fvEXT(v *float32) {
  C.glowBinormal3fvEXT(pBinormal3fvEXT, (*C.GLfloat)(unsafe.Pointer(v)))
}
func Binormal3iEXT(bx int32, by int32, bz int32) {
  C.glowBinormal3iEXT(pBinormal3iEXT, (C.GLint)(bx), (C.GLint)(by), (C.GLint)(bz))
}
func Binormal3ivEXT(v *int32) {
  C.glowBinormal3ivEXT(pBinormal3ivEXT, (*C.GLint)(unsafe.Pointer(v)))
}
func Binormal3sEXT(bx int16, by int16, bz int16) {
  C.glowBinormal3sEXT(pBinormal3sEXT, (C.GLshort)(bx), (C.GLshort)(by), (C.GLshort)(bz))
}
func Binormal3svEXT(v *int16) {
  C.glowBinormal3svEXT(pBinormal3svEXT, (*C.GLshort)(unsafe.Pointer(v)))
}
func BinormalPointerEXT(xtype uint32, stride int32, pointer unsafe.Pointer) {
  C.glowBinormalPointerEXT(pBinormalPointerEXT, (C.GLenum)(xtype), (C.GLsizei)(stride), pointer)
}
func BitmapxOES(width int32, height int32, xorig int32, yorig int32, xmove int32, ymove int32, bitmap *uint8) {
  C.glowBitmapxOES(pBitmapxOES, (C.GLsizei)(width), (C.GLsizei)(height), (C.GLfixed)(xorig), (C.GLfixed)(yorig), (C.GLfixed)(xmove), (C.GLfixed)(ymove), (*C.GLubyte)(unsafe.Pointer(bitmap)))
}
func BlendBarrierNV() {
  C.glowBlendBarrierNV(pBlendBarrierNV)
}
// set the blend color
func BlendColor(red float32, green float32, blue float32, alpha float32) {
  C.glowBlendColor(pBlendColor, (C.GLfloat)(red), (C.GLfloat)(green), (C.GLfloat)(blue), (C.GLfloat)(alpha))
}
func BlendColorEXT(red float32, green float32, blue float32, alpha float32) {
  C.glowBlendColorEXT(pBlendColorEXT, (C.GLfloat)(red), (C.GLfloat)(green), (C.GLfloat)(blue), (C.GLfloat)(alpha))
}
func BlendColorxOES(red int32, green int32, blue int32, alpha int32) {
  C.glowBlendColorxOES(pBlendColorxOES, (C.GLfixed)(red), (C.GLfixed)(green), (C.GLfixed)(blue), (C.GLfixed)(alpha))
}
// specify the equation used for both the RGB blend equation and the Alpha blend equation
func BlendEquation(mode uint32) {
  C.glowBlendEquation(pBlendEquation, (C.GLenum)(mode))
}
func BlendEquationEXT(mode uint32) {
  C.glowBlendEquationEXT(pBlendEquationEXT, (C.GLenum)(mode))
}
func BlendEquationIndexedAMD(buf uint32, mode uint32) {
  C.glowBlendEquationIndexedAMD(pBlendEquationIndexedAMD, (C.GLuint)(buf), (C.GLenum)(mode))
}
// set the RGB blend equation and the alpha blend equation separately
func BlendEquationSeparate(modeRGB uint32, modeAlpha uint32) {
  C.glowBlendEquationSeparate(pBlendEquationSeparate, (C.GLenum)(modeRGB), (C.GLenum)(modeAlpha))
}
func BlendEquationSeparateEXT(modeRGB uint32, modeAlpha uint32) {
  C.glowBlendEquationSeparateEXT(pBlendEquationSeparateEXT, (C.GLenum)(modeRGB), (C.GLenum)(modeAlpha))
}
func BlendEquationSeparateIndexedAMD(buf uint32, modeRGB uint32, modeAlpha uint32) {
  C.glowBlendEquationSeparateIndexedAMD(pBlendEquationSeparateIndexedAMD, (C.GLuint)(buf), (C.GLenum)(modeRGB), (C.GLenum)(modeAlpha))
}
func BlendEquationSeparatei(buf uint32, modeRGB uint32, modeAlpha uint32) {
  C.glowBlendEquationSeparatei(pBlendEquationSeparatei, (C.GLuint)(buf), (C.GLenum)(modeRGB), (C.GLenum)(modeAlpha))
}
func BlendEquationSeparateiARB(buf uint32, modeRGB uint32, modeAlpha uint32) {
  C.glowBlendEquationSeparateiARB(pBlendEquationSeparateiARB, (C.GLuint)(buf), (C.GLenum)(modeRGB), (C.GLenum)(modeAlpha))
}
func BlendEquationi(buf uint32, mode uint32) {
  C.glowBlendEquationi(pBlendEquationi, (C.GLuint)(buf), (C.GLenum)(mode))
}
func BlendEquationiARB(buf uint32, mode uint32) {
  C.glowBlendEquationiARB(pBlendEquationiARB, (C.GLuint)(buf), (C.GLenum)(mode))
}
// specify pixel arithmetic
func BlendFunc(sfactor uint32, dfactor uint32) {
  C.glowBlendFunc(pBlendFunc, (C.GLenum)(sfactor), (C.GLenum)(dfactor))
}
func BlendFuncIndexedAMD(buf uint32, src uint32, dst uint32) {
  C.glowBlendFuncIndexedAMD(pBlendFuncIndexedAMD, (C.GLuint)(buf), (C.GLenum)(src), (C.GLenum)(dst))
}
// specify pixel arithmetic for RGB and alpha components separately
func BlendFuncSeparate(sfactorRGB uint32, dfactorRGB uint32, sfactorAlpha uint32, dfactorAlpha uint32) {
  C.glowBlendFuncSeparate(pBlendFuncSeparate, (C.GLenum)(sfactorRGB), (C.GLenum)(dfactorRGB), (C.GLenum)(sfactorAlpha), (C.GLenum)(dfactorAlpha))
}
func BlendFuncSeparateEXT(sfactorRGB uint32, dfactorRGB uint32, sfactorAlpha uint32, dfactorAlpha uint32) {
  C.glowBlendFuncSeparateEXT(pBlendFuncSeparateEXT, (C.GLenum)(sfactorRGB), (C.GLenum)(dfactorRGB), (C.GLenum)(sfactorAlpha), (C.GLenum)(dfactorAlpha))
}
func BlendFuncSeparateINGR(sfactorRGB uint32, dfactorRGB uint32, sfactorAlpha uint32, dfactorAlpha uint32) {
  C.glowBlendFuncSeparateINGR(pBlendFuncSeparateINGR, (C.GLenum)(sfactorRGB), (C.GLenum)(dfactorRGB), (C.GLenum)(sfactorAlpha), (C.GLenum)(dfactorAlpha))
}
func BlendFuncSeparateIndexedAMD(buf uint32, srcRGB uint32, dstRGB uint32, srcAlpha uint32, dstAlpha uint32) {
  C.glowBlendFuncSeparateIndexedAMD(pBlendFuncSeparateIndexedAMD, (C.GLuint)(buf), (C.GLenum)(srcRGB), (C.GLenum)(dstRGB), (C.GLenum)(srcAlpha), (C.GLenum)(dstAlpha))
}
func BlendFuncSeparatei(buf uint32, srcRGB uint32, dstRGB uint32, srcAlpha uint32, dstAlpha uint32) {
  C.glowBlendFuncSeparatei(pBlendFuncSeparatei, (C.GLuint)(buf), (C.GLenum)(srcRGB), (C.GLenum)(dstRGB), (C.GLenum)(srcAlpha), (C.GLenum)(dstAlpha))
}
func BlendFuncSeparateiARB(buf uint32, srcRGB uint32, dstRGB uint32, srcAlpha uint32, dstAlpha uint32) {
  C.glowBlendFuncSeparateiARB(pBlendFuncSeparateiARB, (C.GLuint)(buf), (C.GLenum)(srcRGB), (C.GLenum)(dstRGB), (C.GLenum)(srcAlpha), (C.GLenum)(dstAlpha))
}
func BlendFunci(buf uint32, src uint32, dst uint32) {
  C.glowBlendFunci(pBlendFunci, (C.GLuint)(buf), (C.GLenum)(src), (C.GLenum)(dst))
}
func BlendFunciARB(buf uint32, src uint32, dst uint32) {
  C.glowBlendFunciARB(pBlendFunciARB, (C.GLuint)(buf), (C.GLenum)(src), (C.GLenum)(dst))
}
func BlendParameteriNV(pname uint32, value int32) {
  C.glowBlendParameteriNV(pBlendParameteriNV, (C.GLenum)(pname), (C.GLint)(value))
}
// copy a block of pixels from the read framebuffer to the draw framebuffer
func BlitFramebuffer(srcX0 int32, srcY0 int32, srcX1 int32, srcY1 int32, dstX0 int32, dstY0 int32, dstX1 int32, dstY1 int32, mask uint32, filter uint32) {
  C.glowBlitFramebuffer(pBlitFramebuffer, (C.GLint)(srcX0), (C.GLint)(srcY0), (C.GLint)(srcX1), (C.GLint)(srcY1), (C.GLint)(dstX0), (C.GLint)(dstY0), (C.GLint)(dstX1), (C.GLint)(dstY1), (C.GLbitfield)(mask), (C.GLenum)(filter))
}
func BlitFramebufferEXT(srcX0 int32, srcY0 int32, srcX1 int32, srcY1 int32, dstX0 int32, dstY0 int32, dstX1 int32, dstY1 int32, mask uint32, filter uint32) {
  C.glowBlitFramebufferEXT(pBlitFramebufferEXT, (C.GLint)(srcX0), (C.GLint)(srcY0), (C.GLint)(srcX1), (C.GLint)(srcY1), (C.GLint)(dstX0), (C.GLint)(dstY0), (C.GLint)(dstX1), (C.GLint)(dstY1), (C.GLbitfield)(mask), (C.GLenum)(filter))
}
func BufferAddressRangeNV(pname uint32, index uint32, address uint64, length int) {
  C.glowBufferAddressRangeNV(pBufferAddressRangeNV, (C.GLenum)(pname), (C.GLuint)(index), (C.GLuint64EXT)(address), (C.GLsizeiptr)(length))
}
// creates and initializes a buffer object's data store
func BufferData(target uint32, size int, data unsafe.Pointer, usage uint32) {
  C.glowBufferData(pBufferData, (C.GLenum)(target), (C.GLsizeiptr)(size), data, (C.GLenum)(usage))
}
func BufferDataARB(target uint32, size int, data unsafe.Pointer, usage uint32) {
  C.glowBufferDataARB(pBufferDataARB, (C.GLenum)(target), (C.GLsizeiptrARB)(size), data, (C.GLenum)(usage))
}
func BufferParameteriAPPLE(target uint32, pname uint32, param int32) {
  C.glowBufferParameteriAPPLE(pBufferParameteriAPPLE, (C.GLenum)(target), (C.GLenum)(pname), (C.GLint)(param))
}
// creates and initializes a buffer object's immutable data store
func BufferStorage(target uint32, size int, data unsafe.Pointer, flags uint32) {
  C.glowBufferStorage(pBufferStorage, (C.GLenum)(target), (C.GLsizeiptr)(size), data, (C.GLbitfield)(flags))
}
// updates a subset of a buffer object's data store
func BufferSubData(target uint32, offset int, size int, data unsafe.Pointer) {
  C.glowBufferSubData(pBufferSubData, (C.GLenum)(target), (C.GLintptr)(offset), (C.GLsizeiptr)(size), data)
}
func BufferSubDataARB(target uint32, offset int, size int, data unsafe.Pointer) {
  C.glowBufferSubDataARB(pBufferSubDataARB, (C.GLenum)(target), (C.GLintptrARB)(offset), (C.GLsizeiptrARB)(size), data)
}
// check the completeness status of a framebuffer
func CheckFramebufferStatus(target uint32) uint32 {
  ret := C.glowCheckFramebufferStatus(pCheckFramebufferStatus, (C.GLenum)(target))
  return (uint32)(ret)
}
func CheckFramebufferStatusEXT(target uint32) uint32 {
  ret := C.glowCheckFramebufferStatusEXT(pCheckFramebufferStatusEXT, (C.GLenum)(target))
  return (uint32)(ret)
}
func CheckNamedFramebufferStatusEXT(framebuffer uint32, target uint32) uint32 {
  ret := C.glowCheckNamedFramebufferStatusEXT(pCheckNamedFramebufferStatusEXT, (C.GLuint)(framebuffer), (C.GLenum)(target))
  return (uint32)(ret)
}
// specify whether data read via  should be clamped
func ClampColor(target uint32, clamp uint32) {
  C.glowClampColor(pClampColor, (C.GLenum)(target), (C.GLenum)(clamp))
}
func ClampColorARB(target uint32, clamp uint32) {
  C.glowClampColorARB(pClampColorARB, (C.GLenum)(target), (C.GLenum)(clamp))
}
// clear buffers to preset values
func Clear(mask uint32) {
  C.glowClear(pClear, (C.GLbitfield)(mask))
}
func ClearAccumxOES(red int32, green int32, blue int32, alpha int32) {
  C.glowClearAccumxOES(pClearAccumxOES, (C.GLfixed)(red), (C.GLfixed)(green), (C.GLfixed)(blue), (C.GLfixed)(alpha))
}
// fill a buffer object's data store with a fixed value
func ClearBufferData(target uint32, internalformat uint32, format uint32, xtype uint32, data unsafe.Pointer) {
  C.glowClearBufferData(pClearBufferData, (C.GLenum)(target), (C.GLenum)(internalformat), (C.GLenum)(format), (C.GLenum)(xtype), data)
}
// fill all or part of buffer object's data store with a fixed value
func ClearBufferSubData(target uint32, internalformat uint32, offset int, size int, format uint32, xtype uint32, data unsafe.Pointer) {
  C.glowClearBufferSubData(pClearBufferSubData, (C.GLenum)(target), (C.GLenum)(internalformat), (C.GLintptr)(offset), (C.GLsizeiptr)(size), (C.GLenum)(format), (C.GLenum)(xtype), data)
}
func ClearBufferfi(buffer uint32, drawbuffer int32, depth float32, stencil int32) {
  C.glowClearBufferfi(pClearBufferfi, (C.GLenum)(buffer), (C.GLint)(drawbuffer), (C.GLfloat)(depth), (C.GLint)(stencil))
}
func ClearBufferfv(buffer uint32, drawbuffer int32, value *float32) {
  C.glowClearBufferfv(pClearBufferfv, (C.GLenum)(buffer), (C.GLint)(drawbuffer), (*C.GLfloat)(unsafe.Pointer(value)))
}
func ClearBufferiv(buffer uint32, drawbuffer int32, value *int32) {
  C.glowClearBufferiv(pClearBufferiv, (C.GLenum)(buffer), (C.GLint)(drawbuffer), (*C.GLint)(unsafe.Pointer(value)))
}
func ClearBufferuiv(buffer uint32, drawbuffer int32, value *uint32) {
  C.glowClearBufferuiv(pClearBufferuiv, (C.GLenum)(buffer), (C.GLint)(drawbuffer), (*C.GLuint)(unsafe.Pointer(value)))
}
// specify clear values for the color buffers
func ClearColor(red float32, green float32, blue float32, alpha float32) {
  C.glowClearColor(pClearColor, (C.GLfloat)(red), (C.GLfloat)(green), (C.GLfloat)(blue), (C.GLfloat)(alpha))
}
func ClearColorIiEXT(red int32, green int32, blue int32, alpha int32) {
  C.glowClearColorIiEXT(pClearColorIiEXT, (C.GLint)(red), (C.GLint)(green), (C.GLint)(blue), (C.GLint)(alpha))
}
func ClearColorIuiEXT(red uint32, green uint32, blue uint32, alpha uint32) {
  C.glowClearColorIuiEXT(pClearColorIuiEXT, (C.GLuint)(red), (C.GLuint)(green), (C.GLuint)(blue), (C.GLuint)(alpha))
}
func ClearColorxOES(red int32, green int32, blue int32, alpha int32) {
  C.glowClearColorxOES(pClearColorxOES, (C.GLfixed)(red), (C.GLfixed)(green), (C.GLfixed)(blue), (C.GLfixed)(alpha))
}
// specify the clear value for the depth buffer
func ClearDepth(depth float64) {
  C.glowClearDepth(pClearDepth, (C.GLdouble)(depth))
}
func ClearDepthdNV(depth float64) {
  C.glowClearDepthdNV(pClearDepthdNV, (C.GLdouble)(depth))
}
func ClearDepthf(d float32) {
  C.glowClearDepthf(pClearDepthf, (C.GLfloat)(d))
}
func ClearDepthfOES(depth float32) {
  C.glowClearDepthfOES(pClearDepthfOES, (C.GLclampf)(depth))
}
func ClearDepthxOES(depth int32) {
  C.glowClearDepthxOES(pClearDepthxOES, (C.GLfixed)(depth))
}
func ClearNamedBufferDataEXT(buffer uint32, internalformat uint32, format uint32, xtype uint32, data unsafe.Pointer) {
  C.glowClearNamedBufferDataEXT(pClearNamedBufferDataEXT, (C.GLuint)(buffer), (C.GLenum)(internalformat), (C.GLenum)(format), (C.GLenum)(xtype), data)
}
func ClearNamedBufferSubDataEXT(buffer uint32, internalformat uint32, offset int, size int, format uint32, xtype uint32, data unsafe.Pointer) {
  C.glowClearNamedBufferSubDataEXT(pClearNamedBufferSubDataEXT, (C.GLuint)(buffer), (C.GLenum)(internalformat), (C.GLsizeiptr)(offset), (C.GLsizeiptr)(size), (C.GLenum)(format), (C.GLenum)(xtype), data)
}
// specify the clear value for the stencil buffer
func ClearStencil(s int32) {
  C.glowClearStencil(pClearStencil, (C.GLint)(s))
}
// fills all a texture image with a constant value
func ClearTexImage(texture uint32, level int32, format uint32, xtype uint32, data unsafe.Pointer) {
  C.glowClearTexImage(pClearTexImage, (C.GLuint)(texture), (C.GLint)(level), (C.GLenum)(format), (C.GLenum)(xtype), data)
}
// fills all or part of a texture image with a constant value
func ClearTexSubImage(texture uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, xtype uint32, data unsafe.Pointer) {
  C.glowClearTexSubImage(pClearTexSubImage, (C.GLuint)(texture), (C.GLint)(level), (C.GLint)(xoffset), (C.GLint)(yoffset), (C.GLint)(zoffset), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLsizei)(depth), (C.GLenum)(format), (C.GLenum)(xtype), data)
}
func ClientActiveTextureARB(texture uint32) {
  C.glowClientActiveTextureARB(pClientActiveTextureARB, (C.GLenum)(texture))
}
func ClientActiveVertexStreamATI(stream uint32) {
  C.glowClientActiveVertexStreamATI(pClientActiveVertexStreamATI, (C.GLenum)(stream))
}
func ClientAttribDefaultEXT(mask uint32) {
  C.glowClientAttribDefaultEXT(pClientAttribDefaultEXT, (C.GLbitfield)(mask))
}
// block and wait for a sync object to become signaled
func ClientWaitSync(sync unsafe.Pointer, flags uint32, timeout uint64) uint32 {
  ret := C.glowClientWaitSync(pClientWaitSync, (C.GLsync)(sync), (C.GLbitfield)(flags), (C.GLuint64)(timeout))
  return (uint32)(ret)
}
func ClipPlanefOES(plane uint32, equation *float32) {
  C.glowClipPlanefOES(pClipPlanefOES, (C.GLenum)(plane), (*C.GLfloat)(unsafe.Pointer(equation)))
}
func ClipPlanexOES(plane uint32, equation *int32) {
  C.glowClipPlanexOES(pClipPlanexOES, (C.GLenum)(plane), (*C.GLfixed)(unsafe.Pointer(equation)))
}
func Color3fVertex3fSUN(r float32, g float32, b float32, x float32, y float32, z float32) {
  C.glowColor3fVertex3fSUN(pColor3fVertex3fSUN, (C.GLfloat)(r), (C.GLfloat)(g), (C.GLfloat)(b), (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z))
}
func Color3fVertex3fvSUN(c *float32, v *float32) {
  C.glowColor3fVertex3fvSUN(pColor3fVertex3fvSUN, (*C.GLfloat)(unsafe.Pointer(c)), (*C.GLfloat)(unsafe.Pointer(v)))
}
func Color3hNV(red uint16, green uint16, blue uint16) {
  C.glowColor3hNV(pColor3hNV, (C.GLhalfNV)(red), (C.GLhalfNV)(green), (C.GLhalfNV)(blue))
}
func Color3hvNV(v *uint16) {
  C.glowColor3hvNV(pColor3hvNV, (*C.GLhalfNV)(unsafe.Pointer(v)))
}
func Color3xOES(red int32, green int32, blue int32) {
  C.glowColor3xOES(pColor3xOES, (C.GLfixed)(red), (C.GLfixed)(green), (C.GLfixed)(blue))
}
func Color3xvOES(components *int32) {
  C.glowColor3xvOES(pColor3xvOES, (*C.GLfixed)(unsafe.Pointer(components)))
}
func Color4fNormal3fVertex3fSUN(r float32, g float32, b float32, a float32, nx float32, ny float32, nz float32, x float32, y float32, z float32) {
  C.glowColor4fNormal3fVertex3fSUN(pColor4fNormal3fVertex3fSUN, (C.GLfloat)(r), (C.GLfloat)(g), (C.GLfloat)(b), (C.GLfloat)(a), (C.GLfloat)(nx), (C.GLfloat)(ny), (C.GLfloat)(nz), (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z))
}
func Color4fNormal3fVertex3fvSUN(c *float32, n *float32, v *float32) {
  C.glowColor4fNormal3fVertex3fvSUN(pColor4fNormal3fVertex3fvSUN, (*C.GLfloat)(unsafe.Pointer(c)), (*C.GLfloat)(unsafe.Pointer(n)), (*C.GLfloat)(unsafe.Pointer(v)))
}
func Color4hNV(red uint16, green uint16, blue uint16, alpha uint16) {
  C.glowColor4hNV(pColor4hNV, (C.GLhalfNV)(red), (C.GLhalfNV)(green), (C.GLhalfNV)(blue), (C.GLhalfNV)(alpha))
}
func Color4hvNV(v *uint16) {
  C.glowColor4hvNV(pColor4hvNV, (*C.GLhalfNV)(unsafe.Pointer(v)))
}
func Color4ubVertex2fSUN(r uint8, g uint8, b uint8, a uint8, x float32, y float32) {
  C.glowColor4ubVertex2fSUN(pColor4ubVertex2fSUN, (C.GLubyte)(r), (C.GLubyte)(g), (C.GLubyte)(b), (C.GLubyte)(a), (C.GLfloat)(x), (C.GLfloat)(y))
}
func Color4ubVertex2fvSUN(c *uint8, v *float32) {
  C.glowColor4ubVertex2fvSUN(pColor4ubVertex2fvSUN, (*C.GLubyte)(unsafe.Pointer(c)), (*C.GLfloat)(unsafe.Pointer(v)))
}
func Color4ubVertex3fSUN(r uint8, g uint8, b uint8, a uint8, x float32, y float32, z float32) {
  C.glowColor4ubVertex3fSUN(pColor4ubVertex3fSUN, (C.GLubyte)(r), (C.GLubyte)(g), (C.GLubyte)(b), (C.GLubyte)(a), (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z))
}
func Color4ubVertex3fvSUN(c *uint8, v *float32) {
  C.glowColor4ubVertex3fvSUN(pColor4ubVertex3fvSUN, (*C.GLubyte)(unsafe.Pointer(c)), (*C.GLfloat)(unsafe.Pointer(v)))
}
func Color4xOES(red int32, green int32, blue int32, alpha int32) {
  C.glowColor4xOES(pColor4xOES, (C.GLfixed)(red), (C.GLfixed)(green), (C.GLfixed)(blue), (C.GLfixed)(alpha))
}
func Color4xvOES(components *int32) {
  C.glowColor4xvOES(pColor4xvOES, (*C.GLfixed)(unsafe.Pointer(components)))
}
func ColorFormatNV(size int32, xtype uint32, stride int32) {
  C.glowColorFormatNV(pColorFormatNV, (C.GLint)(size), (C.GLenum)(xtype), (C.GLsizei)(stride))
}
func ColorFragmentOp1ATI(op uint32, dst uint32, dstMask uint32, dstMod uint32, arg1 uint32, arg1Rep uint32, arg1Mod uint32) {
  C.glowColorFragmentOp1ATI(pColorFragmentOp1ATI, (C.GLenum)(op), (C.GLuint)(dst), (C.GLuint)(dstMask), (C.GLuint)(dstMod), (C.GLuint)(arg1), (C.GLuint)(arg1Rep), (C.GLuint)(arg1Mod))
}
func ColorFragmentOp2ATI(op uint32, dst uint32, dstMask uint32, dstMod uint32, arg1 uint32, arg1Rep uint32, arg1Mod uint32, arg2 uint32, arg2Rep uint32, arg2Mod uint32) {
  C.glowColorFragmentOp2ATI(pColorFragmentOp2ATI, (C.GLenum)(op), (C.GLuint)(dst), (C.GLuint)(dstMask), (C.GLuint)(dstMod), (C.GLuint)(arg1), (C.GLuint)(arg1Rep), (C.GLuint)(arg1Mod), (C.GLuint)(arg2), (C.GLuint)(arg2Rep), (C.GLuint)(arg2Mod))
}
func ColorFragmentOp3ATI(op uint32, dst uint32, dstMask uint32, dstMod uint32, arg1 uint32, arg1Rep uint32, arg1Mod uint32, arg2 uint32, arg2Rep uint32, arg2Mod uint32, arg3 uint32, arg3Rep uint32, arg3Mod uint32) {
  C.glowColorFragmentOp3ATI(pColorFragmentOp3ATI, (C.GLenum)(op), (C.GLuint)(dst), (C.GLuint)(dstMask), (C.GLuint)(dstMod), (C.GLuint)(arg1), (C.GLuint)(arg1Rep), (C.GLuint)(arg1Mod), (C.GLuint)(arg2), (C.GLuint)(arg2Rep), (C.GLuint)(arg2Mod), (C.GLuint)(arg3), (C.GLuint)(arg3Rep), (C.GLuint)(arg3Mod))
}
func ColorMask(red bool, green bool, blue bool, alpha bool) {
  C.glowColorMask(pColorMask, (C.GLboolean)(boolToInt(red)), (C.GLboolean)(boolToInt(green)), (C.GLboolean)(boolToInt(blue)), (C.GLboolean)(boolToInt(alpha)))
}
func ColorMaskIndexedEXT(index uint32, r bool, g bool, b bool, a bool) {
  C.glowColorMaskIndexedEXT(pColorMaskIndexedEXT, (C.GLuint)(index), (C.GLboolean)(boolToInt(r)), (C.GLboolean)(boolToInt(g)), (C.GLboolean)(boolToInt(b)), (C.GLboolean)(boolToInt(a)))
}
func ColorMaski(index uint32, r bool, g bool, b bool, a bool) {
  C.glowColorMaski(pColorMaski, (C.GLuint)(index), (C.GLboolean)(boolToInt(r)), (C.GLboolean)(boolToInt(g)), (C.GLboolean)(boolToInt(b)), (C.GLboolean)(boolToInt(a)))
}
func ColorPointerEXT(size int32, xtype uint32, stride int32, count int32, pointer unsafe.Pointer) {
  C.glowColorPointerEXT(pColorPointerEXT, (C.GLint)(size), (C.GLenum)(xtype), (C.GLsizei)(stride), (C.GLsizei)(count), pointer)
}
func ColorPointerListIBM(size int32, xtype uint32, stride int32, pointer *unsafe.Pointer, ptrstride int32) {
  C.glowColorPointerListIBM(pColorPointerListIBM, (C.GLint)(size), (C.GLenum)(xtype), (C.GLint)(stride), pointer, (C.GLint)(ptrstride))
}
func ColorPointervINTEL(size int32, xtype uint32, pointer *unsafe.Pointer) {
  C.glowColorPointervINTEL(pColorPointervINTEL, (C.GLint)(size), (C.GLenum)(xtype), pointer)
}
func ColorSubTableEXT(target uint32, start int32, count int32, format uint32, xtype uint32, data unsafe.Pointer) {
  C.glowColorSubTableEXT(pColorSubTableEXT, (C.GLenum)(target), (C.GLsizei)(start), (C.GLsizei)(count), (C.GLenum)(format), (C.GLenum)(xtype), data)
}
func ColorTableEXT(target uint32, internalFormat uint32, width int32, format uint32, xtype uint32, table unsafe.Pointer) {
  C.glowColorTableEXT(pColorTableEXT, (C.GLenum)(target), (C.GLenum)(internalFormat), (C.GLsizei)(width), (C.GLenum)(format), (C.GLenum)(xtype), table)
}
func ColorTableParameterfvSGI(target uint32, pname uint32, params *float32) {
  C.glowColorTableParameterfvSGI(pColorTableParameterfvSGI, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func ColorTableParameterivSGI(target uint32, pname uint32, params *int32) {
  C.glowColorTableParameterivSGI(pColorTableParameterivSGI, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func ColorTableSGI(target uint32, internalformat uint32, width int32, format uint32, xtype uint32, table unsafe.Pointer) {
  C.glowColorTableSGI(pColorTableSGI, (C.GLenum)(target), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLenum)(format), (C.GLenum)(xtype), table)
}
func CombinerInputNV(stage uint32, portion uint32, variable uint32, input uint32, mapping uint32, componentUsage uint32) {
  C.glowCombinerInputNV(pCombinerInputNV, (C.GLenum)(stage), (C.GLenum)(portion), (C.GLenum)(variable), (C.GLenum)(input), (C.GLenum)(mapping), (C.GLenum)(componentUsage))
}
func CombinerOutputNV(stage uint32, portion uint32, abOutput uint32, cdOutput uint32, sumOutput uint32, scale uint32, bias uint32, abDotProduct bool, cdDotProduct bool, muxSum bool) {
  C.glowCombinerOutputNV(pCombinerOutputNV, (C.GLenum)(stage), (C.GLenum)(portion), (C.GLenum)(abOutput), (C.GLenum)(cdOutput), (C.GLenum)(sumOutput), (C.GLenum)(scale), (C.GLenum)(bias), (C.GLboolean)(boolToInt(abDotProduct)), (C.GLboolean)(boolToInt(cdDotProduct)), (C.GLboolean)(boolToInt(muxSum)))
}
func CombinerParameterfNV(pname uint32, param float32) {
  C.glowCombinerParameterfNV(pCombinerParameterfNV, (C.GLenum)(pname), (C.GLfloat)(param))
}
func CombinerParameterfvNV(pname uint32, params *float32) {
  C.glowCombinerParameterfvNV(pCombinerParameterfvNV, (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func CombinerParameteriNV(pname uint32, param int32) {
  C.glowCombinerParameteriNV(pCombinerParameteriNV, (C.GLenum)(pname), (C.GLint)(param))
}
func CombinerParameterivNV(pname uint32, params *int32) {
  C.glowCombinerParameterivNV(pCombinerParameterivNV, (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func CombinerStageParameterfvNV(stage uint32, pname uint32, params *float32) {
  C.glowCombinerStageParameterfvNV(pCombinerStageParameterfvNV, (C.GLenum)(stage), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
// Compiles a shader object
func CompileShader(shader uint32) {
  C.glowCompileShader(pCompileShader, (C.GLuint)(shader))
}
func CompileShaderARB(shaderObj uintptr) {
  C.glowCompileShaderARB(pCompileShaderARB, (C.GLhandleARB)(shaderObj))
}
func CompileShaderIncludeARB(shader uint32, count int32, path **int8, length *int32) {
  C.glowCompileShaderIncludeARB(pCompileShaderIncludeARB, (C.GLuint)(shader), (C.GLsizei)(count), (**C.GLchar)(unsafe.Pointer(path)), (*C.GLint)(unsafe.Pointer(length)))
}
func CompressedMultiTexImage1DEXT(texunit uint32, target uint32, level int32, internalformat uint32, width int32, border int32, imageSize int32, bits unsafe.Pointer) {
  C.glowCompressedMultiTexImage1DEXT(pCompressedMultiTexImage1DEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLint)(level), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLint)(border), (C.GLsizei)(imageSize), bits)
}
func CompressedMultiTexImage2DEXT(texunit uint32, target uint32, level int32, internalformat uint32, width int32, height int32, border int32, imageSize int32, bits unsafe.Pointer) {
  C.glowCompressedMultiTexImage2DEXT(pCompressedMultiTexImage2DEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLint)(level), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLint)(border), (C.GLsizei)(imageSize), bits)
}
func CompressedMultiTexImage3DEXT(texunit uint32, target uint32, level int32, internalformat uint32, width int32, height int32, depth int32, border int32, imageSize int32, bits unsafe.Pointer) {
  C.glowCompressedMultiTexImage3DEXT(pCompressedMultiTexImage3DEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLint)(level), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLsizei)(depth), (C.GLint)(border), (C.GLsizei)(imageSize), bits)
}
func CompressedMultiTexSubImage1DEXT(texunit uint32, target uint32, level int32, xoffset int32, width int32, format uint32, imageSize int32, bits unsafe.Pointer) {
  C.glowCompressedMultiTexSubImage1DEXT(pCompressedMultiTexSubImage1DEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLsizei)(width), (C.GLenum)(format), (C.GLsizei)(imageSize), bits)
}
func CompressedMultiTexSubImage2DEXT(texunit uint32, target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, imageSize int32, bits unsafe.Pointer) {
  C.glowCompressedMultiTexSubImage2DEXT(pCompressedMultiTexSubImage2DEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLint)(yoffset), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLenum)(format), (C.GLsizei)(imageSize), bits)
}
func CompressedMultiTexSubImage3DEXT(texunit uint32, target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, imageSize int32, bits unsafe.Pointer) {
  C.glowCompressedMultiTexSubImage3DEXT(pCompressedMultiTexSubImage3DEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLint)(yoffset), (C.GLint)(zoffset), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLsizei)(depth), (C.GLenum)(format), (C.GLsizei)(imageSize), bits)
}
// specify a one-dimensional texture image in a compressed format
func CompressedTexImage1D(target uint32, level int32, internalformat uint32, width int32, border int32, imageSize int32, data unsafe.Pointer) {
  C.glowCompressedTexImage1D(pCompressedTexImage1D, (C.GLenum)(target), (C.GLint)(level), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLint)(border), (C.GLsizei)(imageSize), data)
}
func CompressedTexImage1DARB(target uint32, level int32, internalformat uint32, width int32, border int32, imageSize int32, data unsafe.Pointer) {
  C.glowCompressedTexImage1DARB(pCompressedTexImage1DARB, (C.GLenum)(target), (C.GLint)(level), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLint)(border), (C.GLsizei)(imageSize), data)
}
// specify a two-dimensional texture image in a compressed format
func CompressedTexImage2D(target uint32, level int32, internalformat uint32, width int32, height int32, border int32, imageSize int32, data unsafe.Pointer) {
  C.glowCompressedTexImage2D(pCompressedTexImage2D, (C.GLenum)(target), (C.GLint)(level), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLint)(border), (C.GLsizei)(imageSize), data)
}
func CompressedTexImage2DARB(target uint32, level int32, internalformat uint32, width int32, height int32, border int32, imageSize int32, data unsafe.Pointer) {
  C.glowCompressedTexImage2DARB(pCompressedTexImage2DARB, (C.GLenum)(target), (C.GLint)(level), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLint)(border), (C.GLsizei)(imageSize), data)
}
// specify a three-dimensional texture image in a compressed format
func CompressedTexImage3D(target uint32, level int32, internalformat uint32, width int32, height int32, depth int32, border int32, imageSize int32, data unsafe.Pointer) {
  C.glowCompressedTexImage3D(pCompressedTexImage3D, (C.GLenum)(target), (C.GLint)(level), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLsizei)(depth), (C.GLint)(border), (C.GLsizei)(imageSize), data)
}
func CompressedTexImage3DARB(target uint32, level int32, internalformat uint32, width int32, height int32, depth int32, border int32, imageSize int32, data unsafe.Pointer) {
  C.glowCompressedTexImage3DARB(pCompressedTexImage3DARB, (C.GLenum)(target), (C.GLint)(level), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLsizei)(depth), (C.GLint)(border), (C.GLsizei)(imageSize), data)
}
// specify a one-dimensional texture subimage in a compressed format
func CompressedTexSubImage1D(target uint32, level int32, xoffset int32, width int32, format uint32, imageSize int32, data unsafe.Pointer) {
  C.glowCompressedTexSubImage1D(pCompressedTexSubImage1D, (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLsizei)(width), (C.GLenum)(format), (C.GLsizei)(imageSize), data)
}
func CompressedTexSubImage1DARB(target uint32, level int32, xoffset int32, width int32, format uint32, imageSize int32, data unsafe.Pointer) {
  C.glowCompressedTexSubImage1DARB(pCompressedTexSubImage1DARB, (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLsizei)(width), (C.GLenum)(format), (C.GLsizei)(imageSize), data)
}
// specify a two-dimensional texture subimage in a compressed format
func CompressedTexSubImage2D(target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, imageSize int32, data unsafe.Pointer) {
  C.glowCompressedTexSubImage2D(pCompressedTexSubImage2D, (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLint)(yoffset), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLenum)(format), (C.GLsizei)(imageSize), data)
}
func CompressedTexSubImage2DARB(target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, imageSize int32, data unsafe.Pointer) {
  C.glowCompressedTexSubImage2DARB(pCompressedTexSubImage2DARB, (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLint)(yoffset), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLenum)(format), (C.GLsizei)(imageSize), data)
}
// specify a three-dimensional texture subimage in a compressed format
func CompressedTexSubImage3D(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, imageSize int32, data unsafe.Pointer) {
  C.glowCompressedTexSubImage3D(pCompressedTexSubImage3D, (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLint)(yoffset), (C.GLint)(zoffset), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLsizei)(depth), (C.GLenum)(format), (C.GLsizei)(imageSize), data)
}
func CompressedTexSubImage3DARB(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, imageSize int32, data unsafe.Pointer) {
  C.glowCompressedTexSubImage3DARB(pCompressedTexSubImage3DARB, (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLint)(yoffset), (C.GLint)(zoffset), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLsizei)(depth), (C.GLenum)(format), (C.GLsizei)(imageSize), data)
}
func CompressedTextureImage1DEXT(texture uint32, target uint32, level int32, internalformat uint32, width int32, border int32, imageSize int32, bits unsafe.Pointer) {
  C.glowCompressedTextureImage1DEXT(pCompressedTextureImage1DEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLint)(level), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLint)(border), (C.GLsizei)(imageSize), bits)
}
func CompressedTextureImage2DEXT(texture uint32, target uint32, level int32, internalformat uint32, width int32, height int32, border int32, imageSize int32, bits unsafe.Pointer) {
  C.glowCompressedTextureImage2DEXT(pCompressedTextureImage2DEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLint)(level), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLint)(border), (C.GLsizei)(imageSize), bits)
}
func CompressedTextureImage3DEXT(texture uint32, target uint32, level int32, internalformat uint32, width int32, height int32, depth int32, border int32, imageSize int32, bits unsafe.Pointer) {
  C.glowCompressedTextureImage3DEXT(pCompressedTextureImage3DEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLint)(level), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLsizei)(depth), (C.GLint)(border), (C.GLsizei)(imageSize), bits)
}
func CompressedTextureSubImage1DEXT(texture uint32, target uint32, level int32, xoffset int32, width int32, format uint32, imageSize int32, bits unsafe.Pointer) {
  C.glowCompressedTextureSubImage1DEXT(pCompressedTextureSubImage1DEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLsizei)(width), (C.GLenum)(format), (C.GLsizei)(imageSize), bits)
}
func CompressedTextureSubImage2DEXT(texture uint32, target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, imageSize int32, bits unsafe.Pointer) {
  C.glowCompressedTextureSubImage2DEXT(pCompressedTextureSubImage2DEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLint)(yoffset), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLenum)(format), (C.GLsizei)(imageSize), bits)
}
func CompressedTextureSubImage3DEXT(texture uint32, target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, imageSize int32, bits unsafe.Pointer) {
  C.glowCompressedTextureSubImage3DEXT(pCompressedTextureSubImage3DEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLint)(yoffset), (C.GLint)(zoffset), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLsizei)(depth), (C.GLenum)(format), (C.GLsizei)(imageSize), bits)
}
func ConvolutionFilter1DEXT(target uint32, internalformat uint32, width int32, format uint32, xtype uint32, image unsafe.Pointer) {
  C.glowConvolutionFilter1DEXT(pConvolutionFilter1DEXT, (C.GLenum)(target), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLenum)(format), (C.GLenum)(xtype), image)
}
func ConvolutionFilter2DEXT(target uint32, internalformat uint32, width int32, height int32, format uint32, xtype uint32, image unsafe.Pointer) {
  C.glowConvolutionFilter2DEXT(pConvolutionFilter2DEXT, (C.GLenum)(target), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLenum)(format), (C.GLenum)(xtype), image)
}
func ConvolutionParameterfEXT(target uint32, pname uint32, params float32) {
  C.glowConvolutionParameterfEXT(pConvolutionParameterfEXT, (C.GLenum)(target), (C.GLenum)(pname), (C.GLfloat)(params))
}
func ConvolutionParameterfvEXT(target uint32, pname uint32, params *float32) {
  C.glowConvolutionParameterfvEXT(pConvolutionParameterfvEXT, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func ConvolutionParameteriEXT(target uint32, pname uint32, params int32) {
  C.glowConvolutionParameteriEXT(pConvolutionParameteriEXT, (C.GLenum)(target), (C.GLenum)(pname), (C.GLint)(params))
}
func ConvolutionParameterivEXT(target uint32, pname uint32, params *int32) {
  C.glowConvolutionParameterivEXT(pConvolutionParameterivEXT, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func ConvolutionParameterxOES(target uint32, pname uint32, param int32) {
  C.glowConvolutionParameterxOES(pConvolutionParameterxOES, (C.GLenum)(target), (C.GLenum)(pname), (C.GLfixed)(param))
}
func ConvolutionParameterxvOES(target uint32, pname uint32, params *int32) {
  C.glowConvolutionParameterxvOES(pConvolutionParameterxvOES, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLfixed)(unsafe.Pointer(params)))
}
// copy part of the data store of a buffer object to the data store of another buffer object
func CopyBufferSubData(readTarget uint32, writeTarget uint32, readOffset int, writeOffset int, size int) {
  C.glowCopyBufferSubData(pCopyBufferSubData, (C.GLenum)(readTarget), (C.GLenum)(writeTarget), (C.GLintptr)(readOffset), (C.GLintptr)(writeOffset), (C.GLsizeiptr)(size))
}
func CopyColorSubTableEXT(target uint32, start int32, x int32, y int32, width int32) {
  C.glowCopyColorSubTableEXT(pCopyColorSubTableEXT, (C.GLenum)(target), (C.GLsizei)(start), (C.GLint)(x), (C.GLint)(y), (C.GLsizei)(width))
}
func CopyColorTableSGI(target uint32, internalformat uint32, x int32, y int32, width int32) {
  C.glowCopyColorTableSGI(pCopyColorTableSGI, (C.GLenum)(target), (C.GLenum)(internalformat), (C.GLint)(x), (C.GLint)(y), (C.GLsizei)(width))
}
func CopyConvolutionFilter1DEXT(target uint32, internalformat uint32, x int32, y int32, width int32) {
  C.glowCopyConvolutionFilter1DEXT(pCopyConvolutionFilter1DEXT, (C.GLenum)(target), (C.GLenum)(internalformat), (C.GLint)(x), (C.GLint)(y), (C.GLsizei)(width))
}
func CopyConvolutionFilter2DEXT(target uint32, internalformat uint32, x int32, y int32, width int32, height int32) {
  C.glowCopyConvolutionFilter2DEXT(pCopyConvolutionFilter2DEXT, (C.GLenum)(target), (C.GLenum)(internalformat), (C.GLint)(x), (C.GLint)(y), (C.GLsizei)(width), (C.GLsizei)(height))
}
// perform a raw data copy between two images
func CopyImageSubData(srcName uint32, srcTarget uint32, srcLevel int32, srcX int32, srcY int32, srcZ int32, dstName uint32, dstTarget uint32, dstLevel int32, dstX int32, dstY int32, dstZ int32, srcWidth int32, srcHeight int32, srcDepth int32) {
  C.glowCopyImageSubData(pCopyImageSubData, (C.GLuint)(srcName), (C.GLenum)(srcTarget), (C.GLint)(srcLevel), (C.GLint)(srcX), (C.GLint)(srcY), (C.GLint)(srcZ), (C.GLuint)(dstName), (C.GLenum)(dstTarget), (C.GLint)(dstLevel), (C.GLint)(dstX), (C.GLint)(dstY), (C.GLint)(dstZ), (C.GLsizei)(srcWidth), (C.GLsizei)(srcHeight), (C.GLsizei)(srcDepth))
}
func CopyImageSubDataNV(srcName uint32, srcTarget uint32, srcLevel int32, srcX int32, srcY int32, srcZ int32, dstName uint32, dstTarget uint32, dstLevel int32, dstX int32, dstY int32, dstZ int32, width int32, height int32, depth int32) {
  C.glowCopyImageSubDataNV(pCopyImageSubDataNV, (C.GLuint)(srcName), (C.GLenum)(srcTarget), (C.GLint)(srcLevel), (C.GLint)(srcX), (C.GLint)(srcY), (C.GLint)(srcZ), (C.GLuint)(dstName), (C.GLenum)(dstTarget), (C.GLint)(dstLevel), (C.GLint)(dstX), (C.GLint)(dstY), (C.GLint)(dstZ), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLsizei)(depth))
}
func CopyMultiTexImage1DEXT(texunit uint32, target uint32, level int32, internalformat uint32, x int32, y int32, width int32, border int32) {
  C.glowCopyMultiTexImage1DEXT(pCopyMultiTexImage1DEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLint)(level), (C.GLenum)(internalformat), (C.GLint)(x), (C.GLint)(y), (C.GLsizei)(width), (C.GLint)(border))
}
func CopyMultiTexImage2DEXT(texunit uint32, target uint32, level int32, internalformat uint32, x int32, y int32, width int32, height int32, border int32) {
  C.glowCopyMultiTexImage2DEXT(pCopyMultiTexImage2DEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLint)(level), (C.GLenum)(internalformat), (C.GLint)(x), (C.GLint)(y), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLint)(border))
}
func CopyMultiTexSubImage1DEXT(texunit uint32, target uint32, level int32, xoffset int32, x int32, y int32, width int32) {
  C.glowCopyMultiTexSubImage1DEXT(pCopyMultiTexSubImage1DEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLint)(x), (C.GLint)(y), (C.GLsizei)(width))
}
func CopyMultiTexSubImage2DEXT(texunit uint32, target uint32, level int32, xoffset int32, yoffset int32, x int32, y int32, width int32, height int32) {
  C.glowCopyMultiTexSubImage2DEXT(pCopyMultiTexSubImage2DEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLint)(yoffset), (C.GLint)(x), (C.GLint)(y), (C.GLsizei)(width), (C.GLsizei)(height))
}
func CopyMultiTexSubImage3DEXT(texunit uint32, target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, x int32, y int32, width int32, height int32) {
  C.glowCopyMultiTexSubImage3DEXT(pCopyMultiTexSubImage3DEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLint)(yoffset), (C.GLint)(zoffset), (C.GLint)(x), (C.GLint)(y), (C.GLsizei)(width), (C.GLsizei)(height))
}
func CopyPathNV(resultPath uint32, srcPath uint32) {
  C.glowCopyPathNV(pCopyPathNV, (C.GLuint)(resultPath), (C.GLuint)(srcPath))
}
// copy pixels into a 1D texture image
func CopyTexImage1D(target uint32, level int32, internalformat uint32, x int32, y int32, width int32, border int32) {
  C.glowCopyTexImage1D(pCopyTexImage1D, (C.GLenum)(target), (C.GLint)(level), (C.GLenum)(internalformat), (C.GLint)(x), (C.GLint)(y), (C.GLsizei)(width), (C.GLint)(border))
}
func CopyTexImage1DEXT(target uint32, level int32, internalformat uint32, x int32, y int32, width int32, border int32) {
  C.glowCopyTexImage1DEXT(pCopyTexImage1DEXT, (C.GLenum)(target), (C.GLint)(level), (C.GLenum)(internalformat), (C.GLint)(x), (C.GLint)(y), (C.GLsizei)(width), (C.GLint)(border))
}
// copy pixels into a 2D texture image
func CopyTexImage2D(target uint32, level int32, internalformat uint32, x int32, y int32, width int32, height int32, border int32) {
  C.glowCopyTexImage2D(pCopyTexImage2D, (C.GLenum)(target), (C.GLint)(level), (C.GLenum)(internalformat), (C.GLint)(x), (C.GLint)(y), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLint)(border))
}
func CopyTexImage2DEXT(target uint32, level int32, internalformat uint32, x int32, y int32, width int32, height int32, border int32) {
  C.glowCopyTexImage2DEXT(pCopyTexImage2DEXT, (C.GLenum)(target), (C.GLint)(level), (C.GLenum)(internalformat), (C.GLint)(x), (C.GLint)(y), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLint)(border))
}
// copy a one-dimensional texture subimage
func CopyTexSubImage1D(target uint32, level int32, xoffset int32, x int32, y int32, width int32) {
  C.glowCopyTexSubImage1D(pCopyTexSubImage1D, (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLint)(x), (C.GLint)(y), (C.GLsizei)(width))
}
func CopyTexSubImage1DEXT(target uint32, level int32, xoffset int32, x int32, y int32, width int32) {
  C.glowCopyTexSubImage1DEXT(pCopyTexSubImage1DEXT, (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLint)(x), (C.GLint)(y), (C.GLsizei)(width))
}
// copy a two-dimensional texture subimage
func CopyTexSubImage2D(target uint32, level int32, xoffset int32, yoffset int32, x int32, y int32, width int32, height int32) {
  C.glowCopyTexSubImage2D(pCopyTexSubImage2D, (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLint)(yoffset), (C.GLint)(x), (C.GLint)(y), (C.GLsizei)(width), (C.GLsizei)(height))
}
func CopyTexSubImage2DEXT(target uint32, level int32, xoffset int32, yoffset int32, x int32, y int32, width int32, height int32) {
  C.glowCopyTexSubImage2DEXT(pCopyTexSubImage2DEXT, (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLint)(yoffset), (C.GLint)(x), (C.GLint)(y), (C.GLsizei)(width), (C.GLsizei)(height))
}
// copy a three-dimensional texture subimage
func CopyTexSubImage3D(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, x int32, y int32, width int32, height int32) {
  C.glowCopyTexSubImage3D(pCopyTexSubImage3D, (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLint)(yoffset), (C.GLint)(zoffset), (C.GLint)(x), (C.GLint)(y), (C.GLsizei)(width), (C.GLsizei)(height))
}
func CopyTexSubImage3DEXT(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, x int32, y int32, width int32, height int32) {
  C.glowCopyTexSubImage3DEXT(pCopyTexSubImage3DEXT, (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLint)(yoffset), (C.GLint)(zoffset), (C.GLint)(x), (C.GLint)(y), (C.GLsizei)(width), (C.GLsizei)(height))
}
func CopyTextureImage1DEXT(texture uint32, target uint32, level int32, internalformat uint32, x int32, y int32, width int32, border int32) {
  C.glowCopyTextureImage1DEXT(pCopyTextureImage1DEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLint)(level), (C.GLenum)(internalformat), (C.GLint)(x), (C.GLint)(y), (C.GLsizei)(width), (C.GLint)(border))
}
func CopyTextureImage2DEXT(texture uint32, target uint32, level int32, internalformat uint32, x int32, y int32, width int32, height int32, border int32) {
  C.glowCopyTextureImage2DEXT(pCopyTextureImage2DEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLint)(level), (C.GLenum)(internalformat), (C.GLint)(x), (C.GLint)(y), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLint)(border))
}
func CopyTextureSubImage1DEXT(texture uint32, target uint32, level int32, xoffset int32, x int32, y int32, width int32) {
  C.glowCopyTextureSubImage1DEXT(pCopyTextureSubImage1DEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLint)(x), (C.GLint)(y), (C.GLsizei)(width))
}
func CopyTextureSubImage2DEXT(texture uint32, target uint32, level int32, xoffset int32, yoffset int32, x int32, y int32, width int32, height int32) {
  C.glowCopyTextureSubImage2DEXT(pCopyTextureSubImage2DEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLint)(yoffset), (C.GLint)(x), (C.GLint)(y), (C.GLsizei)(width), (C.GLsizei)(height))
}
func CopyTextureSubImage3DEXT(texture uint32, target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, x int32, y int32, width int32, height int32) {
  C.glowCopyTextureSubImage3DEXT(pCopyTextureSubImage3DEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLint)(yoffset), (C.GLint)(zoffset), (C.GLint)(x), (C.GLint)(y), (C.GLsizei)(width), (C.GLsizei)(height))
}
func CoverFillPathInstancedNV(numPaths int32, pathNameType uint32, paths unsafe.Pointer, pathBase uint32, coverMode uint32, transformType uint32, transformValues *float32) {
  C.glowCoverFillPathInstancedNV(pCoverFillPathInstancedNV, (C.GLsizei)(numPaths), (C.GLenum)(pathNameType), paths, (C.GLuint)(pathBase), (C.GLenum)(coverMode), (C.GLenum)(transformType), (*C.GLfloat)(unsafe.Pointer(transformValues)))
}
func CoverFillPathNV(path uint32, coverMode uint32) {
  C.glowCoverFillPathNV(pCoverFillPathNV, (C.GLuint)(path), (C.GLenum)(coverMode))
}
func CoverStrokePathInstancedNV(numPaths int32, pathNameType uint32, paths unsafe.Pointer, pathBase uint32, coverMode uint32, transformType uint32, transformValues *float32) {
  C.glowCoverStrokePathInstancedNV(pCoverStrokePathInstancedNV, (C.GLsizei)(numPaths), (C.GLenum)(pathNameType), paths, (C.GLuint)(pathBase), (C.GLenum)(coverMode), (C.GLenum)(transformType), (*C.GLfloat)(unsafe.Pointer(transformValues)))
}
func CoverStrokePathNV(path uint32, coverMode uint32) {
  C.glowCoverStrokePathNV(pCoverStrokePathNV, (C.GLuint)(path), (C.GLenum)(coverMode))
}
func CreatePerfQueryINTEL(queryId uint32, queryHandle *uint32) {
  C.glowCreatePerfQueryINTEL(pCreatePerfQueryINTEL, (C.GLuint)(queryId), (*C.GLuint)(unsafe.Pointer(queryHandle)))
}
// Creates a program object
func CreateProgram() uint32 {
  ret := C.glowCreateProgram(pCreateProgram)
  return (uint32)(ret)
}
func CreateProgramObjectARB() uintptr {
  ret := C.glowCreateProgramObjectARB(pCreateProgramObjectARB)
  return (uintptr)(ret)
}
// Creates a shader object
func CreateShader(xtype uint32) uint32 {
  ret := C.glowCreateShader(pCreateShader, (C.GLenum)(xtype))
  return (uint32)(ret)
}
func CreateShaderObjectARB(shaderType uint32) uintptr {
  ret := C.glowCreateShaderObjectARB(pCreateShaderObjectARB, (C.GLenum)(shaderType))
  return (uintptr)(ret)
}
func CreateShaderProgramEXT(xtype uint32, xstring *int8) uint32 {
  ret := C.glowCreateShaderProgramEXT(pCreateShaderProgramEXT, (C.GLenum)(xtype), (*C.GLchar)(unsafe.Pointer(xstring)))
  return (uint32)(ret)
}
// create a stand-alone program from an array of null-terminated source code strings
func CreateShaderProgramv(xtype uint32, count int32, strings **int8) uint32 {
  ret := C.glowCreateShaderProgramv(pCreateShaderProgramv, (C.GLenum)(xtype), (C.GLsizei)(count), (**C.GLchar)(unsafe.Pointer(strings)))
  return (uint32)(ret)
}
func CreateShaderProgramvEXT(xtype uint32, count int32, strings **int8) uint32 {
  ret := C.glowCreateShaderProgramvEXT(pCreateShaderProgramvEXT, (C.GLenum)(xtype), (C.GLsizei)(count), (**C.GLchar)(unsafe.Pointer(strings)))
  return (uint32)(ret)
}
func CreateSyncFromCLeventARB(context *C.struct__cl_context, event *C.struct__cl_event, flags uint32) unsafe.Pointer {
  ret := C.glowCreateSyncFromCLeventARB(pCreateSyncFromCLeventARB, (*C.struct__cl_context)(unsafe.Pointer(context)), (*C.struct__cl_event)(unsafe.Pointer(event)), (C.GLbitfield)(flags))
  return (unsafe.Pointer)(ret)
}
// specify whether front- or back-facing facets can be culled
func CullFace(mode uint32) {
  C.glowCullFace(pCullFace, (C.GLenum)(mode))
}
func CullParameterdvEXT(pname uint32, params *float64) {
  C.glowCullParameterdvEXT(pCullParameterdvEXT, (C.GLenum)(pname), (*C.GLdouble)(unsafe.Pointer(params)))
}
func CullParameterfvEXT(pname uint32, params *float32) {
  C.glowCullParameterfvEXT(pCullParameterfvEXT, (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func CurrentPaletteMatrixARB(index int32) {
  C.glowCurrentPaletteMatrixARB(pCurrentPaletteMatrixARB, (C.GLint)(index))
}
// specify a callback to receive debugging messages from the GL
func DebugMessageCallback(callback DebugProc, userParam unsafe.Pointer) {
  userDebugCallback = callback
  C.glowDebugMessageCallback(pDebugMessageCallback, (C.GLDEBUGPROC)(unsafe.Pointer(&callback)), userParam)
}
func DebugMessageCallbackAMD(callback C.GLDEBUGPROCAMD, userParam unsafe.Pointer) {
  C.glowDebugMessageCallbackAMD(pDebugMessageCallbackAMD, (C.GLDEBUGPROCAMD)(callback), userParam)
}
func DebugMessageCallbackARB(callback DebugProc, userParam unsafe.Pointer) {
  userDebugCallback = callback
  C.glowDebugMessageCallbackARB(pDebugMessageCallbackARB, (C.GLDEBUGPROCARB)(unsafe.Pointer(&callback)), userParam)
}
func DebugMessageCallbackKHR(callback DebugProc, userParam unsafe.Pointer) {
  userDebugCallback = callback
  C.glowDebugMessageCallbackKHR(pDebugMessageCallbackKHR, (C.GLDEBUGPROCKHR)(unsafe.Pointer(&callback)), userParam)
}
// control the reporting of debug messages in a debug context
func DebugMessageControl(source uint32, xtype uint32, severity uint32, count int32, ids *uint32, enabled bool) {
  C.glowDebugMessageControl(pDebugMessageControl, (C.GLenum)(source), (C.GLenum)(xtype), (C.GLenum)(severity), (C.GLsizei)(count), (*C.GLuint)(unsafe.Pointer(ids)), (C.GLboolean)(boolToInt(enabled)))
}
func DebugMessageControlARB(source uint32, xtype uint32, severity uint32, count int32, ids *uint32, enabled bool) {
  C.glowDebugMessageControlARB(pDebugMessageControlARB, (C.GLenum)(source), (C.GLenum)(xtype), (C.GLenum)(severity), (C.GLsizei)(count), (*C.GLuint)(unsafe.Pointer(ids)), (C.GLboolean)(boolToInt(enabled)))
}
func DebugMessageControlKHR(source uint32, xtype uint32, severity uint32, count int32, ids *uint32, enabled bool) {
  C.glowDebugMessageControlKHR(pDebugMessageControlKHR, (C.GLenum)(source), (C.GLenum)(xtype), (C.GLenum)(severity), (C.GLsizei)(count), (*C.GLuint)(unsafe.Pointer(ids)), (C.GLboolean)(boolToInt(enabled)))
}
func DebugMessageEnableAMD(category uint32, severity uint32, count int32, ids *uint32, enabled bool) {
  C.glowDebugMessageEnableAMD(pDebugMessageEnableAMD, (C.GLenum)(category), (C.GLenum)(severity), (C.GLsizei)(count), (*C.GLuint)(unsafe.Pointer(ids)), (C.GLboolean)(boolToInt(enabled)))
}
// inject an application-supplied message into the debug message queue
func DebugMessageInsert(source uint32, xtype uint32, id uint32, severity uint32, length int32, buf *int8) {
  C.glowDebugMessageInsert(pDebugMessageInsert, (C.GLenum)(source), (C.GLenum)(xtype), (C.GLuint)(id), (C.GLenum)(severity), (C.GLsizei)(length), (*C.GLchar)(unsafe.Pointer(buf)))
}
func DebugMessageInsertAMD(category uint32, severity uint32, id uint32, length int32, buf *int8) {
  C.glowDebugMessageInsertAMD(pDebugMessageInsertAMD, (C.GLenum)(category), (C.GLenum)(severity), (C.GLuint)(id), (C.GLsizei)(length), (*C.GLchar)(unsafe.Pointer(buf)))
}
func DebugMessageInsertARB(source uint32, xtype uint32, id uint32, severity uint32, length int32, buf *int8) {
  C.glowDebugMessageInsertARB(pDebugMessageInsertARB, (C.GLenum)(source), (C.GLenum)(xtype), (C.GLuint)(id), (C.GLenum)(severity), (C.GLsizei)(length), (*C.GLchar)(unsafe.Pointer(buf)))
}
func DebugMessageInsertKHR(source uint32, xtype uint32, id uint32, severity uint32, length int32, buf *int8) {
  C.glowDebugMessageInsertKHR(pDebugMessageInsertKHR, (C.GLenum)(source), (C.GLenum)(xtype), (C.GLuint)(id), (C.GLenum)(severity), (C.GLsizei)(length), (*C.GLchar)(unsafe.Pointer(buf)))
}
func DeformSGIX(mask uint32) {
  C.glowDeformSGIX(pDeformSGIX, (C.GLbitfield)(mask))
}
func DeformationMap3dSGIX(target uint32, u1 float64, u2 float64, ustride int32, uorder int32, v1 float64, v2 float64, vstride int32, vorder int32, w1 float64, w2 float64, wstride int32, worder int32, points *float64) {
  C.glowDeformationMap3dSGIX(pDeformationMap3dSGIX, (C.GLenum)(target), (C.GLdouble)(u1), (C.GLdouble)(u2), (C.GLint)(ustride), (C.GLint)(uorder), (C.GLdouble)(v1), (C.GLdouble)(v2), (C.GLint)(vstride), (C.GLint)(vorder), (C.GLdouble)(w1), (C.GLdouble)(w2), (C.GLint)(wstride), (C.GLint)(worder), (*C.GLdouble)(unsafe.Pointer(points)))
}
func DeformationMap3fSGIX(target uint32, u1 float32, u2 float32, ustride int32, uorder int32, v1 float32, v2 float32, vstride int32, vorder int32, w1 float32, w2 float32, wstride int32, worder int32, points *float32) {
  C.glowDeformationMap3fSGIX(pDeformationMap3fSGIX, (C.GLenum)(target), (C.GLfloat)(u1), (C.GLfloat)(u2), (C.GLint)(ustride), (C.GLint)(uorder), (C.GLfloat)(v1), (C.GLfloat)(v2), (C.GLint)(vstride), (C.GLint)(vorder), (C.GLfloat)(w1), (C.GLfloat)(w2), (C.GLint)(wstride), (C.GLint)(worder), (*C.GLfloat)(unsafe.Pointer(points)))
}
func DeleteAsyncMarkersSGIX(marker uint32, xrange int32) {
  C.glowDeleteAsyncMarkersSGIX(pDeleteAsyncMarkersSGIX, (C.GLuint)(marker), (C.GLsizei)(xrange))
}
// delete named buffer objects
func DeleteBuffers(n int32, buffers *uint32) {
  C.glowDeleteBuffers(pDeleteBuffers, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(buffers)))
}
func DeleteBuffersARB(n int32, buffers *uint32) {
  C.glowDeleteBuffersARB(pDeleteBuffersARB, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(buffers)))
}
func DeleteFencesAPPLE(n int32, fences *uint32) {
  C.glowDeleteFencesAPPLE(pDeleteFencesAPPLE, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(fences)))
}
func DeleteFencesNV(n int32, fences *uint32) {
  C.glowDeleteFencesNV(pDeleteFencesNV, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(fences)))
}
func DeleteFragmentShaderATI(id uint32) {
  C.glowDeleteFragmentShaderATI(pDeleteFragmentShaderATI, (C.GLuint)(id))
}
// delete framebuffer objects
func DeleteFramebuffers(n int32, framebuffers *uint32) {
  C.glowDeleteFramebuffers(pDeleteFramebuffers, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(framebuffers)))
}
func DeleteFramebuffersEXT(n int32, framebuffers *uint32) {
  C.glowDeleteFramebuffersEXT(pDeleteFramebuffersEXT, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(framebuffers)))
}
func DeleteNamedStringARB(namelen int32, name *int8) {
  C.glowDeleteNamedStringARB(pDeleteNamedStringARB, (C.GLint)(namelen), (*C.GLchar)(unsafe.Pointer(name)))
}
func DeleteNamesAMD(identifier uint32, num uint32, names *uint32) {
  C.glowDeleteNamesAMD(pDeleteNamesAMD, (C.GLenum)(identifier), (C.GLuint)(num), (*C.GLuint)(unsafe.Pointer(names)))
}
func DeleteObjectARB(obj uintptr) {
  C.glowDeleteObjectARB(pDeleteObjectARB, (C.GLhandleARB)(obj))
}
func DeleteOcclusionQueriesNV(n int32, ids *uint32) {
  C.glowDeleteOcclusionQueriesNV(pDeleteOcclusionQueriesNV, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(ids)))
}
func DeletePathsNV(path uint32, xrange int32) {
  C.glowDeletePathsNV(pDeletePathsNV, (C.GLuint)(path), (C.GLsizei)(xrange))
}
func DeletePerfMonitorsAMD(n int32, monitors *uint32) {
  C.glowDeletePerfMonitorsAMD(pDeletePerfMonitorsAMD, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(monitors)))
}
func DeletePerfQueryINTEL(queryHandle uint32) {
  C.glowDeletePerfQueryINTEL(pDeletePerfQueryINTEL, (C.GLuint)(queryHandle))
}
// Deletes a program object
func DeleteProgram(program uint32) {
  C.glowDeleteProgram(pDeleteProgram, (C.GLuint)(program))
}
// delete program pipeline objects
func DeleteProgramPipelines(n int32, pipelines *uint32) {
  C.glowDeleteProgramPipelines(pDeleteProgramPipelines, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(pipelines)))
}
func DeleteProgramPipelinesEXT(n int32, pipelines *uint32) {
  C.glowDeleteProgramPipelinesEXT(pDeleteProgramPipelinesEXT, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(pipelines)))
}
func DeleteProgramsARB(n int32, programs *uint32) {
  C.glowDeleteProgramsARB(pDeleteProgramsARB, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(programs)))
}
func DeleteProgramsNV(n int32, programs *uint32) {
  C.glowDeleteProgramsNV(pDeleteProgramsNV, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(programs)))
}
// delete named query objects
func DeleteQueries(n int32, ids *uint32) {
  C.glowDeleteQueries(pDeleteQueries, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(ids)))
}
func DeleteQueriesARB(n int32, ids *uint32) {
  C.glowDeleteQueriesARB(pDeleteQueriesARB, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(ids)))
}
// delete renderbuffer objects
func DeleteRenderbuffers(n int32, renderbuffers *uint32) {
  C.glowDeleteRenderbuffers(pDeleteRenderbuffers, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(renderbuffers)))
}
func DeleteRenderbuffersEXT(n int32, renderbuffers *uint32) {
  C.glowDeleteRenderbuffersEXT(pDeleteRenderbuffersEXT, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(renderbuffers)))
}
// delete named sampler objects
func DeleteSamplers(count int32, samplers *uint32) {
  C.glowDeleteSamplers(pDeleteSamplers, (C.GLsizei)(count), (*C.GLuint)(unsafe.Pointer(samplers)))
}
// Deletes a shader object
func DeleteShader(shader uint32) {
  C.glowDeleteShader(pDeleteShader, (C.GLuint)(shader))
}
// delete a sync object
func DeleteSync(sync unsafe.Pointer) {
  C.glowDeleteSync(pDeleteSync, (C.GLsync)(sync))
}
// delete named textures
func DeleteTextures(n int32, textures *uint32) {
  C.glowDeleteTextures(pDeleteTextures, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(textures)))
}
func DeleteTexturesEXT(n int32, textures *uint32) {
  C.glowDeleteTexturesEXT(pDeleteTexturesEXT, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(textures)))
}
// delete transform feedback objects
func DeleteTransformFeedbacks(n int32, ids *uint32) {
  C.glowDeleteTransformFeedbacks(pDeleteTransformFeedbacks, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(ids)))
}
func DeleteTransformFeedbacksNV(n int32, ids *uint32) {
  C.glowDeleteTransformFeedbacksNV(pDeleteTransformFeedbacksNV, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(ids)))
}
// delete vertex array objects
func DeleteVertexArrays(n int32, arrays *uint32) {
  C.glowDeleteVertexArrays(pDeleteVertexArrays, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(arrays)))
}
func DeleteVertexArraysAPPLE(n int32, arrays *uint32) {
  C.glowDeleteVertexArraysAPPLE(pDeleteVertexArraysAPPLE, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(arrays)))
}
func DeleteVertexShaderEXT(id uint32) {
  C.glowDeleteVertexShaderEXT(pDeleteVertexShaderEXT, (C.GLuint)(id))
}
func DepthBoundsEXT(zmin float64, zmax float64) {
  C.glowDepthBoundsEXT(pDepthBoundsEXT, (C.GLclampd)(zmin), (C.GLclampd)(zmax))
}
func DepthBoundsdNV(zmin float64, zmax float64) {
  C.glowDepthBoundsdNV(pDepthBoundsdNV, (C.GLdouble)(zmin), (C.GLdouble)(zmax))
}
// specify the value used for depth buffer comparisons
func DepthFunc(xfunc uint32) {
  C.glowDepthFunc(pDepthFunc, (C.GLenum)(xfunc))
}
// enable or disable writing into the depth buffer
func DepthMask(flag bool) {
  C.glowDepthMask(pDepthMask, (C.GLboolean)(boolToInt(flag)))
}
// specify mapping of depth values from normalized device coordinates to window coordinates
func DepthRange(near float64, far float64) {
  C.glowDepthRange(pDepthRange, (C.GLdouble)(near), (C.GLdouble)(far))
}
func DepthRangeArrayv(first uint32, count int32, v *float64) {
  C.glowDepthRangeArrayv(pDepthRangeArrayv, (C.GLuint)(first), (C.GLsizei)(count), (*C.GLdouble)(unsafe.Pointer(v)))
}
// specify mapping of depth values from normalized device coordinates to window coordinates for a specified viewport
func DepthRangeIndexed(index uint32, n float64, f float64) {
  C.glowDepthRangeIndexed(pDepthRangeIndexed, (C.GLuint)(index), (C.GLdouble)(n), (C.GLdouble)(f))
}
func DepthRangedNV(zNear float64, zFar float64) {
  C.glowDepthRangedNV(pDepthRangedNV, (C.GLdouble)(zNear), (C.GLdouble)(zFar))
}
func DepthRangef(n float32, f float32) {
  C.glowDepthRangef(pDepthRangef, (C.GLfloat)(n), (C.GLfloat)(f))
}
func DepthRangefOES(n float32, f float32) {
  C.glowDepthRangefOES(pDepthRangefOES, (C.GLclampf)(n), (C.GLclampf)(f))
}
func DepthRangexOES(n int32, f int32) {
  C.glowDepthRangexOES(pDepthRangexOES, (C.GLfixed)(n), (C.GLfixed)(f))
}
func DetachObjectARB(containerObj uintptr, attachedObj uintptr) {
  C.glowDetachObjectARB(pDetachObjectARB, (C.GLhandleARB)(containerObj), (C.GLhandleARB)(attachedObj))
}
// Detaches a shader object from a program object to which it is attached
func DetachShader(program uint32, shader uint32) {
  C.glowDetachShader(pDetachShader, (C.GLuint)(program), (C.GLuint)(shader))
}
func DetailTexFuncSGIS(target uint32, n int32, points *float32) {
  C.glowDetailTexFuncSGIS(pDetailTexFuncSGIS, (C.GLenum)(target), (C.GLsizei)(n), (*C.GLfloat)(unsafe.Pointer(points)))
}
func Disable(cap uint32) {
  C.glowDisable(pDisable, (C.GLenum)(cap))
}
func DisableClientStateIndexedEXT(array uint32, index uint32) {
  C.glowDisableClientStateIndexedEXT(pDisableClientStateIndexedEXT, (C.GLenum)(array), (C.GLuint)(index))
}
func DisableClientStateiEXT(array uint32, index uint32) {
  C.glowDisableClientStateiEXT(pDisableClientStateiEXT, (C.GLenum)(array), (C.GLuint)(index))
}
func DisableIndexedEXT(target uint32, index uint32) {
  C.glowDisableIndexedEXT(pDisableIndexedEXT, (C.GLenum)(target), (C.GLuint)(index))
}
func DisableVariantClientStateEXT(id uint32) {
  C.glowDisableVariantClientStateEXT(pDisableVariantClientStateEXT, (C.GLuint)(id))
}
func DisableVertexArrayAttribEXT(vaobj uint32, index uint32) {
  C.glowDisableVertexArrayAttribEXT(pDisableVertexArrayAttribEXT, (C.GLuint)(vaobj), (C.GLuint)(index))
}
func DisableVertexArrayEXT(vaobj uint32, array uint32) {
  C.glowDisableVertexArrayEXT(pDisableVertexArrayEXT, (C.GLuint)(vaobj), (C.GLenum)(array))
}
func DisableVertexAttribAPPLE(index uint32, pname uint32) {
  C.glowDisableVertexAttribAPPLE(pDisableVertexAttribAPPLE, (C.GLuint)(index), (C.GLenum)(pname))
}
// Enable or disable a generic vertex attribute array
func DisableVertexAttribArray(index uint32) {
  C.glowDisableVertexAttribArray(pDisableVertexAttribArray, (C.GLuint)(index))
}
func DisableVertexAttribArrayARB(index uint32) {
  C.glowDisableVertexAttribArrayARB(pDisableVertexAttribArrayARB, (C.GLuint)(index))
}
func Disablei(target uint32, index uint32) {
  C.glowDisablei(pDisablei, (C.GLenum)(target), (C.GLuint)(index))
}
// launch one or more compute work groups
func DispatchCompute(num_groups_x uint32, num_groups_y uint32, num_groups_z uint32) {
  C.glowDispatchCompute(pDispatchCompute, (C.GLuint)(num_groups_x), (C.GLuint)(num_groups_y), (C.GLuint)(num_groups_z))
}
func DispatchComputeGroupSizeARB(num_groups_x uint32, num_groups_y uint32, num_groups_z uint32, group_size_x uint32, group_size_y uint32, group_size_z uint32) {
  C.glowDispatchComputeGroupSizeARB(pDispatchComputeGroupSizeARB, (C.GLuint)(num_groups_x), (C.GLuint)(num_groups_y), (C.GLuint)(num_groups_z), (C.GLuint)(group_size_x), (C.GLuint)(group_size_y), (C.GLuint)(group_size_z))
}
// launch one or more compute work groups using parameters stored in a buffer
func DispatchComputeIndirect(indirect int) {
  C.glowDispatchComputeIndirect(pDispatchComputeIndirect, (C.GLintptr)(indirect))
}
// render primitives from array data
func DrawArrays(mode uint32, first int32, count int32) {
  C.glowDrawArrays(pDrawArrays, (C.GLenum)(mode), (C.GLint)(first), (C.GLsizei)(count))
}
func DrawArraysEXT(mode uint32, first int32, count int32) {
  C.glowDrawArraysEXT(pDrawArraysEXT, (C.GLenum)(mode), (C.GLint)(first), (C.GLsizei)(count))
}
// render primitives from array data, taking parameters from memory
func DrawArraysIndirect(mode uint32, indirect unsafe.Pointer) {
  C.glowDrawArraysIndirect(pDrawArraysIndirect, (C.GLenum)(mode), indirect)
}
// draw multiple instances of a range of elements
func DrawArraysInstanced(mode uint32, first int32, count int32, instancecount int32) {
  C.glowDrawArraysInstanced(pDrawArraysInstanced, (C.GLenum)(mode), (C.GLint)(first), (C.GLsizei)(count), (C.GLsizei)(instancecount))
}
func DrawArraysInstancedARB(mode uint32, first int32, count int32, primcount int32) {
  C.glowDrawArraysInstancedARB(pDrawArraysInstancedARB, (C.GLenum)(mode), (C.GLint)(first), (C.GLsizei)(count), (C.GLsizei)(primcount))
}
// draw multiple instances of a range of elements with offset applied to instanced attributes
func DrawArraysInstancedBaseInstance(mode uint32, first int32, count int32, instancecount int32, baseinstance uint32) {
  C.glowDrawArraysInstancedBaseInstance(pDrawArraysInstancedBaseInstance, (C.GLenum)(mode), (C.GLint)(first), (C.GLsizei)(count), (C.GLsizei)(instancecount), (C.GLuint)(baseinstance))
}
func DrawArraysInstancedEXT(mode uint32, start int32, count int32, primcount int32) {
  C.glowDrawArraysInstancedEXT(pDrawArraysInstancedEXT, (C.GLenum)(mode), (C.GLint)(start), (C.GLsizei)(count), (C.GLsizei)(primcount))
}
// specify which color buffers are to be drawn into
func DrawBuffer(mode uint32) {
  C.glowDrawBuffer(pDrawBuffer, (C.GLenum)(mode))
}
// Specifies a list of color buffers to be drawn into
func DrawBuffers(n int32, bufs *uint32) {
  C.glowDrawBuffers(pDrawBuffers, (C.GLsizei)(n), (*C.GLenum)(unsafe.Pointer(bufs)))
}
func DrawBuffersARB(n int32, bufs *uint32) {
  C.glowDrawBuffersARB(pDrawBuffersARB, (C.GLsizei)(n), (*C.GLenum)(unsafe.Pointer(bufs)))
}
func DrawBuffersATI(n int32, bufs *uint32) {
  C.glowDrawBuffersATI(pDrawBuffersATI, (C.GLsizei)(n), (*C.GLenum)(unsafe.Pointer(bufs)))
}
func DrawElementArrayAPPLE(mode uint32, first int32, count int32) {
  C.glowDrawElementArrayAPPLE(pDrawElementArrayAPPLE, (C.GLenum)(mode), (C.GLint)(first), (C.GLsizei)(count))
}
func DrawElementArrayATI(mode uint32, count int32) {
  C.glowDrawElementArrayATI(pDrawElementArrayATI, (C.GLenum)(mode), (C.GLsizei)(count))
}
// render primitives from array data
func DrawElements(mode uint32, count int32, xtype uint32, indices unsafe.Pointer) {
  C.glowDrawElements(pDrawElements, (C.GLenum)(mode), (C.GLsizei)(count), (C.GLenum)(xtype), indices)
}
// render primitives from array data with a per-element offset
func DrawElementsBaseVertex(mode uint32, count int32, xtype uint32, indices unsafe.Pointer, basevertex int32) {
  C.glowDrawElementsBaseVertex(pDrawElementsBaseVertex, (C.GLenum)(mode), (C.GLsizei)(count), (C.GLenum)(xtype), indices, (C.GLint)(basevertex))
}
// render indexed primitives from array data, taking parameters from memory
func DrawElementsIndirect(mode uint32, xtype uint32, indirect unsafe.Pointer) {
  C.glowDrawElementsIndirect(pDrawElementsIndirect, (C.GLenum)(mode), (C.GLenum)(xtype), indirect)
}
// draw multiple instances of a set of elements
func DrawElementsInstanced(mode uint32, count int32, xtype uint32, indices unsafe.Pointer, instancecount int32) {
  C.glowDrawElementsInstanced(pDrawElementsInstanced, (C.GLenum)(mode), (C.GLsizei)(count), (C.GLenum)(xtype), indices, (C.GLsizei)(instancecount))
}
func DrawElementsInstancedARB(mode uint32, count int32, xtype uint32, indices unsafe.Pointer, primcount int32) {
  C.glowDrawElementsInstancedARB(pDrawElementsInstancedARB, (C.GLenum)(mode), (C.GLsizei)(count), (C.GLenum)(xtype), indices, (C.GLsizei)(primcount))
}
// draw multiple instances of a set of elements with offset applied to instanced attributes
func DrawElementsInstancedBaseInstance(mode uint32, count int32, xtype uint32, indices unsafe.Pointer, instancecount int32, baseinstance uint32) {
  C.glowDrawElementsInstancedBaseInstance(pDrawElementsInstancedBaseInstance, (C.GLenum)(mode), (C.GLsizei)(count), (C.GLenum)(xtype), indices, (C.GLsizei)(instancecount), (C.GLuint)(baseinstance))
}
// render multiple instances of a set of primitives from array data with a per-element offset
func DrawElementsInstancedBaseVertex(mode uint32, count int32, xtype uint32, indices unsafe.Pointer, instancecount int32, basevertex int32) {
  C.glowDrawElementsInstancedBaseVertex(pDrawElementsInstancedBaseVertex, (C.GLenum)(mode), (C.GLsizei)(count), (C.GLenum)(xtype), indices, (C.GLsizei)(instancecount), (C.GLint)(basevertex))
}
// render multiple instances of a set of primitives from array data with a per-element offset
func DrawElementsInstancedBaseVertexBaseInstance(mode uint32, count int32, xtype uint32, indices unsafe.Pointer, instancecount int32, basevertex int32, baseinstance uint32) {
  C.glowDrawElementsInstancedBaseVertexBaseInstance(pDrawElementsInstancedBaseVertexBaseInstance, (C.GLenum)(mode), (C.GLsizei)(count), (C.GLenum)(xtype), indices, (C.GLsizei)(instancecount), (C.GLint)(basevertex), (C.GLuint)(baseinstance))
}
func DrawElementsInstancedEXT(mode uint32, count int32, xtype uint32, indices unsafe.Pointer, primcount int32) {
  C.glowDrawElementsInstancedEXT(pDrawElementsInstancedEXT, (C.GLenum)(mode), (C.GLsizei)(count), (C.GLenum)(xtype), indices, (C.GLsizei)(primcount))
}
func DrawMeshArraysSUN(mode uint32, first int32, count int32, width int32) {
  C.glowDrawMeshArraysSUN(pDrawMeshArraysSUN, (C.GLenum)(mode), (C.GLint)(first), (C.GLsizei)(count), (C.GLsizei)(width))
}
func DrawRangeElementArrayAPPLE(mode uint32, start uint32, end uint32, first int32, count int32) {
  C.glowDrawRangeElementArrayAPPLE(pDrawRangeElementArrayAPPLE, (C.GLenum)(mode), (C.GLuint)(start), (C.GLuint)(end), (C.GLint)(first), (C.GLsizei)(count))
}
func DrawRangeElementArrayATI(mode uint32, start uint32, end uint32, count int32) {
  C.glowDrawRangeElementArrayATI(pDrawRangeElementArrayATI, (C.GLenum)(mode), (C.GLuint)(start), (C.GLuint)(end), (C.GLsizei)(count))
}
// render primitives from array data
func DrawRangeElements(mode uint32, start uint32, end uint32, count int32, xtype uint32, indices unsafe.Pointer) {
  C.glowDrawRangeElements(pDrawRangeElements, (C.GLenum)(mode), (C.GLuint)(start), (C.GLuint)(end), (C.GLsizei)(count), (C.GLenum)(xtype), indices)
}
// render primitives from array data with a per-element offset
func DrawRangeElementsBaseVertex(mode uint32, start uint32, end uint32, count int32, xtype uint32, indices unsafe.Pointer, basevertex int32) {
  C.glowDrawRangeElementsBaseVertex(pDrawRangeElementsBaseVertex, (C.GLenum)(mode), (C.GLuint)(start), (C.GLuint)(end), (C.GLsizei)(count), (C.GLenum)(xtype), indices, (C.GLint)(basevertex))
}
func DrawRangeElementsEXT(mode uint32, start uint32, end uint32, count int32, xtype uint32, indices unsafe.Pointer) {
  C.glowDrawRangeElementsEXT(pDrawRangeElementsEXT, (C.GLenum)(mode), (C.GLuint)(start), (C.GLuint)(end), (C.GLsizei)(count), (C.GLenum)(xtype), indices)
}
func DrawTextureNV(texture uint32, sampler uint32, x0 float32, y0 float32, x1 float32, y1 float32, z float32, s0 float32, t0 float32, s1 float32, t1 float32) {
  C.glowDrawTextureNV(pDrawTextureNV, (C.GLuint)(texture), (C.GLuint)(sampler), (C.GLfloat)(x0), (C.GLfloat)(y0), (C.GLfloat)(x1), (C.GLfloat)(y1), (C.GLfloat)(z), (C.GLfloat)(s0), (C.GLfloat)(t0), (C.GLfloat)(s1), (C.GLfloat)(t1))
}
// render primitives using a count derived from a transform feedback object
func DrawTransformFeedback(mode uint32, id uint32) {
  C.glowDrawTransformFeedback(pDrawTransformFeedback, (C.GLenum)(mode), (C.GLuint)(id))
}
// render multiple instances of primitives using a count derived from a transform feedback object
func DrawTransformFeedbackInstanced(mode uint32, id uint32, instancecount int32) {
  C.glowDrawTransformFeedbackInstanced(pDrawTransformFeedbackInstanced, (C.GLenum)(mode), (C.GLuint)(id), (C.GLsizei)(instancecount))
}
func DrawTransformFeedbackNV(mode uint32, id uint32) {
  C.glowDrawTransformFeedbackNV(pDrawTransformFeedbackNV, (C.GLenum)(mode), (C.GLuint)(id))
}
// render primitives using a count derived from a specifed stream of a transform feedback object
func DrawTransformFeedbackStream(mode uint32, id uint32, stream uint32) {
  C.glowDrawTransformFeedbackStream(pDrawTransformFeedbackStream, (C.GLenum)(mode), (C.GLuint)(id), (C.GLuint)(stream))
}
// render multiple instances of primitives using a count derived from a specifed stream of a transform feedback object
func DrawTransformFeedbackStreamInstanced(mode uint32, id uint32, stream uint32, instancecount int32) {
  C.glowDrawTransformFeedbackStreamInstanced(pDrawTransformFeedbackStreamInstanced, (C.GLenum)(mode), (C.GLuint)(id), (C.GLuint)(stream), (C.GLsizei)(instancecount))
}
func EdgeFlagFormatNV(stride int32) {
  C.glowEdgeFlagFormatNV(pEdgeFlagFormatNV, (C.GLsizei)(stride))
}
func EdgeFlagPointerEXT(stride int32, count int32, pointer *bool) {
  C.glowEdgeFlagPointerEXT(pEdgeFlagPointerEXT, (C.GLsizei)(stride), (C.GLsizei)(count), (*C.GLboolean)(unsafe.Pointer(pointer)))
}
func EdgeFlagPointerListIBM(stride int32, pointer **bool, ptrstride int32) {
  C.glowEdgeFlagPointerListIBM(pEdgeFlagPointerListIBM, (C.GLint)(stride), (**C.GLboolean)(unsafe.Pointer(pointer)), (C.GLint)(ptrstride))
}
func ElementPointerAPPLE(xtype uint32, pointer unsafe.Pointer) {
  C.glowElementPointerAPPLE(pElementPointerAPPLE, (C.GLenum)(xtype), pointer)
}
func ElementPointerATI(xtype uint32, pointer unsafe.Pointer) {
  C.glowElementPointerATI(pElementPointerATI, (C.GLenum)(xtype), pointer)
}
// enable or disable server-side GL capabilities
func Enable(cap uint32) {
  C.glowEnable(pEnable, (C.GLenum)(cap))
}
func EnableClientStateIndexedEXT(array uint32, index uint32) {
  C.glowEnableClientStateIndexedEXT(pEnableClientStateIndexedEXT, (C.GLenum)(array), (C.GLuint)(index))
}
func EnableClientStateiEXT(array uint32, index uint32) {
  C.glowEnableClientStateiEXT(pEnableClientStateiEXT, (C.GLenum)(array), (C.GLuint)(index))
}
func EnableIndexedEXT(target uint32, index uint32) {
  C.glowEnableIndexedEXT(pEnableIndexedEXT, (C.GLenum)(target), (C.GLuint)(index))
}
func EnableVariantClientStateEXT(id uint32) {
  C.glowEnableVariantClientStateEXT(pEnableVariantClientStateEXT, (C.GLuint)(id))
}
func EnableVertexArrayAttribEXT(vaobj uint32, index uint32) {
  C.glowEnableVertexArrayAttribEXT(pEnableVertexArrayAttribEXT, (C.GLuint)(vaobj), (C.GLuint)(index))
}
func EnableVertexArrayEXT(vaobj uint32, array uint32) {
  C.glowEnableVertexArrayEXT(pEnableVertexArrayEXT, (C.GLuint)(vaobj), (C.GLenum)(array))
}
func EnableVertexAttribAPPLE(index uint32, pname uint32) {
  C.glowEnableVertexAttribAPPLE(pEnableVertexAttribAPPLE, (C.GLuint)(index), (C.GLenum)(pname))
}
// Enable or disable a generic vertex attribute array
func EnableVertexAttribArray(index uint32) {
  C.glowEnableVertexAttribArray(pEnableVertexAttribArray, (C.GLuint)(index))
}
func EnableVertexAttribArrayARB(index uint32) {
  C.glowEnableVertexAttribArrayARB(pEnableVertexAttribArrayARB, (C.GLuint)(index))
}
func Enablei(target uint32, index uint32) {
  C.glowEnablei(pEnablei, (C.GLenum)(target), (C.GLuint)(index))
}
func EndConditionalRender() {
  C.glowEndConditionalRender(pEndConditionalRender)
}
func EndConditionalRenderNV() {
  C.glowEndConditionalRenderNV(pEndConditionalRenderNV)
}
func EndConditionalRenderNVX() {
  C.glowEndConditionalRenderNVX(pEndConditionalRenderNVX)
}
func EndFragmentShaderATI() {
  C.glowEndFragmentShaderATI(pEndFragmentShaderATI)
}
func EndOcclusionQueryNV() {
  C.glowEndOcclusionQueryNV(pEndOcclusionQueryNV)
}
func EndPerfMonitorAMD(monitor uint32) {
  C.glowEndPerfMonitorAMD(pEndPerfMonitorAMD, (C.GLuint)(monitor))
}
func EndPerfQueryINTEL(queryHandle uint32) {
  C.glowEndPerfQueryINTEL(pEndPerfQueryINTEL, (C.GLuint)(queryHandle))
}
func EndQuery(target uint32) {
  C.glowEndQuery(pEndQuery, (C.GLenum)(target))
}
func EndQueryARB(target uint32) {
  C.glowEndQueryARB(pEndQueryARB, (C.GLenum)(target))
}
func EndQueryIndexed(target uint32, index uint32) {
  C.glowEndQueryIndexed(pEndQueryIndexed, (C.GLenum)(target), (C.GLuint)(index))
}
func EndTransformFeedback() {
  C.glowEndTransformFeedback(pEndTransformFeedback)
}
func EndTransformFeedbackEXT() {
  C.glowEndTransformFeedbackEXT(pEndTransformFeedbackEXT)
}
func EndTransformFeedbackNV() {
  C.glowEndTransformFeedbackNV(pEndTransformFeedbackNV)
}
func EndVertexShaderEXT() {
  C.glowEndVertexShaderEXT(pEndVertexShaderEXT)
}
func EndVideoCaptureNV(video_capture_slot uint32) {
  C.glowEndVideoCaptureNV(pEndVideoCaptureNV, (C.GLuint)(video_capture_slot))
}
func EvalCoord1xOES(u int32) {
  C.glowEvalCoord1xOES(pEvalCoord1xOES, (C.GLfixed)(u))
}
func EvalCoord1xvOES(coords *int32) {
  C.glowEvalCoord1xvOES(pEvalCoord1xvOES, (*C.GLfixed)(unsafe.Pointer(coords)))
}
func EvalCoord2xOES(u int32, v int32) {
  C.glowEvalCoord2xOES(pEvalCoord2xOES, (C.GLfixed)(u), (C.GLfixed)(v))
}
func EvalCoord2xvOES(coords *int32) {
  C.glowEvalCoord2xvOES(pEvalCoord2xvOES, (*C.GLfixed)(unsafe.Pointer(coords)))
}
func EvalMapsNV(target uint32, mode uint32) {
  C.glowEvalMapsNV(pEvalMapsNV, (C.GLenum)(target), (C.GLenum)(mode))
}
func ExecuteProgramNV(target uint32, id uint32, params *float32) {
  C.glowExecuteProgramNV(pExecuteProgramNV, (C.GLenum)(target), (C.GLuint)(id), (*C.GLfloat)(unsafe.Pointer(params)))
}
func ExtractComponentEXT(res uint32, src uint32, num uint32) {
  C.glowExtractComponentEXT(pExtractComponentEXT, (C.GLuint)(res), (C.GLuint)(src), (C.GLuint)(num))
}
func FeedbackBufferxOES(n int32, xtype uint32, buffer *int32) {
  C.glowFeedbackBufferxOES(pFeedbackBufferxOES, (C.GLsizei)(n), (C.GLenum)(xtype), (*C.GLfixed)(unsafe.Pointer(buffer)))
}
// create a new sync object and insert it into the GL command stream
func FenceSync(condition uint32, flags uint32) unsafe.Pointer {
  ret := C.glowFenceSync(pFenceSync, (C.GLenum)(condition), (C.GLbitfield)(flags))
  return (unsafe.Pointer)(ret)
}
func FinalCombinerInputNV(variable uint32, input uint32, mapping uint32, componentUsage uint32) {
  C.glowFinalCombinerInputNV(pFinalCombinerInputNV, (C.GLenum)(variable), (C.GLenum)(input), (C.GLenum)(mapping), (C.GLenum)(componentUsage))
}
// block until all GL execution is complete
func Finish() {
  C.glowFinish(pFinish)
}
func FinishAsyncSGIX(markerp *uint32) int32 {
  ret := C.glowFinishAsyncSGIX(pFinishAsyncSGIX, (*C.GLuint)(unsafe.Pointer(markerp)))
  return (int32)(ret)
}
func FinishFenceAPPLE(fence uint32) {
  C.glowFinishFenceAPPLE(pFinishFenceAPPLE, (C.GLuint)(fence))
}
func FinishFenceNV(fence uint32) {
  C.glowFinishFenceNV(pFinishFenceNV, (C.GLuint)(fence))
}
func FinishObjectAPPLE(object uint32, name int32) {
  C.glowFinishObjectAPPLE(pFinishObjectAPPLE, (C.GLenum)(object), (C.GLint)(name))
}
func FinishTextureSUNX() {
  C.glowFinishTextureSUNX(pFinishTextureSUNX)
}
// force execution of GL commands in finite time
func Flush() {
  C.glowFlush(pFlush)
}
// indicate modifications to a range of a mapped buffer
func FlushMappedBufferRange(target uint32, offset int, length int) {
  C.glowFlushMappedBufferRange(pFlushMappedBufferRange, (C.GLenum)(target), (C.GLintptr)(offset), (C.GLsizeiptr)(length))
}
func FlushMappedBufferRangeAPPLE(target uint32, offset int, size int) {
  C.glowFlushMappedBufferRangeAPPLE(pFlushMappedBufferRangeAPPLE, (C.GLenum)(target), (C.GLintptr)(offset), (C.GLsizeiptr)(size))
}
func FlushMappedNamedBufferRangeEXT(buffer uint32, offset int, length int) {
  C.glowFlushMappedNamedBufferRangeEXT(pFlushMappedNamedBufferRangeEXT, (C.GLuint)(buffer), (C.GLintptr)(offset), (C.GLsizeiptr)(length))
}
func FlushPixelDataRangeNV(target uint32) {
  C.glowFlushPixelDataRangeNV(pFlushPixelDataRangeNV, (C.GLenum)(target))
}
func FlushRasterSGIX() {
  C.glowFlushRasterSGIX(pFlushRasterSGIX)
}
func FlushStaticDataIBM(target uint32) {
  C.glowFlushStaticDataIBM(pFlushStaticDataIBM, (C.GLenum)(target))
}
func FlushVertexArrayRangeAPPLE(length int32, pointer unsafe.Pointer) {
  C.glowFlushVertexArrayRangeAPPLE(pFlushVertexArrayRangeAPPLE, (C.GLsizei)(length), pointer)
}
func FlushVertexArrayRangeNV() {
  C.glowFlushVertexArrayRangeNV(pFlushVertexArrayRangeNV)
}
func FogCoordFormatNV(xtype uint32, stride int32) {
  C.glowFogCoordFormatNV(pFogCoordFormatNV, (C.GLenum)(xtype), (C.GLsizei)(stride))
}
func FogCoordPointerEXT(xtype uint32, stride int32, pointer unsafe.Pointer) {
  C.glowFogCoordPointerEXT(pFogCoordPointerEXT, (C.GLenum)(xtype), (C.GLsizei)(stride), pointer)
}
func FogCoordPointerListIBM(xtype uint32, stride int32, pointer *unsafe.Pointer, ptrstride int32) {
  C.glowFogCoordPointerListIBM(pFogCoordPointerListIBM, (C.GLenum)(xtype), (C.GLint)(stride), pointer, (C.GLint)(ptrstride))
}
func FogCoorddEXT(coord float64) {
  C.glowFogCoorddEXT(pFogCoorddEXT, (C.GLdouble)(coord))
}
func FogCoorddvEXT(coord *float64) {
  C.glowFogCoorddvEXT(pFogCoorddvEXT, (*C.GLdouble)(unsafe.Pointer(coord)))
}
func FogCoordfEXT(coord float32) {
  C.glowFogCoordfEXT(pFogCoordfEXT, (C.GLfloat)(coord))
}
func FogCoordfvEXT(coord *float32) {
  C.glowFogCoordfvEXT(pFogCoordfvEXT, (*C.GLfloat)(unsafe.Pointer(coord)))
}
func FogCoordhNV(fog uint16) {
  C.glowFogCoordhNV(pFogCoordhNV, (C.GLhalfNV)(fog))
}
func FogCoordhvNV(fog *uint16) {
  C.glowFogCoordhvNV(pFogCoordhvNV, (*C.GLhalfNV)(unsafe.Pointer(fog)))
}
func FogFuncSGIS(n int32, points *float32) {
  C.glowFogFuncSGIS(pFogFuncSGIS, (C.GLsizei)(n), (*C.GLfloat)(unsafe.Pointer(points)))
}
func FogxOES(pname uint32, param int32) {
  C.glowFogxOES(pFogxOES, (C.GLenum)(pname), (C.GLfixed)(param))
}
func FogxvOES(pname uint32, param *int32) {
  C.glowFogxvOES(pFogxvOES, (C.GLenum)(pname), (*C.GLfixed)(unsafe.Pointer(param)))
}
func FragmentColorMaterialSGIX(face uint32, mode uint32) {
  C.glowFragmentColorMaterialSGIX(pFragmentColorMaterialSGIX, (C.GLenum)(face), (C.GLenum)(mode))
}
func FragmentLightModelfSGIX(pname uint32, param float32) {
  C.glowFragmentLightModelfSGIX(pFragmentLightModelfSGIX, (C.GLenum)(pname), (C.GLfloat)(param))
}
func FragmentLightModelfvSGIX(pname uint32, params *float32) {
  C.glowFragmentLightModelfvSGIX(pFragmentLightModelfvSGIX, (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func FragmentLightModeliSGIX(pname uint32, param int32) {
  C.glowFragmentLightModeliSGIX(pFragmentLightModeliSGIX, (C.GLenum)(pname), (C.GLint)(param))
}
func FragmentLightModelivSGIX(pname uint32, params *int32) {
  C.glowFragmentLightModelivSGIX(pFragmentLightModelivSGIX, (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func FragmentLightfSGIX(light uint32, pname uint32, param float32) {
  C.glowFragmentLightfSGIX(pFragmentLightfSGIX, (C.GLenum)(light), (C.GLenum)(pname), (C.GLfloat)(param))
}
func FragmentLightfvSGIX(light uint32, pname uint32, params *float32) {
  C.glowFragmentLightfvSGIX(pFragmentLightfvSGIX, (C.GLenum)(light), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func FragmentLightiSGIX(light uint32, pname uint32, param int32) {
  C.glowFragmentLightiSGIX(pFragmentLightiSGIX, (C.GLenum)(light), (C.GLenum)(pname), (C.GLint)(param))
}
func FragmentLightivSGIX(light uint32, pname uint32, params *int32) {
  C.glowFragmentLightivSGIX(pFragmentLightivSGIX, (C.GLenum)(light), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func FragmentMaterialfSGIX(face uint32, pname uint32, param float32) {
  C.glowFragmentMaterialfSGIX(pFragmentMaterialfSGIX, (C.GLenum)(face), (C.GLenum)(pname), (C.GLfloat)(param))
}
func FragmentMaterialfvSGIX(face uint32, pname uint32, params *float32) {
  C.glowFragmentMaterialfvSGIX(pFragmentMaterialfvSGIX, (C.GLenum)(face), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func FragmentMaterialiSGIX(face uint32, pname uint32, param int32) {
  C.glowFragmentMaterialiSGIX(pFragmentMaterialiSGIX, (C.GLenum)(face), (C.GLenum)(pname), (C.GLint)(param))
}
func FragmentMaterialivSGIX(face uint32, pname uint32, params *int32) {
  C.glowFragmentMaterialivSGIX(pFragmentMaterialivSGIX, (C.GLenum)(face), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func FrameTerminatorGREMEDY() {
  C.glowFrameTerminatorGREMEDY(pFrameTerminatorGREMEDY)
}
func FrameZoomSGIX(factor int32) {
  C.glowFrameZoomSGIX(pFrameZoomSGIX, (C.GLint)(factor))
}
func FramebufferDrawBufferEXT(framebuffer uint32, mode uint32) {
  C.glowFramebufferDrawBufferEXT(pFramebufferDrawBufferEXT, (C.GLuint)(framebuffer), (C.GLenum)(mode))
}
func FramebufferDrawBuffersEXT(framebuffer uint32, n int32, bufs *uint32) {
  C.glowFramebufferDrawBuffersEXT(pFramebufferDrawBuffersEXT, (C.GLuint)(framebuffer), (C.GLsizei)(n), (*C.GLenum)(unsafe.Pointer(bufs)))
}
// set a named parameter of a framebuffer
func FramebufferParameteri(target uint32, pname uint32, param int32) {
  C.glowFramebufferParameteri(pFramebufferParameteri, (C.GLenum)(target), (C.GLenum)(pname), (C.GLint)(param))
}
func FramebufferReadBufferEXT(framebuffer uint32, mode uint32) {
  C.glowFramebufferReadBufferEXT(pFramebufferReadBufferEXT, (C.GLuint)(framebuffer), (C.GLenum)(mode))
}
// attach a renderbuffer as a logical buffer to the currently bound framebuffer object
func FramebufferRenderbuffer(target uint32, attachment uint32, renderbuffertarget uint32, renderbuffer uint32) {
  C.glowFramebufferRenderbuffer(pFramebufferRenderbuffer, (C.GLenum)(target), (C.GLenum)(attachment), (C.GLenum)(renderbuffertarget), (C.GLuint)(renderbuffer))
}
func FramebufferRenderbufferEXT(target uint32, attachment uint32, renderbuffertarget uint32, renderbuffer uint32) {
  C.glowFramebufferRenderbufferEXT(pFramebufferRenderbufferEXT, (C.GLenum)(target), (C.GLenum)(attachment), (C.GLenum)(renderbuffertarget), (C.GLuint)(renderbuffer))
}
// attach a level of a texture object as a logical buffer to the currently bound framebuffer object
func FramebufferTexture(target uint32, attachment uint32, texture uint32, level int32) {
  C.glowFramebufferTexture(pFramebufferTexture, (C.GLenum)(target), (C.GLenum)(attachment), (C.GLuint)(texture), (C.GLint)(level))
}
func FramebufferTexture1D(target uint32, attachment uint32, textarget uint32, texture uint32, level int32) {
  C.glowFramebufferTexture1D(pFramebufferTexture1D, (C.GLenum)(target), (C.GLenum)(attachment), (C.GLenum)(textarget), (C.GLuint)(texture), (C.GLint)(level))
}
func FramebufferTexture1DEXT(target uint32, attachment uint32, textarget uint32, texture uint32, level int32) {
  C.glowFramebufferTexture1DEXT(pFramebufferTexture1DEXT, (C.GLenum)(target), (C.GLenum)(attachment), (C.GLenum)(textarget), (C.GLuint)(texture), (C.GLint)(level))
}
func FramebufferTexture2D(target uint32, attachment uint32, textarget uint32, texture uint32, level int32) {
  C.glowFramebufferTexture2D(pFramebufferTexture2D, (C.GLenum)(target), (C.GLenum)(attachment), (C.GLenum)(textarget), (C.GLuint)(texture), (C.GLint)(level))
}
func FramebufferTexture2DEXT(target uint32, attachment uint32, textarget uint32, texture uint32, level int32) {
  C.glowFramebufferTexture2DEXT(pFramebufferTexture2DEXT, (C.GLenum)(target), (C.GLenum)(attachment), (C.GLenum)(textarget), (C.GLuint)(texture), (C.GLint)(level))
}
func FramebufferTexture3D(target uint32, attachment uint32, textarget uint32, texture uint32, level int32, zoffset int32) {
  C.glowFramebufferTexture3D(pFramebufferTexture3D, (C.GLenum)(target), (C.GLenum)(attachment), (C.GLenum)(textarget), (C.GLuint)(texture), (C.GLint)(level), (C.GLint)(zoffset))
}
func FramebufferTexture3DEXT(target uint32, attachment uint32, textarget uint32, texture uint32, level int32, zoffset int32) {
  C.glowFramebufferTexture3DEXT(pFramebufferTexture3DEXT, (C.GLenum)(target), (C.GLenum)(attachment), (C.GLenum)(textarget), (C.GLuint)(texture), (C.GLint)(level), (C.GLint)(zoffset))
}
func FramebufferTextureARB(target uint32, attachment uint32, texture uint32, level int32) {
  C.glowFramebufferTextureARB(pFramebufferTextureARB, (C.GLenum)(target), (C.GLenum)(attachment), (C.GLuint)(texture), (C.GLint)(level))
}
func FramebufferTextureEXT(target uint32, attachment uint32, texture uint32, level int32) {
  C.glowFramebufferTextureEXT(pFramebufferTextureEXT, (C.GLenum)(target), (C.GLenum)(attachment), (C.GLuint)(texture), (C.GLint)(level))
}
func FramebufferTextureFaceARB(target uint32, attachment uint32, texture uint32, level int32, face uint32) {
  C.glowFramebufferTextureFaceARB(pFramebufferTextureFaceARB, (C.GLenum)(target), (C.GLenum)(attachment), (C.GLuint)(texture), (C.GLint)(level), (C.GLenum)(face))
}
func FramebufferTextureFaceEXT(target uint32, attachment uint32, texture uint32, level int32, face uint32) {
  C.glowFramebufferTextureFaceEXT(pFramebufferTextureFaceEXT, (C.GLenum)(target), (C.GLenum)(attachment), (C.GLuint)(texture), (C.GLint)(level), (C.GLenum)(face))
}
// attach a single layer of a texture to a framebuffer
func FramebufferTextureLayer(target uint32, attachment uint32, texture uint32, level int32, layer int32) {
  C.glowFramebufferTextureLayer(pFramebufferTextureLayer, (C.GLenum)(target), (C.GLenum)(attachment), (C.GLuint)(texture), (C.GLint)(level), (C.GLint)(layer))
}
func FramebufferTextureLayerARB(target uint32, attachment uint32, texture uint32, level int32, layer int32) {
  C.glowFramebufferTextureLayerARB(pFramebufferTextureLayerARB, (C.GLenum)(target), (C.GLenum)(attachment), (C.GLuint)(texture), (C.GLint)(level), (C.GLint)(layer))
}
func FramebufferTextureLayerEXT(target uint32, attachment uint32, texture uint32, level int32, layer int32) {
  C.glowFramebufferTextureLayerEXT(pFramebufferTextureLayerEXT, (C.GLenum)(target), (C.GLenum)(attachment), (C.GLuint)(texture), (C.GLint)(level), (C.GLint)(layer))
}
func FreeObjectBufferATI(buffer uint32) {
  C.glowFreeObjectBufferATI(pFreeObjectBufferATI, (C.GLuint)(buffer))
}
// define front- and back-facing polygons
func FrontFace(mode uint32) {
  C.glowFrontFace(pFrontFace, (C.GLenum)(mode))
}
func FrustumfOES(l float32, r float32, b float32, t float32, n float32, f float32) {
  C.glowFrustumfOES(pFrustumfOES, (C.GLfloat)(l), (C.GLfloat)(r), (C.GLfloat)(b), (C.GLfloat)(t), (C.GLfloat)(n), (C.GLfloat)(f))
}
func FrustumxOES(l int32, r int32, b int32, t int32, n int32, f int32) {
  C.glowFrustumxOES(pFrustumxOES, (C.GLfixed)(l), (C.GLfixed)(r), (C.GLfixed)(b), (C.GLfixed)(t), (C.GLfixed)(n), (C.GLfixed)(f))
}
func GenAsyncMarkersSGIX(xrange int32) uint32 {
  ret := C.glowGenAsyncMarkersSGIX(pGenAsyncMarkersSGIX, (C.GLsizei)(xrange))
  return (uint32)(ret)
}
// generate buffer object names
func GenBuffers(n int32, buffers *uint32) {
  C.glowGenBuffers(pGenBuffers, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(buffers)))
}
func GenBuffersARB(n int32, buffers *uint32) {
  C.glowGenBuffersARB(pGenBuffersARB, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(buffers)))
}
func GenFencesAPPLE(n int32, fences *uint32) {
  C.glowGenFencesAPPLE(pGenFencesAPPLE, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(fences)))
}
func GenFencesNV(n int32, fences *uint32) {
  C.glowGenFencesNV(pGenFencesNV, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(fences)))
}
func GenFragmentShadersATI(xrange uint32) uint32 {
  ret := C.glowGenFragmentShadersATI(pGenFragmentShadersATI, (C.GLuint)(xrange))
  return (uint32)(ret)
}
// generate framebuffer object names
func GenFramebuffers(n int32, framebuffers *uint32) {
  C.glowGenFramebuffers(pGenFramebuffers, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(framebuffers)))
}
func GenFramebuffersEXT(n int32, framebuffers *uint32) {
  C.glowGenFramebuffersEXT(pGenFramebuffersEXT, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(framebuffers)))
}
func GenNamesAMD(identifier uint32, num uint32, names *uint32) {
  C.glowGenNamesAMD(pGenNamesAMD, (C.GLenum)(identifier), (C.GLuint)(num), (*C.GLuint)(unsafe.Pointer(names)))
}
func GenOcclusionQueriesNV(n int32, ids *uint32) {
  C.glowGenOcclusionQueriesNV(pGenOcclusionQueriesNV, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(ids)))
}
func GenPathsNV(xrange int32) uint32 {
  ret := C.glowGenPathsNV(pGenPathsNV, (C.GLsizei)(xrange))
  return (uint32)(ret)
}
func GenPerfMonitorsAMD(n int32, monitors *uint32) {
  C.glowGenPerfMonitorsAMD(pGenPerfMonitorsAMD, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(monitors)))
}
// reserve program pipeline object names
func GenProgramPipelines(n int32, pipelines *uint32) {
  C.glowGenProgramPipelines(pGenProgramPipelines, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(pipelines)))
}
func GenProgramPipelinesEXT(n int32, pipelines *uint32) {
  C.glowGenProgramPipelinesEXT(pGenProgramPipelinesEXT, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(pipelines)))
}
func GenProgramsARB(n int32, programs *uint32) {
  C.glowGenProgramsARB(pGenProgramsARB, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(programs)))
}
func GenProgramsNV(n int32, programs *uint32) {
  C.glowGenProgramsNV(pGenProgramsNV, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(programs)))
}
// generate query object names
func GenQueries(n int32, ids *uint32) {
  C.glowGenQueries(pGenQueries, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(ids)))
}
func GenQueriesARB(n int32, ids *uint32) {
  C.glowGenQueriesARB(pGenQueriesARB, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(ids)))
}
// generate renderbuffer object names
func GenRenderbuffers(n int32, renderbuffers *uint32) {
  C.glowGenRenderbuffers(pGenRenderbuffers, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(renderbuffers)))
}
func GenRenderbuffersEXT(n int32, renderbuffers *uint32) {
  C.glowGenRenderbuffersEXT(pGenRenderbuffersEXT, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(renderbuffers)))
}
// generate sampler object names
func GenSamplers(count int32, samplers *uint32) {
  C.glowGenSamplers(pGenSamplers, (C.GLsizei)(count), (*C.GLuint)(unsafe.Pointer(samplers)))
}
func GenSymbolsEXT(datatype uint32, storagetype uint32, xrange uint32, components uint32) uint32 {
  ret := C.glowGenSymbolsEXT(pGenSymbolsEXT, (C.GLenum)(datatype), (C.GLenum)(storagetype), (C.GLenum)(xrange), (C.GLuint)(components))
  return (uint32)(ret)
}
// generate texture names
func GenTextures(n int32, textures *uint32) {
  C.glowGenTextures(pGenTextures, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(textures)))
}
func GenTexturesEXT(n int32, textures *uint32) {
  C.glowGenTexturesEXT(pGenTexturesEXT, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(textures)))
}
// reserve transform feedback object names
func GenTransformFeedbacks(n int32, ids *uint32) {
  C.glowGenTransformFeedbacks(pGenTransformFeedbacks, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(ids)))
}
func GenTransformFeedbacksNV(n int32, ids *uint32) {
  C.glowGenTransformFeedbacksNV(pGenTransformFeedbacksNV, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(ids)))
}
// generate vertex array object names
func GenVertexArrays(n int32, arrays *uint32) {
  C.glowGenVertexArrays(pGenVertexArrays, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(arrays)))
}
func GenVertexArraysAPPLE(n int32, arrays *uint32) {
  C.glowGenVertexArraysAPPLE(pGenVertexArraysAPPLE, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(arrays)))
}
func GenVertexShadersEXT(xrange uint32) uint32 {
  ret := C.glowGenVertexShadersEXT(pGenVertexShadersEXT, (C.GLuint)(xrange))
  return (uint32)(ret)
}
// generate mipmaps for a specified texture target
func GenerateMipmap(target uint32) {
  C.glowGenerateMipmap(pGenerateMipmap, (C.GLenum)(target))
}
func GenerateMipmapEXT(target uint32) {
  C.glowGenerateMipmapEXT(pGenerateMipmapEXT, (C.GLenum)(target))
}
func GenerateMultiTexMipmapEXT(texunit uint32, target uint32) {
  C.glowGenerateMultiTexMipmapEXT(pGenerateMultiTexMipmapEXT, (C.GLenum)(texunit), (C.GLenum)(target))
}
func GenerateTextureMipmapEXT(texture uint32, target uint32) {
  C.glowGenerateTextureMipmapEXT(pGenerateTextureMipmapEXT, (C.GLuint)(texture), (C.GLenum)(target))
}
// retrieve information about the set of active atomic counter buffers for a program
func GetActiveAtomicCounterBufferiv(program uint32, bufferIndex uint32, pname uint32, params *int32) {
  C.glowGetActiveAtomicCounterBufferiv(pGetActiveAtomicCounterBufferiv, (C.GLuint)(program), (C.GLuint)(bufferIndex), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
// Returns information about an active attribute variable for the specified program object
func GetActiveAttrib(program uint32, index uint32, bufSize int32, length *int32, size *int32, xtype *uint32, name *int8) {
  C.glowGetActiveAttrib(pGetActiveAttrib, (C.GLuint)(program), (C.GLuint)(index), (C.GLsizei)(bufSize), (*C.GLsizei)(unsafe.Pointer(length)), (*C.GLint)(unsafe.Pointer(size)), (*C.GLenum)(unsafe.Pointer(xtype)), (*C.GLchar)(unsafe.Pointer(name)))
}
func GetActiveAttribARB(programObj uintptr, index uint32, maxLength int32, length *int32, size *int32, xtype *uint32, name *int8) {
  C.glowGetActiveAttribARB(pGetActiveAttribARB, (C.GLhandleARB)(programObj), (C.GLuint)(index), (C.GLsizei)(maxLength), (*C.GLsizei)(unsafe.Pointer(length)), (*C.GLint)(unsafe.Pointer(size)), (*C.GLenum)(unsafe.Pointer(xtype)), (*C.GLcharARB)(unsafe.Pointer(name)))
}
// query the name of an active shader subroutine
func GetActiveSubroutineName(program uint32, shadertype uint32, index uint32, bufsize int32, length *int32, name *int8) {
  C.glowGetActiveSubroutineName(pGetActiveSubroutineName, (C.GLuint)(program), (C.GLenum)(shadertype), (C.GLuint)(index), (C.GLsizei)(bufsize), (*C.GLsizei)(unsafe.Pointer(length)), (*C.GLchar)(unsafe.Pointer(name)))
}
// query the name of an active shader subroutine uniform
func GetActiveSubroutineUniformName(program uint32, shadertype uint32, index uint32, bufsize int32, length *int32, name *int8) {
  C.glowGetActiveSubroutineUniformName(pGetActiveSubroutineUniformName, (C.GLuint)(program), (C.GLenum)(shadertype), (C.GLuint)(index), (C.GLsizei)(bufsize), (*C.GLsizei)(unsafe.Pointer(length)), (*C.GLchar)(unsafe.Pointer(name)))
}
func GetActiveSubroutineUniformiv(program uint32, shadertype uint32, index uint32, pname uint32, values *int32) {
  C.glowGetActiveSubroutineUniformiv(pGetActiveSubroutineUniformiv, (C.GLuint)(program), (C.GLenum)(shadertype), (C.GLuint)(index), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(values)))
}
// Returns information about an active uniform variable for the specified program object
func GetActiveUniform(program uint32, index uint32, bufSize int32, length *int32, size *int32, xtype *uint32, name *int8) {
  C.glowGetActiveUniform(pGetActiveUniform, (C.GLuint)(program), (C.GLuint)(index), (C.GLsizei)(bufSize), (*C.GLsizei)(unsafe.Pointer(length)), (*C.GLint)(unsafe.Pointer(size)), (*C.GLenum)(unsafe.Pointer(xtype)), (*C.GLchar)(unsafe.Pointer(name)))
}
func GetActiveUniformARB(programObj uintptr, index uint32, maxLength int32, length *int32, size *int32, xtype *uint32, name *int8) {
  C.glowGetActiveUniformARB(pGetActiveUniformARB, (C.GLhandleARB)(programObj), (C.GLuint)(index), (C.GLsizei)(maxLength), (*C.GLsizei)(unsafe.Pointer(length)), (*C.GLint)(unsafe.Pointer(size)), (*C.GLenum)(unsafe.Pointer(xtype)), (*C.GLcharARB)(unsafe.Pointer(name)))
}
// retrieve the name of an active uniform block
func GetActiveUniformBlockName(program uint32, uniformBlockIndex uint32, bufSize int32, length *int32, uniformBlockName *int8) {
  C.glowGetActiveUniformBlockName(pGetActiveUniformBlockName, (C.GLuint)(program), (C.GLuint)(uniformBlockIndex), (C.GLsizei)(bufSize), (*C.GLsizei)(unsafe.Pointer(length)), (*C.GLchar)(unsafe.Pointer(uniformBlockName)))
}
func GetActiveUniformBlockiv(program uint32, uniformBlockIndex uint32, pname uint32, params *int32) {
  C.glowGetActiveUniformBlockiv(pGetActiveUniformBlockiv, (C.GLuint)(program), (C.GLuint)(uniformBlockIndex), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
// query the name of an active uniform
func GetActiveUniformName(program uint32, uniformIndex uint32, bufSize int32, length *int32, uniformName *int8) {
  C.glowGetActiveUniformName(pGetActiveUniformName, (C.GLuint)(program), (C.GLuint)(uniformIndex), (C.GLsizei)(bufSize), (*C.GLsizei)(unsafe.Pointer(length)), (*C.GLchar)(unsafe.Pointer(uniformName)))
}
// Returns information about several active uniform variables for the specified program object
func GetActiveUniformsiv(program uint32, uniformCount int32, uniformIndices *uint32, pname uint32, params *int32) {
  C.glowGetActiveUniformsiv(pGetActiveUniformsiv, (C.GLuint)(program), (C.GLsizei)(uniformCount), (*C.GLuint)(unsafe.Pointer(uniformIndices)), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetActiveVaryingNV(program uint32, index uint32, bufSize int32, length *int32, size *int32, xtype *uint32, name *int8) {
  C.glowGetActiveVaryingNV(pGetActiveVaryingNV, (C.GLuint)(program), (C.GLuint)(index), (C.GLsizei)(bufSize), (*C.GLsizei)(unsafe.Pointer(length)), (*C.GLsizei)(unsafe.Pointer(size)), (*C.GLenum)(unsafe.Pointer(xtype)), (*C.GLchar)(unsafe.Pointer(name)))
}
func GetArrayObjectfvATI(array uint32, pname uint32, params *float32) {
  C.glowGetArrayObjectfvATI(pGetArrayObjectfvATI, (C.GLenum)(array), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetArrayObjectivATI(array uint32, pname uint32, params *int32) {
  C.glowGetArrayObjectivATI(pGetArrayObjectivATI, (C.GLenum)(array), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetAttachedObjectsARB(containerObj uintptr, maxCount int32, count *int32, obj *uintptr) {
  C.glowGetAttachedObjectsARB(pGetAttachedObjectsARB, (C.GLhandleARB)(containerObj), (C.GLsizei)(maxCount), (*C.GLsizei)(unsafe.Pointer(count)), (*C.GLhandleARB)(unsafe.Pointer(obj)))
}
// Returns the handles of the shader objects attached to a program object
func GetAttachedShaders(program uint32, maxCount int32, count *int32, shaders *uint32) {
  C.glowGetAttachedShaders(pGetAttachedShaders, (C.GLuint)(program), (C.GLsizei)(maxCount), (*C.GLsizei)(unsafe.Pointer(count)), (*C.GLuint)(unsafe.Pointer(shaders)))
}
// Returns the location of an attribute variable
func GetAttribLocation(program uint32, name *int8) int32 {
  ret := C.glowGetAttribLocation(pGetAttribLocation, (C.GLuint)(program), (*C.GLchar)(unsafe.Pointer(name)))
  return (int32)(ret)
}
func GetAttribLocationARB(programObj uintptr, name *int8) int32 {
  ret := C.glowGetAttribLocationARB(pGetAttribLocationARB, (C.GLhandleARB)(programObj), (*C.GLcharARB)(unsafe.Pointer(name)))
  return (int32)(ret)
}
func GetBooleanIndexedvEXT(target uint32, index uint32, data *bool) {
  C.glowGetBooleanIndexedvEXT(pGetBooleanIndexedvEXT, (C.GLenum)(target), (C.GLuint)(index), (*C.GLboolean)(unsafe.Pointer(data)))
}
func GetBooleani_v(target uint32, index uint32, data *bool) {
  C.glowGetBooleani_v(pGetBooleani_v, (C.GLenum)(target), (C.GLuint)(index), (*C.GLboolean)(unsafe.Pointer(data)))
}
func GetBooleanv(pname uint32, data *bool) {
  C.glowGetBooleanv(pGetBooleanv, (C.GLenum)(pname), (*C.GLboolean)(unsafe.Pointer(data)))
}
func GetBufferParameteri64v(target uint32, pname uint32, params *int64) {
  C.glowGetBufferParameteri64v(pGetBufferParameteri64v, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint64)(unsafe.Pointer(params)))
}
// return parameters of a buffer object
func GetBufferParameteriv(target uint32, pname uint32, params *int32) {
  C.glowGetBufferParameteriv(pGetBufferParameteriv, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetBufferParameterivARB(target uint32, pname uint32, params *int32) {
  C.glowGetBufferParameterivARB(pGetBufferParameterivARB, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetBufferParameterui64vNV(target uint32, pname uint32, params *uint64) {
  C.glowGetBufferParameterui64vNV(pGetBufferParameterui64vNV, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLuint64EXT)(unsafe.Pointer(params)))
}
// return the pointer to a mapped buffer object's data store
func GetBufferPointerv(target uint32, pname uint32, params *unsafe.Pointer) {
  C.glowGetBufferPointerv(pGetBufferPointerv, (C.GLenum)(target), (C.GLenum)(pname), params)
}
func GetBufferPointervARB(target uint32, pname uint32, params *unsafe.Pointer) {
  C.glowGetBufferPointervARB(pGetBufferPointervARB, (C.GLenum)(target), (C.GLenum)(pname), params)
}
// returns a subset of a buffer object's data store
func GetBufferSubData(target uint32, offset int, size int, data unsafe.Pointer) {
  C.glowGetBufferSubData(pGetBufferSubData, (C.GLenum)(target), (C.GLintptr)(offset), (C.GLsizeiptr)(size), data)
}
func GetBufferSubDataARB(target uint32, offset int, size int, data unsafe.Pointer) {
  C.glowGetBufferSubDataARB(pGetBufferSubDataARB, (C.GLenum)(target), (C.GLintptrARB)(offset), (C.GLsizeiptrARB)(size), data)
}
func GetClipPlanefOES(plane uint32, equation *float32) {
  C.glowGetClipPlanefOES(pGetClipPlanefOES, (C.GLenum)(plane), (*C.GLfloat)(unsafe.Pointer(equation)))
}
func GetClipPlanexOES(plane uint32, equation *int32) {
  C.glowGetClipPlanexOES(pGetClipPlanexOES, (C.GLenum)(plane), (*C.GLfixed)(unsafe.Pointer(equation)))
}
func GetColorTableEXT(target uint32, format uint32, xtype uint32, data unsafe.Pointer) {
  C.glowGetColorTableEXT(pGetColorTableEXT, (C.GLenum)(target), (C.GLenum)(format), (C.GLenum)(xtype), data)
}
func GetColorTableParameterfvEXT(target uint32, pname uint32, params *float32) {
  C.glowGetColorTableParameterfvEXT(pGetColorTableParameterfvEXT, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetColorTableParameterfvSGI(target uint32, pname uint32, params *float32) {
  C.glowGetColorTableParameterfvSGI(pGetColorTableParameterfvSGI, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetColorTableParameterivEXT(target uint32, pname uint32, params *int32) {
  C.glowGetColorTableParameterivEXT(pGetColorTableParameterivEXT, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetColorTableParameterivSGI(target uint32, pname uint32, params *int32) {
  C.glowGetColorTableParameterivSGI(pGetColorTableParameterivSGI, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetColorTableSGI(target uint32, format uint32, xtype uint32, table unsafe.Pointer) {
  C.glowGetColorTableSGI(pGetColorTableSGI, (C.GLenum)(target), (C.GLenum)(format), (C.GLenum)(xtype), table)
}
func GetCombinerInputParameterfvNV(stage uint32, portion uint32, variable uint32, pname uint32, params *float32) {
  C.glowGetCombinerInputParameterfvNV(pGetCombinerInputParameterfvNV, (C.GLenum)(stage), (C.GLenum)(portion), (C.GLenum)(variable), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetCombinerInputParameterivNV(stage uint32, portion uint32, variable uint32, pname uint32, params *int32) {
  C.glowGetCombinerInputParameterivNV(pGetCombinerInputParameterivNV, (C.GLenum)(stage), (C.GLenum)(portion), (C.GLenum)(variable), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetCombinerOutputParameterfvNV(stage uint32, portion uint32, pname uint32, params *float32) {
  C.glowGetCombinerOutputParameterfvNV(pGetCombinerOutputParameterfvNV, (C.GLenum)(stage), (C.GLenum)(portion), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetCombinerOutputParameterivNV(stage uint32, portion uint32, pname uint32, params *int32) {
  C.glowGetCombinerOutputParameterivNV(pGetCombinerOutputParameterivNV, (C.GLenum)(stage), (C.GLenum)(portion), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetCombinerStageParameterfvNV(stage uint32, pname uint32, params *float32) {
  C.glowGetCombinerStageParameterfvNV(pGetCombinerStageParameterfvNV, (C.GLenum)(stage), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetCompressedMultiTexImageEXT(texunit uint32, target uint32, lod int32, img unsafe.Pointer) {
  C.glowGetCompressedMultiTexImageEXT(pGetCompressedMultiTexImageEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLint)(lod), img)
}
// return a compressed texture image
func GetCompressedTexImage(target uint32, level int32, img unsafe.Pointer) {
  C.glowGetCompressedTexImage(pGetCompressedTexImage, (C.GLenum)(target), (C.GLint)(level), img)
}
func GetCompressedTexImageARB(target uint32, level int32, img unsafe.Pointer) {
  C.glowGetCompressedTexImageARB(pGetCompressedTexImageARB, (C.GLenum)(target), (C.GLint)(level), img)
}
func GetCompressedTextureImageEXT(texture uint32, target uint32, lod int32, img unsafe.Pointer) {
  C.glowGetCompressedTextureImageEXT(pGetCompressedTextureImageEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLint)(lod), img)
}
func GetConvolutionFilterEXT(target uint32, format uint32, xtype uint32, image unsafe.Pointer) {
  C.glowGetConvolutionFilterEXT(pGetConvolutionFilterEXT, (C.GLenum)(target), (C.GLenum)(format), (C.GLenum)(xtype), image)
}
func GetConvolutionParameterfvEXT(target uint32, pname uint32, params *float32) {
  C.glowGetConvolutionParameterfvEXT(pGetConvolutionParameterfvEXT, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetConvolutionParameterivEXT(target uint32, pname uint32, params *int32) {
  C.glowGetConvolutionParameterivEXT(pGetConvolutionParameterivEXT, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetConvolutionParameterxvOES(target uint32, pname uint32, params *int32) {
  C.glowGetConvolutionParameterxvOES(pGetConvolutionParameterxvOES, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLfixed)(unsafe.Pointer(params)))
}
// retrieve messages from the debug message log
func GetDebugMessageLog(count uint32, bufSize int32, sources *uint32, types *uint32, ids *uint32, severities *uint32, lengths *int32, messageLog *int8) uint32 {
  ret := C.glowGetDebugMessageLog(pGetDebugMessageLog, (C.GLuint)(count), (C.GLsizei)(bufSize), (*C.GLenum)(unsafe.Pointer(sources)), (*C.GLenum)(unsafe.Pointer(types)), (*C.GLuint)(unsafe.Pointer(ids)), (*C.GLenum)(unsafe.Pointer(severities)), (*C.GLsizei)(unsafe.Pointer(lengths)), (*C.GLchar)(unsafe.Pointer(messageLog)))
  return (uint32)(ret)
}
func GetDebugMessageLogAMD(count uint32, bufsize int32, categories *uint32, severities *uint32, ids *uint32, lengths *int32, message *int8) uint32 {
  ret := C.glowGetDebugMessageLogAMD(pGetDebugMessageLogAMD, (C.GLuint)(count), (C.GLsizei)(bufsize), (*C.GLenum)(unsafe.Pointer(categories)), (*C.GLuint)(unsafe.Pointer(severities)), (*C.GLuint)(unsafe.Pointer(ids)), (*C.GLsizei)(unsafe.Pointer(lengths)), (*C.GLchar)(unsafe.Pointer(message)))
  return (uint32)(ret)
}
func GetDebugMessageLogARB(count uint32, bufSize int32, sources *uint32, types *uint32, ids *uint32, severities *uint32, lengths *int32, messageLog *int8) uint32 {
  ret := C.glowGetDebugMessageLogARB(pGetDebugMessageLogARB, (C.GLuint)(count), (C.GLsizei)(bufSize), (*C.GLenum)(unsafe.Pointer(sources)), (*C.GLenum)(unsafe.Pointer(types)), (*C.GLuint)(unsafe.Pointer(ids)), (*C.GLenum)(unsafe.Pointer(severities)), (*C.GLsizei)(unsafe.Pointer(lengths)), (*C.GLchar)(unsafe.Pointer(messageLog)))
  return (uint32)(ret)
}
func GetDebugMessageLogKHR(count uint32, bufSize int32, sources *uint32, types *uint32, ids *uint32, severities *uint32, lengths *int32, messageLog *int8) uint32 {
  ret := C.glowGetDebugMessageLogKHR(pGetDebugMessageLogKHR, (C.GLuint)(count), (C.GLsizei)(bufSize), (*C.GLenum)(unsafe.Pointer(sources)), (*C.GLenum)(unsafe.Pointer(types)), (*C.GLuint)(unsafe.Pointer(ids)), (*C.GLenum)(unsafe.Pointer(severities)), (*C.GLsizei)(unsafe.Pointer(lengths)), (*C.GLchar)(unsafe.Pointer(messageLog)))
  return (uint32)(ret)
}
func GetDetailTexFuncSGIS(target uint32, points *float32) {
  C.glowGetDetailTexFuncSGIS(pGetDetailTexFuncSGIS, (C.GLenum)(target), (*C.GLfloat)(unsafe.Pointer(points)))
}
func GetDoubleIndexedvEXT(target uint32, index uint32, data *float64) {
  C.glowGetDoubleIndexedvEXT(pGetDoubleIndexedvEXT, (C.GLenum)(target), (C.GLuint)(index), (*C.GLdouble)(unsafe.Pointer(data)))
}
func GetDoublei_v(target uint32, index uint32, data *float64) {
  C.glowGetDoublei_v(pGetDoublei_v, (C.GLenum)(target), (C.GLuint)(index), (*C.GLdouble)(unsafe.Pointer(data)))
}
func GetDoublei_vEXT(pname uint32, index uint32, params *float64) {
  C.glowGetDoublei_vEXT(pGetDoublei_vEXT, (C.GLenum)(pname), (C.GLuint)(index), (*C.GLdouble)(unsafe.Pointer(params)))
}
func GetDoublev(pname uint32, data *float64) {
  C.glowGetDoublev(pGetDoublev, (C.GLenum)(pname), (*C.GLdouble)(unsafe.Pointer(data)))
}
// return error information
func GetError() uint32 {
  ret := C.glowGetError(pGetError)
  return (uint32)(ret)
}
func GetFenceivNV(fence uint32, pname uint32, params *int32) {
  C.glowGetFenceivNV(pGetFenceivNV, (C.GLuint)(fence), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetFinalCombinerInputParameterfvNV(variable uint32, pname uint32, params *float32) {
  C.glowGetFinalCombinerInputParameterfvNV(pGetFinalCombinerInputParameterfvNV, (C.GLenum)(variable), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetFinalCombinerInputParameterivNV(variable uint32, pname uint32, params *int32) {
  C.glowGetFinalCombinerInputParameterivNV(pGetFinalCombinerInputParameterivNV, (C.GLenum)(variable), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetFirstPerfQueryIdINTEL(queryId *uint32) {
  C.glowGetFirstPerfQueryIdINTEL(pGetFirstPerfQueryIdINTEL, (*C.GLuint)(unsafe.Pointer(queryId)))
}
func GetFixedvOES(pname uint32, params *int32) {
  C.glowGetFixedvOES(pGetFixedvOES, (C.GLenum)(pname), (*C.GLfixed)(unsafe.Pointer(params)))
}
func GetFloatIndexedvEXT(target uint32, index uint32, data *float32) {
  C.glowGetFloatIndexedvEXT(pGetFloatIndexedvEXT, (C.GLenum)(target), (C.GLuint)(index), (*C.GLfloat)(unsafe.Pointer(data)))
}
func GetFloati_v(target uint32, index uint32, data *float32) {
  C.glowGetFloati_v(pGetFloati_v, (C.GLenum)(target), (C.GLuint)(index), (*C.GLfloat)(unsafe.Pointer(data)))
}
func GetFloati_vEXT(pname uint32, index uint32, params *float32) {
  C.glowGetFloati_vEXT(pGetFloati_vEXT, (C.GLenum)(pname), (C.GLuint)(index), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetFloatv(pname uint32, data *float32) {
  C.glowGetFloatv(pGetFloatv, (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(data)))
}
func GetFogFuncSGIS(points *float32) {
  C.glowGetFogFuncSGIS(pGetFogFuncSGIS, (*C.GLfloat)(unsafe.Pointer(points)))
}
// query the bindings of color indices to user-defined varying out variables
func GetFragDataIndex(program uint32, name *int8) int32 {
  ret := C.glowGetFragDataIndex(pGetFragDataIndex, (C.GLuint)(program), (*C.GLchar)(unsafe.Pointer(name)))
  return (int32)(ret)
}
// query the bindings of color numbers to user-defined varying out variables
func GetFragDataLocation(program uint32, name *int8) int32 {
  ret := C.glowGetFragDataLocation(pGetFragDataLocation, (C.GLuint)(program), (*C.GLchar)(unsafe.Pointer(name)))
  return (int32)(ret)
}
func GetFragDataLocationEXT(program uint32, name *int8) int32 {
  ret := C.glowGetFragDataLocationEXT(pGetFragDataLocationEXT, (C.GLuint)(program), (*C.GLchar)(unsafe.Pointer(name)))
  return (int32)(ret)
}
func GetFragmentLightfvSGIX(light uint32, pname uint32, params *float32) {
  C.glowGetFragmentLightfvSGIX(pGetFragmentLightfvSGIX, (C.GLenum)(light), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetFragmentLightivSGIX(light uint32, pname uint32, params *int32) {
  C.glowGetFragmentLightivSGIX(pGetFragmentLightivSGIX, (C.GLenum)(light), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetFragmentMaterialfvSGIX(face uint32, pname uint32, params *float32) {
  C.glowGetFragmentMaterialfvSGIX(pGetFragmentMaterialfvSGIX, (C.GLenum)(face), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetFragmentMaterialivSGIX(face uint32, pname uint32, params *int32) {
  C.glowGetFragmentMaterialivSGIX(pGetFragmentMaterialivSGIX, (C.GLenum)(face), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
// retrieve information about attachments of a bound framebuffer object
func GetFramebufferAttachmentParameteriv(target uint32, attachment uint32, pname uint32, params *int32) {
  C.glowGetFramebufferAttachmentParameteriv(pGetFramebufferAttachmentParameteriv, (C.GLenum)(target), (C.GLenum)(attachment), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetFramebufferAttachmentParameterivEXT(target uint32, attachment uint32, pname uint32, params *int32) {
  C.glowGetFramebufferAttachmentParameterivEXT(pGetFramebufferAttachmentParameterivEXT, (C.GLenum)(target), (C.GLenum)(attachment), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetFramebufferParameteriv(target uint32, pname uint32, params *int32) {
  C.glowGetFramebufferParameteriv(pGetFramebufferParameteriv, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetFramebufferParameterivEXT(framebuffer uint32, pname uint32, params *int32) {
  C.glowGetFramebufferParameterivEXT(pGetFramebufferParameterivEXT, (C.GLuint)(framebuffer), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetGraphicsResetStatusARB() uint32 {
  ret := C.glowGetGraphicsResetStatusARB(pGetGraphicsResetStatusARB)
  return (uint32)(ret)
}
func GetHandleARB(pname uint32) uintptr {
  ret := C.glowGetHandleARB(pGetHandleARB, (C.GLenum)(pname))
  return (uintptr)(ret)
}
func GetHistogramEXT(target uint32, reset bool, format uint32, xtype uint32, values unsafe.Pointer) {
  C.glowGetHistogramEXT(pGetHistogramEXT, (C.GLenum)(target), (C.GLboolean)(boolToInt(reset)), (C.GLenum)(format), (C.GLenum)(xtype), values)
}
func GetHistogramParameterfvEXT(target uint32, pname uint32, params *float32) {
  C.glowGetHistogramParameterfvEXT(pGetHistogramParameterfvEXT, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetHistogramParameterivEXT(target uint32, pname uint32, params *int32) {
  C.glowGetHistogramParameterivEXT(pGetHistogramParameterivEXT, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetHistogramParameterxvOES(target uint32, pname uint32, params *int32) {
  C.glowGetHistogramParameterxvOES(pGetHistogramParameterxvOES, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLfixed)(unsafe.Pointer(params)))
}
func GetImageHandleARB(texture uint32, level int32, layered bool, layer int32, format uint32) uint64 {
  ret := C.glowGetImageHandleARB(pGetImageHandleARB, (C.GLuint)(texture), (C.GLint)(level), (C.GLboolean)(boolToInt(layered)), (C.GLint)(layer), (C.GLenum)(format))
  return (uint64)(ret)
}
func GetImageHandleNV(texture uint32, level int32, layered bool, layer int32, format uint32) uint64 {
  ret := C.glowGetImageHandleNV(pGetImageHandleNV, (C.GLuint)(texture), (C.GLint)(level), (C.GLboolean)(boolToInt(layered)), (C.GLint)(layer), (C.GLenum)(format))
  return (uint64)(ret)
}
func GetImageTransformParameterfvHP(target uint32, pname uint32, params *float32) {
  C.glowGetImageTransformParameterfvHP(pGetImageTransformParameterfvHP, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetImageTransformParameterivHP(target uint32, pname uint32, params *int32) {
  C.glowGetImageTransformParameterivHP(pGetImageTransformParameterivHP, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetInfoLogARB(obj uintptr, maxLength int32, length *int32, infoLog *int8) {
  C.glowGetInfoLogARB(pGetInfoLogARB, (C.GLhandleARB)(obj), (C.GLsizei)(maxLength), (*C.GLsizei)(unsafe.Pointer(length)), (*C.GLcharARB)(unsafe.Pointer(infoLog)))
}
func GetInstrumentsSGIX() int32 {
  ret := C.glowGetInstrumentsSGIX(pGetInstrumentsSGIX)
  return (int32)(ret)
}
func GetInteger64i_v(target uint32, index uint32, data *int64) {
  C.glowGetInteger64i_v(pGetInteger64i_v, (C.GLenum)(target), (C.GLuint)(index), (*C.GLint64)(unsafe.Pointer(data)))
}
func GetInteger64v(pname uint32, data *int64) {
  C.glowGetInteger64v(pGetInteger64v, (C.GLenum)(pname), (*C.GLint64)(unsafe.Pointer(data)))
}
func GetIntegerIndexedvEXT(target uint32, index uint32, data *int32) {
  C.glowGetIntegerIndexedvEXT(pGetIntegerIndexedvEXT, (C.GLenum)(target), (C.GLuint)(index), (*C.GLint)(unsafe.Pointer(data)))
}
func GetIntegeri_v(target uint32, index uint32, data *int32) {
  C.glowGetIntegeri_v(pGetIntegeri_v, (C.GLenum)(target), (C.GLuint)(index), (*C.GLint)(unsafe.Pointer(data)))
}
func GetIntegerui64i_vNV(value uint32, index uint32, result *uint64) {
  C.glowGetIntegerui64i_vNV(pGetIntegerui64i_vNV, (C.GLenum)(value), (C.GLuint)(index), (*C.GLuint64EXT)(unsafe.Pointer(result)))
}
func GetIntegerui64vNV(value uint32, result *uint64) {
  C.glowGetIntegerui64vNV(pGetIntegerui64vNV, (C.GLenum)(value), (*C.GLuint64EXT)(unsafe.Pointer(result)))
}
func GetIntegerv(pname uint32, data *int32) {
  C.glowGetIntegerv(pGetIntegerv, (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(data)))
}
func GetInternalformati64v(target uint32, internalformat uint32, pname uint32, bufSize int32, params *int64) {
  C.glowGetInternalformati64v(pGetInternalformati64v, (C.GLenum)(target), (C.GLenum)(internalformat), (C.GLenum)(pname), (C.GLsizei)(bufSize), (*C.GLint64)(unsafe.Pointer(params)))
}
func GetInternalformativ(target uint32, internalformat uint32, pname uint32, bufSize int32, params *int32) {
  C.glowGetInternalformativ(pGetInternalformativ, (C.GLenum)(target), (C.GLenum)(internalformat), (C.GLenum)(pname), (C.GLsizei)(bufSize), (*C.GLint)(unsafe.Pointer(params)))
}
func GetInvariantBooleanvEXT(id uint32, value uint32, data *bool) {
  C.glowGetInvariantBooleanvEXT(pGetInvariantBooleanvEXT, (C.GLuint)(id), (C.GLenum)(value), (*C.GLboolean)(unsafe.Pointer(data)))
}
func GetInvariantFloatvEXT(id uint32, value uint32, data *float32) {
  C.glowGetInvariantFloatvEXT(pGetInvariantFloatvEXT, (C.GLuint)(id), (C.GLenum)(value), (*C.GLfloat)(unsafe.Pointer(data)))
}
func GetInvariantIntegervEXT(id uint32, value uint32, data *int32) {
  C.glowGetInvariantIntegervEXT(pGetInvariantIntegervEXT, (C.GLuint)(id), (C.GLenum)(value), (*C.GLint)(unsafe.Pointer(data)))
}
func GetLightxOES(light uint32, pname uint32, params *int32) {
  C.glowGetLightxOES(pGetLightxOES, (C.GLenum)(light), (C.GLenum)(pname), (*C.GLfixed)(unsafe.Pointer(params)))
}
func GetLightxvOES(light uint32, pname uint32, params *int32) {
  C.glowGetLightxvOES(pGetLightxvOES, (C.GLenum)(light), (C.GLenum)(pname), (*C.GLfixed)(unsafe.Pointer(params)))
}
func GetListParameterfvSGIX(list uint32, pname uint32, params *float32) {
  C.glowGetListParameterfvSGIX(pGetListParameterfvSGIX, (C.GLuint)(list), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetListParameterivSGIX(list uint32, pname uint32, params *int32) {
  C.glowGetListParameterivSGIX(pGetListParameterivSGIX, (C.GLuint)(list), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetLocalConstantBooleanvEXT(id uint32, value uint32, data *bool) {
  C.glowGetLocalConstantBooleanvEXT(pGetLocalConstantBooleanvEXT, (C.GLuint)(id), (C.GLenum)(value), (*C.GLboolean)(unsafe.Pointer(data)))
}
func GetLocalConstantFloatvEXT(id uint32, value uint32, data *float32) {
  C.glowGetLocalConstantFloatvEXT(pGetLocalConstantFloatvEXT, (C.GLuint)(id), (C.GLenum)(value), (*C.GLfloat)(unsafe.Pointer(data)))
}
func GetLocalConstantIntegervEXT(id uint32, value uint32, data *int32) {
  C.glowGetLocalConstantIntegervEXT(pGetLocalConstantIntegervEXT, (C.GLuint)(id), (C.GLenum)(value), (*C.GLint)(unsafe.Pointer(data)))
}
func GetMapAttribParameterfvNV(target uint32, index uint32, pname uint32, params *float32) {
  C.glowGetMapAttribParameterfvNV(pGetMapAttribParameterfvNV, (C.GLenum)(target), (C.GLuint)(index), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetMapAttribParameterivNV(target uint32, index uint32, pname uint32, params *int32) {
  C.glowGetMapAttribParameterivNV(pGetMapAttribParameterivNV, (C.GLenum)(target), (C.GLuint)(index), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetMapControlPointsNV(target uint32, index uint32, xtype uint32, ustride int32, vstride int32, packed bool, points unsafe.Pointer) {
  C.glowGetMapControlPointsNV(pGetMapControlPointsNV, (C.GLenum)(target), (C.GLuint)(index), (C.GLenum)(xtype), (C.GLsizei)(ustride), (C.GLsizei)(vstride), (C.GLboolean)(boolToInt(packed)), points)
}
func GetMapParameterfvNV(target uint32, pname uint32, params *float32) {
  C.glowGetMapParameterfvNV(pGetMapParameterfvNV, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetMapParameterivNV(target uint32, pname uint32, params *int32) {
  C.glowGetMapParameterivNV(pGetMapParameterivNV, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetMapxvOES(target uint32, query uint32, v *int32) {
  C.glowGetMapxvOES(pGetMapxvOES, (C.GLenum)(target), (C.GLenum)(query), (*C.GLfixed)(unsafe.Pointer(v)))
}
func GetMaterialxOES(face uint32, pname uint32, param int32) {
  C.glowGetMaterialxOES(pGetMaterialxOES, (C.GLenum)(face), (C.GLenum)(pname), (C.GLfixed)(param))
}
func GetMaterialxvOES(face uint32, pname uint32, params *int32) {
  C.glowGetMaterialxvOES(pGetMaterialxvOES, (C.GLenum)(face), (C.GLenum)(pname), (*C.GLfixed)(unsafe.Pointer(params)))
}
func GetMinmaxEXT(target uint32, reset bool, format uint32, xtype uint32, values unsafe.Pointer) {
  C.glowGetMinmaxEXT(pGetMinmaxEXT, (C.GLenum)(target), (C.GLboolean)(boolToInt(reset)), (C.GLenum)(format), (C.GLenum)(xtype), values)
}
func GetMinmaxParameterfvEXT(target uint32, pname uint32, params *float32) {
  C.glowGetMinmaxParameterfvEXT(pGetMinmaxParameterfvEXT, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetMinmaxParameterivEXT(target uint32, pname uint32, params *int32) {
  C.glowGetMinmaxParameterivEXT(pGetMinmaxParameterivEXT, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetMultiTexEnvfvEXT(texunit uint32, target uint32, pname uint32, params *float32) {
  C.glowGetMultiTexEnvfvEXT(pGetMultiTexEnvfvEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetMultiTexEnvivEXT(texunit uint32, target uint32, pname uint32, params *int32) {
  C.glowGetMultiTexEnvivEXT(pGetMultiTexEnvivEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetMultiTexGendvEXT(texunit uint32, coord uint32, pname uint32, params *float64) {
  C.glowGetMultiTexGendvEXT(pGetMultiTexGendvEXT, (C.GLenum)(texunit), (C.GLenum)(coord), (C.GLenum)(pname), (*C.GLdouble)(unsafe.Pointer(params)))
}
func GetMultiTexGenfvEXT(texunit uint32, coord uint32, pname uint32, params *float32) {
  C.glowGetMultiTexGenfvEXT(pGetMultiTexGenfvEXT, (C.GLenum)(texunit), (C.GLenum)(coord), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetMultiTexGenivEXT(texunit uint32, coord uint32, pname uint32, params *int32) {
  C.glowGetMultiTexGenivEXT(pGetMultiTexGenivEXT, (C.GLenum)(texunit), (C.GLenum)(coord), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetMultiTexImageEXT(texunit uint32, target uint32, level int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
  C.glowGetMultiTexImageEXT(pGetMultiTexImageEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLint)(level), (C.GLenum)(format), (C.GLenum)(xtype), pixels)
}
func GetMultiTexLevelParameterfvEXT(texunit uint32, target uint32, level int32, pname uint32, params *float32) {
  C.glowGetMultiTexLevelParameterfvEXT(pGetMultiTexLevelParameterfvEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLint)(level), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetMultiTexLevelParameterivEXT(texunit uint32, target uint32, level int32, pname uint32, params *int32) {
  C.glowGetMultiTexLevelParameterivEXT(pGetMultiTexLevelParameterivEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLint)(level), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetMultiTexParameterIivEXT(texunit uint32, target uint32, pname uint32, params *int32) {
  C.glowGetMultiTexParameterIivEXT(pGetMultiTexParameterIivEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetMultiTexParameterIuivEXT(texunit uint32, target uint32, pname uint32, params *uint32) {
  C.glowGetMultiTexParameterIuivEXT(pGetMultiTexParameterIuivEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLenum)(pname), (*C.GLuint)(unsafe.Pointer(params)))
}
func GetMultiTexParameterfvEXT(texunit uint32, target uint32, pname uint32, params *float32) {
  C.glowGetMultiTexParameterfvEXT(pGetMultiTexParameterfvEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetMultiTexParameterivEXT(texunit uint32, target uint32, pname uint32, params *int32) {
  C.glowGetMultiTexParameterivEXT(pGetMultiTexParameterivEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
// retrieve the location of a sample
func GetMultisamplefv(pname uint32, index uint32, val *float32) {
  C.glowGetMultisamplefv(pGetMultisamplefv, (C.GLenum)(pname), (C.GLuint)(index), (*C.GLfloat)(unsafe.Pointer(val)))
}
func GetMultisamplefvNV(pname uint32, index uint32, val *float32) {
  C.glowGetMultisamplefvNV(pGetMultisamplefvNV, (C.GLenum)(pname), (C.GLuint)(index), (*C.GLfloat)(unsafe.Pointer(val)))
}
func GetNamedBufferParameterivEXT(buffer uint32, pname uint32, params *int32) {
  C.glowGetNamedBufferParameterivEXT(pGetNamedBufferParameterivEXT, (C.GLuint)(buffer), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetNamedBufferParameterui64vNV(buffer uint32, pname uint32, params *uint64) {
  C.glowGetNamedBufferParameterui64vNV(pGetNamedBufferParameterui64vNV, (C.GLuint)(buffer), (C.GLenum)(pname), (*C.GLuint64EXT)(unsafe.Pointer(params)))
}
func GetNamedBufferPointervEXT(buffer uint32, pname uint32, params *unsafe.Pointer) {
  C.glowGetNamedBufferPointervEXT(pGetNamedBufferPointervEXT, (C.GLuint)(buffer), (C.GLenum)(pname), params)
}
func GetNamedBufferSubDataEXT(buffer uint32, offset int, size int, data unsafe.Pointer) {
  C.glowGetNamedBufferSubDataEXT(pGetNamedBufferSubDataEXT, (C.GLuint)(buffer), (C.GLintptr)(offset), (C.GLsizeiptr)(size), data)
}
func GetNamedFramebufferAttachmentParameterivEXT(framebuffer uint32, attachment uint32, pname uint32, params *int32) {
  C.glowGetNamedFramebufferAttachmentParameterivEXT(pGetNamedFramebufferAttachmentParameterivEXT, (C.GLuint)(framebuffer), (C.GLenum)(attachment), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetNamedFramebufferParameterivEXT(framebuffer uint32, pname uint32, params *int32) {
  C.glowGetNamedFramebufferParameterivEXT(pGetNamedFramebufferParameterivEXT, (C.GLuint)(framebuffer), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetNamedProgramLocalParameterIivEXT(program uint32, target uint32, index uint32, params *int32) {
  C.glowGetNamedProgramLocalParameterIivEXT(pGetNamedProgramLocalParameterIivEXT, (C.GLuint)(program), (C.GLenum)(target), (C.GLuint)(index), (*C.GLint)(unsafe.Pointer(params)))
}
func GetNamedProgramLocalParameterIuivEXT(program uint32, target uint32, index uint32, params *uint32) {
  C.glowGetNamedProgramLocalParameterIuivEXT(pGetNamedProgramLocalParameterIuivEXT, (C.GLuint)(program), (C.GLenum)(target), (C.GLuint)(index), (*C.GLuint)(unsafe.Pointer(params)))
}
func GetNamedProgramLocalParameterdvEXT(program uint32, target uint32, index uint32, params *float64) {
  C.glowGetNamedProgramLocalParameterdvEXT(pGetNamedProgramLocalParameterdvEXT, (C.GLuint)(program), (C.GLenum)(target), (C.GLuint)(index), (*C.GLdouble)(unsafe.Pointer(params)))
}
func GetNamedProgramLocalParameterfvEXT(program uint32, target uint32, index uint32, params *float32) {
  C.glowGetNamedProgramLocalParameterfvEXT(pGetNamedProgramLocalParameterfvEXT, (C.GLuint)(program), (C.GLenum)(target), (C.GLuint)(index), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetNamedProgramStringEXT(program uint32, target uint32, pname uint32, xstring unsafe.Pointer) {
  C.glowGetNamedProgramStringEXT(pGetNamedProgramStringEXT, (C.GLuint)(program), (C.GLenum)(target), (C.GLenum)(pname), xstring)
}
func GetNamedProgramivEXT(program uint32, target uint32, pname uint32, params *int32) {
  C.glowGetNamedProgramivEXT(pGetNamedProgramivEXT, (C.GLuint)(program), (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetNamedRenderbufferParameterivEXT(renderbuffer uint32, pname uint32, params *int32) {
  C.glowGetNamedRenderbufferParameterivEXT(pGetNamedRenderbufferParameterivEXT, (C.GLuint)(renderbuffer), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetNamedStringARB(namelen int32, name *int8, bufSize int32, stringlen *int32, xstring *int8) {
  C.glowGetNamedStringARB(pGetNamedStringARB, (C.GLint)(namelen), (*C.GLchar)(unsafe.Pointer(name)), (C.GLsizei)(bufSize), (*C.GLint)(unsafe.Pointer(stringlen)), (*C.GLchar)(unsafe.Pointer(xstring)))
}
func GetNamedStringivARB(namelen int32, name *int8, pname uint32, params *int32) {
  C.glowGetNamedStringivARB(pGetNamedStringivARB, (C.GLint)(namelen), (*C.GLchar)(unsafe.Pointer(name)), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetNextPerfQueryIdINTEL(queryId uint32, nextQueryId *uint32) {
  C.glowGetNextPerfQueryIdINTEL(pGetNextPerfQueryIdINTEL, (C.GLuint)(queryId), (*C.GLuint)(unsafe.Pointer(nextQueryId)))
}
func GetObjectBufferfvATI(buffer uint32, pname uint32, params *float32) {
  C.glowGetObjectBufferfvATI(pGetObjectBufferfvATI, (C.GLuint)(buffer), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetObjectBufferivATI(buffer uint32, pname uint32, params *int32) {
  C.glowGetObjectBufferivATI(pGetObjectBufferivATI, (C.GLuint)(buffer), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
// retrieve the label of a named object identified within a namespace
func GetObjectLabel(identifier uint32, name uint32, bufSize int32, length *int32, label *int8) {
  C.glowGetObjectLabel(pGetObjectLabel, (C.GLenum)(identifier), (C.GLuint)(name), (C.GLsizei)(bufSize), (*C.GLsizei)(unsafe.Pointer(length)), (*C.GLchar)(unsafe.Pointer(label)))
}
func GetObjectLabelEXT(xtype uint32, object uint32, bufSize int32, length *int32, label *int8) {
  C.glowGetObjectLabelEXT(pGetObjectLabelEXT, (C.GLenum)(xtype), (C.GLuint)(object), (C.GLsizei)(bufSize), (*C.GLsizei)(unsafe.Pointer(length)), (*C.GLchar)(unsafe.Pointer(label)))
}
func GetObjectLabelKHR(identifier uint32, name uint32, bufSize int32, length *int32, label *int8) {
  C.glowGetObjectLabelKHR(pGetObjectLabelKHR, (C.GLenum)(identifier), (C.GLuint)(name), (C.GLsizei)(bufSize), (*C.GLsizei)(unsafe.Pointer(length)), (*C.GLchar)(unsafe.Pointer(label)))
}
func GetObjectParameterfvARB(obj uintptr, pname uint32, params *float32) {
  C.glowGetObjectParameterfvARB(pGetObjectParameterfvARB, (C.GLhandleARB)(obj), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetObjectParameterivAPPLE(objectType uint32, name uint32, pname uint32, params *int32) {
  C.glowGetObjectParameterivAPPLE(pGetObjectParameterivAPPLE, (C.GLenum)(objectType), (C.GLuint)(name), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetObjectParameterivARB(obj uintptr, pname uint32, params *int32) {
  C.glowGetObjectParameterivARB(pGetObjectParameterivARB, (C.GLhandleARB)(obj), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
// retrieve the label of a sync object identified by a pointer
func GetObjectPtrLabel(ptr unsafe.Pointer, bufSize int32, length *int32, label *int8) {
  C.glowGetObjectPtrLabel(pGetObjectPtrLabel, ptr, (C.GLsizei)(bufSize), (*C.GLsizei)(unsafe.Pointer(length)), (*C.GLchar)(unsafe.Pointer(label)))
}
func GetObjectPtrLabelKHR(ptr unsafe.Pointer, bufSize int32, length *int32, label *int8) {
  C.glowGetObjectPtrLabelKHR(pGetObjectPtrLabelKHR, ptr, (C.GLsizei)(bufSize), (*C.GLsizei)(unsafe.Pointer(length)), (*C.GLchar)(unsafe.Pointer(label)))
}
func GetOcclusionQueryivNV(id uint32, pname uint32, params *int32) {
  C.glowGetOcclusionQueryivNV(pGetOcclusionQueryivNV, (C.GLuint)(id), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetOcclusionQueryuivNV(id uint32, pname uint32, params *uint32) {
  C.glowGetOcclusionQueryuivNV(pGetOcclusionQueryuivNV, (C.GLuint)(id), (C.GLenum)(pname), (*C.GLuint)(unsafe.Pointer(params)))
}
func GetPathColorGenfvNV(color uint32, pname uint32, value *float32) {
  C.glowGetPathColorGenfvNV(pGetPathColorGenfvNV, (C.GLenum)(color), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(value)))
}
func GetPathColorGenivNV(color uint32, pname uint32, value *int32) {
  C.glowGetPathColorGenivNV(pGetPathColorGenivNV, (C.GLenum)(color), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(value)))
}
func GetPathCommandsNV(path uint32, commands *uint8) {
  C.glowGetPathCommandsNV(pGetPathCommandsNV, (C.GLuint)(path), (*C.GLubyte)(unsafe.Pointer(commands)))
}
func GetPathCoordsNV(path uint32, coords *float32) {
  C.glowGetPathCoordsNV(pGetPathCoordsNV, (C.GLuint)(path), (*C.GLfloat)(unsafe.Pointer(coords)))
}
func GetPathDashArrayNV(path uint32, dashArray *float32) {
  C.glowGetPathDashArrayNV(pGetPathDashArrayNV, (C.GLuint)(path), (*C.GLfloat)(unsafe.Pointer(dashArray)))
}
func GetPathLengthNV(path uint32, startSegment int32, numSegments int32) float32 {
  ret := C.glowGetPathLengthNV(pGetPathLengthNV, (C.GLuint)(path), (C.GLsizei)(startSegment), (C.GLsizei)(numSegments))
  return (float32)(ret)
}
func GetPathMetricRangeNV(metricQueryMask uint32, firstPathName uint32, numPaths int32, stride int32, metrics *float32) {
  C.glowGetPathMetricRangeNV(pGetPathMetricRangeNV, (C.GLbitfield)(metricQueryMask), (C.GLuint)(firstPathName), (C.GLsizei)(numPaths), (C.GLsizei)(stride), (*C.GLfloat)(unsafe.Pointer(metrics)))
}
func GetPathMetricsNV(metricQueryMask uint32, numPaths int32, pathNameType uint32, paths unsafe.Pointer, pathBase uint32, stride int32, metrics *float32) {
  C.glowGetPathMetricsNV(pGetPathMetricsNV, (C.GLbitfield)(metricQueryMask), (C.GLsizei)(numPaths), (C.GLenum)(pathNameType), paths, (C.GLuint)(pathBase), (C.GLsizei)(stride), (*C.GLfloat)(unsafe.Pointer(metrics)))
}
func GetPathParameterfvNV(path uint32, pname uint32, value *float32) {
  C.glowGetPathParameterfvNV(pGetPathParameterfvNV, (C.GLuint)(path), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(value)))
}
func GetPathParameterivNV(path uint32, pname uint32, value *int32) {
  C.glowGetPathParameterivNV(pGetPathParameterivNV, (C.GLuint)(path), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(value)))
}
func GetPathSpacingNV(pathListMode uint32, numPaths int32, pathNameType uint32, paths unsafe.Pointer, pathBase uint32, advanceScale float32, kerningScale float32, transformType uint32, returnedSpacing *float32) {
  C.glowGetPathSpacingNV(pGetPathSpacingNV, (C.GLenum)(pathListMode), (C.GLsizei)(numPaths), (C.GLenum)(pathNameType), paths, (C.GLuint)(pathBase), (C.GLfloat)(advanceScale), (C.GLfloat)(kerningScale), (C.GLenum)(transformType), (*C.GLfloat)(unsafe.Pointer(returnedSpacing)))
}
func GetPathTexGenfvNV(texCoordSet uint32, pname uint32, value *float32) {
  C.glowGetPathTexGenfvNV(pGetPathTexGenfvNV, (C.GLenum)(texCoordSet), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(value)))
}
func GetPathTexGenivNV(texCoordSet uint32, pname uint32, value *int32) {
  C.glowGetPathTexGenivNV(pGetPathTexGenivNV, (C.GLenum)(texCoordSet), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(value)))
}
func GetPerfCounterInfoINTEL(queryId uint32, counterId uint32, counterNameLength uint32, counterName *int8, counterDescLength uint32, counterDesc *int8, counterOffset *uint32, counterDataSize *uint32, counterTypeEnum *uint32, counterDataTypeEnum *uint32, rawCounterMaxValue *uint64) {
  C.glowGetPerfCounterInfoINTEL(pGetPerfCounterInfoINTEL, (C.GLuint)(queryId), (C.GLuint)(counterId), (C.GLuint)(counterNameLength), (*C.GLchar)(unsafe.Pointer(counterName)), (C.GLuint)(counterDescLength), (*C.GLchar)(unsafe.Pointer(counterDesc)), (*C.GLuint)(unsafe.Pointer(counterOffset)), (*C.GLuint)(unsafe.Pointer(counterDataSize)), (*C.GLuint)(unsafe.Pointer(counterTypeEnum)), (*C.GLuint)(unsafe.Pointer(counterDataTypeEnum)), (*C.GLuint64)(unsafe.Pointer(rawCounterMaxValue)))
}
func GetPerfMonitorCounterDataAMD(monitor uint32, pname uint32, dataSize int32, data *uint32, bytesWritten *int32) {
  C.glowGetPerfMonitorCounterDataAMD(pGetPerfMonitorCounterDataAMD, (C.GLuint)(monitor), (C.GLenum)(pname), (C.GLsizei)(dataSize), (*C.GLuint)(unsafe.Pointer(data)), (*C.GLint)(unsafe.Pointer(bytesWritten)))
}
func GetPerfMonitorCounterInfoAMD(group uint32, counter uint32, pname uint32, data unsafe.Pointer) {
  C.glowGetPerfMonitorCounterInfoAMD(pGetPerfMonitorCounterInfoAMD, (C.GLuint)(group), (C.GLuint)(counter), (C.GLenum)(pname), data)
}
func GetPerfMonitorCounterStringAMD(group uint32, counter uint32, bufSize int32, length *int32, counterString *int8) {
  C.glowGetPerfMonitorCounterStringAMD(pGetPerfMonitorCounterStringAMD, (C.GLuint)(group), (C.GLuint)(counter), (C.GLsizei)(bufSize), (*C.GLsizei)(unsafe.Pointer(length)), (*C.GLchar)(unsafe.Pointer(counterString)))
}
func GetPerfMonitorCountersAMD(group uint32, numCounters *int32, maxActiveCounters *int32, counterSize int32, counters *uint32) {
  C.glowGetPerfMonitorCountersAMD(pGetPerfMonitorCountersAMD, (C.GLuint)(group), (*C.GLint)(unsafe.Pointer(numCounters)), (*C.GLint)(unsafe.Pointer(maxActiveCounters)), (C.GLsizei)(counterSize), (*C.GLuint)(unsafe.Pointer(counters)))
}
func GetPerfMonitorGroupStringAMD(group uint32, bufSize int32, length *int32, groupString *int8) {
  C.glowGetPerfMonitorGroupStringAMD(pGetPerfMonitorGroupStringAMD, (C.GLuint)(group), (C.GLsizei)(bufSize), (*C.GLsizei)(unsafe.Pointer(length)), (*C.GLchar)(unsafe.Pointer(groupString)))
}
func GetPerfMonitorGroupsAMD(numGroups *int32, groupsSize int32, groups *uint32) {
  C.glowGetPerfMonitorGroupsAMD(pGetPerfMonitorGroupsAMD, (*C.GLint)(unsafe.Pointer(numGroups)), (C.GLsizei)(groupsSize), (*C.GLuint)(unsafe.Pointer(groups)))
}
func GetPerfQueryDataINTEL(queryHandle uint32, flags uint32, dataSize int32, data unsafe.Pointer, bytesWritten *uint32) {
  C.glowGetPerfQueryDataINTEL(pGetPerfQueryDataINTEL, (C.GLuint)(queryHandle), (C.GLuint)(flags), (C.GLsizei)(dataSize), data, (*C.GLuint)(unsafe.Pointer(bytesWritten)))
}
func GetPerfQueryIdByNameINTEL(queryName *int8, queryId *uint32) {
  C.glowGetPerfQueryIdByNameINTEL(pGetPerfQueryIdByNameINTEL, (*C.GLchar)(unsafe.Pointer(queryName)), (*C.GLuint)(unsafe.Pointer(queryId)))
}
func GetPerfQueryInfoINTEL(queryId uint32, queryNameLength uint32, queryName *int8, dataSize *uint32, noCounters *uint32, noInstances *uint32, capsMask *uint32) {
  C.glowGetPerfQueryInfoINTEL(pGetPerfQueryInfoINTEL, (C.GLuint)(queryId), (C.GLuint)(queryNameLength), (*C.GLchar)(unsafe.Pointer(queryName)), (*C.GLuint)(unsafe.Pointer(dataSize)), (*C.GLuint)(unsafe.Pointer(noCounters)), (*C.GLuint)(unsafe.Pointer(noInstances)), (*C.GLuint)(unsafe.Pointer(capsMask)))
}
func GetPixelMapxv(xmap uint32, size int32, values *int32) {
  C.glowGetPixelMapxv(pGetPixelMapxv, (C.GLenum)(xmap), (C.GLint)(size), (*C.GLfixed)(unsafe.Pointer(values)))
}
func GetPixelTexGenParameterfvSGIS(pname uint32, params *float32) {
  C.glowGetPixelTexGenParameterfvSGIS(pGetPixelTexGenParameterfvSGIS, (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetPixelTexGenParameterivSGIS(pname uint32, params *int32) {
  C.glowGetPixelTexGenParameterivSGIS(pGetPixelTexGenParameterivSGIS, (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetPixelTransformParameterfvEXT(target uint32, pname uint32, params *float32) {
  C.glowGetPixelTransformParameterfvEXT(pGetPixelTransformParameterfvEXT, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetPixelTransformParameterivEXT(target uint32, pname uint32, params *int32) {
  C.glowGetPixelTransformParameterivEXT(pGetPixelTransformParameterivEXT, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetPointerIndexedvEXT(target uint32, index uint32, data *unsafe.Pointer) {
  C.glowGetPointerIndexedvEXT(pGetPointerIndexedvEXT, (C.GLenum)(target), (C.GLuint)(index), data)
}
func GetPointeri_vEXT(pname uint32, index uint32, params *unsafe.Pointer) {
  C.glowGetPointeri_vEXT(pGetPointeri_vEXT, (C.GLenum)(pname), (C.GLuint)(index), params)
}
// return the address of the specified pointer
func GetPointerv(pname uint32, params *unsafe.Pointer) {
  C.glowGetPointerv(pGetPointerv, (C.GLenum)(pname), params)
}
func GetPointervEXT(pname uint32, params *unsafe.Pointer) {
  C.glowGetPointervEXT(pGetPointervEXT, (C.GLenum)(pname), params)
}
func GetPointervKHR(pname uint32, params *unsafe.Pointer) {
  C.glowGetPointervKHR(pGetPointervKHR, (C.GLenum)(pname), params)
}
// return a binary representation of a program object's compiled and linked executable source
func GetProgramBinary(program uint32, bufSize int32, length *int32, binaryFormat *uint32, binary unsafe.Pointer) {
  C.glowGetProgramBinary(pGetProgramBinary, (C.GLuint)(program), (C.GLsizei)(bufSize), (*C.GLsizei)(unsafe.Pointer(length)), (*C.GLenum)(unsafe.Pointer(binaryFormat)), binary)
}
func GetProgramEnvParameterIivNV(target uint32, index uint32, params *int32) {
  C.glowGetProgramEnvParameterIivNV(pGetProgramEnvParameterIivNV, (C.GLenum)(target), (C.GLuint)(index), (*C.GLint)(unsafe.Pointer(params)))
}
func GetProgramEnvParameterIuivNV(target uint32, index uint32, params *uint32) {
  C.glowGetProgramEnvParameterIuivNV(pGetProgramEnvParameterIuivNV, (C.GLenum)(target), (C.GLuint)(index), (*C.GLuint)(unsafe.Pointer(params)))
}
func GetProgramEnvParameterdvARB(target uint32, index uint32, params *float64) {
  C.glowGetProgramEnvParameterdvARB(pGetProgramEnvParameterdvARB, (C.GLenum)(target), (C.GLuint)(index), (*C.GLdouble)(unsafe.Pointer(params)))
}
func GetProgramEnvParameterfvARB(target uint32, index uint32, params *float32) {
  C.glowGetProgramEnvParameterfvARB(pGetProgramEnvParameterfvARB, (C.GLenum)(target), (C.GLuint)(index), (*C.GLfloat)(unsafe.Pointer(params)))
}
// Returns the information log for a program object
func GetProgramInfoLog(program uint32, bufSize int32, length *int32, infoLog *int8) {
  C.glowGetProgramInfoLog(pGetProgramInfoLog, (C.GLuint)(program), (C.GLsizei)(bufSize), (*C.GLsizei)(unsafe.Pointer(length)), (*C.GLchar)(unsafe.Pointer(infoLog)))
}
func GetProgramInterfaceiv(program uint32, programInterface uint32, pname uint32, params *int32) {
  C.glowGetProgramInterfaceiv(pGetProgramInterfaceiv, (C.GLuint)(program), (C.GLenum)(programInterface), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetProgramLocalParameterIivNV(target uint32, index uint32, params *int32) {
  C.glowGetProgramLocalParameterIivNV(pGetProgramLocalParameterIivNV, (C.GLenum)(target), (C.GLuint)(index), (*C.GLint)(unsafe.Pointer(params)))
}
func GetProgramLocalParameterIuivNV(target uint32, index uint32, params *uint32) {
  C.glowGetProgramLocalParameterIuivNV(pGetProgramLocalParameterIuivNV, (C.GLenum)(target), (C.GLuint)(index), (*C.GLuint)(unsafe.Pointer(params)))
}
func GetProgramLocalParameterdvARB(target uint32, index uint32, params *float64) {
  C.glowGetProgramLocalParameterdvARB(pGetProgramLocalParameterdvARB, (C.GLenum)(target), (C.GLuint)(index), (*C.GLdouble)(unsafe.Pointer(params)))
}
func GetProgramLocalParameterfvARB(target uint32, index uint32, params *float32) {
  C.glowGetProgramLocalParameterfvARB(pGetProgramLocalParameterfvARB, (C.GLenum)(target), (C.GLuint)(index), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetProgramNamedParameterdvNV(id uint32, len int32, name *uint8, params *float64) {
  C.glowGetProgramNamedParameterdvNV(pGetProgramNamedParameterdvNV, (C.GLuint)(id), (C.GLsizei)(len), (*C.GLubyte)(unsafe.Pointer(name)), (*C.GLdouble)(unsafe.Pointer(params)))
}
func GetProgramNamedParameterfvNV(id uint32, len int32, name *uint8, params *float32) {
  C.glowGetProgramNamedParameterfvNV(pGetProgramNamedParameterfvNV, (C.GLuint)(id), (C.GLsizei)(len), (*C.GLubyte)(unsafe.Pointer(name)), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetProgramParameterdvNV(target uint32, index uint32, pname uint32, params *float64) {
  C.glowGetProgramParameterdvNV(pGetProgramParameterdvNV, (C.GLenum)(target), (C.GLuint)(index), (C.GLenum)(pname), (*C.GLdouble)(unsafe.Pointer(params)))
}
func GetProgramParameterfvNV(target uint32, index uint32, pname uint32, params *float32) {
  C.glowGetProgramParameterfvNV(pGetProgramParameterfvNV, (C.GLenum)(target), (C.GLuint)(index), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
// retrieve the info log string from a program pipeline object
func GetProgramPipelineInfoLog(pipeline uint32, bufSize int32, length *int32, infoLog *int8) {
  C.glowGetProgramPipelineInfoLog(pGetProgramPipelineInfoLog, (C.GLuint)(pipeline), (C.GLsizei)(bufSize), (*C.GLsizei)(unsafe.Pointer(length)), (*C.GLchar)(unsafe.Pointer(infoLog)))
}
func GetProgramPipelineInfoLogEXT(pipeline uint32, bufSize int32, length *int32, infoLog *int8) {
  C.glowGetProgramPipelineInfoLogEXT(pGetProgramPipelineInfoLogEXT, (C.GLuint)(pipeline), (C.GLsizei)(bufSize), (*C.GLsizei)(unsafe.Pointer(length)), (*C.GLchar)(unsafe.Pointer(infoLog)))
}
func GetProgramPipelineiv(pipeline uint32, pname uint32, params *int32) {
  C.glowGetProgramPipelineiv(pGetProgramPipelineiv, (C.GLuint)(pipeline), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetProgramPipelineivEXT(pipeline uint32, pname uint32, params *int32) {
  C.glowGetProgramPipelineivEXT(pGetProgramPipelineivEXT, (C.GLuint)(pipeline), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
// query the index of a named resource within a program
func GetProgramResourceIndex(program uint32, programInterface uint32, name *int8) uint32 {
  ret := C.glowGetProgramResourceIndex(pGetProgramResourceIndex, (C.GLuint)(program), (C.GLenum)(programInterface), (*C.GLchar)(unsafe.Pointer(name)))
  return (uint32)(ret)
}
// query the location of a named resource within a program
func GetProgramResourceLocation(program uint32, programInterface uint32, name *int8) int32 {
  ret := C.glowGetProgramResourceLocation(pGetProgramResourceLocation, (C.GLuint)(program), (C.GLenum)(programInterface), (*C.GLchar)(unsafe.Pointer(name)))
  return (int32)(ret)
}
// query the fragment color index of a named variable within a program
func GetProgramResourceLocationIndex(program uint32, programInterface uint32, name *int8) int32 {
  ret := C.glowGetProgramResourceLocationIndex(pGetProgramResourceLocationIndex, (C.GLuint)(program), (C.GLenum)(programInterface), (*C.GLchar)(unsafe.Pointer(name)))
  return (int32)(ret)
}
// query the name of an indexed resource within a program
func GetProgramResourceName(program uint32, programInterface uint32, index uint32, bufSize int32, length *int32, name *int8) {
  C.glowGetProgramResourceName(pGetProgramResourceName, (C.GLuint)(program), (C.GLenum)(programInterface), (C.GLuint)(index), (C.GLsizei)(bufSize), (*C.GLsizei)(unsafe.Pointer(length)), (*C.GLchar)(unsafe.Pointer(name)))
}
func GetProgramResourceiv(program uint32, programInterface uint32, index uint32, propCount int32, props *uint32, bufSize int32, length *int32, params *int32) {
  C.glowGetProgramResourceiv(pGetProgramResourceiv, (C.GLuint)(program), (C.GLenum)(programInterface), (C.GLuint)(index), (C.GLsizei)(propCount), (*C.GLenum)(unsafe.Pointer(props)), (C.GLsizei)(bufSize), (*C.GLsizei)(unsafe.Pointer(length)), (*C.GLint)(unsafe.Pointer(params)))
}
func GetProgramStageiv(program uint32, shadertype uint32, pname uint32, values *int32) {
  C.glowGetProgramStageiv(pGetProgramStageiv, (C.GLuint)(program), (C.GLenum)(shadertype), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(values)))
}
func GetProgramStringARB(target uint32, pname uint32, xstring unsafe.Pointer) {
  C.glowGetProgramStringARB(pGetProgramStringARB, (C.GLenum)(target), (C.GLenum)(pname), xstring)
}
func GetProgramStringNV(id uint32, pname uint32, program *uint8) {
  C.glowGetProgramStringNV(pGetProgramStringNV, (C.GLuint)(id), (C.GLenum)(pname), (*C.GLubyte)(unsafe.Pointer(program)))
}
func GetProgramSubroutineParameteruivNV(target uint32, index uint32, param *uint32) {
  C.glowGetProgramSubroutineParameteruivNV(pGetProgramSubroutineParameteruivNV, (C.GLenum)(target), (C.GLuint)(index), (*C.GLuint)(unsafe.Pointer(param)))
}
// Returns a parameter from a program object
func GetProgramiv(program uint32, pname uint32, params *int32) {
  C.glowGetProgramiv(pGetProgramiv, (C.GLuint)(program), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetProgramivARB(target uint32, pname uint32, params *int32) {
  C.glowGetProgramivARB(pGetProgramivARB, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetProgramivNV(id uint32, pname uint32, params *int32) {
  C.glowGetProgramivNV(pGetProgramivNV, (C.GLuint)(id), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
// return parameters of an indexed query object target
func GetQueryIndexediv(target uint32, index uint32, pname uint32, params *int32) {
  C.glowGetQueryIndexediv(pGetQueryIndexediv, (C.GLenum)(target), (C.GLuint)(index), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetQueryObjecti64v(id uint32, pname uint32, params *int64) {
  C.glowGetQueryObjecti64v(pGetQueryObjecti64v, (C.GLuint)(id), (C.GLenum)(pname), (*C.GLint64)(unsafe.Pointer(params)))
}
func GetQueryObjecti64vEXT(id uint32, pname uint32, params *int64) {
  C.glowGetQueryObjecti64vEXT(pGetQueryObjecti64vEXT, (C.GLuint)(id), (C.GLenum)(pname), (*C.GLint64)(unsafe.Pointer(params)))
}
func GetQueryObjectiv(id uint32, pname uint32, params *int32) {
  C.glowGetQueryObjectiv(pGetQueryObjectiv, (C.GLuint)(id), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetQueryObjectivARB(id uint32, pname uint32, params *int32) {
  C.glowGetQueryObjectivARB(pGetQueryObjectivARB, (C.GLuint)(id), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetQueryObjectui64v(id uint32, pname uint32, params *uint64) {
  C.glowGetQueryObjectui64v(pGetQueryObjectui64v, (C.GLuint)(id), (C.GLenum)(pname), (*C.GLuint64)(unsafe.Pointer(params)))
}
func GetQueryObjectui64vEXT(id uint32, pname uint32, params *uint64) {
  C.glowGetQueryObjectui64vEXT(pGetQueryObjectui64vEXT, (C.GLuint)(id), (C.GLenum)(pname), (*C.GLuint64)(unsafe.Pointer(params)))
}
func GetQueryObjectuiv(id uint32, pname uint32, params *uint32) {
  C.glowGetQueryObjectuiv(pGetQueryObjectuiv, (C.GLuint)(id), (C.GLenum)(pname), (*C.GLuint)(unsafe.Pointer(params)))
}
func GetQueryObjectuivARB(id uint32, pname uint32, params *uint32) {
  C.glowGetQueryObjectuivARB(pGetQueryObjectuivARB, (C.GLuint)(id), (C.GLenum)(pname), (*C.GLuint)(unsafe.Pointer(params)))
}
// return parameters of a query object target
func GetQueryiv(target uint32, pname uint32, params *int32) {
  C.glowGetQueryiv(pGetQueryiv, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetQueryivARB(target uint32, pname uint32, params *int32) {
  C.glowGetQueryivARB(pGetQueryivARB, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
// retrieve information about a bound renderbuffer object
func GetRenderbufferParameteriv(target uint32, pname uint32, params *int32) {
  C.glowGetRenderbufferParameteriv(pGetRenderbufferParameteriv, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetRenderbufferParameterivEXT(target uint32, pname uint32, params *int32) {
  C.glowGetRenderbufferParameterivEXT(pGetRenderbufferParameterivEXT, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetSamplerParameterIiv(sampler uint32, pname uint32, params *int32) {
  C.glowGetSamplerParameterIiv(pGetSamplerParameterIiv, (C.GLuint)(sampler), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetSamplerParameterIuiv(sampler uint32, pname uint32, params *uint32) {
  C.glowGetSamplerParameterIuiv(pGetSamplerParameterIuiv, (C.GLuint)(sampler), (C.GLenum)(pname), (*C.GLuint)(unsafe.Pointer(params)))
}
func GetSamplerParameterfv(sampler uint32, pname uint32, params *float32) {
  C.glowGetSamplerParameterfv(pGetSamplerParameterfv, (C.GLuint)(sampler), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetSamplerParameteriv(sampler uint32, pname uint32, params *int32) {
  C.glowGetSamplerParameteriv(pGetSamplerParameteriv, (C.GLuint)(sampler), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetSeparableFilterEXT(target uint32, format uint32, xtype uint32, row unsafe.Pointer, column unsafe.Pointer, span unsafe.Pointer) {
  C.glowGetSeparableFilterEXT(pGetSeparableFilterEXT, (C.GLenum)(target), (C.GLenum)(format), (C.GLenum)(xtype), row, column, span)
}
// Returns the information log for a shader object
func GetShaderInfoLog(shader uint32, bufSize int32, length *int32, infoLog *int8) {
  C.glowGetShaderInfoLog(pGetShaderInfoLog, (C.GLuint)(shader), (C.GLsizei)(bufSize), (*C.GLsizei)(unsafe.Pointer(length)), (*C.GLchar)(unsafe.Pointer(infoLog)))
}
// retrieve the range and precision for numeric formats supported by the shader compiler
func GetShaderPrecisionFormat(shadertype uint32, precisiontype uint32, xrange *int32, precision *int32) {
  C.glowGetShaderPrecisionFormat(pGetShaderPrecisionFormat, (C.GLenum)(shadertype), (C.GLenum)(precisiontype), (*C.GLint)(unsafe.Pointer(xrange)), (*C.GLint)(unsafe.Pointer(precision)))
}
// Returns the source code string from a shader object
func GetShaderSource(shader uint32, bufSize int32, length *int32, source *int8) {
  C.glowGetShaderSource(pGetShaderSource, (C.GLuint)(shader), (C.GLsizei)(bufSize), (*C.GLsizei)(unsafe.Pointer(length)), (*C.GLchar)(unsafe.Pointer(source)))
}
func GetShaderSourceARB(obj uintptr, maxLength int32, length *int32, source *int8) {
  C.glowGetShaderSourceARB(pGetShaderSourceARB, (C.GLhandleARB)(obj), (C.GLsizei)(maxLength), (*C.GLsizei)(unsafe.Pointer(length)), (*C.GLcharARB)(unsafe.Pointer(source)))
}
// Returns a parameter from a shader object
func GetShaderiv(shader uint32, pname uint32, params *int32) {
  C.glowGetShaderiv(pGetShaderiv, (C.GLuint)(shader), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetSharpenTexFuncSGIS(target uint32, points *float32) {
  C.glowGetSharpenTexFuncSGIS(pGetSharpenTexFuncSGIS, (C.GLenum)(target), (*C.GLfloat)(unsafe.Pointer(points)))
}
// return a string describing the current GL connection
func GetString(name uint32) *uint8 {
  ret := C.glowGetString(pGetString, (C.GLenum)(name))
  return (*uint8)(ret)
}
func GetStringi(name uint32, index uint32) *uint8 {
  ret := C.glowGetStringi(pGetStringi, (C.GLenum)(name), (C.GLuint)(index))
  return (*uint8)(ret)
}
// retrieve the index of a subroutine uniform of a given shader stage within a program
func GetSubroutineIndex(program uint32, shadertype uint32, name *int8) uint32 {
  ret := C.glowGetSubroutineIndex(pGetSubroutineIndex, (C.GLuint)(program), (C.GLenum)(shadertype), (*C.GLchar)(unsafe.Pointer(name)))
  return (uint32)(ret)
}
// retrieve the location of a subroutine uniform of a given shader stage within a program
func GetSubroutineUniformLocation(program uint32, shadertype uint32, name *int8) int32 {
  ret := C.glowGetSubroutineUniformLocation(pGetSubroutineUniformLocation, (C.GLuint)(program), (C.GLenum)(shadertype), (*C.GLchar)(unsafe.Pointer(name)))
  return (int32)(ret)
}
// query the properties of a sync object
func GetSynciv(sync unsafe.Pointer, pname uint32, bufSize int32, length *int32, values *int32) {
  C.glowGetSynciv(pGetSynciv, (C.GLsync)(sync), (C.GLenum)(pname), (C.GLsizei)(bufSize), (*C.GLsizei)(unsafe.Pointer(length)), (*C.GLint)(unsafe.Pointer(values)))
}
func GetTexBumpParameterfvATI(pname uint32, param *float32) {
  C.glowGetTexBumpParameterfvATI(pGetTexBumpParameterfvATI, (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(param)))
}
func GetTexBumpParameterivATI(pname uint32, param *int32) {
  C.glowGetTexBumpParameterivATI(pGetTexBumpParameterivATI, (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(param)))
}
func GetTexEnvxvOES(target uint32, pname uint32, params *int32) {
  C.glowGetTexEnvxvOES(pGetTexEnvxvOES, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLfixed)(unsafe.Pointer(params)))
}
func GetTexFilterFuncSGIS(target uint32, filter uint32, weights *float32) {
  C.glowGetTexFilterFuncSGIS(pGetTexFilterFuncSGIS, (C.GLenum)(target), (C.GLenum)(filter), (*C.GLfloat)(unsafe.Pointer(weights)))
}
func GetTexGenxvOES(coord uint32, pname uint32, params *int32) {
  C.glowGetTexGenxvOES(pGetTexGenxvOES, (C.GLenum)(coord), (C.GLenum)(pname), (*C.GLfixed)(unsafe.Pointer(params)))
}
// return a texture image
func GetTexImage(target uint32, level int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
  C.glowGetTexImage(pGetTexImage, (C.GLenum)(target), (C.GLint)(level), (C.GLenum)(format), (C.GLenum)(xtype), pixels)
}
func GetTexLevelParameterfv(target uint32, level int32, pname uint32, params *float32) {
  C.glowGetTexLevelParameterfv(pGetTexLevelParameterfv, (C.GLenum)(target), (C.GLint)(level), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetTexLevelParameteriv(target uint32, level int32, pname uint32, params *int32) {
  C.glowGetTexLevelParameteriv(pGetTexLevelParameteriv, (C.GLenum)(target), (C.GLint)(level), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetTexLevelParameterxvOES(target uint32, level int32, pname uint32, params *int32) {
  C.glowGetTexLevelParameterxvOES(pGetTexLevelParameterxvOES, (C.GLenum)(target), (C.GLint)(level), (C.GLenum)(pname), (*C.GLfixed)(unsafe.Pointer(params)))
}
func GetTexParameterIiv(target uint32, pname uint32, params *int32) {
  C.glowGetTexParameterIiv(pGetTexParameterIiv, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetTexParameterIivEXT(target uint32, pname uint32, params *int32) {
  C.glowGetTexParameterIivEXT(pGetTexParameterIivEXT, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetTexParameterIuiv(target uint32, pname uint32, params *uint32) {
  C.glowGetTexParameterIuiv(pGetTexParameterIuiv, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLuint)(unsafe.Pointer(params)))
}
func GetTexParameterIuivEXT(target uint32, pname uint32, params *uint32) {
  C.glowGetTexParameterIuivEXT(pGetTexParameterIuivEXT, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLuint)(unsafe.Pointer(params)))
}
func GetTexParameterPointervAPPLE(target uint32, pname uint32, params *unsafe.Pointer) {
  C.glowGetTexParameterPointervAPPLE(pGetTexParameterPointervAPPLE, (C.GLenum)(target), (C.GLenum)(pname), params)
}
func GetTexParameterfv(target uint32, pname uint32, params *float32) {
  C.glowGetTexParameterfv(pGetTexParameterfv, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetTexParameteriv(target uint32, pname uint32, params *int32) {
  C.glowGetTexParameteriv(pGetTexParameteriv, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetTexParameterxvOES(target uint32, pname uint32, params *int32) {
  C.glowGetTexParameterxvOES(pGetTexParameterxvOES, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLfixed)(unsafe.Pointer(params)))
}
func GetTextureHandleARB(texture uint32) uint64 {
  ret := C.glowGetTextureHandleARB(pGetTextureHandleARB, (C.GLuint)(texture))
  return (uint64)(ret)
}
func GetTextureHandleNV(texture uint32) uint64 {
  ret := C.glowGetTextureHandleNV(pGetTextureHandleNV, (C.GLuint)(texture))
  return (uint64)(ret)
}
func GetTextureImageEXT(texture uint32, target uint32, level int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
  C.glowGetTextureImageEXT(pGetTextureImageEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLint)(level), (C.GLenum)(format), (C.GLenum)(xtype), pixels)
}
func GetTextureLevelParameterfvEXT(texture uint32, target uint32, level int32, pname uint32, params *float32) {
  C.glowGetTextureLevelParameterfvEXT(pGetTextureLevelParameterfvEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLint)(level), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetTextureLevelParameterivEXT(texture uint32, target uint32, level int32, pname uint32, params *int32) {
  C.glowGetTextureLevelParameterivEXT(pGetTextureLevelParameterivEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLint)(level), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetTextureParameterIivEXT(texture uint32, target uint32, pname uint32, params *int32) {
  C.glowGetTextureParameterIivEXT(pGetTextureParameterIivEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetTextureParameterIuivEXT(texture uint32, target uint32, pname uint32, params *uint32) {
  C.glowGetTextureParameterIuivEXT(pGetTextureParameterIuivEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLenum)(pname), (*C.GLuint)(unsafe.Pointer(params)))
}
func GetTextureParameterfvEXT(texture uint32, target uint32, pname uint32, params *float32) {
  C.glowGetTextureParameterfvEXT(pGetTextureParameterfvEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetTextureParameterivEXT(texture uint32, target uint32, pname uint32, params *int32) {
  C.glowGetTextureParameterivEXT(pGetTextureParameterivEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetTextureSamplerHandleARB(texture uint32, sampler uint32) uint64 {
  ret := C.glowGetTextureSamplerHandleARB(pGetTextureSamplerHandleARB, (C.GLuint)(texture), (C.GLuint)(sampler))
  return (uint64)(ret)
}
func GetTextureSamplerHandleNV(texture uint32, sampler uint32) uint64 {
  ret := C.glowGetTextureSamplerHandleNV(pGetTextureSamplerHandleNV, (C.GLuint)(texture), (C.GLuint)(sampler))
  return (uint64)(ret)
}
func GetTrackMatrixivNV(target uint32, address uint32, pname uint32, params *int32) {
  C.glowGetTrackMatrixivNV(pGetTrackMatrixivNV, (C.GLenum)(target), (C.GLuint)(address), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
// retrieve information about varying variables selected for transform feedback
func GetTransformFeedbackVarying(program uint32, index uint32, bufSize int32, length *int32, size *int32, xtype *uint32, name *int8) {
  C.glowGetTransformFeedbackVarying(pGetTransformFeedbackVarying, (C.GLuint)(program), (C.GLuint)(index), (C.GLsizei)(bufSize), (*C.GLsizei)(unsafe.Pointer(length)), (*C.GLsizei)(unsafe.Pointer(size)), (*C.GLenum)(unsafe.Pointer(xtype)), (*C.GLchar)(unsafe.Pointer(name)))
}
func GetTransformFeedbackVaryingEXT(program uint32, index uint32, bufSize int32, length *int32, size *int32, xtype *uint32, name *int8) {
  C.glowGetTransformFeedbackVaryingEXT(pGetTransformFeedbackVaryingEXT, (C.GLuint)(program), (C.GLuint)(index), (C.GLsizei)(bufSize), (*C.GLsizei)(unsafe.Pointer(length)), (*C.GLsizei)(unsafe.Pointer(size)), (*C.GLenum)(unsafe.Pointer(xtype)), (*C.GLchar)(unsafe.Pointer(name)))
}
func GetTransformFeedbackVaryingNV(program uint32, index uint32, location *int32) {
  C.glowGetTransformFeedbackVaryingNV(pGetTransformFeedbackVaryingNV, (C.GLuint)(program), (C.GLuint)(index), (*C.GLint)(unsafe.Pointer(location)))
}
// retrieve the index of a named uniform block
func GetUniformBlockIndex(program uint32, uniformBlockName *int8) uint32 {
  ret := C.glowGetUniformBlockIndex(pGetUniformBlockIndex, (C.GLuint)(program), (*C.GLchar)(unsafe.Pointer(uniformBlockName)))
  return (uint32)(ret)
}
func GetUniformBufferSizeEXT(program uint32, location int32) int32 {
  ret := C.glowGetUniformBufferSizeEXT(pGetUniformBufferSizeEXT, (C.GLuint)(program), (C.GLint)(location))
  return (int32)(ret)
}
// retrieve the index of a named uniform block
func GetUniformIndices(program uint32, uniformCount int32, uniformNames **int8, uniformIndices *uint32) {
  C.glowGetUniformIndices(pGetUniformIndices, (C.GLuint)(program), (C.GLsizei)(uniformCount), (**C.GLchar)(unsafe.Pointer(uniformNames)), (*C.GLuint)(unsafe.Pointer(uniformIndices)))
}
// Returns the location of a uniform variable
func GetUniformLocation(program uint32, name *int8) int32 {
  ret := C.glowGetUniformLocation(pGetUniformLocation, (C.GLuint)(program), (*C.GLchar)(unsafe.Pointer(name)))
  return (int32)(ret)
}
func GetUniformLocationARB(programObj uintptr, name *int8) int32 {
  ret := C.glowGetUniformLocationARB(pGetUniformLocationARB, (C.GLhandleARB)(programObj), (*C.GLcharARB)(unsafe.Pointer(name)))
  return (int32)(ret)
}
func GetUniformOffsetEXT(program uint32, location int32) int {
  ret := C.glowGetUniformOffsetEXT(pGetUniformOffsetEXT, (C.GLuint)(program), (C.GLint)(location))
  return (int)(ret)
}
func GetUniformSubroutineuiv(shadertype uint32, location int32, params *uint32) {
  C.glowGetUniformSubroutineuiv(pGetUniformSubroutineuiv, (C.GLenum)(shadertype), (C.GLint)(location), (*C.GLuint)(unsafe.Pointer(params)))
}
func GetUniformdv(program uint32, location int32, params *float64) {
  C.glowGetUniformdv(pGetUniformdv, (C.GLuint)(program), (C.GLint)(location), (*C.GLdouble)(unsafe.Pointer(params)))
}
// Returns the value of a uniform variable
func GetUniformfv(program uint32, location int32, params *float32) {
  C.glowGetUniformfv(pGetUniformfv, (C.GLuint)(program), (C.GLint)(location), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetUniformfvARB(programObj uintptr, location int32, params *float32) {
  C.glowGetUniformfvARB(pGetUniformfvARB, (C.GLhandleARB)(programObj), (C.GLint)(location), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetUniformi64vNV(program uint32, location int32, params *int64) {
  C.glowGetUniformi64vNV(pGetUniformi64vNV, (C.GLuint)(program), (C.GLint)(location), (*C.GLint64EXT)(unsafe.Pointer(params)))
}
// Returns the value of a uniform variable
func GetUniformiv(program uint32, location int32, params *int32) {
  C.glowGetUniformiv(pGetUniformiv, (C.GLuint)(program), (C.GLint)(location), (*C.GLint)(unsafe.Pointer(params)))
}
func GetUniformivARB(programObj uintptr, location int32, params *int32) {
  C.glowGetUniformivARB(pGetUniformivARB, (C.GLhandleARB)(programObj), (C.GLint)(location), (*C.GLint)(unsafe.Pointer(params)))
}
func GetUniformui64vNV(program uint32, location int32, params *uint64) {
  C.glowGetUniformui64vNV(pGetUniformui64vNV, (C.GLuint)(program), (C.GLint)(location), (*C.GLuint64EXT)(unsafe.Pointer(params)))
}
func GetUniformuiv(program uint32, location int32, params *uint32) {
  C.glowGetUniformuiv(pGetUniformuiv, (C.GLuint)(program), (C.GLint)(location), (*C.GLuint)(unsafe.Pointer(params)))
}
func GetUniformuivEXT(program uint32, location int32, params *uint32) {
  C.glowGetUniformuivEXT(pGetUniformuivEXT, (C.GLuint)(program), (C.GLint)(location), (*C.GLuint)(unsafe.Pointer(params)))
}
func GetVariantArrayObjectfvATI(id uint32, pname uint32, params *float32) {
  C.glowGetVariantArrayObjectfvATI(pGetVariantArrayObjectfvATI, (C.GLuint)(id), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetVariantArrayObjectivATI(id uint32, pname uint32, params *int32) {
  C.glowGetVariantArrayObjectivATI(pGetVariantArrayObjectivATI, (C.GLuint)(id), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetVariantBooleanvEXT(id uint32, value uint32, data *bool) {
  C.glowGetVariantBooleanvEXT(pGetVariantBooleanvEXT, (C.GLuint)(id), (C.GLenum)(value), (*C.GLboolean)(unsafe.Pointer(data)))
}
func GetVariantFloatvEXT(id uint32, value uint32, data *float32) {
  C.glowGetVariantFloatvEXT(pGetVariantFloatvEXT, (C.GLuint)(id), (C.GLenum)(value), (*C.GLfloat)(unsafe.Pointer(data)))
}
func GetVariantIntegervEXT(id uint32, value uint32, data *int32) {
  C.glowGetVariantIntegervEXT(pGetVariantIntegervEXT, (C.GLuint)(id), (C.GLenum)(value), (*C.GLint)(unsafe.Pointer(data)))
}
func GetVariantPointervEXT(id uint32, value uint32, data *unsafe.Pointer) {
  C.glowGetVariantPointervEXT(pGetVariantPointervEXT, (C.GLuint)(id), (C.GLenum)(value), data)
}
func GetVaryingLocationNV(program uint32, name *int8) int32 {
  ret := C.glowGetVaryingLocationNV(pGetVaryingLocationNV, (C.GLuint)(program), (*C.GLchar)(unsafe.Pointer(name)))
  return (int32)(ret)
}
func GetVertexArrayIntegeri_vEXT(vaobj uint32, index uint32, pname uint32, param *int32) {
  C.glowGetVertexArrayIntegeri_vEXT(pGetVertexArrayIntegeri_vEXT, (C.GLuint)(vaobj), (C.GLuint)(index), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(param)))
}
func GetVertexArrayIntegervEXT(vaobj uint32, pname uint32, param *int32) {
  C.glowGetVertexArrayIntegervEXT(pGetVertexArrayIntegervEXT, (C.GLuint)(vaobj), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(param)))
}
func GetVertexArrayPointeri_vEXT(vaobj uint32, index uint32, pname uint32, param *unsafe.Pointer) {
  C.glowGetVertexArrayPointeri_vEXT(pGetVertexArrayPointeri_vEXT, (C.GLuint)(vaobj), (C.GLuint)(index), (C.GLenum)(pname), param)
}
func GetVertexArrayPointervEXT(vaobj uint32, pname uint32, param *unsafe.Pointer) {
  C.glowGetVertexArrayPointervEXT(pGetVertexArrayPointervEXT, (C.GLuint)(vaobj), (C.GLenum)(pname), param)
}
func GetVertexAttribArrayObjectfvATI(index uint32, pname uint32, params *float32) {
  C.glowGetVertexAttribArrayObjectfvATI(pGetVertexAttribArrayObjectfvATI, (C.GLuint)(index), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetVertexAttribArrayObjectivATI(index uint32, pname uint32, params *int32) {
  C.glowGetVertexAttribArrayObjectivATI(pGetVertexAttribArrayObjectivATI, (C.GLuint)(index), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
// Return a generic vertex attribute parameter
func GetVertexAttribIiv(index uint32, pname uint32, params *int32) {
  C.glowGetVertexAttribIiv(pGetVertexAttribIiv, (C.GLuint)(index), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetVertexAttribIivEXT(index uint32, pname uint32, params *int32) {
  C.glowGetVertexAttribIivEXT(pGetVertexAttribIivEXT, (C.GLuint)(index), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
// Return a generic vertex attribute parameter
func GetVertexAttribIuiv(index uint32, pname uint32, params *uint32) {
  C.glowGetVertexAttribIuiv(pGetVertexAttribIuiv, (C.GLuint)(index), (C.GLenum)(pname), (*C.GLuint)(unsafe.Pointer(params)))
}
func GetVertexAttribIuivEXT(index uint32, pname uint32, params *uint32) {
  C.glowGetVertexAttribIuivEXT(pGetVertexAttribIuivEXT, (C.GLuint)(index), (C.GLenum)(pname), (*C.GLuint)(unsafe.Pointer(params)))
}
// Return a generic vertex attribute parameter
func GetVertexAttribLdv(index uint32, pname uint32, params *float64) {
  C.glowGetVertexAttribLdv(pGetVertexAttribLdv, (C.GLuint)(index), (C.GLenum)(pname), (*C.GLdouble)(unsafe.Pointer(params)))
}
func GetVertexAttribLdvEXT(index uint32, pname uint32, params *float64) {
  C.glowGetVertexAttribLdvEXT(pGetVertexAttribLdvEXT, (C.GLuint)(index), (C.GLenum)(pname), (*C.GLdouble)(unsafe.Pointer(params)))
}
func GetVertexAttribLi64vNV(index uint32, pname uint32, params *int64) {
  C.glowGetVertexAttribLi64vNV(pGetVertexAttribLi64vNV, (C.GLuint)(index), (C.GLenum)(pname), (*C.GLint64EXT)(unsafe.Pointer(params)))
}
func GetVertexAttribLui64vARB(index uint32, pname uint32, params *uint64) {
  C.glowGetVertexAttribLui64vARB(pGetVertexAttribLui64vARB, (C.GLuint)(index), (C.GLenum)(pname), (*C.GLuint64EXT)(unsafe.Pointer(params)))
}
func GetVertexAttribLui64vNV(index uint32, pname uint32, params *uint64) {
  C.glowGetVertexAttribLui64vNV(pGetVertexAttribLui64vNV, (C.GLuint)(index), (C.GLenum)(pname), (*C.GLuint64EXT)(unsafe.Pointer(params)))
}
// return the address of the specified generic vertex attribute pointer
func GetVertexAttribPointerv(index uint32, pname uint32, pointer *unsafe.Pointer) {
  C.glowGetVertexAttribPointerv(pGetVertexAttribPointerv, (C.GLuint)(index), (C.GLenum)(pname), pointer)
}
func GetVertexAttribPointervARB(index uint32, pname uint32, pointer *unsafe.Pointer) {
  C.glowGetVertexAttribPointervARB(pGetVertexAttribPointervARB, (C.GLuint)(index), (C.GLenum)(pname), pointer)
}
func GetVertexAttribPointervNV(index uint32, pname uint32, pointer *unsafe.Pointer) {
  C.glowGetVertexAttribPointervNV(pGetVertexAttribPointervNV, (C.GLuint)(index), (C.GLenum)(pname), pointer)
}
// Return a generic vertex attribute parameter
func GetVertexAttribdv(index uint32, pname uint32, params *float64) {
  C.glowGetVertexAttribdv(pGetVertexAttribdv, (C.GLuint)(index), (C.GLenum)(pname), (*C.GLdouble)(unsafe.Pointer(params)))
}
func GetVertexAttribdvARB(index uint32, pname uint32, params *float64) {
  C.glowGetVertexAttribdvARB(pGetVertexAttribdvARB, (C.GLuint)(index), (C.GLenum)(pname), (*C.GLdouble)(unsafe.Pointer(params)))
}
func GetVertexAttribdvNV(index uint32, pname uint32, params *float64) {
  C.glowGetVertexAttribdvNV(pGetVertexAttribdvNV, (C.GLuint)(index), (C.GLenum)(pname), (*C.GLdouble)(unsafe.Pointer(params)))
}
// Return a generic vertex attribute parameter
func GetVertexAttribfv(index uint32, pname uint32, params *float32) {
  C.glowGetVertexAttribfv(pGetVertexAttribfv, (C.GLuint)(index), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetVertexAttribfvARB(index uint32, pname uint32, params *float32) {
  C.glowGetVertexAttribfvARB(pGetVertexAttribfvARB, (C.GLuint)(index), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetVertexAttribfvNV(index uint32, pname uint32, params *float32) {
  C.glowGetVertexAttribfvNV(pGetVertexAttribfvNV, (C.GLuint)(index), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
// Return a generic vertex attribute parameter
func GetVertexAttribiv(index uint32, pname uint32, params *int32) {
  C.glowGetVertexAttribiv(pGetVertexAttribiv, (C.GLuint)(index), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetVertexAttribivARB(index uint32, pname uint32, params *int32) {
  C.glowGetVertexAttribivARB(pGetVertexAttribivARB, (C.GLuint)(index), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetVertexAttribivNV(index uint32, pname uint32, params *int32) {
  C.glowGetVertexAttribivNV(pGetVertexAttribivNV, (C.GLuint)(index), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetVideoCaptureStreamdvNV(video_capture_slot uint32, stream uint32, pname uint32, params *float64) {
  C.glowGetVideoCaptureStreamdvNV(pGetVideoCaptureStreamdvNV, (C.GLuint)(video_capture_slot), (C.GLuint)(stream), (C.GLenum)(pname), (*C.GLdouble)(unsafe.Pointer(params)))
}
func GetVideoCaptureStreamfvNV(video_capture_slot uint32, stream uint32, pname uint32, params *float32) {
  C.glowGetVideoCaptureStreamfvNV(pGetVideoCaptureStreamfvNV, (C.GLuint)(video_capture_slot), (C.GLuint)(stream), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetVideoCaptureStreamivNV(video_capture_slot uint32, stream uint32, pname uint32, params *int32) {
  C.glowGetVideoCaptureStreamivNV(pGetVideoCaptureStreamivNV, (C.GLuint)(video_capture_slot), (C.GLuint)(stream), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetVideoCaptureivNV(video_capture_slot uint32, pname uint32, params *int32) {
  C.glowGetVideoCaptureivNV(pGetVideoCaptureivNV, (C.GLuint)(video_capture_slot), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetVideoi64vNV(video_slot uint32, pname uint32, params *int64) {
  C.glowGetVideoi64vNV(pGetVideoi64vNV, (C.GLuint)(video_slot), (C.GLenum)(pname), (*C.GLint64EXT)(unsafe.Pointer(params)))
}
func GetVideoivNV(video_slot uint32, pname uint32, params *int32) {
  C.glowGetVideoivNV(pGetVideoivNV, (C.GLuint)(video_slot), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func GetVideoui64vNV(video_slot uint32, pname uint32, params *uint64) {
  C.glowGetVideoui64vNV(pGetVideoui64vNV, (C.GLuint)(video_slot), (C.GLenum)(pname), (*C.GLuint64EXT)(unsafe.Pointer(params)))
}
func GetVideouivNV(video_slot uint32, pname uint32, params *uint32) {
  C.glowGetVideouivNV(pGetVideouivNV, (C.GLuint)(video_slot), (C.GLenum)(pname), (*C.GLuint)(unsafe.Pointer(params)))
}
func GetnCompressedTexImageARB(target uint32, lod int32, bufSize int32, img unsafe.Pointer) {
  C.glowGetnCompressedTexImageARB(pGetnCompressedTexImageARB, (C.GLenum)(target), (C.GLint)(lod), (C.GLsizei)(bufSize), img)
}
func GetnTexImageARB(target uint32, level int32, format uint32, xtype uint32, bufSize int32, img unsafe.Pointer) {
  C.glowGetnTexImageARB(pGetnTexImageARB, (C.GLenum)(target), (C.GLint)(level), (C.GLenum)(format), (C.GLenum)(xtype), (C.GLsizei)(bufSize), img)
}
func GetnUniformdvARB(program uint32, location int32, bufSize int32, params *float64) {
  C.glowGetnUniformdvARB(pGetnUniformdvARB, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(bufSize), (*C.GLdouble)(unsafe.Pointer(params)))
}
func GetnUniformfvARB(program uint32, location int32, bufSize int32, params *float32) {
  C.glowGetnUniformfvARB(pGetnUniformfvARB, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(bufSize), (*C.GLfloat)(unsafe.Pointer(params)))
}
func GetnUniformivARB(program uint32, location int32, bufSize int32, params *int32) {
  C.glowGetnUniformivARB(pGetnUniformivARB, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(bufSize), (*C.GLint)(unsafe.Pointer(params)))
}
func GetnUniformuivARB(program uint32, location int32, bufSize int32, params *uint32) {
  C.glowGetnUniformuivARB(pGetnUniformuivARB, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(bufSize), (*C.GLuint)(unsafe.Pointer(params)))
}
func GlobalAlphaFactorbSUN(factor int8) {
  C.glowGlobalAlphaFactorbSUN(pGlobalAlphaFactorbSUN, (C.GLbyte)(factor))
}
func GlobalAlphaFactordSUN(factor float64) {
  C.glowGlobalAlphaFactordSUN(pGlobalAlphaFactordSUN, (C.GLdouble)(factor))
}
func GlobalAlphaFactorfSUN(factor float32) {
  C.glowGlobalAlphaFactorfSUN(pGlobalAlphaFactorfSUN, (C.GLfloat)(factor))
}
func GlobalAlphaFactoriSUN(factor int32) {
  C.glowGlobalAlphaFactoriSUN(pGlobalAlphaFactoriSUN, (C.GLint)(factor))
}
func GlobalAlphaFactorsSUN(factor int16) {
  C.glowGlobalAlphaFactorsSUN(pGlobalAlphaFactorsSUN, (C.GLshort)(factor))
}
func GlobalAlphaFactorubSUN(factor uint8) {
  C.glowGlobalAlphaFactorubSUN(pGlobalAlphaFactorubSUN, (C.GLubyte)(factor))
}
func GlobalAlphaFactoruiSUN(factor uint32) {
  C.glowGlobalAlphaFactoruiSUN(pGlobalAlphaFactoruiSUN, (C.GLuint)(factor))
}
func GlobalAlphaFactorusSUN(factor uint16) {
  C.glowGlobalAlphaFactorusSUN(pGlobalAlphaFactorusSUN, (C.GLushort)(factor))
}
// specify implementation-specific hints
func Hint(target uint32, mode uint32) {
  C.glowHint(pHint, (C.GLenum)(target), (C.GLenum)(mode))
}
func HintPGI(target uint32, mode int32) {
  C.glowHintPGI(pHintPGI, (C.GLenum)(target), (C.GLint)(mode))
}
func HistogramEXT(target uint32, width int32, internalformat uint32, sink bool) {
  C.glowHistogramEXT(pHistogramEXT, (C.GLenum)(target), (C.GLsizei)(width), (C.GLenum)(internalformat), (C.GLboolean)(boolToInt(sink)))
}
func IglooInterfaceSGIX(pname uint32, params unsafe.Pointer) {
  C.glowIglooInterfaceSGIX(pIglooInterfaceSGIX, (C.GLenum)(pname), params)
}
func ImageTransformParameterfHP(target uint32, pname uint32, param float32) {
  C.glowImageTransformParameterfHP(pImageTransformParameterfHP, (C.GLenum)(target), (C.GLenum)(pname), (C.GLfloat)(param))
}
func ImageTransformParameterfvHP(target uint32, pname uint32, params *float32) {
  C.glowImageTransformParameterfvHP(pImageTransformParameterfvHP, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func ImageTransformParameteriHP(target uint32, pname uint32, param int32) {
  C.glowImageTransformParameteriHP(pImageTransformParameteriHP, (C.GLenum)(target), (C.GLenum)(pname), (C.GLint)(param))
}
func ImageTransformParameterivHP(target uint32, pname uint32, params *int32) {
  C.glowImageTransformParameterivHP(pImageTransformParameterivHP, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func ImportSyncEXT(external_sync_type uint32, external_sync int, flags uint32) unsafe.Pointer {
  ret := C.glowImportSyncEXT(pImportSyncEXT, (C.GLenum)(external_sync_type), (C.GLintptr)(external_sync), (C.GLbitfield)(flags))
  return (unsafe.Pointer)(ret)
}
func IndexFormatNV(xtype uint32, stride int32) {
  C.glowIndexFormatNV(pIndexFormatNV, (C.GLenum)(xtype), (C.GLsizei)(stride))
}
func IndexFuncEXT(xfunc uint32, ref float32) {
  C.glowIndexFuncEXT(pIndexFuncEXT, (C.GLenum)(xfunc), (C.GLclampf)(ref))
}
func IndexMaterialEXT(face uint32, mode uint32) {
  C.glowIndexMaterialEXT(pIndexMaterialEXT, (C.GLenum)(face), (C.GLenum)(mode))
}
func IndexPointerEXT(xtype uint32, stride int32, count int32, pointer unsafe.Pointer) {
  C.glowIndexPointerEXT(pIndexPointerEXT, (C.GLenum)(xtype), (C.GLsizei)(stride), (C.GLsizei)(count), pointer)
}
func IndexPointerListIBM(xtype uint32, stride int32, pointer *unsafe.Pointer, ptrstride int32) {
  C.glowIndexPointerListIBM(pIndexPointerListIBM, (C.GLenum)(xtype), (C.GLint)(stride), pointer, (C.GLint)(ptrstride))
}
func IndexxOES(component int32) {
  C.glowIndexxOES(pIndexxOES, (C.GLfixed)(component))
}
func IndexxvOES(component *int32) {
  C.glowIndexxvOES(pIndexxvOES, (*C.GLfixed)(unsafe.Pointer(component)))
}
func InsertComponentEXT(res uint32, src uint32, num uint32) {
  C.glowInsertComponentEXT(pInsertComponentEXT, (C.GLuint)(res), (C.GLuint)(src), (C.GLuint)(num))
}
func InsertEventMarkerEXT(length int32, marker *int8) {
  C.glowInsertEventMarkerEXT(pInsertEventMarkerEXT, (C.GLsizei)(length), (*C.GLchar)(unsafe.Pointer(marker)))
}
func InstrumentsBufferSGIX(size int32, buffer *int32) {
  C.glowInstrumentsBufferSGIX(pInstrumentsBufferSGIX, (C.GLsizei)(size), (*C.GLint)(unsafe.Pointer(buffer)))
}
func InterpolatePathsNV(resultPath uint32, pathA uint32, pathB uint32, weight float32) {
  C.glowInterpolatePathsNV(pInterpolatePathsNV, (C.GLuint)(resultPath), (C.GLuint)(pathA), (C.GLuint)(pathB), (C.GLfloat)(weight))
}
// invalidate the content of a buffer object's data store
func InvalidateBufferData(buffer uint32) {
  C.glowInvalidateBufferData(pInvalidateBufferData, (C.GLuint)(buffer))
}
// invalidate a region of a buffer object's data store
func InvalidateBufferSubData(buffer uint32, offset int, length int) {
  C.glowInvalidateBufferSubData(pInvalidateBufferSubData, (C.GLuint)(buffer), (C.GLintptr)(offset), (C.GLsizeiptr)(length))
}
// invalidate the content some or all of a framebuffer object's attachments
func InvalidateFramebuffer(target uint32, numAttachments int32, attachments *uint32) {
  C.glowInvalidateFramebuffer(pInvalidateFramebuffer, (C.GLenum)(target), (C.GLsizei)(numAttachments), (*C.GLenum)(unsafe.Pointer(attachments)))
}
// invalidate the content of a region of some or all of a framebuffer object's attachments
func InvalidateSubFramebuffer(target uint32, numAttachments int32, attachments *uint32, x int32, y int32, width int32, height int32) {
  C.glowInvalidateSubFramebuffer(pInvalidateSubFramebuffer, (C.GLenum)(target), (C.GLsizei)(numAttachments), (*C.GLenum)(unsafe.Pointer(attachments)), (C.GLint)(x), (C.GLint)(y), (C.GLsizei)(width), (C.GLsizei)(height))
}
// invalidate the entirety a texture image
func InvalidateTexImage(texture uint32, level int32) {
  C.glowInvalidateTexImage(pInvalidateTexImage, (C.GLuint)(texture), (C.GLint)(level))
}
// invalidate a region of a texture image
func InvalidateTexSubImage(texture uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32) {
  C.glowInvalidateTexSubImage(pInvalidateTexSubImage, (C.GLuint)(texture), (C.GLint)(level), (C.GLint)(xoffset), (C.GLint)(yoffset), (C.GLint)(zoffset), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLsizei)(depth))
}
func IsAsyncMarkerSGIX(marker uint32) bool {
  ret := C.glowIsAsyncMarkerSGIX(pIsAsyncMarkerSGIX, (C.GLuint)(marker))
  return ret == TRUE
}
// determine if a name corresponds to a buffer object
func IsBuffer(buffer uint32) bool {
  ret := C.glowIsBuffer(pIsBuffer, (C.GLuint)(buffer))
  return ret == TRUE
}
func IsBufferARB(buffer uint32) bool {
  ret := C.glowIsBufferARB(pIsBufferARB, (C.GLuint)(buffer))
  return ret == TRUE
}
func IsBufferResidentNV(target uint32) bool {
  ret := C.glowIsBufferResidentNV(pIsBufferResidentNV, (C.GLenum)(target))
  return ret == TRUE
}
func IsEnabled(cap uint32) bool {
  ret := C.glowIsEnabled(pIsEnabled, (C.GLenum)(cap))
  return ret == TRUE
}
func IsEnabledIndexedEXT(target uint32, index uint32) bool {
  ret := C.glowIsEnabledIndexedEXT(pIsEnabledIndexedEXT, (C.GLenum)(target), (C.GLuint)(index))
  return ret == TRUE
}
func IsEnabledi(target uint32, index uint32) bool {
  ret := C.glowIsEnabledi(pIsEnabledi, (C.GLenum)(target), (C.GLuint)(index))
  return ret == TRUE
}
func IsFenceAPPLE(fence uint32) bool {
  ret := C.glowIsFenceAPPLE(pIsFenceAPPLE, (C.GLuint)(fence))
  return ret == TRUE
}
func IsFenceNV(fence uint32) bool {
  ret := C.glowIsFenceNV(pIsFenceNV, (C.GLuint)(fence))
  return ret == TRUE
}
// determine if a name corresponds to a framebuffer object
func IsFramebuffer(framebuffer uint32) bool {
  ret := C.glowIsFramebuffer(pIsFramebuffer, (C.GLuint)(framebuffer))
  return ret == TRUE
}
func IsFramebufferEXT(framebuffer uint32) bool {
  ret := C.glowIsFramebufferEXT(pIsFramebufferEXT, (C.GLuint)(framebuffer))
  return ret == TRUE
}
func IsImageHandleResidentARB(handle uint64) bool {
  ret := C.glowIsImageHandleResidentARB(pIsImageHandleResidentARB, (C.GLuint64)(handle))
  return ret == TRUE
}
func IsImageHandleResidentNV(handle uint64) bool {
  ret := C.glowIsImageHandleResidentNV(pIsImageHandleResidentNV, (C.GLuint64)(handle))
  return ret == TRUE
}
func IsNameAMD(identifier uint32, name uint32) bool {
  ret := C.glowIsNameAMD(pIsNameAMD, (C.GLenum)(identifier), (C.GLuint)(name))
  return ret == TRUE
}
func IsNamedBufferResidentNV(buffer uint32) bool {
  ret := C.glowIsNamedBufferResidentNV(pIsNamedBufferResidentNV, (C.GLuint)(buffer))
  return ret == TRUE
}
func IsNamedStringARB(namelen int32, name *int8) bool {
  ret := C.glowIsNamedStringARB(pIsNamedStringARB, (C.GLint)(namelen), (*C.GLchar)(unsafe.Pointer(name)))
  return ret == TRUE
}
func IsObjectBufferATI(buffer uint32) bool {
  ret := C.glowIsObjectBufferATI(pIsObjectBufferATI, (C.GLuint)(buffer))
  return ret == TRUE
}
func IsOcclusionQueryNV(id uint32) bool {
  ret := C.glowIsOcclusionQueryNV(pIsOcclusionQueryNV, (C.GLuint)(id))
  return ret == TRUE
}
func IsPathNV(path uint32) bool {
  ret := C.glowIsPathNV(pIsPathNV, (C.GLuint)(path))
  return ret == TRUE
}
func IsPointInFillPathNV(path uint32, mask uint32, x float32, y float32) bool {
  ret := C.glowIsPointInFillPathNV(pIsPointInFillPathNV, (C.GLuint)(path), (C.GLuint)(mask), (C.GLfloat)(x), (C.GLfloat)(y))
  return ret == TRUE
}
func IsPointInStrokePathNV(path uint32, x float32, y float32) bool {
  ret := C.glowIsPointInStrokePathNV(pIsPointInStrokePathNV, (C.GLuint)(path), (C.GLfloat)(x), (C.GLfloat)(y))
  return ret == TRUE
}
// Determines if a name corresponds to a program object
func IsProgram(program uint32) bool {
  ret := C.glowIsProgram(pIsProgram, (C.GLuint)(program))
  return ret == TRUE
}
func IsProgramARB(program uint32) bool {
  ret := C.glowIsProgramARB(pIsProgramARB, (C.GLuint)(program))
  return ret == TRUE
}
func IsProgramNV(id uint32) bool {
  ret := C.glowIsProgramNV(pIsProgramNV, (C.GLuint)(id))
  return ret == TRUE
}
// determine if a name corresponds to a program pipeline object
func IsProgramPipeline(pipeline uint32) bool {
  ret := C.glowIsProgramPipeline(pIsProgramPipeline, (C.GLuint)(pipeline))
  return ret == TRUE
}
func IsProgramPipelineEXT(pipeline uint32) bool {
  ret := C.glowIsProgramPipelineEXT(pIsProgramPipelineEXT, (C.GLuint)(pipeline))
  return ret == TRUE
}
// determine if a name corresponds to a query object
func IsQuery(id uint32) bool {
  ret := C.glowIsQuery(pIsQuery, (C.GLuint)(id))
  return ret == TRUE
}
func IsQueryARB(id uint32) bool {
  ret := C.glowIsQueryARB(pIsQueryARB, (C.GLuint)(id))
  return ret == TRUE
}
// determine if a name corresponds to a renderbuffer object
func IsRenderbuffer(renderbuffer uint32) bool {
  ret := C.glowIsRenderbuffer(pIsRenderbuffer, (C.GLuint)(renderbuffer))
  return ret == TRUE
}
func IsRenderbufferEXT(renderbuffer uint32) bool {
  ret := C.glowIsRenderbufferEXT(pIsRenderbufferEXT, (C.GLuint)(renderbuffer))
  return ret == TRUE
}
// determine if a name corresponds to a sampler object
func IsSampler(sampler uint32) bool {
  ret := C.glowIsSampler(pIsSampler, (C.GLuint)(sampler))
  return ret == TRUE
}
// Determines if a name corresponds to a shader object
func IsShader(shader uint32) bool {
  ret := C.glowIsShader(pIsShader, (C.GLuint)(shader))
  return ret == TRUE
}
// determine if a name corresponds to a sync object
func IsSync(sync unsafe.Pointer) bool {
  ret := C.glowIsSync(pIsSync, (C.GLsync)(sync))
  return ret == TRUE
}
// determine if a name corresponds to a texture
func IsTexture(texture uint32) bool {
  ret := C.glowIsTexture(pIsTexture, (C.GLuint)(texture))
  return ret == TRUE
}
func IsTextureEXT(texture uint32) bool {
  ret := C.glowIsTextureEXT(pIsTextureEXT, (C.GLuint)(texture))
  return ret == TRUE
}
func IsTextureHandleResidentARB(handle uint64) bool {
  ret := C.glowIsTextureHandleResidentARB(pIsTextureHandleResidentARB, (C.GLuint64)(handle))
  return ret == TRUE
}
func IsTextureHandleResidentNV(handle uint64) bool {
  ret := C.glowIsTextureHandleResidentNV(pIsTextureHandleResidentNV, (C.GLuint64)(handle))
  return ret == TRUE
}
// determine if a name corresponds to a transform feedback object
func IsTransformFeedback(id uint32) bool {
  ret := C.glowIsTransformFeedback(pIsTransformFeedback, (C.GLuint)(id))
  return ret == TRUE
}
func IsTransformFeedbackNV(id uint32) bool {
  ret := C.glowIsTransformFeedbackNV(pIsTransformFeedbackNV, (C.GLuint)(id))
  return ret == TRUE
}
func IsVariantEnabledEXT(id uint32, cap uint32) bool {
  ret := C.glowIsVariantEnabledEXT(pIsVariantEnabledEXT, (C.GLuint)(id), (C.GLenum)(cap))
  return ret == TRUE
}
// determine if a name corresponds to a vertex array object
func IsVertexArray(array uint32) bool {
  ret := C.glowIsVertexArray(pIsVertexArray, (C.GLuint)(array))
  return ret == TRUE
}
func IsVertexArrayAPPLE(array uint32) bool {
  ret := C.glowIsVertexArrayAPPLE(pIsVertexArrayAPPLE, (C.GLuint)(array))
  return ret == TRUE
}
func IsVertexAttribEnabledAPPLE(index uint32, pname uint32) bool {
  ret := C.glowIsVertexAttribEnabledAPPLE(pIsVertexAttribEnabledAPPLE, (C.GLuint)(index), (C.GLenum)(pname))
  return ret == TRUE
}
func LabelObjectEXT(xtype uint32, object uint32, length int32, label *int8) {
  C.glowLabelObjectEXT(pLabelObjectEXT, (C.GLenum)(xtype), (C.GLuint)(object), (C.GLsizei)(length), (*C.GLchar)(unsafe.Pointer(label)))
}
func LightEnviSGIX(pname uint32, param int32) {
  C.glowLightEnviSGIX(pLightEnviSGIX, (C.GLenum)(pname), (C.GLint)(param))
}
func LightModelxOES(pname uint32, param int32) {
  C.glowLightModelxOES(pLightModelxOES, (C.GLenum)(pname), (C.GLfixed)(param))
}
func LightModelxvOES(pname uint32, param *int32) {
  C.glowLightModelxvOES(pLightModelxvOES, (C.GLenum)(pname), (*C.GLfixed)(unsafe.Pointer(param)))
}
func LightxOES(light uint32, pname uint32, param int32) {
  C.glowLightxOES(pLightxOES, (C.GLenum)(light), (C.GLenum)(pname), (C.GLfixed)(param))
}
func LightxvOES(light uint32, pname uint32, params *int32) {
  C.glowLightxvOES(pLightxvOES, (C.GLenum)(light), (C.GLenum)(pname), (*C.GLfixed)(unsafe.Pointer(params)))
}
// specify the width of rasterized lines
func LineWidth(width float32) {
  C.glowLineWidth(pLineWidth, (C.GLfloat)(width))
}
func LineWidthxOES(width int32) {
  C.glowLineWidthxOES(pLineWidthxOES, (C.GLfixed)(width))
}
// Links a program object
func LinkProgram(program uint32) {
  C.glowLinkProgram(pLinkProgram, (C.GLuint)(program))
}
func LinkProgramARB(programObj uintptr) {
  C.glowLinkProgramARB(pLinkProgramARB, (C.GLhandleARB)(programObj))
}
func ListParameterfSGIX(list uint32, pname uint32, param float32) {
  C.glowListParameterfSGIX(pListParameterfSGIX, (C.GLuint)(list), (C.GLenum)(pname), (C.GLfloat)(param))
}
func ListParameterfvSGIX(list uint32, pname uint32, params *float32) {
  C.glowListParameterfvSGIX(pListParameterfvSGIX, (C.GLuint)(list), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func ListParameteriSGIX(list uint32, pname uint32, param int32) {
  C.glowListParameteriSGIX(pListParameteriSGIX, (C.GLuint)(list), (C.GLenum)(pname), (C.GLint)(param))
}
func ListParameterivSGIX(list uint32, pname uint32, params *int32) {
  C.glowListParameterivSGIX(pListParameterivSGIX, (C.GLuint)(list), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func LoadIdentityDeformationMapSGIX(mask uint32) {
  C.glowLoadIdentityDeformationMapSGIX(pLoadIdentityDeformationMapSGIX, (C.GLbitfield)(mask))
}
func LoadMatrixxOES(m *int32) {
  C.glowLoadMatrixxOES(pLoadMatrixxOES, (*C.GLfixed)(unsafe.Pointer(m)))
}
func LoadProgramNV(target uint32, id uint32, len int32, program *uint8) {
  C.glowLoadProgramNV(pLoadProgramNV, (C.GLenum)(target), (C.GLuint)(id), (C.GLsizei)(len), (*C.GLubyte)(unsafe.Pointer(program)))
}
func LoadTransposeMatrixdARB(m *float64) {
  C.glowLoadTransposeMatrixdARB(pLoadTransposeMatrixdARB, (*C.GLdouble)(unsafe.Pointer(m)))
}
func LoadTransposeMatrixfARB(m *float32) {
  C.glowLoadTransposeMatrixfARB(pLoadTransposeMatrixfARB, (*C.GLfloat)(unsafe.Pointer(m)))
}
func LoadTransposeMatrixxOES(m *int32) {
  C.glowLoadTransposeMatrixxOES(pLoadTransposeMatrixxOES, (*C.GLfixed)(unsafe.Pointer(m)))
}
func LockArraysEXT(first int32, count int32) {
  C.glowLockArraysEXT(pLockArraysEXT, (C.GLint)(first), (C.GLsizei)(count))
}
// specify a logical pixel operation for rendering
func LogicOp(opcode uint32) {
  C.glowLogicOp(pLogicOp, (C.GLenum)(opcode))
}
func MakeBufferNonResidentNV(target uint32) {
  C.glowMakeBufferNonResidentNV(pMakeBufferNonResidentNV, (C.GLenum)(target))
}
func MakeBufferResidentNV(target uint32, access uint32) {
  C.glowMakeBufferResidentNV(pMakeBufferResidentNV, (C.GLenum)(target), (C.GLenum)(access))
}
func MakeImageHandleNonResidentARB(handle uint64) {
  C.glowMakeImageHandleNonResidentARB(pMakeImageHandleNonResidentARB, (C.GLuint64)(handle))
}
func MakeImageHandleNonResidentNV(handle uint64) {
  C.glowMakeImageHandleNonResidentNV(pMakeImageHandleNonResidentNV, (C.GLuint64)(handle))
}
func MakeImageHandleResidentARB(handle uint64, access uint32) {
  C.glowMakeImageHandleResidentARB(pMakeImageHandleResidentARB, (C.GLuint64)(handle), (C.GLenum)(access))
}
func MakeImageHandleResidentNV(handle uint64, access uint32) {
  C.glowMakeImageHandleResidentNV(pMakeImageHandleResidentNV, (C.GLuint64)(handle), (C.GLenum)(access))
}
func MakeNamedBufferNonResidentNV(buffer uint32) {
  C.glowMakeNamedBufferNonResidentNV(pMakeNamedBufferNonResidentNV, (C.GLuint)(buffer))
}
func MakeNamedBufferResidentNV(buffer uint32, access uint32) {
  C.glowMakeNamedBufferResidentNV(pMakeNamedBufferResidentNV, (C.GLuint)(buffer), (C.GLenum)(access))
}
func MakeTextureHandleNonResidentARB(handle uint64) {
  C.glowMakeTextureHandleNonResidentARB(pMakeTextureHandleNonResidentARB, (C.GLuint64)(handle))
}
func MakeTextureHandleNonResidentNV(handle uint64) {
  C.glowMakeTextureHandleNonResidentNV(pMakeTextureHandleNonResidentNV, (C.GLuint64)(handle))
}
func MakeTextureHandleResidentARB(handle uint64) {
  C.glowMakeTextureHandleResidentARB(pMakeTextureHandleResidentARB, (C.GLuint64)(handle))
}
func MakeTextureHandleResidentNV(handle uint64) {
  C.glowMakeTextureHandleResidentNV(pMakeTextureHandleResidentNV, (C.GLuint64)(handle))
}
func Map1xOES(target uint32, u1 int32, u2 int32, stride int32, order int32, points int32) {
  C.glowMap1xOES(pMap1xOES, (C.GLenum)(target), (C.GLfixed)(u1), (C.GLfixed)(u2), (C.GLint)(stride), (C.GLint)(order), (C.GLfixed)(points))
}
func Map2xOES(target uint32, u1 int32, u2 int32, ustride int32, uorder int32, v1 int32, v2 int32, vstride int32, vorder int32, points int32) {
  C.glowMap2xOES(pMap2xOES, (C.GLenum)(target), (C.GLfixed)(u1), (C.GLfixed)(u2), (C.GLint)(ustride), (C.GLint)(uorder), (C.GLfixed)(v1), (C.GLfixed)(v2), (C.GLint)(vstride), (C.GLint)(vorder), (C.GLfixed)(points))
}
// map a buffer object's data store
func MapBuffer(target uint32, access uint32) unsafe.Pointer {
  ret := C.glowMapBuffer(pMapBuffer, (C.GLenum)(target), (C.GLenum)(access))
  return (unsafe.Pointer)(ret)
}
func MapBufferARB(target uint32, access uint32) unsafe.Pointer {
  ret := C.glowMapBufferARB(pMapBufferARB, (C.GLenum)(target), (C.GLenum)(access))
  return (unsafe.Pointer)(ret)
}
// map a section of a buffer object's data store
func MapBufferRange(target uint32, offset int, length int, access uint32) unsafe.Pointer {
  ret := C.glowMapBufferRange(pMapBufferRange, (C.GLenum)(target), (C.GLintptr)(offset), (C.GLsizeiptr)(length), (C.GLbitfield)(access))
  return (unsafe.Pointer)(ret)
}
func MapControlPointsNV(target uint32, index uint32, xtype uint32, ustride int32, vstride int32, uorder int32, vorder int32, packed bool, points unsafe.Pointer) {
  C.glowMapControlPointsNV(pMapControlPointsNV, (C.GLenum)(target), (C.GLuint)(index), (C.GLenum)(xtype), (C.GLsizei)(ustride), (C.GLsizei)(vstride), (C.GLint)(uorder), (C.GLint)(vorder), (C.GLboolean)(boolToInt(packed)), points)
}
func MapGrid1xOES(n int32, u1 int32, u2 int32) {
  C.glowMapGrid1xOES(pMapGrid1xOES, (C.GLint)(n), (C.GLfixed)(u1), (C.GLfixed)(u2))
}
func MapGrid2xOES(n int32, u1 int32, u2 int32, v1 int32, v2 int32) {
  C.glowMapGrid2xOES(pMapGrid2xOES, (C.GLint)(n), (C.GLfixed)(u1), (C.GLfixed)(u2), (C.GLfixed)(v1), (C.GLfixed)(v2))
}
func MapNamedBufferEXT(buffer uint32, access uint32) unsafe.Pointer {
  ret := C.glowMapNamedBufferEXT(pMapNamedBufferEXT, (C.GLuint)(buffer), (C.GLenum)(access))
  return (unsafe.Pointer)(ret)
}
func MapNamedBufferRangeEXT(buffer uint32, offset int, length int, access uint32) unsafe.Pointer {
  ret := C.glowMapNamedBufferRangeEXT(pMapNamedBufferRangeEXT, (C.GLuint)(buffer), (C.GLintptr)(offset), (C.GLsizeiptr)(length), (C.GLbitfield)(access))
  return (unsafe.Pointer)(ret)
}
func MapObjectBufferATI(buffer uint32) unsafe.Pointer {
  ret := C.glowMapObjectBufferATI(pMapObjectBufferATI, (C.GLuint)(buffer))
  return (unsafe.Pointer)(ret)
}
func MapParameterfvNV(target uint32, pname uint32, params *float32) {
  C.glowMapParameterfvNV(pMapParameterfvNV, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func MapParameterivNV(target uint32, pname uint32, params *int32) {
  C.glowMapParameterivNV(pMapParameterivNV, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func MapTexture2DINTEL(texture uint32, level int32, access uint32, stride *int32, layout *uint32) unsafe.Pointer {
  ret := C.glowMapTexture2DINTEL(pMapTexture2DINTEL, (C.GLuint)(texture), (C.GLint)(level), (C.GLbitfield)(access), (*C.GLint)(unsafe.Pointer(stride)), (*C.GLenum)(unsafe.Pointer(layout)))
  return (unsafe.Pointer)(ret)
}
func MapVertexAttrib1dAPPLE(index uint32, size uint32, u1 float64, u2 float64, stride int32, order int32, points *float64) {
  C.glowMapVertexAttrib1dAPPLE(pMapVertexAttrib1dAPPLE, (C.GLuint)(index), (C.GLuint)(size), (C.GLdouble)(u1), (C.GLdouble)(u2), (C.GLint)(stride), (C.GLint)(order), (*C.GLdouble)(unsafe.Pointer(points)))
}
func MapVertexAttrib1fAPPLE(index uint32, size uint32, u1 float32, u2 float32, stride int32, order int32, points *float32) {
  C.glowMapVertexAttrib1fAPPLE(pMapVertexAttrib1fAPPLE, (C.GLuint)(index), (C.GLuint)(size), (C.GLfloat)(u1), (C.GLfloat)(u2), (C.GLint)(stride), (C.GLint)(order), (*C.GLfloat)(unsafe.Pointer(points)))
}
func MapVertexAttrib2dAPPLE(index uint32, size uint32, u1 float64, u2 float64, ustride int32, uorder int32, v1 float64, v2 float64, vstride int32, vorder int32, points *float64) {
  C.glowMapVertexAttrib2dAPPLE(pMapVertexAttrib2dAPPLE, (C.GLuint)(index), (C.GLuint)(size), (C.GLdouble)(u1), (C.GLdouble)(u2), (C.GLint)(ustride), (C.GLint)(uorder), (C.GLdouble)(v1), (C.GLdouble)(v2), (C.GLint)(vstride), (C.GLint)(vorder), (*C.GLdouble)(unsafe.Pointer(points)))
}
func MapVertexAttrib2fAPPLE(index uint32, size uint32, u1 float32, u2 float32, ustride int32, uorder int32, v1 float32, v2 float32, vstride int32, vorder int32, points *float32) {
  C.glowMapVertexAttrib2fAPPLE(pMapVertexAttrib2fAPPLE, (C.GLuint)(index), (C.GLuint)(size), (C.GLfloat)(u1), (C.GLfloat)(u2), (C.GLint)(ustride), (C.GLint)(uorder), (C.GLfloat)(v1), (C.GLfloat)(v2), (C.GLint)(vstride), (C.GLint)(vorder), (*C.GLfloat)(unsafe.Pointer(points)))
}
func MaterialxOES(face uint32, pname uint32, param int32) {
  C.glowMaterialxOES(pMaterialxOES, (C.GLenum)(face), (C.GLenum)(pname), (C.GLfixed)(param))
}
func MaterialxvOES(face uint32, pname uint32, param *int32) {
  C.glowMaterialxvOES(pMaterialxvOES, (C.GLenum)(face), (C.GLenum)(pname), (*C.GLfixed)(unsafe.Pointer(param)))
}
func MatrixFrustumEXT(mode uint32, left float64, right float64, bottom float64, top float64, zNear float64, zFar float64) {
  C.glowMatrixFrustumEXT(pMatrixFrustumEXT, (C.GLenum)(mode), (C.GLdouble)(left), (C.GLdouble)(right), (C.GLdouble)(bottom), (C.GLdouble)(top), (C.GLdouble)(zNear), (C.GLdouble)(zFar))
}
func MatrixIndexPointerARB(size int32, xtype uint32, stride int32, pointer unsafe.Pointer) {
  C.glowMatrixIndexPointerARB(pMatrixIndexPointerARB, (C.GLint)(size), (C.GLenum)(xtype), (C.GLsizei)(stride), pointer)
}
func MatrixIndexubvARB(size int32, indices *uint8) {
  C.glowMatrixIndexubvARB(pMatrixIndexubvARB, (C.GLint)(size), (*C.GLubyte)(unsafe.Pointer(indices)))
}
func MatrixIndexuivARB(size int32, indices *uint32) {
  C.glowMatrixIndexuivARB(pMatrixIndexuivARB, (C.GLint)(size), (*C.GLuint)(unsafe.Pointer(indices)))
}
func MatrixIndexusvARB(size int32, indices *uint16) {
  C.glowMatrixIndexusvARB(pMatrixIndexusvARB, (C.GLint)(size), (*C.GLushort)(unsafe.Pointer(indices)))
}
func MatrixLoadIdentityEXT(mode uint32) {
  C.glowMatrixLoadIdentityEXT(pMatrixLoadIdentityEXT, (C.GLenum)(mode))
}
func MatrixLoadTransposedEXT(mode uint32, m *float64) {
  C.glowMatrixLoadTransposedEXT(pMatrixLoadTransposedEXT, (C.GLenum)(mode), (*C.GLdouble)(unsafe.Pointer(m)))
}
func MatrixLoadTransposefEXT(mode uint32, m *float32) {
  C.glowMatrixLoadTransposefEXT(pMatrixLoadTransposefEXT, (C.GLenum)(mode), (*C.GLfloat)(unsafe.Pointer(m)))
}
func MatrixLoaddEXT(mode uint32, m *float64) {
  C.glowMatrixLoaddEXT(pMatrixLoaddEXT, (C.GLenum)(mode), (*C.GLdouble)(unsafe.Pointer(m)))
}
func MatrixLoadfEXT(mode uint32, m *float32) {
  C.glowMatrixLoadfEXT(pMatrixLoadfEXT, (C.GLenum)(mode), (*C.GLfloat)(unsafe.Pointer(m)))
}
func MatrixMultTransposedEXT(mode uint32, m *float64) {
  C.glowMatrixMultTransposedEXT(pMatrixMultTransposedEXT, (C.GLenum)(mode), (*C.GLdouble)(unsafe.Pointer(m)))
}
func MatrixMultTransposefEXT(mode uint32, m *float32) {
  C.glowMatrixMultTransposefEXT(pMatrixMultTransposefEXT, (C.GLenum)(mode), (*C.GLfloat)(unsafe.Pointer(m)))
}
func MatrixMultdEXT(mode uint32, m *float64) {
  C.glowMatrixMultdEXT(pMatrixMultdEXT, (C.GLenum)(mode), (*C.GLdouble)(unsafe.Pointer(m)))
}
func MatrixMultfEXT(mode uint32, m *float32) {
  C.glowMatrixMultfEXT(pMatrixMultfEXT, (C.GLenum)(mode), (*C.GLfloat)(unsafe.Pointer(m)))
}
func MatrixOrthoEXT(mode uint32, left float64, right float64, bottom float64, top float64, zNear float64, zFar float64) {
  C.glowMatrixOrthoEXT(pMatrixOrthoEXT, (C.GLenum)(mode), (C.GLdouble)(left), (C.GLdouble)(right), (C.GLdouble)(bottom), (C.GLdouble)(top), (C.GLdouble)(zNear), (C.GLdouble)(zFar))
}
func MatrixPopEXT(mode uint32) {
  C.glowMatrixPopEXT(pMatrixPopEXT, (C.GLenum)(mode))
}
func MatrixPushEXT(mode uint32) {
  C.glowMatrixPushEXT(pMatrixPushEXT, (C.GLenum)(mode))
}
func MatrixRotatedEXT(mode uint32, angle float64, x float64, y float64, z float64) {
  C.glowMatrixRotatedEXT(pMatrixRotatedEXT, (C.GLenum)(mode), (C.GLdouble)(angle), (C.GLdouble)(x), (C.GLdouble)(y), (C.GLdouble)(z))
}
func MatrixRotatefEXT(mode uint32, angle float32, x float32, y float32, z float32) {
  C.glowMatrixRotatefEXT(pMatrixRotatefEXT, (C.GLenum)(mode), (C.GLfloat)(angle), (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z))
}
func MatrixScaledEXT(mode uint32, x float64, y float64, z float64) {
  C.glowMatrixScaledEXT(pMatrixScaledEXT, (C.GLenum)(mode), (C.GLdouble)(x), (C.GLdouble)(y), (C.GLdouble)(z))
}
func MatrixScalefEXT(mode uint32, x float32, y float32, z float32) {
  C.glowMatrixScalefEXT(pMatrixScalefEXT, (C.GLenum)(mode), (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z))
}
func MatrixTranslatedEXT(mode uint32, x float64, y float64, z float64) {
  C.glowMatrixTranslatedEXT(pMatrixTranslatedEXT, (C.GLenum)(mode), (C.GLdouble)(x), (C.GLdouble)(y), (C.GLdouble)(z))
}
func MatrixTranslatefEXT(mode uint32, x float32, y float32, z float32) {
  C.glowMatrixTranslatefEXT(pMatrixTranslatefEXT, (C.GLenum)(mode), (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z))
}
// defines a barrier ordering memory transactions
func MemoryBarrier(barriers uint32) {
  C.glowMemoryBarrier(pMemoryBarrier, (C.GLbitfield)(barriers))
}
func MemoryBarrierEXT(barriers uint32) {
  C.glowMemoryBarrierEXT(pMemoryBarrierEXT, (C.GLbitfield)(barriers))
}
// specifies minimum rate at which sample shaing takes place
func MinSampleShading(value float32) {
  C.glowMinSampleShading(pMinSampleShading, (C.GLfloat)(value))
}
func MinSampleShadingARB(value float32) {
  C.glowMinSampleShadingARB(pMinSampleShadingARB, (C.GLfloat)(value))
}
func MinmaxEXT(target uint32, internalformat uint32, sink bool) {
  C.glowMinmaxEXT(pMinmaxEXT, (C.GLenum)(target), (C.GLenum)(internalformat), (C.GLboolean)(boolToInt(sink)))
}
func MultMatrixxOES(m *int32) {
  C.glowMultMatrixxOES(pMultMatrixxOES, (*C.GLfixed)(unsafe.Pointer(m)))
}
func MultTransposeMatrixdARB(m *float64) {
  C.glowMultTransposeMatrixdARB(pMultTransposeMatrixdARB, (*C.GLdouble)(unsafe.Pointer(m)))
}
func MultTransposeMatrixfARB(m *float32) {
  C.glowMultTransposeMatrixfARB(pMultTransposeMatrixfARB, (*C.GLfloat)(unsafe.Pointer(m)))
}
func MultTransposeMatrixxOES(m *int32) {
  C.glowMultTransposeMatrixxOES(pMultTransposeMatrixxOES, (*C.GLfixed)(unsafe.Pointer(m)))
}
// render multiple sets of primitives from array data
func MultiDrawArrays(mode uint32, first *int32, count *int32, drawcount int32) {
  C.glowMultiDrawArrays(pMultiDrawArrays, (C.GLenum)(mode), (*C.GLint)(unsafe.Pointer(first)), (*C.GLsizei)(unsafe.Pointer(count)), (C.GLsizei)(drawcount))
}
func MultiDrawArraysEXT(mode uint32, first *int32, count *int32, primcount int32) {
  C.glowMultiDrawArraysEXT(pMultiDrawArraysEXT, (C.GLenum)(mode), (*C.GLint)(unsafe.Pointer(first)), (*C.GLsizei)(unsafe.Pointer(count)), (C.GLsizei)(primcount))
}
// render multiple sets of primitives from array data, taking parameters from memory
func MultiDrawArraysIndirect(mode uint32, indirect unsafe.Pointer, drawcount int32, stride int32) {
  C.glowMultiDrawArraysIndirect(pMultiDrawArraysIndirect, (C.GLenum)(mode), indirect, (C.GLsizei)(drawcount), (C.GLsizei)(stride))
}
func MultiDrawArraysIndirectAMD(mode uint32, indirect unsafe.Pointer, primcount int32, stride int32) {
  C.glowMultiDrawArraysIndirectAMD(pMultiDrawArraysIndirectAMD, (C.GLenum)(mode), indirect, (C.GLsizei)(primcount), (C.GLsizei)(stride))
}
func MultiDrawArraysIndirectBindlessNV(mode uint32, indirect unsafe.Pointer, drawCount int32, stride int32, vertexBufferCount int32) {
  C.glowMultiDrawArraysIndirectBindlessNV(pMultiDrawArraysIndirectBindlessNV, (C.GLenum)(mode), indirect, (C.GLsizei)(drawCount), (C.GLsizei)(stride), (C.GLint)(vertexBufferCount))
}
func MultiDrawArraysIndirectCountARB(mode uint32, indirect int, drawcount int, maxdrawcount int32, stride int32) {
  C.glowMultiDrawArraysIndirectCountARB(pMultiDrawArraysIndirectCountARB, (C.GLenum)(mode), (C.GLintptr)(indirect), (C.GLintptr)(drawcount), (C.GLsizei)(maxdrawcount), (C.GLsizei)(stride))
}
func MultiDrawElementArrayAPPLE(mode uint32, first *int32, count *int32, primcount int32) {
  C.glowMultiDrawElementArrayAPPLE(pMultiDrawElementArrayAPPLE, (C.GLenum)(mode), (*C.GLint)(unsafe.Pointer(first)), (*C.GLsizei)(unsafe.Pointer(count)), (C.GLsizei)(primcount))
}
// render multiple sets of primitives by specifying indices of array data elements
func MultiDrawElements(mode uint32, count *int32, xtype uint32, indices *unsafe.Pointer, drawcount int32) {
  C.glowMultiDrawElements(pMultiDrawElements, (C.GLenum)(mode), (*C.GLsizei)(unsafe.Pointer(count)), (C.GLenum)(xtype), indices, (C.GLsizei)(drawcount))
}
// render multiple sets of primitives by specifying indices of array data elements and an index to apply to each index
func MultiDrawElementsBaseVertex(mode uint32, count *int32, xtype uint32, indices *unsafe.Pointer, drawcount int32, basevertex *int32) {
  C.glowMultiDrawElementsBaseVertex(pMultiDrawElementsBaseVertex, (C.GLenum)(mode), (*C.GLsizei)(unsafe.Pointer(count)), (C.GLenum)(xtype), indices, (C.GLsizei)(drawcount), (*C.GLint)(unsafe.Pointer(basevertex)))
}
func MultiDrawElementsEXT(mode uint32, count *int32, xtype uint32, indices *unsafe.Pointer, primcount int32) {
  C.glowMultiDrawElementsEXT(pMultiDrawElementsEXT, (C.GLenum)(mode), (*C.GLsizei)(unsafe.Pointer(count)), (C.GLenum)(xtype), indices, (C.GLsizei)(primcount))
}
// render indexed primitives from array data, taking parameters from memory
func MultiDrawElementsIndirect(mode uint32, xtype uint32, indirect unsafe.Pointer, drawcount int32, stride int32) {
  C.glowMultiDrawElementsIndirect(pMultiDrawElementsIndirect, (C.GLenum)(mode), (C.GLenum)(xtype), indirect, (C.GLsizei)(drawcount), (C.GLsizei)(stride))
}
func MultiDrawElementsIndirectAMD(mode uint32, xtype uint32, indirect unsafe.Pointer, primcount int32, stride int32) {
  C.glowMultiDrawElementsIndirectAMD(pMultiDrawElementsIndirectAMD, (C.GLenum)(mode), (C.GLenum)(xtype), indirect, (C.GLsizei)(primcount), (C.GLsizei)(stride))
}
func MultiDrawElementsIndirectBindlessNV(mode uint32, xtype uint32, indirect unsafe.Pointer, drawCount int32, stride int32, vertexBufferCount int32) {
  C.glowMultiDrawElementsIndirectBindlessNV(pMultiDrawElementsIndirectBindlessNV, (C.GLenum)(mode), (C.GLenum)(xtype), indirect, (C.GLsizei)(drawCount), (C.GLsizei)(stride), (C.GLint)(vertexBufferCount))
}
func MultiDrawElementsIndirectCountARB(mode uint32, xtype uint32, indirect int, drawcount int, maxdrawcount int32, stride int32) {
  C.glowMultiDrawElementsIndirectCountARB(pMultiDrawElementsIndirectCountARB, (C.GLenum)(mode), (C.GLenum)(xtype), (C.GLintptr)(indirect), (C.GLintptr)(drawcount), (C.GLsizei)(maxdrawcount), (C.GLsizei)(stride))
}
func MultiDrawRangeElementArrayAPPLE(mode uint32, start uint32, end uint32, first *int32, count *int32, primcount int32) {
  C.glowMultiDrawRangeElementArrayAPPLE(pMultiDrawRangeElementArrayAPPLE, (C.GLenum)(mode), (C.GLuint)(start), (C.GLuint)(end), (*C.GLint)(unsafe.Pointer(first)), (*C.GLsizei)(unsafe.Pointer(count)), (C.GLsizei)(primcount))
}
func MultiModeDrawArraysIBM(mode *uint32, first *int32, count *int32, primcount int32, modestride int32) {
  C.glowMultiModeDrawArraysIBM(pMultiModeDrawArraysIBM, (*C.GLenum)(unsafe.Pointer(mode)), (*C.GLint)(unsafe.Pointer(first)), (*C.GLsizei)(unsafe.Pointer(count)), (C.GLsizei)(primcount), (C.GLint)(modestride))
}
func MultiModeDrawElementsIBM(mode *uint32, count *int32, xtype uint32, indices *unsafe.Pointer, primcount int32, modestride int32) {
  C.glowMultiModeDrawElementsIBM(pMultiModeDrawElementsIBM, (*C.GLenum)(unsafe.Pointer(mode)), (*C.GLsizei)(unsafe.Pointer(count)), (C.GLenum)(xtype), indices, (C.GLsizei)(primcount), (C.GLint)(modestride))
}
func MultiTexBufferEXT(texunit uint32, target uint32, internalformat uint32, buffer uint32) {
  C.glowMultiTexBufferEXT(pMultiTexBufferEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLenum)(internalformat), (C.GLuint)(buffer))
}
func MultiTexCoord1bOES(texture uint32, s int8) {
  C.glowMultiTexCoord1bOES(pMultiTexCoord1bOES, (C.GLenum)(texture), (C.GLbyte)(s))
}
func MultiTexCoord1bvOES(texture uint32, coords *int8) {
  C.glowMultiTexCoord1bvOES(pMultiTexCoord1bvOES, (C.GLenum)(texture), (*C.GLbyte)(unsafe.Pointer(coords)))
}
func MultiTexCoord1dARB(target uint32, s float64) {
  C.glowMultiTexCoord1dARB(pMultiTexCoord1dARB, (C.GLenum)(target), (C.GLdouble)(s))
}
func MultiTexCoord1dvARB(target uint32, v *float64) {
  C.glowMultiTexCoord1dvARB(pMultiTexCoord1dvARB, (C.GLenum)(target), (*C.GLdouble)(unsafe.Pointer(v)))
}
func MultiTexCoord1fARB(target uint32, s float32) {
  C.glowMultiTexCoord1fARB(pMultiTexCoord1fARB, (C.GLenum)(target), (C.GLfloat)(s))
}
func MultiTexCoord1fvARB(target uint32, v *float32) {
  C.glowMultiTexCoord1fvARB(pMultiTexCoord1fvARB, (C.GLenum)(target), (*C.GLfloat)(unsafe.Pointer(v)))
}
func MultiTexCoord1hNV(target uint32, s uint16) {
  C.glowMultiTexCoord1hNV(pMultiTexCoord1hNV, (C.GLenum)(target), (C.GLhalfNV)(s))
}
func MultiTexCoord1hvNV(target uint32, v *uint16) {
  C.glowMultiTexCoord1hvNV(pMultiTexCoord1hvNV, (C.GLenum)(target), (*C.GLhalfNV)(unsafe.Pointer(v)))
}
func MultiTexCoord1iARB(target uint32, s int32) {
  C.glowMultiTexCoord1iARB(pMultiTexCoord1iARB, (C.GLenum)(target), (C.GLint)(s))
}
func MultiTexCoord1ivARB(target uint32, v *int32) {
  C.glowMultiTexCoord1ivARB(pMultiTexCoord1ivARB, (C.GLenum)(target), (*C.GLint)(unsafe.Pointer(v)))
}
func MultiTexCoord1sARB(target uint32, s int16) {
  C.glowMultiTexCoord1sARB(pMultiTexCoord1sARB, (C.GLenum)(target), (C.GLshort)(s))
}
func MultiTexCoord1svARB(target uint32, v *int16) {
  C.glowMultiTexCoord1svARB(pMultiTexCoord1svARB, (C.GLenum)(target), (*C.GLshort)(unsafe.Pointer(v)))
}
func MultiTexCoord1xOES(texture uint32, s int32) {
  C.glowMultiTexCoord1xOES(pMultiTexCoord1xOES, (C.GLenum)(texture), (C.GLfixed)(s))
}
func MultiTexCoord1xvOES(texture uint32, coords *int32) {
  C.glowMultiTexCoord1xvOES(pMultiTexCoord1xvOES, (C.GLenum)(texture), (*C.GLfixed)(unsafe.Pointer(coords)))
}
func MultiTexCoord2bOES(texture uint32, s int8, t int8) {
  C.glowMultiTexCoord2bOES(pMultiTexCoord2bOES, (C.GLenum)(texture), (C.GLbyte)(s), (C.GLbyte)(t))
}
func MultiTexCoord2bvOES(texture uint32, coords *int8) {
  C.glowMultiTexCoord2bvOES(pMultiTexCoord2bvOES, (C.GLenum)(texture), (*C.GLbyte)(unsafe.Pointer(coords)))
}
func MultiTexCoord2dARB(target uint32, s float64, t float64) {
  C.glowMultiTexCoord2dARB(pMultiTexCoord2dARB, (C.GLenum)(target), (C.GLdouble)(s), (C.GLdouble)(t))
}
func MultiTexCoord2dvARB(target uint32, v *float64) {
  C.glowMultiTexCoord2dvARB(pMultiTexCoord2dvARB, (C.GLenum)(target), (*C.GLdouble)(unsafe.Pointer(v)))
}
func MultiTexCoord2fARB(target uint32, s float32, t float32) {
  C.glowMultiTexCoord2fARB(pMultiTexCoord2fARB, (C.GLenum)(target), (C.GLfloat)(s), (C.GLfloat)(t))
}
func MultiTexCoord2fvARB(target uint32, v *float32) {
  C.glowMultiTexCoord2fvARB(pMultiTexCoord2fvARB, (C.GLenum)(target), (*C.GLfloat)(unsafe.Pointer(v)))
}
func MultiTexCoord2hNV(target uint32, s uint16, t uint16) {
  C.glowMultiTexCoord2hNV(pMultiTexCoord2hNV, (C.GLenum)(target), (C.GLhalfNV)(s), (C.GLhalfNV)(t))
}
func MultiTexCoord2hvNV(target uint32, v *uint16) {
  C.glowMultiTexCoord2hvNV(pMultiTexCoord2hvNV, (C.GLenum)(target), (*C.GLhalfNV)(unsafe.Pointer(v)))
}
func MultiTexCoord2iARB(target uint32, s int32, t int32) {
  C.glowMultiTexCoord2iARB(pMultiTexCoord2iARB, (C.GLenum)(target), (C.GLint)(s), (C.GLint)(t))
}
func MultiTexCoord2ivARB(target uint32, v *int32) {
  C.glowMultiTexCoord2ivARB(pMultiTexCoord2ivARB, (C.GLenum)(target), (*C.GLint)(unsafe.Pointer(v)))
}
func MultiTexCoord2sARB(target uint32, s int16, t int16) {
  C.glowMultiTexCoord2sARB(pMultiTexCoord2sARB, (C.GLenum)(target), (C.GLshort)(s), (C.GLshort)(t))
}
func MultiTexCoord2svARB(target uint32, v *int16) {
  C.glowMultiTexCoord2svARB(pMultiTexCoord2svARB, (C.GLenum)(target), (*C.GLshort)(unsafe.Pointer(v)))
}
func MultiTexCoord2xOES(texture uint32, s int32, t int32) {
  C.glowMultiTexCoord2xOES(pMultiTexCoord2xOES, (C.GLenum)(texture), (C.GLfixed)(s), (C.GLfixed)(t))
}
func MultiTexCoord2xvOES(texture uint32, coords *int32) {
  C.glowMultiTexCoord2xvOES(pMultiTexCoord2xvOES, (C.GLenum)(texture), (*C.GLfixed)(unsafe.Pointer(coords)))
}
func MultiTexCoord3bOES(texture uint32, s int8, t int8, r int8) {
  C.glowMultiTexCoord3bOES(pMultiTexCoord3bOES, (C.GLenum)(texture), (C.GLbyte)(s), (C.GLbyte)(t), (C.GLbyte)(r))
}
func MultiTexCoord3bvOES(texture uint32, coords *int8) {
  C.glowMultiTexCoord3bvOES(pMultiTexCoord3bvOES, (C.GLenum)(texture), (*C.GLbyte)(unsafe.Pointer(coords)))
}
func MultiTexCoord3dARB(target uint32, s float64, t float64, r float64) {
  C.glowMultiTexCoord3dARB(pMultiTexCoord3dARB, (C.GLenum)(target), (C.GLdouble)(s), (C.GLdouble)(t), (C.GLdouble)(r))
}
func MultiTexCoord3dvARB(target uint32, v *float64) {
  C.glowMultiTexCoord3dvARB(pMultiTexCoord3dvARB, (C.GLenum)(target), (*C.GLdouble)(unsafe.Pointer(v)))
}
func MultiTexCoord3fARB(target uint32, s float32, t float32, r float32) {
  C.glowMultiTexCoord3fARB(pMultiTexCoord3fARB, (C.GLenum)(target), (C.GLfloat)(s), (C.GLfloat)(t), (C.GLfloat)(r))
}
func MultiTexCoord3fvARB(target uint32, v *float32) {
  C.glowMultiTexCoord3fvARB(pMultiTexCoord3fvARB, (C.GLenum)(target), (*C.GLfloat)(unsafe.Pointer(v)))
}
func MultiTexCoord3hNV(target uint32, s uint16, t uint16, r uint16) {
  C.glowMultiTexCoord3hNV(pMultiTexCoord3hNV, (C.GLenum)(target), (C.GLhalfNV)(s), (C.GLhalfNV)(t), (C.GLhalfNV)(r))
}
func MultiTexCoord3hvNV(target uint32, v *uint16) {
  C.glowMultiTexCoord3hvNV(pMultiTexCoord3hvNV, (C.GLenum)(target), (*C.GLhalfNV)(unsafe.Pointer(v)))
}
func MultiTexCoord3iARB(target uint32, s int32, t int32, r int32) {
  C.glowMultiTexCoord3iARB(pMultiTexCoord3iARB, (C.GLenum)(target), (C.GLint)(s), (C.GLint)(t), (C.GLint)(r))
}
func MultiTexCoord3ivARB(target uint32, v *int32) {
  C.glowMultiTexCoord3ivARB(pMultiTexCoord3ivARB, (C.GLenum)(target), (*C.GLint)(unsafe.Pointer(v)))
}
func MultiTexCoord3sARB(target uint32, s int16, t int16, r int16) {
  C.glowMultiTexCoord3sARB(pMultiTexCoord3sARB, (C.GLenum)(target), (C.GLshort)(s), (C.GLshort)(t), (C.GLshort)(r))
}
func MultiTexCoord3svARB(target uint32, v *int16) {
  C.glowMultiTexCoord3svARB(pMultiTexCoord3svARB, (C.GLenum)(target), (*C.GLshort)(unsafe.Pointer(v)))
}
func MultiTexCoord3xOES(texture uint32, s int32, t int32, r int32) {
  C.glowMultiTexCoord3xOES(pMultiTexCoord3xOES, (C.GLenum)(texture), (C.GLfixed)(s), (C.GLfixed)(t), (C.GLfixed)(r))
}
func MultiTexCoord3xvOES(texture uint32, coords *int32) {
  C.glowMultiTexCoord3xvOES(pMultiTexCoord3xvOES, (C.GLenum)(texture), (*C.GLfixed)(unsafe.Pointer(coords)))
}
func MultiTexCoord4bOES(texture uint32, s int8, t int8, r int8, q int8) {
  C.glowMultiTexCoord4bOES(pMultiTexCoord4bOES, (C.GLenum)(texture), (C.GLbyte)(s), (C.GLbyte)(t), (C.GLbyte)(r), (C.GLbyte)(q))
}
func MultiTexCoord4bvOES(texture uint32, coords *int8) {
  C.glowMultiTexCoord4bvOES(pMultiTexCoord4bvOES, (C.GLenum)(texture), (*C.GLbyte)(unsafe.Pointer(coords)))
}
func MultiTexCoord4dARB(target uint32, s float64, t float64, r float64, q float64) {
  C.glowMultiTexCoord4dARB(pMultiTexCoord4dARB, (C.GLenum)(target), (C.GLdouble)(s), (C.GLdouble)(t), (C.GLdouble)(r), (C.GLdouble)(q))
}
func MultiTexCoord4dvARB(target uint32, v *float64) {
  C.glowMultiTexCoord4dvARB(pMultiTexCoord4dvARB, (C.GLenum)(target), (*C.GLdouble)(unsafe.Pointer(v)))
}
func MultiTexCoord4fARB(target uint32, s float32, t float32, r float32, q float32) {
  C.glowMultiTexCoord4fARB(pMultiTexCoord4fARB, (C.GLenum)(target), (C.GLfloat)(s), (C.GLfloat)(t), (C.GLfloat)(r), (C.GLfloat)(q))
}
func MultiTexCoord4fvARB(target uint32, v *float32) {
  C.glowMultiTexCoord4fvARB(pMultiTexCoord4fvARB, (C.GLenum)(target), (*C.GLfloat)(unsafe.Pointer(v)))
}
func MultiTexCoord4hNV(target uint32, s uint16, t uint16, r uint16, q uint16) {
  C.glowMultiTexCoord4hNV(pMultiTexCoord4hNV, (C.GLenum)(target), (C.GLhalfNV)(s), (C.GLhalfNV)(t), (C.GLhalfNV)(r), (C.GLhalfNV)(q))
}
func MultiTexCoord4hvNV(target uint32, v *uint16) {
  C.glowMultiTexCoord4hvNV(pMultiTexCoord4hvNV, (C.GLenum)(target), (*C.GLhalfNV)(unsafe.Pointer(v)))
}
func MultiTexCoord4iARB(target uint32, s int32, t int32, r int32, q int32) {
  C.glowMultiTexCoord4iARB(pMultiTexCoord4iARB, (C.GLenum)(target), (C.GLint)(s), (C.GLint)(t), (C.GLint)(r), (C.GLint)(q))
}
func MultiTexCoord4ivARB(target uint32, v *int32) {
  C.glowMultiTexCoord4ivARB(pMultiTexCoord4ivARB, (C.GLenum)(target), (*C.GLint)(unsafe.Pointer(v)))
}
func MultiTexCoord4sARB(target uint32, s int16, t int16, r int16, q int16) {
  C.glowMultiTexCoord4sARB(pMultiTexCoord4sARB, (C.GLenum)(target), (C.GLshort)(s), (C.GLshort)(t), (C.GLshort)(r), (C.GLshort)(q))
}
func MultiTexCoord4svARB(target uint32, v *int16) {
  C.glowMultiTexCoord4svARB(pMultiTexCoord4svARB, (C.GLenum)(target), (*C.GLshort)(unsafe.Pointer(v)))
}
func MultiTexCoord4xOES(texture uint32, s int32, t int32, r int32, q int32) {
  C.glowMultiTexCoord4xOES(pMultiTexCoord4xOES, (C.GLenum)(texture), (C.GLfixed)(s), (C.GLfixed)(t), (C.GLfixed)(r), (C.GLfixed)(q))
}
func MultiTexCoord4xvOES(texture uint32, coords *int32) {
  C.glowMultiTexCoord4xvOES(pMultiTexCoord4xvOES, (C.GLenum)(texture), (*C.GLfixed)(unsafe.Pointer(coords)))
}
func MultiTexCoordPointerEXT(texunit uint32, size int32, xtype uint32, stride int32, pointer unsafe.Pointer) {
  C.glowMultiTexCoordPointerEXT(pMultiTexCoordPointerEXT, (C.GLenum)(texunit), (C.GLint)(size), (C.GLenum)(xtype), (C.GLsizei)(stride), pointer)
}
func MultiTexEnvfEXT(texunit uint32, target uint32, pname uint32, param float32) {
  C.glowMultiTexEnvfEXT(pMultiTexEnvfEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLenum)(pname), (C.GLfloat)(param))
}
func MultiTexEnvfvEXT(texunit uint32, target uint32, pname uint32, params *float32) {
  C.glowMultiTexEnvfvEXT(pMultiTexEnvfvEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func MultiTexEnviEXT(texunit uint32, target uint32, pname uint32, param int32) {
  C.glowMultiTexEnviEXT(pMultiTexEnviEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLenum)(pname), (C.GLint)(param))
}
func MultiTexEnvivEXT(texunit uint32, target uint32, pname uint32, params *int32) {
  C.glowMultiTexEnvivEXT(pMultiTexEnvivEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func MultiTexGendEXT(texunit uint32, coord uint32, pname uint32, param float64) {
  C.glowMultiTexGendEXT(pMultiTexGendEXT, (C.GLenum)(texunit), (C.GLenum)(coord), (C.GLenum)(pname), (C.GLdouble)(param))
}
func MultiTexGendvEXT(texunit uint32, coord uint32, pname uint32, params *float64) {
  C.glowMultiTexGendvEXT(pMultiTexGendvEXT, (C.GLenum)(texunit), (C.GLenum)(coord), (C.GLenum)(pname), (*C.GLdouble)(unsafe.Pointer(params)))
}
func MultiTexGenfEXT(texunit uint32, coord uint32, pname uint32, param float32) {
  C.glowMultiTexGenfEXT(pMultiTexGenfEXT, (C.GLenum)(texunit), (C.GLenum)(coord), (C.GLenum)(pname), (C.GLfloat)(param))
}
func MultiTexGenfvEXT(texunit uint32, coord uint32, pname uint32, params *float32) {
  C.glowMultiTexGenfvEXT(pMultiTexGenfvEXT, (C.GLenum)(texunit), (C.GLenum)(coord), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func MultiTexGeniEXT(texunit uint32, coord uint32, pname uint32, param int32) {
  C.glowMultiTexGeniEXT(pMultiTexGeniEXT, (C.GLenum)(texunit), (C.GLenum)(coord), (C.GLenum)(pname), (C.GLint)(param))
}
func MultiTexGenivEXT(texunit uint32, coord uint32, pname uint32, params *int32) {
  C.glowMultiTexGenivEXT(pMultiTexGenivEXT, (C.GLenum)(texunit), (C.GLenum)(coord), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func MultiTexImage1DEXT(texunit uint32, target uint32, level int32, internalformat int32, width int32, border int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
  C.glowMultiTexImage1DEXT(pMultiTexImage1DEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLint)(level), (C.GLint)(internalformat), (C.GLsizei)(width), (C.GLint)(border), (C.GLenum)(format), (C.GLenum)(xtype), pixels)
}
func MultiTexImage2DEXT(texunit uint32, target uint32, level int32, internalformat int32, width int32, height int32, border int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
  C.glowMultiTexImage2DEXT(pMultiTexImage2DEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLint)(level), (C.GLint)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLint)(border), (C.GLenum)(format), (C.GLenum)(xtype), pixels)
}
func MultiTexImage3DEXT(texunit uint32, target uint32, level int32, internalformat int32, width int32, height int32, depth int32, border int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
  C.glowMultiTexImage3DEXT(pMultiTexImage3DEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLint)(level), (C.GLint)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLsizei)(depth), (C.GLint)(border), (C.GLenum)(format), (C.GLenum)(xtype), pixels)
}
func MultiTexParameterIivEXT(texunit uint32, target uint32, pname uint32, params *int32) {
  C.glowMultiTexParameterIivEXT(pMultiTexParameterIivEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func MultiTexParameterIuivEXT(texunit uint32, target uint32, pname uint32, params *uint32) {
  C.glowMultiTexParameterIuivEXT(pMultiTexParameterIuivEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLenum)(pname), (*C.GLuint)(unsafe.Pointer(params)))
}
func MultiTexParameterfEXT(texunit uint32, target uint32, pname uint32, param float32) {
  C.glowMultiTexParameterfEXT(pMultiTexParameterfEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLenum)(pname), (C.GLfloat)(param))
}
func MultiTexParameterfvEXT(texunit uint32, target uint32, pname uint32, params *float32) {
  C.glowMultiTexParameterfvEXT(pMultiTexParameterfvEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func MultiTexParameteriEXT(texunit uint32, target uint32, pname uint32, param int32) {
  C.glowMultiTexParameteriEXT(pMultiTexParameteriEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLenum)(pname), (C.GLint)(param))
}
func MultiTexParameterivEXT(texunit uint32, target uint32, pname uint32, params *int32) {
  C.glowMultiTexParameterivEXT(pMultiTexParameterivEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func MultiTexRenderbufferEXT(texunit uint32, target uint32, renderbuffer uint32) {
  C.glowMultiTexRenderbufferEXT(pMultiTexRenderbufferEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLuint)(renderbuffer))
}
func MultiTexSubImage1DEXT(texunit uint32, target uint32, level int32, xoffset int32, width int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
  C.glowMultiTexSubImage1DEXT(pMultiTexSubImage1DEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLsizei)(width), (C.GLenum)(format), (C.GLenum)(xtype), pixels)
}
func MultiTexSubImage2DEXT(texunit uint32, target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
  C.glowMultiTexSubImage2DEXT(pMultiTexSubImage2DEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLint)(yoffset), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLenum)(format), (C.GLenum)(xtype), pixels)
}
func MultiTexSubImage3DEXT(texunit uint32, target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
  C.glowMultiTexSubImage3DEXT(pMultiTexSubImage3DEXT, (C.GLenum)(texunit), (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLint)(yoffset), (C.GLint)(zoffset), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLsizei)(depth), (C.GLenum)(format), (C.GLenum)(xtype), pixels)
}
func NamedBufferDataEXT(buffer uint32, size int, data unsafe.Pointer, usage uint32) {
  C.glowNamedBufferDataEXT(pNamedBufferDataEXT, (C.GLuint)(buffer), (C.GLsizeiptr)(size), data, (C.GLenum)(usage))
}
func NamedBufferStorageEXT(buffer uint32, size int, data unsafe.Pointer, flags uint32) {
  C.glowNamedBufferStorageEXT(pNamedBufferStorageEXT, (C.GLuint)(buffer), (C.GLsizeiptr)(size), data, (C.GLbitfield)(flags))
}
func NamedBufferSubDataEXT(buffer uint32, offset int, size int, data unsafe.Pointer) {
  C.glowNamedBufferSubDataEXT(pNamedBufferSubDataEXT, (C.GLuint)(buffer), (C.GLintptr)(offset), (C.GLsizeiptr)(size), data)
}
func NamedCopyBufferSubDataEXT(readBuffer uint32, writeBuffer uint32, readOffset int, writeOffset int, size int) {
  C.glowNamedCopyBufferSubDataEXT(pNamedCopyBufferSubDataEXT, (C.GLuint)(readBuffer), (C.GLuint)(writeBuffer), (C.GLintptr)(readOffset), (C.GLintptr)(writeOffset), (C.GLsizeiptr)(size))
}
func NamedFramebufferParameteriEXT(framebuffer uint32, pname uint32, param int32) {
  C.glowNamedFramebufferParameteriEXT(pNamedFramebufferParameteriEXT, (C.GLuint)(framebuffer), (C.GLenum)(pname), (C.GLint)(param))
}
func NamedFramebufferRenderbufferEXT(framebuffer uint32, attachment uint32, renderbuffertarget uint32, renderbuffer uint32) {
  C.glowNamedFramebufferRenderbufferEXT(pNamedFramebufferRenderbufferEXT, (C.GLuint)(framebuffer), (C.GLenum)(attachment), (C.GLenum)(renderbuffertarget), (C.GLuint)(renderbuffer))
}
func NamedFramebufferTexture1DEXT(framebuffer uint32, attachment uint32, textarget uint32, texture uint32, level int32) {
  C.glowNamedFramebufferTexture1DEXT(pNamedFramebufferTexture1DEXT, (C.GLuint)(framebuffer), (C.GLenum)(attachment), (C.GLenum)(textarget), (C.GLuint)(texture), (C.GLint)(level))
}
func NamedFramebufferTexture2DEXT(framebuffer uint32, attachment uint32, textarget uint32, texture uint32, level int32) {
  C.glowNamedFramebufferTexture2DEXT(pNamedFramebufferTexture2DEXT, (C.GLuint)(framebuffer), (C.GLenum)(attachment), (C.GLenum)(textarget), (C.GLuint)(texture), (C.GLint)(level))
}
func NamedFramebufferTexture3DEXT(framebuffer uint32, attachment uint32, textarget uint32, texture uint32, level int32, zoffset int32) {
  C.glowNamedFramebufferTexture3DEXT(pNamedFramebufferTexture3DEXT, (C.GLuint)(framebuffer), (C.GLenum)(attachment), (C.GLenum)(textarget), (C.GLuint)(texture), (C.GLint)(level), (C.GLint)(zoffset))
}
func NamedFramebufferTextureEXT(framebuffer uint32, attachment uint32, texture uint32, level int32) {
  C.glowNamedFramebufferTextureEXT(pNamedFramebufferTextureEXT, (C.GLuint)(framebuffer), (C.GLenum)(attachment), (C.GLuint)(texture), (C.GLint)(level))
}
func NamedFramebufferTextureFaceEXT(framebuffer uint32, attachment uint32, texture uint32, level int32, face uint32) {
  C.glowNamedFramebufferTextureFaceEXT(pNamedFramebufferTextureFaceEXT, (C.GLuint)(framebuffer), (C.GLenum)(attachment), (C.GLuint)(texture), (C.GLint)(level), (C.GLenum)(face))
}
func NamedFramebufferTextureLayerEXT(framebuffer uint32, attachment uint32, texture uint32, level int32, layer int32) {
  C.glowNamedFramebufferTextureLayerEXT(pNamedFramebufferTextureLayerEXT, (C.GLuint)(framebuffer), (C.GLenum)(attachment), (C.GLuint)(texture), (C.GLint)(level), (C.GLint)(layer))
}
func NamedProgramLocalParameter4dEXT(program uint32, target uint32, index uint32, x float64, y float64, z float64, w float64) {
  C.glowNamedProgramLocalParameter4dEXT(pNamedProgramLocalParameter4dEXT, (C.GLuint)(program), (C.GLenum)(target), (C.GLuint)(index), (C.GLdouble)(x), (C.GLdouble)(y), (C.GLdouble)(z), (C.GLdouble)(w))
}
func NamedProgramLocalParameter4dvEXT(program uint32, target uint32, index uint32, params *float64) {
  C.glowNamedProgramLocalParameter4dvEXT(pNamedProgramLocalParameter4dvEXT, (C.GLuint)(program), (C.GLenum)(target), (C.GLuint)(index), (*C.GLdouble)(unsafe.Pointer(params)))
}
func NamedProgramLocalParameter4fEXT(program uint32, target uint32, index uint32, x float32, y float32, z float32, w float32) {
  C.glowNamedProgramLocalParameter4fEXT(pNamedProgramLocalParameter4fEXT, (C.GLuint)(program), (C.GLenum)(target), (C.GLuint)(index), (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z), (C.GLfloat)(w))
}
func NamedProgramLocalParameter4fvEXT(program uint32, target uint32, index uint32, params *float32) {
  C.glowNamedProgramLocalParameter4fvEXT(pNamedProgramLocalParameter4fvEXT, (C.GLuint)(program), (C.GLenum)(target), (C.GLuint)(index), (*C.GLfloat)(unsafe.Pointer(params)))
}
func NamedProgramLocalParameterI4iEXT(program uint32, target uint32, index uint32, x int32, y int32, z int32, w int32) {
  C.glowNamedProgramLocalParameterI4iEXT(pNamedProgramLocalParameterI4iEXT, (C.GLuint)(program), (C.GLenum)(target), (C.GLuint)(index), (C.GLint)(x), (C.GLint)(y), (C.GLint)(z), (C.GLint)(w))
}
func NamedProgramLocalParameterI4ivEXT(program uint32, target uint32, index uint32, params *int32) {
  C.glowNamedProgramLocalParameterI4ivEXT(pNamedProgramLocalParameterI4ivEXT, (C.GLuint)(program), (C.GLenum)(target), (C.GLuint)(index), (*C.GLint)(unsafe.Pointer(params)))
}
func NamedProgramLocalParameterI4uiEXT(program uint32, target uint32, index uint32, x uint32, y uint32, z uint32, w uint32) {
  C.glowNamedProgramLocalParameterI4uiEXT(pNamedProgramLocalParameterI4uiEXT, (C.GLuint)(program), (C.GLenum)(target), (C.GLuint)(index), (C.GLuint)(x), (C.GLuint)(y), (C.GLuint)(z), (C.GLuint)(w))
}
func NamedProgramLocalParameterI4uivEXT(program uint32, target uint32, index uint32, params *uint32) {
  C.glowNamedProgramLocalParameterI4uivEXT(pNamedProgramLocalParameterI4uivEXT, (C.GLuint)(program), (C.GLenum)(target), (C.GLuint)(index), (*C.GLuint)(unsafe.Pointer(params)))
}
func NamedProgramLocalParameters4fvEXT(program uint32, target uint32, index uint32, count int32, params *float32) {
  C.glowNamedProgramLocalParameters4fvEXT(pNamedProgramLocalParameters4fvEXT, (C.GLuint)(program), (C.GLenum)(target), (C.GLuint)(index), (C.GLsizei)(count), (*C.GLfloat)(unsafe.Pointer(params)))
}
func NamedProgramLocalParametersI4ivEXT(program uint32, target uint32, index uint32, count int32, params *int32) {
  C.glowNamedProgramLocalParametersI4ivEXT(pNamedProgramLocalParametersI4ivEXT, (C.GLuint)(program), (C.GLenum)(target), (C.GLuint)(index), (C.GLsizei)(count), (*C.GLint)(unsafe.Pointer(params)))
}
func NamedProgramLocalParametersI4uivEXT(program uint32, target uint32, index uint32, count int32, params *uint32) {
  C.glowNamedProgramLocalParametersI4uivEXT(pNamedProgramLocalParametersI4uivEXT, (C.GLuint)(program), (C.GLenum)(target), (C.GLuint)(index), (C.GLsizei)(count), (*C.GLuint)(unsafe.Pointer(params)))
}
func NamedProgramStringEXT(program uint32, target uint32, format uint32, len int32, xstring unsafe.Pointer) {
  C.glowNamedProgramStringEXT(pNamedProgramStringEXT, (C.GLuint)(program), (C.GLenum)(target), (C.GLenum)(format), (C.GLsizei)(len), xstring)
}
func NamedRenderbufferStorageEXT(renderbuffer uint32, internalformat uint32, width int32, height int32) {
  C.glowNamedRenderbufferStorageEXT(pNamedRenderbufferStorageEXT, (C.GLuint)(renderbuffer), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height))
}
func NamedRenderbufferStorageMultisampleCoverageEXT(renderbuffer uint32, coverageSamples int32, colorSamples int32, internalformat uint32, width int32, height int32) {
  C.glowNamedRenderbufferStorageMultisampleCoverageEXT(pNamedRenderbufferStorageMultisampleCoverageEXT, (C.GLuint)(renderbuffer), (C.GLsizei)(coverageSamples), (C.GLsizei)(colorSamples), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height))
}
func NamedRenderbufferStorageMultisampleEXT(renderbuffer uint32, samples int32, internalformat uint32, width int32, height int32) {
  C.glowNamedRenderbufferStorageMultisampleEXT(pNamedRenderbufferStorageMultisampleEXT, (C.GLuint)(renderbuffer), (C.GLsizei)(samples), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height))
}
func NamedStringARB(xtype uint32, namelen int32, name *int8, stringlen int32, xstring *int8) {
  C.glowNamedStringARB(pNamedStringARB, (C.GLenum)(xtype), (C.GLint)(namelen), (*C.GLchar)(unsafe.Pointer(name)), (C.GLint)(stringlen), (*C.GLchar)(unsafe.Pointer(xstring)))
}
func NewObjectBufferATI(size int32, pointer unsafe.Pointer, usage uint32) uint32 {
  ret := C.glowNewObjectBufferATI(pNewObjectBufferATI, (C.GLsizei)(size), pointer, (C.GLenum)(usage))
  return (uint32)(ret)
}
func Normal3fVertex3fSUN(nx float32, ny float32, nz float32, x float32, y float32, z float32) {
  C.glowNormal3fVertex3fSUN(pNormal3fVertex3fSUN, (C.GLfloat)(nx), (C.GLfloat)(ny), (C.GLfloat)(nz), (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z))
}
func Normal3fVertex3fvSUN(n *float32, v *float32) {
  C.glowNormal3fVertex3fvSUN(pNormal3fVertex3fvSUN, (*C.GLfloat)(unsafe.Pointer(n)), (*C.GLfloat)(unsafe.Pointer(v)))
}
func Normal3hNV(nx uint16, ny uint16, nz uint16) {
  C.glowNormal3hNV(pNormal3hNV, (C.GLhalfNV)(nx), (C.GLhalfNV)(ny), (C.GLhalfNV)(nz))
}
func Normal3hvNV(v *uint16) {
  C.glowNormal3hvNV(pNormal3hvNV, (*C.GLhalfNV)(unsafe.Pointer(v)))
}
func Normal3xOES(nx int32, ny int32, nz int32) {
  C.glowNormal3xOES(pNormal3xOES, (C.GLfixed)(nx), (C.GLfixed)(ny), (C.GLfixed)(nz))
}
func Normal3xvOES(coords *int32) {
  C.glowNormal3xvOES(pNormal3xvOES, (*C.GLfixed)(unsafe.Pointer(coords)))
}
func NormalFormatNV(xtype uint32, stride int32) {
  C.glowNormalFormatNV(pNormalFormatNV, (C.GLenum)(xtype), (C.GLsizei)(stride))
}
func NormalPointerEXT(xtype uint32, stride int32, count int32, pointer unsafe.Pointer) {
  C.glowNormalPointerEXT(pNormalPointerEXT, (C.GLenum)(xtype), (C.GLsizei)(stride), (C.GLsizei)(count), pointer)
}
func NormalPointerListIBM(xtype uint32, stride int32, pointer *unsafe.Pointer, ptrstride int32) {
  C.glowNormalPointerListIBM(pNormalPointerListIBM, (C.GLenum)(xtype), (C.GLint)(stride), pointer, (C.GLint)(ptrstride))
}
func NormalPointervINTEL(xtype uint32, pointer *unsafe.Pointer) {
  C.glowNormalPointervINTEL(pNormalPointervINTEL, (C.GLenum)(xtype), pointer)
}
func NormalStream3bATI(stream uint32, nx int8, ny int8, nz int8) {
  C.glowNormalStream3bATI(pNormalStream3bATI, (C.GLenum)(stream), (C.GLbyte)(nx), (C.GLbyte)(ny), (C.GLbyte)(nz))
}
func NormalStream3bvATI(stream uint32, coords *int8) {
  C.glowNormalStream3bvATI(pNormalStream3bvATI, (C.GLenum)(stream), (*C.GLbyte)(unsafe.Pointer(coords)))
}
func NormalStream3dATI(stream uint32, nx float64, ny float64, nz float64) {
  C.glowNormalStream3dATI(pNormalStream3dATI, (C.GLenum)(stream), (C.GLdouble)(nx), (C.GLdouble)(ny), (C.GLdouble)(nz))
}
func NormalStream3dvATI(stream uint32, coords *float64) {
  C.glowNormalStream3dvATI(pNormalStream3dvATI, (C.GLenum)(stream), (*C.GLdouble)(unsafe.Pointer(coords)))
}
func NormalStream3fATI(stream uint32, nx float32, ny float32, nz float32) {
  C.glowNormalStream3fATI(pNormalStream3fATI, (C.GLenum)(stream), (C.GLfloat)(nx), (C.GLfloat)(ny), (C.GLfloat)(nz))
}
func NormalStream3fvATI(stream uint32, coords *float32) {
  C.glowNormalStream3fvATI(pNormalStream3fvATI, (C.GLenum)(stream), (*C.GLfloat)(unsafe.Pointer(coords)))
}
func NormalStream3iATI(stream uint32, nx int32, ny int32, nz int32) {
  C.glowNormalStream3iATI(pNormalStream3iATI, (C.GLenum)(stream), (C.GLint)(nx), (C.GLint)(ny), (C.GLint)(nz))
}
func NormalStream3ivATI(stream uint32, coords *int32) {
  C.glowNormalStream3ivATI(pNormalStream3ivATI, (C.GLenum)(stream), (*C.GLint)(unsafe.Pointer(coords)))
}
func NormalStream3sATI(stream uint32, nx int16, ny int16, nz int16) {
  C.glowNormalStream3sATI(pNormalStream3sATI, (C.GLenum)(stream), (C.GLshort)(nx), (C.GLshort)(ny), (C.GLshort)(nz))
}
func NormalStream3svATI(stream uint32, coords *int16) {
  C.glowNormalStream3svATI(pNormalStream3svATI, (C.GLenum)(stream), (*C.GLshort)(unsafe.Pointer(coords)))
}
// label a named object identified within a namespace
func ObjectLabel(identifier uint32, name uint32, length int32, label *int8) {
  C.glowObjectLabel(pObjectLabel, (C.GLenum)(identifier), (C.GLuint)(name), (C.GLsizei)(length), (*C.GLchar)(unsafe.Pointer(label)))
}
func ObjectLabelKHR(identifier uint32, name uint32, length int32, label *int8) {
  C.glowObjectLabelKHR(pObjectLabelKHR, (C.GLenum)(identifier), (C.GLuint)(name), (C.GLsizei)(length), (*C.GLchar)(unsafe.Pointer(label)))
}
// label a a sync object identified by a pointer
func ObjectPtrLabel(ptr unsafe.Pointer, length int32, label *int8) {
  C.glowObjectPtrLabel(pObjectPtrLabel, ptr, (C.GLsizei)(length), (*C.GLchar)(unsafe.Pointer(label)))
}
func ObjectPtrLabelKHR(ptr unsafe.Pointer, length int32, label *int8) {
  C.glowObjectPtrLabelKHR(pObjectPtrLabelKHR, ptr, (C.GLsizei)(length), (*C.GLchar)(unsafe.Pointer(label)))
}
func ObjectPurgeableAPPLE(objectType uint32, name uint32, option uint32) uint32 {
  ret := C.glowObjectPurgeableAPPLE(pObjectPurgeableAPPLE, (C.GLenum)(objectType), (C.GLuint)(name), (C.GLenum)(option))
  return (uint32)(ret)
}
func ObjectUnpurgeableAPPLE(objectType uint32, name uint32, option uint32) uint32 {
  ret := C.glowObjectUnpurgeableAPPLE(pObjectUnpurgeableAPPLE, (C.GLenum)(objectType), (C.GLuint)(name), (C.GLenum)(option))
  return (uint32)(ret)
}
func OrthofOES(l float32, r float32, b float32, t float32, n float32, f float32) {
  C.glowOrthofOES(pOrthofOES, (C.GLfloat)(l), (C.GLfloat)(r), (C.GLfloat)(b), (C.GLfloat)(t), (C.GLfloat)(n), (C.GLfloat)(f))
}
func OrthoxOES(l int32, r int32, b int32, t int32, n int32, f int32) {
  C.glowOrthoxOES(pOrthoxOES, (C.GLfixed)(l), (C.GLfixed)(r), (C.GLfixed)(b), (C.GLfixed)(t), (C.GLfixed)(n), (C.GLfixed)(f))
}
func PNTrianglesfATI(pname uint32, param float32) {
  C.glowPNTrianglesfATI(pPNTrianglesfATI, (C.GLenum)(pname), (C.GLfloat)(param))
}
func PNTrianglesiATI(pname uint32, param int32) {
  C.glowPNTrianglesiATI(pPNTrianglesiATI, (C.GLenum)(pname), (C.GLint)(param))
}
func PassTexCoordATI(dst uint32, coord uint32, swizzle uint32) {
  C.glowPassTexCoordATI(pPassTexCoordATI, (C.GLuint)(dst), (C.GLuint)(coord), (C.GLenum)(swizzle))
}
func PassThroughxOES(token int32) {
  C.glowPassThroughxOES(pPassThroughxOES, (C.GLfixed)(token))
}
func PatchParameterfv(pname uint32, values *float32) {
  C.glowPatchParameterfv(pPatchParameterfv, (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(values)))
}
func PatchParameteri(pname uint32, value int32) {
  C.glowPatchParameteri(pPatchParameteri, (C.GLenum)(pname), (C.GLint)(value))
}
func PathColorGenNV(color uint32, genMode uint32, colorFormat uint32, coeffs *float32) {
  C.glowPathColorGenNV(pPathColorGenNV, (C.GLenum)(color), (C.GLenum)(genMode), (C.GLenum)(colorFormat), (*C.GLfloat)(unsafe.Pointer(coeffs)))
}
func PathCommandsNV(path uint32, numCommands int32, commands *uint8, numCoords int32, coordType uint32, coords unsafe.Pointer) {
  C.glowPathCommandsNV(pPathCommandsNV, (C.GLuint)(path), (C.GLsizei)(numCommands), (*C.GLubyte)(unsafe.Pointer(commands)), (C.GLsizei)(numCoords), (C.GLenum)(coordType), coords)
}
func PathCoordsNV(path uint32, numCoords int32, coordType uint32, coords unsafe.Pointer) {
  C.glowPathCoordsNV(pPathCoordsNV, (C.GLuint)(path), (C.GLsizei)(numCoords), (C.GLenum)(coordType), coords)
}
func PathCoverDepthFuncNV(xfunc uint32) {
  C.glowPathCoverDepthFuncNV(pPathCoverDepthFuncNV, (C.GLenum)(xfunc))
}
func PathDashArrayNV(path uint32, dashCount int32, dashArray *float32) {
  C.glowPathDashArrayNV(pPathDashArrayNV, (C.GLuint)(path), (C.GLsizei)(dashCount), (*C.GLfloat)(unsafe.Pointer(dashArray)))
}
func PathFogGenNV(genMode uint32) {
  C.glowPathFogGenNV(pPathFogGenNV, (C.GLenum)(genMode))
}
func PathGlyphRangeNV(firstPathName uint32, fontTarget uint32, fontName unsafe.Pointer, fontStyle uint32, firstGlyph uint32, numGlyphs int32, handleMissingGlyphs uint32, pathParameterTemplate uint32, emScale float32) {
  C.glowPathGlyphRangeNV(pPathGlyphRangeNV, (C.GLuint)(firstPathName), (C.GLenum)(fontTarget), fontName, (C.GLbitfield)(fontStyle), (C.GLuint)(firstGlyph), (C.GLsizei)(numGlyphs), (C.GLenum)(handleMissingGlyphs), (C.GLuint)(pathParameterTemplate), (C.GLfloat)(emScale))
}
func PathGlyphsNV(firstPathName uint32, fontTarget uint32, fontName unsafe.Pointer, fontStyle uint32, numGlyphs int32, xtype uint32, charcodes unsafe.Pointer, handleMissingGlyphs uint32, pathParameterTemplate uint32, emScale float32) {
  C.glowPathGlyphsNV(pPathGlyphsNV, (C.GLuint)(firstPathName), (C.GLenum)(fontTarget), fontName, (C.GLbitfield)(fontStyle), (C.GLsizei)(numGlyphs), (C.GLenum)(xtype), charcodes, (C.GLenum)(handleMissingGlyphs), (C.GLuint)(pathParameterTemplate), (C.GLfloat)(emScale))
}
func PathParameterfNV(path uint32, pname uint32, value float32) {
  C.glowPathParameterfNV(pPathParameterfNV, (C.GLuint)(path), (C.GLenum)(pname), (C.GLfloat)(value))
}
func PathParameterfvNV(path uint32, pname uint32, value *float32) {
  C.glowPathParameterfvNV(pPathParameterfvNV, (C.GLuint)(path), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(value)))
}
func PathParameteriNV(path uint32, pname uint32, value int32) {
  C.glowPathParameteriNV(pPathParameteriNV, (C.GLuint)(path), (C.GLenum)(pname), (C.GLint)(value))
}
func PathParameterivNV(path uint32, pname uint32, value *int32) {
  C.glowPathParameterivNV(pPathParameterivNV, (C.GLuint)(path), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(value)))
}
func PathStencilDepthOffsetNV(factor float32, units float32) {
  C.glowPathStencilDepthOffsetNV(pPathStencilDepthOffsetNV, (C.GLfloat)(factor), (C.GLfloat)(units))
}
func PathStencilFuncNV(xfunc uint32, ref int32, mask uint32) {
  C.glowPathStencilFuncNV(pPathStencilFuncNV, (C.GLenum)(xfunc), (C.GLint)(ref), (C.GLuint)(mask))
}
func PathStringNV(path uint32, format uint32, length int32, pathString unsafe.Pointer) {
  C.glowPathStringNV(pPathStringNV, (C.GLuint)(path), (C.GLenum)(format), (C.GLsizei)(length), pathString)
}
func PathSubCommandsNV(path uint32, commandStart int32, commandsToDelete int32, numCommands int32, commands *uint8, numCoords int32, coordType uint32, coords unsafe.Pointer) {
  C.glowPathSubCommandsNV(pPathSubCommandsNV, (C.GLuint)(path), (C.GLsizei)(commandStart), (C.GLsizei)(commandsToDelete), (C.GLsizei)(numCommands), (*C.GLubyte)(unsafe.Pointer(commands)), (C.GLsizei)(numCoords), (C.GLenum)(coordType), coords)
}
func PathSubCoordsNV(path uint32, coordStart int32, numCoords int32, coordType uint32, coords unsafe.Pointer) {
  C.glowPathSubCoordsNV(pPathSubCoordsNV, (C.GLuint)(path), (C.GLsizei)(coordStart), (C.GLsizei)(numCoords), (C.GLenum)(coordType), coords)
}
func PathTexGenNV(texCoordSet uint32, genMode uint32, components int32, coeffs *float32) {
  C.glowPathTexGenNV(pPathTexGenNV, (C.GLenum)(texCoordSet), (C.GLenum)(genMode), (C.GLint)(components), (*C.GLfloat)(unsafe.Pointer(coeffs)))
}
// pause transform feedback operations
func PauseTransformFeedback() {
  C.glowPauseTransformFeedback(pPauseTransformFeedback)
}
func PauseTransformFeedbackNV() {
  C.glowPauseTransformFeedbackNV(pPauseTransformFeedbackNV)
}
func PixelDataRangeNV(target uint32, length int32, pointer unsafe.Pointer) {
  C.glowPixelDataRangeNV(pPixelDataRangeNV, (C.GLenum)(target), (C.GLsizei)(length), pointer)
}
func PixelMapx(xmap uint32, size int32, values *int32) {
  C.glowPixelMapx(pPixelMapx, (C.GLenum)(xmap), (C.GLint)(size), (*C.GLfixed)(unsafe.Pointer(values)))
}
func PixelStoref(pname uint32, param float32) {
  C.glowPixelStoref(pPixelStoref, (C.GLenum)(pname), (C.GLfloat)(param))
}
func PixelStorei(pname uint32, param int32) {
  C.glowPixelStorei(pPixelStorei, (C.GLenum)(pname), (C.GLint)(param))
}
func PixelStorex(pname uint32, param int32) {
  C.glowPixelStorex(pPixelStorex, (C.GLenum)(pname), (C.GLfixed)(param))
}
func PixelTexGenParameterfSGIS(pname uint32, param float32) {
  C.glowPixelTexGenParameterfSGIS(pPixelTexGenParameterfSGIS, (C.GLenum)(pname), (C.GLfloat)(param))
}
func PixelTexGenParameterfvSGIS(pname uint32, params *float32) {
  C.glowPixelTexGenParameterfvSGIS(pPixelTexGenParameterfvSGIS, (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func PixelTexGenParameteriSGIS(pname uint32, param int32) {
  C.glowPixelTexGenParameteriSGIS(pPixelTexGenParameteriSGIS, (C.GLenum)(pname), (C.GLint)(param))
}
func PixelTexGenParameterivSGIS(pname uint32, params *int32) {
  C.glowPixelTexGenParameterivSGIS(pPixelTexGenParameterivSGIS, (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func PixelTexGenSGIX(mode uint32) {
  C.glowPixelTexGenSGIX(pPixelTexGenSGIX, (C.GLenum)(mode))
}
func PixelTransferxOES(pname uint32, param int32) {
  C.glowPixelTransferxOES(pPixelTransferxOES, (C.GLenum)(pname), (C.GLfixed)(param))
}
func PixelTransformParameterfEXT(target uint32, pname uint32, param float32) {
  C.glowPixelTransformParameterfEXT(pPixelTransformParameterfEXT, (C.GLenum)(target), (C.GLenum)(pname), (C.GLfloat)(param))
}
func PixelTransformParameterfvEXT(target uint32, pname uint32, params *float32) {
  C.glowPixelTransformParameterfvEXT(pPixelTransformParameterfvEXT, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func PixelTransformParameteriEXT(target uint32, pname uint32, param int32) {
  C.glowPixelTransformParameteriEXT(pPixelTransformParameteriEXT, (C.GLenum)(target), (C.GLenum)(pname), (C.GLint)(param))
}
func PixelTransformParameterivEXT(target uint32, pname uint32, params *int32) {
  C.glowPixelTransformParameterivEXT(pPixelTransformParameterivEXT, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func PixelZoomxOES(xfactor int32, yfactor int32) {
  C.glowPixelZoomxOES(pPixelZoomxOES, (C.GLfixed)(xfactor), (C.GLfixed)(yfactor))
}
func PointAlongPathNV(path uint32, startSegment int32, numSegments int32, distance float32, x *float32, y *float32, tangentX *float32, tangentY *float32) bool {
  ret := C.glowPointAlongPathNV(pPointAlongPathNV, (C.GLuint)(path), (C.GLsizei)(startSegment), (C.GLsizei)(numSegments), (C.GLfloat)(distance), (*C.GLfloat)(unsafe.Pointer(x)), (*C.GLfloat)(unsafe.Pointer(y)), (*C.GLfloat)(unsafe.Pointer(tangentX)), (*C.GLfloat)(unsafe.Pointer(tangentY)))
  return ret == TRUE
}
func PointParameterf(pname uint32, param float32) {
  C.glowPointParameterf(pPointParameterf, (C.GLenum)(pname), (C.GLfloat)(param))
}
func PointParameterfARB(pname uint32, param float32) {
  C.glowPointParameterfARB(pPointParameterfARB, (C.GLenum)(pname), (C.GLfloat)(param))
}
func PointParameterfEXT(pname uint32, param float32) {
  C.glowPointParameterfEXT(pPointParameterfEXT, (C.GLenum)(pname), (C.GLfloat)(param))
}
func PointParameterfSGIS(pname uint32, param float32) {
  C.glowPointParameterfSGIS(pPointParameterfSGIS, (C.GLenum)(pname), (C.GLfloat)(param))
}
func PointParameterfv(pname uint32, params *float32) {
  C.glowPointParameterfv(pPointParameterfv, (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func PointParameterfvARB(pname uint32, params *float32) {
  C.glowPointParameterfvARB(pPointParameterfvARB, (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func PointParameterfvEXT(pname uint32, params *float32) {
  C.glowPointParameterfvEXT(pPointParameterfvEXT, (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func PointParameterfvSGIS(pname uint32, params *float32) {
  C.glowPointParameterfvSGIS(pPointParameterfvSGIS, (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func PointParameteri(pname uint32, param int32) {
  C.glowPointParameteri(pPointParameteri, (C.GLenum)(pname), (C.GLint)(param))
}
func PointParameteriNV(pname uint32, param int32) {
  C.glowPointParameteriNV(pPointParameteriNV, (C.GLenum)(pname), (C.GLint)(param))
}
func PointParameteriv(pname uint32, params *int32) {
  C.glowPointParameteriv(pPointParameteriv, (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func PointParameterivNV(pname uint32, params *int32) {
  C.glowPointParameterivNV(pPointParameterivNV, (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func PointParameterxOES(pname uint32, param int32) {
  C.glowPointParameterxOES(pPointParameterxOES, (C.GLenum)(pname), (C.GLfixed)(param))
}
func PointParameterxvOES(pname uint32, params *int32) {
  C.glowPointParameterxvOES(pPointParameterxvOES, (C.GLenum)(pname), (*C.GLfixed)(unsafe.Pointer(params)))
}
// specify the diameter of rasterized points
func PointSize(size float32) {
  C.glowPointSize(pPointSize, (C.GLfloat)(size))
}
func PointSizexOES(size int32) {
  C.glowPointSizexOES(pPointSizexOES, (C.GLfixed)(size))
}
func PollAsyncSGIX(markerp *uint32) int32 {
  ret := C.glowPollAsyncSGIX(pPollAsyncSGIX, (*C.GLuint)(unsafe.Pointer(markerp)))
  return (int32)(ret)
}
func PollInstrumentsSGIX(marker_p *int32) int32 {
  ret := C.glowPollInstrumentsSGIX(pPollInstrumentsSGIX, (*C.GLint)(unsafe.Pointer(marker_p)))
  return (int32)(ret)
}
// select a polygon rasterization mode
func PolygonMode(face uint32, mode uint32) {
  C.glowPolygonMode(pPolygonMode, (C.GLenum)(face), (C.GLenum)(mode))
}
// set the scale and units used to calculate depth values
func PolygonOffset(factor float32, units float32) {
  C.glowPolygonOffset(pPolygonOffset, (C.GLfloat)(factor), (C.GLfloat)(units))
}
func PolygonOffsetEXT(factor float32, bias float32) {
  C.glowPolygonOffsetEXT(pPolygonOffsetEXT, (C.GLfloat)(factor), (C.GLfloat)(bias))
}
func PolygonOffsetxOES(factor int32, units int32) {
  C.glowPolygonOffsetxOES(pPolygonOffsetxOES, (C.GLfixed)(factor), (C.GLfixed)(units))
}
// pop the active debug group
func PopDebugGroup() {
  C.glowPopDebugGroup(pPopDebugGroup)
}
func PopDebugGroupKHR() {
  C.glowPopDebugGroupKHR(pPopDebugGroupKHR)
}
func PopGroupMarkerEXT() {
  C.glowPopGroupMarkerEXT(pPopGroupMarkerEXT)
}
func PresentFrameDualFillNV(video_slot uint32, minPresentTime uint64, beginPresentTimeId uint32, presentDurationId uint32, xtype uint32, target0 uint32, fill0 uint32, target1 uint32, fill1 uint32, target2 uint32, fill2 uint32, target3 uint32, fill3 uint32) {
  C.glowPresentFrameDualFillNV(pPresentFrameDualFillNV, (C.GLuint)(video_slot), (C.GLuint64EXT)(minPresentTime), (C.GLuint)(beginPresentTimeId), (C.GLuint)(presentDurationId), (C.GLenum)(xtype), (C.GLenum)(target0), (C.GLuint)(fill0), (C.GLenum)(target1), (C.GLuint)(fill1), (C.GLenum)(target2), (C.GLuint)(fill2), (C.GLenum)(target3), (C.GLuint)(fill3))
}
func PresentFrameKeyedNV(video_slot uint32, minPresentTime uint64, beginPresentTimeId uint32, presentDurationId uint32, xtype uint32, target0 uint32, fill0 uint32, key0 uint32, target1 uint32, fill1 uint32, key1 uint32) {
  C.glowPresentFrameKeyedNV(pPresentFrameKeyedNV, (C.GLuint)(video_slot), (C.GLuint64EXT)(minPresentTime), (C.GLuint)(beginPresentTimeId), (C.GLuint)(presentDurationId), (C.GLenum)(xtype), (C.GLenum)(target0), (C.GLuint)(fill0), (C.GLuint)(key0), (C.GLenum)(target1), (C.GLuint)(fill1), (C.GLuint)(key1))
}
// specify the primitive restart index
func PrimitiveRestartIndex(index uint32) {
  C.glowPrimitiveRestartIndex(pPrimitiveRestartIndex, (C.GLuint)(index))
}
func PrimitiveRestartIndexNV(index uint32) {
  C.glowPrimitiveRestartIndexNV(pPrimitiveRestartIndexNV, (C.GLuint)(index))
}
func PrimitiveRestartNV() {
  C.glowPrimitiveRestartNV(pPrimitiveRestartNV)
}
func PrioritizeTexturesEXT(n int32, textures *uint32, priorities *float32) {
  C.glowPrioritizeTexturesEXT(pPrioritizeTexturesEXT, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(textures)), (*C.GLclampf)(unsafe.Pointer(priorities)))
}
func PrioritizeTexturesxOES(n int32, textures *uint32, priorities *int32) {
  C.glowPrioritizeTexturesxOES(pPrioritizeTexturesxOES, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(textures)), (*C.GLfixed)(unsafe.Pointer(priorities)))
}
// load a program object with a program binary
func ProgramBinary(program uint32, binaryFormat uint32, binary unsafe.Pointer, length int32) {
  C.glowProgramBinary(pProgramBinary, (C.GLuint)(program), (C.GLenum)(binaryFormat), binary, (C.GLsizei)(length))
}
func ProgramBufferParametersIivNV(target uint32, bindingIndex uint32, wordIndex uint32, count int32, params *int32) {
  C.glowProgramBufferParametersIivNV(pProgramBufferParametersIivNV, (C.GLenum)(target), (C.GLuint)(bindingIndex), (C.GLuint)(wordIndex), (C.GLsizei)(count), (*C.GLint)(unsafe.Pointer(params)))
}
func ProgramBufferParametersIuivNV(target uint32, bindingIndex uint32, wordIndex uint32, count int32, params *uint32) {
  C.glowProgramBufferParametersIuivNV(pProgramBufferParametersIuivNV, (C.GLenum)(target), (C.GLuint)(bindingIndex), (C.GLuint)(wordIndex), (C.GLsizei)(count), (*C.GLuint)(unsafe.Pointer(params)))
}
func ProgramBufferParametersfvNV(target uint32, bindingIndex uint32, wordIndex uint32, count int32, params *float32) {
  C.glowProgramBufferParametersfvNV(pProgramBufferParametersfvNV, (C.GLenum)(target), (C.GLuint)(bindingIndex), (C.GLuint)(wordIndex), (C.GLsizei)(count), (*C.GLfloat)(unsafe.Pointer(params)))
}
func ProgramEnvParameter4dARB(target uint32, index uint32, x float64, y float64, z float64, w float64) {
  C.glowProgramEnvParameter4dARB(pProgramEnvParameter4dARB, (C.GLenum)(target), (C.GLuint)(index), (C.GLdouble)(x), (C.GLdouble)(y), (C.GLdouble)(z), (C.GLdouble)(w))
}
func ProgramEnvParameter4dvARB(target uint32, index uint32, params *float64) {
  C.glowProgramEnvParameter4dvARB(pProgramEnvParameter4dvARB, (C.GLenum)(target), (C.GLuint)(index), (*C.GLdouble)(unsafe.Pointer(params)))
}
func ProgramEnvParameter4fARB(target uint32, index uint32, x float32, y float32, z float32, w float32) {
  C.glowProgramEnvParameter4fARB(pProgramEnvParameter4fARB, (C.GLenum)(target), (C.GLuint)(index), (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z), (C.GLfloat)(w))
}
func ProgramEnvParameter4fvARB(target uint32, index uint32, params *float32) {
  C.glowProgramEnvParameter4fvARB(pProgramEnvParameter4fvARB, (C.GLenum)(target), (C.GLuint)(index), (*C.GLfloat)(unsafe.Pointer(params)))
}
func ProgramEnvParameterI4iNV(target uint32, index uint32, x int32, y int32, z int32, w int32) {
  C.glowProgramEnvParameterI4iNV(pProgramEnvParameterI4iNV, (C.GLenum)(target), (C.GLuint)(index), (C.GLint)(x), (C.GLint)(y), (C.GLint)(z), (C.GLint)(w))
}
func ProgramEnvParameterI4ivNV(target uint32, index uint32, params *int32) {
  C.glowProgramEnvParameterI4ivNV(pProgramEnvParameterI4ivNV, (C.GLenum)(target), (C.GLuint)(index), (*C.GLint)(unsafe.Pointer(params)))
}
func ProgramEnvParameterI4uiNV(target uint32, index uint32, x uint32, y uint32, z uint32, w uint32) {
  C.glowProgramEnvParameterI4uiNV(pProgramEnvParameterI4uiNV, (C.GLenum)(target), (C.GLuint)(index), (C.GLuint)(x), (C.GLuint)(y), (C.GLuint)(z), (C.GLuint)(w))
}
func ProgramEnvParameterI4uivNV(target uint32, index uint32, params *uint32) {
  C.glowProgramEnvParameterI4uivNV(pProgramEnvParameterI4uivNV, (C.GLenum)(target), (C.GLuint)(index), (*C.GLuint)(unsafe.Pointer(params)))
}
func ProgramEnvParameters4fvEXT(target uint32, index uint32, count int32, params *float32) {
  C.glowProgramEnvParameters4fvEXT(pProgramEnvParameters4fvEXT, (C.GLenum)(target), (C.GLuint)(index), (C.GLsizei)(count), (*C.GLfloat)(unsafe.Pointer(params)))
}
func ProgramEnvParametersI4ivNV(target uint32, index uint32, count int32, params *int32) {
  C.glowProgramEnvParametersI4ivNV(pProgramEnvParametersI4ivNV, (C.GLenum)(target), (C.GLuint)(index), (C.GLsizei)(count), (*C.GLint)(unsafe.Pointer(params)))
}
func ProgramEnvParametersI4uivNV(target uint32, index uint32, count int32, params *uint32) {
  C.glowProgramEnvParametersI4uivNV(pProgramEnvParametersI4uivNV, (C.GLenum)(target), (C.GLuint)(index), (C.GLsizei)(count), (*C.GLuint)(unsafe.Pointer(params)))
}
func ProgramLocalParameter4dARB(target uint32, index uint32, x float64, y float64, z float64, w float64) {
  C.glowProgramLocalParameter4dARB(pProgramLocalParameter4dARB, (C.GLenum)(target), (C.GLuint)(index), (C.GLdouble)(x), (C.GLdouble)(y), (C.GLdouble)(z), (C.GLdouble)(w))
}
func ProgramLocalParameter4dvARB(target uint32, index uint32, params *float64) {
  C.glowProgramLocalParameter4dvARB(pProgramLocalParameter4dvARB, (C.GLenum)(target), (C.GLuint)(index), (*C.GLdouble)(unsafe.Pointer(params)))
}
func ProgramLocalParameter4fARB(target uint32, index uint32, x float32, y float32, z float32, w float32) {
  C.glowProgramLocalParameter4fARB(pProgramLocalParameter4fARB, (C.GLenum)(target), (C.GLuint)(index), (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z), (C.GLfloat)(w))
}
func ProgramLocalParameter4fvARB(target uint32, index uint32, params *float32) {
  C.glowProgramLocalParameter4fvARB(pProgramLocalParameter4fvARB, (C.GLenum)(target), (C.GLuint)(index), (*C.GLfloat)(unsafe.Pointer(params)))
}
func ProgramLocalParameterI4iNV(target uint32, index uint32, x int32, y int32, z int32, w int32) {
  C.glowProgramLocalParameterI4iNV(pProgramLocalParameterI4iNV, (C.GLenum)(target), (C.GLuint)(index), (C.GLint)(x), (C.GLint)(y), (C.GLint)(z), (C.GLint)(w))
}
func ProgramLocalParameterI4ivNV(target uint32, index uint32, params *int32) {
  C.glowProgramLocalParameterI4ivNV(pProgramLocalParameterI4ivNV, (C.GLenum)(target), (C.GLuint)(index), (*C.GLint)(unsafe.Pointer(params)))
}
func ProgramLocalParameterI4uiNV(target uint32, index uint32, x uint32, y uint32, z uint32, w uint32) {
  C.glowProgramLocalParameterI4uiNV(pProgramLocalParameterI4uiNV, (C.GLenum)(target), (C.GLuint)(index), (C.GLuint)(x), (C.GLuint)(y), (C.GLuint)(z), (C.GLuint)(w))
}
func ProgramLocalParameterI4uivNV(target uint32, index uint32, params *uint32) {
  C.glowProgramLocalParameterI4uivNV(pProgramLocalParameterI4uivNV, (C.GLenum)(target), (C.GLuint)(index), (*C.GLuint)(unsafe.Pointer(params)))
}
func ProgramLocalParameters4fvEXT(target uint32, index uint32, count int32, params *float32) {
  C.glowProgramLocalParameters4fvEXT(pProgramLocalParameters4fvEXT, (C.GLenum)(target), (C.GLuint)(index), (C.GLsizei)(count), (*C.GLfloat)(unsafe.Pointer(params)))
}
func ProgramLocalParametersI4ivNV(target uint32, index uint32, count int32, params *int32) {
  C.glowProgramLocalParametersI4ivNV(pProgramLocalParametersI4ivNV, (C.GLenum)(target), (C.GLuint)(index), (C.GLsizei)(count), (*C.GLint)(unsafe.Pointer(params)))
}
func ProgramLocalParametersI4uivNV(target uint32, index uint32, count int32, params *uint32) {
  C.glowProgramLocalParametersI4uivNV(pProgramLocalParametersI4uivNV, (C.GLenum)(target), (C.GLuint)(index), (C.GLsizei)(count), (*C.GLuint)(unsafe.Pointer(params)))
}
func ProgramNamedParameter4dNV(id uint32, len int32, name *uint8, x float64, y float64, z float64, w float64) {
  C.glowProgramNamedParameter4dNV(pProgramNamedParameter4dNV, (C.GLuint)(id), (C.GLsizei)(len), (*C.GLubyte)(unsafe.Pointer(name)), (C.GLdouble)(x), (C.GLdouble)(y), (C.GLdouble)(z), (C.GLdouble)(w))
}
func ProgramNamedParameter4dvNV(id uint32, len int32, name *uint8, v *float64) {
  C.glowProgramNamedParameter4dvNV(pProgramNamedParameter4dvNV, (C.GLuint)(id), (C.GLsizei)(len), (*C.GLubyte)(unsafe.Pointer(name)), (*C.GLdouble)(unsafe.Pointer(v)))
}
func ProgramNamedParameter4fNV(id uint32, len int32, name *uint8, x float32, y float32, z float32, w float32) {
  C.glowProgramNamedParameter4fNV(pProgramNamedParameter4fNV, (C.GLuint)(id), (C.GLsizei)(len), (*C.GLubyte)(unsafe.Pointer(name)), (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z), (C.GLfloat)(w))
}
func ProgramNamedParameter4fvNV(id uint32, len int32, name *uint8, v *float32) {
  C.glowProgramNamedParameter4fvNV(pProgramNamedParameter4fvNV, (C.GLuint)(id), (C.GLsizei)(len), (*C.GLubyte)(unsafe.Pointer(name)), (*C.GLfloat)(unsafe.Pointer(v)))
}
func ProgramParameter4dNV(target uint32, index uint32, x float64, y float64, z float64, w float64) {
  C.glowProgramParameter4dNV(pProgramParameter4dNV, (C.GLenum)(target), (C.GLuint)(index), (C.GLdouble)(x), (C.GLdouble)(y), (C.GLdouble)(z), (C.GLdouble)(w))
}
func ProgramParameter4dvNV(target uint32, index uint32, v *float64) {
  C.glowProgramParameter4dvNV(pProgramParameter4dvNV, (C.GLenum)(target), (C.GLuint)(index), (*C.GLdouble)(unsafe.Pointer(v)))
}
func ProgramParameter4fNV(target uint32, index uint32, x float32, y float32, z float32, w float32) {
  C.glowProgramParameter4fNV(pProgramParameter4fNV, (C.GLenum)(target), (C.GLuint)(index), (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z), (C.GLfloat)(w))
}
func ProgramParameter4fvNV(target uint32, index uint32, v *float32) {
  C.glowProgramParameter4fvNV(pProgramParameter4fvNV, (C.GLenum)(target), (C.GLuint)(index), (*C.GLfloat)(unsafe.Pointer(v)))
}
func ProgramParameteri(program uint32, pname uint32, value int32) {
  C.glowProgramParameteri(pProgramParameteri, (C.GLuint)(program), (C.GLenum)(pname), (C.GLint)(value))
}
func ProgramParameteriARB(program uint32, pname uint32, value int32) {
  C.glowProgramParameteriARB(pProgramParameteriARB, (C.GLuint)(program), (C.GLenum)(pname), (C.GLint)(value))
}
func ProgramParameteriEXT(program uint32, pname uint32, value int32) {
  C.glowProgramParameteriEXT(pProgramParameteriEXT, (C.GLuint)(program), (C.GLenum)(pname), (C.GLint)(value))
}
func ProgramParameters4dvNV(target uint32, index uint32, count int32, v *float64) {
  C.glowProgramParameters4dvNV(pProgramParameters4dvNV, (C.GLenum)(target), (C.GLuint)(index), (C.GLsizei)(count), (*C.GLdouble)(unsafe.Pointer(v)))
}
func ProgramParameters4fvNV(target uint32, index uint32, count int32, v *float32) {
  C.glowProgramParameters4fvNV(pProgramParameters4fvNV, (C.GLenum)(target), (C.GLuint)(index), (C.GLsizei)(count), (*C.GLfloat)(unsafe.Pointer(v)))
}
func ProgramStringARB(target uint32, format uint32, len int32, xstring unsafe.Pointer) {
  C.glowProgramStringARB(pProgramStringARB, (C.GLenum)(target), (C.GLenum)(format), (C.GLsizei)(len), xstring)
}
func ProgramSubroutineParametersuivNV(target uint32, count int32, params *uint32) {
  C.glowProgramSubroutineParametersuivNV(pProgramSubroutineParametersuivNV, (C.GLenum)(target), (C.GLsizei)(count), (*C.GLuint)(unsafe.Pointer(params)))
}
func ProgramUniform1d(program uint32, location int32, v0 float64) {
  C.glowProgramUniform1d(pProgramUniform1d, (C.GLuint)(program), (C.GLint)(location), (C.GLdouble)(v0))
}
func ProgramUniform1dEXT(program uint32, location int32, x float64) {
  C.glowProgramUniform1dEXT(pProgramUniform1dEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLdouble)(x))
}
func ProgramUniform1dv(program uint32, location int32, count int32, value *float64) {
  C.glowProgramUniform1dv(pProgramUniform1dv, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLdouble)(unsafe.Pointer(value)))
}
func ProgramUniform1dvEXT(program uint32, location int32, count int32, value *float64) {
  C.glowProgramUniform1dvEXT(pProgramUniform1dvEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLdouble)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for a specified program object
func ProgramUniform1f(program uint32, location int32, v0 float32) {
  C.glowProgramUniform1f(pProgramUniform1f, (C.GLuint)(program), (C.GLint)(location), (C.GLfloat)(v0))
}
func ProgramUniform1fEXT(program uint32, location int32, v0 float32) {
  C.glowProgramUniform1fEXT(pProgramUniform1fEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLfloat)(v0))
}
// Specify the value of a uniform variable for a specified program object
func ProgramUniform1fv(program uint32, location int32, count int32, value *float32) {
  C.glowProgramUniform1fv(pProgramUniform1fv, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLfloat)(unsafe.Pointer(value)))
}
func ProgramUniform1fvEXT(program uint32, location int32, count int32, value *float32) {
  C.glowProgramUniform1fvEXT(pProgramUniform1fvEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLfloat)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for a specified program object
func ProgramUniform1i(program uint32, location int32, v0 int32) {
  C.glowProgramUniform1i(pProgramUniform1i, (C.GLuint)(program), (C.GLint)(location), (C.GLint)(v0))
}
func ProgramUniform1i64NV(program uint32, location int32, x int64) {
  C.glowProgramUniform1i64NV(pProgramUniform1i64NV, (C.GLuint)(program), (C.GLint)(location), (C.GLint64EXT)(x))
}
func ProgramUniform1i64vNV(program uint32, location int32, count int32, value *int64) {
  C.glowProgramUniform1i64vNV(pProgramUniform1i64vNV, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLint64EXT)(unsafe.Pointer(value)))
}
func ProgramUniform1iEXT(program uint32, location int32, v0 int32) {
  C.glowProgramUniform1iEXT(pProgramUniform1iEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLint)(v0))
}
// Specify the value of a uniform variable for a specified program object
func ProgramUniform1iv(program uint32, location int32, count int32, value *int32) {
  C.glowProgramUniform1iv(pProgramUniform1iv, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLint)(unsafe.Pointer(value)))
}
func ProgramUniform1ivEXT(program uint32, location int32, count int32, value *int32) {
  C.glowProgramUniform1ivEXT(pProgramUniform1ivEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLint)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for a specified program object
func ProgramUniform1ui(program uint32, location int32, v0 uint32) {
  C.glowProgramUniform1ui(pProgramUniform1ui, (C.GLuint)(program), (C.GLint)(location), (C.GLuint)(v0))
}
func ProgramUniform1ui64NV(program uint32, location int32, x uint64) {
  C.glowProgramUniform1ui64NV(pProgramUniform1ui64NV, (C.GLuint)(program), (C.GLint)(location), (C.GLuint64EXT)(x))
}
func ProgramUniform1ui64vNV(program uint32, location int32, count int32, value *uint64) {
  C.glowProgramUniform1ui64vNV(pProgramUniform1ui64vNV, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLuint64EXT)(unsafe.Pointer(value)))
}
func ProgramUniform1uiEXT(program uint32, location int32, v0 uint32) {
  C.glowProgramUniform1uiEXT(pProgramUniform1uiEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLuint)(v0))
}
// Specify the value of a uniform variable for a specified program object
func ProgramUniform1uiv(program uint32, location int32, count int32, value *uint32) {
  C.glowProgramUniform1uiv(pProgramUniform1uiv, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLuint)(unsafe.Pointer(value)))
}
func ProgramUniform1uivEXT(program uint32, location int32, count int32, value *uint32) {
  C.glowProgramUniform1uivEXT(pProgramUniform1uivEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLuint)(unsafe.Pointer(value)))
}
func ProgramUniform2d(program uint32, location int32, v0 float64, v1 float64) {
  C.glowProgramUniform2d(pProgramUniform2d, (C.GLuint)(program), (C.GLint)(location), (C.GLdouble)(v0), (C.GLdouble)(v1))
}
func ProgramUniform2dEXT(program uint32, location int32, x float64, y float64) {
  C.glowProgramUniform2dEXT(pProgramUniform2dEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLdouble)(x), (C.GLdouble)(y))
}
func ProgramUniform2dv(program uint32, location int32, count int32, value *float64) {
  C.glowProgramUniform2dv(pProgramUniform2dv, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLdouble)(unsafe.Pointer(value)))
}
func ProgramUniform2dvEXT(program uint32, location int32, count int32, value *float64) {
  C.glowProgramUniform2dvEXT(pProgramUniform2dvEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLdouble)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for a specified program object
func ProgramUniform2f(program uint32, location int32, v0 float32, v1 float32) {
  C.glowProgramUniform2f(pProgramUniform2f, (C.GLuint)(program), (C.GLint)(location), (C.GLfloat)(v0), (C.GLfloat)(v1))
}
func ProgramUniform2fEXT(program uint32, location int32, v0 float32, v1 float32) {
  C.glowProgramUniform2fEXT(pProgramUniform2fEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLfloat)(v0), (C.GLfloat)(v1))
}
// Specify the value of a uniform variable for a specified program object
func ProgramUniform2fv(program uint32, location int32, count int32, value *float32) {
  C.glowProgramUniform2fv(pProgramUniform2fv, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLfloat)(unsafe.Pointer(value)))
}
func ProgramUniform2fvEXT(program uint32, location int32, count int32, value *float32) {
  C.glowProgramUniform2fvEXT(pProgramUniform2fvEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLfloat)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for a specified program object
func ProgramUniform2i(program uint32, location int32, v0 int32, v1 int32) {
  C.glowProgramUniform2i(pProgramUniform2i, (C.GLuint)(program), (C.GLint)(location), (C.GLint)(v0), (C.GLint)(v1))
}
func ProgramUniform2i64NV(program uint32, location int32, x int64, y int64) {
  C.glowProgramUniform2i64NV(pProgramUniform2i64NV, (C.GLuint)(program), (C.GLint)(location), (C.GLint64EXT)(x), (C.GLint64EXT)(y))
}
func ProgramUniform2i64vNV(program uint32, location int32, count int32, value *int64) {
  C.glowProgramUniform2i64vNV(pProgramUniform2i64vNV, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLint64EXT)(unsafe.Pointer(value)))
}
func ProgramUniform2iEXT(program uint32, location int32, v0 int32, v1 int32) {
  C.glowProgramUniform2iEXT(pProgramUniform2iEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLint)(v0), (C.GLint)(v1))
}
// Specify the value of a uniform variable for a specified program object
func ProgramUniform2iv(program uint32, location int32, count int32, value *int32) {
  C.glowProgramUniform2iv(pProgramUniform2iv, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLint)(unsafe.Pointer(value)))
}
func ProgramUniform2ivEXT(program uint32, location int32, count int32, value *int32) {
  C.glowProgramUniform2ivEXT(pProgramUniform2ivEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLint)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for a specified program object
func ProgramUniform2ui(program uint32, location int32, v0 uint32, v1 uint32) {
  C.glowProgramUniform2ui(pProgramUniform2ui, (C.GLuint)(program), (C.GLint)(location), (C.GLuint)(v0), (C.GLuint)(v1))
}
func ProgramUniform2ui64NV(program uint32, location int32, x uint64, y uint64) {
  C.glowProgramUniform2ui64NV(pProgramUniform2ui64NV, (C.GLuint)(program), (C.GLint)(location), (C.GLuint64EXT)(x), (C.GLuint64EXT)(y))
}
func ProgramUniform2ui64vNV(program uint32, location int32, count int32, value *uint64) {
  C.glowProgramUniform2ui64vNV(pProgramUniform2ui64vNV, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLuint64EXT)(unsafe.Pointer(value)))
}
func ProgramUniform2uiEXT(program uint32, location int32, v0 uint32, v1 uint32) {
  C.glowProgramUniform2uiEXT(pProgramUniform2uiEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLuint)(v0), (C.GLuint)(v1))
}
// Specify the value of a uniform variable for a specified program object
func ProgramUniform2uiv(program uint32, location int32, count int32, value *uint32) {
  C.glowProgramUniform2uiv(pProgramUniform2uiv, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLuint)(unsafe.Pointer(value)))
}
func ProgramUniform2uivEXT(program uint32, location int32, count int32, value *uint32) {
  C.glowProgramUniform2uivEXT(pProgramUniform2uivEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLuint)(unsafe.Pointer(value)))
}
func ProgramUniform3d(program uint32, location int32, v0 float64, v1 float64, v2 float64) {
  C.glowProgramUniform3d(pProgramUniform3d, (C.GLuint)(program), (C.GLint)(location), (C.GLdouble)(v0), (C.GLdouble)(v1), (C.GLdouble)(v2))
}
func ProgramUniform3dEXT(program uint32, location int32, x float64, y float64, z float64) {
  C.glowProgramUniform3dEXT(pProgramUniform3dEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLdouble)(x), (C.GLdouble)(y), (C.GLdouble)(z))
}
func ProgramUniform3dv(program uint32, location int32, count int32, value *float64) {
  C.glowProgramUniform3dv(pProgramUniform3dv, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLdouble)(unsafe.Pointer(value)))
}
func ProgramUniform3dvEXT(program uint32, location int32, count int32, value *float64) {
  C.glowProgramUniform3dvEXT(pProgramUniform3dvEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLdouble)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for a specified program object
func ProgramUniform3f(program uint32, location int32, v0 float32, v1 float32, v2 float32) {
  C.glowProgramUniform3f(pProgramUniform3f, (C.GLuint)(program), (C.GLint)(location), (C.GLfloat)(v0), (C.GLfloat)(v1), (C.GLfloat)(v2))
}
func ProgramUniform3fEXT(program uint32, location int32, v0 float32, v1 float32, v2 float32) {
  C.glowProgramUniform3fEXT(pProgramUniform3fEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLfloat)(v0), (C.GLfloat)(v1), (C.GLfloat)(v2))
}
// Specify the value of a uniform variable for a specified program object
func ProgramUniform3fv(program uint32, location int32, count int32, value *float32) {
  C.glowProgramUniform3fv(pProgramUniform3fv, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLfloat)(unsafe.Pointer(value)))
}
func ProgramUniform3fvEXT(program uint32, location int32, count int32, value *float32) {
  C.glowProgramUniform3fvEXT(pProgramUniform3fvEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLfloat)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for a specified program object
func ProgramUniform3i(program uint32, location int32, v0 int32, v1 int32, v2 int32) {
  C.glowProgramUniform3i(pProgramUniform3i, (C.GLuint)(program), (C.GLint)(location), (C.GLint)(v0), (C.GLint)(v1), (C.GLint)(v2))
}
func ProgramUniform3i64NV(program uint32, location int32, x int64, y int64, z int64) {
  C.glowProgramUniform3i64NV(pProgramUniform3i64NV, (C.GLuint)(program), (C.GLint)(location), (C.GLint64EXT)(x), (C.GLint64EXT)(y), (C.GLint64EXT)(z))
}
func ProgramUniform3i64vNV(program uint32, location int32, count int32, value *int64) {
  C.glowProgramUniform3i64vNV(pProgramUniform3i64vNV, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLint64EXT)(unsafe.Pointer(value)))
}
func ProgramUniform3iEXT(program uint32, location int32, v0 int32, v1 int32, v2 int32) {
  C.glowProgramUniform3iEXT(pProgramUniform3iEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLint)(v0), (C.GLint)(v1), (C.GLint)(v2))
}
// Specify the value of a uniform variable for a specified program object
func ProgramUniform3iv(program uint32, location int32, count int32, value *int32) {
  C.glowProgramUniform3iv(pProgramUniform3iv, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLint)(unsafe.Pointer(value)))
}
func ProgramUniform3ivEXT(program uint32, location int32, count int32, value *int32) {
  C.glowProgramUniform3ivEXT(pProgramUniform3ivEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLint)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for a specified program object
func ProgramUniform3ui(program uint32, location int32, v0 uint32, v1 uint32, v2 uint32) {
  C.glowProgramUniform3ui(pProgramUniform3ui, (C.GLuint)(program), (C.GLint)(location), (C.GLuint)(v0), (C.GLuint)(v1), (C.GLuint)(v2))
}
func ProgramUniform3ui64NV(program uint32, location int32, x uint64, y uint64, z uint64) {
  C.glowProgramUniform3ui64NV(pProgramUniform3ui64NV, (C.GLuint)(program), (C.GLint)(location), (C.GLuint64EXT)(x), (C.GLuint64EXT)(y), (C.GLuint64EXT)(z))
}
func ProgramUniform3ui64vNV(program uint32, location int32, count int32, value *uint64) {
  C.glowProgramUniform3ui64vNV(pProgramUniform3ui64vNV, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLuint64EXT)(unsafe.Pointer(value)))
}
func ProgramUniform3uiEXT(program uint32, location int32, v0 uint32, v1 uint32, v2 uint32) {
  C.glowProgramUniform3uiEXT(pProgramUniform3uiEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLuint)(v0), (C.GLuint)(v1), (C.GLuint)(v2))
}
// Specify the value of a uniform variable for a specified program object
func ProgramUniform3uiv(program uint32, location int32, count int32, value *uint32) {
  C.glowProgramUniform3uiv(pProgramUniform3uiv, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLuint)(unsafe.Pointer(value)))
}
func ProgramUniform3uivEXT(program uint32, location int32, count int32, value *uint32) {
  C.glowProgramUniform3uivEXT(pProgramUniform3uivEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLuint)(unsafe.Pointer(value)))
}
func ProgramUniform4d(program uint32, location int32, v0 float64, v1 float64, v2 float64, v3 float64) {
  C.glowProgramUniform4d(pProgramUniform4d, (C.GLuint)(program), (C.GLint)(location), (C.GLdouble)(v0), (C.GLdouble)(v1), (C.GLdouble)(v2), (C.GLdouble)(v3))
}
func ProgramUniform4dEXT(program uint32, location int32, x float64, y float64, z float64, w float64) {
  C.glowProgramUniform4dEXT(pProgramUniform4dEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLdouble)(x), (C.GLdouble)(y), (C.GLdouble)(z), (C.GLdouble)(w))
}
func ProgramUniform4dv(program uint32, location int32, count int32, value *float64) {
  C.glowProgramUniform4dv(pProgramUniform4dv, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLdouble)(unsafe.Pointer(value)))
}
func ProgramUniform4dvEXT(program uint32, location int32, count int32, value *float64) {
  C.glowProgramUniform4dvEXT(pProgramUniform4dvEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLdouble)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for a specified program object
func ProgramUniform4f(program uint32, location int32, v0 float32, v1 float32, v2 float32, v3 float32) {
  C.glowProgramUniform4f(pProgramUniform4f, (C.GLuint)(program), (C.GLint)(location), (C.GLfloat)(v0), (C.GLfloat)(v1), (C.GLfloat)(v2), (C.GLfloat)(v3))
}
func ProgramUniform4fEXT(program uint32, location int32, v0 float32, v1 float32, v2 float32, v3 float32) {
  C.glowProgramUniform4fEXT(pProgramUniform4fEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLfloat)(v0), (C.GLfloat)(v1), (C.GLfloat)(v2), (C.GLfloat)(v3))
}
// Specify the value of a uniform variable for a specified program object
func ProgramUniform4fv(program uint32, location int32, count int32, value *float32) {
  C.glowProgramUniform4fv(pProgramUniform4fv, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLfloat)(unsafe.Pointer(value)))
}
func ProgramUniform4fvEXT(program uint32, location int32, count int32, value *float32) {
  C.glowProgramUniform4fvEXT(pProgramUniform4fvEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLfloat)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for a specified program object
func ProgramUniform4i(program uint32, location int32, v0 int32, v1 int32, v2 int32, v3 int32) {
  C.glowProgramUniform4i(pProgramUniform4i, (C.GLuint)(program), (C.GLint)(location), (C.GLint)(v0), (C.GLint)(v1), (C.GLint)(v2), (C.GLint)(v3))
}
func ProgramUniform4i64NV(program uint32, location int32, x int64, y int64, z int64, w int64) {
  C.glowProgramUniform4i64NV(pProgramUniform4i64NV, (C.GLuint)(program), (C.GLint)(location), (C.GLint64EXT)(x), (C.GLint64EXT)(y), (C.GLint64EXT)(z), (C.GLint64EXT)(w))
}
func ProgramUniform4i64vNV(program uint32, location int32, count int32, value *int64) {
  C.glowProgramUniform4i64vNV(pProgramUniform4i64vNV, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLint64EXT)(unsafe.Pointer(value)))
}
func ProgramUniform4iEXT(program uint32, location int32, v0 int32, v1 int32, v2 int32, v3 int32) {
  C.glowProgramUniform4iEXT(pProgramUniform4iEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLint)(v0), (C.GLint)(v1), (C.GLint)(v2), (C.GLint)(v3))
}
// Specify the value of a uniform variable for a specified program object
func ProgramUniform4iv(program uint32, location int32, count int32, value *int32) {
  C.glowProgramUniform4iv(pProgramUniform4iv, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLint)(unsafe.Pointer(value)))
}
func ProgramUniform4ivEXT(program uint32, location int32, count int32, value *int32) {
  C.glowProgramUniform4ivEXT(pProgramUniform4ivEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLint)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for a specified program object
func ProgramUniform4ui(program uint32, location int32, v0 uint32, v1 uint32, v2 uint32, v3 uint32) {
  C.glowProgramUniform4ui(pProgramUniform4ui, (C.GLuint)(program), (C.GLint)(location), (C.GLuint)(v0), (C.GLuint)(v1), (C.GLuint)(v2), (C.GLuint)(v3))
}
func ProgramUniform4ui64NV(program uint32, location int32, x uint64, y uint64, z uint64, w uint64) {
  C.glowProgramUniform4ui64NV(pProgramUniform4ui64NV, (C.GLuint)(program), (C.GLint)(location), (C.GLuint64EXT)(x), (C.GLuint64EXT)(y), (C.GLuint64EXT)(z), (C.GLuint64EXT)(w))
}
func ProgramUniform4ui64vNV(program uint32, location int32, count int32, value *uint64) {
  C.glowProgramUniform4ui64vNV(pProgramUniform4ui64vNV, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLuint64EXT)(unsafe.Pointer(value)))
}
func ProgramUniform4uiEXT(program uint32, location int32, v0 uint32, v1 uint32, v2 uint32, v3 uint32) {
  C.glowProgramUniform4uiEXT(pProgramUniform4uiEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLuint)(v0), (C.GLuint)(v1), (C.GLuint)(v2), (C.GLuint)(v3))
}
// Specify the value of a uniform variable for a specified program object
func ProgramUniform4uiv(program uint32, location int32, count int32, value *uint32) {
  C.glowProgramUniform4uiv(pProgramUniform4uiv, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLuint)(unsafe.Pointer(value)))
}
func ProgramUniform4uivEXT(program uint32, location int32, count int32, value *uint32) {
  C.glowProgramUniform4uivEXT(pProgramUniform4uivEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLuint)(unsafe.Pointer(value)))
}
func ProgramUniformHandleui64ARB(program uint32, location int32, value uint64) {
  C.glowProgramUniformHandleui64ARB(pProgramUniformHandleui64ARB, (C.GLuint)(program), (C.GLint)(location), (C.GLuint64)(value))
}
func ProgramUniformHandleui64NV(program uint32, location int32, value uint64) {
  C.glowProgramUniformHandleui64NV(pProgramUniformHandleui64NV, (C.GLuint)(program), (C.GLint)(location), (C.GLuint64)(value))
}
func ProgramUniformHandleui64vARB(program uint32, location int32, count int32, values *uint64) {
  C.glowProgramUniformHandleui64vARB(pProgramUniformHandleui64vARB, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLuint64)(unsafe.Pointer(values)))
}
func ProgramUniformHandleui64vNV(program uint32, location int32, count int32, values *uint64) {
  C.glowProgramUniformHandleui64vNV(pProgramUniformHandleui64vNV, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLuint64)(unsafe.Pointer(values)))
}
func ProgramUniformMatrix2dv(program uint32, location int32, count int32, transpose bool, value *float64) {
  C.glowProgramUniformMatrix2dv(pProgramUniformMatrix2dv, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLdouble)(unsafe.Pointer(value)))
}
func ProgramUniformMatrix2dvEXT(program uint32, location int32, count int32, transpose bool, value *float64) {
  C.glowProgramUniformMatrix2dvEXT(pProgramUniformMatrix2dvEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLdouble)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for a specified program object
func ProgramUniformMatrix2fv(program uint32, location int32, count int32, transpose bool, value *float32) {
  C.glowProgramUniformMatrix2fv(pProgramUniformMatrix2fv, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLfloat)(unsafe.Pointer(value)))
}
func ProgramUniformMatrix2fvEXT(program uint32, location int32, count int32, transpose bool, value *float32) {
  C.glowProgramUniformMatrix2fvEXT(pProgramUniformMatrix2fvEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLfloat)(unsafe.Pointer(value)))
}
func ProgramUniformMatrix2x3dv(program uint32, location int32, count int32, transpose bool, value *float64) {
  C.glowProgramUniformMatrix2x3dv(pProgramUniformMatrix2x3dv, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLdouble)(unsafe.Pointer(value)))
}
func ProgramUniformMatrix2x3dvEXT(program uint32, location int32, count int32, transpose bool, value *float64) {
  C.glowProgramUniformMatrix2x3dvEXT(pProgramUniformMatrix2x3dvEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLdouble)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for a specified program object
func ProgramUniformMatrix2x3fv(program uint32, location int32, count int32, transpose bool, value *float32) {
  C.glowProgramUniformMatrix2x3fv(pProgramUniformMatrix2x3fv, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLfloat)(unsafe.Pointer(value)))
}
func ProgramUniformMatrix2x3fvEXT(program uint32, location int32, count int32, transpose bool, value *float32) {
  C.glowProgramUniformMatrix2x3fvEXT(pProgramUniformMatrix2x3fvEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLfloat)(unsafe.Pointer(value)))
}
func ProgramUniformMatrix2x4dv(program uint32, location int32, count int32, transpose bool, value *float64) {
  C.glowProgramUniformMatrix2x4dv(pProgramUniformMatrix2x4dv, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLdouble)(unsafe.Pointer(value)))
}
func ProgramUniformMatrix2x4dvEXT(program uint32, location int32, count int32, transpose bool, value *float64) {
  C.glowProgramUniformMatrix2x4dvEXT(pProgramUniformMatrix2x4dvEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLdouble)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for a specified program object
func ProgramUniformMatrix2x4fv(program uint32, location int32, count int32, transpose bool, value *float32) {
  C.glowProgramUniformMatrix2x4fv(pProgramUniformMatrix2x4fv, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLfloat)(unsafe.Pointer(value)))
}
func ProgramUniformMatrix2x4fvEXT(program uint32, location int32, count int32, transpose bool, value *float32) {
  C.glowProgramUniformMatrix2x4fvEXT(pProgramUniformMatrix2x4fvEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLfloat)(unsafe.Pointer(value)))
}
func ProgramUniformMatrix3dv(program uint32, location int32, count int32, transpose bool, value *float64) {
  C.glowProgramUniformMatrix3dv(pProgramUniformMatrix3dv, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLdouble)(unsafe.Pointer(value)))
}
func ProgramUniformMatrix3dvEXT(program uint32, location int32, count int32, transpose bool, value *float64) {
  C.glowProgramUniformMatrix3dvEXT(pProgramUniformMatrix3dvEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLdouble)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for a specified program object
func ProgramUniformMatrix3fv(program uint32, location int32, count int32, transpose bool, value *float32) {
  C.glowProgramUniformMatrix3fv(pProgramUniformMatrix3fv, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLfloat)(unsafe.Pointer(value)))
}
func ProgramUniformMatrix3fvEXT(program uint32, location int32, count int32, transpose bool, value *float32) {
  C.glowProgramUniformMatrix3fvEXT(pProgramUniformMatrix3fvEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLfloat)(unsafe.Pointer(value)))
}
func ProgramUniformMatrix3x2dv(program uint32, location int32, count int32, transpose bool, value *float64) {
  C.glowProgramUniformMatrix3x2dv(pProgramUniformMatrix3x2dv, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLdouble)(unsafe.Pointer(value)))
}
func ProgramUniformMatrix3x2dvEXT(program uint32, location int32, count int32, transpose bool, value *float64) {
  C.glowProgramUniformMatrix3x2dvEXT(pProgramUniformMatrix3x2dvEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLdouble)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for a specified program object
func ProgramUniformMatrix3x2fv(program uint32, location int32, count int32, transpose bool, value *float32) {
  C.glowProgramUniformMatrix3x2fv(pProgramUniformMatrix3x2fv, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLfloat)(unsafe.Pointer(value)))
}
func ProgramUniformMatrix3x2fvEXT(program uint32, location int32, count int32, transpose bool, value *float32) {
  C.glowProgramUniformMatrix3x2fvEXT(pProgramUniformMatrix3x2fvEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLfloat)(unsafe.Pointer(value)))
}
func ProgramUniformMatrix3x4dv(program uint32, location int32, count int32, transpose bool, value *float64) {
  C.glowProgramUniformMatrix3x4dv(pProgramUniformMatrix3x4dv, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLdouble)(unsafe.Pointer(value)))
}
func ProgramUniformMatrix3x4dvEXT(program uint32, location int32, count int32, transpose bool, value *float64) {
  C.glowProgramUniformMatrix3x4dvEXT(pProgramUniformMatrix3x4dvEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLdouble)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for a specified program object
func ProgramUniformMatrix3x4fv(program uint32, location int32, count int32, transpose bool, value *float32) {
  C.glowProgramUniformMatrix3x4fv(pProgramUniformMatrix3x4fv, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLfloat)(unsafe.Pointer(value)))
}
func ProgramUniformMatrix3x4fvEXT(program uint32, location int32, count int32, transpose bool, value *float32) {
  C.glowProgramUniformMatrix3x4fvEXT(pProgramUniformMatrix3x4fvEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLfloat)(unsafe.Pointer(value)))
}
func ProgramUniformMatrix4dv(program uint32, location int32, count int32, transpose bool, value *float64) {
  C.glowProgramUniformMatrix4dv(pProgramUniformMatrix4dv, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLdouble)(unsafe.Pointer(value)))
}
func ProgramUniformMatrix4dvEXT(program uint32, location int32, count int32, transpose bool, value *float64) {
  C.glowProgramUniformMatrix4dvEXT(pProgramUniformMatrix4dvEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLdouble)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for a specified program object
func ProgramUniformMatrix4fv(program uint32, location int32, count int32, transpose bool, value *float32) {
  C.glowProgramUniformMatrix4fv(pProgramUniformMatrix4fv, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLfloat)(unsafe.Pointer(value)))
}
func ProgramUniformMatrix4fvEXT(program uint32, location int32, count int32, transpose bool, value *float32) {
  C.glowProgramUniformMatrix4fvEXT(pProgramUniformMatrix4fvEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLfloat)(unsafe.Pointer(value)))
}
func ProgramUniformMatrix4x2dv(program uint32, location int32, count int32, transpose bool, value *float64) {
  C.glowProgramUniformMatrix4x2dv(pProgramUniformMatrix4x2dv, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLdouble)(unsafe.Pointer(value)))
}
func ProgramUniformMatrix4x2dvEXT(program uint32, location int32, count int32, transpose bool, value *float64) {
  C.glowProgramUniformMatrix4x2dvEXT(pProgramUniformMatrix4x2dvEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLdouble)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for a specified program object
func ProgramUniformMatrix4x2fv(program uint32, location int32, count int32, transpose bool, value *float32) {
  C.glowProgramUniformMatrix4x2fv(pProgramUniformMatrix4x2fv, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLfloat)(unsafe.Pointer(value)))
}
func ProgramUniformMatrix4x2fvEXT(program uint32, location int32, count int32, transpose bool, value *float32) {
  C.glowProgramUniformMatrix4x2fvEXT(pProgramUniformMatrix4x2fvEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLfloat)(unsafe.Pointer(value)))
}
func ProgramUniformMatrix4x3dv(program uint32, location int32, count int32, transpose bool, value *float64) {
  C.glowProgramUniformMatrix4x3dv(pProgramUniformMatrix4x3dv, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLdouble)(unsafe.Pointer(value)))
}
func ProgramUniformMatrix4x3dvEXT(program uint32, location int32, count int32, transpose bool, value *float64) {
  C.glowProgramUniformMatrix4x3dvEXT(pProgramUniformMatrix4x3dvEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLdouble)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for a specified program object
func ProgramUniformMatrix4x3fv(program uint32, location int32, count int32, transpose bool, value *float32) {
  C.glowProgramUniformMatrix4x3fv(pProgramUniformMatrix4x3fv, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLfloat)(unsafe.Pointer(value)))
}
func ProgramUniformMatrix4x3fvEXT(program uint32, location int32, count int32, transpose bool, value *float32) {
  C.glowProgramUniformMatrix4x3fvEXT(pProgramUniformMatrix4x3fvEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLfloat)(unsafe.Pointer(value)))
}
func ProgramUniformui64NV(program uint32, location int32, value uint64) {
  C.glowProgramUniformui64NV(pProgramUniformui64NV, (C.GLuint)(program), (C.GLint)(location), (C.GLuint64EXT)(value))
}
func ProgramUniformui64vNV(program uint32, location int32, count int32, value *uint64) {
  C.glowProgramUniformui64vNV(pProgramUniformui64vNV, (C.GLuint)(program), (C.GLint)(location), (C.GLsizei)(count), (*C.GLuint64EXT)(unsafe.Pointer(value)))
}
func ProgramVertexLimitNV(target uint32, limit int32) {
  C.glowProgramVertexLimitNV(pProgramVertexLimitNV, (C.GLenum)(target), (C.GLint)(limit))
}
// specifiy the vertex to be used as the source of data for flat shaded varyings
func ProvokingVertex(mode uint32) {
  C.glowProvokingVertex(pProvokingVertex, (C.GLenum)(mode))
}
func ProvokingVertexEXT(mode uint32) {
  C.glowProvokingVertexEXT(pProvokingVertexEXT, (C.GLenum)(mode))
}
func PushClientAttribDefaultEXT(mask uint32) {
  C.glowPushClientAttribDefaultEXT(pPushClientAttribDefaultEXT, (C.GLbitfield)(mask))
}
// push a named debug group into the command stream
func PushDebugGroup(source uint32, id uint32, length int32, message *int8) {
  C.glowPushDebugGroup(pPushDebugGroup, (C.GLenum)(source), (C.GLuint)(id), (C.GLsizei)(length), (*C.GLchar)(unsafe.Pointer(message)))
}
func PushDebugGroupKHR(source uint32, id uint32, length int32, message *int8) {
  C.glowPushDebugGroupKHR(pPushDebugGroupKHR, (C.GLenum)(source), (C.GLuint)(id), (C.GLsizei)(length), (*C.GLchar)(unsafe.Pointer(message)))
}
func PushGroupMarkerEXT(length int32, marker *int8) {
  C.glowPushGroupMarkerEXT(pPushGroupMarkerEXT, (C.GLsizei)(length), (*C.GLchar)(unsafe.Pointer(marker)))
}
// record the GL time into a query object after all previous commands have reached the GL server but have not yet necessarily executed.
func QueryCounter(id uint32, target uint32) {
  C.glowQueryCounter(pQueryCounter, (C.GLuint)(id), (C.GLenum)(target))
}
func QueryMatrixxOES(mantissa *int32, exponent *int32) uint32 {
  ret := C.glowQueryMatrixxOES(pQueryMatrixxOES, (*C.GLfixed)(unsafe.Pointer(mantissa)), (*C.GLint)(unsafe.Pointer(exponent)))
  return (uint32)(ret)
}
func QueryObjectParameteruiAMD(target uint32, id uint32, pname uint32, param uint32) {
  C.glowQueryObjectParameteruiAMD(pQueryObjectParameteruiAMD, (C.GLenum)(target), (C.GLuint)(id), (C.GLenum)(pname), (C.GLuint)(param))
}
func RasterPos2xOES(x int32, y int32) {
  C.glowRasterPos2xOES(pRasterPos2xOES, (C.GLfixed)(x), (C.GLfixed)(y))
}
func RasterPos2xvOES(coords *int32) {
  C.glowRasterPos2xvOES(pRasterPos2xvOES, (*C.GLfixed)(unsafe.Pointer(coords)))
}
func RasterPos3xOES(x int32, y int32, z int32) {
  C.glowRasterPos3xOES(pRasterPos3xOES, (C.GLfixed)(x), (C.GLfixed)(y), (C.GLfixed)(z))
}
func RasterPos3xvOES(coords *int32) {
  C.glowRasterPos3xvOES(pRasterPos3xvOES, (*C.GLfixed)(unsafe.Pointer(coords)))
}
func RasterPos4xOES(x int32, y int32, z int32, w int32) {
  C.glowRasterPos4xOES(pRasterPos4xOES, (C.GLfixed)(x), (C.GLfixed)(y), (C.GLfixed)(z), (C.GLfixed)(w))
}
func RasterPos4xvOES(coords *int32) {
  C.glowRasterPos4xvOES(pRasterPos4xvOES, (*C.GLfixed)(unsafe.Pointer(coords)))
}
// select a color buffer source for pixels
func ReadBuffer(mode uint32) {
  C.glowReadBuffer(pReadBuffer, (C.GLenum)(mode))
}
func ReadInstrumentsSGIX(marker int32) {
  C.glowReadInstrumentsSGIX(pReadInstrumentsSGIX, (C.GLint)(marker))
}
// read a block of pixels from the frame buffer
func ReadPixels(x int32, y int32, width int32, height int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
  C.glowReadPixels(pReadPixels, (C.GLint)(x), (C.GLint)(y), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLenum)(format), (C.GLenum)(xtype), pixels)
}
func ReadnPixelsARB(x int32, y int32, width int32, height int32, format uint32, xtype uint32, bufSize int32, data unsafe.Pointer) {
  C.glowReadnPixelsARB(pReadnPixelsARB, (C.GLint)(x), (C.GLint)(y), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLenum)(format), (C.GLenum)(xtype), (C.GLsizei)(bufSize), data)
}
func RectxOES(x1 int32, y1 int32, x2 int32, y2 int32) {
  C.glowRectxOES(pRectxOES, (C.GLfixed)(x1), (C.GLfixed)(y1), (C.GLfixed)(x2), (C.GLfixed)(y2))
}
func RectxvOES(v1 *int32, v2 *int32) {
  C.glowRectxvOES(pRectxvOES, (*C.GLfixed)(unsafe.Pointer(v1)), (*C.GLfixed)(unsafe.Pointer(v2)))
}
func ReferencePlaneSGIX(equation *float64) {
  C.glowReferencePlaneSGIX(pReferencePlaneSGIX, (*C.GLdouble)(unsafe.Pointer(equation)))
}
// release resources consumed by the implementation's shader compiler
func ReleaseShaderCompiler() {
  C.glowReleaseShaderCompiler(pReleaseShaderCompiler)
}
// establish data storage, format and dimensions of a renderbuffer object's image
func RenderbufferStorage(target uint32, internalformat uint32, width int32, height int32) {
  C.glowRenderbufferStorage(pRenderbufferStorage, (C.GLenum)(target), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height))
}
func RenderbufferStorageEXT(target uint32, internalformat uint32, width int32, height int32) {
  C.glowRenderbufferStorageEXT(pRenderbufferStorageEXT, (C.GLenum)(target), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height))
}
// establish data storage, format, dimensions and sample count of a renderbuffer object's image
func RenderbufferStorageMultisample(target uint32, samples int32, internalformat uint32, width int32, height int32) {
  C.glowRenderbufferStorageMultisample(pRenderbufferStorageMultisample, (C.GLenum)(target), (C.GLsizei)(samples), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height))
}
func RenderbufferStorageMultisampleCoverageNV(target uint32, coverageSamples int32, colorSamples int32, internalformat uint32, width int32, height int32) {
  C.glowRenderbufferStorageMultisampleCoverageNV(pRenderbufferStorageMultisampleCoverageNV, (C.GLenum)(target), (C.GLsizei)(coverageSamples), (C.GLsizei)(colorSamples), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height))
}
func RenderbufferStorageMultisampleEXT(target uint32, samples int32, internalformat uint32, width int32, height int32) {
  C.glowRenderbufferStorageMultisampleEXT(pRenderbufferStorageMultisampleEXT, (C.GLenum)(target), (C.GLsizei)(samples), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height))
}
func ReplacementCodePointerSUN(xtype uint32, stride int32, pointer *unsafe.Pointer) {
  C.glowReplacementCodePointerSUN(pReplacementCodePointerSUN, (C.GLenum)(xtype), (C.GLsizei)(stride), pointer)
}
func ReplacementCodeubSUN(code uint8) {
  C.glowReplacementCodeubSUN(pReplacementCodeubSUN, (C.GLubyte)(code))
}
func ReplacementCodeubvSUN(code *uint8) {
  C.glowReplacementCodeubvSUN(pReplacementCodeubvSUN, (*C.GLubyte)(unsafe.Pointer(code)))
}
func ReplacementCodeuiColor3fVertex3fSUN(rc uint32, r float32, g float32, b float32, x float32, y float32, z float32) {
  C.glowReplacementCodeuiColor3fVertex3fSUN(pReplacementCodeuiColor3fVertex3fSUN, (C.GLuint)(rc), (C.GLfloat)(r), (C.GLfloat)(g), (C.GLfloat)(b), (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z))
}
func ReplacementCodeuiColor3fVertex3fvSUN(rc *uint32, c *float32, v *float32) {
  C.glowReplacementCodeuiColor3fVertex3fvSUN(pReplacementCodeuiColor3fVertex3fvSUN, (*C.GLuint)(unsafe.Pointer(rc)), (*C.GLfloat)(unsafe.Pointer(c)), (*C.GLfloat)(unsafe.Pointer(v)))
}
func ReplacementCodeuiColor4fNormal3fVertex3fSUN(rc uint32, r float32, g float32, b float32, a float32, nx float32, ny float32, nz float32, x float32, y float32, z float32) {
  C.glowReplacementCodeuiColor4fNormal3fVertex3fSUN(pReplacementCodeuiColor4fNormal3fVertex3fSUN, (C.GLuint)(rc), (C.GLfloat)(r), (C.GLfloat)(g), (C.GLfloat)(b), (C.GLfloat)(a), (C.GLfloat)(nx), (C.GLfloat)(ny), (C.GLfloat)(nz), (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z))
}
func ReplacementCodeuiColor4fNormal3fVertex3fvSUN(rc *uint32, c *float32, n *float32, v *float32) {
  C.glowReplacementCodeuiColor4fNormal3fVertex3fvSUN(pReplacementCodeuiColor4fNormal3fVertex3fvSUN, (*C.GLuint)(unsafe.Pointer(rc)), (*C.GLfloat)(unsafe.Pointer(c)), (*C.GLfloat)(unsafe.Pointer(n)), (*C.GLfloat)(unsafe.Pointer(v)))
}
func ReplacementCodeuiColor4ubVertex3fSUN(rc uint32, r uint8, g uint8, b uint8, a uint8, x float32, y float32, z float32) {
  C.glowReplacementCodeuiColor4ubVertex3fSUN(pReplacementCodeuiColor4ubVertex3fSUN, (C.GLuint)(rc), (C.GLubyte)(r), (C.GLubyte)(g), (C.GLubyte)(b), (C.GLubyte)(a), (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z))
}
func ReplacementCodeuiColor4ubVertex3fvSUN(rc *uint32, c *uint8, v *float32) {
  C.glowReplacementCodeuiColor4ubVertex3fvSUN(pReplacementCodeuiColor4ubVertex3fvSUN, (*C.GLuint)(unsafe.Pointer(rc)), (*C.GLubyte)(unsafe.Pointer(c)), (*C.GLfloat)(unsafe.Pointer(v)))
}
func ReplacementCodeuiNormal3fVertex3fSUN(rc uint32, nx float32, ny float32, nz float32, x float32, y float32, z float32) {
  C.glowReplacementCodeuiNormal3fVertex3fSUN(pReplacementCodeuiNormal3fVertex3fSUN, (C.GLuint)(rc), (C.GLfloat)(nx), (C.GLfloat)(ny), (C.GLfloat)(nz), (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z))
}
func ReplacementCodeuiNormal3fVertex3fvSUN(rc *uint32, n *float32, v *float32) {
  C.glowReplacementCodeuiNormal3fVertex3fvSUN(pReplacementCodeuiNormal3fVertex3fvSUN, (*C.GLuint)(unsafe.Pointer(rc)), (*C.GLfloat)(unsafe.Pointer(n)), (*C.GLfloat)(unsafe.Pointer(v)))
}
func ReplacementCodeuiSUN(code uint32) {
  C.glowReplacementCodeuiSUN(pReplacementCodeuiSUN, (C.GLuint)(code))
}
func ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(rc uint32, s float32, t float32, r float32, g float32, b float32, a float32, nx float32, ny float32, nz float32, x float32, y float32, z float32) {
  C.glowReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(pReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN, (C.GLuint)(rc), (C.GLfloat)(s), (C.GLfloat)(t), (C.GLfloat)(r), (C.GLfloat)(g), (C.GLfloat)(b), (C.GLfloat)(a), (C.GLfloat)(nx), (C.GLfloat)(ny), (C.GLfloat)(nz), (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z))
}
func ReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(rc *uint32, tc *float32, c *float32, n *float32, v *float32) {
  C.glowReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(pReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN, (*C.GLuint)(unsafe.Pointer(rc)), (*C.GLfloat)(unsafe.Pointer(tc)), (*C.GLfloat)(unsafe.Pointer(c)), (*C.GLfloat)(unsafe.Pointer(n)), (*C.GLfloat)(unsafe.Pointer(v)))
}
func ReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(rc uint32, s float32, t float32, nx float32, ny float32, nz float32, x float32, y float32, z float32) {
  C.glowReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(pReplacementCodeuiTexCoord2fNormal3fVertex3fSUN, (C.GLuint)(rc), (C.GLfloat)(s), (C.GLfloat)(t), (C.GLfloat)(nx), (C.GLfloat)(ny), (C.GLfloat)(nz), (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z))
}
func ReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(rc *uint32, tc *float32, n *float32, v *float32) {
  C.glowReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(pReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN, (*C.GLuint)(unsafe.Pointer(rc)), (*C.GLfloat)(unsafe.Pointer(tc)), (*C.GLfloat)(unsafe.Pointer(n)), (*C.GLfloat)(unsafe.Pointer(v)))
}
func ReplacementCodeuiTexCoord2fVertex3fSUN(rc uint32, s float32, t float32, x float32, y float32, z float32) {
  C.glowReplacementCodeuiTexCoord2fVertex3fSUN(pReplacementCodeuiTexCoord2fVertex3fSUN, (C.GLuint)(rc), (C.GLfloat)(s), (C.GLfloat)(t), (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z))
}
func ReplacementCodeuiTexCoord2fVertex3fvSUN(rc *uint32, tc *float32, v *float32) {
  C.glowReplacementCodeuiTexCoord2fVertex3fvSUN(pReplacementCodeuiTexCoord2fVertex3fvSUN, (*C.GLuint)(unsafe.Pointer(rc)), (*C.GLfloat)(unsafe.Pointer(tc)), (*C.GLfloat)(unsafe.Pointer(v)))
}
func ReplacementCodeuiVertex3fSUN(rc uint32, x float32, y float32, z float32) {
  C.glowReplacementCodeuiVertex3fSUN(pReplacementCodeuiVertex3fSUN, (C.GLuint)(rc), (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z))
}
func ReplacementCodeuiVertex3fvSUN(rc *uint32, v *float32) {
  C.glowReplacementCodeuiVertex3fvSUN(pReplacementCodeuiVertex3fvSUN, (*C.GLuint)(unsafe.Pointer(rc)), (*C.GLfloat)(unsafe.Pointer(v)))
}
func ReplacementCodeuivSUN(code *uint32) {
  C.glowReplacementCodeuivSUN(pReplacementCodeuivSUN, (*C.GLuint)(unsafe.Pointer(code)))
}
func ReplacementCodeusSUN(code uint16) {
  C.glowReplacementCodeusSUN(pReplacementCodeusSUN, (C.GLushort)(code))
}
func ReplacementCodeusvSUN(code *uint16) {
  C.glowReplacementCodeusvSUN(pReplacementCodeusvSUN, (*C.GLushort)(unsafe.Pointer(code)))
}
func RequestResidentProgramsNV(n int32, programs *uint32) {
  C.glowRequestResidentProgramsNV(pRequestResidentProgramsNV, (C.GLsizei)(n), (*C.GLuint)(unsafe.Pointer(programs)))
}
func ResetHistogramEXT(target uint32) {
  C.glowResetHistogramEXT(pResetHistogramEXT, (C.GLenum)(target))
}
func ResetMinmaxEXT(target uint32) {
  C.glowResetMinmaxEXT(pResetMinmaxEXT, (C.GLenum)(target))
}
func ResizeBuffersMESA() {
  C.glowResizeBuffersMESA(pResizeBuffersMESA)
}
// resume transform feedback operations
func ResumeTransformFeedback() {
  C.glowResumeTransformFeedback(pResumeTransformFeedback)
}
func ResumeTransformFeedbackNV() {
  C.glowResumeTransformFeedbackNV(pResumeTransformFeedbackNV)
}
func RotatexOES(angle int32, x int32, y int32, z int32) {
  C.glowRotatexOES(pRotatexOES, (C.GLfixed)(angle), (C.GLfixed)(x), (C.GLfixed)(y), (C.GLfixed)(z))
}
// specify multisample coverage parameters
func SampleCoverage(value float32, invert bool) {
  C.glowSampleCoverage(pSampleCoverage, (C.GLfloat)(value), (C.GLboolean)(boolToInt(invert)))
}
func SampleCoverageARB(value float32, invert bool) {
  C.glowSampleCoverageARB(pSampleCoverageARB, (C.GLfloat)(value), (C.GLboolean)(boolToInt(invert)))
}
func SampleCoverageOES(value int32, invert bool) {
  C.glowSampleCoverageOES(pSampleCoverageOES, (C.GLfixed)(value), (C.GLboolean)(boolToInt(invert)))
}
func SampleCoveragexOES(value int32, invert bool) {
  C.glowSampleCoveragexOES(pSampleCoveragexOES, (C.GLclampx)(value), (C.GLboolean)(boolToInt(invert)))
}
func SampleMapATI(dst uint32, interp uint32, swizzle uint32) {
  C.glowSampleMapATI(pSampleMapATI, (C.GLuint)(dst), (C.GLuint)(interp), (C.GLenum)(swizzle))
}
func SampleMaskEXT(value float32, invert bool) {
  C.glowSampleMaskEXT(pSampleMaskEXT, (C.GLclampf)(value), (C.GLboolean)(boolToInt(invert)))
}
func SampleMaskIndexedNV(index uint32, mask uint32) {
  C.glowSampleMaskIndexedNV(pSampleMaskIndexedNV, (C.GLuint)(index), (C.GLbitfield)(mask))
}
func SampleMaskSGIS(value float32, invert bool) {
  C.glowSampleMaskSGIS(pSampleMaskSGIS, (C.GLclampf)(value), (C.GLboolean)(boolToInt(invert)))
}
// set the value of a sub-word of the sample mask
func SampleMaski(maskNumber uint32, mask uint32) {
  C.glowSampleMaski(pSampleMaski, (C.GLuint)(maskNumber), (C.GLbitfield)(mask))
}
func SamplePatternEXT(pattern uint32) {
  C.glowSamplePatternEXT(pSamplePatternEXT, (C.GLenum)(pattern))
}
func SamplePatternSGIS(pattern uint32) {
  C.glowSamplePatternSGIS(pSamplePatternSGIS, (C.GLenum)(pattern))
}
func SamplerParameterIiv(sampler uint32, pname uint32, param *int32) {
  C.glowSamplerParameterIiv(pSamplerParameterIiv, (C.GLuint)(sampler), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(param)))
}
func SamplerParameterIuiv(sampler uint32, pname uint32, param *uint32) {
  C.glowSamplerParameterIuiv(pSamplerParameterIuiv, (C.GLuint)(sampler), (C.GLenum)(pname), (*C.GLuint)(unsafe.Pointer(param)))
}
func SamplerParameterf(sampler uint32, pname uint32, param float32) {
  C.glowSamplerParameterf(pSamplerParameterf, (C.GLuint)(sampler), (C.GLenum)(pname), (C.GLfloat)(param))
}
func SamplerParameterfv(sampler uint32, pname uint32, param *float32) {
  C.glowSamplerParameterfv(pSamplerParameterfv, (C.GLuint)(sampler), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(param)))
}
func SamplerParameteri(sampler uint32, pname uint32, param int32) {
  C.glowSamplerParameteri(pSamplerParameteri, (C.GLuint)(sampler), (C.GLenum)(pname), (C.GLint)(param))
}
func SamplerParameteriv(sampler uint32, pname uint32, param *int32) {
  C.glowSamplerParameteriv(pSamplerParameteriv, (C.GLuint)(sampler), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(param)))
}
func ScalexOES(x int32, y int32, z int32) {
  C.glowScalexOES(pScalexOES, (C.GLfixed)(x), (C.GLfixed)(y), (C.GLfixed)(z))
}
// define the scissor box
func Scissor(x int32, y int32, width int32, height int32) {
  C.glowScissor(pScissor, (C.GLint)(x), (C.GLint)(y), (C.GLsizei)(width), (C.GLsizei)(height))
}
func ScissorArrayv(first uint32, count int32, v *int32) {
  C.glowScissorArrayv(pScissorArrayv, (C.GLuint)(first), (C.GLsizei)(count), (*C.GLint)(unsafe.Pointer(v)))
}
// define the scissor box for a specific viewport
func ScissorIndexed(index uint32, left int32, bottom int32, width int32, height int32) {
  C.glowScissorIndexed(pScissorIndexed, (C.GLuint)(index), (C.GLint)(left), (C.GLint)(bottom), (C.GLsizei)(width), (C.GLsizei)(height))
}
func ScissorIndexedv(index uint32, v *int32) {
  C.glowScissorIndexedv(pScissorIndexedv, (C.GLuint)(index), (*C.GLint)(unsafe.Pointer(v)))
}
func SecondaryColor3bEXT(red int8, green int8, blue int8) {
  C.glowSecondaryColor3bEXT(pSecondaryColor3bEXT, (C.GLbyte)(red), (C.GLbyte)(green), (C.GLbyte)(blue))
}
func SecondaryColor3bvEXT(v *int8) {
  C.glowSecondaryColor3bvEXT(pSecondaryColor3bvEXT, (*C.GLbyte)(unsafe.Pointer(v)))
}
func SecondaryColor3dEXT(red float64, green float64, blue float64) {
  C.glowSecondaryColor3dEXT(pSecondaryColor3dEXT, (C.GLdouble)(red), (C.GLdouble)(green), (C.GLdouble)(blue))
}
func SecondaryColor3dvEXT(v *float64) {
  C.glowSecondaryColor3dvEXT(pSecondaryColor3dvEXT, (*C.GLdouble)(unsafe.Pointer(v)))
}
func SecondaryColor3fEXT(red float32, green float32, blue float32) {
  C.glowSecondaryColor3fEXT(pSecondaryColor3fEXT, (C.GLfloat)(red), (C.GLfloat)(green), (C.GLfloat)(blue))
}
func SecondaryColor3fvEXT(v *float32) {
  C.glowSecondaryColor3fvEXT(pSecondaryColor3fvEXT, (*C.GLfloat)(unsafe.Pointer(v)))
}
func SecondaryColor3hNV(red uint16, green uint16, blue uint16) {
  C.glowSecondaryColor3hNV(pSecondaryColor3hNV, (C.GLhalfNV)(red), (C.GLhalfNV)(green), (C.GLhalfNV)(blue))
}
func SecondaryColor3hvNV(v *uint16) {
  C.glowSecondaryColor3hvNV(pSecondaryColor3hvNV, (*C.GLhalfNV)(unsafe.Pointer(v)))
}
func SecondaryColor3iEXT(red int32, green int32, blue int32) {
  C.glowSecondaryColor3iEXT(pSecondaryColor3iEXT, (C.GLint)(red), (C.GLint)(green), (C.GLint)(blue))
}
func SecondaryColor3ivEXT(v *int32) {
  C.glowSecondaryColor3ivEXT(pSecondaryColor3ivEXT, (*C.GLint)(unsafe.Pointer(v)))
}
func SecondaryColor3sEXT(red int16, green int16, blue int16) {
  C.glowSecondaryColor3sEXT(pSecondaryColor3sEXT, (C.GLshort)(red), (C.GLshort)(green), (C.GLshort)(blue))
}
func SecondaryColor3svEXT(v *int16) {
  C.glowSecondaryColor3svEXT(pSecondaryColor3svEXT, (*C.GLshort)(unsafe.Pointer(v)))
}
func SecondaryColor3ubEXT(red uint8, green uint8, blue uint8) {
  C.glowSecondaryColor3ubEXT(pSecondaryColor3ubEXT, (C.GLubyte)(red), (C.GLubyte)(green), (C.GLubyte)(blue))
}
func SecondaryColor3ubvEXT(v *uint8) {
  C.glowSecondaryColor3ubvEXT(pSecondaryColor3ubvEXT, (*C.GLubyte)(unsafe.Pointer(v)))
}
func SecondaryColor3uiEXT(red uint32, green uint32, blue uint32) {
  C.glowSecondaryColor3uiEXT(pSecondaryColor3uiEXT, (C.GLuint)(red), (C.GLuint)(green), (C.GLuint)(blue))
}
func SecondaryColor3uivEXT(v *uint32) {
  C.glowSecondaryColor3uivEXT(pSecondaryColor3uivEXT, (*C.GLuint)(unsafe.Pointer(v)))
}
func SecondaryColor3usEXT(red uint16, green uint16, blue uint16) {
  C.glowSecondaryColor3usEXT(pSecondaryColor3usEXT, (C.GLushort)(red), (C.GLushort)(green), (C.GLushort)(blue))
}
func SecondaryColor3usvEXT(v *uint16) {
  C.glowSecondaryColor3usvEXT(pSecondaryColor3usvEXT, (*C.GLushort)(unsafe.Pointer(v)))
}
func SecondaryColorFormatNV(size int32, xtype uint32, stride int32) {
  C.glowSecondaryColorFormatNV(pSecondaryColorFormatNV, (C.GLint)(size), (C.GLenum)(xtype), (C.GLsizei)(stride))
}
func SecondaryColorPointerEXT(size int32, xtype uint32, stride int32, pointer unsafe.Pointer) {
  C.glowSecondaryColorPointerEXT(pSecondaryColorPointerEXT, (C.GLint)(size), (C.GLenum)(xtype), (C.GLsizei)(stride), pointer)
}
func SecondaryColorPointerListIBM(size int32, xtype uint32, stride int32, pointer *unsafe.Pointer, ptrstride int32) {
  C.glowSecondaryColorPointerListIBM(pSecondaryColorPointerListIBM, (C.GLint)(size), (C.GLenum)(xtype), (C.GLint)(stride), pointer, (C.GLint)(ptrstride))
}
func SelectPerfMonitorCountersAMD(monitor uint32, enable bool, group uint32, numCounters int32, counterList *uint32) {
  C.glowSelectPerfMonitorCountersAMD(pSelectPerfMonitorCountersAMD, (C.GLuint)(monitor), (C.GLboolean)(boolToInt(enable)), (C.GLuint)(group), (C.GLint)(numCounters), (*C.GLuint)(unsafe.Pointer(counterList)))
}
func SeparableFilter2DEXT(target uint32, internalformat uint32, width int32, height int32, format uint32, xtype uint32, row unsafe.Pointer, column unsafe.Pointer) {
  C.glowSeparableFilter2DEXT(pSeparableFilter2DEXT, (C.GLenum)(target), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLenum)(format), (C.GLenum)(xtype), row, column)
}
func SetFenceAPPLE(fence uint32) {
  C.glowSetFenceAPPLE(pSetFenceAPPLE, (C.GLuint)(fence))
}
func SetFenceNV(fence uint32, condition uint32) {
  C.glowSetFenceNV(pSetFenceNV, (C.GLuint)(fence), (C.GLenum)(condition))
}
func SetFragmentShaderConstantATI(dst uint32, value *float32) {
  C.glowSetFragmentShaderConstantATI(pSetFragmentShaderConstantATI, (C.GLuint)(dst), (*C.GLfloat)(unsafe.Pointer(value)))
}
func SetInvariantEXT(id uint32, xtype uint32, addr unsafe.Pointer) {
  C.glowSetInvariantEXT(pSetInvariantEXT, (C.GLuint)(id), (C.GLenum)(xtype), addr)
}
func SetLocalConstantEXT(id uint32, xtype uint32, addr unsafe.Pointer) {
  C.glowSetLocalConstantEXT(pSetLocalConstantEXT, (C.GLuint)(id), (C.GLenum)(xtype), addr)
}
func SetMultisamplefvAMD(pname uint32, index uint32, val *float32) {
  C.glowSetMultisamplefvAMD(pSetMultisamplefvAMD, (C.GLenum)(pname), (C.GLuint)(index), (*C.GLfloat)(unsafe.Pointer(val)))
}
// load pre-compiled shader binaries
func ShaderBinary(count int32, shaders *uint32, binaryformat uint32, binary unsafe.Pointer, length int32) {
  C.glowShaderBinary(pShaderBinary, (C.GLsizei)(count), (*C.GLuint)(unsafe.Pointer(shaders)), (C.GLenum)(binaryformat), binary, (C.GLsizei)(length))
}
func ShaderOp1EXT(op uint32, res uint32, arg1 uint32) {
  C.glowShaderOp1EXT(pShaderOp1EXT, (C.GLenum)(op), (C.GLuint)(res), (C.GLuint)(arg1))
}
func ShaderOp2EXT(op uint32, res uint32, arg1 uint32, arg2 uint32) {
  C.glowShaderOp2EXT(pShaderOp2EXT, (C.GLenum)(op), (C.GLuint)(res), (C.GLuint)(arg1), (C.GLuint)(arg2))
}
func ShaderOp3EXT(op uint32, res uint32, arg1 uint32, arg2 uint32, arg3 uint32) {
  C.glowShaderOp3EXT(pShaderOp3EXT, (C.GLenum)(op), (C.GLuint)(res), (C.GLuint)(arg1), (C.GLuint)(arg2), (C.GLuint)(arg3))
}
// Replaces the source code in a shader object
func ShaderSource(shader uint32, count int32, xstring **int8, length *int32) {
  C.glowShaderSource(pShaderSource, (C.GLuint)(shader), (C.GLsizei)(count), (**C.GLchar)(unsafe.Pointer(xstring)), (*C.GLint)(unsafe.Pointer(length)))
}
func ShaderSourceARB(shaderObj uintptr, count int32, xstring **int8, length *int32) {
  C.glowShaderSourceARB(pShaderSourceARB, (C.GLhandleARB)(shaderObj), (C.GLsizei)(count), (**C.GLcharARB)(unsafe.Pointer(xstring)), (*C.GLint)(unsafe.Pointer(length)))
}
// change an active shader storage block binding
func ShaderStorageBlockBinding(program uint32, storageBlockIndex uint32, storageBlockBinding uint32) {
  C.glowShaderStorageBlockBinding(pShaderStorageBlockBinding, (C.GLuint)(program), (C.GLuint)(storageBlockIndex), (C.GLuint)(storageBlockBinding))
}
func SharpenTexFuncSGIS(target uint32, n int32, points *float32) {
  C.glowSharpenTexFuncSGIS(pSharpenTexFuncSGIS, (C.GLenum)(target), (C.GLsizei)(n), (*C.GLfloat)(unsafe.Pointer(points)))
}
func SpriteParameterfSGIX(pname uint32, param float32) {
  C.glowSpriteParameterfSGIX(pSpriteParameterfSGIX, (C.GLenum)(pname), (C.GLfloat)(param))
}
func SpriteParameterfvSGIX(pname uint32, params *float32) {
  C.glowSpriteParameterfvSGIX(pSpriteParameterfvSGIX, (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func SpriteParameteriSGIX(pname uint32, param int32) {
  C.glowSpriteParameteriSGIX(pSpriteParameteriSGIX, (C.GLenum)(pname), (C.GLint)(param))
}
func SpriteParameterivSGIX(pname uint32, params *int32) {
  C.glowSpriteParameterivSGIX(pSpriteParameterivSGIX, (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func StartInstrumentsSGIX() {
  C.glowStartInstrumentsSGIX(pStartInstrumentsSGIX)
}
func StencilClearTagEXT(stencilTagBits int32, stencilClearTag uint32) {
  C.glowStencilClearTagEXT(pStencilClearTagEXT, (C.GLsizei)(stencilTagBits), (C.GLuint)(stencilClearTag))
}
func StencilFillPathInstancedNV(numPaths int32, pathNameType uint32, paths unsafe.Pointer, pathBase uint32, fillMode uint32, mask uint32, transformType uint32, transformValues *float32) {
  C.glowStencilFillPathInstancedNV(pStencilFillPathInstancedNV, (C.GLsizei)(numPaths), (C.GLenum)(pathNameType), paths, (C.GLuint)(pathBase), (C.GLenum)(fillMode), (C.GLuint)(mask), (C.GLenum)(transformType), (*C.GLfloat)(unsafe.Pointer(transformValues)))
}
func StencilFillPathNV(path uint32, fillMode uint32, mask uint32) {
  C.glowStencilFillPathNV(pStencilFillPathNV, (C.GLuint)(path), (C.GLenum)(fillMode), (C.GLuint)(mask))
}
// set front and back function and reference value for stencil testing
func StencilFunc(xfunc uint32, ref int32, mask uint32) {
  C.glowStencilFunc(pStencilFunc, (C.GLenum)(xfunc), (C.GLint)(ref), (C.GLuint)(mask))
}
// set front and/or back function and reference value for stencil testing
func StencilFuncSeparate(face uint32, xfunc uint32, ref int32, mask uint32) {
  C.glowStencilFuncSeparate(pStencilFuncSeparate, (C.GLenum)(face), (C.GLenum)(xfunc), (C.GLint)(ref), (C.GLuint)(mask))
}
func StencilFuncSeparateATI(frontfunc uint32, backfunc uint32, ref int32, mask uint32) {
  C.glowStencilFuncSeparateATI(pStencilFuncSeparateATI, (C.GLenum)(frontfunc), (C.GLenum)(backfunc), (C.GLint)(ref), (C.GLuint)(mask))
}
// control the front and back writing of individual bits in the stencil planes
func StencilMask(mask uint32) {
  C.glowStencilMask(pStencilMask, (C.GLuint)(mask))
}
// control the front and/or back writing of individual bits in the stencil planes
func StencilMaskSeparate(face uint32, mask uint32) {
  C.glowStencilMaskSeparate(pStencilMaskSeparate, (C.GLenum)(face), (C.GLuint)(mask))
}
// set front and back stencil test actions
func StencilOp(fail uint32, zfail uint32, zpass uint32) {
  C.glowStencilOp(pStencilOp, (C.GLenum)(fail), (C.GLenum)(zfail), (C.GLenum)(zpass))
}
// set front and/or back stencil test actions
func StencilOpSeparate(face uint32, sfail uint32, dpfail uint32, dppass uint32) {
  C.glowStencilOpSeparate(pStencilOpSeparate, (C.GLenum)(face), (C.GLenum)(sfail), (C.GLenum)(dpfail), (C.GLenum)(dppass))
}
func StencilOpSeparateATI(face uint32, sfail uint32, dpfail uint32, dppass uint32) {
  C.glowStencilOpSeparateATI(pStencilOpSeparateATI, (C.GLenum)(face), (C.GLenum)(sfail), (C.GLenum)(dpfail), (C.GLenum)(dppass))
}
func StencilOpValueAMD(face uint32, value uint32) {
  C.glowStencilOpValueAMD(pStencilOpValueAMD, (C.GLenum)(face), (C.GLuint)(value))
}
func StencilStrokePathInstancedNV(numPaths int32, pathNameType uint32, paths unsafe.Pointer, pathBase uint32, reference int32, mask uint32, transformType uint32, transformValues *float32) {
  C.glowStencilStrokePathInstancedNV(pStencilStrokePathInstancedNV, (C.GLsizei)(numPaths), (C.GLenum)(pathNameType), paths, (C.GLuint)(pathBase), (C.GLint)(reference), (C.GLuint)(mask), (C.GLenum)(transformType), (*C.GLfloat)(unsafe.Pointer(transformValues)))
}
func StencilStrokePathNV(path uint32, reference int32, mask uint32) {
  C.glowStencilStrokePathNV(pStencilStrokePathNV, (C.GLuint)(path), (C.GLint)(reference), (C.GLuint)(mask))
}
func StopInstrumentsSGIX(marker int32) {
  C.glowStopInstrumentsSGIX(pStopInstrumentsSGIX, (C.GLint)(marker))
}
func StringMarkerGREMEDY(len int32, xstring unsafe.Pointer) {
  C.glowStringMarkerGREMEDY(pStringMarkerGREMEDY, (C.GLsizei)(len), xstring)
}
func SwizzleEXT(res uint32, in uint32, outX uint32, outY uint32, outZ uint32, outW uint32) {
  C.glowSwizzleEXT(pSwizzleEXT, (C.GLuint)(res), (C.GLuint)(in), (C.GLenum)(outX), (C.GLenum)(outY), (C.GLenum)(outZ), (C.GLenum)(outW))
}
func SyncTextureINTEL(texture uint32) {
  C.glowSyncTextureINTEL(pSyncTextureINTEL, (C.GLuint)(texture))
}
func TagSampleBufferSGIX() {
  C.glowTagSampleBufferSGIX(pTagSampleBufferSGIX)
}
func Tangent3bEXT(tx int8, ty int8, tz int8) {
  C.glowTangent3bEXT(pTangent3bEXT, (C.GLbyte)(tx), (C.GLbyte)(ty), (C.GLbyte)(tz))
}
func Tangent3bvEXT(v *int8) {
  C.glowTangent3bvEXT(pTangent3bvEXT, (*C.GLbyte)(unsafe.Pointer(v)))
}
func Tangent3dEXT(tx float64, ty float64, tz float64) {
  C.glowTangent3dEXT(pTangent3dEXT, (C.GLdouble)(tx), (C.GLdouble)(ty), (C.GLdouble)(tz))
}
func Tangent3dvEXT(v *float64) {
  C.glowTangent3dvEXT(pTangent3dvEXT, (*C.GLdouble)(unsafe.Pointer(v)))
}
func Tangent3fEXT(tx float32, ty float32, tz float32) {
  C.glowTangent3fEXT(pTangent3fEXT, (C.GLfloat)(tx), (C.GLfloat)(ty), (C.GLfloat)(tz))
}
func Tangent3fvEXT(v *float32) {
  C.glowTangent3fvEXT(pTangent3fvEXT, (*C.GLfloat)(unsafe.Pointer(v)))
}
func Tangent3iEXT(tx int32, ty int32, tz int32) {
  C.glowTangent3iEXT(pTangent3iEXT, (C.GLint)(tx), (C.GLint)(ty), (C.GLint)(tz))
}
func Tangent3ivEXT(v *int32) {
  C.glowTangent3ivEXT(pTangent3ivEXT, (*C.GLint)(unsafe.Pointer(v)))
}
func Tangent3sEXT(tx int16, ty int16, tz int16) {
  C.glowTangent3sEXT(pTangent3sEXT, (C.GLshort)(tx), (C.GLshort)(ty), (C.GLshort)(tz))
}
func Tangent3svEXT(v *int16) {
  C.glowTangent3svEXT(pTangent3svEXT, (*C.GLshort)(unsafe.Pointer(v)))
}
func TangentPointerEXT(xtype uint32, stride int32, pointer unsafe.Pointer) {
  C.glowTangentPointerEXT(pTangentPointerEXT, (C.GLenum)(xtype), (C.GLsizei)(stride), pointer)
}
func TbufferMask3DFX(mask uint32) {
  C.glowTbufferMask3DFX(pTbufferMask3DFX, (C.GLuint)(mask))
}
func TessellationFactorAMD(factor float32) {
  C.glowTessellationFactorAMD(pTessellationFactorAMD, (C.GLfloat)(factor))
}
func TessellationModeAMD(mode uint32) {
  C.glowTessellationModeAMD(pTessellationModeAMD, (C.GLenum)(mode))
}
func TestFenceAPPLE(fence uint32) bool {
  ret := C.glowTestFenceAPPLE(pTestFenceAPPLE, (C.GLuint)(fence))
  return ret == TRUE
}
func TestFenceNV(fence uint32) bool {
  ret := C.glowTestFenceNV(pTestFenceNV, (C.GLuint)(fence))
  return ret == TRUE
}
func TestObjectAPPLE(object uint32, name uint32) bool {
  ret := C.glowTestObjectAPPLE(pTestObjectAPPLE, (C.GLenum)(object), (C.GLuint)(name))
  return ret == TRUE
}
// attach the storage for a buffer object to the active buffer texture
func TexBuffer(target uint32, internalformat uint32, buffer uint32) {
  C.glowTexBuffer(pTexBuffer, (C.GLenum)(target), (C.GLenum)(internalformat), (C.GLuint)(buffer))
}
func TexBufferARB(target uint32, internalformat uint32, buffer uint32) {
  C.glowTexBufferARB(pTexBufferARB, (C.GLenum)(target), (C.GLenum)(internalformat), (C.GLuint)(buffer))
}
func TexBufferEXT(target uint32, internalformat uint32, buffer uint32) {
  C.glowTexBufferEXT(pTexBufferEXT, (C.GLenum)(target), (C.GLenum)(internalformat), (C.GLuint)(buffer))
}
// bind a range of a buffer's data store to a buffer texture
func TexBufferRange(target uint32, internalformat uint32, buffer uint32, offset int, size int) {
  C.glowTexBufferRange(pTexBufferRange, (C.GLenum)(target), (C.GLenum)(internalformat), (C.GLuint)(buffer), (C.GLintptr)(offset), (C.GLsizeiptr)(size))
}
func TexBumpParameterfvATI(pname uint32, param *float32) {
  C.glowTexBumpParameterfvATI(pTexBumpParameterfvATI, (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(param)))
}
func TexBumpParameterivATI(pname uint32, param *int32) {
  C.glowTexBumpParameterivATI(pTexBumpParameterivATI, (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(param)))
}
func TexCoord1bOES(s int8) {
  C.glowTexCoord1bOES(pTexCoord1bOES, (C.GLbyte)(s))
}
func TexCoord1bvOES(coords *int8) {
  C.glowTexCoord1bvOES(pTexCoord1bvOES, (*C.GLbyte)(unsafe.Pointer(coords)))
}
func TexCoord1hNV(s uint16) {
  C.glowTexCoord1hNV(pTexCoord1hNV, (C.GLhalfNV)(s))
}
func TexCoord1hvNV(v *uint16) {
  C.glowTexCoord1hvNV(pTexCoord1hvNV, (*C.GLhalfNV)(unsafe.Pointer(v)))
}
func TexCoord1xOES(s int32) {
  C.glowTexCoord1xOES(pTexCoord1xOES, (C.GLfixed)(s))
}
func TexCoord1xvOES(coords *int32) {
  C.glowTexCoord1xvOES(pTexCoord1xvOES, (*C.GLfixed)(unsafe.Pointer(coords)))
}
func TexCoord2bOES(s int8, t int8) {
  C.glowTexCoord2bOES(pTexCoord2bOES, (C.GLbyte)(s), (C.GLbyte)(t))
}
func TexCoord2bvOES(coords *int8) {
  C.glowTexCoord2bvOES(pTexCoord2bvOES, (*C.GLbyte)(unsafe.Pointer(coords)))
}
func TexCoord2fColor3fVertex3fSUN(s float32, t float32, r float32, g float32, b float32, x float32, y float32, z float32) {
  C.glowTexCoord2fColor3fVertex3fSUN(pTexCoord2fColor3fVertex3fSUN, (C.GLfloat)(s), (C.GLfloat)(t), (C.GLfloat)(r), (C.GLfloat)(g), (C.GLfloat)(b), (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z))
}
func TexCoord2fColor3fVertex3fvSUN(tc *float32, c *float32, v *float32) {
  C.glowTexCoord2fColor3fVertex3fvSUN(pTexCoord2fColor3fVertex3fvSUN, (*C.GLfloat)(unsafe.Pointer(tc)), (*C.GLfloat)(unsafe.Pointer(c)), (*C.GLfloat)(unsafe.Pointer(v)))
}
func TexCoord2fColor4fNormal3fVertex3fSUN(s float32, t float32, r float32, g float32, b float32, a float32, nx float32, ny float32, nz float32, x float32, y float32, z float32) {
  C.glowTexCoord2fColor4fNormal3fVertex3fSUN(pTexCoord2fColor4fNormal3fVertex3fSUN, (C.GLfloat)(s), (C.GLfloat)(t), (C.GLfloat)(r), (C.GLfloat)(g), (C.GLfloat)(b), (C.GLfloat)(a), (C.GLfloat)(nx), (C.GLfloat)(ny), (C.GLfloat)(nz), (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z))
}
func TexCoord2fColor4fNormal3fVertex3fvSUN(tc *float32, c *float32, n *float32, v *float32) {
  C.glowTexCoord2fColor4fNormal3fVertex3fvSUN(pTexCoord2fColor4fNormal3fVertex3fvSUN, (*C.GLfloat)(unsafe.Pointer(tc)), (*C.GLfloat)(unsafe.Pointer(c)), (*C.GLfloat)(unsafe.Pointer(n)), (*C.GLfloat)(unsafe.Pointer(v)))
}
func TexCoord2fColor4ubVertex3fSUN(s float32, t float32, r uint8, g uint8, b uint8, a uint8, x float32, y float32, z float32) {
  C.glowTexCoord2fColor4ubVertex3fSUN(pTexCoord2fColor4ubVertex3fSUN, (C.GLfloat)(s), (C.GLfloat)(t), (C.GLubyte)(r), (C.GLubyte)(g), (C.GLubyte)(b), (C.GLubyte)(a), (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z))
}
func TexCoord2fColor4ubVertex3fvSUN(tc *float32, c *uint8, v *float32) {
  C.glowTexCoord2fColor4ubVertex3fvSUN(pTexCoord2fColor4ubVertex3fvSUN, (*C.GLfloat)(unsafe.Pointer(tc)), (*C.GLubyte)(unsafe.Pointer(c)), (*C.GLfloat)(unsafe.Pointer(v)))
}
func TexCoord2fNormal3fVertex3fSUN(s float32, t float32, nx float32, ny float32, nz float32, x float32, y float32, z float32) {
  C.glowTexCoord2fNormal3fVertex3fSUN(pTexCoord2fNormal3fVertex3fSUN, (C.GLfloat)(s), (C.GLfloat)(t), (C.GLfloat)(nx), (C.GLfloat)(ny), (C.GLfloat)(nz), (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z))
}
func TexCoord2fNormal3fVertex3fvSUN(tc *float32, n *float32, v *float32) {
  C.glowTexCoord2fNormal3fVertex3fvSUN(pTexCoord2fNormal3fVertex3fvSUN, (*C.GLfloat)(unsafe.Pointer(tc)), (*C.GLfloat)(unsafe.Pointer(n)), (*C.GLfloat)(unsafe.Pointer(v)))
}
func TexCoord2fVertex3fSUN(s float32, t float32, x float32, y float32, z float32) {
  C.glowTexCoord2fVertex3fSUN(pTexCoord2fVertex3fSUN, (C.GLfloat)(s), (C.GLfloat)(t), (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z))
}
func TexCoord2fVertex3fvSUN(tc *float32, v *float32) {
  C.glowTexCoord2fVertex3fvSUN(pTexCoord2fVertex3fvSUN, (*C.GLfloat)(unsafe.Pointer(tc)), (*C.GLfloat)(unsafe.Pointer(v)))
}
func TexCoord2hNV(s uint16, t uint16) {
  C.glowTexCoord2hNV(pTexCoord2hNV, (C.GLhalfNV)(s), (C.GLhalfNV)(t))
}
func TexCoord2hvNV(v *uint16) {
  C.glowTexCoord2hvNV(pTexCoord2hvNV, (*C.GLhalfNV)(unsafe.Pointer(v)))
}
func TexCoord2xOES(s int32, t int32) {
  C.glowTexCoord2xOES(pTexCoord2xOES, (C.GLfixed)(s), (C.GLfixed)(t))
}
func TexCoord2xvOES(coords *int32) {
  C.glowTexCoord2xvOES(pTexCoord2xvOES, (*C.GLfixed)(unsafe.Pointer(coords)))
}
func TexCoord3bOES(s int8, t int8, r int8) {
  C.glowTexCoord3bOES(pTexCoord3bOES, (C.GLbyte)(s), (C.GLbyte)(t), (C.GLbyte)(r))
}
func TexCoord3bvOES(coords *int8) {
  C.glowTexCoord3bvOES(pTexCoord3bvOES, (*C.GLbyte)(unsafe.Pointer(coords)))
}
func TexCoord3hNV(s uint16, t uint16, r uint16) {
  C.glowTexCoord3hNV(pTexCoord3hNV, (C.GLhalfNV)(s), (C.GLhalfNV)(t), (C.GLhalfNV)(r))
}
func TexCoord3hvNV(v *uint16) {
  C.glowTexCoord3hvNV(pTexCoord3hvNV, (*C.GLhalfNV)(unsafe.Pointer(v)))
}
func TexCoord3xOES(s int32, t int32, r int32) {
  C.glowTexCoord3xOES(pTexCoord3xOES, (C.GLfixed)(s), (C.GLfixed)(t), (C.GLfixed)(r))
}
func TexCoord3xvOES(coords *int32) {
  C.glowTexCoord3xvOES(pTexCoord3xvOES, (*C.GLfixed)(unsafe.Pointer(coords)))
}
func TexCoord4bOES(s int8, t int8, r int8, q int8) {
  C.glowTexCoord4bOES(pTexCoord4bOES, (C.GLbyte)(s), (C.GLbyte)(t), (C.GLbyte)(r), (C.GLbyte)(q))
}
func TexCoord4bvOES(coords *int8) {
  C.glowTexCoord4bvOES(pTexCoord4bvOES, (*C.GLbyte)(unsafe.Pointer(coords)))
}
func TexCoord4fColor4fNormal3fVertex4fSUN(s float32, t float32, p float32, q float32, r float32, g float32, b float32, a float32, nx float32, ny float32, nz float32, x float32, y float32, z float32, w float32) {
  C.glowTexCoord4fColor4fNormal3fVertex4fSUN(pTexCoord4fColor4fNormal3fVertex4fSUN, (C.GLfloat)(s), (C.GLfloat)(t), (C.GLfloat)(p), (C.GLfloat)(q), (C.GLfloat)(r), (C.GLfloat)(g), (C.GLfloat)(b), (C.GLfloat)(a), (C.GLfloat)(nx), (C.GLfloat)(ny), (C.GLfloat)(nz), (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z), (C.GLfloat)(w))
}
func TexCoord4fColor4fNormal3fVertex4fvSUN(tc *float32, c *float32, n *float32, v *float32) {
  C.glowTexCoord4fColor4fNormal3fVertex4fvSUN(pTexCoord4fColor4fNormal3fVertex4fvSUN, (*C.GLfloat)(unsafe.Pointer(tc)), (*C.GLfloat)(unsafe.Pointer(c)), (*C.GLfloat)(unsafe.Pointer(n)), (*C.GLfloat)(unsafe.Pointer(v)))
}
func TexCoord4fVertex4fSUN(s float32, t float32, p float32, q float32, x float32, y float32, z float32, w float32) {
  C.glowTexCoord4fVertex4fSUN(pTexCoord4fVertex4fSUN, (C.GLfloat)(s), (C.GLfloat)(t), (C.GLfloat)(p), (C.GLfloat)(q), (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z), (C.GLfloat)(w))
}
func TexCoord4fVertex4fvSUN(tc *float32, v *float32) {
  C.glowTexCoord4fVertex4fvSUN(pTexCoord4fVertex4fvSUN, (*C.GLfloat)(unsafe.Pointer(tc)), (*C.GLfloat)(unsafe.Pointer(v)))
}
func TexCoord4hNV(s uint16, t uint16, r uint16, q uint16) {
  C.glowTexCoord4hNV(pTexCoord4hNV, (C.GLhalfNV)(s), (C.GLhalfNV)(t), (C.GLhalfNV)(r), (C.GLhalfNV)(q))
}
func TexCoord4hvNV(v *uint16) {
  C.glowTexCoord4hvNV(pTexCoord4hvNV, (*C.GLhalfNV)(unsafe.Pointer(v)))
}
func TexCoord4xOES(s int32, t int32, r int32, q int32) {
  C.glowTexCoord4xOES(pTexCoord4xOES, (C.GLfixed)(s), (C.GLfixed)(t), (C.GLfixed)(r), (C.GLfixed)(q))
}
func TexCoord4xvOES(coords *int32) {
  C.glowTexCoord4xvOES(pTexCoord4xvOES, (*C.GLfixed)(unsafe.Pointer(coords)))
}
func TexCoordFormatNV(size int32, xtype uint32, stride int32) {
  C.glowTexCoordFormatNV(pTexCoordFormatNV, (C.GLint)(size), (C.GLenum)(xtype), (C.GLsizei)(stride))
}
func TexCoordPointerEXT(size int32, xtype uint32, stride int32, count int32, pointer unsafe.Pointer) {
  C.glowTexCoordPointerEXT(pTexCoordPointerEXT, (C.GLint)(size), (C.GLenum)(xtype), (C.GLsizei)(stride), (C.GLsizei)(count), pointer)
}
func TexCoordPointerListIBM(size int32, xtype uint32, stride int32, pointer *unsafe.Pointer, ptrstride int32) {
  C.glowTexCoordPointerListIBM(pTexCoordPointerListIBM, (C.GLint)(size), (C.GLenum)(xtype), (C.GLint)(stride), pointer, (C.GLint)(ptrstride))
}
func TexCoordPointervINTEL(size int32, xtype uint32, pointer *unsafe.Pointer) {
  C.glowTexCoordPointervINTEL(pTexCoordPointervINTEL, (C.GLint)(size), (C.GLenum)(xtype), pointer)
}
func TexEnvxOES(target uint32, pname uint32, param int32) {
  C.glowTexEnvxOES(pTexEnvxOES, (C.GLenum)(target), (C.GLenum)(pname), (C.GLfixed)(param))
}
func TexEnvxvOES(target uint32, pname uint32, params *int32) {
  C.glowTexEnvxvOES(pTexEnvxvOES, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLfixed)(unsafe.Pointer(params)))
}
func TexFilterFuncSGIS(target uint32, filter uint32, n int32, weights *float32) {
  C.glowTexFilterFuncSGIS(pTexFilterFuncSGIS, (C.GLenum)(target), (C.GLenum)(filter), (C.GLsizei)(n), (*C.GLfloat)(unsafe.Pointer(weights)))
}
func TexGenxOES(coord uint32, pname uint32, param int32) {
  C.glowTexGenxOES(pTexGenxOES, (C.GLenum)(coord), (C.GLenum)(pname), (C.GLfixed)(param))
}
func TexGenxvOES(coord uint32, pname uint32, params *int32) {
  C.glowTexGenxvOES(pTexGenxvOES, (C.GLenum)(coord), (C.GLenum)(pname), (*C.GLfixed)(unsafe.Pointer(params)))
}
// specify a one-dimensional texture image
func TexImage1D(target uint32, level int32, internalformat int32, width int32, border int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
  C.glowTexImage1D(pTexImage1D, (C.GLenum)(target), (C.GLint)(level), (C.GLint)(internalformat), (C.GLsizei)(width), (C.GLint)(border), (C.GLenum)(format), (C.GLenum)(xtype), pixels)
}
// specify a two-dimensional texture image
func TexImage2D(target uint32, level int32, internalformat int32, width int32, height int32, border int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
  C.glowTexImage2D(pTexImage2D, (C.GLenum)(target), (C.GLint)(level), (C.GLint)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLint)(border), (C.GLenum)(format), (C.GLenum)(xtype), pixels)
}
// establish the data storage, format, dimensions, and number of samples of a multisample texture's image
func TexImage2DMultisample(target uint32, samples int32, internalformat uint32, width int32, height int32, fixedsamplelocations bool) {
  C.glowTexImage2DMultisample(pTexImage2DMultisample, (C.GLenum)(target), (C.GLsizei)(samples), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLboolean)(boolToInt(fixedsamplelocations)))
}
func TexImage2DMultisampleCoverageNV(target uint32, coverageSamples int32, colorSamples int32, internalFormat int32, width int32, height int32, fixedSampleLocations bool) {
  C.glowTexImage2DMultisampleCoverageNV(pTexImage2DMultisampleCoverageNV, (C.GLenum)(target), (C.GLsizei)(coverageSamples), (C.GLsizei)(colorSamples), (C.GLint)(internalFormat), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLboolean)(boolToInt(fixedSampleLocations)))
}
// specify a three-dimensional texture image
func TexImage3D(target uint32, level int32, internalformat int32, width int32, height int32, depth int32, border int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
  C.glowTexImage3D(pTexImage3D, (C.GLenum)(target), (C.GLint)(level), (C.GLint)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLsizei)(depth), (C.GLint)(border), (C.GLenum)(format), (C.GLenum)(xtype), pixels)
}
func TexImage3DEXT(target uint32, level int32, internalformat uint32, width int32, height int32, depth int32, border int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
  C.glowTexImage3DEXT(pTexImage3DEXT, (C.GLenum)(target), (C.GLint)(level), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLsizei)(depth), (C.GLint)(border), (C.GLenum)(format), (C.GLenum)(xtype), pixels)
}
// establish the data storage, format, dimensions, and number of samples of a multisample texture's image
func TexImage3DMultisample(target uint32, samples int32, internalformat uint32, width int32, height int32, depth int32, fixedsamplelocations bool) {
  C.glowTexImage3DMultisample(pTexImage3DMultisample, (C.GLenum)(target), (C.GLsizei)(samples), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLsizei)(depth), (C.GLboolean)(boolToInt(fixedsamplelocations)))
}
func TexImage3DMultisampleCoverageNV(target uint32, coverageSamples int32, colorSamples int32, internalFormat int32, width int32, height int32, depth int32, fixedSampleLocations bool) {
  C.glowTexImage3DMultisampleCoverageNV(pTexImage3DMultisampleCoverageNV, (C.GLenum)(target), (C.GLsizei)(coverageSamples), (C.GLsizei)(colorSamples), (C.GLint)(internalFormat), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLsizei)(depth), (C.GLboolean)(boolToInt(fixedSampleLocations)))
}
func TexImage4DSGIS(target uint32, level int32, internalformat uint32, width int32, height int32, depth int32, size4d int32, border int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
  C.glowTexImage4DSGIS(pTexImage4DSGIS, (C.GLenum)(target), (C.GLint)(level), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLsizei)(depth), (C.GLsizei)(size4d), (C.GLint)(border), (C.GLenum)(format), (C.GLenum)(xtype), pixels)
}
func TexPageCommitmentARB(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, resident bool) {
  C.glowTexPageCommitmentARB(pTexPageCommitmentARB, (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLint)(yoffset), (C.GLint)(zoffset), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLsizei)(depth), (C.GLboolean)(boolToInt(resident)))
}
func TexParameterIiv(target uint32, pname uint32, params *int32) {
  C.glowTexParameterIiv(pTexParameterIiv, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func TexParameterIivEXT(target uint32, pname uint32, params *int32) {
  C.glowTexParameterIivEXT(pTexParameterIivEXT, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func TexParameterIuiv(target uint32, pname uint32, params *uint32) {
  C.glowTexParameterIuiv(pTexParameterIuiv, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLuint)(unsafe.Pointer(params)))
}
func TexParameterIuivEXT(target uint32, pname uint32, params *uint32) {
  C.glowTexParameterIuivEXT(pTexParameterIuivEXT, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLuint)(unsafe.Pointer(params)))
}
func TexParameterf(target uint32, pname uint32, param float32) {
  C.glowTexParameterf(pTexParameterf, (C.GLenum)(target), (C.GLenum)(pname), (C.GLfloat)(param))
}
func TexParameterfv(target uint32, pname uint32, params *float32) {
  C.glowTexParameterfv(pTexParameterfv, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func TexParameteri(target uint32, pname uint32, param int32) {
  C.glowTexParameteri(pTexParameteri, (C.GLenum)(target), (C.GLenum)(pname), (C.GLint)(param))
}
func TexParameteriv(target uint32, pname uint32, params *int32) {
  C.glowTexParameteriv(pTexParameteriv, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func TexParameterxOES(target uint32, pname uint32, param int32) {
  C.glowTexParameterxOES(pTexParameterxOES, (C.GLenum)(target), (C.GLenum)(pname), (C.GLfixed)(param))
}
func TexParameterxvOES(target uint32, pname uint32, params *int32) {
  C.glowTexParameterxvOES(pTexParameterxvOES, (C.GLenum)(target), (C.GLenum)(pname), (*C.GLfixed)(unsafe.Pointer(params)))
}
func TexRenderbufferNV(target uint32, renderbuffer uint32) {
  C.glowTexRenderbufferNV(pTexRenderbufferNV, (C.GLenum)(target), (C.GLuint)(renderbuffer))
}
// simultaneously specify storage for all levels of a one-dimensional texture
func TexStorage1D(target uint32, levels int32, internalformat uint32, width int32) {
  C.glowTexStorage1D(pTexStorage1D, (C.GLenum)(target), (C.GLsizei)(levels), (C.GLenum)(internalformat), (C.GLsizei)(width))
}
// simultaneously specify storage for all levels of a two-dimensional or one-dimensional array texture
func TexStorage2D(target uint32, levels int32, internalformat uint32, width int32, height int32) {
  C.glowTexStorage2D(pTexStorage2D, (C.GLenum)(target), (C.GLsizei)(levels), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height))
}
// specify storage for a two-dimensional multisample texture
func TexStorage2DMultisample(target uint32, samples int32, internalformat uint32, width int32, height int32, fixedsamplelocations bool) {
  C.glowTexStorage2DMultisample(pTexStorage2DMultisample, (C.GLenum)(target), (C.GLsizei)(samples), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLboolean)(boolToInt(fixedsamplelocations)))
}
// simultaneously specify storage for all levels of a three-dimensional, two-dimensional array or cube-map array texture
func TexStorage3D(target uint32, levels int32, internalformat uint32, width int32, height int32, depth int32) {
  C.glowTexStorage3D(pTexStorage3D, (C.GLenum)(target), (C.GLsizei)(levels), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLsizei)(depth))
}
// specify storage for a two-dimensional multisample array texture
func TexStorage3DMultisample(target uint32, samples int32, internalformat uint32, width int32, height int32, depth int32, fixedsamplelocations bool) {
  C.glowTexStorage3DMultisample(pTexStorage3DMultisample, (C.GLenum)(target), (C.GLsizei)(samples), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLsizei)(depth), (C.GLboolean)(boolToInt(fixedsamplelocations)))
}
func TexStorageSparseAMD(target uint32, internalFormat uint32, width int32, height int32, depth int32, layers int32, flags uint32) {
  C.glowTexStorageSparseAMD(pTexStorageSparseAMD, (C.GLenum)(target), (C.GLenum)(internalFormat), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLsizei)(depth), (C.GLsizei)(layers), (C.GLbitfield)(flags))
}
// specify a one-dimensional texture subimage
func TexSubImage1D(target uint32, level int32, xoffset int32, width int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
  C.glowTexSubImage1D(pTexSubImage1D, (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLsizei)(width), (C.GLenum)(format), (C.GLenum)(xtype), pixels)
}
func TexSubImage1DEXT(target uint32, level int32, xoffset int32, width int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
  C.glowTexSubImage1DEXT(pTexSubImage1DEXT, (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLsizei)(width), (C.GLenum)(format), (C.GLenum)(xtype), pixels)
}
// specify a two-dimensional texture subimage
func TexSubImage2D(target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
  C.glowTexSubImage2D(pTexSubImage2D, (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLint)(yoffset), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLenum)(format), (C.GLenum)(xtype), pixels)
}
func TexSubImage2DEXT(target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
  C.glowTexSubImage2DEXT(pTexSubImage2DEXT, (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLint)(yoffset), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLenum)(format), (C.GLenum)(xtype), pixels)
}
// specify a three-dimensional texture subimage
func TexSubImage3D(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
  C.glowTexSubImage3D(pTexSubImage3D, (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLint)(yoffset), (C.GLint)(zoffset), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLsizei)(depth), (C.GLenum)(format), (C.GLenum)(xtype), pixels)
}
func TexSubImage3DEXT(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
  C.glowTexSubImage3DEXT(pTexSubImage3DEXT, (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLint)(yoffset), (C.GLint)(zoffset), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLsizei)(depth), (C.GLenum)(format), (C.GLenum)(xtype), pixels)
}
func TexSubImage4DSGIS(target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, woffset int32, width int32, height int32, depth int32, size4d int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
  C.glowTexSubImage4DSGIS(pTexSubImage4DSGIS, (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLint)(yoffset), (C.GLint)(zoffset), (C.GLint)(woffset), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLsizei)(depth), (C.GLsizei)(size4d), (C.GLenum)(format), (C.GLenum)(xtype), pixels)
}
func TextureBarrierNV() {
  C.glowTextureBarrierNV(pTextureBarrierNV)
}
func TextureBufferEXT(texture uint32, target uint32, internalformat uint32, buffer uint32) {
  C.glowTextureBufferEXT(pTextureBufferEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLenum)(internalformat), (C.GLuint)(buffer))
}
func TextureBufferRangeEXT(texture uint32, target uint32, internalformat uint32, buffer uint32, offset int, size int) {
  C.glowTextureBufferRangeEXT(pTextureBufferRangeEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLenum)(internalformat), (C.GLuint)(buffer), (C.GLintptr)(offset), (C.GLsizeiptr)(size))
}
func TextureColorMaskSGIS(red bool, green bool, blue bool, alpha bool) {
  C.glowTextureColorMaskSGIS(pTextureColorMaskSGIS, (C.GLboolean)(boolToInt(red)), (C.GLboolean)(boolToInt(green)), (C.GLboolean)(boolToInt(blue)), (C.GLboolean)(boolToInt(alpha)))
}
func TextureImage1DEXT(texture uint32, target uint32, level int32, internalformat int32, width int32, border int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
  C.glowTextureImage1DEXT(pTextureImage1DEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLint)(level), (C.GLint)(internalformat), (C.GLsizei)(width), (C.GLint)(border), (C.GLenum)(format), (C.GLenum)(xtype), pixels)
}
func TextureImage2DEXT(texture uint32, target uint32, level int32, internalformat int32, width int32, height int32, border int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
  C.glowTextureImage2DEXT(pTextureImage2DEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLint)(level), (C.GLint)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLint)(border), (C.GLenum)(format), (C.GLenum)(xtype), pixels)
}
func TextureImage2DMultisampleCoverageNV(texture uint32, target uint32, coverageSamples int32, colorSamples int32, internalFormat int32, width int32, height int32, fixedSampleLocations bool) {
  C.glowTextureImage2DMultisampleCoverageNV(pTextureImage2DMultisampleCoverageNV, (C.GLuint)(texture), (C.GLenum)(target), (C.GLsizei)(coverageSamples), (C.GLsizei)(colorSamples), (C.GLint)(internalFormat), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLboolean)(boolToInt(fixedSampleLocations)))
}
func TextureImage2DMultisampleNV(texture uint32, target uint32, samples int32, internalFormat int32, width int32, height int32, fixedSampleLocations bool) {
  C.glowTextureImage2DMultisampleNV(pTextureImage2DMultisampleNV, (C.GLuint)(texture), (C.GLenum)(target), (C.GLsizei)(samples), (C.GLint)(internalFormat), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLboolean)(boolToInt(fixedSampleLocations)))
}
func TextureImage3DEXT(texture uint32, target uint32, level int32, internalformat int32, width int32, height int32, depth int32, border int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
  C.glowTextureImage3DEXT(pTextureImage3DEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLint)(level), (C.GLint)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLsizei)(depth), (C.GLint)(border), (C.GLenum)(format), (C.GLenum)(xtype), pixels)
}
func TextureImage3DMultisampleCoverageNV(texture uint32, target uint32, coverageSamples int32, colorSamples int32, internalFormat int32, width int32, height int32, depth int32, fixedSampleLocations bool) {
  C.glowTextureImage3DMultisampleCoverageNV(pTextureImage3DMultisampleCoverageNV, (C.GLuint)(texture), (C.GLenum)(target), (C.GLsizei)(coverageSamples), (C.GLsizei)(colorSamples), (C.GLint)(internalFormat), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLsizei)(depth), (C.GLboolean)(boolToInt(fixedSampleLocations)))
}
func TextureImage3DMultisampleNV(texture uint32, target uint32, samples int32, internalFormat int32, width int32, height int32, depth int32, fixedSampleLocations bool) {
  C.glowTextureImage3DMultisampleNV(pTextureImage3DMultisampleNV, (C.GLuint)(texture), (C.GLenum)(target), (C.GLsizei)(samples), (C.GLint)(internalFormat), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLsizei)(depth), (C.GLboolean)(boolToInt(fixedSampleLocations)))
}
func TextureLightEXT(pname uint32) {
  C.glowTextureLightEXT(pTextureLightEXT, (C.GLenum)(pname))
}
func TextureMaterialEXT(face uint32, mode uint32) {
  C.glowTextureMaterialEXT(pTextureMaterialEXT, (C.GLenum)(face), (C.GLenum)(mode))
}
func TextureNormalEXT(mode uint32) {
  C.glowTextureNormalEXT(pTextureNormalEXT, (C.GLenum)(mode))
}
func TexturePageCommitmentEXT(texture uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, resident bool) {
  C.glowTexturePageCommitmentEXT(pTexturePageCommitmentEXT, (C.GLuint)(texture), (C.GLint)(level), (C.GLint)(xoffset), (C.GLint)(yoffset), (C.GLint)(zoffset), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLsizei)(depth), (C.GLboolean)(boolToInt(resident)))
}
func TextureParameterIivEXT(texture uint32, target uint32, pname uint32, params *int32) {
  C.glowTextureParameterIivEXT(pTextureParameterIivEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func TextureParameterIuivEXT(texture uint32, target uint32, pname uint32, params *uint32) {
  C.glowTextureParameterIuivEXT(pTextureParameterIuivEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLenum)(pname), (*C.GLuint)(unsafe.Pointer(params)))
}
func TextureParameterfEXT(texture uint32, target uint32, pname uint32, param float32) {
  C.glowTextureParameterfEXT(pTextureParameterfEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLenum)(pname), (C.GLfloat)(param))
}
func TextureParameterfvEXT(texture uint32, target uint32, pname uint32, params *float32) {
  C.glowTextureParameterfvEXT(pTextureParameterfvEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func TextureParameteriEXT(texture uint32, target uint32, pname uint32, param int32) {
  C.glowTextureParameteriEXT(pTextureParameteriEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLenum)(pname), (C.GLint)(param))
}
func TextureParameterivEXT(texture uint32, target uint32, pname uint32, params *int32) {
  C.glowTextureParameterivEXT(pTextureParameterivEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
func TextureRangeAPPLE(target uint32, length int32, pointer unsafe.Pointer) {
  C.glowTextureRangeAPPLE(pTextureRangeAPPLE, (C.GLenum)(target), (C.GLsizei)(length), pointer)
}
func TextureRenderbufferEXT(texture uint32, target uint32, renderbuffer uint32) {
  C.glowTextureRenderbufferEXT(pTextureRenderbufferEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLuint)(renderbuffer))
}
func TextureStorage1DEXT(texture uint32, target uint32, levels int32, internalformat uint32, width int32) {
  C.glowTextureStorage1DEXT(pTextureStorage1DEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLsizei)(levels), (C.GLenum)(internalformat), (C.GLsizei)(width))
}
func TextureStorage2DEXT(texture uint32, target uint32, levels int32, internalformat uint32, width int32, height int32) {
  C.glowTextureStorage2DEXT(pTextureStorage2DEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLsizei)(levels), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height))
}
func TextureStorage2DMultisampleEXT(texture uint32, target uint32, samples int32, internalformat uint32, width int32, height int32, fixedsamplelocations bool) {
  C.glowTextureStorage2DMultisampleEXT(pTextureStorage2DMultisampleEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLsizei)(samples), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLboolean)(boolToInt(fixedsamplelocations)))
}
func TextureStorage3DEXT(texture uint32, target uint32, levels int32, internalformat uint32, width int32, height int32, depth int32) {
  C.glowTextureStorage3DEXT(pTextureStorage3DEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLsizei)(levels), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLsizei)(depth))
}
func TextureStorage3DMultisampleEXT(texture uint32, target uint32, samples int32, internalformat uint32, width int32, height int32, depth int32, fixedsamplelocations bool) {
  C.glowTextureStorage3DMultisampleEXT(pTextureStorage3DMultisampleEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLsizei)(samples), (C.GLenum)(internalformat), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLsizei)(depth), (C.GLboolean)(boolToInt(fixedsamplelocations)))
}
func TextureStorageSparseAMD(texture uint32, target uint32, internalFormat uint32, width int32, height int32, depth int32, layers int32, flags uint32) {
  C.glowTextureStorageSparseAMD(pTextureStorageSparseAMD, (C.GLuint)(texture), (C.GLenum)(target), (C.GLenum)(internalFormat), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLsizei)(depth), (C.GLsizei)(layers), (C.GLbitfield)(flags))
}
func TextureSubImage1DEXT(texture uint32, target uint32, level int32, xoffset int32, width int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
  C.glowTextureSubImage1DEXT(pTextureSubImage1DEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLsizei)(width), (C.GLenum)(format), (C.GLenum)(xtype), pixels)
}
func TextureSubImage2DEXT(texture uint32, target uint32, level int32, xoffset int32, yoffset int32, width int32, height int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
  C.glowTextureSubImage2DEXT(pTextureSubImage2DEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLint)(yoffset), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLenum)(format), (C.GLenum)(xtype), pixels)
}
func TextureSubImage3DEXT(texture uint32, target uint32, level int32, xoffset int32, yoffset int32, zoffset int32, width int32, height int32, depth int32, format uint32, xtype uint32, pixels unsafe.Pointer) {
  C.glowTextureSubImage3DEXT(pTextureSubImage3DEXT, (C.GLuint)(texture), (C.GLenum)(target), (C.GLint)(level), (C.GLint)(xoffset), (C.GLint)(yoffset), (C.GLint)(zoffset), (C.GLsizei)(width), (C.GLsizei)(height), (C.GLsizei)(depth), (C.GLenum)(format), (C.GLenum)(xtype), pixels)
}
// initialize a texture as a data alias of another texture's data store
func TextureView(texture uint32, target uint32, origtexture uint32, internalformat uint32, minlevel uint32, numlevels uint32, minlayer uint32, numlayers uint32) {
  C.glowTextureView(pTextureView, (C.GLuint)(texture), (C.GLenum)(target), (C.GLuint)(origtexture), (C.GLenum)(internalformat), (C.GLuint)(minlevel), (C.GLuint)(numlevels), (C.GLuint)(minlayer), (C.GLuint)(numlayers))
}
func TrackMatrixNV(target uint32, address uint32, matrix uint32, transform uint32) {
  C.glowTrackMatrixNV(pTrackMatrixNV, (C.GLenum)(target), (C.GLuint)(address), (C.GLenum)(matrix), (C.GLenum)(transform))
}
func TransformFeedbackAttribsNV(count uint32, attribs *int32, bufferMode uint32) {
  C.glowTransformFeedbackAttribsNV(pTransformFeedbackAttribsNV, (C.GLuint)(count), (*C.GLint)(unsafe.Pointer(attribs)), (C.GLenum)(bufferMode))
}
func TransformFeedbackStreamAttribsNV(count int32, attribs *int32, nbuffers int32, bufstreams *int32, bufferMode uint32) {
  C.glowTransformFeedbackStreamAttribsNV(pTransformFeedbackStreamAttribsNV, (C.GLsizei)(count), (*C.GLint)(unsafe.Pointer(attribs)), (C.GLsizei)(nbuffers), (*C.GLint)(unsafe.Pointer(bufstreams)), (C.GLenum)(bufferMode))
}
// specify values to record in transform feedback buffers
func TransformFeedbackVaryings(program uint32, count int32, varyings **int8, bufferMode uint32) {
  C.glowTransformFeedbackVaryings(pTransformFeedbackVaryings, (C.GLuint)(program), (C.GLsizei)(count), (**C.GLchar)(unsafe.Pointer(varyings)), (C.GLenum)(bufferMode))
}
func TransformFeedbackVaryingsEXT(program uint32, count int32, varyings **int8, bufferMode uint32) {
  C.glowTransformFeedbackVaryingsEXT(pTransformFeedbackVaryingsEXT, (C.GLuint)(program), (C.GLsizei)(count), (**C.GLchar)(unsafe.Pointer(varyings)), (C.GLenum)(bufferMode))
}
func TransformFeedbackVaryingsNV(program uint32, count int32, locations *int32, bufferMode uint32) {
  C.glowTransformFeedbackVaryingsNV(pTransformFeedbackVaryingsNV, (C.GLuint)(program), (C.GLsizei)(count), (*C.GLint)(unsafe.Pointer(locations)), (C.GLenum)(bufferMode))
}
func TransformPathNV(resultPath uint32, srcPath uint32, transformType uint32, transformValues *float32) {
  C.glowTransformPathNV(pTransformPathNV, (C.GLuint)(resultPath), (C.GLuint)(srcPath), (C.GLenum)(transformType), (*C.GLfloat)(unsafe.Pointer(transformValues)))
}
func TranslatexOES(x int32, y int32, z int32) {
  C.glowTranslatexOES(pTranslatexOES, (C.GLfixed)(x), (C.GLfixed)(y), (C.GLfixed)(z))
}
func Uniform1d(location int32, x float64) {
  C.glowUniform1d(pUniform1d, (C.GLint)(location), (C.GLdouble)(x))
}
func Uniform1dv(location int32, count int32, value *float64) {
  C.glowUniform1dv(pUniform1dv, (C.GLint)(location), (C.GLsizei)(count), (*C.GLdouble)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for the current program object
func Uniform1f(location int32, v0 float32) {
  C.glowUniform1f(pUniform1f, (C.GLint)(location), (C.GLfloat)(v0))
}
func Uniform1fARB(location int32, v0 float32) {
  C.glowUniform1fARB(pUniform1fARB, (C.GLint)(location), (C.GLfloat)(v0))
}
// Specify the value of a uniform variable for the current program object
func Uniform1fv(location int32, count int32, value *float32) {
  C.glowUniform1fv(pUniform1fv, (C.GLint)(location), (C.GLsizei)(count), (*C.GLfloat)(unsafe.Pointer(value)))
}
func Uniform1fvARB(location int32, count int32, value *float32) {
  C.glowUniform1fvARB(pUniform1fvARB, (C.GLint)(location), (C.GLsizei)(count), (*C.GLfloat)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for the current program object
func Uniform1i(location int32, v0 int32) {
  C.glowUniform1i(pUniform1i, (C.GLint)(location), (C.GLint)(v0))
}
func Uniform1i64NV(location int32, x int64) {
  C.glowUniform1i64NV(pUniform1i64NV, (C.GLint)(location), (C.GLint64EXT)(x))
}
func Uniform1i64vNV(location int32, count int32, value *int64) {
  C.glowUniform1i64vNV(pUniform1i64vNV, (C.GLint)(location), (C.GLsizei)(count), (*C.GLint64EXT)(unsafe.Pointer(value)))
}
func Uniform1iARB(location int32, v0 int32) {
  C.glowUniform1iARB(pUniform1iARB, (C.GLint)(location), (C.GLint)(v0))
}
// Specify the value of a uniform variable for the current program object
func Uniform1iv(location int32, count int32, value *int32) {
  C.glowUniform1iv(pUniform1iv, (C.GLint)(location), (C.GLsizei)(count), (*C.GLint)(unsafe.Pointer(value)))
}
func Uniform1ivARB(location int32, count int32, value *int32) {
  C.glowUniform1ivARB(pUniform1ivARB, (C.GLint)(location), (C.GLsizei)(count), (*C.GLint)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for the current program object
func Uniform1ui(location int32, v0 uint32) {
  C.glowUniform1ui(pUniform1ui, (C.GLint)(location), (C.GLuint)(v0))
}
func Uniform1ui64NV(location int32, x uint64) {
  C.glowUniform1ui64NV(pUniform1ui64NV, (C.GLint)(location), (C.GLuint64EXT)(x))
}
func Uniform1ui64vNV(location int32, count int32, value *uint64) {
  C.glowUniform1ui64vNV(pUniform1ui64vNV, (C.GLint)(location), (C.GLsizei)(count), (*C.GLuint64EXT)(unsafe.Pointer(value)))
}
func Uniform1uiEXT(location int32, v0 uint32) {
  C.glowUniform1uiEXT(pUniform1uiEXT, (C.GLint)(location), (C.GLuint)(v0))
}
// Specify the value of a uniform variable for the current program object
func Uniform1uiv(location int32, count int32, value *uint32) {
  C.glowUniform1uiv(pUniform1uiv, (C.GLint)(location), (C.GLsizei)(count), (*C.GLuint)(unsafe.Pointer(value)))
}
func Uniform1uivEXT(location int32, count int32, value *uint32) {
  C.glowUniform1uivEXT(pUniform1uivEXT, (C.GLint)(location), (C.GLsizei)(count), (*C.GLuint)(unsafe.Pointer(value)))
}
func Uniform2d(location int32, x float64, y float64) {
  C.glowUniform2d(pUniform2d, (C.GLint)(location), (C.GLdouble)(x), (C.GLdouble)(y))
}
func Uniform2dv(location int32, count int32, value *float64) {
  C.glowUniform2dv(pUniform2dv, (C.GLint)(location), (C.GLsizei)(count), (*C.GLdouble)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for the current program object
func Uniform2f(location int32, v0 float32, v1 float32) {
  C.glowUniform2f(pUniform2f, (C.GLint)(location), (C.GLfloat)(v0), (C.GLfloat)(v1))
}
func Uniform2fARB(location int32, v0 float32, v1 float32) {
  C.glowUniform2fARB(pUniform2fARB, (C.GLint)(location), (C.GLfloat)(v0), (C.GLfloat)(v1))
}
// Specify the value of a uniform variable for the current program object
func Uniform2fv(location int32, count int32, value *float32) {
  C.glowUniform2fv(pUniform2fv, (C.GLint)(location), (C.GLsizei)(count), (*C.GLfloat)(unsafe.Pointer(value)))
}
func Uniform2fvARB(location int32, count int32, value *float32) {
  C.glowUniform2fvARB(pUniform2fvARB, (C.GLint)(location), (C.GLsizei)(count), (*C.GLfloat)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for the current program object
func Uniform2i(location int32, v0 int32, v1 int32) {
  C.glowUniform2i(pUniform2i, (C.GLint)(location), (C.GLint)(v0), (C.GLint)(v1))
}
func Uniform2i64NV(location int32, x int64, y int64) {
  C.glowUniform2i64NV(pUniform2i64NV, (C.GLint)(location), (C.GLint64EXT)(x), (C.GLint64EXT)(y))
}
func Uniform2i64vNV(location int32, count int32, value *int64) {
  C.glowUniform2i64vNV(pUniform2i64vNV, (C.GLint)(location), (C.GLsizei)(count), (*C.GLint64EXT)(unsafe.Pointer(value)))
}
func Uniform2iARB(location int32, v0 int32, v1 int32) {
  C.glowUniform2iARB(pUniform2iARB, (C.GLint)(location), (C.GLint)(v0), (C.GLint)(v1))
}
// Specify the value of a uniform variable for the current program object
func Uniform2iv(location int32, count int32, value *int32) {
  C.glowUniform2iv(pUniform2iv, (C.GLint)(location), (C.GLsizei)(count), (*C.GLint)(unsafe.Pointer(value)))
}
func Uniform2ivARB(location int32, count int32, value *int32) {
  C.glowUniform2ivARB(pUniform2ivARB, (C.GLint)(location), (C.GLsizei)(count), (*C.GLint)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for the current program object
func Uniform2ui(location int32, v0 uint32, v1 uint32) {
  C.glowUniform2ui(pUniform2ui, (C.GLint)(location), (C.GLuint)(v0), (C.GLuint)(v1))
}
func Uniform2ui64NV(location int32, x uint64, y uint64) {
  C.glowUniform2ui64NV(pUniform2ui64NV, (C.GLint)(location), (C.GLuint64EXT)(x), (C.GLuint64EXT)(y))
}
func Uniform2ui64vNV(location int32, count int32, value *uint64) {
  C.glowUniform2ui64vNV(pUniform2ui64vNV, (C.GLint)(location), (C.GLsizei)(count), (*C.GLuint64EXT)(unsafe.Pointer(value)))
}
func Uniform2uiEXT(location int32, v0 uint32, v1 uint32) {
  C.glowUniform2uiEXT(pUniform2uiEXT, (C.GLint)(location), (C.GLuint)(v0), (C.GLuint)(v1))
}
// Specify the value of a uniform variable for the current program object
func Uniform2uiv(location int32, count int32, value *uint32) {
  C.glowUniform2uiv(pUniform2uiv, (C.GLint)(location), (C.GLsizei)(count), (*C.GLuint)(unsafe.Pointer(value)))
}
func Uniform2uivEXT(location int32, count int32, value *uint32) {
  C.glowUniform2uivEXT(pUniform2uivEXT, (C.GLint)(location), (C.GLsizei)(count), (*C.GLuint)(unsafe.Pointer(value)))
}
func Uniform3d(location int32, x float64, y float64, z float64) {
  C.glowUniform3d(pUniform3d, (C.GLint)(location), (C.GLdouble)(x), (C.GLdouble)(y), (C.GLdouble)(z))
}
func Uniform3dv(location int32, count int32, value *float64) {
  C.glowUniform3dv(pUniform3dv, (C.GLint)(location), (C.GLsizei)(count), (*C.GLdouble)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for the current program object
func Uniform3f(location int32, v0 float32, v1 float32, v2 float32) {
  C.glowUniform3f(pUniform3f, (C.GLint)(location), (C.GLfloat)(v0), (C.GLfloat)(v1), (C.GLfloat)(v2))
}
func Uniform3fARB(location int32, v0 float32, v1 float32, v2 float32) {
  C.glowUniform3fARB(pUniform3fARB, (C.GLint)(location), (C.GLfloat)(v0), (C.GLfloat)(v1), (C.GLfloat)(v2))
}
// Specify the value of a uniform variable for the current program object
func Uniform3fv(location int32, count int32, value *float32) {
  C.glowUniform3fv(pUniform3fv, (C.GLint)(location), (C.GLsizei)(count), (*C.GLfloat)(unsafe.Pointer(value)))
}
func Uniform3fvARB(location int32, count int32, value *float32) {
  C.glowUniform3fvARB(pUniform3fvARB, (C.GLint)(location), (C.GLsizei)(count), (*C.GLfloat)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for the current program object
func Uniform3i(location int32, v0 int32, v1 int32, v2 int32) {
  C.glowUniform3i(pUniform3i, (C.GLint)(location), (C.GLint)(v0), (C.GLint)(v1), (C.GLint)(v2))
}
func Uniform3i64NV(location int32, x int64, y int64, z int64) {
  C.glowUniform3i64NV(pUniform3i64NV, (C.GLint)(location), (C.GLint64EXT)(x), (C.GLint64EXT)(y), (C.GLint64EXT)(z))
}
func Uniform3i64vNV(location int32, count int32, value *int64) {
  C.glowUniform3i64vNV(pUniform3i64vNV, (C.GLint)(location), (C.GLsizei)(count), (*C.GLint64EXT)(unsafe.Pointer(value)))
}
func Uniform3iARB(location int32, v0 int32, v1 int32, v2 int32) {
  C.glowUniform3iARB(pUniform3iARB, (C.GLint)(location), (C.GLint)(v0), (C.GLint)(v1), (C.GLint)(v2))
}
// Specify the value of a uniform variable for the current program object
func Uniform3iv(location int32, count int32, value *int32) {
  C.glowUniform3iv(pUniform3iv, (C.GLint)(location), (C.GLsizei)(count), (*C.GLint)(unsafe.Pointer(value)))
}
func Uniform3ivARB(location int32, count int32, value *int32) {
  C.glowUniform3ivARB(pUniform3ivARB, (C.GLint)(location), (C.GLsizei)(count), (*C.GLint)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for the current program object
func Uniform3ui(location int32, v0 uint32, v1 uint32, v2 uint32) {
  C.glowUniform3ui(pUniform3ui, (C.GLint)(location), (C.GLuint)(v0), (C.GLuint)(v1), (C.GLuint)(v2))
}
func Uniform3ui64NV(location int32, x uint64, y uint64, z uint64) {
  C.glowUniform3ui64NV(pUniform3ui64NV, (C.GLint)(location), (C.GLuint64EXT)(x), (C.GLuint64EXT)(y), (C.GLuint64EXT)(z))
}
func Uniform3ui64vNV(location int32, count int32, value *uint64) {
  C.glowUniform3ui64vNV(pUniform3ui64vNV, (C.GLint)(location), (C.GLsizei)(count), (*C.GLuint64EXT)(unsafe.Pointer(value)))
}
func Uniform3uiEXT(location int32, v0 uint32, v1 uint32, v2 uint32) {
  C.glowUniform3uiEXT(pUniform3uiEXT, (C.GLint)(location), (C.GLuint)(v0), (C.GLuint)(v1), (C.GLuint)(v2))
}
// Specify the value of a uniform variable for the current program object
func Uniform3uiv(location int32, count int32, value *uint32) {
  C.glowUniform3uiv(pUniform3uiv, (C.GLint)(location), (C.GLsizei)(count), (*C.GLuint)(unsafe.Pointer(value)))
}
func Uniform3uivEXT(location int32, count int32, value *uint32) {
  C.glowUniform3uivEXT(pUniform3uivEXT, (C.GLint)(location), (C.GLsizei)(count), (*C.GLuint)(unsafe.Pointer(value)))
}
func Uniform4d(location int32, x float64, y float64, z float64, w float64) {
  C.glowUniform4d(pUniform4d, (C.GLint)(location), (C.GLdouble)(x), (C.GLdouble)(y), (C.GLdouble)(z), (C.GLdouble)(w))
}
func Uniform4dv(location int32, count int32, value *float64) {
  C.glowUniform4dv(pUniform4dv, (C.GLint)(location), (C.GLsizei)(count), (*C.GLdouble)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for the current program object
func Uniform4f(location int32, v0 float32, v1 float32, v2 float32, v3 float32) {
  C.glowUniform4f(pUniform4f, (C.GLint)(location), (C.GLfloat)(v0), (C.GLfloat)(v1), (C.GLfloat)(v2), (C.GLfloat)(v3))
}
func Uniform4fARB(location int32, v0 float32, v1 float32, v2 float32, v3 float32) {
  C.glowUniform4fARB(pUniform4fARB, (C.GLint)(location), (C.GLfloat)(v0), (C.GLfloat)(v1), (C.GLfloat)(v2), (C.GLfloat)(v3))
}
// Specify the value of a uniform variable for the current program object
func Uniform4fv(location int32, count int32, value *float32) {
  C.glowUniform4fv(pUniform4fv, (C.GLint)(location), (C.GLsizei)(count), (*C.GLfloat)(unsafe.Pointer(value)))
}
func Uniform4fvARB(location int32, count int32, value *float32) {
  C.glowUniform4fvARB(pUniform4fvARB, (C.GLint)(location), (C.GLsizei)(count), (*C.GLfloat)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for the current program object
func Uniform4i(location int32, v0 int32, v1 int32, v2 int32, v3 int32) {
  C.glowUniform4i(pUniform4i, (C.GLint)(location), (C.GLint)(v0), (C.GLint)(v1), (C.GLint)(v2), (C.GLint)(v3))
}
func Uniform4i64NV(location int32, x int64, y int64, z int64, w int64) {
  C.glowUniform4i64NV(pUniform4i64NV, (C.GLint)(location), (C.GLint64EXT)(x), (C.GLint64EXT)(y), (C.GLint64EXT)(z), (C.GLint64EXT)(w))
}
func Uniform4i64vNV(location int32, count int32, value *int64) {
  C.glowUniform4i64vNV(pUniform4i64vNV, (C.GLint)(location), (C.GLsizei)(count), (*C.GLint64EXT)(unsafe.Pointer(value)))
}
func Uniform4iARB(location int32, v0 int32, v1 int32, v2 int32, v3 int32) {
  C.glowUniform4iARB(pUniform4iARB, (C.GLint)(location), (C.GLint)(v0), (C.GLint)(v1), (C.GLint)(v2), (C.GLint)(v3))
}
// Specify the value of a uniform variable for the current program object
func Uniform4iv(location int32, count int32, value *int32) {
  C.glowUniform4iv(pUniform4iv, (C.GLint)(location), (C.GLsizei)(count), (*C.GLint)(unsafe.Pointer(value)))
}
func Uniform4ivARB(location int32, count int32, value *int32) {
  C.glowUniform4ivARB(pUniform4ivARB, (C.GLint)(location), (C.GLsizei)(count), (*C.GLint)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for the current program object
func Uniform4ui(location int32, v0 uint32, v1 uint32, v2 uint32, v3 uint32) {
  C.glowUniform4ui(pUniform4ui, (C.GLint)(location), (C.GLuint)(v0), (C.GLuint)(v1), (C.GLuint)(v2), (C.GLuint)(v3))
}
func Uniform4ui64NV(location int32, x uint64, y uint64, z uint64, w uint64) {
  C.glowUniform4ui64NV(pUniform4ui64NV, (C.GLint)(location), (C.GLuint64EXT)(x), (C.GLuint64EXT)(y), (C.GLuint64EXT)(z), (C.GLuint64EXT)(w))
}
func Uniform4ui64vNV(location int32, count int32, value *uint64) {
  C.glowUniform4ui64vNV(pUniform4ui64vNV, (C.GLint)(location), (C.GLsizei)(count), (*C.GLuint64EXT)(unsafe.Pointer(value)))
}
func Uniform4uiEXT(location int32, v0 uint32, v1 uint32, v2 uint32, v3 uint32) {
  C.glowUniform4uiEXT(pUniform4uiEXT, (C.GLint)(location), (C.GLuint)(v0), (C.GLuint)(v1), (C.GLuint)(v2), (C.GLuint)(v3))
}
// Specify the value of a uniform variable for the current program object
func Uniform4uiv(location int32, count int32, value *uint32) {
  C.glowUniform4uiv(pUniform4uiv, (C.GLint)(location), (C.GLsizei)(count), (*C.GLuint)(unsafe.Pointer(value)))
}
func Uniform4uivEXT(location int32, count int32, value *uint32) {
  C.glowUniform4uivEXT(pUniform4uivEXT, (C.GLint)(location), (C.GLsizei)(count), (*C.GLuint)(unsafe.Pointer(value)))
}
// assign a binding point to an active uniform block
func UniformBlockBinding(program uint32, uniformBlockIndex uint32, uniformBlockBinding uint32) {
  C.glowUniformBlockBinding(pUniformBlockBinding, (C.GLuint)(program), (C.GLuint)(uniformBlockIndex), (C.GLuint)(uniformBlockBinding))
}
func UniformBufferEXT(program uint32, location int32, buffer uint32) {
  C.glowUniformBufferEXT(pUniformBufferEXT, (C.GLuint)(program), (C.GLint)(location), (C.GLuint)(buffer))
}
func UniformHandleui64ARB(location int32, value uint64) {
  C.glowUniformHandleui64ARB(pUniformHandleui64ARB, (C.GLint)(location), (C.GLuint64)(value))
}
func UniformHandleui64NV(location int32, value uint64) {
  C.glowUniformHandleui64NV(pUniformHandleui64NV, (C.GLint)(location), (C.GLuint64)(value))
}
func UniformHandleui64vARB(location int32, count int32, value *uint64) {
  C.glowUniformHandleui64vARB(pUniformHandleui64vARB, (C.GLint)(location), (C.GLsizei)(count), (*C.GLuint64)(unsafe.Pointer(value)))
}
func UniformHandleui64vNV(location int32, count int32, value *uint64) {
  C.glowUniformHandleui64vNV(pUniformHandleui64vNV, (C.GLint)(location), (C.GLsizei)(count), (*C.GLuint64)(unsafe.Pointer(value)))
}
func UniformMatrix2dv(location int32, count int32, transpose bool, value *float64) {
  C.glowUniformMatrix2dv(pUniformMatrix2dv, (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLdouble)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for the current program object
func UniformMatrix2fv(location int32, count int32, transpose bool, value *float32) {
  C.glowUniformMatrix2fv(pUniformMatrix2fv, (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLfloat)(unsafe.Pointer(value)))
}
func UniformMatrix2fvARB(location int32, count int32, transpose bool, value *float32) {
  C.glowUniformMatrix2fvARB(pUniformMatrix2fvARB, (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLfloat)(unsafe.Pointer(value)))
}
func UniformMatrix2x3dv(location int32, count int32, transpose bool, value *float64) {
  C.glowUniformMatrix2x3dv(pUniformMatrix2x3dv, (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLdouble)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for the current program object
func UniformMatrix2x3fv(location int32, count int32, transpose bool, value *float32) {
  C.glowUniformMatrix2x3fv(pUniformMatrix2x3fv, (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLfloat)(unsafe.Pointer(value)))
}
func UniformMatrix2x4dv(location int32, count int32, transpose bool, value *float64) {
  C.glowUniformMatrix2x4dv(pUniformMatrix2x4dv, (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLdouble)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for the current program object
func UniformMatrix2x4fv(location int32, count int32, transpose bool, value *float32) {
  C.glowUniformMatrix2x4fv(pUniformMatrix2x4fv, (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLfloat)(unsafe.Pointer(value)))
}
func UniformMatrix3dv(location int32, count int32, transpose bool, value *float64) {
  C.glowUniformMatrix3dv(pUniformMatrix3dv, (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLdouble)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for the current program object
func UniformMatrix3fv(location int32, count int32, transpose bool, value *float32) {
  C.glowUniformMatrix3fv(pUniformMatrix3fv, (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLfloat)(unsafe.Pointer(value)))
}
func UniformMatrix3fvARB(location int32, count int32, transpose bool, value *float32) {
  C.glowUniformMatrix3fvARB(pUniformMatrix3fvARB, (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLfloat)(unsafe.Pointer(value)))
}
func UniformMatrix3x2dv(location int32, count int32, transpose bool, value *float64) {
  C.glowUniformMatrix3x2dv(pUniformMatrix3x2dv, (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLdouble)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for the current program object
func UniformMatrix3x2fv(location int32, count int32, transpose bool, value *float32) {
  C.glowUniformMatrix3x2fv(pUniformMatrix3x2fv, (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLfloat)(unsafe.Pointer(value)))
}
func UniformMatrix3x4dv(location int32, count int32, transpose bool, value *float64) {
  C.glowUniformMatrix3x4dv(pUniformMatrix3x4dv, (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLdouble)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for the current program object
func UniformMatrix3x4fv(location int32, count int32, transpose bool, value *float32) {
  C.glowUniformMatrix3x4fv(pUniformMatrix3x4fv, (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLfloat)(unsafe.Pointer(value)))
}
func UniformMatrix4dv(location int32, count int32, transpose bool, value *float64) {
  C.glowUniformMatrix4dv(pUniformMatrix4dv, (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLdouble)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for the current program object
func UniformMatrix4fv(location int32, count int32, transpose bool, value *float32) {
  C.glowUniformMatrix4fv(pUniformMatrix4fv, (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLfloat)(unsafe.Pointer(value)))
}
func UniformMatrix4fvARB(location int32, count int32, transpose bool, value *float32) {
  C.glowUniformMatrix4fvARB(pUniformMatrix4fvARB, (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLfloat)(unsafe.Pointer(value)))
}
func UniformMatrix4x2dv(location int32, count int32, transpose bool, value *float64) {
  C.glowUniformMatrix4x2dv(pUniformMatrix4x2dv, (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLdouble)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for the current program object
func UniformMatrix4x2fv(location int32, count int32, transpose bool, value *float32) {
  C.glowUniformMatrix4x2fv(pUniformMatrix4x2fv, (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLfloat)(unsafe.Pointer(value)))
}
func UniformMatrix4x3dv(location int32, count int32, transpose bool, value *float64) {
  C.glowUniformMatrix4x3dv(pUniformMatrix4x3dv, (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLdouble)(unsafe.Pointer(value)))
}
// Specify the value of a uniform variable for the current program object
func UniformMatrix4x3fv(location int32, count int32, transpose bool, value *float32) {
  C.glowUniformMatrix4x3fv(pUniformMatrix4x3fv, (C.GLint)(location), (C.GLsizei)(count), (C.GLboolean)(boolToInt(transpose)), (*C.GLfloat)(unsafe.Pointer(value)))
}
func UniformSubroutinesuiv(shadertype uint32, count int32, indices *uint32) {
  C.glowUniformSubroutinesuiv(pUniformSubroutinesuiv, (C.GLenum)(shadertype), (C.GLsizei)(count), (*C.GLuint)(unsafe.Pointer(indices)))
}
func Uniformui64NV(location int32, value uint64) {
  C.glowUniformui64NV(pUniformui64NV, (C.GLint)(location), (C.GLuint64EXT)(value))
}
func Uniformui64vNV(location int32, count int32, value *uint64) {
  C.glowUniformui64vNV(pUniformui64vNV, (C.GLint)(location), (C.GLsizei)(count), (*C.GLuint64EXT)(unsafe.Pointer(value)))
}
func UnlockArraysEXT() {
  C.glowUnlockArraysEXT(pUnlockArraysEXT)
}
func UnmapBuffer(target uint32) bool {
  ret := C.glowUnmapBuffer(pUnmapBuffer, (C.GLenum)(target))
  return ret == TRUE
}
func UnmapBufferARB(target uint32) bool {
  ret := C.glowUnmapBufferARB(pUnmapBufferARB, (C.GLenum)(target))
  return ret == TRUE
}
func UnmapNamedBufferEXT(buffer uint32) bool {
  ret := C.glowUnmapNamedBufferEXT(pUnmapNamedBufferEXT, (C.GLuint)(buffer))
  return ret == TRUE
}
func UnmapObjectBufferATI(buffer uint32) {
  C.glowUnmapObjectBufferATI(pUnmapObjectBufferATI, (C.GLuint)(buffer))
}
func UnmapTexture2DINTEL(texture uint32, level int32) {
  C.glowUnmapTexture2DINTEL(pUnmapTexture2DINTEL, (C.GLuint)(texture), (C.GLint)(level))
}
func UpdateObjectBufferATI(buffer uint32, offset uint32, size int32, pointer unsafe.Pointer, preserve uint32) {
  C.glowUpdateObjectBufferATI(pUpdateObjectBufferATI, (C.GLuint)(buffer), (C.GLuint)(offset), (C.GLsizei)(size), pointer, (C.GLenum)(preserve))
}
// Installs a program object as part of current rendering state
func UseProgram(program uint32) {
  C.glowUseProgram(pUseProgram, (C.GLuint)(program))
}
func UseProgramObjectARB(programObj uintptr) {
  C.glowUseProgramObjectARB(pUseProgramObjectARB, (C.GLhandleARB)(programObj))
}
// bind stages of a program object to a program pipeline
func UseProgramStages(pipeline uint32, stages uint32, program uint32) {
  C.glowUseProgramStages(pUseProgramStages, (C.GLuint)(pipeline), (C.GLbitfield)(stages), (C.GLuint)(program))
}
func UseProgramStagesEXT(pipeline uint32, stages uint32, program uint32) {
  C.glowUseProgramStagesEXT(pUseProgramStagesEXT, (C.GLuint)(pipeline), (C.GLbitfield)(stages), (C.GLuint)(program))
}
func UseShaderProgramEXT(xtype uint32, program uint32) {
  C.glowUseShaderProgramEXT(pUseShaderProgramEXT, (C.GLenum)(xtype), (C.GLuint)(program))
}
func VDPAUFiniNV() {
  C.glowVDPAUFiniNV(pVDPAUFiniNV)
}
func VDPAUGetSurfaceivNV(surface uintptr, pname uint32, bufSize int32, length *int32, values *int32) {
  C.glowVDPAUGetSurfaceivNV(pVDPAUGetSurfaceivNV, (C.GLvdpauSurfaceNV)(surface), (C.GLenum)(pname), (C.GLsizei)(bufSize), (*C.GLsizei)(unsafe.Pointer(length)), (*C.GLint)(unsafe.Pointer(values)))
}
func VDPAUInitNV(vdpDevice unsafe.Pointer, getProcAddress unsafe.Pointer) {
  C.glowVDPAUInitNV(pVDPAUInitNV, vdpDevice, getProcAddress)
}
func VDPAUIsSurfaceNV(surface uintptr) bool {
  ret := C.glowVDPAUIsSurfaceNV(pVDPAUIsSurfaceNV, (C.GLvdpauSurfaceNV)(surface))
  return ret == TRUE
}
func VDPAUMapSurfacesNV(numSurfaces int32, surfaces *uintptr) {
  C.glowVDPAUMapSurfacesNV(pVDPAUMapSurfacesNV, (C.GLsizei)(numSurfaces), (*C.GLvdpauSurfaceNV)(unsafe.Pointer(surfaces)))
}
func VDPAURegisterOutputSurfaceNV(vdpSurface unsafe.Pointer, target uint32, numTextureNames int32, textureNames *uint32) uintptr {
  ret := C.glowVDPAURegisterOutputSurfaceNV(pVDPAURegisterOutputSurfaceNV, vdpSurface, (C.GLenum)(target), (C.GLsizei)(numTextureNames), (*C.GLuint)(unsafe.Pointer(textureNames)))
  return (uintptr)(ret)
}
func VDPAURegisterVideoSurfaceNV(vdpSurface unsafe.Pointer, target uint32, numTextureNames int32, textureNames *uint32) uintptr {
  ret := C.glowVDPAURegisterVideoSurfaceNV(pVDPAURegisterVideoSurfaceNV, vdpSurface, (C.GLenum)(target), (C.GLsizei)(numTextureNames), (*C.GLuint)(unsafe.Pointer(textureNames)))
  return (uintptr)(ret)
}
func VDPAUSurfaceAccessNV(surface uintptr, access uint32) {
  C.glowVDPAUSurfaceAccessNV(pVDPAUSurfaceAccessNV, (C.GLvdpauSurfaceNV)(surface), (C.GLenum)(access))
}
func VDPAUUnmapSurfacesNV(numSurface int32, surfaces *uintptr) {
  C.glowVDPAUUnmapSurfacesNV(pVDPAUUnmapSurfacesNV, (C.GLsizei)(numSurface), (*C.GLvdpauSurfaceNV)(unsafe.Pointer(surfaces)))
}
func VDPAUUnregisterSurfaceNV(surface uintptr) {
  C.glowVDPAUUnregisterSurfaceNV(pVDPAUUnregisterSurfaceNV, (C.GLvdpauSurfaceNV)(surface))
}
// Validates a program object
func ValidateProgram(program uint32) {
  C.glowValidateProgram(pValidateProgram, (C.GLuint)(program))
}
func ValidateProgramARB(programObj uintptr) {
  C.glowValidateProgramARB(pValidateProgramARB, (C.GLhandleARB)(programObj))
}
// validate a program pipeline object against current GL state
func ValidateProgramPipeline(pipeline uint32) {
  C.glowValidateProgramPipeline(pValidateProgramPipeline, (C.GLuint)(pipeline))
}
func ValidateProgramPipelineEXT(pipeline uint32) {
  C.glowValidateProgramPipelineEXT(pValidateProgramPipelineEXT, (C.GLuint)(pipeline))
}
func VariantArrayObjectATI(id uint32, xtype uint32, stride int32, buffer uint32, offset uint32) {
  C.glowVariantArrayObjectATI(pVariantArrayObjectATI, (C.GLuint)(id), (C.GLenum)(xtype), (C.GLsizei)(stride), (C.GLuint)(buffer), (C.GLuint)(offset))
}
func VariantPointerEXT(id uint32, xtype uint32, stride uint32, addr unsafe.Pointer) {
  C.glowVariantPointerEXT(pVariantPointerEXT, (C.GLuint)(id), (C.GLenum)(xtype), (C.GLuint)(stride), addr)
}
func VariantbvEXT(id uint32, addr *int8) {
  C.glowVariantbvEXT(pVariantbvEXT, (C.GLuint)(id), (*C.GLbyte)(unsafe.Pointer(addr)))
}
func VariantdvEXT(id uint32, addr *float64) {
  C.glowVariantdvEXT(pVariantdvEXT, (C.GLuint)(id), (*C.GLdouble)(unsafe.Pointer(addr)))
}
func VariantfvEXT(id uint32, addr *float32) {
  C.glowVariantfvEXT(pVariantfvEXT, (C.GLuint)(id), (*C.GLfloat)(unsafe.Pointer(addr)))
}
func VariantivEXT(id uint32, addr *int32) {
  C.glowVariantivEXT(pVariantivEXT, (C.GLuint)(id), (*C.GLint)(unsafe.Pointer(addr)))
}
func VariantsvEXT(id uint32, addr *int16) {
  C.glowVariantsvEXT(pVariantsvEXT, (C.GLuint)(id), (*C.GLshort)(unsafe.Pointer(addr)))
}
func VariantubvEXT(id uint32, addr *uint8) {
  C.glowVariantubvEXT(pVariantubvEXT, (C.GLuint)(id), (*C.GLubyte)(unsafe.Pointer(addr)))
}
func VariantuivEXT(id uint32, addr *uint32) {
  C.glowVariantuivEXT(pVariantuivEXT, (C.GLuint)(id), (*C.GLuint)(unsafe.Pointer(addr)))
}
func VariantusvEXT(id uint32, addr *uint16) {
  C.glowVariantusvEXT(pVariantusvEXT, (C.GLuint)(id), (*C.GLushort)(unsafe.Pointer(addr)))
}
func Vertex2bOES(x int8) {
  C.glowVertex2bOES(pVertex2bOES, (C.GLbyte)(x))
}
func Vertex2bvOES(coords *int8) {
  C.glowVertex2bvOES(pVertex2bvOES, (*C.GLbyte)(unsafe.Pointer(coords)))
}
func Vertex2hNV(x uint16, y uint16) {
  C.glowVertex2hNV(pVertex2hNV, (C.GLhalfNV)(x), (C.GLhalfNV)(y))
}
func Vertex2hvNV(v *uint16) {
  C.glowVertex2hvNV(pVertex2hvNV, (*C.GLhalfNV)(unsafe.Pointer(v)))
}
func Vertex2xOES(x int32) {
  C.glowVertex2xOES(pVertex2xOES, (C.GLfixed)(x))
}
func Vertex2xvOES(coords *int32) {
  C.glowVertex2xvOES(pVertex2xvOES, (*C.GLfixed)(unsafe.Pointer(coords)))
}
func Vertex3bOES(x int8, y int8) {
  C.glowVertex3bOES(pVertex3bOES, (C.GLbyte)(x), (C.GLbyte)(y))
}
func Vertex3bvOES(coords *int8) {
  C.glowVertex3bvOES(pVertex3bvOES, (*C.GLbyte)(unsafe.Pointer(coords)))
}
func Vertex3hNV(x uint16, y uint16, z uint16) {
  C.glowVertex3hNV(pVertex3hNV, (C.GLhalfNV)(x), (C.GLhalfNV)(y), (C.GLhalfNV)(z))
}
func Vertex3hvNV(v *uint16) {
  C.glowVertex3hvNV(pVertex3hvNV, (*C.GLhalfNV)(unsafe.Pointer(v)))
}
func Vertex3xOES(x int32, y int32) {
  C.glowVertex3xOES(pVertex3xOES, (C.GLfixed)(x), (C.GLfixed)(y))
}
func Vertex3xvOES(coords *int32) {
  C.glowVertex3xvOES(pVertex3xvOES, (*C.GLfixed)(unsafe.Pointer(coords)))
}
func Vertex4bOES(x int8, y int8, z int8) {
  C.glowVertex4bOES(pVertex4bOES, (C.GLbyte)(x), (C.GLbyte)(y), (C.GLbyte)(z))
}
func Vertex4bvOES(coords *int8) {
  C.glowVertex4bvOES(pVertex4bvOES, (*C.GLbyte)(unsafe.Pointer(coords)))
}
func Vertex4hNV(x uint16, y uint16, z uint16, w uint16) {
  C.glowVertex4hNV(pVertex4hNV, (C.GLhalfNV)(x), (C.GLhalfNV)(y), (C.GLhalfNV)(z), (C.GLhalfNV)(w))
}
func Vertex4hvNV(v *uint16) {
  C.glowVertex4hvNV(pVertex4hvNV, (*C.GLhalfNV)(unsafe.Pointer(v)))
}
func Vertex4xOES(x int32, y int32, z int32) {
  C.glowVertex4xOES(pVertex4xOES, (C.GLfixed)(x), (C.GLfixed)(y), (C.GLfixed)(z))
}
func Vertex4xvOES(coords *int32) {
  C.glowVertex4xvOES(pVertex4xvOES, (*C.GLfixed)(unsafe.Pointer(coords)))
}
func VertexArrayBindVertexBufferEXT(vaobj uint32, bindingindex uint32, buffer uint32, offset int, stride int32) {
  C.glowVertexArrayBindVertexBufferEXT(pVertexArrayBindVertexBufferEXT, (C.GLuint)(vaobj), (C.GLuint)(bindingindex), (C.GLuint)(buffer), (C.GLintptr)(offset), (C.GLsizei)(stride))
}
func VertexArrayColorOffsetEXT(vaobj uint32, buffer uint32, size int32, xtype uint32, stride int32, offset int) {
  C.glowVertexArrayColorOffsetEXT(pVertexArrayColorOffsetEXT, (C.GLuint)(vaobj), (C.GLuint)(buffer), (C.GLint)(size), (C.GLenum)(xtype), (C.GLsizei)(stride), (C.GLintptr)(offset))
}
func VertexArrayEdgeFlagOffsetEXT(vaobj uint32, buffer uint32, stride int32, offset int) {
  C.glowVertexArrayEdgeFlagOffsetEXT(pVertexArrayEdgeFlagOffsetEXT, (C.GLuint)(vaobj), (C.GLuint)(buffer), (C.GLsizei)(stride), (C.GLintptr)(offset))
}
func VertexArrayFogCoordOffsetEXT(vaobj uint32, buffer uint32, xtype uint32, stride int32, offset int) {
  C.glowVertexArrayFogCoordOffsetEXT(pVertexArrayFogCoordOffsetEXT, (C.GLuint)(vaobj), (C.GLuint)(buffer), (C.GLenum)(xtype), (C.GLsizei)(stride), (C.GLintptr)(offset))
}
func VertexArrayIndexOffsetEXT(vaobj uint32, buffer uint32, xtype uint32, stride int32, offset int) {
  C.glowVertexArrayIndexOffsetEXT(pVertexArrayIndexOffsetEXT, (C.GLuint)(vaobj), (C.GLuint)(buffer), (C.GLenum)(xtype), (C.GLsizei)(stride), (C.GLintptr)(offset))
}
func VertexArrayMultiTexCoordOffsetEXT(vaobj uint32, buffer uint32, texunit uint32, size int32, xtype uint32, stride int32, offset int) {
  C.glowVertexArrayMultiTexCoordOffsetEXT(pVertexArrayMultiTexCoordOffsetEXT, (C.GLuint)(vaobj), (C.GLuint)(buffer), (C.GLenum)(texunit), (C.GLint)(size), (C.GLenum)(xtype), (C.GLsizei)(stride), (C.GLintptr)(offset))
}
func VertexArrayNormalOffsetEXT(vaobj uint32, buffer uint32, xtype uint32, stride int32, offset int) {
  C.glowVertexArrayNormalOffsetEXT(pVertexArrayNormalOffsetEXT, (C.GLuint)(vaobj), (C.GLuint)(buffer), (C.GLenum)(xtype), (C.GLsizei)(stride), (C.GLintptr)(offset))
}
func VertexArrayParameteriAPPLE(pname uint32, param int32) {
  C.glowVertexArrayParameteriAPPLE(pVertexArrayParameteriAPPLE, (C.GLenum)(pname), (C.GLint)(param))
}
func VertexArrayRangeAPPLE(length int32, pointer unsafe.Pointer) {
  C.glowVertexArrayRangeAPPLE(pVertexArrayRangeAPPLE, (C.GLsizei)(length), pointer)
}
func VertexArrayRangeNV(length int32, pointer unsafe.Pointer) {
  C.glowVertexArrayRangeNV(pVertexArrayRangeNV, (C.GLsizei)(length), pointer)
}
func VertexArraySecondaryColorOffsetEXT(vaobj uint32, buffer uint32, size int32, xtype uint32, stride int32, offset int) {
  C.glowVertexArraySecondaryColorOffsetEXT(pVertexArraySecondaryColorOffsetEXT, (C.GLuint)(vaobj), (C.GLuint)(buffer), (C.GLint)(size), (C.GLenum)(xtype), (C.GLsizei)(stride), (C.GLintptr)(offset))
}
func VertexArrayTexCoordOffsetEXT(vaobj uint32, buffer uint32, size int32, xtype uint32, stride int32, offset int) {
  C.glowVertexArrayTexCoordOffsetEXT(pVertexArrayTexCoordOffsetEXT, (C.GLuint)(vaobj), (C.GLuint)(buffer), (C.GLint)(size), (C.GLenum)(xtype), (C.GLsizei)(stride), (C.GLintptr)(offset))
}
func VertexArrayVertexAttribBindingEXT(vaobj uint32, attribindex uint32, bindingindex uint32) {
  C.glowVertexArrayVertexAttribBindingEXT(pVertexArrayVertexAttribBindingEXT, (C.GLuint)(vaobj), (C.GLuint)(attribindex), (C.GLuint)(bindingindex))
}
func VertexArrayVertexAttribDivisorEXT(vaobj uint32, index uint32, divisor uint32) {
  C.glowVertexArrayVertexAttribDivisorEXT(pVertexArrayVertexAttribDivisorEXT, (C.GLuint)(vaobj), (C.GLuint)(index), (C.GLuint)(divisor))
}
func VertexArrayVertexAttribFormatEXT(vaobj uint32, attribindex uint32, size int32, xtype uint32, normalized bool, relativeoffset uint32) {
  C.glowVertexArrayVertexAttribFormatEXT(pVertexArrayVertexAttribFormatEXT, (C.GLuint)(vaobj), (C.GLuint)(attribindex), (C.GLint)(size), (C.GLenum)(xtype), (C.GLboolean)(boolToInt(normalized)), (C.GLuint)(relativeoffset))
}
func VertexArrayVertexAttribIFormatEXT(vaobj uint32, attribindex uint32, size int32, xtype uint32, relativeoffset uint32) {
  C.glowVertexArrayVertexAttribIFormatEXT(pVertexArrayVertexAttribIFormatEXT, (C.GLuint)(vaobj), (C.GLuint)(attribindex), (C.GLint)(size), (C.GLenum)(xtype), (C.GLuint)(relativeoffset))
}
func VertexArrayVertexAttribIOffsetEXT(vaobj uint32, buffer uint32, index uint32, size int32, xtype uint32, stride int32, offset int) {
  C.glowVertexArrayVertexAttribIOffsetEXT(pVertexArrayVertexAttribIOffsetEXT, (C.GLuint)(vaobj), (C.GLuint)(buffer), (C.GLuint)(index), (C.GLint)(size), (C.GLenum)(xtype), (C.GLsizei)(stride), (C.GLintptr)(offset))
}
func VertexArrayVertexAttribLFormatEXT(vaobj uint32, attribindex uint32, size int32, xtype uint32, relativeoffset uint32) {
  C.glowVertexArrayVertexAttribLFormatEXT(pVertexArrayVertexAttribLFormatEXT, (C.GLuint)(vaobj), (C.GLuint)(attribindex), (C.GLint)(size), (C.GLenum)(xtype), (C.GLuint)(relativeoffset))
}
func VertexArrayVertexAttribLOffsetEXT(vaobj uint32, buffer uint32, index uint32, size int32, xtype uint32, stride int32, offset int) {
  C.glowVertexArrayVertexAttribLOffsetEXT(pVertexArrayVertexAttribLOffsetEXT, (C.GLuint)(vaobj), (C.GLuint)(buffer), (C.GLuint)(index), (C.GLint)(size), (C.GLenum)(xtype), (C.GLsizei)(stride), (C.GLintptr)(offset))
}
func VertexArrayVertexAttribOffsetEXT(vaobj uint32, buffer uint32, index uint32, size int32, xtype uint32, normalized bool, stride int32, offset int) {
  C.glowVertexArrayVertexAttribOffsetEXT(pVertexArrayVertexAttribOffsetEXT, (C.GLuint)(vaobj), (C.GLuint)(buffer), (C.GLuint)(index), (C.GLint)(size), (C.GLenum)(xtype), (C.GLboolean)(boolToInt(normalized)), (C.GLsizei)(stride), (C.GLintptr)(offset))
}
func VertexArrayVertexBindingDivisorEXT(vaobj uint32, bindingindex uint32, divisor uint32) {
  C.glowVertexArrayVertexBindingDivisorEXT(pVertexArrayVertexBindingDivisorEXT, (C.GLuint)(vaobj), (C.GLuint)(bindingindex), (C.GLuint)(divisor))
}
func VertexArrayVertexOffsetEXT(vaobj uint32, buffer uint32, size int32, xtype uint32, stride int32, offset int) {
  C.glowVertexArrayVertexOffsetEXT(pVertexArrayVertexOffsetEXT, (C.GLuint)(vaobj), (C.GLuint)(buffer), (C.GLint)(size), (C.GLenum)(xtype), (C.GLsizei)(stride), (C.GLintptr)(offset))
}
func VertexAttrib1d(index uint32, x float64) {
  C.glowVertexAttrib1d(pVertexAttrib1d, (C.GLuint)(index), (C.GLdouble)(x))
}
func VertexAttrib1dARB(index uint32, x float64) {
  C.glowVertexAttrib1dARB(pVertexAttrib1dARB, (C.GLuint)(index), (C.GLdouble)(x))
}
func VertexAttrib1dNV(index uint32, x float64) {
  C.glowVertexAttrib1dNV(pVertexAttrib1dNV, (C.GLuint)(index), (C.GLdouble)(x))
}
func VertexAttrib1dv(index uint32, v *float64) {
  C.glowVertexAttrib1dv(pVertexAttrib1dv, (C.GLuint)(index), (*C.GLdouble)(unsafe.Pointer(v)))
}
func VertexAttrib1dvARB(index uint32, v *float64) {
  C.glowVertexAttrib1dvARB(pVertexAttrib1dvARB, (C.GLuint)(index), (*C.GLdouble)(unsafe.Pointer(v)))
}
func VertexAttrib1dvNV(index uint32, v *float64) {
  C.glowVertexAttrib1dvNV(pVertexAttrib1dvNV, (C.GLuint)(index), (*C.GLdouble)(unsafe.Pointer(v)))
}
func VertexAttrib1f(index uint32, x float32) {
  C.glowVertexAttrib1f(pVertexAttrib1f, (C.GLuint)(index), (C.GLfloat)(x))
}
func VertexAttrib1fARB(index uint32, x float32) {
  C.glowVertexAttrib1fARB(pVertexAttrib1fARB, (C.GLuint)(index), (C.GLfloat)(x))
}
func VertexAttrib1fNV(index uint32, x float32) {
  C.glowVertexAttrib1fNV(pVertexAttrib1fNV, (C.GLuint)(index), (C.GLfloat)(x))
}
func VertexAttrib1fv(index uint32, v *float32) {
  C.glowVertexAttrib1fv(pVertexAttrib1fv, (C.GLuint)(index), (*C.GLfloat)(unsafe.Pointer(v)))
}
func VertexAttrib1fvARB(index uint32, v *float32) {
  C.glowVertexAttrib1fvARB(pVertexAttrib1fvARB, (C.GLuint)(index), (*C.GLfloat)(unsafe.Pointer(v)))
}
func VertexAttrib1fvNV(index uint32, v *float32) {
  C.glowVertexAttrib1fvNV(pVertexAttrib1fvNV, (C.GLuint)(index), (*C.GLfloat)(unsafe.Pointer(v)))
}
func VertexAttrib1hNV(index uint32, x uint16) {
  C.glowVertexAttrib1hNV(pVertexAttrib1hNV, (C.GLuint)(index), (C.GLhalfNV)(x))
}
func VertexAttrib1hvNV(index uint32, v *uint16) {
  C.glowVertexAttrib1hvNV(pVertexAttrib1hvNV, (C.GLuint)(index), (*C.GLhalfNV)(unsafe.Pointer(v)))
}
func VertexAttrib1s(index uint32, x int16) {
  C.glowVertexAttrib1s(pVertexAttrib1s, (C.GLuint)(index), (C.GLshort)(x))
}
func VertexAttrib1sARB(index uint32, x int16) {
  C.glowVertexAttrib1sARB(pVertexAttrib1sARB, (C.GLuint)(index), (C.GLshort)(x))
}
func VertexAttrib1sNV(index uint32, x int16) {
  C.glowVertexAttrib1sNV(pVertexAttrib1sNV, (C.GLuint)(index), (C.GLshort)(x))
}
func VertexAttrib1sv(index uint32, v *int16) {
  C.glowVertexAttrib1sv(pVertexAttrib1sv, (C.GLuint)(index), (*C.GLshort)(unsafe.Pointer(v)))
}
func VertexAttrib1svARB(index uint32, v *int16) {
  C.glowVertexAttrib1svARB(pVertexAttrib1svARB, (C.GLuint)(index), (*C.GLshort)(unsafe.Pointer(v)))
}
func VertexAttrib1svNV(index uint32, v *int16) {
  C.glowVertexAttrib1svNV(pVertexAttrib1svNV, (C.GLuint)(index), (*C.GLshort)(unsafe.Pointer(v)))
}
func VertexAttrib2d(index uint32, x float64, y float64) {
  C.glowVertexAttrib2d(pVertexAttrib2d, (C.GLuint)(index), (C.GLdouble)(x), (C.GLdouble)(y))
}
func VertexAttrib2dARB(index uint32, x float64, y float64) {
  C.glowVertexAttrib2dARB(pVertexAttrib2dARB, (C.GLuint)(index), (C.GLdouble)(x), (C.GLdouble)(y))
}
func VertexAttrib2dNV(index uint32, x float64, y float64) {
  C.glowVertexAttrib2dNV(pVertexAttrib2dNV, (C.GLuint)(index), (C.GLdouble)(x), (C.GLdouble)(y))
}
func VertexAttrib2dv(index uint32, v *float64) {
  C.glowVertexAttrib2dv(pVertexAttrib2dv, (C.GLuint)(index), (*C.GLdouble)(unsafe.Pointer(v)))
}
func VertexAttrib2dvARB(index uint32, v *float64) {
  C.glowVertexAttrib2dvARB(pVertexAttrib2dvARB, (C.GLuint)(index), (*C.GLdouble)(unsafe.Pointer(v)))
}
func VertexAttrib2dvNV(index uint32, v *float64) {
  C.glowVertexAttrib2dvNV(pVertexAttrib2dvNV, (C.GLuint)(index), (*C.GLdouble)(unsafe.Pointer(v)))
}
func VertexAttrib2f(index uint32, x float32, y float32) {
  C.glowVertexAttrib2f(pVertexAttrib2f, (C.GLuint)(index), (C.GLfloat)(x), (C.GLfloat)(y))
}
func VertexAttrib2fARB(index uint32, x float32, y float32) {
  C.glowVertexAttrib2fARB(pVertexAttrib2fARB, (C.GLuint)(index), (C.GLfloat)(x), (C.GLfloat)(y))
}
func VertexAttrib2fNV(index uint32, x float32, y float32) {
  C.glowVertexAttrib2fNV(pVertexAttrib2fNV, (C.GLuint)(index), (C.GLfloat)(x), (C.GLfloat)(y))
}
func VertexAttrib2fv(index uint32, v *float32) {
  C.glowVertexAttrib2fv(pVertexAttrib2fv, (C.GLuint)(index), (*C.GLfloat)(unsafe.Pointer(v)))
}
func VertexAttrib2fvARB(index uint32, v *float32) {
  C.glowVertexAttrib2fvARB(pVertexAttrib2fvARB, (C.GLuint)(index), (*C.GLfloat)(unsafe.Pointer(v)))
}
func VertexAttrib2fvNV(index uint32, v *float32) {
  C.glowVertexAttrib2fvNV(pVertexAttrib2fvNV, (C.GLuint)(index), (*C.GLfloat)(unsafe.Pointer(v)))
}
func VertexAttrib2hNV(index uint32, x uint16, y uint16) {
  C.glowVertexAttrib2hNV(pVertexAttrib2hNV, (C.GLuint)(index), (C.GLhalfNV)(x), (C.GLhalfNV)(y))
}
func VertexAttrib2hvNV(index uint32, v *uint16) {
  C.glowVertexAttrib2hvNV(pVertexAttrib2hvNV, (C.GLuint)(index), (*C.GLhalfNV)(unsafe.Pointer(v)))
}
func VertexAttrib2s(index uint32, x int16, y int16) {
  C.glowVertexAttrib2s(pVertexAttrib2s, (C.GLuint)(index), (C.GLshort)(x), (C.GLshort)(y))
}
func VertexAttrib2sARB(index uint32, x int16, y int16) {
  C.glowVertexAttrib2sARB(pVertexAttrib2sARB, (C.GLuint)(index), (C.GLshort)(x), (C.GLshort)(y))
}
func VertexAttrib2sNV(index uint32, x int16, y int16) {
  C.glowVertexAttrib2sNV(pVertexAttrib2sNV, (C.GLuint)(index), (C.GLshort)(x), (C.GLshort)(y))
}
func VertexAttrib2sv(index uint32, v *int16) {
  C.glowVertexAttrib2sv(pVertexAttrib2sv, (C.GLuint)(index), (*C.GLshort)(unsafe.Pointer(v)))
}
func VertexAttrib2svARB(index uint32, v *int16) {
  C.glowVertexAttrib2svARB(pVertexAttrib2svARB, (C.GLuint)(index), (*C.GLshort)(unsafe.Pointer(v)))
}
func VertexAttrib2svNV(index uint32, v *int16) {
  C.glowVertexAttrib2svNV(pVertexAttrib2svNV, (C.GLuint)(index), (*C.GLshort)(unsafe.Pointer(v)))
}
func VertexAttrib3d(index uint32, x float64, y float64, z float64) {
  C.glowVertexAttrib3d(pVertexAttrib3d, (C.GLuint)(index), (C.GLdouble)(x), (C.GLdouble)(y), (C.GLdouble)(z))
}
func VertexAttrib3dARB(index uint32, x float64, y float64, z float64) {
  C.glowVertexAttrib3dARB(pVertexAttrib3dARB, (C.GLuint)(index), (C.GLdouble)(x), (C.GLdouble)(y), (C.GLdouble)(z))
}
func VertexAttrib3dNV(index uint32, x float64, y float64, z float64) {
  C.glowVertexAttrib3dNV(pVertexAttrib3dNV, (C.GLuint)(index), (C.GLdouble)(x), (C.GLdouble)(y), (C.GLdouble)(z))
}
func VertexAttrib3dv(index uint32, v *float64) {
  C.glowVertexAttrib3dv(pVertexAttrib3dv, (C.GLuint)(index), (*C.GLdouble)(unsafe.Pointer(v)))
}
func VertexAttrib3dvARB(index uint32, v *float64) {
  C.glowVertexAttrib3dvARB(pVertexAttrib3dvARB, (C.GLuint)(index), (*C.GLdouble)(unsafe.Pointer(v)))
}
func VertexAttrib3dvNV(index uint32, v *float64) {
  C.glowVertexAttrib3dvNV(pVertexAttrib3dvNV, (C.GLuint)(index), (*C.GLdouble)(unsafe.Pointer(v)))
}
func VertexAttrib3f(index uint32, x float32, y float32, z float32) {
  C.glowVertexAttrib3f(pVertexAttrib3f, (C.GLuint)(index), (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z))
}
func VertexAttrib3fARB(index uint32, x float32, y float32, z float32) {
  C.glowVertexAttrib3fARB(pVertexAttrib3fARB, (C.GLuint)(index), (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z))
}
func VertexAttrib3fNV(index uint32, x float32, y float32, z float32) {
  C.glowVertexAttrib3fNV(pVertexAttrib3fNV, (C.GLuint)(index), (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z))
}
func VertexAttrib3fv(index uint32, v *float32) {
  C.glowVertexAttrib3fv(pVertexAttrib3fv, (C.GLuint)(index), (*C.GLfloat)(unsafe.Pointer(v)))
}
func VertexAttrib3fvARB(index uint32, v *float32) {
  C.glowVertexAttrib3fvARB(pVertexAttrib3fvARB, (C.GLuint)(index), (*C.GLfloat)(unsafe.Pointer(v)))
}
func VertexAttrib3fvNV(index uint32, v *float32) {
  C.glowVertexAttrib3fvNV(pVertexAttrib3fvNV, (C.GLuint)(index), (*C.GLfloat)(unsafe.Pointer(v)))
}
func VertexAttrib3hNV(index uint32, x uint16, y uint16, z uint16) {
  C.glowVertexAttrib3hNV(pVertexAttrib3hNV, (C.GLuint)(index), (C.GLhalfNV)(x), (C.GLhalfNV)(y), (C.GLhalfNV)(z))
}
func VertexAttrib3hvNV(index uint32, v *uint16) {
  C.glowVertexAttrib3hvNV(pVertexAttrib3hvNV, (C.GLuint)(index), (*C.GLhalfNV)(unsafe.Pointer(v)))
}
func VertexAttrib3s(index uint32, x int16, y int16, z int16) {
  C.glowVertexAttrib3s(pVertexAttrib3s, (C.GLuint)(index), (C.GLshort)(x), (C.GLshort)(y), (C.GLshort)(z))
}
func VertexAttrib3sARB(index uint32, x int16, y int16, z int16) {
  C.glowVertexAttrib3sARB(pVertexAttrib3sARB, (C.GLuint)(index), (C.GLshort)(x), (C.GLshort)(y), (C.GLshort)(z))
}
func VertexAttrib3sNV(index uint32, x int16, y int16, z int16) {
  C.glowVertexAttrib3sNV(pVertexAttrib3sNV, (C.GLuint)(index), (C.GLshort)(x), (C.GLshort)(y), (C.GLshort)(z))
}
func VertexAttrib3sv(index uint32, v *int16) {
  C.glowVertexAttrib3sv(pVertexAttrib3sv, (C.GLuint)(index), (*C.GLshort)(unsafe.Pointer(v)))
}
func VertexAttrib3svARB(index uint32, v *int16) {
  C.glowVertexAttrib3svARB(pVertexAttrib3svARB, (C.GLuint)(index), (*C.GLshort)(unsafe.Pointer(v)))
}
func VertexAttrib3svNV(index uint32, v *int16) {
  C.glowVertexAttrib3svNV(pVertexAttrib3svNV, (C.GLuint)(index), (*C.GLshort)(unsafe.Pointer(v)))
}
func VertexAttrib4Nbv(index uint32, v *int8) {
  C.glowVertexAttrib4Nbv(pVertexAttrib4Nbv, (C.GLuint)(index), (*C.GLbyte)(unsafe.Pointer(v)))
}
func VertexAttrib4NbvARB(index uint32, v *int8) {
  C.glowVertexAttrib4NbvARB(pVertexAttrib4NbvARB, (C.GLuint)(index), (*C.GLbyte)(unsafe.Pointer(v)))
}
func VertexAttrib4Niv(index uint32, v *int32) {
  C.glowVertexAttrib4Niv(pVertexAttrib4Niv, (C.GLuint)(index), (*C.GLint)(unsafe.Pointer(v)))
}
func VertexAttrib4NivARB(index uint32, v *int32) {
  C.glowVertexAttrib4NivARB(pVertexAttrib4NivARB, (C.GLuint)(index), (*C.GLint)(unsafe.Pointer(v)))
}
func VertexAttrib4Nsv(index uint32, v *int16) {
  C.glowVertexAttrib4Nsv(pVertexAttrib4Nsv, (C.GLuint)(index), (*C.GLshort)(unsafe.Pointer(v)))
}
func VertexAttrib4NsvARB(index uint32, v *int16) {
  C.glowVertexAttrib4NsvARB(pVertexAttrib4NsvARB, (C.GLuint)(index), (*C.GLshort)(unsafe.Pointer(v)))
}
func VertexAttrib4Nub(index uint32, x uint8, y uint8, z uint8, w uint8) {
  C.glowVertexAttrib4Nub(pVertexAttrib4Nub, (C.GLuint)(index), (C.GLubyte)(x), (C.GLubyte)(y), (C.GLubyte)(z), (C.GLubyte)(w))
}
func VertexAttrib4NubARB(index uint32, x uint8, y uint8, z uint8, w uint8) {
  C.glowVertexAttrib4NubARB(pVertexAttrib4NubARB, (C.GLuint)(index), (C.GLubyte)(x), (C.GLubyte)(y), (C.GLubyte)(z), (C.GLubyte)(w))
}
func VertexAttrib4Nubv(index uint32, v *uint8) {
  C.glowVertexAttrib4Nubv(pVertexAttrib4Nubv, (C.GLuint)(index), (*C.GLubyte)(unsafe.Pointer(v)))
}
func VertexAttrib4NubvARB(index uint32, v *uint8) {
  C.glowVertexAttrib4NubvARB(pVertexAttrib4NubvARB, (C.GLuint)(index), (*C.GLubyte)(unsafe.Pointer(v)))
}
func VertexAttrib4Nuiv(index uint32, v *uint32) {
  C.glowVertexAttrib4Nuiv(pVertexAttrib4Nuiv, (C.GLuint)(index), (*C.GLuint)(unsafe.Pointer(v)))
}
func VertexAttrib4NuivARB(index uint32, v *uint32) {
  C.glowVertexAttrib4NuivARB(pVertexAttrib4NuivARB, (C.GLuint)(index), (*C.GLuint)(unsafe.Pointer(v)))
}
func VertexAttrib4Nusv(index uint32, v *uint16) {
  C.glowVertexAttrib4Nusv(pVertexAttrib4Nusv, (C.GLuint)(index), (*C.GLushort)(unsafe.Pointer(v)))
}
func VertexAttrib4NusvARB(index uint32, v *uint16) {
  C.glowVertexAttrib4NusvARB(pVertexAttrib4NusvARB, (C.GLuint)(index), (*C.GLushort)(unsafe.Pointer(v)))
}
func VertexAttrib4bv(index uint32, v *int8) {
  C.glowVertexAttrib4bv(pVertexAttrib4bv, (C.GLuint)(index), (*C.GLbyte)(unsafe.Pointer(v)))
}
func VertexAttrib4bvARB(index uint32, v *int8) {
  C.glowVertexAttrib4bvARB(pVertexAttrib4bvARB, (C.GLuint)(index), (*C.GLbyte)(unsafe.Pointer(v)))
}
func VertexAttrib4d(index uint32, x float64, y float64, z float64, w float64) {
  C.glowVertexAttrib4d(pVertexAttrib4d, (C.GLuint)(index), (C.GLdouble)(x), (C.GLdouble)(y), (C.GLdouble)(z), (C.GLdouble)(w))
}
func VertexAttrib4dARB(index uint32, x float64, y float64, z float64, w float64) {
  C.glowVertexAttrib4dARB(pVertexAttrib4dARB, (C.GLuint)(index), (C.GLdouble)(x), (C.GLdouble)(y), (C.GLdouble)(z), (C.GLdouble)(w))
}
func VertexAttrib4dNV(index uint32, x float64, y float64, z float64, w float64) {
  C.glowVertexAttrib4dNV(pVertexAttrib4dNV, (C.GLuint)(index), (C.GLdouble)(x), (C.GLdouble)(y), (C.GLdouble)(z), (C.GLdouble)(w))
}
func VertexAttrib4dv(index uint32, v *float64) {
  C.glowVertexAttrib4dv(pVertexAttrib4dv, (C.GLuint)(index), (*C.GLdouble)(unsafe.Pointer(v)))
}
func VertexAttrib4dvARB(index uint32, v *float64) {
  C.glowVertexAttrib4dvARB(pVertexAttrib4dvARB, (C.GLuint)(index), (*C.GLdouble)(unsafe.Pointer(v)))
}
func VertexAttrib4dvNV(index uint32, v *float64) {
  C.glowVertexAttrib4dvNV(pVertexAttrib4dvNV, (C.GLuint)(index), (*C.GLdouble)(unsafe.Pointer(v)))
}
func VertexAttrib4f(index uint32, x float32, y float32, z float32, w float32) {
  C.glowVertexAttrib4f(pVertexAttrib4f, (C.GLuint)(index), (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z), (C.GLfloat)(w))
}
func VertexAttrib4fARB(index uint32, x float32, y float32, z float32, w float32) {
  C.glowVertexAttrib4fARB(pVertexAttrib4fARB, (C.GLuint)(index), (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z), (C.GLfloat)(w))
}
func VertexAttrib4fNV(index uint32, x float32, y float32, z float32, w float32) {
  C.glowVertexAttrib4fNV(pVertexAttrib4fNV, (C.GLuint)(index), (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z), (C.GLfloat)(w))
}
func VertexAttrib4fv(index uint32, v *float32) {
  C.glowVertexAttrib4fv(pVertexAttrib4fv, (C.GLuint)(index), (*C.GLfloat)(unsafe.Pointer(v)))
}
func VertexAttrib4fvARB(index uint32, v *float32) {
  C.glowVertexAttrib4fvARB(pVertexAttrib4fvARB, (C.GLuint)(index), (*C.GLfloat)(unsafe.Pointer(v)))
}
func VertexAttrib4fvNV(index uint32, v *float32) {
  C.glowVertexAttrib4fvNV(pVertexAttrib4fvNV, (C.GLuint)(index), (*C.GLfloat)(unsafe.Pointer(v)))
}
func VertexAttrib4hNV(index uint32, x uint16, y uint16, z uint16, w uint16) {
  C.glowVertexAttrib4hNV(pVertexAttrib4hNV, (C.GLuint)(index), (C.GLhalfNV)(x), (C.GLhalfNV)(y), (C.GLhalfNV)(z), (C.GLhalfNV)(w))
}
func VertexAttrib4hvNV(index uint32, v *uint16) {
  C.glowVertexAttrib4hvNV(pVertexAttrib4hvNV, (C.GLuint)(index), (*C.GLhalfNV)(unsafe.Pointer(v)))
}
func VertexAttrib4iv(index uint32, v *int32) {
  C.glowVertexAttrib4iv(pVertexAttrib4iv, (C.GLuint)(index), (*C.GLint)(unsafe.Pointer(v)))
}
func VertexAttrib4ivARB(index uint32, v *int32) {
  C.glowVertexAttrib4ivARB(pVertexAttrib4ivARB, (C.GLuint)(index), (*C.GLint)(unsafe.Pointer(v)))
}
func VertexAttrib4s(index uint32, x int16, y int16, z int16, w int16) {
  C.glowVertexAttrib4s(pVertexAttrib4s, (C.GLuint)(index), (C.GLshort)(x), (C.GLshort)(y), (C.GLshort)(z), (C.GLshort)(w))
}
func VertexAttrib4sARB(index uint32, x int16, y int16, z int16, w int16) {
  C.glowVertexAttrib4sARB(pVertexAttrib4sARB, (C.GLuint)(index), (C.GLshort)(x), (C.GLshort)(y), (C.GLshort)(z), (C.GLshort)(w))
}
func VertexAttrib4sNV(index uint32, x int16, y int16, z int16, w int16) {
  C.glowVertexAttrib4sNV(pVertexAttrib4sNV, (C.GLuint)(index), (C.GLshort)(x), (C.GLshort)(y), (C.GLshort)(z), (C.GLshort)(w))
}
func VertexAttrib4sv(index uint32, v *int16) {
  C.glowVertexAttrib4sv(pVertexAttrib4sv, (C.GLuint)(index), (*C.GLshort)(unsafe.Pointer(v)))
}
func VertexAttrib4svARB(index uint32, v *int16) {
  C.glowVertexAttrib4svARB(pVertexAttrib4svARB, (C.GLuint)(index), (*C.GLshort)(unsafe.Pointer(v)))
}
func VertexAttrib4svNV(index uint32, v *int16) {
  C.glowVertexAttrib4svNV(pVertexAttrib4svNV, (C.GLuint)(index), (*C.GLshort)(unsafe.Pointer(v)))
}
func VertexAttrib4ubNV(index uint32, x uint8, y uint8, z uint8, w uint8) {
  C.glowVertexAttrib4ubNV(pVertexAttrib4ubNV, (C.GLuint)(index), (C.GLubyte)(x), (C.GLubyte)(y), (C.GLubyte)(z), (C.GLubyte)(w))
}
func VertexAttrib4ubv(index uint32, v *uint8) {
  C.glowVertexAttrib4ubv(pVertexAttrib4ubv, (C.GLuint)(index), (*C.GLubyte)(unsafe.Pointer(v)))
}
func VertexAttrib4ubvARB(index uint32, v *uint8) {
  C.glowVertexAttrib4ubvARB(pVertexAttrib4ubvARB, (C.GLuint)(index), (*C.GLubyte)(unsafe.Pointer(v)))
}
func VertexAttrib4ubvNV(index uint32, v *uint8) {
  C.glowVertexAttrib4ubvNV(pVertexAttrib4ubvNV, (C.GLuint)(index), (*C.GLubyte)(unsafe.Pointer(v)))
}
func VertexAttrib4uiv(index uint32, v *uint32) {
  C.glowVertexAttrib4uiv(pVertexAttrib4uiv, (C.GLuint)(index), (*C.GLuint)(unsafe.Pointer(v)))
}
func VertexAttrib4uivARB(index uint32, v *uint32) {
  C.glowVertexAttrib4uivARB(pVertexAttrib4uivARB, (C.GLuint)(index), (*C.GLuint)(unsafe.Pointer(v)))
}
func VertexAttrib4usv(index uint32, v *uint16) {
  C.glowVertexAttrib4usv(pVertexAttrib4usv, (C.GLuint)(index), (*C.GLushort)(unsafe.Pointer(v)))
}
func VertexAttrib4usvARB(index uint32, v *uint16) {
  C.glowVertexAttrib4usvARB(pVertexAttrib4usvARB, (C.GLuint)(index), (*C.GLushort)(unsafe.Pointer(v)))
}
func VertexAttribArrayObjectATI(index uint32, size int32, xtype uint32, normalized bool, stride int32, buffer uint32, offset uint32) {
  C.glowVertexAttribArrayObjectATI(pVertexAttribArrayObjectATI, (C.GLuint)(index), (C.GLint)(size), (C.GLenum)(xtype), (C.GLboolean)(boolToInt(normalized)), (C.GLsizei)(stride), (C.GLuint)(buffer), (C.GLuint)(offset))
}
// associate a vertex attribute and a vertex buffer binding
func VertexAttribBinding(attribindex uint32, bindingindex uint32) {
  C.glowVertexAttribBinding(pVertexAttribBinding, (C.GLuint)(attribindex), (C.GLuint)(bindingindex))
}
// modify the rate at which generic vertex attributes advance during instanced rendering
func VertexAttribDivisor(index uint32, divisor uint32) {
  C.glowVertexAttribDivisor(pVertexAttribDivisor, (C.GLuint)(index), (C.GLuint)(divisor))
}
func VertexAttribDivisorARB(index uint32, divisor uint32) {
  C.glowVertexAttribDivisorARB(pVertexAttribDivisorARB, (C.GLuint)(index), (C.GLuint)(divisor))
}
// specify the organization of vertex arrays
func VertexAttribFormat(attribindex uint32, size int32, xtype uint32, normalized bool, relativeoffset uint32) {
  C.glowVertexAttribFormat(pVertexAttribFormat, (C.GLuint)(attribindex), (C.GLint)(size), (C.GLenum)(xtype), (C.GLboolean)(boolToInt(normalized)), (C.GLuint)(relativeoffset))
}
func VertexAttribFormatNV(index uint32, size int32, xtype uint32, normalized bool, stride int32) {
  C.glowVertexAttribFormatNV(pVertexAttribFormatNV, (C.GLuint)(index), (C.GLint)(size), (C.GLenum)(xtype), (C.GLboolean)(boolToInt(normalized)), (C.GLsizei)(stride))
}
func VertexAttribI1i(index uint32, x int32) {
  C.glowVertexAttribI1i(pVertexAttribI1i, (C.GLuint)(index), (C.GLint)(x))
}
func VertexAttribI1iEXT(index uint32, x int32) {
  C.glowVertexAttribI1iEXT(pVertexAttribI1iEXT, (C.GLuint)(index), (C.GLint)(x))
}
func VertexAttribI1iv(index uint32, v *int32) {
  C.glowVertexAttribI1iv(pVertexAttribI1iv, (C.GLuint)(index), (*C.GLint)(unsafe.Pointer(v)))
}
func VertexAttribI1ivEXT(index uint32, v *int32) {
  C.glowVertexAttribI1ivEXT(pVertexAttribI1ivEXT, (C.GLuint)(index), (*C.GLint)(unsafe.Pointer(v)))
}
func VertexAttribI1ui(index uint32, x uint32) {
  C.glowVertexAttribI1ui(pVertexAttribI1ui, (C.GLuint)(index), (C.GLuint)(x))
}
func VertexAttribI1uiEXT(index uint32, x uint32) {
  C.glowVertexAttribI1uiEXT(pVertexAttribI1uiEXT, (C.GLuint)(index), (C.GLuint)(x))
}
func VertexAttribI1uiv(index uint32, v *uint32) {
  C.glowVertexAttribI1uiv(pVertexAttribI1uiv, (C.GLuint)(index), (*C.GLuint)(unsafe.Pointer(v)))
}
func VertexAttribI1uivEXT(index uint32, v *uint32) {
  C.glowVertexAttribI1uivEXT(pVertexAttribI1uivEXT, (C.GLuint)(index), (*C.GLuint)(unsafe.Pointer(v)))
}
func VertexAttribI2i(index uint32, x int32, y int32) {
  C.glowVertexAttribI2i(pVertexAttribI2i, (C.GLuint)(index), (C.GLint)(x), (C.GLint)(y))
}
func VertexAttribI2iEXT(index uint32, x int32, y int32) {
  C.glowVertexAttribI2iEXT(pVertexAttribI2iEXT, (C.GLuint)(index), (C.GLint)(x), (C.GLint)(y))
}
func VertexAttribI2iv(index uint32, v *int32) {
  C.glowVertexAttribI2iv(pVertexAttribI2iv, (C.GLuint)(index), (*C.GLint)(unsafe.Pointer(v)))
}
func VertexAttribI2ivEXT(index uint32, v *int32) {
  C.glowVertexAttribI2ivEXT(pVertexAttribI2ivEXT, (C.GLuint)(index), (*C.GLint)(unsafe.Pointer(v)))
}
func VertexAttribI2ui(index uint32, x uint32, y uint32) {
  C.glowVertexAttribI2ui(pVertexAttribI2ui, (C.GLuint)(index), (C.GLuint)(x), (C.GLuint)(y))
}
func VertexAttribI2uiEXT(index uint32, x uint32, y uint32) {
  C.glowVertexAttribI2uiEXT(pVertexAttribI2uiEXT, (C.GLuint)(index), (C.GLuint)(x), (C.GLuint)(y))
}
func VertexAttribI2uiv(index uint32, v *uint32) {
  C.glowVertexAttribI2uiv(pVertexAttribI2uiv, (C.GLuint)(index), (*C.GLuint)(unsafe.Pointer(v)))
}
func VertexAttribI2uivEXT(index uint32, v *uint32) {
  C.glowVertexAttribI2uivEXT(pVertexAttribI2uivEXT, (C.GLuint)(index), (*C.GLuint)(unsafe.Pointer(v)))
}
func VertexAttribI3i(index uint32, x int32, y int32, z int32) {
  C.glowVertexAttribI3i(pVertexAttribI3i, (C.GLuint)(index), (C.GLint)(x), (C.GLint)(y), (C.GLint)(z))
}
func VertexAttribI3iEXT(index uint32, x int32, y int32, z int32) {
  C.glowVertexAttribI3iEXT(pVertexAttribI3iEXT, (C.GLuint)(index), (C.GLint)(x), (C.GLint)(y), (C.GLint)(z))
}
func VertexAttribI3iv(index uint32, v *int32) {
  C.glowVertexAttribI3iv(pVertexAttribI3iv, (C.GLuint)(index), (*C.GLint)(unsafe.Pointer(v)))
}
func VertexAttribI3ivEXT(index uint32, v *int32) {
  C.glowVertexAttribI3ivEXT(pVertexAttribI3ivEXT, (C.GLuint)(index), (*C.GLint)(unsafe.Pointer(v)))
}
func VertexAttribI3ui(index uint32, x uint32, y uint32, z uint32) {
  C.glowVertexAttribI3ui(pVertexAttribI3ui, (C.GLuint)(index), (C.GLuint)(x), (C.GLuint)(y), (C.GLuint)(z))
}
func VertexAttribI3uiEXT(index uint32, x uint32, y uint32, z uint32) {
  C.glowVertexAttribI3uiEXT(pVertexAttribI3uiEXT, (C.GLuint)(index), (C.GLuint)(x), (C.GLuint)(y), (C.GLuint)(z))
}
func VertexAttribI3uiv(index uint32, v *uint32) {
  C.glowVertexAttribI3uiv(pVertexAttribI3uiv, (C.GLuint)(index), (*C.GLuint)(unsafe.Pointer(v)))
}
func VertexAttribI3uivEXT(index uint32, v *uint32) {
  C.glowVertexAttribI3uivEXT(pVertexAttribI3uivEXT, (C.GLuint)(index), (*C.GLuint)(unsafe.Pointer(v)))
}
func VertexAttribI4bv(index uint32, v *int8) {
  C.glowVertexAttribI4bv(pVertexAttribI4bv, (C.GLuint)(index), (*C.GLbyte)(unsafe.Pointer(v)))
}
func VertexAttribI4bvEXT(index uint32, v *int8) {
  C.glowVertexAttribI4bvEXT(pVertexAttribI4bvEXT, (C.GLuint)(index), (*C.GLbyte)(unsafe.Pointer(v)))
}
func VertexAttribI4i(index uint32, x int32, y int32, z int32, w int32) {
  C.glowVertexAttribI4i(pVertexAttribI4i, (C.GLuint)(index), (C.GLint)(x), (C.GLint)(y), (C.GLint)(z), (C.GLint)(w))
}
func VertexAttribI4iEXT(index uint32, x int32, y int32, z int32, w int32) {
  C.glowVertexAttribI4iEXT(pVertexAttribI4iEXT, (C.GLuint)(index), (C.GLint)(x), (C.GLint)(y), (C.GLint)(z), (C.GLint)(w))
}
func VertexAttribI4iv(index uint32, v *int32) {
  C.glowVertexAttribI4iv(pVertexAttribI4iv, (C.GLuint)(index), (*C.GLint)(unsafe.Pointer(v)))
}
func VertexAttribI4ivEXT(index uint32, v *int32) {
  C.glowVertexAttribI4ivEXT(pVertexAttribI4ivEXT, (C.GLuint)(index), (*C.GLint)(unsafe.Pointer(v)))
}
func VertexAttribI4sv(index uint32, v *int16) {
  C.glowVertexAttribI4sv(pVertexAttribI4sv, (C.GLuint)(index), (*C.GLshort)(unsafe.Pointer(v)))
}
func VertexAttribI4svEXT(index uint32, v *int16) {
  C.glowVertexAttribI4svEXT(pVertexAttribI4svEXT, (C.GLuint)(index), (*C.GLshort)(unsafe.Pointer(v)))
}
func VertexAttribI4ubv(index uint32, v *uint8) {
  C.glowVertexAttribI4ubv(pVertexAttribI4ubv, (C.GLuint)(index), (*C.GLubyte)(unsafe.Pointer(v)))
}
func VertexAttribI4ubvEXT(index uint32, v *uint8) {
  C.glowVertexAttribI4ubvEXT(pVertexAttribI4ubvEXT, (C.GLuint)(index), (*C.GLubyte)(unsafe.Pointer(v)))
}
func VertexAttribI4ui(index uint32, x uint32, y uint32, z uint32, w uint32) {
  C.glowVertexAttribI4ui(pVertexAttribI4ui, (C.GLuint)(index), (C.GLuint)(x), (C.GLuint)(y), (C.GLuint)(z), (C.GLuint)(w))
}
func VertexAttribI4uiEXT(index uint32, x uint32, y uint32, z uint32, w uint32) {
  C.glowVertexAttribI4uiEXT(pVertexAttribI4uiEXT, (C.GLuint)(index), (C.GLuint)(x), (C.GLuint)(y), (C.GLuint)(z), (C.GLuint)(w))
}
func VertexAttribI4uiv(index uint32, v *uint32) {
  C.glowVertexAttribI4uiv(pVertexAttribI4uiv, (C.GLuint)(index), (*C.GLuint)(unsafe.Pointer(v)))
}
func VertexAttribI4uivEXT(index uint32, v *uint32) {
  C.glowVertexAttribI4uivEXT(pVertexAttribI4uivEXT, (C.GLuint)(index), (*C.GLuint)(unsafe.Pointer(v)))
}
func VertexAttribI4usv(index uint32, v *uint16) {
  C.glowVertexAttribI4usv(pVertexAttribI4usv, (C.GLuint)(index), (*C.GLushort)(unsafe.Pointer(v)))
}
func VertexAttribI4usvEXT(index uint32, v *uint16) {
  C.glowVertexAttribI4usvEXT(pVertexAttribI4usvEXT, (C.GLuint)(index), (*C.GLushort)(unsafe.Pointer(v)))
}
func VertexAttribIFormat(attribindex uint32, size int32, xtype uint32, relativeoffset uint32) {
  C.glowVertexAttribIFormat(pVertexAttribIFormat, (C.GLuint)(attribindex), (C.GLint)(size), (C.GLenum)(xtype), (C.GLuint)(relativeoffset))
}
func VertexAttribIFormatNV(index uint32, size int32, xtype uint32, stride int32) {
  C.glowVertexAttribIFormatNV(pVertexAttribIFormatNV, (C.GLuint)(index), (C.GLint)(size), (C.GLenum)(xtype), (C.GLsizei)(stride))
}
func VertexAttribIPointer(index uint32, size int32, xtype uint32, stride int32, pointer unsafe.Pointer) {
  C.glowVertexAttribIPointer(pVertexAttribIPointer, (C.GLuint)(index), (C.GLint)(size), (C.GLenum)(xtype), (C.GLsizei)(stride), pointer)
}
func VertexAttribIPointerEXT(index uint32, size int32, xtype uint32, stride int32, pointer unsafe.Pointer) {
  C.glowVertexAttribIPointerEXT(pVertexAttribIPointerEXT, (C.GLuint)(index), (C.GLint)(size), (C.GLenum)(xtype), (C.GLsizei)(stride), pointer)
}
func VertexAttribL1d(index uint32, x float64) {
  C.glowVertexAttribL1d(pVertexAttribL1d, (C.GLuint)(index), (C.GLdouble)(x))
}
func VertexAttribL1dEXT(index uint32, x float64) {
  C.glowVertexAttribL1dEXT(pVertexAttribL1dEXT, (C.GLuint)(index), (C.GLdouble)(x))
}
func VertexAttribL1dv(index uint32, v *float64) {
  C.glowVertexAttribL1dv(pVertexAttribL1dv, (C.GLuint)(index), (*C.GLdouble)(unsafe.Pointer(v)))
}
func VertexAttribL1dvEXT(index uint32, v *float64) {
  C.glowVertexAttribL1dvEXT(pVertexAttribL1dvEXT, (C.GLuint)(index), (*C.GLdouble)(unsafe.Pointer(v)))
}
func VertexAttribL1i64NV(index uint32, x int64) {
  C.glowVertexAttribL1i64NV(pVertexAttribL1i64NV, (C.GLuint)(index), (C.GLint64EXT)(x))
}
func VertexAttribL1i64vNV(index uint32, v *int64) {
  C.glowVertexAttribL1i64vNV(pVertexAttribL1i64vNV, (C.GLuint)(index), (*C.GLint64EXT)(unsafe.Pointer(v)))
}
func VertexAttribL1ui64ARB(index uint32, x uint64) {
  C.glowVertexAttribL1ui64ARB(pVertexAttribL1ui64ARB, (C.GLuint)(index), (C.GLuint64EXT)(x))
}
func VertexAttribL1ui64NV(index uint32, x uint64) {
  C.glowVertexAttribL1ui64NV(pVertexAttribL1ui64NV, (C.GLuint)(index), (C.GLuint64EXT)(x))
}
func VertexAttribL1ui64vARB(index uint32, v *uint64) {
  C.glowVertexAttribL1ui64vARB(pVertexAttribL1ui64vARB, (C.GLuint)(index), (*C.GLuint64EXT)(unsafe.Pointer(v)))
}
func VertexAttribL1ui64vNV(index uint32, v *uint64) {
  C.glowVertexAttribL1ui64vNV(pVertexAttribL1ui64vNV, (C.GLuint)(index), (*C.GLuint64EXT)(unsafe.Pointer(v)))
}
func VertexAttribL2d(index uint32, x float64, y float64) {
  C.glowVertexAttribL2d(pVertexAttribL2d, (C.GLuint)(index), (C.GLdouble)(x), (C.GLdouble)(y))
}
func VertexAttribL2dEXT(index uint32, x float64, y float64) {
  C.glowVertexAttribL2dEXT(pVertexAttribL2dEXT, (C.GLuint)(index), (C.GLdouble)(x), (C.GLdouble)(y))
}
func VertexAttribL2dv(index uint32, v *float64) {
  C.glowVertexAttribL2dv(pVertexAttribL2dv, (C.GLuint)(index), (*C.GLdouble)(unsafe.Pointer(v)))
}
func VertexAttribL2dvEXT(index uint32, v *float64) {
  C.glowVertexAttribL2dvEXT(pVertexAttribL2dvEXT, (C.GLuint)(index), (*C.GLdouble)(unsafe.Pointer(v)))
}
func VertexAttribL2i64NV(index uint32, x int64, y int64) {
  C.glowVertexAttribL2i64NV(pVertexAttribL2i64NV, (C.GLuint)(index), (C.GLint64EXT)(x), (C.GLint64EXT)(y))
}
func VertexAttribL2i64vNV(index uint32, v *int64) {
  C.glowVertexAttribL2i64vNV(pVertexAttribL2i64vNV, (C.GLuint)(index), (*C.GLint64EXT)(unsafe.Pointer(v)))
}
func VertexAttribL2ui64NV(index uint32, x uint64, y uint64) {
  C.glowVertexAttribL2ui64NV(pVertexAttribL2ui64NV, (C.GLuint)(index), (C.GLuint64EXT)(x), (C.GLuint64EXT)(y))
}
func VertexAttribL2ui64vNV(index uint32, v *uint64) {
  C.glowVertexAttribL2ui64vNV(pVertexAttribL2ui64vNV, (C.GLuint)(index), (*C.GLuint64EXT)(unsafe.Pointer(v)))
}
func VertexAttribL3d(index uint32, x float64, y float64, z float64) {
  C.glowVertexAttribL3d(pVertexAttribL3d, (C.GLuint)(index), (C.GLdouble)(x), (C.GLdouble)(y), (C.GLdouble)(z))
}
func VertexAttribL3dEXT(index uint32, x float64, y float64, z float64) {
  C.glowVertexAttribL3dEXT(pVertexAttribL3dEXT, (C.GLuint)(index), (C.GLdouble)(x), (C.GLdouble)(y), (C.GLdouble)(z))
}
func VertexAttribL3dv(index uint32, v *float64) {
  C.glowVertexAttribL3dv(pVertexAttribL3dv, (C.GLuint)(index), (*C.GLdouble)(unsafe.Pointer(v)))
}
func VertexAttribL3dvEXT(index uint32, v *float64) {
  C.glowVertexAttribL3dvEXT(pVertexAttribL3dvEXT, (C.GLuint)(index), (*C.GLdouble)(unsafe.Pointer(v)))
}
func VertexAttribL3i64NV(index uint32, x int64, y int64, z int64) {
  C.glowVertexAttribL3i64NV(pVertexAttribL3i64NV, (C.GLuint)(index), (C.GLint64EXT)(x), (C.GLint64EXT)(y), (C.GLint64EXT)(z))
}
func VertexAttribL3i64vNV(index uint32, v *int64) {
  C.glowVertexAttribL3i64vNV(pVertexAttribL3i64vNV, (C.GLuint)(index), (*C.GLint64EXT)(unsafe.Pointer(v)))
}
func VertexAttribL3ui64NV(index uint32, x uint64, y uint64, z uint64) {
  C.glowVertexAttribL3ui64NV(pVertexAttribL3ui64NV, (C.GLuint)(index), (C.GLuint64EXT)(x), (C.GLuint64EXT)(y), (C.GLuint64EXT)(z))
}
func VertexAttribL3ui64vNV(index uint32, v *uint64) {
  C.glowVertexAttribL3ui64vNV(pVertexAttribL3ui64vNV, (C.GLuint)(index), (*C.GLuint64EXT)(unsafe.Pointer(v)))
}
func VertexAttribL4d(index uint32, x float64, y float64, z float64, w float64) {
  C.glowVertexAttribL4d(pVertexAttribL4d, (C.GLuint)(index), (C.GLdouble)(x), (C.GLdouble)(y), (C.GLdouble)(z), (C.GLdouble)(w))
}
func VertexAttribL4dEXT(index uint32, x float64, y float64, z float64, w float64) {
  C.glowVertexAttribL4dEXT(pVertexAttribL4dEXT, (C.GLuint)(index), (C.GLdouble)(x), (C.GLdouble)(y), (C.GLdouble)(z), (C.GLdouble)(w))
}
func VertexAttribL4dv(index uint32, v *float64) {
  C.glowVertexAttribL4dv(pVertexAttribL4dv, (C.GLuint)(index), (*C.GLdouble)(unsafe.Pointer(v)))
}
func VertexAttribL4dvEXT(index uint32, v *float64) {
  C.glowVertexAttribL4dvEXT(pVertexAttribL4dvEXT, (C.GLuint)(index), (*C.GLdouble)(unsafe.Pointer(v)))
}
func VertexAttribL4i64NV(index uint32, x int64, y int64, z int64, w int64) {
  C.glowVertexAttribL4i64NV(pVertexAttribL4i64NV, (C.GLuint)(index), (C.GLint64EXT)(x), (C.GLint64EXT)(y), (C.GLint64EXT)(z), (C.GLint64EXT)(w))
}
func VertexAttribL4i64vNV(index uint32, v *int64) {
  C.glowVertexAttribL4i64vNV(pVertexAttribL4i64vNV, (C.GLuint)(index), (*C.GLint64EXT)(unsafe.Pointer(v)))
}
func VertexAttribL4ui64NV(index uint32, x uint64, y uint64, z uint64, w uint64) {
  C.glowVertexAttribL4ui64NV(pVertexAttribL4ui64NV, (C.GLuint)(index), (C.GLuint64EXT)(x), (C.GLuint64EXT)(y), (C.GLuint64EXT)(z), (C.GLuint64EXT)(w))
}
func VertexAttribL4ui64vNV(index uint32, v *uint64) {
  C.glowVertexAttribL4ui64vNV(pVertexAttribL4ui64vNV, (C.GLuint)(index), (*C.GLuint64EXT)(unsafe.Pointer(v)))
}
func VertexAttribLFormat(attribindex uint32, size int32, xtype uint32, relativeoffset uint32) {
  C.glowVertexAttribLFormat(pVertexAttribLFormat, (C.GLuint)(attribindex), (C.GLint)(size), (C.GLenum)(xtype), (C.GLuint)(relativeoffset))
}
func VertexAttribLFormatNV(index uint32, size int32, xtype uint32, stride int32) {
  C.glowVertexAttribLFormatNV(pVertexAttribLFormatNV, (C.GLuint)(index), (C.GLint)(size), (C.GLenum)(xtype), (C.GLsizei)(stride))
}
func VertexAttribLPointer(index uint32, size int32, xtype uint32, stride int32, pointer unsafe.Pointer) {
  C.glowVertexAttribLPointer(pVertexAttribLPointer, (C.GLuint)(index), (C.GLint)(size), (C.GLenum)(xtype), (C.GLsizei)(stride), pointer)
}
func VertexAttribLPointerEXT(index uint32, size int32, xtype uint32, stride int32, pointer unsafe.Pointer) {
  C.glowVertexAttribLPointerEXT(pVertexAttribLPointerEXT, (C.GLuint)(index), (C.GLint)(size), (C.GLenum)(xtype), (C.GLsizei)(stride), pointer)
}
func VertexAttribP1ui(index uint32, xtype uint32, normalized bool, value uint32) {
  C.glowVertexAttribP1ui(pVertexAttribP1ui, (C.GLuint)(index), (C.GLenum)(xtype), (C.GLboolean)(boolToInt(normalized)), (C.GLuint)(value))
}
func VertexAttribP1uiv(index uint32, xtype uint32, normalized bool, value *uint32) {
  C.glowVertexAttribP1uiv(pVertexAttribP1uiv, (C.GLuint)(index), (C.GLenum)(xtype), (C.GLboolean)(boolToInt(normalized)), (*C.GLuint)(unsafe.Pointer(value)))
}
func VertexAttribP2ui(index uint32, xtype uint32, normalized bool, value uint32) {
  C.glowVertexAttribP2ui(pVertexAttribP2ui, (C.GLuint)(index), (C.GLenum)(xtype), (C.GLboolean)(boolToInt(normalized)), (C.GLuint)(value))
}
func VertexAttribP2uiv(index uint32, xtype uint32, normalized bool, value *uint32) {
  C.glowVertexAttribP2uiv(pVertexAttribP2uiv, (C.GLuint)(index), (C.GLenum)(xtype), (C.GLboolean)(boolToInt(normalized)), (*C.GLuint)(unsafe.Pointer(value)))
}
func VertexAttribP3ui(index uint32, xtype uint32, normalized bool, value uint32) {
  C.glowVertexAttribP3ui(pVertexAttribP3ui, (C.GLuint)(index), (C.GLenum)(xtype), (C.GLboolean)(boolToInt(normalized)), (C.GLuint)(value))
}
func VertexAttribP3uiv(index uint32, xtype uint32, normalized bool, value *uint32) {
  C.glowVertexAttribP3uiv(pVertexAttribP3uiv, (C.GLuint)(index), (C.GLenum)(xtype), (C.GLboolean)(boolToInt(normalized)), (*C.GLuint)(unsafe.Pointer(value)))
}
func VertexAttribP4ui(index uint32, xtype uint32, normalized bool, value uint32) {
  C.glowVertexAttribP4ui(pVertexAttribP4ui, (C.GLuint)(index), (C.GLenum)(xtype), (C.GLboolean)(boolToInt(normalized)), (C.GLuint)(value))
}
func VertexAttribP4uiv(index uint32, xtype uint32, normalized bool, value *uint32) {
  C.glowVertexAttribP4uiv(pVertexAttribP4uiv, (C.GLuint)(index), (C.GLenum)(xtype), (C.GLboolean)(boolToInt(normalized)), (*C.GLuint)(unsafe.Pointer(value)))
}
func VertexAttribParameteriAMD(index uint32, pname uint32, param int32) {
  C.glowVertexAttribParameteriAMD(pVertexAttribParameteriAMD, (C.GLuint)(index), (C.GLenum)(pname), (C.GLint)(param))
}
// define an array of generic vertex attribute data
func VertexAttribPointer(index uint32, size int32, xtype uint32, normalized bool, stride int32, pointer unsafe.Pointer) {
  C.glowVertexAttribPointer(pVertexAttribPointer, (C.GLuint)(index), (C.GLint)(size), (C.GLenum)(xtype), (C.GLboolean)(boolToInt(normalized)), (C.GLsizei)(stride), pointer)
}
func VertexAttribPointerARB(index uint32, size int32, xtype uint32, normalized bool, stride int32, pointer unsafe.Pointer) {
  C.glowVertexAttribPointerARB(pVertexAttribPointerARB, (C.GLuint)(index), (C.GLint)(size), (C.GLenum)(xtype), (C.GLboolean)(boolToInt(normalized)), (C.GLsizei)(stride), pointer)
}
func VertexAttribPointerNV(index uint32, fsize int32, xtype uint32, stride int32, pointer unsafe.Pointer) {
  C.glowVertexAttribPointerNV(pVertexAttribPointerNV, (C.GLuint)(index), (C.GLint)(fsize), (C.GLenum)(xtype), (C.GLsizei)(stride), pointer)
}
func VertexAttribs1dvNV(index uint32, count int32, v *float64) {
  C.glowVertexAttribs1dvNV(pVertexAttribs1dvNV, (C.GLuint)(index), (C.GLsizei)(count), (*C.GLdouble)(unsafe.Pointer(v)))
}
func VertexAttribs1fvNV(index uint32, count int32, v *float32) {
  C.glowVertexAttribs1fvNV(pVertexAttribs1fvNV, (C.GLuint)(index), (C.GLsizei)(count), (*C.GLfloat)(unsafe.Pointer(v)))
}
func VertexAttribs1hvNV(index uint32, n int32, v *uint16) {
  C.glowVertexAttribs1hvNV(pVertexAttribs1hvNV, (C.GLuint)(index), (C.GLsizei)(n), (*C.GLhalfNV)(unsafe.Pointer(v)))
}
func VertexAttribs1svNV(index uint32, count int32, v *int16) {
  C.glowVertexAttribs1svNV(pVertexAttribs1svNV, (C.GLuint)(index), (C.GLsizei)(count), (*C.GLshort)(unsafe.Pointer(v)))
}
func VertexAttribs2dvNV(index uint32, count int32, v *float64) {
  C.glowVertexAttribs2dvNV(pVertexAttribs2dvNV, (C.GLuint)(index), (C.GLsizei)(count), (*C.GLdouble)(unsafe.Pointer(v)))
}
func VertexAttribs2fvNV(index uint32, count int32, v *float32) {
  C.glowVertexAttribs2fvNV(pVertexAttribs2fvNV, (C.GLuint)(index), (C.GLsizei)(count), (*C.GLfloat)(unsafe.Pointer(v)))
}
func VertexAttribs2hvNV(index uint32, n int32, v *uint16) {
  C.glowVertexAttribs2hvNV(pVertexAttribs2hvNV, (C.GLuint)(index), (C.GLsizei)(n), (*C.GLhalfNV)(unsafe.Pointer(v)))
}
func VertexAttribs2svNV(index uint32, count int32, v *int16) {
  C.glowVertexAttribs2svNV(pVertexAttribs2svNV, (C.GLuint)(index), (C.GLsizei)(count), (*C.GLshort)(unsafe.Pointer(v)))
}
func VertexAttribs3dvNV(index uint32, count int32, v *float64) {
  C.glowVertexAttribs3dvNV(pVertexAttribs3dvNV, (C.GLuint)(index), (C.GLsizei)(count), (*C.GLdouble)(unsafe.Pointer(v)))
}
func VertexAttribs3fvNV(index uint32, count int32, v *float32) {
  C.glowVertexAttribs3fvNV(pVertexAttribs3fvNV, (C.GLuint)(index), (C.GLsizei)(count), (*C.GLfloat)(unsafe.Pointer(v)))
}
func VertexAttribs3hvNV(index uint32, n int32, v *uint16) {
  C.glowVertexAttribs3hvNV(pVertexAttribs3hvNV, (C.GLuint)(index), (C.GLsizei)(n), (*C.GLhalfNV)(unsafe.Pointer(v)))
}
func VertexAttribs3svNV(index uint32, count int32, v *int16) {
  C.glowVertexAttribs3svNV(pVertexAttribs3svNV, (C.GLuint)(index), (C.GLsizei)(count), (*C.GLshort)(unsafe.Pointer(v)))
}
func VertexAttribs4dvNV(index uint32, count int32, v *float64) {
  C.glowVertexAttribs4dvNV(pVertexAttribs4dvNV, (C.GLuint)(index), (C.GLsizei)(count), (*C.GLdouble)(unsafe.Pointer(v)))
}
func VertexAttribs4fvNV(index uint32, count int32, v *float32) {
  C.glowVertexAttribs4fvNV(pVertexAttribs4fvNV, (C.GLuint)(index), (C.GLsizei)(count), (*C.GLfloat)(unsafe.Pointer(v)))
}
func VertexAttribs4hvNV(index uint32, n int32, v *uint16) {
  C.glowVertexAttribs4hvNV(pVertexAttribs4hvNV, (C.GLuint)(index), (C.GLsizei)(n), (*C.GLhalfNV)(unsafe.Pointer(v)))
}
func VertexAttribs4svNV(index uint32, count int32, v *int16) {
  C.glowVertexAttribs4svNV(pVertexAttribs4svNV, (C.GLuint)(index), (C.GLsizei)(count), (*C.GLshort)(unsafe.Pointer(v)))
}
func VertexAttribs4ubvNV(index uint32, count int32, v *uint8) {
  C.glowVertexAttribs4ubvNV(pVertexAttribs4ubvNV, (C.GLuint)(index), (C.GLsizei)(count), (*C.GLubyte)(unsafe.Pointer(v)))
}
// modify the rate at which generic vertex attributes advance
func VertexBindingDivisor(bindingindex uint32, divisor uint32) {
  C.glowVertexBindingDivisor(pVertexBindingDivisor, (C.GLuint)(bindingindex), (C.GLuint)(divisor))
}
func VertexBlendARB(count int32) {
  C.glowVertexBlendARB(pVertexBlendARB, (C.GLint)(count))
}
func VertexBlendEnvfATI(pname uint32, param float32) {
  C.glowVertexBlendEnvfATI(pVertexBlendEnvfATI, (C.GLenum)(pname), (C.GLfloat)(param))
}
func VertexBlendEnviATI(pname uint32, param int32) {
  C.glowVertexBlendEnviATI(pVertexBlendEnviATI, (C.GLenum)(pname), (C.GLint)(param))
}
func VertexFormatNV(size int32, xtype uint32, stride int32) {
  C.glowVertexFormatNV(pVertexFormatNV, (C.GLint)(size), (C.GLenum)(xtype), (C.GLsizei)(stride))
}
func VertexPointerEXT(size int32, xtype uint32, stride int32, count int32, pointer unsafe.Pointer) {
  C.glowVertexPointerEXT(pVertexPointerEXT, (C.GLint)(size), (C.GLenum)(xtype), (C.GLsizei)(stride), (C.GLsizei)(count), pointer)
}
func VertexPointerListIBM(size int32, xtype uint32, stride int32, pointer *unsafe.Pointer, ptrstride int32) {
  C.glowVertexPointerListIBM(pVertexPointerListIBM, (C.GLint)(size), (C.GLenum)(xtype), (C.GLint)(stride), pointer, (C.GLint)(ptrstride))
}
func VertexPointervINTEL(size int32, xtype uint32, pointer *unsafe.Pointer) {
  C.glowVertexPointervINTEL(pVertexPointervINTEL, (C.GLint)(size), (C.GLenum)(xtype), pointer)
}
func VertexStream1dATI(stream uint32, x float64) {
  C.glowVertexStream1dATI(pVertexStream1dATI, (C.GLenum)(stream), (C.GLdouble)(x))
}
func VertexStream1dvATI(stream uint32, coords *float64) {
  C.glowVertexStream1dvATI(pVertexStream1dvATI, (C.GLenum)(stream), (*C.GLdouble)(unsafe.Pointer(coords)))
}
func VertexStream1fATI(stream uint32, x float32) {
  C.glowVertexStream1fATI(pVertexStream1fATI, (C.GLenum)(stream), (C.GLfloat)(x))
}
func VertexStream1fvATI(stream uint32, coords *float32) {
  C.glowVertexStream1fvATI(pVertexStream1fvATI, (C.GLenum)(stream), (*C.GLfloat)(unsafe.Pointer(coords)))
}
func VertexStream1iATI(stream uint32, x int32) {
  C.glowVertexStream1iATI(pVertexStream1iATI, (C.GLenum)(stream), (C.GLint)(x))
}
func VertexStream1ivATI(stream uint32, coords *int32) {
  C.glowVertexStream1ivATI(pVertexStream1ivATI, (C.GLenum)(stream), (*C.GLint)(unsafe.Pointer(coords)))
}
func VertexStream1sATI(stream uint32, x int16) {
  C.glowVertexStream1sATI(pVertexStream1sATI, (C.GLenum)(stream), (C.GLshort)(x))
}
func VertexStream1svATI(stream uint32, coords *int16) {
  C.glowVertexStream1svATI(pVertexStream1svATI, (C.GLenum)(stream), (*C.GLshort)(unsafe.Pointer(coords)))
}
func VertexStream2dATI(stream uint32, x float64, y float64) {
  C.glowVertexStream2dATI(pVertexStream2dATI, (C.GLenum)(stream), (C.GLdouble)(x), (C.GLdouble)(y))
}
func VertexStream2dvATI(stream uint32, coords *float64) {
  C.glowVertexStream2dvATI(pVertexStream2dvATI, (C.GLenum)(stream), (*C.GLdouble)(unsafe.Pointer(coords)))
}
func VertexStream2fATI(stream uint32, x float32, y float32) {
  C.glowVertexStream2fATI(pVertexStream2fATI, (C.GLenum)(stream), (C.GLfloat)(x), (C.GLfloat)(y))
}
func VertexStream2fvATI(stream uint32, coords *float32) {
  C.glowVertexStream2fvATI(pVertexStream2fvATI, (C.GLenum)(stream), (*C.GLfloat)(unsafe.Pointer(coords)))
}
func VertexStream2iATI(stream uint32, x int32, y int32) {
  C.glowVertexStream2iATI(pVertexStream2iATI, (C.GLenum)(stream), (C.GLint)(x), (C.GLint)(y))
}
func VertexStream2ivATI(stream uint32, coords *int32) {
  C.glowVertexStream2ivATI(pVertexStream2ivATI, (C.GLenum)(stream), (*C.GLint)(unsafe.Pointer(coords)))
}
func VertexStream2sATI(stream uint32, x int16, y int16) {
  C.glowVertexStream2sATI(pVertexStream2sATI, (C.GLenum)(stream), (C.GLshort)(x), (C.GLshort)(y))
}
func VertexStream2svATI(stream uint32, coords *int16) {
  C.glowVertexStream2svATI(pVertexStream2svATI, (C.GLenum)(stream), (*C.GLshort)(unsafe.Pointer(coords)))
}
func VertexStream3dATI(stream uint32, x float64, y float64, z float64) {
  C.glowVertexStream3dATI(pVertexStream3dATI, (C.GLenum)(stream), (C.GLdouble)(x), (C.GLdouble)(y), (C.GLdouble)(z))
}
func VertexStream3dvATI(stream uint32, coords *float64) {
  C.glowVertexStream3dvATI(pVertexStream3dvATI, (C.GLenum)(stream), (*C.GLdouble)(unsafe.Pointer(coords)))
}
func VertexStream3fATI(stream uint32, x float32, y float32, z float32) {
  C.glowVertexStream3fATI(pVertexStream3fATI, (C.GLenum)(stream), (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z))
}
func VertexStream3fvATI(stream uint32, coords *float32) {
  C.glowVertexStream3fvATI(pVertexStream3fvATI, (C.GLenum)(stream), (*C.GLfloat)(unsafe.Pointer(coords)))
}
func VertexStream3iATI(stream uint32, x int32, y int32, z int32) {
  C.glowVertexStream3iATI(pVertexStream3iATI, (C.GLenum)(stream), (C.GLint)(x), (C.GLint)(y), (C.GLint)(z))
}
func VertexStream3ivATI(stream uint32, coords *int32) {
  C.glowVertexStream3ivATI(pVertexStream3ivATI, (C.GLenum)(stream), (*C.GLint)(unsafe.Pointer(coords)))
}
func VertexStream3sATI(stream uint32, x int16, y int16, z int16) {
  C.glowVertexStream3sATI(pVertexStream3sATI, (C.GLenum)(stream), (C.GLshort)(x), (C.GLshort)(y), (C.GLshort)(z))
}
func VertexStream3svATI(stream uint32, coords *int16) {
  C.glowVertexStream3svATI(pVertexStream3svATI, (C.GLenum)(stream), (*C.GLshort)(unsafe.Pointer(coords)))
}
func VertexStream4dATI(stream uint32, x float64, y float64, z float64, w float64) {
  C.glowVertexStream4dATI(pVertexStream4dATI, (C.GLenum)(stream), (C.GLdouble)(x), (C.GLdouble)(y), (C.GLdouble)(z), (C.GLdouble)(w))
}
func VertexStream4dvATI(stream uint32, coords *float64) {
  C.glowVertexStream4dvATI(pVertexStream4dvATI, (C.GLenum)(stream), (*C.GLdouble)(unsafe.Pointer(coords)))
}
func VertexStream4fATI(stream uint32, x float32, y float32, z float32, w float32) {
  C.glowVertexStream4fATI(pVertexStream4fATI, (C.GLenum)(stream), (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z), (C.GLfloat)(w))
}
func VertexStream4fvATI(stream uint32, coords *float32) {
  C.glowVertexStream4fvATI(pVertexStream4fvATI, (C.GLenum)(stream), (*C.GLfloat)(unsafe.Pointer(coords)))
}
func VertexStream4iATI(stream uint32, x int32, y int32, z int32, w int32) {
  C.glowVertexStream4iATI(pVertexStream4iATI, (C.GLenum)(stream), (C.GLint)(x), (C.GLint)(y), (C.GLint)(z), (C.GLint)(w))
}
func VertexStream4ivATI(stream uint32, coords *int32) {
  C.glowVertexStream4ivATI(pVertexStream4ivATI, (C.GLenum)(stream), (*C.GLint)(unsafe.Pointer(coords)))
}
func VertexStream4sATI(stream uint32, x int16, y int16, z int16, w int16) {
  C.glowVertexStream4sATI(pVertexStream4sATI, (C.GLenum)(stream), (C.GLshort)(x), (C.GLshort)(y), (C.GLshort)(z), (C.GLshort)(w))
}
func VertexStream4svATI(stream uint32, coords *int16) {
  C.glowVertexStream4svATI(pVertexStream4svATI, (C.GLenum)(stream), (*C.GLshort)(unsafe.Pointer(coords)))
}
func VertexWeightPointerEXT(size int32, xtype uint32, stride int32, pointer unsafe.Pointer) {
  C.glowVertexWeightPointerEXT(pVertexWeightPointerEXT, (C.GLint)(size), (C.GLenum)(xtype), (C.GLsizei)(stride), pointer)
}
func VertexWeightfEXT(weight float32) {
  C.glowVertexWeightfEXT(pVertexWeightfEXT, (C.GLfloat)(weight))
}
func VertexWeightfvEXT(weight *float32) {
  C.glowVertexWeightfvEXT(pVertexWeightfvEXT, (*C.GLfloat)(unsafe.Pointer(weight)))
}
func VertexWeighthNV(weight uint16) {
  C.glowVertexWeighthNV(pVertexWeighthNV, (C.GLhalfNV)(weight))
}
func VertexWeighthvNV(weight *uint16) {
  C.glowVertexWeighthvNV(pVertexWeighthvNV, (*C.GLhalfNV)(unsafe.Pointer(weight)))
}
func VideoCaptureNV(video_capture_slot uint32, sequence_num *uint32, capture_time *uint64) uint32 {
  ret := C.glowVideoCaptureNV(pVideoCaptureNV, (C.GLuint)(video_capture_slot), (*C.GLuint)(unsafe.Pointer(sequence_num)), (*C.GLuint64EXT)(unsafe.Pointer(capture_time)))
  return (uint32)(ret)
}
func VideoCaptureStreamParameterdvNV(video_capture_slot uint32, stream uint32, pname uint32, params *float64) {
  C.glowVideoCaptureStreamParameterdvNV(pVideoCaptureStreamParameterdvNV, (C.GLuint)(video_capture_slot), (C.GLuint)(stream), (C.GLenum)(pname), (*C.GLdouble)(unsafe.Pointer(params)))
}
func VideoCaptureStreamParameterfvNV(video_capture_slot uint32, stream uint32, pname uint32, params *float32) {
  C.glowVideoCaptureStreamParameterfvNV(pVideoCaptureStreamParameterfvNV, (C.GLuint)(video_capture_slot), (C.GLuint)(stream), (C.GLenum)(pname), (*C.GLfloat)(unsafe.Pointer(params)))
}
func VideoCaptureStreamParameterivNV(video_capture_slot uint32, stream uint32, pname uint32, params *int32) {
  C.glowVideoCaptureStreamParameterivNV(pVideoCaptureStreamParameterivNV, (C.GLuint)(video_capture_slot), (C.GLuint)(stream), (C.GLenum)(pname), (*C.GLint)(unsafe.Pointer(params)))
}
// set the viewport
func Viewport(x int32, y int32, width int32, height int32) {
  C.glowViewport(pViewport, (C.GLint)(x), (C.GLint)(y), (C.GLsizei)(width), (C.GLsizei)(height))
}
func ViewportArrayv(first uint32, count int32, v *float32) {
  C.glowViewportArrayv(pViewportArrayv, (C.GLuint)(first), (C.GLsizei)(count), (*C.GLfloat)(unsafe.Pointer(v)))
}
func ViewportIndexedf(index uint32, x float32, y float32, w float32, h float32) {
  C.glowViewportIndexedf(pViewportIndexedf, (C.GLuint)(index), (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(w), (C.GLfloat)(h))
}
func ViewportIndexedfv(index uint32, v *float32) {
  C.glowViewportIndexedfv(pViewportIndexedfv, (C.GLuint)(index), (*C.GLfloat)(unsafe.Pointer(v)))
}
// instruct the GL server to block until the specified sync object becomes signaled
func WaitSync(sync unsafe.Pointer, flags uint32, timeout uint64) {
  C.glowWaitSync(pWaitSync, (C.GLsync)(sync), (C.GLbitfield)(flags), (C.GLuint64)(timeout))
}
func WeightPathsNV(resultPath uint32, numPaths int32, paths *uint32, weights *float32) {
  C.glowWeightPathsNV(pWeightPathsNV, (C.GLuint)(resultPath), (C.GLsizei)(numPaths), (*C.GLuint)(unsafe.Pointer(paths)), (*C.GLfloat)(unsafe.Pointer(weights)))
}
func WeightPointerARB(size int32, xtype uint32, stride int32, pointer unsafe.Pointer) {
  C.glowWeightPointerARB(pWeightPointerARB, (C.GLint)(size), (C.GLenum)(xtype), (C.GLsizei)(stride), pointer)
}
func WeightbvARB(size int32, weights *int8) {
  C.glowWeightbvARB(pWeightbvARB, (C.GLint)(size), (*C.GLbyte)(unsafe.Pointer(weights)))
}
func WeightdvARB(size int32, weights *float64) {
  C.glowWeightdvARB(pWeightdvARB, (C.GLint)(size), (*C.GLdouble)(unsafe.Pointer(weights)))
}
func WeightfvARB(size int32, weights *float32) {
  C.glowWeightfvARB(pWeightfvARB, (C.GLint)(size), (*C.GLfloat)(unsafe.Pointer(weights)))
}
func WeightivARB(size int32, weights *int32) {
  C.glowWeightivARB(pWeightivARB, (C.GLint)(size), (*C.GLint)(unsafe.Pointer(weights)))
}
func WeightsvARB(size int32, weights *int16) {
  C.glowWeightsvARB(pWeightsvARB, (C.GLint)(size), (*C.GLshort)(unsafe.Pointer(weights)))
}
func WeightubvARB(size int32, weights *uint8) {
  C.glowWeightubvARB(pWeightubvARB, (C.GLint)(size), (*C.GLubyte)(unsafe.Pointer(weights)))
}
func WeightuivARB(size int32, weights *uint32) {
  C.glowWeightuivARB(pWeightuivARB, (C.GLint)(size), (*C.GLuint)(unsafe.Pointer(weights)))
}
func WeightusvARB(size int32, weights *uint16) {
  C.glowWeightusvARB(pWeightusvARB, (C.GLint)(size), (*C.GLushort)(unsafe.Pointer(weights)))
}
func WindowPos2dARB(x float64, y float64) {
  C.glowWindowPos2dARB(pWindowPos2dARB, (C.GLdouble)(x), (C.GLdouble)(y))
}
func WindowPos2dMESA(x float64, y float64) {
  C.glowWindowPos2dMESA(pWindowPos2dMESA, (C.GLdouble)(x), (C.GLdouble)(y))
}
func WindowPos2dvARB(v *float64) {
  C.glowWindowPos2dvARB(pWindowPos2dvARB, (*C.GLdouble)(unsafe.Pointer(v)))
}
func WindowPos2dvMESA(v *float64) {
  C.glowWindowPos2dvMESA(pWindowPos2dvMESA, (*C.GLdouble)(unsafe.Pointer(v)))
}
func WindowPos2fARB(x float32, y float32) {
  C.glowWindowPos2fARB(pWindowPos2fARB, (C.GLfloat)(x), (C.GLfloat)(y))
}
func WindowPos2fMESA(x float32, y float32) {
  C.glowWindowPos2fMESA(pWindowPos2fMESA, (C.GLfloat)(x), (C.GLfloat)(y))
}
func WindowPos2fvARB(v *float32) {
  C.glowWindowPos2fvARB(pWindowPos2fvARB, (*C.GLfloat)(unsafe.Pointer(v)))
}
func WindowPos2fvMESA(v *float32) {
  C.glowWindowPos2fvMESA(pWindowPos2fvMESA, (*C.GLfloat)(unsafe.Pointer(v)))
}
func WindowPos2iARB(x int32, y int32) {
  C.glowWindowPos2iARB(pWindowPos2iARB, (C.GLint)(x), (C.GLint)(y))
}
func WindowPos2iMESA(x int32, y int32) {
  C.glowWindowPos2iMESA(pWindowPos2iMESA, (C.GLint)(x), (C.GLint)(y))
}
func WindowPos2ivARB(v *int32) {
  C.glowWindowPos2ivARB(pWindowPos2ivARB, (*C.GLint)(unsafe.Pointer(v)))
}
func WindowPos2ivMESA(v *int32) {
  C.glowWindowPos2ivMESA(pWindowPos2ivMESA, (*C.GLint)(unsafe.Pointer(v)))
}
func WindowPos2sARB(x int16, y int16) {
  C.glowWindowPos2sARB(pWindowPos2sARB, (C.GLshort)(x), (C.GLshort)(y))
}
func WindowPos2sMESA(x int16, y int16) {
  C.glowWindowPos2sMESA(pWindowPos2sMESA, (C.GLshort)(x), (C.GLshort)(y))
}
func WindowPos2svARB(v *int16) {
  C.glowWindowPos2svARB(pWindowPos2svARB, (*C.GLshort)(unsafe.Pointer(v)))
}
func WindowPos2svMESA(v *int16) {
  C.glowWindowPos2svMESA(pWindowPos2svMESA, (*C.GLshort)(unsafe.Pointer(v)))
}
func WindowPos3dARB(x float64, y float64, z float64) {
  C.glowWindowPos3dARB(pWindowPos3dARB, (C.GLdouble)(x), (C.GLdouble)(y), (C.GLdouble)(z))
}
func WindowPos3dMESA(x float64, y float64, z float64) {
  C.glowWindowPos3dMESA(pWindowPos3dMESA, (C.GLdouble)(x), (C.GLdouble)(y), (C.GLdouble)(z))
}
func WindowPos3dvARB(v *float64) {
  C.glowWindowPos3dvARB(pWindowPos3dvARB, (*C.GLdouble)(unsafe.Pointer(v)))
}
func WindowPos3dvMESA(v *float64) {
  C.glowWindowPos3dvMESA(pWindowPos3dvMESA, (*C.GLdouble)(unsafe.Pointer(v)))
}
func WindowPos3fARB(x float32, y float32, z float32) {
  C.glowWindowPos3fARB(pWindowPos3fARB, (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z))
}
func WindowPos3fMESA(x float32, y float32, z float32) {
  C.glowWindowPos3fMESA(pWindowPos3fMESA, (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z))
}
func WindowPos3fvARB(v *float32) {
  C.glowWindowPos3fvARB(pWindowPos3fvARB, (*C.GLfloat)(unsafe.Pointer(v)))
}
func WindowPos3fvMESA(v *float32) {
  C.glowWindowPos3fvMESA(pWindowPos3fvMESA, (*C.GLfloat)(unsafe.Pointer(v)))
}
func WindowPos3iARB(x int32, y int32, z int32) {
  C.glowWindowPos3iARB(pWindowPos3iARB, (C.GLint)(x), (C.GLint)(y), (C.GLint)(z))
}
func WindowPos3iMESA(x int32, y int32, z int32) {
  C.glowWindowPos3iMESA(pWindowPos3iMESA, (C.GLint)(x), (C.GLint)(y), (C.GLint)(z))
}
func WindowPos3ivARB(v *int32) {
  C.glowWindowPos3ivARB(pWindowPos3ivARB, (*C.GLint)(unsafe.Pointer(v)))
}
func WindowPos3ivMESA(v *int32) {
  C.glowWindowPos3ivMESA(pWindowPos3ivMESA, (*C.GLint)(unsafe.Pointer(v)))
}
func WindowPos3sARB(x int16, y int16, z int16) {
  C.glowWindowPos3sARB(pWindowPos3sARB, (C.GLshort)(x), (C.GLshort)(y), (C.GLshort)(z))
}
func WindowPos3sMESA(x int16, y int16, z int16) {
  C.glowWindowPos3sMESA(pWindowPos3sMESA, (C.GLshort)(x), (C.GLshort)(y), (C.GLshort)(z))
}
func WindowPos3svARB(v *int16) {
  C.glowWindowPos3svARB(pWindowPos3svARB, (*C.GLshort)(unsafe.Pointer(v)))
}
func WindowPos3svMESA(v *int16) {
  C.glowWindowPos3svMESA(pWindowPos3svMESA, (*C.GLshort)(unsafe.Pointer(v)))
}
func WindowPos4dMESA(x float64, y float64, z float64, w float64) {
  C.glowWindowPos4dMESA(pWindowPos4dMESA, (C.GLdouble)(x), (C.GLdouble)(y), (C.GLdouble)(z), (C.GLdouble)(w))
}
func WindowPos4dvMESA(v *float64) {
  C.glowWindowPos4dvMESA(pWindowPos4dvMESA, (*C.GLdouble)(unsafe.Pointer(v)))
}
func WindowPos4fMESA(x float32, y float32, z float32, w float32) {
  C.glowWindowPos4fMESA(pWindowPos4fMESA, (C.GLfloat)(x), (C.GLfloat)(y), (C.GLfloat)(z), (C.GLfloat)(w))
}
func WindowPos4fvMESA(v *float32) {
  C.glowWindowPos4fvMESA(pWindowPos4fvMESA, (*C.GLfloat)(unsafe.Pointer(v)))
}
func WindowPos4iMESA(x int32, y int32, z int32, w int32) {
  C.glowWindowPos4iMESA(pWindowPos4iMESA, (C.GLint)(x), (C.GLint)(y), (C.GLint)(z), (C.GLint)(w))
}
func WindowPos4ivMESA(v *int32) {
  C.glowWindowPos4ivMESA(pWindowPos4ivMESA, (*C.GLint)(unsafe.Pointer(v)))
}
func WindowPos4sMESA(x int16, y int16, z int16, w int16) {
  C.glowWindowPos4sMESA(pWindowPos4sMESA, (C.GLshort)(x), (C.GLshort)(y), (C.GLshort)(z), (C.GLshort)(w))
}
func WindowPos4svMESA(v *int16) {
  C.glowWindowPos4svMESA(pWindowPos4svMESA, (*C.GLshort)(unsafe.Pointer(v)))
}
func WriteMaskEXT(res uint32, in uint32, outX uint32, outY uint32, outZ uint32, outW uint32) {
  C.glowWriteMaskEXT(pWriteMaskEXT, (C.GLuint)(res), (C.GLuint)(in), (C.GLenum)(outX), (C.GLenum)(outY), (C.GLenum)(outZ), (C.GLenum)(outW))
}
func Init() error {
  return InitWithProcAddrFunc(auto.GetProcAddress)
}
func InitWithProcAddrFunc(getProcAddr procaddr.GetProcAddressFunc) error {
  if pAccumxOES = (C.PACCUMXOES)(getProcAddr("glAccumxOES")); pAccumxOES == nil {
    OES_fixed_point = false
  }
  if pActiveProgramEXT = (C.PACTIVEPROGRAMEXT)(getProcAddr("glActiveProgramEXT")); pActiveProgramEXT == nil {
    EXT_separate_shader_objects = false
  }
  if pActiveShaderProgram = (C.PACTIVESHADERPROGRAM)(getProcAddr("glActiveShaderProgram")); pActiveShaderProgram == nil {
    ARB_separate_shader_objects = false
    return errors.New("glActiveShaderProgram")
  }
  if pActiveShaderProgramEXT = (C.PACTIVESHADERPROGRAMEXT)(getProcAddr("glActiveShaderProgramEXT")); pActiveShaderProgramEXT == nil {
    EXT_separate_shader_objects = false
  }
  if pActiveStencilFaceEXT = (C.PACTIVESTENCILFACEEXT)(getProcAddr("glActiveStencilFaceEXT")); pActiveStencilFaceEXT == nil {
    EXT_stencil_two_side = false
  }
  if pActiveTexture = (C.PACTIVETEXTURE)(getProcAddr("glActiveTexture")); pActiveTexture == nil {
    return errors.New("glActiveTexture")
  }
  if pActiveTextureARB = (C.PACTIVETEXTUREARB)(getProcAddr("glActiveTextureARB")); pActiveTextureARB == nil {
    ARB_multitexture = false
  }
  if pActiveVaryingNV = (C.PACTIVEVARYINGNV)(getProcAddr("glActiveVaryingNV")); pActiveVaryingNV == nil {
    NV_transform_feedback = false
  }
  if pAlphaFragmentOp1ATI = (C.PALPHAFRAGMENTOP1ATI)(getProcAddr("glAlphaFragmentOp1ATI")); pAlphaFragmentOp1ATI == nil {
    ATI_fragment_shader = false
  }
  if pAlphaFragmentOp2ATI = (C.PALPHAFRAGMENTOP2ATI)(getProcAddr("glAlphaFragmentOp2ATI")); pAlphaFragmentOp2ATI == nil {
    ATI_fragment_shader = false
  }
  if pAlphaFragmentOp3ATI = (C.PALPHAFRAGMENTOP3ATI)(getProcAddr("glAlphaFragmentOp3ATI")); pAlphaFragmentOp3ATI == nil {
    ATI_fragment_shader = false
  }
  if pAlphaFuncxOES = (C.PALPHAFUNCXOES)(getProcAddr("glAlphaFuncxOES")); pAlphaFuncxOES == nil {
    OES_fixed_point = false
  }
  if pApplyTextureEXT = (C.PAPPLYTEXTUREEXT)(getProcAddr("glApplyTextureEXT")); pApplyTextureEXT == nil {
    EXT_light_texture = false
  }
  if pAreProgramsResidentNV = (C.PAREPROGRAMSRESIDENTNV)(getProcAddr("glAreProgramsResidentNV")); pAreProgramsResidentNV == nil {
    NV_vertex_program = false
  }
  if pAreTexturesResidentEXT = (C.PARETEXTURESRESIDENTEXT)(getProcAddr("glAreTexturesResidentEXT")); pAreTexturesResidentEXT == nil {
    EXT_texture_object = false
  }
  if pArrayElementEXT = (C.PARRAYELEMENTEXT)(getProcAddr("glArrayElementEXT")); pArrayElementEXT == nil {
    EXT_vertex_array = false
  }
  if pArrayObjectATI = (C.PARRAYOBJECTATI)(getProcAddr("glArrayObjectATI")); pArrayObjectATI == nil {
    ATI_vertex_array_object = false
  }
  if pAsyncMarkerSGIX = (C.PASYNCMARKERSGIX)(getProcAddr("glAsyncMarkerSGIX")); pAsyncMarkerSGIX == nil {
    SGIX_async = false
  }
  if pAttachObjectARB = (C.PATTACHOBJECTARB)(getProcAddr("glAttachObjectARB")); pAttachObjectARB == nil {
    ARB_shader_objects = false
  }
  if pAttachShader = (C.PATTACHSHADER)(getProcAddr("glAttachShader")); pAttachShader == nil {
    return errors.New("glAttachShader")
  }
  if pBeginConditionalRender = (C.PBEGINCONDITIONALRENDER)(getProcAddr("glBeginConditionalRender")); pBeginConditionalRender == nil {
    return errors.New("glBeginConditionalRender")
  }
  if pBeginConditionalRenderNV = (C.PBEGINCONDITIONALRENDERNV)(getProcAddr("glBeginConditionalRenderNV")); pBeginConditionalRenderNV == nil {
    NV_conditional_render = false
  }
  if pBeginConditionalRenderNVX = (C.PBEGINCONDITIONALRENDERNVX)(getProcAddr("glBeginConditionalRenderNVX")); pBeginConditionalRenderNVX == nil {
    NVX_conditional_render = false
  }
  if pBeginFragmentShaderATI = (C.PBEGINFRAGMENTSHADERATI)(getProcAddr("glBeginFragmentShaderATI")); pBeginFragmentShaderATI == nil {
    ATI_fragment_shader = false
  }
  if pBeginOcclusionQueryNV = (C.PBEGINOCCLUSIONQUERYNV)(getProcAddr("glBeginOcclusionQueryNV")); pBeginOcclusionQueryNV == nil {
    NV_occlusion_query = false
  }
  if pBeginPerfMonitorAMD = (C.PBEGINPERFMONITORAMD)(getProcAddr("glBeginPerfMonitorAMD")); pBeginPerfMonitorAMD == nil {
    AMD_performance_monitor = false
  }
  if pBeginPerfQueryINTEL = (C.PBEGINPERFQUERYINTEL)(getProcAddr("glBeginPerfQueryINTEL")); pBeginPerfQueryINTEL == nil {
    INTEL_performance_query = false
  }
  if pBeginQuery = (C.PBEGINQUERY)(getProcAddr("glBeginQuery")); pBeginQuery == nil {
    return errors.New("glBeginQuery")
  }
  if pBeginQueryARB = (C.PBEGINQUERYARB)(getProcAddr("glBeginQueryARB")); pBeginQueryARB == nil {
    ARB_occlusion_query = false
  }
  if pBeginQueryIndexed = (C.PBEGINQUERYINDEXED)(getProcAddr("glBeginQueryIndexed")); pBeginQueryIndexed == nil {
    ARB_transform_feedback3 = false
    return errors.New("glBeginQueryIndexed")
  }
  if pBeginTransformFeedback = (C.PBEGINTRANSFORMFEEDBACK)(getProcAddr("glBeginTransformFeedback")); pBeginTransformFeedback == nil {
    return errors.New("glBeginTransformFeedback")
  }
  if pBeginTransformFeedbackEXT = (C.PBEGINTRANSFORMFEEDBACKEXT)(getProcAddr("glBeginTransformFeedbackEXT")); pBeginTransformFeedbackEXT == nil {
    EXT_transform_feedback = false
  }
  if pBeginTransformFeedbackNV = (C.PBEGINTRANSFORMFEEDBACKNV)(getProcAddr("glBeginTransformFeedbackNV")); pBeginTransformFeedbackNV == nil {
    NV_transform_feedback = false
  }
  if pBeginVertexShaderEXT = (C.PBEGINVERTEXSHADEREXT)(getProcAddr("glBeginVertexShaderEXT")); pBeginVertexShaderEXT == nil {
    EXT_vertex_shader = false
  }
  if pBeginVideoCaptureNV = (C.PBEGINVIDEOCAPTURENV)(getProcAddr("glBeginVideoCaptureNV")); pBeginVideoCaptureNV == nil {
    NV_video_capture = false
  }
  if pBindAttribLocation = (C.PBINDATTRIBLOCATION)(getProcAddr("glBindAttribLocation")); pBindAttribLocation == nil {
    return errors.New("glBindAttribLocation")
  }
  if pBindAttribLocationARB = (C.PBINDATTRIBLOCATIONARB)(getProcAddr("glBindAttribLocationARB")); pBindAttribLocationARB == nil {
    ARB_vertex_shader = false
  }
  if pBindBuffer = (C.PBINDBUFFER)(getProcAddr("glBindBuffer")); pBindBuffer == nil {
    return errors.New("glBindBuffer")
  }
  if pBindBufferARB = (C.PBINDBUFFERARB)(getProcAddr("glBindBufferARB")); pBindBufferARB == nil {
    ARB_vertex_buffer_object = false
  }
  if pBindBufferBase = (C.PBINDBUFFERBASE)(getProcAddr("glBindBufferBase")); pBindBufferBase == nil {
    return errors.New("glBindBufferBase")
  }
  if pBindBufferBaseEXT = (C.PBINDBUFFERBASEEXT)(getProcAddr("glBindBufferBaseEXT")); pBindBufferBaseEXT == nil {
    EXT_transform_feedback = false
  }
  if pBindBufferBaseNV = (C.PBINDBUFFERBASENV)(getProcAddr("glBindBufferBaseNV")); pBindBufferBaseNV == nil {
    NV_transform_feedback = false
  }
  if pBindBufferOffsetEXT = (C.PBINDBUFFEROFFSETEXT)(getProcAddr("glBindBufferOffsetEXT")); pBindBufferOffsetEXT == nil {
    EXT_transform_feedback = false
  }
  if pBindBufferOffsetNV = (C.PBINDBUFFEROFFSETNV)(getProcAddr("glBindBufferOffsetNV")); pBindBufferOffsetNV == nil {
    NV_transform_feedback = false
  }
  if pBindBufferRange = (C.PBINDBUFFERRANGE)(getProcAddr("glBindBufferRange")); pBindBufferRange == nil {
    return errors.New("glBindBufferRange")
  }
  if pBindBufferRangeEXT = (C.PBINDBUFFERRANGEEXT)(getProcAddr("glBindBufferRangeEXT")); pBindBufferRangeEXT == nil {
    EXT_transform_feedback = false
  }
  if pBindBufferRangeNV = (C.PBINDBUFFERRANGENV)(getProcAddr("glBindBufferRangeNV")); pBindBufferRangeNV == nil {
    NV_transform_feedback = false
  }
  if pBindBuffersBase = (C.PBINDBUFFERSBASE)(getProcAddr("glBindBuffersBase")); pBindBuffersBase == nil {
    ARB_multi_bind = false
  }
  if pBindBuffersRange = (C.PBINDBUFFERSRANGE)(getProcAddr("glBindBuffersRange")); pBindBuffersRange == nil {
    ARB_multi_bind = false
  }
  if pBindFragDataLocation = (C.PBINDFRAGDATALOCATION)(getProcAddr("glBindFragDataLocation")); pBindFragDataLocation == nil {
    return errors.New("glBindFragDataLocation")
  }
  if pBindFragDataLocationEXT = (C.PBINDFRAGDATALOCATIONEXT)(getProcAddr("glBindFragDataLocationEXT")); pBindFragDataLocationEXT == nil {
    EXT_gpu_shader4 = false
  }
  if pBindFragDataLocationIndexed = (C.PBINDFRAGDATALOCATIONINDEXED)(getProcAddr("glBindFragDataLocationIndexed")); pBindFragDataLocationIndexed == nil {
    ARB_blend_func_extended = false
    return errors.New("glBindFragDataLocationIndexed")
  }
  if pBindFragmentShaderATI = (C.PBINDFRAGMENTSHADERATI)(getProcAddr("glBindFragmentShaderATI")); pBindFragmentShaderATI == nil {
    ATI_fragment_shader = false
  }
  if pBindFramebuffer = (C.PBINDFRAMEBUFFER)(getProcAddr("glBindFramebuffer")); pBindFramebuffer == nil {
    ARB_framebuffer_object = false
    return errors.New("glBindFramebuffer")
  }
  if pBindFramebufferEXT = (C.PBINDFRAMEBUFFEREXT)(getProcAddr("glBindFramebufferEXT")); pBindFramebufferEXT == nil {
    EXT_framebuffer_object = false
  }
  if pBindImageTexture = (C.PBINDIMAGETEXTURE)(getProcAddr("glBindImageTexture")); pBindImageTexture == nil {
    ARB_shader_image_load_store = false
  }
  if pBindImageTextureEXT = (C.PBINDIMAGETEXTUREEXT)(getProcAddr("glBindImageTextureEXT")); pBindImageTextureEXT == nil {
    EXT_shader_image_load_store = false
  }
  if pBindImageTextures = (C.PBINDIMAGETEXTURES)(getProcAddr("glBindImageTextures")); pBindImageTextures == nil {
    ARB_multi_bind = false
  }
  if pBindLightParameterEXT = (C.PBINDLIGHTPARAMETEREXT)(getProcAddr("glBindLightParameterEXT")); pBindLightParameterEXT == nil {
    EXT_vertex_shader = false
  }
  if pBindMaterialParameterEXT = (C.PBINDMATERIALPARAMETEREXT)(getProcAddr("glBindMaterialParameterEXT")); pBindMaterialParameterEXT == nil {
    EXT_vertex_shader = false
  }
  if pBindMultiTextureEXT = (C.PBINDMULTITEXTUREEXT)(getProcAddr("glBindMultiTextureEXT")); pBindMultiTextureEXT == nil {
    EXT_direct_state_access = false
  }
  if pBindParameterEXT = (C.PBINDPARAMETEREXT)(getProcAddr("glBindParameterEXT")); pBindParameterEXT == nil {
    EXT_vertex_shader = false
  }
  if pBindProgramARB = (C.PBINDPROGRAMARB)(getProcAddr("glBindProgramARB")); pBindProgramARB == nil {
    ARB_fragment_program = false
    ARB_vertex_program = false
  }
  if pBindProgramNV = (C.PBINDPROGRAMNV)(getProcAddr("glBindProgramNV")); pBindProgramNV == nil {
    NV_vertex_program = false
  }
  if pBindProgramPipeline = (C.PBINDPROGRAMPIPELINE)(getProcAddr("glBindProgramPipeline")); pBindProgramPipeline == nil {
    ARB_separate_shader_objects = false
    return errors.New("glBindProgramPipeline")
  }
  if pBindProgramPipelineEXT = (C.PBINDPROGRAMPIPELINEEXT)(getProcAddr("glBindProgramPipelineEXT")); pBindProgramPipelineEXT == nil {
    EXT_separate_shader_objects = false
  }
  if pBindRenderbuffer = (C.PBINDRENDERBUFFER)(getProcAddr("glBindRenderbuffer")); pBindRenderbuffer == nil {
    ARB_framebuffer_object = false
    return errors.New("glBindRenderbuffer")
  }
  if pBindRenderbufferEXT = (C.PBINDRENDERBUFFEREXT)(getProcAddr("glBindRenderbufferEXT")); pBindRenderbufferEXT == nil {
    EXT_framebuffer_object = false
  }
  if pBindSampler = (C.PBINDSAMPLER)(getProcAddr("glBindSampler")); pBindSampler == nil {
    ARB_sampler_objects = false
    return errors.New("glBindSampler")
  }
  if pBindSamplers = (C.PBINDSAMPLERS)(getProcAddr("glBindSamplers")); pBindSamplers == nil {
    ARB_multi_bind = false
  }
  if pBindTexGenParameterEXT = (C.PBINDTEXGENPARAMETEREXT)(getProcAddr("glBindTexGenParameterEXT")); pBindTexGenParameterEXT == nil {
    EXT_vertex_shader = false
  }
  if pBindTexture = (C.PBINDTEXTURE)(getProcAddr("glBindTexture")); pBindTexture == nil {
    return errors.New("glBindTexture")
  }
  if pBindTextureEXT = (C.PBINDTEXTUREEXT)(getProcAddr("glBindTextureEXT")); pBindTextureEXT == nil {
    EXT_texture_object = false
  }
  if pBindTextureUnitParameterEXT = (C.PBINDTEXTUREUNITPARAMETEREXT)(getProcAddr("glBindTextureUnitParameterEXT")); pBindTextureUnitParameterEXT == nil {
    EXT_vertex_shader = false
  }
  if pBindTextures = (C.PBINDTEXTURES)(getProcAddr("glBindTextures")); pBindTextures == nil {
    ARB_multi_bind = false
  }
  if pBindTransformFeedback = (C.PBINDTRANSFORMFEEDBACK)(getProcAddr("glBindTransformFeedback")); pBindTransformFeedback == nil {
    ARB_transform_feedback2 = false
    return errors.New("glBindTransformFeedback")
  }
  if pBindTransformFeedbackNV = (C.PBINDTRANSFORMFEEDBACKNV)(getProcAddr("glBindTransformFeedbackNV")); pBindTransformFeedbackNV == nil {
    NV_transform_feedback2 = false
  }
  if pBindVertexArray = (C.PBINDVERTEXARRAY)(getProcAddr("glBindVertexArray")); pBindVertexArray == nil {
    ARB_vertex_array_object = false
    return errors.New("glBindVertexArray")
  }
  if pBindVertexArrayAPPLE = (C.PBINDVERTEXARRAYAPPLE)(getProcAddr("glBindVertexArrayAPPLE")); pBindVertexArrayAPPLE == nil {
    APPLE_vertex_array_object = false
  }
  if pBindVertexBuffer = (C.PBINDVERTEXBUFFER)(getProcAddr("glBindVertexBuffer")); pBindVertexBuffer == nil {
    ARB_vertex_attrib_binding = false
  }
  if pBindVertexBuffers = (C.PBINDVERTEXBUFFERS)(getProcAddr("glBindVertexBuffers")); pBindVertexBuffers == nil {
    ARB_multi_bind = false
  }
  if pBindVertexShaderEXT = (C.PBINDVERTEXSHADEREXT)(getProcAddr("glBindVertexShaderEXT")); pBindVertexShaderEXT == nil {
    EXT_vertex_shader = false
  }
  if pBindVideoCaptureStreamBufferNV = (C.PBINDVIDEOCAPTURESTREAMBUFFERNV)(getProcAddr("glBindVideoCaptureStreamBufferNV")); pBindVideoCaptureStreamBufferNV == nil {
    NV_video_capture = false
  }
  if pBindVideoCaptureStreamTextureNV = (C.PBINDVIDEOCAPTURESTREAMTEXTURENV)(getProcAddr("glBindVideoCaptureStreamTextureNV")); pBindVideoCaptureStreamTextureNV == nil {
    NV_video_capture = false
  }
  if pBinormal3bEXT = (C.PBINORMAL3BEXT)(getProcAddr("glBinormal3bEXT")); pBinormal3bEXT == nil {
    EXT_coordinate_frame = false
  }
  if pBinormal3bvEXT = (C.PBINORMAL3BVEXT)(getProcAddr("glBinormal3bvEXT")); pBinormal3bvEXT == nil {
    EXT_coordinate_frame = false
  }
  if pBinormal3dEXT = (C.PBINORMAL3DEXT)(getProcAddr("glBinormal3dEXT")); pBinormal3dEXT == nil {
    EXT_coordinate_frame = false
  }
  if pBinormal3dvEXT = (C.PBINORMAL3DVEXT)(getProcAddr("glBinormal3dvEXT")); pBinormal3dvEXT == nil {
    EXT_coordinate_frame = false
  }
  if pBinormal3fEXT = (C.PBINORMAL3FEXT)(getProcAddr("glBinormal3fEXT")); pBinormal3fEXT == nil {
    EXT_coordinate_frame = false
  }
  if pBinormal3fvEXT = (C.PBINORMAL3FVEXT)(getProcAddr("glBinormal3fvEXT")); pBinormal3fvEXT == nil {
    EXT_coordinate_frame = false
  }
  if pBinormal3iEXT = (C.PBINORMAL3IEXT)(getProcAddr("glBinormal3iEXT")); pBinormal3iEXT == nil {
    EXT_coordinate_frame = false
  }
  if pBinormal3ivEXT = (C.PBINORMAL3IVEXT)(getProcAddr("glBinormal3ivEXT")); pBinormal3ivEXT == nil {
    EXT_coordinate_frame = false
  }
  if pBinormal3sEXT = (C.PBINORMAL3SEXT)(getProcAddr("glBinormal3sEXT")); pBinormal3sEXT == nil {
    EXT_coordinate_frame = false
  }
  if pBinormal3svEXT = (C.PBINORMAL3SVEXT)(getProcAddr("glBinormal3svEXT")); pBinormal3svEXT == nil {
    EXT_coordinate_frame = false
  }
  if pBinormalPointerEXT = (C.PBINORMALPOINTEREXT)(getProcAddr("glBinormalPointerEXT")); pBinormalPointerEXT == nil {
    EXT_coordinate_frame = false
  }
  if pBitmapxOES = (C.PBITMAPXOES)(getProcAddr("glBitmapxOES")); pBitmapxOES == nil {
    OES_fixed_point = false
  }
  if pBlendBarrierNV = (C.PBLENDBARRIERNV)(getProcAddr("glBlendBarrierNV")); pBlendBarrierNV == nil {
    NV_blend_equation_advanced = false
  }
  if pBlendColor = (C.PBLENDCOLOR)(getProcAddr("glBlendColor")); pBlendColor == nil {
    ARB_imaging = false
    return errors.New("glBlendColor")
  }
  if pBlendColorEXT = (C.PBLENDCOLOREXT)(getProcAddr("glBlendColorEXT")); pBlendColorEXT == nil {
    EXT_blend_color = false
  }
  if pBlendColorxOES = (C.PBLENDCOLORXOES)(getProcAddr("glBlendColorxOES")); pBlendColorxOES == nil {
    OES_fixed_point = false
  }
  if pBlendEquation = (C.PBLENDEQUATION)(getProcAddr("glBlendEquation")); pBlendEquation == nil {
    ARB_imaging = false
    return errors.New("glBlendEquation")
  }
  if pBlendEquationEXT = (C.PBLENDEQUATIONEXT)(getProcAddr("glBlendEquationEXT")); pBlendEquationEXT == nil {
    EXT_blend_minmax = false
  }
  if pBlendEquationIndexedAMD = (C.PBLENDEQUATIONINDEXEDAMD)(getProcAddr("glBlendEquationIndexedAMD")); pBlendEquationIndexedAMD == nil {
    AMD_draw_buffers_blend = false
  }
  if pBlendEquationSeparate = (C.PBLENDEQUATIONSEPARATE)(getProcAddr("glBlendEquationSeparate")); pBlendEquationSeparate == nil {
    return errors.New("glBlendEquationSeparate")
  }
  if pBlendEquationSeparateEXT = (C.PBLENDEQUATIONSEPARATEEXT)(getProcAddr("glBlendEquationSeparateEXT")); pBlendEquationSeparateEXT == nil {
    EXT_blend_equation_separate = false
  }
  if pBlendEquationSeparateIndexedAMD = (C.PBLENDEQUATIONSEPARATEINDEXEDAMD)(getProcAddr("glBlendEquationSeparateIndexedAMD")); pBlendEquationSeparateIndexedAMD == nil {
    AMD_draw_buffers_blend = false
  }
  if pBlendEquationSeparatei = (C.PBLENDEQUATIONSEPARATEI)(getProcAddr("glBlendEquationSeparatei")); pBlendEquationSeparatei == nil {
    return errors.New("glBlendEquationSeparatei")
  }
  if pBlendEquationSeparateiARB = (C.PBLENDEQUATIONSEPARATEIARB)(getProcAddr("glBlendEquationSeparateiARB")); pBlendEquationSeparateiARB == nil {
    ARB_draw_buffers_blend = false
  }
  if pBlendEquationi = (C.PBLENDEQUATIONI)(getProcAddr("glBlendEquationi")); pBlendEquationi == nil {
    return errors.New("glBlendEquationi")
  }
  if pBlendEquationiARB = (C.PBLENDEQUATIONIARB)(getProcAddr("glBlendEquationiARB")); pBlendEquationiARB == nil {
    ARB_draw_buffers_blend = false
  }
  if pBlendFunc = (C.PBLENDFUNC)(getProcAddr("glBlendFunc")); pBlendFunc == nil {
    return errors.New("glBlendFunc")
  }
  if pBlendFuncIndexedAMD = (C.PBLENDFUNCINDEXEDAMD)(getProcAddr("glBlendFuncIndexedAMD")); pBlendFuncIndexedAMD == nil {
    AMD_draw_buffers_blend = false
  }
  if pBlendFuncSeparate = (C.PBLENDFUNCSEPARATE)(getProcAddr("glBlendFuncSeparate")); pBlendFuncSeparate == nil {
    return errors.New("glBlendFuncSeparate")
  }
  if pBlendFuncSeparateEXT = (C.PBLENDFUNCSEPARATEEXT)(getProcAddr("glBlendFuncSeparateEXT")); pBlendFuncSeparateEXT == nil {
    EXT_blend_func_separate = false
  }
  if pBlendFuncSeparateINGR = (C.PBLENDFUNCSEPARATEINGR)(getProcAddr("glBlendFuncSeparateINGR")); pBlendFuncSeparateINGR == nil {
    INGR_blend_func_separate = false
  }
  if pBlendFuncSeparateIndexedAMD = (C.PBLENDFUNCSEPARATEINDEXEDAMD)(getProcAddr("glBlendFuncSeparateIndexedAMD")); pBlendFuncSeparateIndexedAMD == nil {
    AMD_draw_buffers_blend = false
  }
  if pBlendFuncSeparatei = (C.PBLENDFUNCSEPARATEI)(getProcAddr("glBlendFuncSeparatei")); pBlendFuncSeparatei == nil {
    return errors.New("glBlendFuncSeparatei")
  }
  if pBlendFuncSeparateiARB = (C.PBLENDFUNCSEPARATEIARB)(getProcAddr("glBlendFuncSeparateiARB")); pBlendFuncSeparateiARB == nil {
    ARB_draw_buffers_blend = false
  }
  if pBlendFunci = (C.PBLENDFUNCI)(getProcAddr("glBlendFunci")); pBlendFunci == nil {
    return errors.New("glBlendFunci")
  }
  if pBlendFunciARB = (C.PBLENDFUNCIARB)(getProcAddr("glBlendFunciARB")); pBlendFunciARB == nil {
    ARB_draw_buffers_blend = false
  }
  if pBlendParameteriNV = (C.PBLENDPARAMETERINV)(getProcAddr("glBlendParameteriNV")); pBlendParameteriNV == nil {
    NV_blend_equation_advanced = false
  }
  if pBlitFramebuffer = (C.PBLITFRAMEBUFFER)(getProcAddr("glBlitFramebuffer")); pBlitFramebuffer == nil {
    ARB_framebuffer_object = false
    return errors.New("glBlitFramebuffer")
  }
  if pBlitFramebufferEXT = (C.PBLITFRAMEBUFFEREXT)(getProcAddr("glBlitFramebufferEXT")); pBlitFramebufferEXT == nil {
    EXT_framebuffer_blit = false
  }
  if pBufferAddressRangeNV = (C.PBUFFERADDRESSRANGENV)(getProcAddr("glBufferAddressRangeNV")); pBufferAddressRangeNV == nil {
    NV_vertex_buffer_unified_memory = false
  }
  if pBufferData = (C.PBUFFERDATA)(getProcAddr("glBufferData")); pBufferData == nil {
    return errors.New("glBufferData")
  }
  if pBufferDataARB = (C.PBUFFERDATAARB)(getProcAddr("glBufferDataARB")); pBufferDataARB == nil {
    ARB_vertex_buffer_object = false
  }
  if pBufferParameteriAPPLE = (C.PBUFFERPARAMETERIAPPLE)(getProcAddr("glBufferParameteriAPPLE")); pBufferParameteriAPPLE == nil {
    APPLE_flush_buffer_range = false
  }
  if pBufferStorage = (C.PBUFFERSTORAGE)(getProcAddr("glBufferStorage")); pBufferStorage == nil {
    ARB_buffer_storage = false
  }
  if pBufferSubData = (C.PBUFFERSUBDATA)(getProcAddr("glBufferSubData")); pBufferSubData == nil {
    return errors.New("glBufferSubData")
  }
  if pBufferSubDataARB = (C.PBUFFERSUBDATAARB)(getProcAddr("glBufferSubDataARB")); pBufferSubDataARB == nil {
    ARB_vertex_buffer_object = false
  }
  if pCheckFramebufferStatus = (C.PCHECKFRAMEBUFFERSTATUS)(getProcAddr("glCheckFramebufferStatus")); pCheckFramebufferStatus == nil {
    ARB_framebuffer_object = false
    return errors.New("glCheckFramebufferStatus")
  }
  if pCheckFramebufferStatusEXT = (C.PCHECKFRAMEBUFFERSTATUSEXT)(getProcAddr("glCheckFramebufferStatusEXT")); pCheckFramebufferStatusEXT == nil {
    EXT_framebuffer_object = false
  }
  if pCheckNamedFramebufferStatusEXT = (C.PCHECKNAMEDFRAMEBUFFERSTATUSEXT)(getProcAddr("glCheckNamedFramebufferStatusEXT")); pCheckNamedFramebufferStatusEXT == nil {
    EXT_direct_state_access = false
  }
  if pClampColor = (C.PCLAMPCOLOR)(getProcAddr("glClampColor")); pClampColor == nil {
    return errors.New("glClampColor")
  }
  if pClampColorARB = (C.PCLAMPCOLORARB)(getProcAddr("glClampColorARB")); pClampColorARB == nil {
    ARB_color_buffer_float = false
  }
  if pClear = (C.PCLEAR)(getProcAddr("glClear")); pClear == nil {
    return errors.New("glClear")
  }
  if pClearAccumxOES = (C.PCLEARACCUMXOES)(getProcAddr("glClearAccumxOES")); pClearAccumxOES == nil {
    OES_fixed_point = false
  }
  if pClearBufferData = (C.PCLEARBUFFERDATA)(getProcAddr("glClearBufferData")); pClearBufferData == nil {
    ARB_clear_buffer_object = false
  }
  if pClearBufferSubData = (C.PCLEARBUFFERSUBDATA)(getProcAddr("glClearBufferSubData")); pClearBufferSubData == nil {
    ARB_clear_buffer_object = false
  }
  if pClearBufferfi = (C.PCLEARBUFFERFI)(getProcAddr("glClearBufferfi")); pClearBufferfi == nil {
    return errors.New("glClearBufferfi")
  }
  if pClearBufferfv = (C.PCLEARBUFFERFV)(getProcAddr("glClearBufferfv")); pClearBufferfv == nil {
    return errors.New("glClearBufferfv")
  }
  if pClearBufferiv = (C.PCLEARBUFFERIV)(getProcAddr("glClearBufferiv")); pClearBufferiv == nil {
    return errors.New("glClearBufferiv")
  }
  if pClearBufferuiv = (C.PCLEARBUFFERUIV)(getProcAddr("glClearBufferuiv")); pClearBufferuiv == nil {
    return errors.New("glClearBufferuiv")
  }
  if pClearColor = (C.PCLEARCOLOR)(getProcAddr("glClearColor")); pClearColor == nil {
    return errors.New("glClearColor")
  }
  if pClearColorIiEXT = (C.PCLEARCOLORIIEXT)(getProcAddr("glClearColorIiEXT")); pClearColorIiEXT == nil {
    EXT_texture_integer = false
  }
  if pClearColorIuiEXT = (C.PCLEARCOLORIUIEXT)(getProcAddr("glClearColorIuiEXT")); pClearColorIuiEXT == nil {
    EXT_texture_integer = false
  }
  if pClearColorxOES = (C.PCLEARCOLORXOES)(getProcAddr("glClearColorxOES")); pClearColorxOES == nil {
    OES_fixed_point = false
  }
  if pClearDepth = (C.PCLEARDEPTH)(getProcAddr("glClearDepth")); pClearDepth == nil {
    return errors.New("glClearDepth")
  }
  if pClearDepthdNV = (C.PCLEARDEPTHDNV)(getProcAddr("glClearDepthdNV")); pClearDepthdNV == nil {
    NV_depth_buffer_float = false
  }
  if pClearDepthf = (C.PCLEARDEPTHF)(getProcAddr("glClearDepthf")); pClearDepthf == nil {
    ARB_ES2_compatibility = false
    return errors.New("glClearDepthf")
  }
  if pClearDepthfOES = (C.PCLEARDEPTHFOES)(getProcAddr("glClearDepthfOES")); pClearDepthfOES == nil {
    OES_single_precision = false
  }
  if pClearDepthxOES = (C.PCLEARDEPTHXOES)(getProcAddr("glClearDepthxOES")); pClearDepthxOES == nil {
    OES_fixed_point = false
  }
  if pClearNamedBufferDataEXT = (C.PCLEARNAMEDBUFFERDATAEXT)(getProcAddr("glClearNamedBufferDataEXT")); pClearNamedBufferDataEXT == nil {
    EXT_direct_state_access = false
  }
  if pClearNamedBufferSubDataEXT = (C.PCLEARNAMEDBUFFERSUBDATAEXT)(getProcAddr("glClearNamedBufferSubDataEXT")); pClearNamedBufferSubDataEXT == nil {
    EXT_direct_state_access = false
  }
  if pClearStencil = (C.PCLEARSTENCIL)(getProcAddr("glClearStencil")); pClearStencil == nil {
    return errors.New("glClearStencil")
  }
  if pClearTexImage = (C.PCLEARTEXIMAGE)(getProcAddr("glClearTexImage")); pClearTexImage == nil {
    ARB_clear_texture = false
  }
  if pClearTexSubImage = (C.PCLEARTEXSUBIMAGE)(getProcAddr("glClearTexSubImage")); pClearTexSubImage == nil {
    ARB_clear_texture = false
  }
  if pClientActiveTextureARB = (C.PCLIENTACTIVETEXTUREARB)(getProcAddr("glClientActiveTextureARB")); pClientActiveTextureARB == nil {
    ARB_multitexture = false
  }
  if pClientActiveVertexStreamATI = (C.PCLIENTACTIVEVERTEXSTREAMATI)(getProcAddr("glClientActiveVertexStreamATI")); pClientActiveVertexStreamATI == nil {
    ATI_vertex_streams = false
  }
  if pClientAttribDefaultEXT = (C.PCLIENTATTRIBDEFAULTEXT)(getProcAddr("glClientAttribDefaultEXT")); pClientAttribDefaultEXT == nil {
    EXT_direct_state_access = false
  }
  if pClientWaitSync = (C.PCLIENTWAITSYNC)(getProcAddr("glClientWaitSync")); pClientWaitSync == nil {
    ARB_sync = false
    return errors.New("glClientWaitSync")
  }
  if pClipPlanefOES = (C.PCLIPPLANEFOES)(getProcAddr("glClipPlanefOES")); pClipPlanefOES == nil {
    OES_single_precision = false
  }
  if pClipPlanexOES = (C.PCLIPPLANEXOES)(getProcAddr("glClipPlanexOES")); pClipPlanexOES == nil {
    OES_fixed_point = false
  }
  if pColor3fVertex3fSUN = (C.PCOLOR3FVERTEX3FSUN)(getProcAddr("glColor3fVertex3fSUN")); pColor3fVertex3fSUN == nil {
    SUN_vertex = false
  }
  if pColor3fVertex3fvSUN = (C.PCOLOR3FVERTEX3FVSUN)(getProcAddr("glColor3fVertex3fvSUN")); pColor3fVertex3fvSUN == nil {
    SUN_vertex = false
  }
  if pColor3hNV = (C.PCOLOR3HNV)(getProcAddr("glColor3hNV")); pColor3hNV == nil {
    NV_half_float = false
  }
  if pColor3hvNV = (C.PCOLOR3HVNV)(getProcAddr("glColor3hvNV")); pColor3hvNV == nil {
    NV_half_float = false
  }
  if pColor3xOES = (C.PCOLOR3XOES)(getProcAddr("glColor3xOES")); pColor3xOES == nil {
    OES_fixed_point = false
  }
  if pColor3xvOES = (C.PCOLOR3XVOES)(getProcAddr("glColor3xvOES")); pColor3xvOES == nil {
    OES_fixed_point = false
  }
  if pColor4fNormal3fVertex3fSUN = (C.PCOLOR4FNORMAL3FVERTEX3FSUN)(getProcAddr("glColor4fNormal3fVertex3fSUN")); pColor4fNormal3fVertex3fSUN == nil {
    SUN_vertex = false
  }
  if pColor4fNormal3fVertex3fvSUN = (C.PCOLOR4FNORMAL3FVERTEX3FVSUN)(getProcAddr("glColor4fNormal3fVertex3fvSUN")); pColor4fNormal3fVertex3fvSUN == nil {
    SUN_vertex = false
  }
  if pColor4hNV = (C.PCOLOR4HNV)(getProcAddr("glColor4hNV")); pColor4hNV == nil {
    NV_half_float = false
  }
  if pColor4hvNV = (C.PCOLOR4HVNV)(getProcAddr("glColor4hvNV")); pColor4hvNV == nil {
    NV_half_float = false
  }
  if pColor4ubVertex2fSUN = (C.PCOLOR4UBVERTEX2FSUN)(getProcAddr("glColor4ubVertex2fSUN")); pColor4ubVertex2fSUN == nil {
    SUN_vertex = false
  }
  if pColor4ubVertex2fvSUN = (C.PCOLOR4UBVERTEX2FVSUN)(getProcAddr("glColor4ubVertex2fvSUN")); pColor4ubVertex2fvSUN == nil {
    SUN_vertex = false
  }
  if pColor4ubVertex3fSUN = (C.PCOLOR4UBVERTEX3FSUN)(getProcAddr("glColor4ubVertex3fSUN")); pColor4ubVertex3fSUN == nil {
    SUN_vertex = false
  }
  if pColor4ubVertex3fvSUN = (C.PCOLOR4UBVERTEX3FVSUN)(getProcAddr("glColor4ubVertex3fvSUN")); pColor4ubVertex3fvSUN == nil {
    SUN_vertex = false
  }
  if pColor4xOES = (C.PCOLOR4XOES)(getProcAddr("glColor4xOES")); pColor4xOES == nil {
    OES_fixed_point = false
  }
  if pColor4xvOES = (C.PCOLOR4XVOES)(getProcAddr("glColor4xvOES")); pColor4xvOES == nil {
    OES_fixed_point = false
  }
  if pColorFormatNV = (C.PCOLORFORMATNV)(getProcAddr("glColorFormatNV")); pColorFormatNV == nil {
    NV_vertex_buffer_unified_memory = false
  }
  if pColorFragmentOp1ATI = (C.PCOLORFRAGMENTOP1ATI)(getProcAddr("glColorFragmentOp1ATI")); pColorFragmentOp1ATI == nil {
    ATI_fragment_shader = false
  }
  if pColorFragmentOp2ATI = (C.PCOLORFRAGMENTOP2ATI)(getProcAddr("glColorFragmentOp2ATI")); pColorFragmentOp2ATI == nil {
    ATI_fragment_shader = false
  }
  if pColorFragmentOp3ATI = (C.PCOLORFRAGMENTOP3ATI)(getProcAddr("glColorFragmentOp3ATI")); pColorFragmentOp3ATI == nil {
    ATI_fragment_shader = false
  }
  if pColorMask = (C.PCOLORMASK)(getProcAddr("glColorMask")); pColorMask == nil {
    return errors.New("glColorMask")
  }
  if pColorMaskIndexedEXT = (C.PCOLORMASKINDEXEDEXT)(getProcAddr("glColorMaskIndexedEXT")); pColorMaskIndexedEXT == nil {
    EXT_draw_buffers2 = false
  }
  if pColorMaski = (C.PCOLORMASKI)(getProcAddr("glColorMaski")); pColorMaski == nil {
    return errors.New("glColorMaski")
  }
  if pColorPointerEXT = (C.PCOLORPOINTEREXT)(getProcAddr("glColorPointerEXT")); pColorPointerEXT == nil {
    EXT_vertex_array = false
  }
  if pColorPointerListIBM = (C.PCOLORPOINTERLISTIBM)(getProcAddr("glColorPointerListIBM")); pColorPointerListIBM == nil {
    IBM_vertex_array_lists = false
  }
  if pColorPointervINTEL = (C.PCOLORPOINTERVINTEL)(getProcAddr("glColorPointervINTEL")); pColorPointervINTEL == nil {
    INTEL_parallel_arrays = false
  }
  if pColorSubTableEXT = (C.PCOLORSUBTABLEEXT)(getProcAddr("glColorSubTableEXT")); pColorSubTableEXT == nil {
    EXT_color_subtable = false
  }
  if pColorTableEXT = (C.PCOLORTABLEEXT)(getProcAddr("glColorTableEXT")); pColorTableEXT == nil {
    EXT_paletted_texture = false
  }
  if pColorTableParameterfvSGI = (C.PCOLORTABLEPARAMETERFVSGI)(getProcAddr("glColorTableParameterfvSGI")); pColorTableParameterfvSGI == nil {
    SGI_color_table = false
  }
  if pColorTableParameterivSGI = (C.PCOLORTABLEPARAMETERIVSGI)(getProcAddr("glColorTableParameterivSGI")); pColorTableParameterivSGI == nil {
    SGI_color_table = false
  }
  if pColorTableSGI = (C.PCOLORTABLESGI)(getProcAddr("glColorTableSGI")); pColorTableSGI == nil {
    SGI_color_table = false
  }
  if pCombinerInputNV = (C.PCOMBINERINPUTNV)(getProcAddr("glCombinerInputNV")); pCombinerInputNV == nil {
    NV_register_combiners = false
  }
  if pCombinerOutputNV = (C.PCOMBINEROUTPUTNV)(getProcAddr("glCombinerOutputNV")); pCombinerOutputNV == nil {
    NV_register_combiners = false
  }
  if pCombinerParameterfNV = (C.PCOMBINERPARAMETERFNV)(getProcAddr("glCombinerParameterfNV")); pCombinerParameterfNV == nil {
    NV_register_combiners = false
  }
  if pCombinerParameterfvNV = (C.PCOMBINERPARAMETERFVNV)(getProcAddr("glCombinerParameterfvNV")); pCombinerParameterfvNV == nil {
    NV_register_combiners = false
  }
  if pCombinerParameteriNV = (C.PCOMBINERPARAMETERINV)(getProcAddr("glCombinerParameteriNV")); pCombinerParameteriNV == nil {
    NV_register_combiners = false
  }
  if pCombinerParameterivNV = (C.PCOMBINERPARAMETERIVNV)(getProcAddr("glCombinerParameterivNV")); pCombinerParameterivNV == nil {
    NV_register_combiners = false
  }
  if pCombinerStageParameterfvNV = (C.PCOMBINERSTAGEPARAMETERFVNV)(getProcAddr("glCombinerStageParameterfvNV")); pCombinerStageParameterfvNV == nil {
    NV_register_combiners2 = false
  }
  if pCompileShader = (C.PCOMPILESHADER)(getProcAddr("glCompileShader")); pCompileShader == nil {
    return errors.New("glCompileShader")
  }
  if pCompileShaderARB = (C.PCOMPILESHADERARB)(getProcAddr("glCompileShaderARB")); pCompileShaderARB == nil {
    ARB_shader_objects = false
  }
  if pCompileShaderIncludeARB = (C.PCOMPILESHADERINCLUDEARB)(getProcAddr("glCompileShaderIncludeARB")); pCompileShaderIncludeARB == nil {
    ARB_shading_language_include = false
  }
  if pCompressedMultiTexImage1DEXT = (C.PCOMPRESSEDMULTITEXIMAGE1DEXT)(getProcAddr("glCompressedMultiTexImage1DEXT")); pCompressedMultiTexImage1DEXT == nil {
    EXT_direct_state_access = false
  }
  if pCompressedMultiTexImage2DEXT = (C.PCOMPRESSEDMULTITEXIMAGE2DEXT)(getProcAddr("glCompressedMultiTexImage2DEXT")); pCompressedMultiTexImage2DEXT == nil {
    EXT_direct_state_access = false
  }
  if pCompressedMultiTexImage3DEXT = (C.PCOMPRESSEDMULTITEXIMAGE3DEXT)(getProcAddr("glCompressedMultiTexImage3DEXT")); pCompressedMultiTexImage3DEXT == nil {
    EXT_direct_state_access = false
  }
  if pCompressedMultiTexSubImage1DEXT = (C.PCOMPRESSEDMULTITEXSUBIMAGE1DEXT)(getProcAddr("glCompressedMultiTexSubImage1DEXT")); pCompressedMultiTexSubImage1DEXT == nil {
    EXT_direct_state_access = false
  }
  if pCompressedMultiTexSubImage2DEXT = (C.PCOMPRESSEDMULTITEXSUBIMAGE2DEXT)(getProcAddr("glCompressedMultiTexSubImage2DEXT")); pCompressedMultiTexSubImage2DEXT == nil {
    EXT_direct_state_access = false
  }
  if pCompressedMultiTexSubImage3DEXT = (C.PCOMPRESSEDMULTITEXSUBIMAGE3DEXT)(getProcAddr("glCompressedMultiTexSubImage3DEXT")); pCompressedMultiTexSubImage3DEXT == nil {
    EXT_direct_state_access = false
  }
  if pCompressedTexImage1D = (C.PCOMPRESSEDTEXIMAGE1D)(getProcAddr("glCompressedTexImage1D")); pCompressedTexImage1D == nil {
    return errors.New("glCompressedTexImage1D")
  }
  if pCompressedTexImage1DARB = (C.PCOMPRESSEDTEXIMAGE1DARB)(getProcAddr("glCompressedTexImage1DARB")); pCompressedTexImage1DARB == nil {
    ARB_texture_compression = false
  }
  if pCompressedTexImage2D = (C.PCOMPRESSEDTEXIMAGE2D)(getProcAddr("glCompressedTexImage2D")); pCompressedTexImage2D == nil {
    return errors.New("glCompressedTexImage2D")
  }
  if pCompressedTexImage2DARB = (C.PCOMPRESSEDTEXIMAGE2DARB)(getProcAddr("glCompressedTexImage2DARB")); pCompressedTexImage2DARB == nil {
    ARB_texture_compression = false
  }
  if pCompressedTexImage3D = (C.PCOMPRESSEDTEXIMAGE3D)(getProcAddr("glCompressedTexImage3D")); pCompressedTexImage3D == nil {
    return errors.New("glCompressedTexImage3D")
  }
  if pCompressedTexImage3DARB = (C.PCOMPRESSEDTEXIMAGE3DARB)(getProcAddr("glCompressedTexImage3DARB")); pCompressedTexImage3DARB == nil {
    ARB_texture_compression = false
  }
  if pCompressedTexSubImage1D = (C.PCOMPRESSEDTEXSUBIMAGE1D)(getProcAddr("glCompressedTexSubImage1D")); pCompressedTexSubImage1D == nil {
    return errors.New("glCompressedTexSubImage1D")
  }
  if pCompressedTexSubImage1DARB = (C.PCOMPRESSEDTEXSUBIMAGE1DARB)(getProcAddr("glCompressedTexSubImage1DARB")); pCompressedTexSubImage1DARB == nil {
    ARB_texture_compression = false
  }
  if pCompressedTexSubImage2D = (C.PCOMPRESSEDTEXSUBIMAGE2D)(getProcAddr("glCompressedTexSubImage2D")); pCompressedTexSubImage2D == nil {
    return errors.New("glCompressedTexSubImage2D")
  }
  if pCompressedTexSubImage2DARB = (C.PCOMPRESSEDTEXSUBIMAGE2DARB)(getProcAddr("glCompressedTexSubImage2DARB")); pCompressedTexSubImage2DARB == nil {
    ARB_texture_compression = false
  }
  if pCompressedTexSubImage3D = (C.PCOMPRESSEDTEXSUBIMAGE3D)(getProcAddr("glCompressedTexSubImage3D")); pCompressedTexSubImage3D == nil {
    return errors.New("glCompressedTexSubImage3D")
  }
  if pCompressedTexSubImage3DARB = (C.PCOMPRESSEDTEXSUBIMAGE3DARB)(getProcAddr("glCompressedTexSubImage3DARB")); pCompressedTexSubImage3DARB == nil {
    ARB_texture_compression = false
  }
  if pCompressedTextureImage1DEXT = (C.PCOMPRESSEDTEXTUREIMAGE1DEXT)(getProcAddr("glCompressedTextureImage1DEXT")); pCompressedTextureImage1DEXT == nil {
    EXT_direct_state_access = false
  }
  if pCompressedTextureImage2DEXT = (C.PCOMPRESSEDTEXTUREIMAGE2DEXT)(getProcAddr("glCompressedTextureImage2DEXT")); pCompressedTextureImage2DEXT == nil {
    EXT_direct_state_access = false
  }
  if pCompressedTextureImage3DEXT = (C.PCOMPRESSEDTEXTUREIMAGE3DEXT)(getProcAddr("glCompressedTextureImage3DEXT")); pCompressedTextureImage3DEXT == nil {
    EXT_direct_state_access = false
  }
  if pCompressedTextureSubImage1DEXT = (C.PCOMPRESSEDTEXTURESUBIMAGE1DEXT)(getProcAddr("glCompressedTextureSubImage1DEXT")); pCompressedTextureSubImage1DEXT == nil {
    EXT_direct_state_access = false
  }
  if pCompressedTextureSubImage2DEXT = (C.PCOMPRESSEDTEXTURESUBIMAGE2DEXT)(getProcAddr("glCompressedTextureSubImage2DEXT")); pCompressedTextureSubImage2DEXT == nil {
    EXT_direct_state_access = false
  }
  if pCompressedTextureSubImage3DEXT = (C.PCOMPRESSEDTEXTURESUBIMAGE3DEXT)(getProcAddr("glCompressedTextureSubImage3DEXT")); pCompressedTextureSubImage3DEXT == nil {
    EXT_direct_state_access = false
  }
  if pConvolutionFilter1DEXT = (C.PCONVOLUTIONFILTER1DEXT)(getProcAddr("glConvolutionFilter1DEXT")); pConvolutionFilter1DEXT == nil {
    EXT_convolution = false
  }
  if pConvolutionFilter2DEXT = (C.PCONVOLUTIONFILTER2DEXT)(getProcAddr("glConvolutionFilter2DEXT")); pConvolutionFilter2DEXT == nil {
    EXT_convolution = false
  }
  if pConvolutionParameterfEXT = (C.PCONVOLUTIONPARAMETERFEXT)(getProcAddr("glConvolutionParameterfEXT")); pConvolutionParameterfEXT == nil {
    EXT_convolution = false
  }
  if pConvolutionParameterfvEXT = (C.PCONVOLUTIONPARAMETERFVEXT)(getProcAddr("glConvolutionParameterfvEXT")); pConvolutionParameterfvEXT == nil {
    EXT_convolution = false
  }
  if pConvolutionParameteriEXT = (C.PCONVOLUTIONPARAMETERIEXT)(getProcAddr("glConvolutionParameteriEXT")); pConvolutionParameteriEXT == nil {
    EXT_convolution = false
  }
  if pConvolutionParameterivEXT = (C.PCONVOLUTIONPARAMETERIVEXT)(getProcAddr("glConvolutionParameterivEXT")); pConvolutionParameterivEXT == nil {
    EXT_convolution = false
  }
  if pConvolutionParameterxOES = (C.PCONVOLUTIONPARAMETERXOES)(getProcAddr("glConvolutionParameterxOES")); pConvolutionParameterxOES == nil {
    OES_fixed_point = false
  }
  if pConvolutionParameterxvOES = (C.PCONVOLUTIONPARAMETERXVOES)(getProcAddr("glConvolutionParameterxvOES")); pConvolutionParameterxvOES == nil {
    OES_fixed_point = false
  }
  if pCopyBufferSubData = (C.PCOPYBUFFERSUBDATA)(getProcAddr("glCopyBufferSubData")); pCopyBufferSubData == nil {
    ARB_copy_buffer = false
    return errors.New("glCopyBufferSubData")
  }
  if pCopyColorSubTableEXT = (C.PCOPYCOLORSUBTABLEEXT)(getProcAddr("glCopyColorSubTableEXT")); pCopyColorSubTableEXT == nil {
    EXT_color_subtable = false
  }
  if pCopyColorTableSGI = (C.PCOPYCOLORTABLESGI)(getProcAddr("glCopyColorTableSGI")); pCopyColorTableSGI == nil {
    SGI_color_table = false
  }
  if pCopyConvolutionFilter1DEXT = (C.PCOPYCONVOLUTIONFILTER1DEXT)(getProcAddr("glCopyConvolutionFilter1DEXT")); pCopyConvolutionFilter1DEXT == nil {
    EXT_convolution = false
  }
  if pCopyConvolutionFilter2DEXT = (C.PCOPYCONVOLUTIONFILTER2DEXT)(getProcAddr("glCopyConvolutionFilter2DEXT")); pCopyConvolutionFilter2DEXT == nil {
    EXT_convolution = false
  }
  if pCopyImageSubData = (C.PCOPYIMAGESUBDATA)(getProcAddr("glCopyImageSubData")); pCopyImageSubData == nil {
    ARB_copy_image = false
  }
  if pCopyImageSubDataNV = (C.PCOPYIMAGESUBDATANV)(getProcAddr("glCopyImageSubDataNV")); pCopyImageSubDataNV == nil {
    NV_copy_image = false
  }
  if pCopyMultiTexImage1DEXT = (C.PCOPYMULTITEXIMAGE1DEXT)(getProcAddr("glCopyMultiTexImage1DEXT")); pCopyMultiTexImage1DEXT == nil {
    EXT_direct_state_access = false
  }
  if pCopyMultiTexImage2DEXT = (C.PCOPYMULTITEXIMAGE2DEXT)(getProcAddr("glCopyMultiTexImage2DEXT")); pCopyMultiTexImage2DEXT == nil {
    EXT_direct_state_access = false
  }
  if pCopyMultiTexSubImage1DEXT = (C.PCOPYMULTITEXSUBIMAGE1DEXT)(getProcAddr("glCopyMultiTexSubImage1DEXT")); pCopyMultiTexSubImage1DEXT == nil {
    EXT_direct_state_access = false
  }
  if pCopyMultiTexSubImage2DEXT = (C.PCOPYMULTITEXSUBIMAGE2DEXT)(getProcAddr("glCopyMultiTexSubImage2DEXT")); pCopyMultiTexSubImage2DEXT == nil {
    EXT_direct_state_access = false
  }
  if pCopyMultiTexSubImage3DEXT = (C.PCOPYMULTITEXSUBIMAGE3DEXT)(getProcAddr("glCopyMultiTexSubImage3DEXT")); pCopyMultiTexSubImage3DEXT == nil {
    EXT_direct_state_access = false
  }
  if pCopyPathNV = (C.PCOPYPATHNV)(getProcAddr("glCopyPathNV")); pCopyPathNV == nil {
    NV_path_rendering = false
  }
  if pCopyTexImage1D = (C.PCOPYTEXIMAGE1D)(getProcAddr("glCopyTexImage1D")); pCopyTexImage1D == nil {
    return errors.New("glCopyTexImage1D")
  }
  if pCopyTexImage1DEXT = (C.PCOPYTEXIMAGE1DEXT)(getProcAddr("glCopyTexImage1DEXT")); pCopyTexImage1DEXT == nil {
    EXT_copy_texture = false
  }
  if pCopyTexImage2D = (C.PCOPYTEXIMAGE2D)(getProcAddr("glCopyTexImage2D")); pCopyTexImage2D == nil {
    return errors.New("glCopyTexImage2D")
  }
  if pCopyTexImage2DEXT = (C.PCOPYTEXIMAGE2DEXT)(getProcAddr("glCopyTexImage2DEXT")); pCopyTexImage2DEXT == nil {
    EXT_copy_texture = false
  }
  if pCopyTexSubImage1D = (C.PCOPYTEXSUBIMAGE1D)(getProcAddr("glCopyTexSubImage1D")); pCopyTexSubImage1D == nil {
    return errors.New("glCopyTexSubImage1D")
  }
  if pCopyTexSubImage1DEXT = (C.PCOPYTEXSUBIMAGE1DEXT)(getProcAddr("glCopyTexSubImage1DEXT")); pCopyTexSubImage1DEXT == nil {
    EXT_copy_texture = false
  }
  if pCopyTexSubImage2D = (C.PCOPYTEXSUBIMAGE2D)(getProcAddr("glCopyTexSubImage2D")); pCopyTexSubImage2D == nil {
    return errors.New("glCopyTexSubImage2D")
  }
  if pCopyTexSubImage2DEXT = (C.PCOPYTEXSUBIMAGE2DEXT)(getProcAddr("glCopyTexSubImage2DEXT")); pCopyTexSubImage2DEXT == nil {
    EXT_copy_texture = false
  }
  if pCopyTexSubImage3D = (C.PCOPYTEXSUBIMAGE3D)(getProcAddr("glCopyTexSubImage3D")); pCopyTexSubImage3D == nil {
    return errors.New("glCopyTexSubImage3D")
  }
  if pCopyTexSubImage3DEXT = (C.PCOPYTEXSUBIMAGE3DEXT)(getProcAddr("glCopyTexSubImage3DEXT")); pCopyTexSubImage3DEXT == nil {
    EXT_copy_texture = false
  }
  if pCopyTextureImage1DEXT = (C.PCOPYTEXTUREIMAGE1DEXT)(getProcAddr("glCopyTextureImage1DEXT")); pCopyTextureImage1DEXT == nil {
    EXT_direct_state_access = false
  }
  if pCopyTextureImage2DEXT = (C.PCOPYTEXTUREIMAGE2DEXT)(getProcAddr("glCopyTextureImage2DEXT")); pCopyTextureImage2DEXT == nil {
    EXT_direct_state_access = false
  }
  if pCopyTextureSubImage1DEXT = (C.PCOPYTEXTURESUBIMAGE1DEXT)(getProcAddr("glCopyTextureSubImage1DEXT")); pCopyTextureSubImage1DEXT == nil {
    EXT_direct_state_access = false
  }
  if pCopyTextureSubImage2DEXT = (C.PCOPYTEXTURESUBIMAGE2DEXT)(getProcAddr("glCopyTextureSubImage2DEXT")); pCopyTextureSubImage2DEXT == nil {
    EXT_direct_state_access = false
  }
  if pCopyTextureSubImage3DEXT = (C.PCOPYTEXTURESUBIMAGE3DEXT)(getProcAddr("glCopyTextureSubImage3DEXT")); pCopyTextureSubImage3DEXT == nil {
    EXT_direct_state_access = false
  }
  if pCoverFillPathInstancedNV = (C.PCOVERFILLPATHINSTANCEDNV)(getProcAddr("glCoverFillPathInstancedNV")); pCoverFillPathInstancedNV == nil {
    NV_path_rendering = false
  }
  if pCoverFillPathNV = (C.PCOVERFILLPATHNV)(getProcAddr("glCoverFillPathNV")); pCoverFillPathNV == nil {
    NV_path_rendering = false
  }
  if pCoverStrokePathInstancedNV = (C.PCOVERSTROKEPATHINSTANCEDNV)(getProcAddr("glCoverStrokePathInstancedNV")); pCoverStrokePathInstancedNV == nil {
    NV_path_rendering = false
  }
  if pCoverStrokePathNV = (C.PCOVERSTROKEPATHNV)(getProcAddr("glCoverStrokePathNV")); pCoverStrokePathNV == nil {
    NV_path_rendering = false
  }
  if pCreatePerfQueryINTEL = (C.PCREATEPERFQUERYINTEL)(getProcAddr("glCreatePerfQueryINTEL")); pCreatePerfQueryINTEL == nil {
    INTEL_performance_query = false
  }
  if pCreateProgram = (C.PCREATEPROGRAM)(getProcAddr("glCreateProgram")); pCreateProgram == nil {
    return errors.New("glCreateProgram")
  }
  if pCreateProgramObjectARB = (C.PCREATEPROGRAMOBJECTARB)(getProcAddr("glCreateProgramObjectARB")); pCreateProgramObjectARB == nil {
    ARB_shader_objects = false
  }
  if pCreateShader = (C.PCREATESHADER)(getProcAddr("glCreateShader")); pCreateShader == nil {
    return errors.New("glCreateShader")
  }
  if pCreateShaderObjectARB = (C.PCREATESHADEROBJECTARB)(getProcAddr("glCreateShaderObjectARB")); pCreateShaderObjectARB == nil {
    ARB_shader_objects = false
  }
  if pCreateShaderProgramEXT = (C.PCREATESHADERPROGRAMEXT)(getProcAddr("glCreateShaderProgramEXT")); pCreateShaderProgramEXT == nil {
    EXT_separate_shader_objects = false
  }
  if pCreateShaderProgramv = (C.PCREATESHADERPROGRAMV)(getProcAddr("glCreateShaderProgramv")); pCreateShaderProgramv == nil {
    ARB_separate_shader_objects = false
    return errors.New("glCreateShaderProgramv")
  }
  if pCreateShaderProgramvEXT = (C.PCREATESHADERPROGRAMVEXT)(getProcAddr("glCreateShaderProgramvEXT")); pCreateShaderProgramvEXT == nil {
    EXT_separate_shader_objects = false
  }
  if pCreateSyncFromCLeventARB = (C.PCREATESYNCFROMCLEVENTARB)(getProcAddr("glCreateSyncFromCLeventARB")); pCreateSyncFromCLeventARB == nil {
    ARB_cl_event = false
  }
  if pCullFace = (C.PCULLFACE)(getProcAddr("glCullFace")); pCullFace == nil {
    return errors.New("glCullFace")
  }
  if pCullParameterdvEXT = (C.PCULLPARAMETERDVEXT)(getProcAddr("glCullParameterdvEXT")); pCullParameterdvEXT == nil {
    EXT_cull_vertex = false
  }
  if pCullParameterfvEXT = (C.PCULLPARAMETERFVEXT)(getProcAddr("glCullParameterfvEXT")); pCullParameterfvEXT == nil {
    EXT_cull_vertex = false
  }
  if pCurrentPaletteMatrixARB = (C.PCURRENTPALETTEMATRIXARB)(getProcAddr("glCurrentPaletteMatrixARB")); pCurrentPaletteMatrixARB == nil {
    ARB_matrix_palette = false
  }
  if pDebugMessageCallback = (C.PDEBUGMESSAGECALLBACK)(getProcAddr("glDebugMessageCallback")); pDebugMessageCallback == nil {
    KHR_debug = false
  }
  if pDebugMessageCallbackAMD = (C.PDEBUGMESSAGECALLBACKAMD)(getProcAddr("glDebugMessageCallbackAMD")); pDebugMessageCallbackAMD == nil {
    AMD_debug_output = false
  }
  if pDebugMessageCallbackARB = (C.PDEBUGMESSAGECALLBACKARB)(getProcAddr("glDebugMessageCallbackARB")); pDebugMessageCallbackARB == nil {
    ARB_debug_output = false
  }
  if pDebugMessageCallbackKHR = (C.PDEBUGMESSAGECALLBACKKHR)(getProcAddr("glDebugMessageCallbackKHR")); pDebugMessageCallbackKHR == nil {
    KHR_debug = false
  }
  if pDebugMessageControl = (C.PDEBUGMESSAGECONTROL)(getProcAddr("glDebugMessageControl")); pDebugMessageControl == nil {
    KHR_debug = false
  }
  if pDebugMessageControlARB = (C.PDEBUGMESSAGECONTROLARB)(getProcAddr("glDebugMessageControlARB")); pDebugMessageControlARB == nil {
    ARB_debug_output = false
  }
  if pDebugMessageControlKHR = (C.PDEBUGMESSAGECONTROLKHR)(getProcAddr("glDebugMessageControlKHR")); pDebugMessageControlKHR == nil {
    KHR_debug = false
  }
  if pDebugMessageEnableAMD = (C.PDEBUGMESSAGEENABLEAMD)(getProcAddr("glDebugMessageEnableAMD")); pDebugMessageEnableAMD == nil {
    AMD_debug_output = false
  }
  if pDebugMessageInsert = (C.PDEBUGMESSAGEINSERT)(getProcAddr("glDebugMessageInsert")); pDebugMessageInsert == nil {
    KHR_debug = false
  }
  if pDebugMessageInsertAMD = (C.PDEBUGMESSAGEINSERTAMD)(getProcAddr("glDebugMessageInsertAMD")); pDebugMessageInsertAMD == nil {
    AMD_debug_output = false
  }
  if pDebugMessageInsertARB = (C.PDEBUGMESSAGEINSERTARB)(getProcAddr("glDebugMessageInsertARB")); pDebugMessageInsertARB == nil {
    ARB_debug_output = false
  }
  if pDebugMessageInsertKHR = (C.PDEBUGMESSAGEINSERTKHR)(getProcAddr("glDebugMessageInsertKHR")); pDebugMessageInsertKHR == nil {
    KHR_debug = false
  }
  if pDeformSGIX = (C.PDEFORMSGIX)(getProcAddr("glDeformSGIX")); pDeformSGIX == nil {
    SGIX_polynomial_ffd = false
  }
  if pDeformationMap3dSGIX = (C.PDEFORMATIONMAP3DSGIX)(getProcAddr("glDeformationMap3dSGIX")); pDeformationMap3dSGIX == nil {
    SGIX_polynomial_ffd = false
  }
  if pDeformationMap3fSGIX = (C.PDEFORMATIONMAP3FSGIX)(getProcAddr("glDeformationMap3fSGIX")); pDeformationMap3fSGIX == nil {
    SGIX_polynomial_ffd = false
  }
  if pDeleteAsyncMarkersSGIX = (C.PDELETEASYNCMARKERSSGIX)(getProcAddr("glDeleteAsyncMarkersSGIX")); pDeleteAsyncMarkersSGIX == nil {
    SGIX_async = false
  }
  if pDeleteBuffers = (C.PDELETEBUFFERS)(getProcAddr("glDeleteBuffers")); pDeleteBuffers == nil {
    return errors.New("glDeleteBuffers")
  }
  if pDeleteBuffersARB = (C.PDELETEBUFFERSARB)(getProcAddr("glDeleteBuffersARB")); pDeleteBuffersARB == nil {
    ARB_vertex_buffer_object = false
  }
  if pDeleteFencesAPPLE = (C.PDELETEFENCESAPPLE)(getProcAddr("glDeleteFencesAPPLE")); pDeleteFencesAPPLE == nil {
    APPLE_fence = false
  }
  if pDeleteFencesNV = (C.PDELETEFENCESNV)(getProcAddr("glDeleteFencesNV")); pDeleteFencesNV == nil {
    NV_fence = false
  }
  if pDeleteFragmentShaderATI = (C.PDELETEFRAGMENTSHADERATI)(getProcAddr("glDeleteFragmentShaderATI")); pDeleteFragmentShaderATI == nil {
    ATI_fragment_shader = false
  }
  if pDeleteFramebuffers = (C.PDELETEFRAMEBUFFERS)(getProcAddr("glDeleteFramebuffers")); pDeleteFramebuffers == nil {
    ARB_framebuffer_object = false
    return errors.New("glDeleteFramebuffers")
  }
  if pDeleteFramebuffersEXT = (C.PDELETEFRAMEBUFFERSEXT)(getProcAddr("glDeleteFramebuffersEXT")); pDeleteFramebuffersEXT == nil {
    EXT_framebuffer_object = false
  }
  if pDeleteNamedStringARB = (C.PDELETENAMEDSTRINGARB)(getProcAddr("glDeleteNamedStringARB")); pDeleteNamedStringARB == nil {
    ARB_shading_language_include = false
  }
  if pDeleteNamesAMD = (C.PDELETENAMESAMD)(getProcAddr("glDeleteNamesAMD")); pDeleteNamesAMD == nil {
    AMD_name_gen_delete = false
  }
  if pDeleteObjectARB = (C.PDELETEOBJECTARB)(getProcAddr("glDeleteObjectARB")); pDeleteObjectARB == nil {
    ARB_shader_objects = false
  }
  if pDeleteOcclusionQueriesNV = (C.PDELETEOCCLUSIONQUERIESNV)(getProcAddr("glDeleteOcclusionQueriesNV")); pDeleteOcclusionQueriesNV == nil {
    NV_occlusion_query = false
  }
  if pDeletePathsNV = (C.PDELETEPATHSNV)(getProcAddr("glDeletePathsNV")); pDeletePathsNV == nil {
    NV_path_rendering = false
  }
  if pDeletePerfMonitorsAMD = (C.PDELETEPERFMONITORSAMD)(getProcAddr("glDeletePerfMonitorsAMD")); pDeletePerfMonitorsAMD == nil {
    AMD_performance_monitor = false
  }
  if pDeletePerfQueryINTEL = (C.PDELETEPERFQUERYINTEL)(getProcAddr("glDeletePerfQueryINTEL")); pDeletePerfQueryINTEL == nil {
    INTEL_performance_query = false
  }
  if pDeleteProgram = (C.PDELETEPROGRAM)(getProcAddr("glDeleteProgram")); pDeleteProgram == nil {
    return errors.New("glDeleteProgram")
  }
  if pDeleteProgramPipelines = (C.PDELETEPROGRAMPIPELINES)(getProcAddr("glDeleteProgramPipelines")); pDeleteProgramPipelines == nil {
    ARB_separate_shader_objects = false
    return errors.New("glDeleteProgramPipelines")
  }
  if pDeleteProgramPipelinesEXT = (C.PDELETEPROGRAMPIPELINESEXT)(getProcAddr("glDeleteProgramPipelinesEXT")); pDeleteProgramPipelinesEXT == nil {
    EXT_separate_shader_objects = false
  }
  if pDeleteProgramsARB = (C.PDELETEPROGRAMSARB)(getProcAddr("glDeleteProgramsARB")); pDeleteProgramsARB == nil {
    ARB_fragment_program = false
    ARB_vertex_program = false
  }
  if pDeleteProgramsNV = (C.PDELETEPROGRAMSNV)(getProcAddr("glDeleteProgramsNV")); pDeleteProgramsNV == nil {
    NV_vertex_program = false
  }
  if pDeleteQueries = (C.PDELETEQUERIES)(getProcAddr("glDeleteQueries")); pDeleteQueries == nil {
    return errors.New("glDeleteQueries")
  }
  if pDeleteQueriesARB = (C.PDELETEQUERIESARB)(getProcAddr("glDeleteQueriesARB")); pDeleteQueriesARB == nil {
    ARB_occlusion_query = false
  }
  if pDeleteRenderbuffers = (C.PDELETERENDERBUFFERS)(getProcAddr("glDeleteRenderbuffers")); pDeleteRenderbuffers == nil {
    ARB_framebuffer_object = false
    return errors.New("glDeleteRenderbuffers")
  }
  if pDeleteRenderbuffersEXT = (C.PDELETERENDERBUFFERSEXT)(getProcAddr("glDeleteRenderbuffersEXT")); pDeleteRenderbuffersEXT == nil {
    EXT_framebuffer_object = false
  }
  if pDeleteSamplers = (C.PDELETESAMPLERS)(getProcAddr("glDeleteSamplers")); pDeleteSamplers == nil {
    ARB_sampler_objects = false
    return errors.New("glDeleteSamplers")
  }
  if pDeleteShader = (C.PDELETESHADER)(getProcAddr("glDeleteShader")); pDeleteShader == nil {
    return errors.New("glDeleteShader")
  }
  if pDeleteSync = (C.PDELETESYNC)(getProcAddr("glDeleteSync")); pDeleteSync == nil {
    ARB_sync = false
    return errors.New("glDeleteSync")
  }
  if pDeleteTextures = (C.PDELETETEXTURES)(getProcAddr("glDeleteTextures")); pDeleteTextures == nil {
    return errors.New("glDeleteTextures")
  }
  if pDeleteTexturesEXT = (C.PDELETETEXTURESEXT)(getProcAddr("glDeleteTexturesEXT")); pDeleteTexturesEXT == nil {
    EXT_texture_object = false
  }
  if pDeleteTransformFeedbacks = (C.PDELETETRANSFORMFEEDBACKS)(getProcAddr("glDeleteTransformFeedbacks")); pDeleteTransformFeedbacks == nil {
    ARB_transform_feedback2 = false
    return errors.New("glDeleteTransformFeedbacks")
  }
  if pDeleteTransformFeedbacksNV = (C.PDELETETRANSFORMFEEDBACKSNV)(getProcAddr("glDeleteTransformFeedbacksNV")); pDeleteTransformFeedbacksNV == nil {
    NV_transform_feedback2 = false
  }
  if pDeleteVertexArrays = (C.PDELETEVERTEXARRAYS)(getProcAddr("glDeleteVertexArrays")); pDeleteVertexArrays == nil {
    ARB_vertex_array_object = false
    return errors.New("glDeleteVertexArrays")
  }
  if pDeleteVertexArraysAPPLE = (C.PDELETEVERTEXARRAYSAPPLE)(getProcAddr("glDeleteVertexArraysAPPLE")); pDeleteVertexArraysAPPLE == nil {
    APPLE_vertex_array_object = false
  }
  if pDeleteVertexShaderEXT = (C.PDELETEVERTEXSHADEREXT)(getProcAddr("glDeleteVertexShaderEXT")); pDeleteVertexShaderEXT == nil {
    EXT_vertex_shader = false
  }
  if pDepthBoundsEXT = (C.PDEPTHBOUNDSEXT)(getProcAddr("glDepthBoundsEXT")); pDepthBoundsEXT == nil {
    EXT_depth_bounds_test = false
  }
  if pDepthBoundsdNV = (C.PDEPTHBOUNDSDNV)(getProcAddr("glDepthBoundsdNV")); pDepthBoundsdNV == nil {
    NV_depth_buffer_float = false
  }
  if pDepthFunc = (C.PDEPTHFUNC)(getProcAddr("glDepthFunc")); pDepthFunc == nil {
    return errors.New("glDepthFunc")
  }
  if pDepthMask = (C.PDEPTHMASK)(getProcAddr("glDepthMask")); pDepthMask == nil {
    return errors.New("glDepthMask")
  }
  if pDepthRange = (C.PDEPTHRANGE)(getProcAddr("glDepthRange")); pDepthRange == nil {
    return errors.New("glDepthRange")
  }
  if pDepthRangeArrayv = (C.PDEPTHRANGEARRAYV)(getProcAddr("glDepthRangeArrayv")); pDepthRangeArrayv == nil {
    ARB_viewport_array = false
    return errors.New("glDepthRangeArrayv")
  }
  if pDepthRangeIndexed = (C.PDEPTHRANGEINDEXED)(getProcAddr("glDepthRangeIndexed")); pDepthRangeIndexed == nil {
    ARB_viewport_array = false
    return errors.New("glDepthRangeIndexed")
  }
  if pDepthRangedNV = (C.PDEPTHRANGEDNV)(getProcAddr("glDepthRangedNV")); pDepthRangedNV == nil {
    NV_depth_buffer_float = false
  }
  if pDepthRangef = (C.PDEPTHRANGEF)(getProcAddr("glDepthRangef")); pDepthRangef == nil {
    ARB_ES2_compatibility = false
    return errors.New("glDepthRangef")
  }
  if pDepthRangefOES = (C.PDEPTHRANGEFOES)(getProcAddr("glDepthRangefOES")); pDepthRangefOES == nil {
    OES_single_precision = false
  }
  if pDepthRangexOES = (C.PDEPTHRANGEXOES)(getProcAddr("glDepthRangexOES")); pDepthRangexOES == nil {
    OES_fixed_point = false
  }
  if pDetachObjectARB = (C.PDETACHOBJECTARB)(getProcAddr("glDetachObjectARB")); pDetachObjectARB == nil {
    ARB_shader_objects = false
  }
  if pDetachShader = (C.PDETACHSHADER)(getProcAddr("glDetachShader")); pDetachShader == nil {
    return errors.New("glDetachShader")
  }
  if pDetailTexFuncSGIS = (C.PDETAILTEXFUNCSGIS)(getProcAddr("glDetailTexFuncSGIS")); pDetailTexFuncSGIS == nil {
    SGIS_detail_texture = false
  }
  if pDisable = (C.PDISABLE)(getProcAddr("glDisable")); pDisable == nil {
    return errors.New("glDisable")
  }
  if pDisableClientStateIndexedEXT = (C.PDISABLECLIENTSTATEINDEXEDEXT)(getProcAddr("glDisableClientStateIndexedEXT")); pDisableClientStateIndexedEXT == nil {
    EXT_direct_state_access = false
  }
  if pDisableClientStateiEXT = (C.PDISABLECLIENTSTATEIEXT)(getProcAddr("glDisableClientStateiEXT")); pDisableClientStateiEXT == nil {
    EXT_direct_state_access = false
  }
  if pDisableIndexedEXT = (C.PDISABLEINDEXEDEXT)(getProcAddr("glDisableIndexedEXT")); pDisableIndexedEXT == nil {
    EXT_direct_state_access = false
    EXT_draw_buffers2 = false
  }
  if pDisableVariantClientStateEXT = (C.PDISABLEVARIANTCLIENTSTATEEXT)(getProcAddr("glDisableVariantClientStateEXT")); pDisableVariantClientStateEXT == nil {
    EXT_vertex_shader = false
  }
  if pDisableVertexArrayAttribEXT = (C.PDISABLEVERTEXARRAYATTRIBEXT)(getProcAddr("glDisableVertexArrayAttribEXT")); pDisableVertexArrayAttribEXT == nil {
    EXT_direct_state_access = false
  }
  if pDisableVertexArrayEXT = (C.PDISABLEVERTEXARRAYEXT)(getProcAddr("glDisableVertexArrayEXT")); pDisableVertexArrayEXT == nil {
    EXT_direct_state_access = false
  }
  if pDisableVertexAttribAPPLE = (C.PDISABLEVERTEXATTRIBAPPLE)(getProcAddr("glDisableVertexAttribAPPLE")); pDisableVertexAttribAPPLE == nil {
    APPLE_vertex_program_evaluators = false
  }
  if pDisableVertexAttribArray = (C.PDISABLEVERTEXATTRIBARRAY)(getProcAddr("glDisableVertexAttribArray")); pDisableVertexAttribArray == nil {
    return errors.New("glDisableVertexAttribArray")
  }
  if pDisableVertexAttribArrayARB = (C.PDISABLEVERTEXATTRIBARRAYARB)(getProcAddr("glDisableVertexAttribArrayARB")); pDisableVertexAttribArrayARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if pDisablei = (C.PDISABLEI)(getProcAddr("glDisablei")); pDisablei == nil {
    return errors.New("glDisablei")
  }
  if pDispatchCompute = (C.PDISPATCHCOMPUTE)(getProcAddr("glDispatchCompute")); pDispatchCompute == nil {
    ARB_compute_shader = false
  }
  if pDispatchComputeGroupSizeARB = (C.PDISPATCHCOMPUTEGROUPSIZEARB)(getProcAddr("glDispatchComputeGroupSizeARB")); pDispatchComputeGroupSizeARB == nil {
    ARB_compute_variable_group_size = false
  }
  if pDispatchComputeIndirect = (C.PDISPATCHCOMPUTEINDIRECT)(getProcAddr("glDispatchComputeIndirect")); pDispatchComputeIndirect == nil {
    ARB_compute_shader = false
  }
  if pDrawArrays = (C.PDRAWARRAYS)(getProcAddr("glDrawArrays")); pDrawArrays == nil {
    return errors.New("glDrawArrays")
  }
  if pDrawArraysEXT = (C.PDRAWARRAYSEXT)(getProcAddr("glDrawArraysEXT")); pDrawArraysEXT == nil {
    EXT_vertex_array = false
  }
  if pDrawArraysIndirect = (C.PDRAWARRAYSINDIRECT)(getProcAddr("glDrawArraysIndirect")); pDrawArraysIndirect == nil {
    ARB_draw_indirect = false
    return errors.New("glDrawArraysIndirect")
  }
  if pDrawArraysInstanced = (C.PDRAWARRAYSINSTANCED)(getProcAddr("glDrawArraysInstanced")); pDrawArraysInstanced == nil {
    return errors.New("glDrawArraysInstanced")
  }
  if pDrawArraysInstancedARB = (C.PDRAWARRAYSINSTANCEDARB)(getProcAddr("glDrawArraysInstancedARB")); pDrawArraysInstancedARB == nil {
    ARB_draw_instanced = false
  }
  if pDrawArraysInstancedBaseInstance = (C.PDRAWARRAYSINSTANCEDBASEINSTANCE)(getProcAddr("glDrawArraysInstancedBaseInstance")); pDrawArraysInstancedBaseInstance == nil {
    ARB_base_instance = false
  }
  if pDrawArraysInstancedEXT = (C.PDRAWARRAYSINSTANCEDEXT)(getProcAddr("glDrawArraysInstancedEXT")); pDrawArraysInstancedEXT == nil {
    EXT_draw_instanced = false
  }
  if pDrawBuffer = (C.PDRAWBUFFER)(getProcAddr("glDrawBuffer")); pDrawBuffer == nil {
    return errors.New("glDrawBuffer")
  }
  if pDrawBuffers = (C.PDRAWBUFFERS)(getProcAddr("glDrawBuffers")); pDrawBuffers == nil {
    return errors.New("glDrawBuffers")
  }
  if pDrawBuffersARB = (C.PDRAWBUFFERSARB)(getProcAddr("glDrawBuffersARB")); pDrawBuffersARB == nil {
    ARB_draw_buffers = false
  }
  if pDrawBuffersATI = (C.PDRAWBUFFERSATI)(getProcAddr("glDrawBuffersATI")); pDrawBuffersATI == nil {
    ATI_draw_buffers = false
  }
  if pDrawElementArrayAPPLE = (C.PDRAWELEMENTARRAYAPPLE)(getProcAddr("glDrawElementArrayAPPLE")); pDrawElementArrayAPPLE == nil {
    APPLE_element_array = false
  }
  if pDrawElementArrayATI = (C.PDRAWELEMENTARRAYATI)(getProcAddr("glDrawElementArrayATI")); pDrawElementArrayATI == nil {
    ATI_element_array = false
  }
  if pDrawElements = (C.PDRAWELEMENTS)(getProcAddr("glDrawElements")); pDrawElements == nil {
    return errors.New("glDrawElements")
  }
  if pDrawElementsBaseVertex = (C.PDRAWELEMENTSBASEVERTEX)(getProcAddr("glDrawElementsBaseVertex")); pDrawElementsBaseVertex == nil {
    ARB_draw_elements_base_vertex = false
    return errors.New("glDrawElementsBaseVertex")
  }
  if pDrawElementsIndirect = (C.PDRAWELEMENTSINDIRECT)(getProcAddr("glDrawElementsIndirect")); pDrawElementsIndirect == nil {
    ARB_draw_indirect = false
    return errors.New("glDrawElementsIndirect")
  }
  if pDrawElementsInstanced = (C.PDRAWELEMENTSINSTANCED)(getProcAddr("glDrawElementsInstanced")); pDrawElementsInstanced == nil {
    return errors.New("glDrawElementsInstanced")
  }
  if pDrawElementsInstancedARB = (C.PDRAWELEMENTSINSTANCEDARB)(getProcAddr("glDrawElementsInstancedARB")); pDrawElementsInstancedARB == nil {
    ARB_draw_instanced = false
  }
  if pDrawElementsInstancedBaseInstance = (C.PDRAWELEMENTSINSTANCEDBASEINSTANCE)(getProcAddr("glDrawElementsInstancedBaseInstance")); pDrawElementsInstancedBaseInstance == nil {
    ARB_base_instance = false
  }
  if pDrawElementsInstancedBaseVertex = (C.PDRAWELEMENTSINSTANCEDBASEVERTEX)(getProcAddr("glDrawElementsInstancedBaseVertex")); pDrawElementsInstancedBaseVertex == nil {
    ARB_draw_elements_base_vertex = false
    return errors.New("glDrawElementsInstancedBaseVertex")
  }
  if pDrawElementsInstancedBaseVertexBaseInstance = (C.PDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCE)(getProcAddr("glDrawElementsInstancedBaseVertexBaseInstance")); pDrawElementsInstancedBaseVertexBaseInstance == nil {
    ARB_base_instance = false
  }
  if pDrawElementsInstancedEXT = (C.PDRAWELEMENTSINSTANCEDEXT)(getProcAddr("glDrawElementsInstancedEXT")); pDrawElementsInstancedEXT == nil {
    EXT_draw_instanced = false
  }
  if pDrawMeshArraysSUN = (C.PDRAWMESHARRAYSSUN)(getProcAddr("glDrawMeshArraysSUN")); pDrawMeshArraysSUN == nil {
    SUN_mesh_array = false
  }
  if pDrawRangeElementArrayAPPLE = (C.PDRAWRANGEELEMENTARRAYAPPLE)(getProcAddr("glDrawRangeElementArrayAPPLE")); pDrawRangeElementArrayAPPLE == nil {
    APPLE_element_array = false
  }
  if pDrawRangeElementArrayATI = (C.PDRAWRANGEELEMENTARRAYATI)(getProcAddr("glDrawRangeElementArrayATI")); pDrawRangeElementArrayATI == nil {
    ATI_element_array = false
  }
  if pDrawRangeElements = (C.PDRAWRANGEELEMENTS)(getProcAddr("glDrawRangeElements")); pDrawRangeElements == nil {
    return errors.New("glDrawRangeElements")
  }
  if pDrawRangeElementsBaseVertex = (C.PDRAWRANGEELEMENTSBASEVERTEX)(getProcAddr("glDrawRangeElementsBaseVertex")); pDrawRangeElementsBaseVertex == nil {
    ARB_draw_elements_base_vertex = false
    return errors.New("glDrawRangeElementsBaseVertex")
  }
  if pDrawRangeElementsEXT = (C.PDRAWRANGEELEMENTSEXT)(getProcAddr("glDrawRangeElementsEXT")); pDrawRangeElementsEXT == nil {
    EXT_draw_range_elements = false
  }
  if pDrawTextureNV = (C.PDRAWTEXTURENV)(getProcAddr("glDrawTextureNV")); pDrawTextureNV == nil {
    NV_draw_texture = false
  }
  if pDrawTransformFeedback = (C.PDRAWTRANSFORMFEEDBACK)(getProcAddr("glDrawTransformFeedback")); pDrawTransformFeedback == nil {
    ARB_transform_feedback2 = false
    return errors.New("glDrawTransformFeedback")
  }
  if pDrawTransformFeedbackInstanced = (C.PDRAWTRANSFORMFEEDBACKINSTANCED)(getProcAddr("glDrawTransformFeedbackInstanced")); pDrawTransformFeedbackInstanced == nil {
    ARB_transform_feedback_instanced = false
  }
  if pDrawTransformFeedbackNV = (C.PDRAWTRANSFORMFEEDBACKNV)(getProcAddr("glDrawTransformFeedbackNV")); pDrawTransformFeedbackNV == nil {
    NV_transform_feedback2 = false
  }
  if pDrawTransformFeedbackStream = (C.PDRAWTRANSFORMFEEDBACKSTREAM)(getProcAddr("glDrawTransformFeedbackStream")); pDrawTransformFeedbackStream == nil {
    ARB_transform_feedback3 = false
    return errors.New("glDrawTransformFeedbackStream")
  }
  if pDrawTransformFeedbackStreamInstanced = (C.PDRAWTRANSFORMFEEDBACKSTREAMINSTANCED)(getProcAddr("glDrawTransformFeedbackStreamInstanced")); pDrawTransformFeedbackStreamInstanced == nil {
    ARB_transform_feedback_instanced = false
  }
  if pEdgeFlagFormatNV = (C.PEDGEFLAGFORMATNV)(getProcAddr("glEdgeFlagFormatNV")); pEdgeFlagFormatNV == nil {
    NV_vertex_buffer_unified_memory = false
  }
  if pEdgeFlagPointerEXT = (C.PEDGEFLAGPOINTEREXT)(getProcAddr("glEdgeFlagPointerEXT")); pEdgeFlagPointerEXT == nil {
    EXT_vertex_array = false
  }
  if pEdgeFlagPointerListIBM = (C.PEDGEFLAGPOINTERLISTIBM)(getProcAddr("glEdgeFlagPointerListIBM")); pEdgeFlagPointerListIBM == nil {
    IBM_vertex_array_lists = false
  }
  if pElementPointerAPPLE = (C.PELEMENTPOINTERAPPLE)(getProcAddr("glElementPointerAPPLE")); pElementPointerAPPLE == nil {
    APPLE_element_array = false
  }
  if pElementPointerATI = (C.PELEMENTPOINTERATI)(getProcAddr("glElementPointerATI")); pElementPointerATI == nil {
    ATI_element_array = false
  }
  if pEnable = (C.PENABLE)(getProcAddr("glEnable")); pEnable == nil {
    return errors.New("glEnable")
  }
  if pEnableClientStateIndexedEXT = (C.PENABLECLIENTSTATEINDEXEDEXT)(getProcAddr("glEnableClientStateIndexedEXT")); pEnableClientStateIndexedEXT == nil {
    EXT_direct_state_access = false
  }
  if pEnableClientStateiEXT = (C.PENABLECLIENTSTATEIEXT)(getProcAddr("glEnableClientStateiEXT")); pEnableClientStateiEXT == nil {
    EXT_direct_state_access = false
  }
  if pEnableIndexedEXT = (C.PENABLEINDEXEDEXT)(getProcAddr("glEnableIndexedEXT")); pEnableIndexedEXT == nil {
    EXT_direct_state_access = false
    EXT_draw_buffers2 = false
  }
  if pEnableVariantClientStateEXT = (C.PENABLEVARIANTCLIENTSTATEEXT)(getProcAddr("glEnableVariantClientStateEXT")); pEnableVariantClientStateEXT == nil {
    EXT_vertex_shader = false
  }
  if pEnableVertexArrayAttribEXT = (C.PENABLEVERTEXARRAYATTRIBEXT)(getProcAddr("glEnableVertexArrayAttribEXT")); pEnableVertexArrayAttribEXT == nil {
    EXT_direct_state_access = false
  }
  if pEnableVertexArrayEXT = (C.PENABLEVERTEXARRAYEXT)(getProcAddr("glEnableVertexArrayEXT")); pEnableVertexArrayEXT == nil {
    EXT_direct_state_access = false
  }
  if pEnableVertexAttribAPPLE = (C.PENABLEVERTEXATTRIBAPPLE)(getProcAddr("glEnableVertexAttribAPPLE")); pEnableVertexAttribAPPLE == nil {
    APPLE_vertex_program_evaluators = false
  }
  if pEnableVertexAttribArray = (C.PENABLEVERTEXATTRIBARRAY)(getProcAddr("glEnableVertexAttribArray")); pEnableVertexAttribArray == nil {
    return errors.New("glEnableVertexAttribArray")
  }
  if pEnableVertexAttribArrayARB = (C.PENABLEVERTEXATTRIBARRAYARB)(getProcAddr("glEnableVertexAttribArrayARB")); pEnableVertexAttribArrayARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if pEnablei = (C.PENABLEI)(getProcAddr("glEnablei")); pEnablei == nil {
    return errors.New("glEnablei")
  }
  if pEndConditionalRender = (C.PENDCONDITIONALRENDER)(getProcAddr("glEndConditionalRender")); pEndConditionalRender == nil {
    return errors.New("glEndConditionalRender")
  }
  if pEndConditionalRenderNV = (C.PENDCONDITIONALRENDERNV)(getProcAddr("glEndConditionalRenderNV")); pEndConditionalRenderNV == nil {
    NV_conditional_render = false
  }
  if pEndConditionalRenderNVX = (C.PENDCONDITIONALRENDERNVX)(getProcAddr("glEndConditionalRenderNVX")); pEndConditionalRenderNVX == nil {
    NVX_conditional_render = false
  }
  if pEndFragmentShaderATI = (C.PENDFRAGMENTSHADERATI)(getProcAddr("glEndFragmentShaderATI")); pEndFragmentShaderATI == nil {
    ATI_fragment_shader = false
  }
  if pEndOcclusionQueryNV = (C.PENDOCCLUSIONQUERYNV)(getProcAddr("glEndOcclusionQueryNV")); pEndOcclusionQueryNV == nil {
    NV_occlusion_query = false
  }
  if pEndPerfMonitorAMD = (C.PENDPERFMONITORAMD)(getProcAddr("glEndPerfMonitorAMD")); pEndPerfMonitorAMD == nil {
    AMD_performance_monitor = false
  }
  if pEndPerfQueryINTEL = (C.PENDPERFQUERYINTEL)(getProcAddr("glEndPerfQueryINTEL")); pEndPerfQueryINTEL == nil {
    INTEL_performance_query = false
  }
  if pEndQuery = (C.PENDQUERY)(getProcAddr("glEndQuery")); pEndQuery == nil {
    return errors.New("glEndQuery")
  }
  if pEndQueryARB = (C.PENDQUERYARB)(getProcAddr("glEndQueryARB")); pEndQueryARB == nil {
    ARB_occlusion_query = false
  }
  if pEndQueryIndexed = (C.PENDQUERYINDEXED)(getProcAddr("glEndQueryIndexed")); pEndQueryIndexed == nil {
    ARB_transform_feedback3 = false
    return errors.New("glEndQueryIndexed")
  }
  if pEndTransformFeedback = (C.PENDTRANSFORMFEEDBACK)(getProcAddr("glEndTransformFeedback")); pEndTransformFeedback == nil {
    return errors.New("glEndTransformFeedback")
  }
  if pEndTransformFeedbackEXT = (C.PENDTRANSFORMFEEDBACKEXT)(getProcAddr("glEndTransformFeedbackEXT")); pEndTransformFeedbackEXT == nil {
    EXT_transform_feedback = false
  }
  if pEndTransformFeedbackNV = (C.PENDTRANSFORMFEEDBACKNV)(getProcAddr("glEndTransformFeedbackNV")); pEndTransformFeedbackNV == nil {
    NV_transform_feedback = false
  }
  if pEndVertexShaderEXT = (C.PENDVERTEXSHADEREXT)(getProcAddr("glEndVertexShaderEXT")); pEndVertexShaderEXT == nil {
    EXT_vertex_shader = false
  }
  if pEndVideoCaptureNV = (C.PENDVIDEOCAPTURENV)(getProcAddr("glEndVideoCaptureNV")); pEndVideoCaptureNV == nil {
    NV_video_capture = false
  }
  if pEvalCoord1xOES = (C.PEVALCOORD1XOES)(getProcAddr("glEvalCoord1xOES")); pEvalCoord1xOES == nil {
    OES_fixed_point = false
  }
  if pEvalCoord1xvOES = (C.PEVALCOORD1XVOES)(getProcAddr("glEvalCoord1xvOES")); pEvalCoord1xvOES == nil {
    OES_fixed_point = false
  }
  if pEvalCoord2xOES = (C.PEVALCOORD2XOES)(getProcAddr("glEvalCoord2xOES")); pEvalCoord2xOES == nil {
    OES_fixed_point = false
  }
  if pEvalCoord2xvOES = (C.PEVALCOORD2XVOES)(getProcAddr("glEvalCoord2xvOES")); pEvalCoord2xvOES == nil {
    OES_fixed_point = false
  }
  if pEvalMapsNV = (C.PEVALMAPSNV)(getProcAddr("glEvalMapsNV")); pEvalMapsNV == nil {
    NV_evaluators = false
  }
  if pExecuteProgramNV = (C.PEXECUTEPROGRAMNV)(getProcAddr("glExecuteProgramNV")); pExecuteProgramNV == nil {
    NV_vertex_program = false
  }
  if pExtractComponentEXT = (C.PEXTRACTCOMPONENTEXT)(getProcAddr("glExtractComponentEXT")); pExtractComponentEXT == nil {
    EXT_vertex_shader = false
  }
  if pFeedbackBufferxOES = (C.PFEEDBACKBUFFERXOES)(getProcAddr("glFeedbackBufferxOES")); pFeedbackBufferxOES == nil {
    OES_fixed_point = false
  }
  if pFenceSync = (C.PFENCESYNC)(getProcAddr("glFenceSync")); pFenceSync == nil {
    ARB_sync = false
    return errors.New("glFenceSync")
  }
  if pFinalCombinerInputNV = (C.PFINALCOMBINERINPUTNV)(getProcAddr("glFinalCombinerInputNV")); pFinalCombinerInputNV == nil {
    NV_register_combiners = false
  }
  if pFinish = (C.PFINISH)(getProcAddr("glFinish")); pFinish == nil {
    return errors.New("glFinish")
  }
  if pFinishAsyncSGIX = (C.PFINISHASYNCSGIX)(getProcAddr("glFinishAsyncSGIX")); pFinishAsyncSGIX == nil {
    SGIX_async = false
  }
  if pFinishFenceAPPLE = (C.PFINISHFENCEAPPLE)(getProcAddr("glFinishFenceAPPLE")); pFinishFenceAPPLE == nil {
    APPLE_fence = false
  }
  if pFinishFenceNV = (C.PFINISHFENCENV)(getProcAddr("glFinishFenceNV")); pFinishFenceNV == nil {
    NV_fence = false
  }
  if pFinishObjectAPPLE = (C.PFINISHOBJECTAPPLE)(getProcAddr("glFinishObjectAPPLE")); pFinishObjectAPPLE == nil {
    APPLE_fence = false
  }
  if pFinishTextureSUNX = (C.PFINISHTEXTURESUNX)(getProcAddr("glFinishTextureSUNX")); pFinishTextureSUNX == nil {
    SUNX_constant_data = false
  }
  if pFlush = (C.PFLUSH)(getProcAddr("glFlush")); pFlush == nil {
    return errors.New("glFlush")
  }
  if pFlushMappedBufferRange = (C.PFLUSHMAPPEDBUFFERRANGE)(getProcAddr("glFlushMappedBufferRange")); pFlushMappedBufferRange == nil {
    ARB_map_buffer_range = false
    return errors.New("glFlushMappedBufferRange")
  }
  if pFlushMappedBufferRangeAPPLE = (C.PFLUSHMAPPEDBUFFERRANGEAPPLE)(getProcAddr("glFlushMappedBufferRangeAPPLE")); pFlushMappedBufferRangeAPPLE == nil {
    APPLE_flush_buffer_range = false
  }
  if pFlushMappedNamedBufferRangeEXT = (C.PFLUSHMAPPEDNAMEDBUFFERRANGEEXT)(getProcAddr("glFlushMappedNamedBufferRangeEXT")); pFlushMappedNamedBufferRangeEXT == nil {
    EXT_direct_state_access = false
  }
  if pFlushPixelDataRangeNV = (C.PFLUSHPIXELDATARANGENV)(getProcAddr("glFlushPixelDataRangeNV")); pFlushPixelDataRangeNV == nil {
    NV_pixel_data_range = false
  }
  if pFlushRasterSGIX = (C.PFLUSHRASTERSGIX)(getProcAddr("glFlushRasterSGIX")); pFlushRasterSGIX == nil {
    SGIX_flush_raster = false
  }
  if pFlushStaticDataIBM = (C.PFLUSHSTATICDATAIBM)(getProcAddr("glFlushStaticDataIBM")); pFlushStaticDataIBM == nil {
    IBM_static_data = false
  }
  if pFlushVertexArrayRangeAPPLE = (C.PFLUSHVERTEXARRAYRANGEAPPLE)(getProcAddr("glFlushVertexArrayRangeAPPLE")); pFlushVertexArrayRangeAPPLE == nil {
    APPLE_vertex_array_range = false
  }
  if pFlushVertexArrayRangeNV = (C.PFLUSHVERTEXARRAYRANGENV)(getProcAddr("glFlushVertexArrayRangeNV")); pFlushVertexArrayRangeNV == nil {
    NV_vertex_array_range = false
  }
  if pFogCoordFormatNV = (C.PFOGCOORDFORMATNV)(getProcAddr("glFogCoordFormatNV")); pFogCoordFormatNV == nil {
    NV_vertex_buffer_unified_memory = false
  }
  if pFogCoordPointerEXT = (C.PFOGCOORDPOINTEREXT)(getProcAddr("glFogCoordPointerEXT")); pFogCoordPointerEXT == nil {
    EXT_fog_coord = false
  }
  if pFogCoordPointerListIBM = (C.PFOGCOORDPOINTERLISTIBM)(getProcAddr("glFogCoordPointerListIBM")); pFogCoordPointerListIBM == nil {
    IBM_vertex_array_lists = false
  }
  if pFogCoorddEXT = (C.PFOGCOORDDEXT)(getProcAddr("glFogCoorddEXT")); pFogCoorddEXT == nil {
    EXT_fog_coord = false
  }
  if pFogCoorddvEXT = (C.PFOGCOORDDVEXT)(getProcAddr("glFogCoorddvEXT")); pFogCoorddvEXT == nil {
    EXT_fog_coord = false
  }
  if pFogCoordfEXT = (C.PFOGCOORDFEXT)(getProcAddr("glFogCoordfEXT")); pFogCoordfEXT == nil {
    EXT_fog_coord = false
  }
  if pFogCoordfvEXT = (C.PFOGCOORDFVEXT)(getProcAddr("glFogCoordfvEXT")); pFogCoordfvEXT == nil {
    EXT_fog_coord = false
  }
  if pFogCoordhNV = (C.PFOGCOORDHNV)(getProcAddr("glFogCoordhNV")); pFogCoordhNV == nil {
    NV_half_float = false
  }
  if pFogCoordhvNV = (C.PFOGCOORDHVNV)(getProcAddr("glFogCoordhvNV")); pFogCoordhvNV == nil {
    NV_half_float = false
  }
  if pFogFuncSGIS = (C.PFOGFUNCSGIS)(getProcAddr("glFogFuncSGIS")); pFogFuncSGIS == nil {
    SGIS_fog_function = false
  }
  if pFogxOES = (C.PFOGXOES)(getProcAddr("glFogxOES")); pFogxOES == nil {
    OES_fixed_point = false
  }
  if pFogxvOES = (C.PFOGXVOES)(getProcAddr("glFogxvOES")); pFogxvOES == nil {
    OES_fixed_point = false
  }
  if pFragmentColorMaterialSGIX = (C.PFRAGMENTCOLORMATERIALSGIX)(getProcAddr("glFragmentColorMaterialSGIX")); pFragmentColorMaterialSGIX == nil {
    SGIX_fragment_lighting = false
  }
  if pFragmentLightModelfSGIX = (C.PFRAGMENTLIGHTMODELFSGIX)(getProcAddr("glFragmentLightModelfSGIX")); pFragmentLightModelfSGIX == nil {
    SGIX_fragment_lighting = false
  }
  if pFragmentLightModelfvSGIX = (C.PFRAGMENTLIGHTMODELFVSGIX)(getProcAddr("glFragmentLightModelfvSGIX")); pFragmentLightModelfvSGIX == nil {
    SGIX_fragment_lighting = false
  }
  if pFragmentLightModeliSGIX = (C.PFRAGMENTLIGHTMODELISGIX)(getProcAddr("glFragmentLightModeliSGIX")); pFragmentLightModeliSGIX == nil {
    SGIX_fragment_lighting = false
  }
  if pFragmentLightModelivSGIX = (C.PFRAGMENTLIGHTMODELIVSGIX)(getProcAddr("glFragmentLightModelivSGIX")); pFragmentLightModelivSGIX == nil {
    SGIX_fragment_lighting = false
  }
  if pFragmentLightfSGIX = (C.PFRAGMENTLIGHTFSGIX)(getProcAddr("glFragmentLightfSGIX")); pFragmentLightfSGIX == nil {
    SGIX_fragment_lighting = false
  }
  if pFragmentLightfvSGIX = (C.PFRAGMENTLIGHTFVSGIX)(getProcAddr("glFragmentLightfvSGIX")); pFragmentLightfvSGIX == nil {
    SGIX_fragment_lighting = false
  }
  if pFragmentLightiSGIX = (C.PFRAGMENTLIGHTISGIX)(getProcAddr("glFragmentLightiSGIX")); pFragmentLightiSGIX == nil {
    SGIX_fragment_lighting = false
  }
  if pFragmentLightivSGIX = (C.PFRAGMENTLIGHTIVSGIX)(getProcAddr("glFragmentLightivSGIX")); pFragmentLightivSGIX == nil {
    SGIX_fragment_lighting = false
  }
  if pFragmentMaterialfSGIX = (C.PFRAGMENTMATERIALFSGIX)(getProcAddr("glFragmentMaterialfSGIX")); pFragmentMaterialfSGIX == nil {
    SGIX_fragment_lighting = false
  }
  if pFragmentMaterialfvSGIX = (C.PFRAGMENTMATERIALFVSGIX)(getProcAddr("glFragmentMaterialfvSGIX")); pFragmentMaterialfvSGIX == nil {
    SGIX_fragment_lighting = false
  }
  if pFragmentMaterialiSGIX = (C.PFRAGMENTMATERIALISGIX)(getProcAddr("glFragmentMaterialiSGIX")); pFragmentMaterialiSGIX == nil {
    SGIX_fragment_lighting = false
  }
  if pFragmentMaterialivSGIX = (C.PFRAGMENTMATERIALIVSGIX)(getProcAddr("glFragmentMaterialivSGIX")); pFragmentMaterialivSGIX == nil {
    SGIX_fragment_lighting = false
  }
  if pFrameTerminatorGREMEDY = (C.PFRAMETERMINATORGREMEDY)(getProcAddr("glFrameTerminatorGREMEDY")); pFrameTerminatorGREMEDY == nil {
    GREMEDY_frame_terminator = false
  }
  if pFrameZoomSGIX = (C.PFRAMEZOOMSGIX)(getProcAddr("glFrameZoomSGIX")); pFrameZoomSGIX == nil {
    SGIX_framezoom = false
  }
  if pFramebufferDrawBufferEXT = (C.PFRAMEBUFFERDRAWBUFFEREXT)(getProcAddr("glFramebufferDrawBufferEXT")); pFramebufferDrawBufferEXT == nil {
    EXT_direct_state_access = false
  }
  if pFramebufferDrawBuffersEXT = (C.PFRAMEBUFFERDRAWBUFFERSEXT)(getProcAddr("glFramebufferDrawBuffersEXT")); pFramebufferDrawBuffersEXT == nil {
    EXT_direct_state_access = false
  }
  if pFramebufferParameteri = (C.PFRAMEBUFFERPARAMETERI)(getProcAddr("glFramebufferParameteri")); pFramebufferParameteri == nil {
    ARB_framebuffer_no_attachments = false
  }
  if pFramebufferReadBufferEXT = (C.PFRAMEBUFFERREADBUFFEREXT)(getProcAddr("glFramebufferReadBufferEXT")); pFramebufferReadBufferEXT == nil {
    EXT_direct_state_access = false
  }
  if pFramebufferRenderbuffer = (C.PFRAMEBUFFERRENDERBUFFER)(getProcAddr("glFramebufferRenderbuffer")); pFramebufferRenderbuffer == nil {
    ARB_framebuffer_object = false
    return errors.New("glFramebufferRenderbuffer")
  }
  if pFramebufferRenderbufferEXT = (C.PFRAMEBUFFERRENDERBUFFEREXT)(getProcAddr("glFramebufferRenderbufferEXT")); pFramebufferRenderbufferEXT == nil {
    EXT_framebuffer_object = false
  }
  if pFramebufferTexture = (C.PFRAMEBUFFERTEXTURE)(getProcAddr("glFramebufferTexture")); pFramebufferTexture == nil {
    return errors.New("glFramebufferTexture")
  }
  if pFramebufferTexture1D = (C.PFRAMEBUFFERTEXTURE1D)(getProcAddr("glFramebufferTexture1D")); pFramebufferTexture1D == nil {
    ARB_framebuffer_object = false
    return errors.New("glFramebufferTexture1D")
  }
  if pFramebufferTexture1DEXT = (C.PFRAMEBUFFERTEXTURE1DEXT)(getProcAddr("glFramebufferTexture1DEXT")); pFramebufferTexture1DEXT == nil {
    EXT_framebuffer_object = false
  }
  if pFramebufferTexture2D = (C.PFRAMEBUFFERTEXTURE2D)(getProcAddr("glFramebufferTexture2D")); pFramebufferTexture2D == nil {
    ARB_framebuffer_object = false
    return errors.New("glFramebufferTexture2D")
  }
  if pFramebufferTexture2DEXT = (C.PFRAMEBUFFERTEXTURE2DEXT)(getProcAddr("glFramebufferTexture2DEXT")); pFramebufferTexture2DEXT == nil {
    EXT_framebuffer_object = false
  }
  if pFramebufferTexture3D = (C.PFRAMEBUFFERTEXTURE3D)(getProcAddr("glFramebufferTexture3D")); pFramebufferTexture3D == nil {
    ARB_framebuffer_object = false
    return errors.New("glFramebufferTexture3D")
  }
  if pFramebufferTexture3DEXT = (C.PFRAMEBUFFERTEXTURE3DEXT)(getProcAddr("glFramebufferTexture3DEXT")); pFramebufferTexture3DEXT == nil {
    EXT_framebuffer_object = false
  }
  if pFramebufferTextureARB = (C.PFRAMEBUFFERTEXTUREARB)(getProcAddr("glFramebufferTextureARB")); pFramebufferTextureARB == nil {
    ARB_geometry_shader4 = false
  }
  if pFramebufferTextureEXT = (C.PFRAMEBUFFERTEXTUREEXT)(getProcAddr("glFramebufferTextureEXT")); pFramebufferTextureEXT == nil {
    NV_geometry_program4 = false
  }
  if pFramebufferTextureFaceARB = (C.PFRAMEBUFFERTEXTUREFACEARB)(getProcAddr("glFramebufferTextureFaceARB")); pFramebufferTextureFaceARB == nil {
    ARB_geometry_shader4 = false
  }
  if pFramebufferTextureFaceEXT = (C.PFRAMEBUFFERTEXTUREFACEEXT)(getProcAddr("glFramebufferTextureFaceEXT")); pFramebufferTextureFaceEXT == nil {
    NV_geometry_program4 = false
  }
  if pFramebufferTextureLayer = (C.PFRAMEBUFFERTEXTURELAYER)(getProcAddr("glFramebufferTextureLayer")); pFramebufferTextureLayer == nil {
    ARB_framebuffer_object = false
    return errors.New("glFramebufferTextureLayer")
  }
  if pFramebufferTextureLayerARB = (C.PFRAMEBUFFERTEXTURELAYERARB)(getProcAddr("glFramebufferTextureLayerARB")); pFramebufferTextureLayerARB == nil {
    ARB_geometry_shader4 = false
  }
  if pFramebufferTextureLayerEXT = (C.PFRAMEBUFFERTEXTURELAYEREXT)(getProcAddr("glFramebufferTextureLayerEXT")); pFramebufferTextureLayerEXT == nil {
    NV_geometry_program4 = false
  }
  if pFreeObjectBufferATI = (C.PFREEOBJECTBUFFERATI)(getProcAddr("glFreeObjectBufferATI")); pFreeObjectBufferATI == nil {
    ATI_vertex_array_object = false
  }
  if pFrontFace = (C.PFRONTFACE)(getProcAddr("glFrontFace")); pFrontFace == nil {
    return errors.New("glFrontFace")
  }
  if pFrustumfOES = (C.PFRUSTUMFOES)(getProcAddr("glFrustumfOES")); pFrustumfOES == nil {
    OES_single_precision = false
  }
  if pFrustumxOES = (C.PFRUSTUMXOES)(getProcAddr("glFrustumxOES")); pFrustumxOES == nil {
    OES_fixed_point = false
  }
  if pGenAsyncMarkersSGIX = (C.PGENASYNCMARKERSSGIX)(getProcAddr("glGenAsyncMarkersSGIX")); pGenAsyncMarkersSGIX == nil {
    SGIX_async = false
  }
  if pGenBuffers = (C.PGENBUFFERS)(getProcAddr("glGenBuffers")); pGenBuffers == nil {
    return errors.New("glGenBuffers")
  }
  if pGenBuffersARB = (C.PGENBUFFERSARB)(getProcAddr("glGenBuffersARB")); pGenBuffersARB == nil {
    ARB_vertex_buffer_object = false
  }
  if pGenFencesAPPLE = (C.PGENFENCESAPPLE)(getProcAddr("glGenFencesAPPLE")); pGenFencesAPPLE == nil {
    APPLE_fence = false
  }
  if pGenFencesNV = (C.PGENFENCESNV)(getProcAddr("glGenFencesNV")); pGenFencesNV == nil {
    NV_fence = false
  }
  if pGenFragmentShadersATI = (C.PGENFRAGMENTSHADERSATI)(getProcAddr("glGenFragmentShadersATI")); pGenFragmentShadersATI == nil {
    ATI_fragment_shader = false
  }
  if pGenFramebuffers = (C.PGENFRAMEBUFFERS)(getProcAddr("glGenFramebuffers")); pGenFramebuffers == nil {
    ARB_framebuffer_object = false
    return errors.New("glGenFramebuffers")
  }
  if pGenFramebuffersEXT = (C.PGENFRAMEBUFFERSEXT)(getProcAddr("glGenFramebuffersEXT")); pGenFramebuffersEXT == nil {
    EXT_framebuffer_object = false
  }
  if pGenNamesAMD = (C.PGENNAMESAMD)(getProcAddr("glGenNamesAMD")); pGenNamesAMD == nil {
    AMD_name_gen_delete = false
  }
  if pGenOcclusionQueriesNV = (C.PGENOCCLUSIONQUERIESNV)(getProcAddr("glGenOcclusionQueriesNV")); pGenOcclusionQueriesNV == nil {
    NV_occlusion_query = false
  }
  if pGenPathsNV = (C.PGENPATHSNV)(getProcAddr("glGenPathsNV")); pGenPathsNV == nil {
    NV_path_rendering = false
  }
  if pGenPerfMonitorsAMD = (C.PGENPERFMONITORSAMD)(getProcAddr("glGenPerfMonitorsAMD")); pGenPerfMonitorsAMD == nil {
    AMD_performance_monitor = false
  }
  if pGenProgramPipelines = (C.PGENPROGRAMPIPELINES)(getProcAddr("glGenProgramPipelines")); pGenProgramPipelines == nil {
    ARB_separate_shader_objects = false
    return errors.New("glGenProgramPipelines")
  }
  if pGenProgramPipelinesEXT = (C.PGENPROGRAMPIPELINESEXT)(getProcAddr("glGenProgramPipelinesEXT")); pGenProgramPipelinesEXT == nil {
    EXT_separate_shader_objects = false
  }
  if pGenProgramsARB = (C.PGENPROGRAMSARB)(getProcAddr("glGenProgramsARB")); pGenProgramsARB == nil {
    ARB_fragment_program = false
    ARB_vertex_program = false
  }
  if pGenProgramsNV = (C.PGENPROGRAMSNV)(getProcAddr("glGenProgramsNV")); pGenProgramsNV == nil {
    NV_vertex_program = false
  }
  if pGenQueries = (C.PGENQUERIES)(getProcAddr("glGenQueries")); pGenQueries == nil {
    return errors.New("glGenQueries")
  }
  if pGenQueriesARB = (C.PGENQUERIESARB)(getProcAddr("glGenQueriesARB")); pGenQueriesARB == nil {
    ARB_occlusion_query = false
  }
  if pGenRenderbuffers = (C.PGENRENDERBUFFERS)(getProcAddr("glGenRenderbuffers")); pGenRenderbuffers == nil {
    ARB_framebuffer_object = false
    return errors.New("glGenRenderbuffers")
  }
  if pGenRenderbuffersEXT = (C.PGENRENDERBUFFERSEXT)(getProcAddr("glGenRenderbuffersEXT")); pGenRenderbuffersEXT == nil {
    EXT_framebuffer_object = false
  }
  if pGenSamplers = (C.PGENSAMPLERS)(getProcAddr("glGenSamplers")); pGenSamplers == nil {
    ARB_sampler_objects = false
    return errors.New("glGenSamplers")
  }
  if pGenSymbolsEXT = (C.PGENSYMBOLSEXT)(getProcAddr("glGenSymbolsEXT")); pGenSymbolsEXT == nil {
    EXT_vertex_shader = false
  }
  if pGenTextures = (C.PGENTEXTURES)(getProcAddr("glGenTextures")); pGenTextures == nil {
    return errors.New("glGenTextures")
  }
  if pGenTexturesEXT = (C.PGENTEXTURESEXT)(getProcAddr("glGenTexturesEXT")); pGenTexturesEXT == nil {
    EXT_texture_object = false
  }
  if pGenTransformFeedbacks = (C.PGENTRANSFORMFEEDBACKS)(getProcAddr("glGenTransformFeedbacks")); pGenTransformFeedbacks == nil {
    ARB_transform_feedback2 = false
    return errors.New("glGenTransformFeedbacks")
  }
  if pGenTransformFeedbacksNV = (C.PGENTRANSFORMFEEDBACKSNV)(getProcAddr("glGenTransformFeedbacksNV")); pGenTransformFeedbacksNV == nil {
    NV_transform_feedback2 = false
  }
  if pGenVertexArrays = (C.PGENVERTEXARRAYS)(getProcAddr("glGenVertexArrays")); pGenVertexArrays == nil {
    ARB_vertex_array_object = false
    return errors.New("glGenVertexArrays")
  }
  if pGenVertexArraysAPPLE = (C.PGENVERTEXARRAYSAPPLE)(getProcAddr("glGenVertexArraysAPPLE")); pGenVertexArraysAPPLE == nil {
    APPLE_vertex_array_object = false
  }
  if pGenVertexShadersEXT = (C.PGENVERTEXSHADERSEXT)(getProcAddr("glGenVertexShadersEXT")); pGenVertexShadersEXT == nil {
    EXT_vertex_shader = false
  }
  if pGenerateMipmap = (C.PGENERATEMIPMAP)(getProcAddr("glGenerateMipmap")); pGenerateMipmap == nil {
    ARB_framebuffer_object = false
    return errors.New("glGenerateMipmap")
  }
  if pGenerateMipmapEXT = (C.PGENERATEMIPMAPEXT)(getProcAddr("glGenerateMipmapEXT")); pGenerateMipmapEXT == nil {
    EXT_framebuffer_object = false
  }
  if pGenerateMultiTexMipmapEXT = (C.PGENERATEMULTITEXMIPMAPEXT)(getProcAddr("glGenerateMultiTexMipmapEXT")); pGenerateMultiTexMipmapEXT == nil {
    EXT_direct_state_access = false
  }
  if pGenerateTextureMipmapEXT = (C.PGENERATETEXTUREMIPMAPEXT)(getProcAddr("glGenerateTextureMipmapEXT")); pGenerateTextureMipmapEXT == nil {
    EXT_direct_state_access = false
  }
  if pGetActiveAtomicCounterBufferiv = (C.PGETACTIVEATOMICCOUNTERBUFFERIV)(getProcAddr("glGetActiveAtomicCounterBufferiv")); pGetActiveAtomicCounterBufferiv == nil {
    ARB_shader_atomic_counters = false
  }
  if pGetActiveAttrib = (C.PGETACTIVEATTRIB)(getProcAddr("glGetActiveAttrib")); pGetActiveAttrib == nil {
    return errors.New("glGetActiveAttrib")
  }
  if pGetActiveAttribARB = (C.PGETACTIVEATTRIBARB)(getProcAddr("glGetActiveAttribARB")); pGetActiveAttribARB == nil {
    ARB_vertex_shader = false
  }
  if pGetActiveSubroutineName = (C.PGETACTIVESUBROUTINENAME)(getProcAddr("glGetActiveSubroutineName")); pGetActiveSubroutineName == nil {
    ARB_shader_subroutine = false
    return errors.New("glGetActiveSubroutineName")
  }
  if pGetActiveSubroutineUniformName = (C.PGETACTIVESUBROUTINEUNIFORMNAME)(getProcAddr("glGetActiveSubroutineUniformName")); pGetActiveSubroutineUniformName == nil {
    ARB_shader_subroutine = false
    return errors.New("glGetActiveSubroutineUniformName")
  }
  if pGetActiveSubroutineUniformiv = (C.PGETACTIVESUBROUTINEUNIFORMIV)(getProcAddr("glGetActiveSubroutineUniformiv")); pGetActiveSubroutineUniformiv == nil {
    ARB_shader_subroutine = false
    return errors.New("glGetActiveSubroutineUniformiv")
  }
  if pGetActiveUniform = (C.PGETACTIVEUNIFORM)(getProcAddr("glGetActiveUniform")); pGetActiveUniform == nil {
    return errors.New("glGetActiveUniform")
  }
  if pGetActiveUniformARB = (C.PGETACTIVEUNIFORMARB)(getProcAddr("glGetActiveUniformARB")); pGetActiveUniformARB == nil {
    ARB_shader_objects = false
  }
  if pGetActiveUniformBlockName = (C.PGETACTIVEUNIFORMBLOCKNAME)(getProcAddr("glGetActiveUniformBlockName")); pGetActiveUniformBlockName == nil {
    ARB_uniform_buffer_object = false
    return errors.New("glGetActiveUniformBlockName")
  }
  if pGetActiveUniformBlockiv = (C.PGETACTIVEUNIFORMBLOCKIV)(getProcAddr("glGetActiveUniformBlockiv")); pGetActiveUniformBlockiv == nil {
    ARB_uniform_buffer_object = false
    return errors.New("glGetActiveUniformBlockiv")
  }
  if pGetActiveUniformName = (C.PGETACTIVEUNIFORMNAME)(getProcAddr("glGetActiveUniformName")); pGetActiveUniformName == nil {
    ARB_uniform_buffer_object = false
    return errors.New("glGetActiveUniformName")
  }
  if pGetActiveUniformsiv = (C.PGETACTIVEUNIFORMSIV)(getProcAddr("glGetActiveUniformsiv")); pGetActiveUniformsiv == nil {
    ARB_uniform_buffer_object = false
    return errors.New("glGetActiveUniformsiv")
  }
  if pGetActiveVaryingNV = (C.PGETACTIVEVARYINGNV)(getProcAddr("glGetActiveVaryingNV")); pGetActiveVaryingNV == nil {
    NV_transform_feedback = false
  }
  if pGetArrayObjectfvATI = (C.PGETARRAYOBJECTFVATI)(getProcAddr("glGetArrayObjectfvATI")); pGetArrayObjectfvATI == nil {
    ATI_vertex_array_object = false
  }
  if pGetArrayObjectivATI = (C.PGETARRAYOBJECTIVATI)(getProcAddr("glGetArrayObjectivATI")); pGetArrayObjectivATI == nil {
    ATI_vertex_array_object = false
  }
  if pGetAttachedObjectsARB = (C.PGETATTACHEDOBJECTSARB)(getProcAddr("glGetAttachedObjectsARB")); pGetAttachedObjectsARB == nil {
    ARB_shader_objects = false
  }
  if pGetAttachedShaders = (C.PGETATTACHEDSHADERS)(getProcAddr("glGetAttachedShaders")); pGetAttachedShaders == nil {
    return errors.New("glGetAttachedShaders")
  }
  if pGetAttribLocation = (C.PGETATTRIBLOCATION)(getProcAddr("glGetAttribLocation")); pGetAttribLocation == nil {
    return errors.New("glGetAttribLocation")
  }
  if pGetAttribLocationARB = (C.PGETATTRIBLOCATIONARB)(getProcAddr("glGetAttribLocationARB")); pGetAttribLocationARB == nil {
    ARB_vertex_shader = false
  }
  if pGetBooleanIndexedvEXT = (C.PGETBOOLEANINDEXEDVEXT)(getProcAddr("glGetBooleanIndexedvEXT")); pGetBooleanIndexedvEXT == nil {
    EXT_direct_state_access = false
    EXT_draw_buffers2 = false
  }
  if pGetBooleani_v = (C.PGETBOOLEANI_V)(getProcAddr("glGetBooleani_v")); pGetBooleani_v == nil {
    return errors.New("glGetBooleani_v")
  }
  if pGetBooleanv = (C.PGETBOOLEANV)(getProcAddr("glGetBooleanv")); pGetBooleanv == nil {
    return errors.New("glGetBooleanv")
  }
  if pGetBufferParameteri64v = (C.PGETBUFFERPARAMETERI64V)(getProcAddr("glGetBufferParameteri64v")); pGetBufferParameteri64v == nil {
    return errors.New("glGetBufferParameteri64v")
  }
  if pGetBufferParameteriv = (C.PGETBUFFERPARAMETERIV)(getProcAddr("glGetBufferParameteriv")); pGetBufferParameteriv == nil {
    return errors.New("glGetBufferParameteriv")
  }
  if pGetBufferParameterivARB = (C.PGETBUFFERPARAMETERIVARB)(getProcAddr("glGetBufferParameterivARB")); pGetBufferParameterivARB == nil {
    ARB_vertex_buffer_object = false
  }
  if pGetBufferParameterui64vNV = (C.PGETBUFFERPARAMETERUI64VNV)(getProcAddr("glGetBufferParameterui64vNV")); pGetBufferParameterui64vNV == nil {
    NV_shader_buffer_load = false
  }
  if pGetBufferPointerv = (C.PGETBUFFERPOINTERV)(getProcAddr("glGetBufferPointerv")); pGetBufferPointerv == nil {
    return errors.New("glGetBufferPointerv")
  }
  if pGetBufferPointervARB = (C.PGETBUFFERPOINTERVARB)(getProcAddr("glGetBufferPointervARB")); pGetBufferPointervARB == nil {
    ARB_vertex_buffer_object = false
  }
  if pGetBufferSubData = (C.PGETBUFFERSUBDATA)(getProcAddr("glGetBufferSubData")); pGetBufferSubData == nil {
    return errors.New("glGetBufferSubData")
  }
  if pGetBufferSubDataARB = (C.PGETBUFFERSUBDATAARB)(getProcAddr("glGetBufferSubDataARB")); pGetBufferSubDataARB == nil {
    ARB_vertex_buffer_object = false
  }
  if pGetClipPlanefOES = (C.PGETCLIPPLANEFOES)(getProcAddr("glGetClipPlanefOES")); pGetClipPlanefOES == nil {
    OES_single_precision = false
  }
  if pGetClipPlanexOES = (C.PGETCLIPPLANEXOES)(getProcAddr("glGetClipPlanexOES")); pGetClipPlanexOES == nil {
    OES_fixed_point = false
  }
  if pGetColorTableEXT = (C.PGETCOLORTABLEEXT)(getProcAddr("glGetColorTableEXT")); pGetColorTableEXT == nil {
    EXT_paletted_texture = false
  }
  if pGetColorTableParameterfvEXT = (C.PGETCOLORTABLEPARAMETERFVEXT)(getProcAddr("glGetColorTableParameterfvEXT")); pGetColorTableParameterfvEXT == nil {
    EXT_paletted_texture = false
  }
  if pGetColorTableParameterfvSGI = (C.PGETCOLORTABLEPARAMETERFVSGI)(getProcAddr("glGetColorTableParameterfvSGI")); pGetColorTableParameterfvSGI == nil {
    SGI_color_table = false
  }
  if pGetColorTableParameterivEXT = (C.PGETCOLORTABLEPARAMETERIVEXT)(getProcAddr("glGetColorTableParameterivEXT")); pGetColorTableParameterivEXT == nil {
    EXT_paletted_texture = false
  }
  if pGetColorTableParameterivSGI = (C.PGETCOLORTABLEPARAMETERIVSGI)(getProcAddr("glGetColorTableParameterivSGI")); pGetColorTableParameterivSGI == nil {
    SGI_color_table = false
  }
  if pGetColorTableSGI = (C.PGETCOLORTABLESGI)(getProcAddr("glGetColorTableSGI")); pGetColorTableSGI == nil {
    SGI_color_table = false
  }
  if pGetCombinerInputParameterfvNV = (C.PGETCOMBINERINPUTPARAMETERFVNV)(getProcAddr("glGetCombinerInputParameterfvNV")); pGetCombinerInputParameterfvNV == nil {
    NV_register_combiners = false
  }
  if pGetCombinerInputParameterivNV = (C.PGETCOMBINERINPUTPARAMETERIVNV)(getProcAddr("glGetCombinerInputParameterivNV")); pGetCombinerInputParameterivNV == nil {
    NV_register_combiners = false
  }
  if pGetCombinerOutputParameterfvNV = (C.PGETCOMBINEROUTPUTPARAMETERFVNV)(getProcAddr("glGetCombinerOutputParameterfvNV")); pGetCombinerOutputParameterfvNV == nil {
    NV_register_combiners = false
  }
  if pGetCombinerOutputParameterivNV = (C.PGETCOMBINEROUTPUTPARAMETERIVNV)(getProcAddr("glGetCombinerOutputParameterivNV")); pGetCombinerOutputParameterivNV == nil {
    NV_register_combiners = false
  }
  if pGetCombinerStageParameterfvNV = (C.PGETCOMBINERSTAGEPARAMETERFVNV)(getProcAddr("glGetCombinerStageParameterfvNV")); pGetCombinerStageParameterfvNV == nil {
    NV_register_combiners2 = false
  }
  if pGetCompressedMultiTexImageEXT = (C.PGETCOMPRESSEDMULTITEXIMAGEEXT)(getProcAddr("glGetCompressedMultiTexImageEXT")); pGetCompressedMultiTexImageEXT == nil {
    EXT_direct_state_access = false
  }
  if pGetCompressedTexImage = (C.PGETCOMPRESSEDTEXIMAGE)(getProcAddr("glGetCompressedTexImage")); pGetCompressedTexImage == nil {
    return errors.New("glGetCompressedTexImage")
  }
  if pGetCompressedTexImageARB = (C.PGETCOMPRESSEDTEXIMAGEARB)(getProcAddr("glGetCompressedTexImageARB")); pGetCompressedTexImageARB == nil {
    ARB_texture_compression = false
  }
  if pGetCompressedTextureImageEXT = (C.PGETCOMPRESSEDTEXTUREIMAGEEXT)(getProcAddr("glGetCompressedTextureImageEXT")); pGetCompressedTextureImageEXT == nil {
    EXT_direct_state_access = false
  }
  if pGetConvolutionFilterEXT = (C.PGETCONVOLUTIONFILTEREXT)(getProcAddr("glGetConvolutionFilterEXT")); pGetConvolutionFilterEXT == nil {
    EXT_convolution = false
  }
  if pGetConvolutionParameterfvEXT = (C.PGETCONVOLUTIONPARAMETERFVEXT)(getProcAddr("glGetConvolutionParameterfvEXT")); pGetConvolutionParameterfvEXT == nil {
    EXT_convolution = false
  }
  if pGetConvolutionParameterivEXT = (C.PGETCONVOLUTIONPARAMETERIVEXT)(getProcAddr("glGetConvolutionParameterivEXT")); pGetConvolutionParameterivEXT == nil {
    EXT_convolution = false
  }
  if pGetConvolutionParameterxvOES = (C.PGETCONVOLUTIONPARAMETERXVOES)(getProcAddr("glGetConvolutionParameterxvOES")); pGetConvolutionParameterxvOES == nil {
    OES_fixed_point = false
  }
  if pGetDebugMessageLog = (C.PGETDEBUGMESSAGELOG)(getProcAddr("glGetDebugMessageLog")); pGetDebugMessageLog == nil {
    KHR_debug = false
  }
  if pGetDebugMessageLogAMD = (C.PGETDEBUGMESSAGELOGAMD)(getProcAddr("glGetDebugMessageLogAMD")); pGetDebugMessageLogAMD == nil {
    AMD_debug_output = false
  }
  if pGetDebugMessageLogARB = (C.PGETDEBUGMESSAGELOGARB)(getProcAddr("glGetDebugMessageLogARB")); pGetDebugMessageLogARB == nil {
    ARB_debug_output = false
  }
  if pGetDebugMessageLogKHR = (C.PGETDEBUGMESSAGELOGKHR)(getProcAddr("glGetDebugMessageLogKHR")); pGetDebugMessageLogKHR == nil {
    KHR_debug = false
  }
  if pGetDetailTexFuncSGIS = (C.PGETDETAILTEXFUNCSGIS)(getProcAddr("glGetDetailTexFuncSGIS")); pGetDetailTexFuncSGIS == nil {
    SGIS_detail_texture = false
  }
  if pGetDoubleIndexedvEXT = (C.PGETDOUBLEINDEXEDVEXT)(getProcAddr("glGetDoubleIndexedvEXT")); pGetDoubleIndexedvEXT == nil {
    EXT_direct_state_access = false
  }
  if pGetDoublei_v = (C.PGETDOUBLEI_V)(getProcAddr("glGetDoublei_v")); pGetDoublei_v == nil {
    ARB_viewport_array = false
    return errors.New("glGetDoublei_v")
  }
  if pGetDoublei_vEXT = (C.PGETDOUBLEI_VEXT)(getProcAddr("glGetDoublei_vEXT")); pGetDoublei_vEXT == nil {
    EXT_direct_state_access = false
  }
  if pGetDoublev = (C.PGETDOUBLEV)(getProcAddr("glGetDoublev")); pGetDoublev == nil {
    return errors.New("glGetDoublev")
  }
  if pGetError = (C.PGETERROR)(getProcAddr("glGetError")); pGetError == nil {
    return errors.New("glGetError")
  }
  if pGetFenceivNV = (C.PGETFENCEIVNV)(getProcAddr("glGetFenceivNV")); pGetFenceivNV == nil {
    NV_fence = false
  }
  if pGetFinalCombinerInputParameterfvNV = (C.PGETFINALCOMBINERINPUTPARAMETERFVNV)(getProcAddr("glGetFinalCombinerInputParameterfvNV")); pGetFinalCombinerInputParameterfvNV == nil {
    NV_register_combiners = false
  }
  if pGetFinalCombinerInputParameterivNV = (C.PGETFINALCOMBINERINPUTPARAMETERIVNV)(getProcAddr("glGetFinalCombinerInputParameterivNV")); pGetFinalCombinerInputParameterivNV == nil {
    NV_register_combiners = false
  }
  if pGetFirstPerfQueryIdINTEL = (C.PGETFIRSTPERFQUERYIDINTEL)(getProcAddr("glGetFirstPerfQueryIdINTEL")); pGetFirstPerfQueryIdINTEL == nil {
    INTEL_performance_query = false
  }
  if pGetFixedvOES = (C.PGETFIXEDVOES)(getProcAddr("glGetFixedvOES")); pGetFixedvOES == nil {
    OES_fixed_point = false
  }
  if pGetFloatIndexedvEXT = (C.PGETFLOATINDEXEDVEXT)(getProcAddr("glGetFloatIndexedvEXT")); pGetFloatIndexedvEXT == nil {
    EXT_direct_state_access = false
  }
  if pGetFloati_v = (C.PGETFLOATI_V)(getProcAddr("glGetFloati_v")); pGetFloati_v == nil {
    ARB_viewport_array = false
    return errors.New("glGetFloati_v")
  }
  if pGetFloati_vEXT = (C.PGETFLOATI_VEXT)(getProcAddr("glGetFloati_vEXT")); pGetFloati_vEXT == nil {
    EXT_direct_state_access = false
  }
  if pGetFloatv = (C.PGETFLOATV)(getProcAddr("glGetFloatv")); pGetFloatv == nil {
    return errors.New("glGetFloatv")
  }
  if pGetFogFuncSGIS = (C.PGETFOGFUNCSGIS)(getProcAddr("glGetFogFuncSGIS")); pGetFogFuncSGIS == nil {
    SGIS_fog_function = false
  }
  if pGetFragDataIndex = (C.PGETFRAGDATAINDEX)(getProcAddr("glGetFragDataIndex")); pGetFragDataIndex == nil {
    ARB_blend_func_extended = false
    return errors.New("glGetFragDataIndex")
  }
  if pGetFragDataLocation = (C.PGETFRAGDATALOCATION)(getProcAddr("glGetFragDataLocation")); pGetFragDataLocation == nil {
    return errors.New("glGetFragDataLocation")
  }
  if pGetFragDataLocationEXT = (C.PGETFRAGDATALOCATIONEXT)(getProcAddr("glGetFragDataLocationEXT")); pGetFragDataLocationEXT == nil {
    EXT_gpu_shader4 = false
  }
  if pGetFragmentLightfvSGIX = (C.PGETFRAGMENTLIGHTFVSGIX)(getProcAddr("glGetFragmentLightfvSGIX")); pGetFragmentLightfvSGIX == nil {
    SGIX_fragment_lighting = false
  }
  if pGetFragmentLightivSGIX = (C.PGETFRAGMENTLIGHTIVSGIX)(getProcAddr("glGetFragmentLightivSGIX")); pGetFragmentLightivSGIX == nil {
    SGIX_fragment_lighting = false
  }
  if pGetFragmentMaterialfvSGIX = (C.PGETFRAGMENTMATERIALFVSGIX)(getProcAddr("glGetFragmentMaterialfvSGIX")); pGetFragmentMaterialfvSGIX == nil {
    SGIX_fragment_lighting = false
  }
  if pGetFragmentMaterialivSGIX = (C.PGETFRAGMENTMATERIALIVSGIX)(getProcAddr("glGetFragmentMaterialivSGIX")); pGetFragmentMaterialivSGIX == nil {
    SGIX_fragment_lighting = false
  }
  if pGetFramebufferAttachmentParameteriv = (C.PGETFRAMEBUFFERATTACHMENTPARAMETERIV)(getProcAddr("glGetFramebufferAttachmentParameteriv")); pGetFramebufferAttachmentParameteriv == nil {
    ARB_framebuffer_object = false
    return errors.New("glGetFramebufferAttachmentParameteriv")
  }
  if pGetFramebufferAttachmentParameterivEXT = (C.PGETFRAMEBUFFERATTACHMENTPARAMETERIVEXT)(getProcAddr("glGetFramebufferAttachmentParameterivEXT")); pGetFramebufferAttachmentParameterivEXT == nil {
    EXT_framebuffer_object = false
  }
  if pGetFramebufferParameteriv = (C.PGETFRAMEBUFFERPARAMETERIV)(getProcAddr("glGetFramebufferParameteriv")); pGetFramebufferParameteriv == nil {
    ARB_framebuffer_no_attachments = false
  }
  if pGetFramebufferParameterivEXT = (C.PGETFRAMEBUFFERPARAMETERIVEXT)(getProcAddr("glGetFramebufferParameterivEXT")); pGetFramebufferParameterivEXT == nil {
    EXT_direct_state_access = false
  }
  if pGetGraphicsResetStatusARB = (C.PGETGRAPHICSRESETSTATUSARB)(getProcAddr("glGetGraphicsResetStatusARB")); pGetGraphicsResetStatusARB == nil {
    ARB_robustness = false
  }
  if pGetHandleARB = (C.PGETHANDLEARB)(getProcAddr("glGetHandleARB")); pGetHandleARB == nil {
    ARB_shader_objects = false
  }
  if pGetHistogramEXT = (C.PGETHISTOGRAMEXT)(getProcAddr("glGetHistogramEXT")); pGetHistogramEXT == nil {
    EXT_histogram = false
  }
  if pGetHistogramParameterfvEXT = (C.PGETHISTOGRAMPARAMETERFVEXT)(getProcAddr("glGetHistogramParameterfvEXT")); pGetHistogramParameterfvEXT == nil {
    EXT_histogram = false
  }
  if pGetHistogramParameterivEXT = (C.PGETHISTOGRAMPARAMETERIVEXT)(getProcAddr("glGetHistogramParameterivEXT")); pGetHistogramParameterivEXT == nil {
    EXT_histogram = false
  }
  if pGetHistogramParameterxvOES = (C.PGETHISTOGRAMPARAMETERXVOES)(getProcAddr("glGetHistogramParameterxvOES")); pGetHistogramParameterxvOES == nil {
    OES_fixed_point = false
  }
  if pGetImageHandleARB = (C.PGETIMAGEHANDLEARB)(getProcAddr("glGetImageHandleARB")); pGetImageHandleARB == nil {
    ARB_bindless_texture = false
  }
  if pGetImageHandleNV = (C.PGETIMAGEHANDLENV)(getProcAddr("glGetImageHandleNV")); pGetImageHandleNV == nil {
    NV_bindless_texture = false
  }
  if pGetImageTransformParameterfvHP = (C.PGETIMAGETRANSFORMPARAMETERFVHP)(getProcAddr("glGetImageTransformParameterfvHP")); pGetImageTransformParameterfvHP == nil {
    HP_image_transform = false
  }
  if pGetImageTransformParameterivHP = (C.PGETIMAGETRANSFORMPARAMETERIVHP)(getProcAddr("glGetImageTransformParameterivHP")); pGetImageTransformParameterivHP == nil {
    HP_image_transform = false
  }
  if pGetInfoLogARB = (C.PGETINFOLOGARB)(getProcAddr("glGetInfoLogARB")); pGetInfoLogARB == nil {
    ARB_shader_objects = false
  }
  if pGetInstrumentsSGIX = (C.PGETINSTRUMENTSSGIX)(getProcAddr("glGetInstrumentsSGIX")); pGetInstrumentsSGIX == nil {
    SGIX_instruments = false
  }
  if pGetInteger64i_v = (C.PGETINTEGER64I_V)(getProcAddr("glGetInteger64i_v")); pGetInteger64i_v == nil {
    return errors.New("glGetInteger64i_v")
  }
  if pGetInteger64v = (C.PGETINTEGER64V)(getProcAddr("glGetInteger64v")); pGetInteger64v == nil {
    ARB_sync = false
    return errors.New("glGetInteger64v")
  }
  if pGetIntegerIndexedvEXT = (C.PGETINTEGERINDEXEDVEXT)(getProcAddr("glGetIntegerIndexedvEXT")); pGetIntegerIndexedvEXT == nil {
    EXT_direct_state_access = false
    EXT_draw_buffers2 = false
  }
  if pGetIntegeri_v = (C.PGETINTEGERI_V)(getProcAddr("glGetIntegeri_v")); pGetIntegeri_v == nil {
    return errors.New("glGetIntegeri_v")
  }
  if pGetIntegerui64i_vNV = (C.PGETINTEGERUI64I_VNV)(getProcAddr("glGetIntegerui64i_vNV")); pGetIntegerui64i_vNV == nil {
    NV_vertex_buffer_unified_memory = false
  }
  if pGetIntegerui64vNV = (C.PGETINTEGERUI64VNV)(getProcAddr("glGetIntegerui64vNV")); pGetIntegerui64vNV == nil {
    NV_shader_buffer_load = false
  }
  if pGetIntegerv = (C.PGETINTEGERV)(getProcAddr("glGetIntegerv")); pGetIntegerv == nil {
    return errors.New("glGetIntegerv")
  }
  if pGetInternalformati64v = (C.PGETINTERNALFORMATI64V)(getProcAddr("glGetInternalformati64v")); pGetInternalformati64v == nil {
    ARB_internalformat_query2 = false
  }
  if pGetInternalformativ = (C.PGETINTERNALFORMATIV)(getProcAddr("glGetInternalformativ")); pGetInternalformativ == nil {
    ARB_internalformat_query = false
  }
  if pGetInvariantBooleanvEXT = (C.PGETINVARIANTBOOLEANVEXT)(getProcAddr("glGetInvariantBooleanvEXT")); pGetInvariantBooleanvEXT == nil {
    EXT_vertex_shader = false
  }
  if pGetInvariantFloatvEXT = (C.PGETINVARIANTFLOATVEXT)(getProcAddr("glGetInvariantFloatvEXT")); pGetInvariantFloatvEXT == nil {
    EXT_vertex_shader = false
  }
  if pGetInvariantIntegervEXT = (C.PGETINVARIANTINTEGERVEXT)(getProcAddr("glGetInvariantIntegervEXT")); pGetInvariantIntegervEXT == nil {
    EXT_vertex_shader = false
  }
  if pGetLightxOES = (C.PGETLIGHTXOES)(getProcAddr("glGetLightxOES")); pGetLightxOES == nil {
    OES_fixed_point = false
  }
  if pGetLightxvOES = (C.PGETLIGHTXVOES)(getProcAddr("glGetLightxvOES")); pGetLightxvOES == nil {
    OES_fixed_point = false
  }
  if pGetListParameterfvSGIX = (C.PGETLISTPARAMETERFVSGIX)(getProcAddr("glGetListParameterfvSGIX")); pGetListParameterfvSGIX == nil {
    SGIX_list_priority = false
  }
  if pGetListParameterivSGIX = (C.PGETLISTPARAMETERIVSGIX)(getProcAddr("glGetListParameterivSGIX")); pGetListParameterivSGIX == nil {
    SGIX_list_priority = false
  }
  if pGetLocalConstantBooleanvEXT = (C.PGETLOCALCONSTANTBOOLEANVEXT)(getProcAddr("glGetLocalConstantBooleanvEXT")); pGetLocalConstantBooleanvEXT == nil {
    EXT_vertex_shader = false
  }
  if pGetLocalConstantFloatvEXT = (C.PGETLOCALCONSTANTFLOATVEXT)(getProcAddr("glGetLocalConstantFloatvEXT")); pGetLocalConstantFloatvEXT == nil {
    EXT_vertex_shader = false
  }
  if pGetLocalConstantIntegervEXT = (C.PGETLOCALCONSTANTINTEGERVEXT)(getProcAddr("glGetLocalConstantIntegervEXT")); pGetLocalConstantIntegervEXT == nil {
    EXT_vertex_shader = false
  }
  if pGetMapAttribParameterfvNV = (C.PGETMAPATTRIBPARAMETERFVNV)(getProcAddr("glGetMapAttribParameterfvNV")); pGetMapAttribParameterfvNV == nil {
    NV_evaluators = false
  }
  if pGetMapAttribParameterivNV = (C.PGETMAPATTRIBPARAMETERIVNV)(getProcAddr("glGetMapAttribParameterivNV")); pGetMapAttribParameterivNV == nil {
    NV_evaluators = false
  }
  if pGetMapControlPointsNV = (C.PGETMAPCONTROLPOINTSNV)(getProcAddr("glGetMapControlPointsNV")); pGetMapControlPointsNV == nil {
    NV_evaluators = false
  }
  if pGetMapParameterfvNV = (C.PGETMAPPARAMETERFVNV)(getProcAddr("glGetMapParameterfvNV")); pGetMapParameterfvNV == nil {
    NV_evaluators = false
  }
  if pGetMapParameterivNV = (C.PGETMAPPARAMETERIVNV)(getProcAddr("glGetMapParameterivNV")); pGetMapParameterivNV == nil {
    NV_evaluators = false
  }
  if pGetMapxvOES = (C.PGETMAPXVOES)(getProcAddr("glGetMapxvOES")); pGetMapxvOES == nil {
    OES_fixed_point = false
  }
  if pGetMaterialxOES = (C.PGETMATERIALXOES)(getProcAddr("glGetMaterialxOES")); pGetMaterialxOES == nil {
    OES_fixed_point = false
  }
  if pGetMaterialxvOES = (C.PGETMATERIALXVOES)(getProcAddr("glGetMaterialxvOES")); pGetMaterialxvOES == nil {
    OES_fixed_point = false
  }
  if pGetMinmaxEXT = (C.PGETMINMAXEXT)(getProcAddr("glGetMinmaxEXT")); pGetMinmaxEXT == nil {
    EXT_histogram = false
  }
  if pGetMinmaxParameterfvEXT = (C.PGETMINMAXPARAMETERFVEXT)(getProcAddr("glGetMinmaxParameterfvEXT")); pGetMinmaxParameterfvEXT == nil {
    EXT_histogram = false
  }
  if pGetMinmaxParameterivEXT = (C.PGETMINMAXPARAMETERIVEXT)(getProcAddr("glGetMinmaxParameterivEXT")); pGetMinmaxParameterivEXT == nil {
    EXT_histogram = false
  }
  if pGetMultiTexEnvfvEXT = (C.PGETMULTITEXENVFVEXT)(getProcAddr("glGetMultiTexEnvfvEXT")); pGetMultiTexEnvfvEXT == nil {
    EXT_direct_state_access = false
  }
  if pGetMultiTexEnvivEXT = (C.PGETMULTITEXENVIVEXT)(getProcAddr("glGetMultiTexEnvivEXT")); pGetMultiTexEnvivEXT == nil {
    EXT_direct_state_access = false
  }
  if pGetMultiTexGendvEXT = (C.PGETMULTITEXGENDVEXT)(getProcAddr("glGetMultiTexGendvEXT")); pGetMultiTexGendvEXT == nil {
    EXT_direct_state_access = false
  }
  if pGetMultiTexGenfvEXT = (C.PGETMULTITEXGENFVEXT)(getProcAddr("glGetMultiTexGenfvEXT")); pGetMultiTexGenfvEXT == nil {
    EXT_direct_state_access = false
  }
  if pGetMultiTexGenivEXT = (C.PGETMULTITEXGENIVEXT)(getProcAddr("glGetMultiTexGenivEXT")); pGetMultiTexGenivEXT == nil {
    EXT_direct_state_access = false
  }
  if pGetMultiTexImageEXT = (C.PGETMULTITEXIMAGEEXT)(getProcAddr("glGetMultiTexImageEXT")); pGetMultiTexImageEXT == nil {
    EXT_direct_state_access = false
  }
  if pGetMultiTexLevelParameterfvEXT = (C.PGETMULTITEXLEVELPARAMETERFVEXT)(getProcAddr("glGetMultiTexLevelParameterfvEXT")); pGetMultiTexLevelParameterfvEXT == nil {
    EXT_direct_state_access = false
  }
  if pGetMultiTexLevelParameterivEXT = (C.PGETMULTITEXLEVELPARAMETERIVEXT)(getProcAddr("glGetMultiTexLevelParameterivEXT")); pGetMultiTexLevelParameterivEXT == nil {
    EXT_direct_state_access = false
  }
  if pGetMultiTexParameterIivEXT = (C.PGETMULTITEXPARAMETERIIVEXT)(getProcAddr("glGetMultiTexParameterIivEXT")); pGetMultiTexParameterIivEXT == nil {
    EXT_direct_state_access = false
  }
  if pGetMultiTexParameterIuivEXT = (C.PGETMULTITEXPARAMETERIUIVEXT)(getProcAddr("glGetMultiTexParameterIuivEXT")); pGetMultiTexParameterIuivEXT == nil {
    EXT_direct_state_access = false
  }
  if pGetMultiTexParameterfvEXT = (C.PGETMULTITEXPARAMETERFVEXT)(getProcAddr("glGetMultiTexParameterfvEXT")); pGetMultiTexParameterfvEXT == nil {
    EXT_direct_state_access = false
  }
  if pGetMultiTexParameterivEXT = (C.PGETMULTITEXPARAMETERIVEXT)(getProcAddr("glGetMultiTexParameterivEXT")); pGetMultiTexParameterivEXT == nil {
    EXT_direct_state_access = false
  }
  if pGetMultisamplefv = (C.PGETMULTISAMPLEFV)(getProcAddr("glGetMultisamplefv")); pGetMultisamplefv == nil {
    ARB_texture_multisample = false
    return errors.New("glGetMultisamplefv")
  }
  if pGetMultisamplefvNV = (C.PGETMULTISAMPLEFVNV)(getProcAddr("glGetMultisamplefvNV")); pGetMultisamplefvNV == nil {
    NV_explicit_multisample = false
  }
  if pGetNamedBufferParameterivEXT = (C.PGETNAMEDBUFFERPARAMETERIVEXT)(getProcAddr("glGetNamedBufferParameterivEXT")); pGetNamedBufferParameterivEXT == nil {
    EXT_direct_state_access = false
  }
  if pGetNamedBufferParameterui64vNV = (C.PGETNAMEDBUFFERPARAMETERUI64VNV)(getProcAddr("glGetNamedBufferParameterui64vNV")); pGetNamedBufferParameterui64vNV == nil {
    NV_shader_buffer_load = false
  }
  if pGetNamedBufferPointervEXT = (C.PGETNAMEDBUFFERPOINTERVEXT)(getProcAddr("glGetNamedBufferPointervEXT")); pGetNamedBufferPointervEXT == nil {
    EXT_direct_state_access = false
  }
  if pGetNamedBufferSubDataEXT = (C.PGETNAMEDBUFFERSUBDATAEXT)(getProcAddr("glGetNamedBufferSubDataEXT")); pGetNamedBufferSubDataEXT == nil {
    EXT_direct_state_access = false
  }
  if pGetNamedFramebufferAttachmentParameterivEXT = (C.PGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXT)(getProcAddr("glGetNamedFramebufferAttachmentParameterivEXT")); pGetNamedFramebufferAttachmentParameterivEXT == nil {
    EXT_direct_state_access = false
  }
  if pGetNamedFramebufferParameterivEXT = (C.PGETNAMEDFRAMEBUFFERPARAMETERIVEXT)(getProcAddr("glGetNamedFramebufferParameterivEXT")); pGetNamedFramebufferParameterivEXT == nil {
    EXT_direct_state_access = false
  }
  if pGetNamedProgramLocalParameterIivEXT = (C.PGETNAMEDPROGRAMLOCALPARAMETERIIVEXT)(getProcAddr("glGetNamedProgramLocalParameterIivEXT")); pGetNamedProgramLocalParameterIivEXT == nil {
    EXT_direct_state_access = false
  }
  if pGetNamedProgramLocalParameterIuivEXT = (C.PGETNAMEDPROGRAMLOCALPARAMETERIUIVEXT)(getProcAddr("glGetNamedProgramLocalParameterIuivEXT")); pGetNamedProgramLocalParameterIuivEXT == nil {
    EXT_direct_state_access = false
  }
  if pGetNamedProgramLocalParameterdvEXT = (C.PGETNAMEDPROGRAMLOCALPARAMETERDVEXT)(getProcAddr("glGetNamedProgramLocalParameterdvEXT")); pGetNamedProgramLocalParameterdvEXT == nil {
    EXT_direct_state_access = false
  }
  if pGetNamedProgramLocalParameterfvEXT = (C.PGETNAMEDPROGRAMLOCALPARAMETERFVEXT)(getProcAddr("glGetNamedProgramLocalParameterfvEXT")); pGetNamedProgramLocalParameterfvEXT == nil {
    EXT_direct_state_access = false
  }
  if pGetNamedProgramStringEXT = (C.PGETNAMEDPROGRAMSTRINGEXT)(getProcAddr("glGetNamedProgramStringEXT")); pGetNamedProgramStringEXT == nil {
    EXT_direct_state_access = false
  }
  if pGetNamedProgramivEXT = (C.PGETNAMEDPROGRAMIVEXT)(getProcAddr("glGetNamedProgramivEXT")); pGetNamedProgramivEXT == nil {
    EXT_direct_state_access = false
  }
  if pGetNamedRenderbufferParameterivEXT = (C.PGETNAMEDRENDERBUFFERPARAMETERIVEXT)(getProcAddr("glGetNamedRenderbufferParameterivEXT")); pGetNamedRenderbufferParameterivEXT == nil {
    EXT_direct_state_access = false
  }
  if pGetNamedStringARB = (C.PGETNAMEDSTRINGARB)(getProcAddr("glGetNamedStringARB")); pGetNamedStringARB == nil {
    ARB_shading_language_include = false
  }
  if pGetNamedStringivARB = (C.PGETNAMEDSTRINGIVARB)(getProcAddr("glGetNamedStringivARB")); pGetNamedStringivARB == nil {
    ARB_shading_language_include = false
  }
  if pGetNextPerfQueryIdINTEL = (C.PGETNEXTPERFQUERYIDINTEL)(getProcAddr("glGetNextPerfQueryIdINTEL")); pGetNextPerfQueryIdINTEL == nil {
    INTEL_performance_query = false
  }
  if pGetObjectBufferfvATI = (C.PGETOBJECTBUFFERFVATI)(getProcAddr("glGetObjectBufferfvATI")); pGetObjectBufferfvATI == nil {
    ATI_vertex_array_object = false
  }
  if pGetObjectBufferivATI = (C.PGETOBJECTBUFFERIVATI)(getProcAddr("glGetObjectBufferivATI")); pGetObjectBufferivATI == nil {
    ATI_vertex_array_object = false
  }
  if pGetObjectLabel = (C.PGETOBJECTLABEL)(getProcAddr("glGetObjectLabel")); pGetObjectLabel == nil {
    KHR_debug = false
  }
  if pGetObjectLabelEXT = (C.PGETOBJECTLABELEXT)(getProcAddr("glGetObjectLabelEXT")); pGetObjectLabelEXT == nil {
    EXT_debug_label = false
  }
  if pGetObjectLabelKHR = (C.PGETOBJECTLABELKHR)(getProcAddr("glGetObjectLabelKHR")); pGetObjectLabelKHR == nil {
    KHR_debug = false
  }
  if pGetObjectParameterfvARB = (C.PGETOBJECTPARAMETERFVARB)(getProcAddr("glGetObjectParameterfvARB")); pGetObjectParameterfvARB == nil {
    ARB_shader_objects = false
  }
  if pGetObjectParameterivAPPLE = (C.PGETOBJECTPARAMETERIVAPPLE)(getProcAddr("glGetObjectParameterivAPPLE")); pGetObjectParameterivAPPLE == nil {
    APPLE_object_purgeable = false
  }
  if pGetObjectParameterivARB = (C.PGETOBJECTPARAMETERIVARB)(getProcAddr("glGetObjectParameterivARB")); pGetObjectParameterivARB == nil {
    ARB_shader_objects = false
  }
  if pGetObjectPtrLabel = (C.PGETOBJECTPTRLABEL)(getProcAddr("glGetObjectPtrLabel")); pGetObjectPtrLabel == nil {
    KHR_debug = false
  }
  if pGetObjectPtrLabelKHR = (C.PGETOBJECTPTRLABELKHR)(getProcAddr("glGetObjectPtrLabelKHR")); pGetObjectPtrLabelKHR == nil {
    KHR_debug = false
  }
  if pGetOcclusionQueryivNV = (C.PGETOCCLUSIONQUERYIVNV)(getProcAddr("glGetOcclusionQueryivNV")); pGetOcclusionQueryivNV == nil {
    NV_occlusion_query = false
  }
  if pGetOcclusionQueryuivNV = (C.PGETOCCLUSIONQUERYUIVNV)(getProcAddr("glGetOcclusionQueryuivNV")); pGetOcclusionQueryuivNV == nil {
    NV_occlusion_query = false
  }
  if pGetPathColorGenfvNV = (C.PGETPATHCOLORGENFVNV)(getProcAddr("glGetPathColorGenfvNV")); pGetPathColorGenfvNV == nil {
    NV_path_rendering = false
  }
  if pGetPathColorGenivNV = (C.PGETPATHCOLORGENIVNV)(getProcAddr("glGetPathColorGenivNV")); pGetPathColorGenivNV == nil {
    NV_path_rendering = false
  }
  if pGetPathCommandsNV = (C.PGETPATHCOMMANDSNV)(getProcAddr("glGetPathCommandsNV")); pGetPathCommandsNV == nil {
    NV_path_rendering = false
  }
  if pGetPathCoordsNV = (C.PGETPATHCOORDSNV)(getProcAddr("glGetPathCoordsNV")); pGetPathCoordsNV == nil {
    NV_path_rendering = false
  }
  if pGetPathDashArrayNV = (C.PGETPATHDASHARRAYNV)(getProcAddr("glGetPathDashArrayNV")); pGetPathDashArrayNV == nil {
    NV_path_rendering = false
  }
  if pGetPathLengthNV = (C.PGETPATHLENGTHNV)(getProcAddr("glGetPathLengthNV")); pGetPathLengthNV == nil {
    NV_path_rendering = false
  }
  if pGetPathMetricRangeNV = (C.PGETPATHMETRICRANGENV)(getProcAddr("glGetPathMetricRangeNV")); pGetPathMetricRangeNV == nil {
    NV_path_rendering = false
  }
  if pGetPathMetricsNV = (C.PGETPATHMETRICSNV)(getProcAddr("glGetPathMetricsNV")); pGetPathMetricsNV == nil {
    NV_path_rendering = false
  }
  if pGetPathParameterfvNV = (C.PGETPATHPARAMETERFVNV)(getProcAddr("glGetPathParameterfvNV")); pGetPathParameterfvNV == nil {
    NV_path_rendering = false
  }
  if pGetPathParameterivNV = (C.PGETPATHPARAMETERIVNV)(getProcAddr("glGetPathParameterivNV")); pGetPathParameterivNV == nil {
    NV_path_rendering = false
  }
  if pGetPathSpacingNV = (C.PGETPATHSPACINGNV)(getProcAddr("glGetPathSpacingNV")); pGetPathSpacingNV == nil {
    NV_path_rendering = false
  }
  if pGetPathTexGenfvNV = (C.PGETPATHTEXGENFVNV)(getProcAddr("glGetPathTexGenfvNV")); pGetPathTexGenfvNV == nil {
    NV_path_rendering = false
  }
  if pGetPathTexGenivNV = (C.PGETPATHTEXGENIVNV)(getProcAddr("glGetPathTexGenivNV")); pGetPathTexGenivNV == nil {
    NV_path_rendering = false
  }
  if pGetPerfCounterInfoINTEL = (C.PGETPERFCOUNTERINFOINTEL)(getProcAddr("glGetPerfCounterInfoINTEL")); pGetPerfCounterInfoINTEL == nil {
    INTEL_performance_query = false
  }
  if pGetPerfMonitorCounterDataAMD = (C.PGETPERFMONITORCOUNTERDATAAMD)(getProcAddr("glGetPerfMonitorCounterDataAMD")); pGetPerfMonitorCounterDataAMD == nil {
    AMD_performance_monitor = false
  }
  if pGetPerfMonitorCounterInfoAMD = (C.PGETPERFMONITORCOUNTERINFOAMD)(getProcAddr("glGetPerfMonitorCounterInfoAMD")); pGetPerfMonitorCounterInfoAMD == nil {
    AMD_performance_monitor = false
  }
  if pGetPerfMonitorCounterStringAMD = (C.PGETPERFMONITORCOUNTERSTRINGAMD)(getProcAddr("glGetPerfMonitorCounterStringAMD")); pGetPerfMonitorCounterStringAMD == nil {
    AMD_performance_monitor = false
  }
  if pGetPerfMonitorCountersAMD = (C.PGETPERFMONITORCOUNTERSAMD)(getProcAddr("glGetPerfMonitorCountersAMD")); pGetPerfMonitorCountersAMD == nil {
    AMD_performance_monitor = false
  }
  if pGetPerfMonitorGroupStringAMD = (C.PGETPERFMONITORGROUPSTRINGAMD)(getProcAddr("glGetPerfMonitorGroupStringAMD")); pGetPerfMonitorGroupStringAMD == nil {
    AMD_performance_monitor = false
  }
  if pGetPerfMonitorGroupsAMD = (C.PGETPERFMONITORGROUPSAMD)(getProcAddr("glGetPerfMonitorGroupsAMD")); pGetPerfMonitorGroupsAMD == nil {
    AMD_performance_monitor = false
  }
  if pGetPerfQueryDataINTEL = (C.PGETPERFQUERYDATAINTEL)(getProcAddr("glGetPerfQueryDataINTEL")); pGetPerfQueryDataINTEL == nil {
    INTEL_performance_query = false
  }
  if pGetPerfQueryIdByNameINTEL = (C.PGETPERFQUERYIDBYNAMEINTEL)(getProcAddr("glGetPerfQueryIdByNameINTEL")); pGetPerfQueryIdByNameINTEL == nil {
    INTEL_performance_query = false
  }
  if pGetPerfQueryInfoINTEL = (C.PGETPERFQUERYINFOINTEL)(getProcAddr("glGetPerfQueryInfoINTEL")); pGetPerfQueryInfoINTEL == nil {
    INTEL_performance_query = false
  }
  if pGetPixelMapxv = (C.PGETPIXELMAPXV)(getProcAddr("glGetPixelMapxv")); pGetPixelMapxv == nil {
    OES_fixed_point = false
  }
  if pGetPixelTexGenParameterfvSGIS = (C.PGETPIXELTEXGENPARAMETERFVSGIS)(getProcAddr("glGetPixelTexGenParameterfvSGIS")); pGetPixelTexGenParameterfvSGIS == nil {
    SGIS_pixel_texture = false
  }
  if pGetPixelTexGenParameterivSGIS = (C.PGETPIXELTEXGENPARAMETERIVSGIS)(getProcAddr("glGetPixelTexGenParameterivSGIS")); pGetPixelTexGenParameterivSGIS == nil {
    SGIS_pixel_texture = false
  }
  if pGetPixelTransformParameterfvEXT = (C.PGETPIXELTRANSFORMPARAMETERFVEXT)(getProcAddr("glGetPixelTransformParameterfvEXT")); pGetPixelTransformParameterfvEXT == nil {
    EXT_pixel_transform = false
  }
  if pGetPixelTransformParameterivEXT = (C.PGETPIXELTRANSFORMPARAMETERIVEXT)(getProcAddr("glGetPixelTransformParameterivEXT")); pGetPixelTransformParameterivEXT == nil {
    EXT_pixel_transform = false
  }
  if pGetPointerIndexedvEXT = (C.PGETPOINTERINDEXEDVEXT)(getProcAddr("glGetPointerIndexedvEXT")); pGetPointerIndexedvEXT == nil {
    EXT_direct_state_access = false
  }
  if pGetPointeri_vEXT = (C.PGETPOINTERI_VEXT)(getProcAddr("glGetPointeri_vEXT")); pGetPointeri_vEXT == nil {
    EXT_direct_state_access = false
  }
  if pGetPointerv = (C.PGETPOINTERV)(getProcAddr("glGetPointerv")); pGetPointerv == nil {
    KHR_debug = false
  }
  if pGetPointervEXT = (C.PGETPOINTERVEXT)(getProcAddr("glGetPointervEXT")); pGetPointervEXT == nil {
    EXT_vertex_array = false
  }
  if pGetPointervKHR = (C.PGETPOINTERVKHR)(getProcAddr("glGetPointervKHR")); pGetPointervKHR == nil {
    KHR_debug = false
  }
  if pGetProgramBinary = (C.PGETPROGRAMBINARY)(getProcAddr("glGetProgramBinary")); pGetProgramBinary == nil {
    ARB_get_program_binary = false
    return errors.New("glGetProgramBinary")
  }
  if pGetProgramEnvParameterIivNV = (C.PGETPROGRAMENVPARAMETERIIVNV)(getProcAddr("glGetProgramEnvParameterIivNV")); pGetProgramEnvParameterIivNV == nil {
    NV_gpu_program4 = false
  }
  if pGetProgramEnvParameterIuivNV = (C.PGETPROGRAMENVPARAMETERIUIVNV)(getProcAddr("glGetProgramEnvParameterIuivNV")); pGetProgramEnvParameterIuivNV == nil {
    NV_gpu_program4 = false
  }
  if pGetProgramEnvParameterdvARB = (C.PGETPROGRAMENVPARAMETERDVARB)(getProcAddr("glGetProgramEnvParameterdvARB")); pGetProgramEnvParameterdvARB == nil {
    ARB_fragment_program = false
    ARB_vertex_program = false
  }
  if pGetProgramEnvParameterfvARB = (C.PGETPROGRAMENVPARAMETERFVARB)(getProcAddr("glGetProgramEnvParameterfvARB")); pGetProgramEnvParameterfvARB == nil {
    ARB_fragment_program = false
    ARB_vertex_program = false
  }
  if pGetProgramInfoLog = (C.PGETPROGRAMINFOLOG)(getProcAddr("glGetProgramInfoLog")); pGetProgramInfoLog == nil {
    return errors.New("glGetProgramInfoLog")
  }
  if pGetProgramInterfaceiv = (C.PGETPROGRAMINTERFACEIV)(getProcAddr("glGetProgramInterfaceiv")); pGetProgramInterfaceiv == nil {
    ARB_program_interface_query = false
  }
  if pGetProgramLocalParameterIivNV = (C.PGETPROGRAMLOCALPARAMETERIIVNV)(getProcAddr("glGetProgramLocalParameterIivNV")); pGetProgramLocalParameterIivNV == nil {
    NV_gpu_program4 = false
  }
  if pGetProgramLocalParameterIuivNV = (C.PGETPROGRAMLOCALPARAMETERIUIVNV)(getProcAddr("glGetProgramLocalParameterIuivNV")); pGetProgramLocalParameterIuivNV == nil {
    NV_gpu_program4 = false
  }
  if pGetProgramLocalParameterdvARB = (C.PGETPROGRAMLOCALPARAMETERDVARB)(getProcAddr("glGetProgramLocalParameterdvARB")); pGetProgramLocalParameterdvARB == nil {
    ARB_fragment_program = false
    ARB_vertex_program = false
  }
  if pGetProgramLocalParameterfvARB = (C.PGETPROGRAMLOCALPARAMETERFVARB)(getProcAddr("glGetProgramLocalParameterfvARB")); pGetProgramLocalParameterfvARB == nil {
    ARB_fragment_program = false
    ARB_vertex_program = false
  }
  if pGetProgramNamedParameterdvNV = (C.PGETPROGRAMNAMEDPARAMETERDVNV)(getProcAddr("glGetProgramNamedParameterdvNV")); pGetProgramNamedParameterdvNV == nil {
    NV_fragment_program = false
  }
  if pGetProgramNamedParameterfvNV = (C.PGETPROGRAMNAMEDPARAMETERFVNV)(getProcAddr("glGetProgramNamedParameterfvNV")); pGetProgramNamedParameterfvNV == nil {
    NV_fragment_program = false
  }
  if pGetProgramParameterdvNV = (C.PGETPROGRAMPARAMETERDVNV)(getProcAddr("glGetProgramParameterdvNV")); pGetProgramParameterdvNV == nil {
    NV_vertex_program = false
  }
  if pGetProgramParameterfvNV = (C.PGETPROGRAMPARAMETERFVNV)(getProcAddr("glGetProgramParameterfvNV")); pGetProgramParameterfvNV == nil {
    NV_vertex_program = false
  }
  if pGetProgramPipelineInfoLog = (C.PGETPROGRAMPIPELINEINFOLOG)(getProcAddr("glGetProgramPipelineInfoLog")); pGetProgramPipelineInfoLog == nil {
    ARB_separate_shader_objects = false
    return errors.New("glGetProgramPipelineInfoLog")
  }
  if pGetProgramPipelineInfoLogEXT = (C.PGETPROGRAMPIPELINEINFOLOGEXT)(getProcAddr("glGetProgramPipelineInfoLogEXT")); pGetProgramPipelineInfoLogEXT == nil {
    EXT_separate_shader_objects = false
  }
  if pGetProgramPipelineiv = (C.PGETPROGRAMPIPELINEIV)(getProcAddr("glGetProgramPipelineiv")); pGetProgramPipelineiv == nil {
    ARB_separate_shader_objects = false
    return errors.New("glGetProgramPipelineiv")
  }
  if pGetProgramPipelineivEXT = (C.PGETPROGRAMPIPELINEIVEXT)(getProcAddr("glGetProgramPipelineivEXT")); pGetProgramPipelineivEXT == nil {
    EXT_separate_shader_objects = false
  }
  if pGetProgramResourceIndex = (C.PGETPROGRAMRESOURCEINDEX)(getProcAddr("glGetProgramResourceIndex")); pGetProgramResourceIndex == nil {
    ARB_program_interface_query = false
  }
  if pGetProgramResourceLocation = (C.PGETPROGRAMRESOURCELOCATION)(getProcAddr("glGetProgramResourceLocation")); pGetProgramResourceLocation == nil {
    ARB_program_interface_query = false
  }
  if pGetProgramResourceLocationIndex = (C.PGETPROGRAMRESOURCELOCATIONINDEX)(getProcAddr("glGetProgramResourceLocationIndex")); pGetProgramResourceLocationIndex == nil {
    ARB_program_interface_query = false
  }
  if pGetProgramResourceName = (C.PGETPROGRAMRESOURCENAME)(getProcAddr("glGetProgramResourceName")); pGetProgramResourceName == nil {
    ARB_program_interface_query = false
  }
  if pGetProgramResourceiv = (C.PGETPROGRAMRESOURCEIV)(getProcAddr("glGetProgramResourceiv")); pGetProgramResourceiv == nil {
    ARB_program_interface_query = false
  }
  if pGetProgramStageiv = (C.PGETPROGRAMSTAGEIV)(getProcAddr("glGetProgramStageiv")); pGetProgramStageiv == nil {
    ARB_shader_subroutine = false
    return errors.New("glGetProgramStageiv")
  }
  if pGetProgramStringARB = (C.PGETPROGRAMSTRINGARB)(getProcAddr("glGetProgramStringARB")); pGetProgramStringARB == nil {
    ARB_fragment_program = false
    ARB_vertex_program = false
  }
  if pGetProgramStringNV = (C.PGETPROGRAMSTRINGNV)(getProcAddr("glGetProgramStringNV")); pGetProgramStringNV == nil {
    NV_vertex_program = false
  }
  if pGetProgramSubroutineParameteruivNV = (C.PGETPROGRAMSUBROUTINEPARAMETERUIVNV)(getProcAddr("glGetProgramSubroutineParameteruivNV")); pGetProgramSubroutineParameteruivNV == nil {
    NV_gpu_program5 = false
  }
  if pGetProgramiv = (C.PGETPROGRAMIV)(getProcAddr("glGetProgramiv")); pGetProgramiv == nil {
    return errors.New("glGetProgramiv")
  }
  if pGetProgramivARB = (C.PGETPROGRAMIVARB)(getProcAddr("glGetProgramivARB")); pGetProgramivARB == nil {
    ARB_fragment_program = false
    ARB_vertex_program = false
  }
  if pGetProgramivNV = (C.PGETPROGRAMIVNV)(getProcAddr("glGetProgramivNV")); pGetProgramivNV == nil {
    NV_vertex_program = false
  }
  if pGetQueryIndexediv = (C.PGETQUERYINDEXEDIV)(getProcAddr("glGetQueryIndexediv")); pGetQueryIndexediv == nil {
    ARB_transform_feedback3 = false
    return errors.New("glGetQueryIndexediv")
  }
  if pGetQueryObjecti64v = (C.PGETQUERYOBJECTI64V)(getProcAddr("glGetQueryObjecti64v")); pGetQueryObjecti64v == nil {
    ARB_timer_query = false
    return errors.New("glGetQueryObjecti64v")
  }
  if pGetQueryObjecti64vEXT = (C.PGETQUERYOBJECTI64VEXT)(getProcAddr("glGetQueryObjecti64vEXT")); pGetQueryObjecti64vEXT == nil {
    EXT_timer_query = false
  }
  if pGetQueryObjectiv = (C.PGETQUERYOBJECTIV)(getProcAddr("glGetQueryObjectiv")); pGetQueryObjectiv == nil {
    return errors.New("glGetQueryObjectiv")
  }
  if pGetQueryObjectivARB = (C.PGETQUERYOBJECTIVARB)(getProcAddr("glGetQueryObjectivARB")); pGetQueryObjectivARB == nil {
    ARB_occlusion_query = false
  }
  if pGetQueryObjectui64v = (C.PGETQUERYOBJECTUI64V)(getProcAddr("glGetQueryObjectui64v")); pGetQueryObjectui64v == nil {
    ARB_timer_query = false
    return errors.New("glGetQueryObjectui64v")
  }
  if pGetQueryObjectui64vEXT = (C.PGETQUERYOBJECTUI64VEXT)(getProcAddr("glGetQueryObjectui64vEXT")); pGetQueryObjectui64vEXT == nil {
    EXT_timer_query = false
  }
  if pGetQueryObjectuiv = (C.PGETQUERYOBJECTUIV)(getProcAddr("glGetQueryObjectuiv")); pGetQueryObjectuiv == nil {
    return errors.New("glGetQueryObjectuiv")
  }
  if pGetQueryObjectuivARB = (C.PGETQUERYOBJECTUIVARB)(getProcAddr("glGetQueryObjectuivARB")); pGetQueryObjectuivARB == nil {
    ARB_occlusion_query = false
  }
  if pGetQueryiv = (C.PGETQUERYIV)(getProcAddr("glGetQueryiv")); pGetQueryiv == nil {
    return errors.New("glGetQueryiv")
  }
  if pGetQueryivARB = (C.PGETQUERYIVARB)(getProcAddr("glGetQueryivARB")); pGetQueryivARB == nil {
    ARB_occlusion_query = false
  }
  if pGetRenderbufferParameteriv = (C.PGETRENDERBUFFERPARAMETERIV)(getProcAddr("glGetRenderbufferParameteriv")); pGetRenderbufferParameteriv == nil {
    ARB_framebuffer_object = false
    return errors.New("glGetRenderbufferParameteriv")
  }
  if pGetRenderbufferParameterivEXT = (C.PGETRENDERBUFFERPARAMETERIVEXT)(getProcAddr("glGetRenderbufferParameterivEXT")); pGetRenderbufferParameterivEXT == nil {
    EXT_framebuffer_object = false
  }
  if pGetSamplerParameterIiv = (C.PGETSAMPLERPARAMETERIIV)(getProcAddr("glGetSamplerParameterIiv")); pGetSamplerParameterIiv == nil {
    ARB_sampler_objects = false
    return errors.New("glGetSamplerParameterIiv")
  }
  if pGetSamplerParameterIuiv = (C.PGETSAMPLERPARAMETERIUIV)(getProcAddr("glGetSamplerParameterIuiv")); pGetSamplerParameterIuiv == nil {
    ARB_sampler_objects = false
    return errors.New("glGetSamplerParameterIuiv")
  }
  if pGetSamplerParameterfv = (C.PGETSAMPLERPARAMETERFV)(getProcAddr("glGetSamplerParameterfv")); pGetSamplerParameterfv == nil {
    ARB_sampler_objects = false
    return errors.New("glGetSamplerParameterfv")
  }
  if pGetSamplerParameteriv = (C.PGETSAMPLERPARAMETERIV)(getProcAddr("glGetSamplerParameteriv")); pGetSamplerParameteriv == nil {
    ARB_sampler_objects = false
    return errors.New("glGetSamplerParameteriv")
  }
  if pGetSeparableFilterEXT = (C.PGETSEPARABLEFILTEREXT)(getProcAddr("glGetSeparableFilterEXT")); pGetSeparableFilterEXT == nil {
    EXT_convolution = false
  }
  if pGetShaderInfoLog = (C.PGETSHADERINFOLOG)(getProcAddr("glGetShaderInfoLog")); pGetShaderInfoLog == nil {
    return errors.New("glGetShaderInfoLog")
  }
  if pGetShaderPrecisionFormat = (C.PGETSHADERPRECISIONFORMAT)(getProcAddr("glGetShaderPrecisionFormat")); pGetShaderPrecisionFormat == nil {
    ARB_ES2_compatibility = false
    return errors.New("glGetShaderPrecisionFormat")
  }
  if pGetShaderSource = (C.PGETSHADERSOURCE)(getProcAddr("glGetShaderSource")); pGetShaderSource == nil {
    return errors.New("glGetShaderSource")
  }
  if pGetShaderSourceARB = (C.PGETSHADERSOURCEARB)(getProcAddr("glGetShaderSourceARB")); pGetShaderSourceARB == nil {
    ARB_shader_objects = false
  }
  if pGetShaderiv = (C.PGETSHADERIV)(getProcAddr("glGetShaderiv")); pGetShaderiv == nil {
    return errors.New("glGetShaderiv")
  }
  if pGetSharpenTexFuncSGIS = (C.PGETSHARPENTEXFUNCSGIS)(getProcAddr("glGetSharpenTexFuncSGIS")); pGetSharpenTexFuncSGIS == nil {
    SGIS_sharpen_texture = false
  }
  if pGetString = (C.PGETSTRING)(getProcAddr("glGetString")); pGetString == nil {
    return errors.New("glGetString")
  }
  if pGetStringi = (C.PGETSTRINGI)(getProcAddr("glGetStringi")); pGetStringi == nil {
    return errors.New("glGetStringi")
  }
  if pGetSubroutineIndex = (C.PGETSUBROUTINEINDEX)(getProcAddr("glGetSubroutineIndex")); pGetSubroutineIndex == nil {
    ARB_shader_subroutine = false
    return errors.New("glGetSubroutineIndex")
  }
  if pGetSubroutineUniformLocation = (C.PGETSUBROUTINEUNIFORMLOCATION)(getProcAddr("glGetSubroutineUniformLocation")); pGetSubroutineUniformLocation == nil {
    ARB_shader_subroutine = false
    return errors.New("glGetSubroutineUniformLocation")
  }
  if pGetSynciv = (C.PGETSYNCIV)(getProcAddr("glGetSynciv")); pGetSynciv == nil {
    ARB_sync = false
    return errors.New("glGetSynciv")
  }
  if pGetTexBumpParameterfvATI = (C.PGETTEXBUMPPARAMETERFVATI)(getProcAddr("glGetTexBumpParameterfvATI")); pGetTexBumpParameterfvATI == nil {
    ATI_envmap_bumpmap = false
  }
  if pGetTexBumpParameterivATI = (C.PGETTEXBUMPPARAMETERIVATI)(getProcAddr("glGetTexBumpParameterivATI")); pGetTexBumpParameterivATI == nil {
    ATI_envmap_bumpmap = false
  }
  if pGetTexEnvxvOES = (C.PGETTEXENVXVOES)(getProcAddr("glGetTexEnvxvOES")); pGetTexEnvxvOES == nil {
    OES_fixed_point = false
  }
  if pGetTexFilterFuncSGIS = (C.PGETTEXFILTERFUNCSGIS)(getProcAddr("glGetTexFilterFuncSGIS")); pGetTexFilterFuncSGIS == nil {
    SGIS_texture_filter4 = false
  }
  if pGetTexGenxvOES = (C.PGETTEXGENXVOES)(getProcAddr("glGetTexGenxvOES")); pGetTexGenxvOES == nil {
    OES_fixed_point = false
  }
  if pGetTexImage = (C.PGETTEXIMAGE)(getProcAddr("glGetTexImage")); pGetTexImage == nil {
    return errors.New("glGetTexImage")
  }
  if pGetTexLevelParameterfv = (C.PGETTEXLEVELPARAMETERFV)(getProcAddr("glGetTexLevelParameterfv")); pGetTexLevelParameterfv == nil {
    return errors.New("glGetTexLevelParameterfv")
  }
  if pGetTexLevelParameteriv = (C.PGETTEXLEVELPARAMETERIV)(getProcAddr("glGetTexLevelParameteriv")); pGetTexLevelParameteriv == nil {
    return errors.New("glGetTexLevelParameteriv")
  }
  if pGetTexLevelParameterxvOES = (C.PGETTEXLEVELPARAMETERXVOES)(getProcAddr("glGetTexLevelParameterxvOES")); pGetTexLevelParameterxvOES == nil {
    OES_fixed_point = false
  }
  if pGetTexParameterIiv = (C.PGETTEXPARAMETERIIV)(getProcAddr("glGetTexParameterIiv")); pGetTexParameterIiv == nil {
    return errors.New("glGetTexParameterIiv")
  }
  if pGetTexParameterIivEXT = (C.PGETTEXPARAMETERIIVEXT)(getProcAddr("glGetTexParameterIivEXT")); pGetTexParameterIivEXT == nil {
    EXT_texture_integer = false
  }
  if pGetTexParameterIuiv = (C.PGETTEXPARAMETERIUIV)(getProcAddr("glGetTexParameterIuiv")); pGetTexParameterIuiv == nil {
    return errors.New("glGetTexParameterIuiv")
  }
  if pGetTexParameterIuivEXT = (C.PGETTEXPARAMETERIUIVEXT)(getProcAddr("glGetTexParameterIuivEXT")); pGetTexParameterIuivEXT == nil {
    EXT_texture_integer = false
  }
  if pGetTexParameterPointervAPPLE = (C.PGETTEXPARAMETERPOINTERVAPPLE)(getProcAddr("glGetTexParameterPointervAPPLE")); pGetTexParameterPointervAPPLE == nil {
    APPLE_texture_range = false
  }
  if pGetTexParameterfv = (C.PGETTEXPARAMETERFV)(getProcAddr("glGetTexParameterfv")); pGetTexParameterfv == nil {
    return errors.New("glGetTexParameterfv")
  }
  if pGetTexParameteriv = (C.PGETTEXPARAMETERIV)(getProcAddr("glGetTexParameteriv")); pGetTexParameteriv == nil {
    return errors.New("glGetTexParameteriv")
  }
  if pGetTexParameterxvOES = (C.PGETTEXPARAMETERXVOES)(getProcAddr("glGetTexParameterxvOES")); pGetTexParameterxvOES == nil {
    OES_fixed_point = false
  }
  if pGetTextureHandleARB = (C.PGETTEXTUREHANDLEARB)(getProcAddr("glGetTextureHandleARB")); pGetTextureHandleARB == nil {
    ARB_bindless_texture = false
  }
  if pGetTextureHandleNV = (C.PGETTEXTUREHANDLENV)(getProcAddr("glGetTextureHandleNV")); pGetTextureHandleNV == nil {
    NV_bindless_texture = false
  }
  if pGetTextureImageEXT = (C.PGETTEXTUREIMAGEEXT)(getProcAddr("glGetTextureImageEXT")); pGetTextureImageEXT == nil {
    EXT_direct_state_access = false
  }
  if pGetTextureLevelParameterfvEXT = (C.PGETTEXTURELEVELPARAMETERFVEXT)(getProcAddr("glGetTextureLevelParameterfvEXT")); pGetTextureLevelParameterfvEXT == nil {
    EXT_direct_state_access = false
  }
  if pGetTextureLevelParameterivEXT = (C.PGETTEXTURELEVELPARAMETERIVEXT)(getProcAddr("glGetTextureLevelParameterivEXT")); pGetTextureLevelParameterivEXT == nil {
    EXT_direct_state_access = false
  }
  if pGetTextureParameterIivEXT = (C.PGETTEXTUREPARAMETERIIVEXT)(getProcAddr("glGetTextureParameterIivEXT")); pGetTextureParameterIivEXT == nil {
    EXT_direct_state_access = false
  }
  if pGetTextureParameterIuivEXT = (C.PGETTEXTUREPARAMETERIUIVEXT)(getProcAddr("glGetTextureParameterIuivEXT")); pGetTextureParameterIuivEXT == nil {
    EXT_direct_state_access = false
  }
  if pGetTextureParameterfvEXT = (C.PGETTEXTUREPARAMETERFVEXT)(getProcAddr("glGetTextureParameterfvEXT")); pGetTextureParameterfvEXT == nil {
    EXT_direct_state_access = false
  }
  if pGetTextureParameterivEXT = (C.PGETTEXTUREPARAMETERIVEXT)(getProcAddr("glGetTextureParameterivEXT")); pGetTextureParameterivEXT == nil {
    EXT_direct_state_access = false
  }
  if pGetTextureSamplerHandleARB = (C.PGETTEXTURESAMPLERHANDLEARB)(getProcAddr("glGetTextureSamplerHandleARB")); pGetTextureSamplerHandleARB == nil {
    ARB_bindless_texture = false
  }
  if pGetTextureSamplerHandleNV = (C.PGETTEXTURESAMPLERHANDLENV)(getProcAddr("glGetTextureSamplerHandleNV")); pGetTextureSamplerHandleNV == nil {
    NV_bindless_texture = false
  }
  if pGetTrackMatrixivNV = (C.PGETTRACKMATRIXIVNV)(getProcAddr("glGetTrackMatrixivNV")); pGetTrackMatrixivNV == nil {
    NV_vertex_program = false
  }
  if pGetTransformFeedbackVarying = (C.PGETTRANSFORMFEEDBACKVARYING)(getProcAddr("glGetTransformFeedbackVarying")); pGetTransformFeedbackVarying == nil {
    return errors.New("glGetTransformFeedbackVarying")
  }
  if pGetTransformFeedbackVaryingEXT = (C.PGETTRANSFORMFEEDBACKVARYINGEXT)(getProcAddr("glGetTransformFeedbackVaryingEXT")); pGetTransformFeedbackVaryingEXT == nil {
    EXT_transform_feedback = false
  }
  if pGetTransformFeedbackVaryingNV = (C.PGETTRANSFORMFEEDBACKVARYINGNV)(getProcAddr("glGetTransformFeedbackVaryingNV")); pGetTransformFeedbackVaryingNV == nil {
    NV_transform_feedback = false
  }
  if pGetUniformBlockIndex = (C.PGETUNIFORMBLOCKINDEX)(getProcAddr("glGetUniformBlockIndex")); pGetUniformBlockIndex == nil {
    ARB_uniform_buffer_object = false
    return errors.New("glGetUniformBlockIndex")
  }
  if pGetUniformBufferSizeEXT = (C.PGETUNIFORMBUFFERSIZEEXT)(getProcAddr("glGetUniformBufferSizeEXT")); pGetUniformBufferSizeEXT == nil {
    EXT_bindable_uniform = false
  }
  if pGetUniformIndices = (C.PGETUNIFORMINDICES)(getProcAddr("glGetUniformIndices")); pGetUniformIndices == nil {
    ARB_uniform_buffer_object = false
    return errors.New("glGetUniformIndices")
  }
  if pGetUniformLocation = (C.PGETUNIFORMLOCATION)(getProcAddr("glGetUniformLocation")); pGetUniformLocation == nil {
    return errors.New("glGetUniformLocation")
  }
  if pGetUniformLocationARB = (C.PGETUNIFORMLOCATIONARB)(getProcAddr("glGetUniformLocationARB")); pGetUniformLocationARB == nil {
    ARB_shader_objects = false
  }
  if pGetUniformOffsetEXT = (C.PGETUNIFORMOFFSETEXT)(getProcAddr("glGetUniformOffsetEXT")); pGetUniformOffsetEXT == nil {
    EXT_bindable_uniform = false
  }
  if pGetUniformSubroutineuiv = (C.PGETUNIFORMSUBROUTINEUIV)(getProcAddr("glGetUniformSubroutineuiv")); pGetUniformSubroutineuiv == nil {
    ARB_shader_subroutine = false
    return errors.New("glGetUniformSubroutineuiv")
  }
  if pGetUniformdv = (C.PGETUNIFORMDV)(getProcAddr("glGetUniformdv")); pGetUniformdv == nil {
    ARB_gpu_shader_fp64 = false
    return errors.New("glGetUniformdv")
  }
  if pGetUniformfv = (C.PGETUNIFORMFV)(getProcAddr("glGetUniformfv")); pGetUniformfv == nil {
    return errors.New("glGetUniformfv")
  }
  if pGetUniformfvARB = (C.PGETUNIFORMFVARB)(getProcAddr("glGetUniformfvARB")); pGetUniformfvARB == nil {
    ARB_shader_objects = false
  }
  if pGetUniformi64vNV = (C.PGETUNIFORMI64VNV)(getProcAddr("glGetUniformi64vNV")); pGetUniformi64vNV == nil {
    AMD_gpu_shader_int64 = false
    NV_gpu_shader5 = false
  }
  if pGetUniformiv = (C.PGETUNIFORMIV)(getProcAddr("glGetUniformiv")); pGetUniformiv == nil {
    return errors.New("glGetUniformiv")
  }
  if pGetUniformivARB = (C.PGETUNIFORMIVARB)(getProcAddr("glGetUniformivARB")); pGetUniformivARB == nil {
    ARB_shader_objects = false
  }
  if pGetUniformui64vNV = (C.PGETUNIFORMUI64VNV)(getProcAddr("glGetUniformui64vNV")); pGetUniformui64vNV == nil {
    AMD_gpu_shader_int64 = false
    NV_shader_buffer_load = false
  }
  if pGetUniformuiv = (C.PGETUNIFORMUIV)(getProcAddr("glGetUniformuiv")); pGetUniformuiv == nil {
    return errors.New("glGetUniformuiv")
  }
  if pGetUniformuivEXT = (C.PGETUNIFORMUIVEXT)(getProcAddr("glGetUniformuivEXT")); pGetUniformuivEXT == nil {
    EXT_gpu_shader4 = false
  }
  if pGetVariantArrayObjectfvATI = (C.PGETVARIANTARRAYOBJECTFVATI)(getProcAddr("glGetVariantArrayObjectfvATI")); pGetVariantArrayObjectfvATI == nil {
    ATI_vertex_array_object = false
  }
  if pGetVariantArrayObjectivATI = (C.PGETVARIANTARRAYOBJECTIVATI)(getProcAddr("glGetVariantArrayObjectivATI")); pGetVariantArrayObjectivATI == nil {
    ATI_vertex_array_object = false
  }
  if pGetVariantBooleanvEXT = (C.PGETVARIANTBOOLEANVEXT)(getProcAddr("glGetVariantBooleanvEXT")); pGetVariantBooleanvEXT == nil {
    EXT_vertex_shader = false
  }
  if pGetVariantFloatvEXT = (C.PGETVARIANTFLOATVEXT)(getProcAddr("glGetVariantFloatvEXT")); pGetVariantFloatvEXT == nil {
    EXT_vertex_shader = false
  }
  if pGetVariantIntegervEXT = (C.PGETVARIANTINTEGERVEXT)(getProcAddr("glGetVariantIntegervEXT")); pGetVariantIntegervEXT == nil {
    EXT_vertex_shader = false
  }
  if pGetVariantPointervEXT = (C.PGETVARIANTPOINTERVEXT)(getProcAddr("glGetVariantPointervEXT")); pGetVariantPointervEXT == nil {
    EXT_vertex_shader = false
  }
  if pGetVaryingLocationNV = (C.PGETVARYINGLOCATIONNV)(getProcAddr("glGetVaryingLocationNV")); pGetVaryingLocationNV == nil {
    NV_transform_feedback = false
  }
  if pGetVertexArrayIntegeri_vEXT = (C.PGETVERTEXARRAYINTEGERI_VEXT)(getProcAddr("glGetVertexArrayIntegeri_vEXT")); pGetVertexArrayIntegeri_vEXT == nil {
    EXT_direct_state_access = false
  }
  if pGetVertexArrayIntegervEXT = (C.PGETVERTEXARRAYINTEGERVEXT)(getProcAddr("glGetVertexArrayIntegervEXT")); pGetVertexArrayIntegervEXT == nil {
    EXT_direct_state_access = false
  }
  if pGetVertexArrayPointeri_vEXT = (C.PGETVERTEXARRAYPOINTERI_VEXT)(getProcAddr("glGetVertexArrayPointeri_vEXT")); pGetVertexArrayPointeri_vEXT == nil {
    EXT_direct_state_access = false
  }
  if pGetVertexArrayPointervEXT = (C.PGETVERTEXARRAYPOINTERVEXT)(getProcAddr("glGetVertexArrayPointervEXT")); pGetVertexArrayPointervEXT == nil {
    EXT_direct_state_access = false
  }
  if pGetVertexAttribArrayObjectfvATI = (C.PGETVERTEXATTRIBARRAYOBJECTFVATI)(getProcAddr("glGetVertexAttribArrayObjectfvATI")); pGetVertexAttribArrayObjectfvATI == nil {
    ATI_vertex_attrib_array_object = false
  }
  if pGetVertexAttribArrayObjectivATI = (C.PGETVERTEXATTRIBARRAYOBJECTIVATI)(getProcAddr("glGetVertexAttribArrayObjectivATI")); pGetVertexAttribArrayObjectivATI == nil {
    ATI_vertex_attrib_array_object = false
  }
  if pGetVertexAttribIiv = (C.PGETVERTEXATTRIBIIV)(getProcAddr("glGetVertexAttribIiv")); pGetVertexAttribIiv == nil {
    return errors.New("glGetVertexAttribIiv")
  }
  if pGetVertexAttribIivEXT = (C.PGETVERTEXATTRIBIIVEXT)(getProcAddr("glGetVertexAttribIivEXT")); pGetVertexAttribIivEXT == nil {
    NV_vertex_program4 = false
  }
  if pGetVertexAttribIuiv = (C.PGETVERTEXATTRIBIUIV)(getProcAddr("glGetVertexAttribIuiv")); pGetVertexAttribIuiv == nil {
    return errors.New("glGetVertexAttribIuiv")
  }
  if pGetVertexAttribIuivEXT = (C.PGETVERTEXATTRIBIUIVEXT)(getProcAddr("glGetVertexAttribIuivEXT")); pGetVertexAttribIuivEXT == nil {
    NV_vertex_program4 = false
  }
  if pGetVertexAttribLdv = (C.PGETVERTEXATTRIBLDV)(getProcAddr("glGetVertexAttribLdv")); pGetVertexAttribLdv == nil {
    ARB_vertex_attrib_64bit = false
    return errors.New("glGetVertexAttribLdv")
  }
  if pGetVertexAttribLdvEXT = (C.PGETVERTEXATTRIBLDVEXT)(getProcAddr("glGetVertexAttribLdvEXT")); pGetVertexAttribLdvEXT == nil {
    EXT_vertex_attrib_64bit = false
  }
  if pGetVertexAttribLi64vNV = (C.PGETVERTEXATTRIBLI64VNV)(getProcAddr("glGetVertexAttribLi64vNV")); pGetVertexAttribLi64vNV == nil {
    NV_vertex_attrib_integer_64bit = false
  }
  if pGetVertexAttribLui64vARB = (C.PGETVERTEXATTRIBLUI64VARB)(getProcAddr("glGetVertexAttribLui64vARB")); pGetVertexAttribLui64vARB == nil {
    ARB_bindless_texture = false
  }
  if pGetVertexAttribLui64vNV = (C.PGETVERTEXATTRIBLUI64VNV)(getProcAddr("glGetVertexAttribLui64vNV")); pGetVertexAttribLui64vNV == nil {
    NV_vertex_attrib_integer_64bit = false
  }
  if pGetVertexAttribPointerv = (C.PGETVERTEXATTRIBPOINTERV)(getProcAddr("glGetVertexAttribPointerv")); pGetVertexAttribPointerv == nil {
    return errors.New("glGetVertexAttribPointerv")
  }
  if pGetVertexAttribPointervARB = (C.PGETVERTEXATTRIBPOINTERVARB)(getProcAddr("glGetVertexAttribPointervARB")); pGetVertexAttribPointervARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if pGetVertexAttribPointervNV = (C.PGETVERTEXATTRIBPOINTERVNV)(getProcAddr("glGetVertexAttribPointervNV")); pGetVertexAttribPointervNV == nil {
    NV_vertex_program = false
  }
  if pGetVertexAttribdv = (C.PGETVERTEXATTRIBDV)(getProcAddr("glGetVertexAttribdv")); pGetVertexAttribdv == nil {
    return errors.New("glGetVertexAttribdv")
  }
  if pGetVertexAttribdvARB = (C.PGETVERTEXATTRIBDVARB)(getProcAddr("glGetVertexAttribdvARB")); pGetVertexAttribdvARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if pGetVertexAttribdvNV = (C.PGETVERTEXATTRIBDVNV)(getProcAddr("glGetVertexAttribdvNV")); pGetVertexAttribdvNV == nil {
    NV_vertex_program = false
  }
  if pGetVertexAttribfv = (C.PGETVERTEXATTRIBFV)(getProcAddr("glGetVertexAttribfv")); pGetVertexAttribfv == nil {
    return errors.New("glGetVertexAttribfv")
  }
  if pGetVertexAttribfvARB = (C.PGETVERTEXATTRIBFVARB)(getProcAddr("glGetVertexAttribfvARB")); pGetVertexAttribfvARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if pGetVertexAttribfvNV = (C.PGETVERTEXATTRIBFVNV)(getProcAddr("glGetVertexAttribfvNV")); pGetVertexAttribfvNV == nil {
    NV_vertex_program = false
  }
  if pGetVertexAttribiv = (C.PGETVERTEXATTRIBIV)(getProcAddr("glGetVertexAttribiv")); pGetVertexAttribiv == nil {
    return errors.New("glGetVertexAttribiv")
  }
  if pGetVertexAttribivARB = (C.PGETVERTEXATTRIBIVARB)(getProcAddr("glGetVertexAttribivARB")); pGetVertexAttribivARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if pGetVertexAttribivNV = (C.PGETVERTEXATTRIBIVNV)(getProcAddr("glGetVertexAttribivNV")); pGetVertexAttribivNV == nil {
    NV_vertex_program = false
  }
  if pGetVideoCaptureStreamdvNV = (C.PGETVIDEOCAPTURESTREAMDVNV)(getProcAddr("glGetVideoCaptureStreamdvNV")); pGetVideoCaptureStreamdvNV == nil {
    NV_video_capture = false
  }
  if pGetVideoCaptureStreamfvNV = (C.PGETVIDEOCAPTURESTREAMFVNV)(getProcAddr("glGetVideoCaptureStreamfvNV")); pGetVideoCaptureStreamfvNV == nil {
    NV_video_capture = false
  }
  if pGetVideoCaptureStreamivNV = (C.PGETVIDEOCAPTURESTREAMIVNV)(getProcAddr("glGetVideoCaptureStreamivNV")); pGetVideoCaptureStreamivNV == nil {
    NV_video_capture = false
  }
  if pGetVideoCaptureivNV = (C.PGETVIDEOCAPTUREIVNV)(getProcAddr("glGetVideoCaptureivNV")); pGetVideoCaptureivNV == nil {
    NV_video_capture = false
  }
  if pGetVideoi64vNV = (C.PGETVIDEOI64VNV)(getProcAddr("glGetVideoi64vNV")); pGetVideoi64vNV == nil {
    NV_present_video = false
  }
  if pGetVideoivNV = (C.PGETVIDEOIVNV)(getProcAddr("glGetVideoivNV")); pGetVideoivNV == nil {
    NV_present_video = false
  }
  if pGetVideoui64vNV = (C.PGETVIDEOUI64VNV)(getProcAddr("glGetVideoui64vNV")); pGetVideoui64vNV == nil {
    NV_present_video = false
  }
  if pGetVideouivNV = (C.PGETVIDEOUIVNV)(getProcAddr("glGetVideouivNV")); pGetVideouivNV == nil {
    NV_present_video = false
  }
  if pGetnCompressedTexImageARB = (C.PGETNCOMPRESSEDTEXIMAGEARB)(getProcAddr("glGetnCompressedTexImageARB")); pGetnCompressedTexImageARB == nil {
    ARB_robustness = false
  }
  if pGetnTexImageARB = (C.PGETNTEXIMAGEARB)(getProcAddr("glGetnTexImageARB")); pGetnTexImageARB == nil {
    ARB_robustness = false
  }
  if pGetnUniformdvARB = (C.PGETNUNIFORMDVARB)(getProcAddr("glGetnUniformdvARB")); pGetnUniformdvARB == nil {
    ARB_robustness = false
  }
  if pGetnUniformfvARB = (C.PGETNUNIFORMFVARB)(getProcAddr("glGetnUniformfvARB")); pGetnUniformfvARB == nil {
    ARB_robustness = false
  }
  if pGetnUniformivARB = (C.PGETNUNIFORMIVARB)(getProcAddr("glGetnUniformivARB")); pGetnUniformivARB == nil {
    ARB_robustness = false
  }
  if pGetnUniformuivARB = (C.PGETNUNIFORMUIVARB)(getProcAddr("glGetnUniformuivARB")); pGetnUniformuivARB == nil {
    ARB_robustness = false
  }
  if pGlobalAlphaFactorbSUN = (C.PGLOBALALPHAFACTORBSUN)(getProcAddr("glGlobalAlphaFactorbSUN")); pGlobalAlphaFactorbSUN == nil {
    SUN_global_alpha = false
  }
  if pGlobalAlphaFactordSUN = (C.PGLOBALALPHAFACTORDSUN)(getProcAddr("glGlobalAlphaFactordSUN")); pGlobalAlphaFactordSUN == nil {
    SUN_global_alpha = false
  }
  if pGlobalAlphaFactorfSUN = (C.PGLOBALALPHAFACTORFSUN)(getProcAddr("glGlobalAlphaFactorfSUN")); pGlobalAlphaFactorfSUN == nil {
    SUN_global_alpha = false
  }
  if pGlobalAlphaFactoriSUN = (C.PGLOBALALPHAFACTORISUN)(getProcAddr("glGlobalAlphaFactoriSUN")); pGlobalAlphaFactoriSUN == nil {
    SUN_global_alpha = false
  }
  if pGlobalAlphaFactorsSUN = (C.PGLOBALALPHAFACTORSSUN)(getProcAddr("glGlobalAlphaFactorsSUN")); pGlobalAlphaFactorsSUN == nil {
    SUN_global_alpha = false
  }
  if pGlobalAlphaFactorubSUN = (C.PGLOBALALPHAFACTORUBSUN)(getProcAddr("glGlobalAlphaFactorubSUN")); pGlobalAlphaFactorubSUN == nil {
    SUN_global_alpha = false
  }
  if pGlobalAlphaFactoruiSUN = (C.PGLOBALALPHAFACTORUISUN)(getProcAddr("glGlobalAlphaFactoruiSUN")); pGlobalAlphaFactoruiSUN == nil {
    SUN_global_alpha = false
  }
  if pGlobalAlphaFactorusSUN = (C.PGLOBALALPHAFACTORUSSUN)(getProcAddr("glGlobalAlphaFactorusSUN")); pGlobalAlphaFactorusSUN == nil {
    SUN_global_alpha = false
  }
  if pHint = (C.PHINT)(getProcAddr("glHint")); pHint == nil {
    return errors.New("glHint")
  }
  if pHintPGI = (C.PHINTPGI)(getProcAddr("glHintPGI")); pHintPGI == nil {
    PGI_misc_hints = false
  }
  if pHistogramEXT = (C.PHISTOGRAMEXT)(getProcAddr("glHistogramEXT")); pHistogramEXT == nil {
    EXT_histogram = false
  }
  if pIglooInterfaceSGIX = (C.PIGLOOINTERFACESGIX)(getProcAddr("glIglooInterfaceSGIX")); pIglooInterfaceSGIX == nil {
    SGIX_igloo_interface = false
  }
  if pImageTransformParameterfHP = (C.PIMAGETRANSFORMPARAMETERFHP)(getProcAddr("glImageTransformParameterfHP")); pImageTransformParameterfHP == nil {
    HP_image_transform = false
  }
  if pImageTransformParameterfvHP = (C.PIMAGETRANSFORMPARAMETERFVHP)(getProcAddr("glImageTransformParameterfvHP")); pImageTransformParameterfvHP == nil {
    HP_image_transform = false
  }
  if pImageTransformParameteriHP = (C.PIMAGETRANSFORMPARAMETERIHP)(getProcAddr("glImageTransformParameteriHP")); pImageTransformParameteriHP == nil {
    HP_image_transform = false
  }
  if pImageTransformParameterivHP = (C.PIMAGETRANSFORMPARAMETERIVHP)(getProcAddr("glImageTransformParameterivHP")); pImageTransformParameterivHP == nil {
    HP_image_transform = false
  }
  if pImportSyncEXT = (C.PIMPORTSYNCEXT)(getProcAddr("glImportSyncEXT")); pImportSyncEXT == nil {
    EXT_x11_sync_object = false
  }
  if pIndexFormatNV = (C.PINDEXFORMATNV)(getProcAddr("glIndexFormatNV")); pIndexFormatNV == nil {
    NV_vertex_buffer_unified_memory = false
  }
  if pIndexFuncEXT = (C.PINDEXFUNCEXT)(getProcAddr("glIndexFuncEXT")); pIndexFuncEXT == nil {
    EXT_index_func = false
  }
  if pIndexMaterialEXT = (C.PINDEXMATERIALEXT)(getProcAddr("glIndexMaterialEXT")); pIndexMaterialEXT == nil {
    EXT_index_material = false
  }
  if pIndexPointerEXT = (C.PINDEXPOINTEREXT)(getProcAddr("glIndexPointerEXT")); pIndexPointerEXT == nil {
    EXT_vertex_array = false
  }
  if pIndexPointerListIBM = (C.PINDEXPOINTERLISTIBM)(getProcAddr("glIndexPointerListIBM")); pIndexPointerListIBM == nil {
    IBM_vertex_array_lists = false
  }
  if pIndexxOES = (C.PINDEXXOES)(getProcAddr("glIndexxOES")); pIndexxOES == nil {
    OES_fixed_point = false
  }
  if pIndexxvOES = (C.PINDEXXVOES)(getProcAddr("glIndexxvOES")); pIndexxvOES == nil {
    OES_fixed_point = false
  }
  if pInsertComponentEXT = (C.PINSERTCOMPONENTEXT)(getProcAddr("glInsertComponentEXT")); pInsertComponentEXT == nil {
    EXT_vertex_shader = false
  }
  if pInsertEventMarkerEXT = (C.PINSERTEVENTMARKEREXT)(getProcAddr("glInsertEventMarkerEXT")); pInsertEventMarkerEXT == nil {
    EXT_debug_marker = false
  }
  if pInstrumentsBufferSGIX = (C.PINSTRUMENTSBUFFERSGIX)(getProcAddr("glInstrumentsBufferSGIX")); pInstrumentsBufferSGIX == nil {
    SGIX_instruments = false
  }
  if pInterpolatePathsNV = (C.PINTERPOLATEPATHSNV)(getProcAddr("glInterpolatePathsNV")); pInterpolatePathsNV == nil {
    NV_path_rendering = false
  }
  if pInvalidateBufferData = (C.PINVALIDATEBUFFERDATA)(getProcAddr("glInvalidateBufferData")); pInvalidateBufferData == nil {
    ARB_invalidate_subdata = false
  }
  if pInvalidateBufferSubData = (C.PINVALIDATEBUFFERSUBDATA)(getProcAddr("glInvalidateBufferSubData")); pInvalidateBufferSubData == nil {
    ARB_invalidate_subdata = false
  }
  if pInvalidateFramebuffer = (C.PINVALIDATEFRAMEBUFFER)(getProcAddr("glInvalidateFramebuffer")); pInvalidateFramebuffer == nil {
    ARB_invalidate_subdata = false
  }
  if pInvalidateSubFramebuffer = (C.PINVALIDATESUBFRAMEBUFFER)(getProcAddr("glInvalidateSubFramebuffer")); pInvalidateSubFramebuffer == nil {
    ARB_invalidate_subdata = false
  }
  if pInvalidateTexImage = (C.PINVALIDATETEXIMAGE)(getProcAddr("glInvalidateTexImage")); pInvalidateTexImage == nil {
    ARB_invalidate_subdata = false
  }
  if pInvalidateTexSubImage = (C.PINVALIDATETEXSUBIMAGE)(getProcAddr("glInvalidateTexSubImage")); pInvalidateTexSubImage == nil {
    ARB_invalidate_subdata = false
  }
  if pIsAsyncMarkerSGIX = (C.PISASYNCMARKERSGIX)(getProcAddr("glIsAsyncMarkerSGIX")); pIsAsyncMarkerSGIX == nil {
    SGIX_async = false
  }
  if pIsBuffer = (C.PISBUFFER)(getProcAddr("glIsBuffer")); pIsBuffer == nil {
    return errors.New("glIsBuffer")
  }
  if pIsBufferARB = (C.PISBUFFERARB)(getProcAddr("glIsBufferARB")); pIsBufferARB == nil {
    ARB_vertex_buffer_object = false
  }
  if pIsBufferResidentNV = (C.PISBUFFERRESIDENTNV)(getProcAddr("glIsBufferResidentNV")); pIsBufferResidentNV == nil {
    NV_shader_buffer_load = false
  }
  if pIsEnabled = (C.PISENABLED)(getProcAddr("glIsEnabled")); pIsEnabled == nil {
    return errors.New("glIsEnabled")
  }
  if pIsEnabledIndexedEXT = (C.PISENABLEDINDEXEDEXT)(getProcAddr("glIsEnabledIndexedEXT")); pIsEnabledIndexedEXT == nil {
    EXT_direct_state_access = false
    EXT_draw_buffers2 = false
  }
  if pIsEnabledi = (C.PISENABLEDI)(getProcAddr("glIsEnabledi")); pIsEnabledi == nil {
    return errors.New("glIsEnabledi")
  }
  if pIsFenceAPPLE = (C.PISFENCEAPPLE)(getProcAddr("glIsFenceAPPLE")); pIsFenceAPPLE == nil {
    APPLE_fence = false
  }
  if pIsFenceNV = (C.PISFENCENV)(getProcAddr("glIsFenceNV")); pIsFenceNV == nil {
    NV_fence = false
  }
  if pIsFramebuffer = (C.PISFRAMEBUFFER)(getProcAddr("glIsFramebuffer")); pIsFramebuffer == nil {
    ARB_framebuffer_object = false
    return errors.New("glIsFramebuffer")
  }
  if pIsFramebufferEXT = (C.PISFRAMEBUFFEREXT)(getProcAddr("glIsFramebufferEXT")); pIsFramebufferEXT == nil {
    EXT_framebuffer_object = false
  }
  if pIsImageHandleResidentARB = (C.PISIMAGEHANDLERESIDENTARB)(getProcAddr("glIsImageHandleResidentARB")); pIsImageHandleResidentARB == nil {
    ARB_bindless_texture = false
  }
  if pIsImageHandleResidentNV = (C.PISIMAGEHANDLERESIDENTNV)(getProcAddr("glIsImageHandleResidentNV")); pIsImageHandleResidentNV == nil {
    NV_bindless_texture = false
  }
  if pIsNameAMD = (C.PISNAMEAMD)(getProcAddr("glIsNameAMD")); pIsNameAMD == nil {
    AMD_name_gen_delete = false
  }
  if pIsNamedBufferResidentNV = (C.PISNAMEDBUFFERRESIDENTNV)(getProcAddr("glIsNamedBufferResidentNV")); pIsNamedBufferResidentNV == nil {
    NV_shader_buffer_load = false
  }
  if pIsNamedStringARB = (C.PISNAMEDSTRINGARB)(getProcAddr("glIsNamedStringARB")); pIsNamedStringARB == nil {
    ARB_shading_language_include = false
  }
  if pIsObjectBufferATI = (C.PISOBJECTBUFFERATI)(getProcAddr("glIsObjectBufferATI")); pIsObjectBufferATI == nil {
    ATI_vertex_array_object = false
  }
  if pIsOcclusionQueryNV = (C.PISOCCLUSIONQUERYNV)(getProcAddr("glIsOcclusionQueryNV")); pIsOcclusionQueryNV == nil {
    NV_occlusion_query = false
  }
  if pIsPathNV = (C.PISPATHNV)(getProcAddr("glIsPathNV")); pIsPathNV == nil {
    NV_path_rendering = false
  }
  if pIsPointInFillPathNV = (C.PISPOINTINFILLPATHNV)(getProcAddr("glIsPointInFillPathNV")); pIsPointInFillPathNV == nil {
    NV_path_rendering = false
  }
  if pIsPointInStrokePathNV = (C.PISPOINTINSTROKEPATHNV)(getProcAddr("glIsPointInStrokePathNV")); pIsPointInStrokePathNV == nil {
    NV_path_rendering = false
  }
  if pIsProgram = (C.PISPROGRAM)(getProcAddr("glIsProgram")); pIsProgram == nil {
    return errors.New("glIsProgram")
  }
  if pIsProgramARB = (C.PISPROGRAMARB)(getProcAddr("glIsProgramARB")); pIsProgramARB == nil {
    ARB_fragment_program = false
    ARB_vertex_program = false
  }
  if pIsProgramNV = (C.PISPROGRAMNV)(getProcAddr("glIsProgramNV")); pIsProgramNV == nil {
    NV_vertex_program = false
  }
  if pIsProgramPipeline = (C.PISPROGRAMPIPELINE)(getProcAddr("glIsProgramPipeline")); pIsProgramPipeline == nil {
    ARB_separate_shader_objects = false
    return errors.New("glIsProgramPipeline")
  }
  if pIsProgramPipelineEXT = (C.PISPROGRAMPIPELINEEXT)(getProcAddr("glIsProgramPipelineEXT")); pIsProgramPipelineEXT == nil {
    EXT_separate_shader_objects = false
  }
  if pIsQuery = (C.PISQUERY)(getProcAddr("glIsQuery")); pIsQuery == nil {
    return errors.New("glIsQuery")
  }
  if pIsQueryARB = (C.PISQUERYARB)(getProcAddr("glIsQueryARB")); pIsQueryARB == nil {
    ARB_occlusion_query = false
  }
  if pIsRenderbuffer = (C.PISRENDERBUFFER)(getProcAddr("glIsRenderbuffer")); pIsRenderbuffer == nil {
    ARB_framebuffer_object = false
    return errors.New("glIsRenderbuffer")
  }
  if pIsRenderbufferEXT = (C.PISRENDERBUFFEREXT)(getProcAddr("glIsRenderbufferEXT")); pIsRenderbufferEXT == nil {
    EXT_framebuffer_object = false
  }
  if pIsSampler = (C.PISSAMPLER)(getProcAddr("glIsSampler")); pIsSampler == nil {
    ARB_sampler_objects = false
    return errors.New("glIsSampler")
  }
  if pIsShader = (C.PISSHADER)(getProcAddr("glIsShader")); pIsShader == nil {
    return errors.New("glIsShader")
  }
  if pIsSync = (C.PISSYNC)(getProcAddr("glIsSync")); pIsSync == nil {
    ARB_sync = false
    return errors.New("glIsSync")
  }
  if pIsTexture = (C.PISTEXTURE)(getProcAddr("glIsTexture")); pIsTexture == nil {
    return errors.New("glIsTexture")
  }
  if pIsTextureEXT = (C.PISTEXTUREEXT)(getProcAddr("glIsTextureEXT")); pIsTextureEXT == nil {
    EXT_texture_object = false
  }
  if pIsTextureHandleResidentARB = (C.PISTEXTUREHANDLERESIDENTARB)(getProcAddr("glIsTextureHandleResidentARB")); pIsTextureHandleResidentARB == nil {
    ARB_bindless_texture = false
  }
  if pIsTextureHandleResidentNV = (C.PISTEXTUREHANDLERESIDENTNV)(getProcAddr("glIsTextureHandleResidentNV")); pIsTextureHandleResidentNV == nil {
    NV_bindless_texture = false
  }
  if pIsTransformFeedback = (C.PISTRANSFORMFEEDBACK)(getProcAddr("glIsTransformFeedback")); pIsTransformFeedback == nil {
    ARB_transform_feedback2 = false
    return errors.New("glIsTransformFeedback")
  }
  if pIsTransformFeedbackNV = (C.PISTRANSFORMFEEDBACKNV)(getProcAddr("glIsTransformFeedbackNV")); pIsTransformFeedbackNV == nil {
    NV_transform_feedback2 = false
  }
  if pIsVariantEnabledEXT = (C.PISVARIANTENABLEDEXT)(getProcAddr("glIsVariantEnabledEXT")); pIsVariantEnabledEXT == nil {
    EXT_vertex_shader = false
  }
  if pIsVertexArray = (C.PISVERTEXARRAY)(getProcAddr("glIsVertexArray")); pIsVertexArray == nil {
    ARB_vertex_array_object = false
    return errors.New("glIsVertexArray")
  }
  if pIsVertexArrayAPPLE = (C.PISVERTEXARRAYAPPLE)(getProcAddr("glIsVertexArrayAPPLE")); pIsVertexArrayAPPLE == nil {
    APPLE_vertex_array_object = false
  }
  if pIsVertexAttribEnabledAPPLE = (C.PISVERTEXATTRIBENABLEDAPPLE)(getProcAddr("glIsVertexAttribEnabledAPPLE")); pIsVertexAttribEnabledAPPLE == nil {
    APPLE_vertex_program_evaluators = false
  }
  if pLabelObjectEXT = (C.PLABELOBJECTEXT)(getProcAddr("glLabelObjectEXT")); pLabelObjectEXT == nil {
    EXT_debug_label = false
  }
  if pLightEnviSGIX = (C.PLIGHTENVISGIX)(getProcAddr("glLightEnviSGIX")); pLightEnviSGIX == nil {
    SGIX_fragment_lighting = false
  }
  if pLightModelxOES = (C.PLIGHTMODELXOES)(getProcAddr("glLightModelxOES")); pLightModelxOES == nil {
    OES_fixed_point = false
  }
  if pLightModelxvOES = (C.PLIGHTMODELXVOES)(getProcAddr("glLightModelxvOES")); pLightModelxvOES == nil {
    OES_fixed_point = false
  }
  if pLightxOES = (C.PLIGHTXOES)(getProcAddr("glLightxOES")); pLightxOES == nil {
    OES_fixed_point = false
  }
  if pLightxvOES = (C.PLIGHTXVOES)(getProcAddr("glLightxvOES")); pLightxvOES == nil {
    OES_fixed_point = false
  }
  if pLineWidth = (C.PLINEWIDTH)(getProcAddr("glLineWidth")); pLineWidth == nil {
    return errors.New("glLineWidth")
  }
  if pLineWidthxOES = (C.PLINEWIDTHXOES)(getProcAddr("glLineWidthxOES")); pLineWidthxOES == nil {
    OES_fixed_point = false
  }
  if pLinkProgram = (C.PLINKPROGRAM)(getProcAddr("glLinkProgram")); pLinkProgram == nil {
    return errors.New("glLinkProgram")
  }
  if pLinkProgramARB = (C.PLINKPROGRAMARB)(getProcAddr("glLinkProgramARB")); pLinkProgramARB == nil {
    ARB_shader_objects = false
  }
  if pListParameterfSGIX = (C.PLISTPARAMETERFSGIX)(getProcAddr("glListParameterfSGIX")); pListParameterfSGIX == nil {
    SGIX_list_priority = false
  }
  if pListParameterfvSGIX = (C.PLISTPARAMETERFVSGIX)(getProcAddr("glListParameterfvSGIX")); pListParameterfvSGIX == nil {
    SGIX_list_priority = false
  }
  if pListParameteriSGIX = (C.PLISTPARAMETERISGIX)(getProcAddr("glListParameteriSGIX")); pListParameteriSGIX == nil {
    SGIX_list_priority = false
  }
  if pListParameterivSGIX = (C.PLISTPARAMETERIVSGIX)(getProcAddr("glListParameterivSGIX")); pListParameterivSGIX == nil {
    SGIX_list_priority = false
  }
  if pLoadIdentityDeformationMapSGIX = (C.PLOADIDENTITYDEFORMATIONMAPSGIX)(getProcAddr("glLoadIdentityDeformationMapSGIX")); pLoadIdentityDeformationMapSGIX == nil {
    SGIX_polynomial_ffd = false
  }
  if pLoadMatrixxOES = (C.PLOADMATRIXXOES)(getProcAddr("glLoadMatrixxOES")); pLoadMatrixxOES == nil {
    OES_fixed_point = false
  }
  if pLoadProgramNV = (C.PLOADPROGRAMNV)(getProcAddr("glLoadProgramNV")); pLoadProgramNV == nil {
    NV_vertex_program = false
  }
  if pLoadTransposeMatrixdARB = (C.PLOADTRANSPOSEMATRIXDARB)(getProcAddr("glLoadTransposeMatrixdARB")); pLoadTransposeMatrixdARB == nil {
    ARB_transpose_matrix = false
  }
  if pLoadTransposeMatrixfARB = (C.PLOADTRANSPOSEMATRIXFARB)(getProcAddr("glLoadTransposeMatrixfARB")); pLoadTransposeMatrixfARB == nil {
    ARB_transpose_matrix = false
  }
  if pLoadTransposeMatrixxOES = (C.PLOADTRANSPOSEMATRIXXOES)(getProcAddr("glLoadTransposeMatrixxOES")); pLoadTransposeMatrixxOES == nil {
    OES_fixed_point = false
  }
  if pLockArraysEXT = (C.PLOCKARRAYSEXT)(getProcAddr("glLockArraysEXT")); pLockArraysEXT == nil {
    EXT_compiled_vertex_array = false
  }
  if pLogicOp = (C.PLOGICOP)(getProcAddr("glLogicOp")); pLogicOp == nil {
    return errors.New("glLogicOp")
  }
  if pMakeBufferNonResidentNV = (C.PMAKEBUFFERNONRESIDENTNV)(getProcAddr("glMakeBufferNonResidentNV")); pMakeBufferNonResidentNV == nil {
    NV_shader_buffer_load = false
  }
  if pMakeBufferResidentNV = (C.PMAKEBUFFERRESIDENTNV)(getProcAddr("glMakeBufferResidentNV")); pMakeBufferResidentNV == nil {
    NV_shader_buffer_load = false
  }
  if pMakeImageHandleNonResidentARB = (C.PMAKEIMAGEHANDLENONRESIDENTARB)(getProcAddr("glMakeImageHandleNonResidentARB")); pMakeImageHandleNonResidentARB == nil {
    ARB_bindless_texture = false
  }
  if pMakeImageHandleNonResidentNV = (C.PMAKEIMAGEHANDLENONRESIDENTNV)(getProcAddr("glMakeImageHandleNonResidentNV")); pMakeImageHandleNonResidentNV == nil {
    NV_bindless_texture = false
  }
  if pMakeImageHandleResidentARB = (C.PMAKEIMAGEHANDLERESIDENTARB)(getProcAddr("glMakeImageHandleResidentARB")); pMakeImageHandleResidentARB == nil {
    ARB_bindless_texture = false
  }
  if pMakeImageHandleResidentNV = (C.PMAKEIMAGEHANDLERESIDENTNV)(getProcAddr("glMakeImageHandleResidentNV")); pMakeImageHandleResidentNV == nil {
    NV_bindless_texture = false
  }
  if pMakeNamedBufferNonResidentNV = (C.PMAKENAMEDBUFFERNONRESIDENTNV)(getProcAddr("glMakeNamedBufferNonResidentNV")); pMakeNamedBufferNonResidentNV == nil {
    NV_shader_buffer_load = false
  }
  if pMakeNamedBufferResidentNV = (C.PMAKENAMEDBUFFERRESIDENTNV)(getProcAddr("glMakeNamedBufferResidentNV")); pMakeNamedBufferResidentNV == nil {
    NV_shader_buffer_load = false
  }
  if pMakeTextureHandleNonResidentARB = (C.PMAKETEXTUREHANDLENONRESIDENTARB)(getProcAddr("glMakeTextureHandleNonResidentARB")); pMakeTextureHandleNonResidentARB == nil {
    ARB_bindless_texture = false
  }
  if pMakeTextureHandleNonResidentNV = (C.PMAKETEXTUREHANDLENONRESIDENTNV)(getProcAddr("glMakeTextureHandleNonResidentNV")); pMakeTextureHandleNonResidentNV == nil {
    NV_bindless_texture = false
  }
  if pMakeTextureHandleResidentARB = (C.PMAKETEXTUREHANDLERESIDENTARB)(getProcAddr("glMakeTextureHandleResidentARB")); pMakeTextureHandleResidentARB == nil {
    ARB_bindless_texture = false
  }
  if pMakeTextureHandleResidentNV = (C.PMAKETEXTUREHANDLERESIDENTNV)(getProcAddr("glMakeTextureHandleResidentNV")); pMakeTextureHandleResidentNV == nil {
    NV_bindless_texture = false
  }
  if pMap1xOES = (C.PMAP1XOES)(getProcAddr("glMap1xOES")); pMap1xOES == nil {
    OES_fixed_point = false
  }
  if pMap2xOES = (C.PMAP2XOES)(getProcAddr("glMap2xOES")); pMap2xOES == nil {
    OES_fixed_point = false
  }
  if pMapBuffer = (C.PMAPBUFFER)(getProcAddr("glMapBuffer")); pMapBuffer == nil {
    return errors.New("glMapBuffer")
  }
  if pMapBufferARB = (C.PMAPBUFFERARB)(getProcAddr("glMapBufferARB")); pMapBufferARB == nil {
    ARB_vertex_buffer_object = false
  }
  if pMapBufferRange = (C.PMAPBUFFERRANGE)(getProcAddr("glMapBufferRange")); pMapBufferRange == nil {
    ARB_map_buffer_range = false
    return errors.New("glMapBufferRange")
  }
  if pMapControlPointsNV = (C.PMAPCONTROLPOINTSNV)(getProcAddr("glMapControlPointsNV")); pMapControlPointsNV == nil {
    NV_evaluators = false
  }
  if pMapGrid1xOES = (C.PMAPGRID1XOES)(getProcAddr("glMapGrid1xOES")); pMapGrid1xOES == nil {
    OES_fixed_point = false
  }
  if pMapGrid2xOES = (C.PMAPGRID2XOES)(getProcAddr("glMapGrid2xOES")); pMapGrid2xOES == nil {
    OES_fixed_point = false
  }
  if pMapNamedBufferEXT = (C.PMAPNAMEDBUFFEREXT)(getProcAddr("glMapNamedBufferEXT")); pMapNamedBufferEXT == nil {
    EXT_direct_state_access = false
  }
  if pMapNamedBufferRangeEXT = (C.PMAPNAMEDBUFFERRANGEEXT)(getProcAddr("glMapNamedBufferRangeEXT")); pMapNamedBufferRangeEXT == nil {
    EXT_direct_state_access = false
  }
  if pMapObjectBufferATI = (C.PMAPOBJECTBUFFERATI)(getProcAddr("glMapObjectBufferATI")); pMapObjectBufferATI == nil {
    ATI_map_object_buffer = false
  }
  if pMapParameterfvNV = (C.PMAPPARAMETERFVNV)(getProcAddr("glMapParameterfvNV")); pMapParameterfvNV == nil {
    NV_evaluators = false
  }
  if pMapParameterivNV = (C.PMAPPARAMETERIVNV)(getProcAddr("glMapParameterivNV")); pMapParameterivNV == nil {
    NV_evaluators = false
  }
  if pMapTexture2DINTEL = (C.PMAPTEXTURE2DINTEL)(getProcAddr("glMapTexture2DINTEL")); pMapTexture2DINTEL == nil {
    INTEL_map_texture = false
  }
  if pMapVertexAttrib1dAPPLE = (C.PMAPVERTEXATTRIB1DAPPLE)(getProcAddr("glMapVertexAttrib1dAPPLE")); pMapVertexAttrib1dAPPLE == nil {
    APPLE_vertex_program_evaluators = false
  }
  if pMapVertexAttrib1fAPPLE = (C.PMAPVERTEXATTRIB1FAPPLE)(getProcAddr("glMapVertexAttrib1fAPPLE")); pMapVertexAttrib1fAPPLE == nil {
    APPLE_vertex_program_evaluators = false
  }
  if pMapVertexAttrib2dAPPLE = (C.PMAPVERTEXATTRIB2DAPPLE)(getProcAddr("glMapVertexAttrib2dAPPLE")); pMapVertexAttrib2dAPPLE == nil {
    APPLE_vertex_program_evaluators = false
  }
  if pMapVertexAttrib2fAPPLE = (C.PMAPVERTEXATTRIB2FAPPLE)(getProcAddr("glMapVertexAttrib2fAPPLE")); pMapVertexAttrib2fAPPLE == nil {
    APPLE_vertex_program_evaluators = false
  }
  if pMaterialxOES = (C.PMATERIALXOES)(getProcAddr("glMaterialxOES")); pMaterialxOES == nil {
    OES_fixed_point = false
  }
  if pMaterialxvOES = (C.PMATERIALXVOES)(getProcAddr("glMaterialxvOES")); pMaterialxvOES == nil {
    OES_fixed_point = false
  }
  if pMatrixFrustumEXT = (C.PMATRIXFRUSTUMEXT)(getProcAddr("glMatrixFrustumEXT")); pMatrixFrustumEXT == nil {
    EXT_direct_state_access = false
  }
  if pMatrixIndexPointerARB = (C.PMATRIXINDEXPOINTERARB)(getProcAddr("glMatrixIndexPointerARB")); pMatrixIndexPointerARB == nil {
    ARB_matrix_palette = false
  }
  if pMatrixIndexubvARB = (C.PMATRIXINDEXUBVARB)(getProcAddr("glMatrixIndexubvARB")); pMatrixIndexubvARB == nil {
    ARB_matrix_palette = false
  }
  if pMatrixIndexuivARB = (C.PMATRIXINDEXUIVARB)(getProcAddr("glMatrixIndexuivARB")); pMatrixIndexuivARB == nil {
    ARB_matrix_palette = false
  }
  if pMatrixIndexusvARB = (C.PMATRIXINDEXUSVARB)(getProcAddr("glMatrixIndexusvARB")); pMatrixIndexusvARB == nil {
    ARB_matrix_palette = false
  }
  if pMatrixLoadIdentityEXT = (C.PMATRIXLOADIDENTITYEXT)(getProcAddr("glMatrixLoadIdentityEXT")); pMatrixLoadIdentityEXT == nil {
    EXT_direct_state_access = false
  }
  if pMatrixLoadTransposedEXT = (C.PMATRIXLOADTRANSPOSEDEXT)(getProcAddr("glMatrixLoadTransposedEXT")); pMatrixLoadTransposedEXT == nil {
    EXT_direct_state_access = false
  }
  if pMatrixLoadTransposefEXT = (C.PMATRIXLOADTRANSPOSEFEXT)(getProcAddr("glMatrixLoadTransposefEXT")); pMatrixLoadTransposefEXT == nil {
    EXT_direct_state_access = false
  }
  if pMatrixLoaddEXT = (C.PMATRIXLOADDEXT)(getProcAddr("glMatrixLoaddEXT")); pMatrixLoaddEXT == nil {
    EXT_direct_state_access = false
  }
  if pMatrixLoadfEXT = (C.PMATRIXLOADFEXT)(getProcAddr("glMatrixLoadfEXT")); pMatrixLoadfEXT == nil {
    EXT_direct_state_access = false
  }
  if pMatrixMultTransposedEXT = (C.PMATRIXMULTTRANSPOSEDEXT)(getProcAddr("glMatrixMultTransposedEXT")); pMatrixMultTransposedEXT == nil {
    EXT_direct_state_access = false
  }
  if pMatrixMultTransposefEXT = (C.PMATRIXMULTTRANSPOSEFEXT)(getProcAddr("glMatrixMultTransposefEXT")); pMatrixMultTransposefEXT == nil {
    EXT_direct_state_access = false
  }
  if pMatrixMultdEXT = (C.PMATRIXMULTDEXT)(getProcAddr("glMatrixMultdEXT")); pMatrixMultdEXT == nil {
    EXT_direct_state_access = false
  }
  if pMatrixMultfEXT = (C.PMATRIXMULTFEXT)(getProcAddr("glMatrixMultfEXT")); pMatrixMultfEXT == nil {
    EXT_direct_state_access = false
  }
  if pMatrixOrthoEXT = (C.PMATRIXORTHOEXT)(getProcAddr("glMatrixOrthoEXT")); pMatrixOrthoEXT == nil {
    EXT_direct_state_access = false
  }
  if pMatrixPopEXT = (C.PMATRIXPOPEXT)(getProcAddr("glMatrixPopEXT")); pMatrixPopEXT == nil {
    EXT_direct_state_access = false
  }
  if pMatrixPushEXT = (C.PMATRIXPUSHEXT)(getProcAddr("glMatrixPushEXT")); pMatrixPushEXT == nil {
    EXT_direct_state_access = false
  }
  if pMatrixRotatedEXT = (C.PMATRIXROTATEDEXT)(getProcAddr("glMatrixRotatedEXT")); pMatrixRotatedEXT == nil {
    EXT_direct_state_access = false
  }
  if pMatrixRotatefEXT = (C.PMATRIXROTATEFEXT)(getProcAddr("glMatrixRotatefEXT")); pMatrixRotatefEXT == nil {
    EXT_direct_state_access = false
  }
  if pMatrixScaledEXT = (C.PMATRIXSCALEDEXT)(getProcAddr("glMatrixScaledEXT")); pMatrixScaledEXT == nil {
    EXT_direct_state_access = false
  }
  if pMatrixScalefEXT = (C.PMATRIXSCALEFEXT)(getProcAddr("glMatrixScalefEXT")); pMatrixScalefEXT == nil {
    EXT_direct_state_access = false
  }
  if pMatrixTranslatedEXT = (C.PMATRIXTRANSLATEDEXT)(getProcAddr("glMatrixTranslatedEXT")); pMatrixTranslatedEXT == nil {
    EXT_direct_state_access = false
  }
  if pMatrixTranslatefEXT = (C.PMATRIXTRANSLATEFEXT)(getProcAddr("glMatrixTranslatefEXT")); pMatrixTranslatefEXT == nil {
    EXT_direct_state_access = false
  }
  if pMemoryBarrier = (C.PMEMORYBARRIER)(getProcAddr("glMemoryBarrier")); pMemoryBarrier == nil {
    ARB_shader_image_load_store = false
  }
  if pMemoryBarrierEXT = (C.PMEMORYBARRIEREXT)(getProcAddr("glMemoryBarrierEXT")); pMemoryBarrierEXT == nil {
    EXT_shader_image_load_store = false
  }
  if pMinSampleShading = (C.PMINSAMPLESHADING)(getProcAddr("glMinSampleShading")); pMinSampleShading == nil {
    return errors.New("glMinSampleShading")
  }
  if pMinSampleShadingARB = (C.PMINSAMPLESHADINGARB)(getProcAddr("glMinSampleShadingARB")); pMinSampleShadingARB == nil {
    ARB_sample_shading = false
  }
  if pMinmaxEXT = (C.PMINMAXEXT)(getProcAddr("glMinmaxEXT")); pMinmaxEXT == nil {
    EXT_histogram = false
  }
  if pMultMatrixxOES = (C.PMULTMATRIXXOES)(getProcAddr("glMultMatrixxOES")); pMultMatrixxOES == nil {
    OES_fixed_point = false
  }
  if pMultTransposeMatrixdARB = (C.PMULTTRANSPOSEMATRIXDARB)(getProcAddr("glMultTransposeMatrixdARB")); pMultTransposeMatrixdARB == nil {
    ARB_transpose_matrix = false
  }
  if pMultTransposeMatrixfARB = (C.PMULTTRANSPOSEMATRIXFARB)(getProcAddr("glMultTransposeMatrixfARB")); pMultTransposeMatrixfARB == nil {
    ARB_transpose_matrix = false
  }
  if pMultTransposeMatrixxOES = (C.PMULTTRANSPOSEMATRIXXOES)(getProcAddr("glMultTransposeMatrixxOES")); pMultTransposeMatrixxOES == nil {
    OES_fixed_point = false
  }
  if pMultiDrawArrays = (C.PMULTIDRAWARRAYS)(getProcAddr("glMultiDrawArrays")); pMultiDrawArrays == nil {
    return errors.New("glMultiDrawArrays")
  }
  if pMultiDrawArraysEXT = (C.PMULTIDRAWARRAYSEXT)(getProcAddr("glMultiDrawArraysEXT")); pMultiDrawArraysEXT == nil {
    EXT_multi_draw_arrays = false
  }
  if pMultiDrawArraysIndirect = (C.PMULTIDRAWARRAYSINDIRECT)(getProcAddr("glMultiDrawArraysIndirect")); pMultiDrawArraysIndirect == nil {
    ARB_multi_draw_indirect = false
  }
  if pMultiDrawArraysIndirectAMD = (C.PMULTIDRAWARRAYSINDIRECTAMD)(getProcAddr("glMultiDrawArraysIndirectAMD")); pMultiDrawArraysIndirectAMD == nil {
    AMD_multi_draw_indirect = false
  }
  if pMultiDrawArraysIndirectBindlessNV = (C.PMULTIDRAWARRAYSINDIRECTBINDLESSNV)(getProcAddr("glMultiDrawArraysIndirectBindlessNV")); pMultiDrawArraysIndirectBindlessNV == nil {
    NV_bindless_multi_draw_indirect = false
  }
  if pMultiDrawArraysIndirectCountARB = (C.PMULTIDRAWARRAYSINDIRECTCOUNTARB)(getProcAddr("glMultiDrawArraysIndirectCountARB")); pMultiDrawArraysIndirectCountARB == nil {
    ARB_indirect_parameters = false
  }
  if pMultiDrawElementArrayAPPLE = (C.PMULTIDRAWELEMENTARRAYAPPLE)(getProcAddr("glMultiDrawElementArrayAPPLE")); pMultiDrawElementArrayAPPLE == nil {
    APPLE_element_array = false
  }
  if pMultiDrawElements = (C.PMULTIDRAWELEMENTS)(getProcAddr("glMultiDrawElements")); pMultiDrawElements == nil {
    return errors.New("glMultiDrawElements")
  }
  if pMultiDrawElementsBaseVertex = (C.PMULTIDRAWELEMENTSBASEVERTEX)(getProcAddr("glMultiDrawElementsBaseVertex")); pMultiDrawElementsBaseVertex == nil {
    ARB_draw_elements_base_vertex = false
    return errors.New("glMultiDrawElementsBaseVertex")
  }
  if pMultiDrawElementsEXT = (C.PMULTIDRAWELEMENTSEXT)(getProcAddr("glMultiDrawElementsEXT")); pMultiDrawElementsEXT == nil {
    EXT_multi_draw_arrays = false
  }
  if pMultiDrawElementsIndirect = (C.PMULTIDRAWELEMENTSINDIRECT)(getProcAddr("glMultiDrawElementsIndirect")); pMultiDrawElementsIndirect == nil {
    ARB_multi_draw_indirect = false
  }
  if pMultiDrawElementsIndirectAMD = (C.PMULTIDRAWELEMENTSINDIRECTAMD)(getProcAddr("glMultiDrawElementsIndirectAMD")); pMultiDrawElementsIndirectAMD == nil {
    AMD_multi_draw_indirect = false
  }
  if pMultiDrawElementsIndirectBindlessNV = (C.PMULTIDRAWELEMENTSINDIRECTBINDLESSNV)(getProcAddr("glMultiDrawElementsIndirectBindlessNV")); pMultiDrawElementsIndirectBindlessNV == nil {
    NV_bindless_multi_draw_indirect = false
  }
  if pMultiDrawElementsIndirectCountARB = (C.PMULTIDRAWELEMENTSINDIRECTCOUNTARB)(getProcAddr("glMultiDrawElementsIndirectCountARB")); pMultiDrawElementsIndirectCountARB == nil {
    ARB_indirect_parameters = false
  }
  if pMultiDrawRangeElementArrayAPPLE = (C.PMULTIDRAWRANGEELEMENTARRAYAPPLE)(getProcAddr("glMultiDrawRangeElementArrayAPPLE")); pMultiDrawRangeElementArrayAPPLE == nil {
    APPLE_element_array = false
  }
  if pMultiModeDrawArraysIBM = (C.PMULTIMODEDRAWARRAYSIBM)(getProcAddr("glMultiModeDrawArraysIBM")); pMultiModeDrawArraysIBM == nil {
    IBM_multimode_draw_arrays = false
  }
  if pMultiModeDrawElementsIBM = (C.PMULTIMODEDRAWELEMENTSIBM)(getProcAddr("glMultiModeDrawElementsIBM")); pMultiModeDrawElementsIBM == nil {
    IBM_multimode_draw_arrays = false
  }
  if pMultiTexBufferEXT = (C.PMULTITEXBUFFEREXT)(getProcAddr("glMultiTexBufferEXT")); pMultiTexBufferEXT == nil {
    EXT_direct_state_access = false
  }
  if pMultiTexCoord1bOES = (C.PMULTITEXCOORD1BOES)(getProcAddr("glMultiTexCoord1bOES")); pMultiTexCoord1bOES == nil {
    OES_byte_coordinates = false
  }
  if pMultiTexCoord1bvOES = (C.PMULTITEXCOORD1BVOES)(getProcAddr("glMultiTexCoord1bvOES")); pMultiTexCoord1bvOES == nil {
    OES_byte_coordinates = false
  }
  if pMultiTexCoord1dARB = (C.PMULTITEXCOORD1DARB)(getProcAddr("glMultiTexCoord1dARB")); pMultiTexCoord1dARB == nil {
    ARB_multitexture = false
  }
  if pMultiTexCoord1dvARB = (C.PMULTITEXCOORD1DVARB)(getProcAddr("glMultiTexCoord1dvARB")); pMultiTexCoord1dvARB == nil {
    ARB_multitexture = false
  }
  if pMultiTexCoord1fARB = (C.PMULTITEXCOORD1FARB)(getProcAddr("glMultiTexCoord1fARB")); pMultiTexCoord1fARB == nil {
    ARB_multitexture = false
  }
  if pMultiTexCoord1fvARB = (C.PMULTITEXCOORD1FVARB)(getProcAddr("glMultiTexCoord1fvARB")); pMultiTexCoord1fvARB == nil {
    ARB_multitexture = false
  }
  if pMultiTexCoord1hNV = (C.PMULTITEXCOORD1HNV)(getProcAddr("glMultiTexCoord1hNV")); pMultiTexCoord1hNV == nil {
    NV_half_float = false
  }
  if pMultiTexCoord1hvNV = (C.PMULTITEXCOORD1HVNV)(getProcAddr("glMultiTexCoord1hvNV")); pMultiTexCoord1hvNV == nil {
    NV_half_float = false
  }
  if pMultiTexCoord1iARB = (C.PMULTITEXCOORD1IARB)(getProcAddr("glMultiTexCoord1iARB")); pMultiTexCoord1iARB == nil {
    ARB_multitexture = false
  }
  if pMultiTexCoord1ivARB = (C.PMULTITEXCOORD1IVARB)(getProcAddr("glMultiTexCoord1ivARB")); pMultiTexCoord1ivARB == nil {
    ARB_multitexture = false
  }
  if pMultiTexCoord1sARB = (C.PMULTITEXCOORD1SARB)(getProcAddr("glMultiTexCoord1sARB")); pMultiTexCoord1sARB == nil {
    ARB_multitexture = false
  }
  if pMultiTexCoord1svARB = (C.PMULTITEXCOORD1SVARB)(getProcAddr("glMultiTexCoord1svARB")); pMultiTexCoord1svARB == nil {
    ARB_multitexture = false
  }
  if pMultiTexCoord1xOES = (C.PMULTITEXCOORD1XOES)(getProcAddr("glMultiTexCoord1xOES")); pMultiTexCoord1xOES == nil {
    OES_fixed_point = false
  }
  if pMultiTexCoord1xvOES = (C.PMULTITEXCOORD1XVOES)(getProcAddr("glMultiTexCoord1xvOES")); pMultiTexCoord1xvOES == nil {
    OES_fixed_point = false
  }
  if pMultiTexCoord2bOES = (C.PMULTITEXCOORD2BOES)(getProcAddr("glMultiTexCoord2bOES")); pMultiTexCoord2bOES == nil {
    OES_byte_coordinates = false
  }
  if pMultiTexCoord2bvOES = (C.PMULTITEXCOORD2BVOES)(getProcAddr("glMultiTexCoord2bvOES")); pMultiTexCoord2bvOES == nil {
    OES_byte_coordinates = false
  }
  if pMultiTexCoord2dARB = (C.PMULTITEXCOORD2DARB)(getProcAddr("glMultiTexCoord2dARB")); pMultiTexCoord2dARB == nil {
    ARB_multitexture = false
  }
  if pMultiTexCoord2dvARB = (C.PMULTITEXCOORD2DVARB)(getProcAddr("glMultiTexCoord2dvARB")); pMultiTexCoord2dvARB == nil {
    ARB_multitexture = false
  }
  if pMultiTexCoord2fARB = (C.PMULTITEXCOORD2FARB)(getProcAddr("glMultiTexCoord2fARB")); pMultiTexCoord2fARB == nil {
    ARB_multitexture = false
  }
  if pMultiTexCoord2fvARB = (C.PMULTITEXCOORD2FVARB)(getProcAddr("glMultiTexCoord2fvARB")); pMultiTexCoord2fvARB == nil {
    ARB_multitexture = false
  }
  if pMultiTexCoord2hNV = (C.PMULTITEXCOORD2HNV)(getProcAddr("glMultiTexCoord2hNV")); pMultiTexCoord2hNV == nil {
    NV_half_float = false
  }
  if pMultiTexCoord2hvNV = (C.PMULTITEXCOORD2HVNV)(getProcAddr("glMultiTexCoord2hvNV")); pMultiTexCoord2hvNV == nil {
    NV_half_float = false
  }
  if pMultiTexCoord2iARB = (C.PMULTITEXCOORD2IARB)(getProcAddr("glMultiTexCoord2iARB")); pMultiTexCoord2iARB == nil {
    ARB_multitexture = false
  }
  if pMultiTexCoord2ivARB = (C.PMULTITEXCOORD2IVARB)(getProcAddr("glMultiTexCoord2ivARB")); pMultiTexCoord2ivARB == nil {
    ARB_multitexture = false
  }
  if pMultiTexCoord2sARB = (C.PMULTITEXCOORD2SARB)(getProcAddr("glMultiTexCoord2sARB")); pMultiTexCoord2sARB == nil {
    ARB_multitexture = false
  }
  if pMultiTexCoord2svARB = (C.PMULTITEXCOORD2SVARB)(getProcAddr("glMultiTexCoord2svARB")); pMultiTexCoord2svARB == nil {
    ARB_multitexture = false
  }
  if pMultiTexCoord2xOES = (C.PMULTITEXCOORD2XOES)(getProcAddr("glMultiTexCoord2xOES")); pMultiTexCoord2xOES == nil {
    OES_fixed_point = false
  }
  if pMultiTexCoord2xvOES = (C.PMULTITEXCOORD2XVOES)(getProcAddr("glMultiTexCoord2xvOES")); pMultiTexCoord2xvOES == nil {
    OES_fixed_point = false
  }
  if pMultiTexCoord3bOES = (C.PMULTITEXCOORD3BOES)(getProcAddr("glMultiTexCoord3bOES")); pMultiTexCoord3bOES == nil {
    OES_byte_coordinates = false
  }
  if pMultiTexCoord3bvOES = (C.PMULTITEXCOORD3BVOES)(getProcAddr("glMultiTexCoord3bvOES")); pMultiTexCoord3bvOES == nil {
    OES_byte_coordinates = false
  }
  if pMultiTexCoord3dARB = (C.PMULTITEXCOORD3DARB)(getProcAddr("glMultiTexCoord3dARB")); pMultiTexCoord3dARB == nil {
    ARB_multitexture = false
  }
  if pMultiTexCoord3dvARB = (C.PMULTITEXCOORD3DVARB)(getProcAddr("glMultiTexCoord3dvARB")); pMultiTexCoord3dvARB == nil {
    ARB_multitexture = false
  }
  if pMultiTexCoord3fARB = (C.PMULTITEXCOORD3FARB)(getProcAddr("glMultiTexCoord3fARB")); pMultiTexCoord3fARB == nil {
    ARB_multitexture = false
  }
  if pMultiTexCoord3fvARB = (C.PMULTITEXCOORD3FVARB)(getProcAddr("glMultiTexCoord3fvARB")); pMultiTexCoord3fvARB == nil {
    ARB_multitexture = false
  }
  if pMultiTexCoord3hNV = (C.PMULTITEXCOORD3HNV)(getProcAddr("glMultiTexCoord3hNV")); pMultiTexCoord3hNV == nil {
    NV_half_float = false
  }
  if pMultiTexCoord3hvNV = (C.PMULTITEXCOORD3HVNV)(getProcAddr("glMultiTexCoord3hvNV")); pMultiTexCoord3hvNV == nil {
    NV_half_float = false
  }
  if pMultiTexCoord3iARB = (C.PMULTITEXCOORD3IARB)(getProcAddr("glMultiTexCoord3iARB")); pMultiTexCoord3iARB == nil {
    ARB_multitexture = false
  }
  if pMultiTexCoord3ivARB = (C.PMULTITEXCOORD3IVARB)(getProcAddr("glMultiTexCoord3ivARB")); pMultiTexCoord3ivARB == nil {
    ARB_multitexture = false
  }
  if pMultiTexCoord3sARB = (C.PMULTITEXCOORD3SARB)(getProcAddr("glMultiTexCoord3sARB")); pMultiTexCoord3sARB == nil {
    ARB_multitexture = false
  }
  if pMultiTexCoord3svARB = (C.PMULTITEXCOORD3SVARB)(getProcAddr("glMultiTexCoord3svARB")); pMultiTexCoord3svARB == nil {
    ARB_multitexture = false
  }
  if pMultiTexCoord3xOES = (C.PMULTITEXCOORD3XOES)(getProcAddr("glMultiTexCoord3xOES")); pMultiTexCoord3xOES == nil {
    OES_fixed_point = false
  }
  if pMultiTexCoord3xvOES = (C.PMULTITEXCOORD3XVOES)(getProcAddr("glMultiTexCoord3xvOES")); pMultiTexCoord3xvOES == nil {
    OES_fixed_point = false
  }
  if pMultiTexCoord4bOES = (C.PMULTITEXCOORD4BOES)(getProcAddr("glMultiTexCoord4bOES")); pMultiTexCoord4bOES == nil {
    OES_byte_coordinates = false
  }
  if pMultiTexCoord4bvOES = (C.PMULTITEXCOORD4BVOES)(getProcAddr("glMultiTexCoord4bvOES")); pMultiTexCoord4bvOES == nil {
    OES_byte_coordinates = false
  }
  if pMultiTexCoord4dARB = (C.PMULTITEXCOORD4DARB)(getProcAddr("glMultiTexCoord4dARB")); pMultiTexCoord4dARB == nil {
    ARB_multitexture = false
  }
  if pMultiTexCoord4dvARB = (C.PMULTITEXCOORD4DVARB)(getProcAddr("glMultiTexCoord4dvARB")); pMultiTexCoord4dvARB == nil {
    ARB_multitexture = false
  }
  if pMultiTexCoord4fARB = (C.PMULTITEXCOORD4FARB)(getProcAddr("glMultiTexCoord4fARB")); pMultiTexCoord4fARB == nil {
    ARB_multitexture = false
  }
  if pMultiTexCoord4fvARB = (C.PMULTITEXCOORD4FVARB)(getProcAddr("glMultiTexCoord4fvARB")); pMultiTexCoord4fvARB == nil {
    ARB_multitexture = false
  }
  if pMultiTexCoord4hNV = (C.PMULTITEXCOORD4HNV)(getProcAddr("glMultiTexCoord4hNV")); pMultiTexCoord4hNV == nil {
    NV_half_float = false
  }
  if pMultiTexCoord4hvNV = (C.PMULTITEXCOORD4HVNV)(getProcAddr("glMultiTexCoord4hvNV")); pMultiTexCoord4hvNV == nil {
    NV_half_float = false
  }
  if pMultiTexCoord4iARB = (C.PMULTITEXCOORD4IARB)(getProcAddr("glMultiTexCoord4iARB")); pMultiTexCoord4iARB == nil {
    ARB_multitexture = false
  }
  if pMultiTexCoord4ivARB = (C.PMULTITEXCOORD4IVARB)(getProcAddr("glMultiTexCoord4ivARB")); pMultiTexCoord4ivARB == nil {
    ARB_multitexture = false
  }
  if pMultiTexCoord4sARB = (C.PMULTITEXCOORD4SARB)(getProcAddr("glMultiTexCoord4sARB")); pMultiTexCoord4sARB == nil {
    ARB_multitexture = false
  }
  if pMultiTexCoord4svARB = (C.PMULTITEXCOORD4SVARB)(getProcAddr("glMultiTexCoord4svARB")); pMultiTexCoord4svARB == nil {
    ARB_multitexture = false
  }
  if pMultiTexCoord4xOES = (C.PMULTITEXCOORD4XOES)(getProcAddr("glMultiTexCoord4xOES")); pMultiTexCoord4xOES == nil {
    OES_fixed_point = false
  }
  if pMultiTexCoord4xvOES = (C.PMULTITEXCOORD4XVOES)(getProcAddr("glMultiTexCoord4xvOES")); pMultiTexCoord4xvOES == nil {
    OES_fixed_point = false
  }
  if pMultiTexCoordPointerEXT = (C.PMULTITEXCOORDPOINTEREXT)(getProcAddr("glMultiTexCoordPointerEXT")); pMultiTexCoordPointerEXT == nil {
    EXT_direct_state_access = false
  }
  if pMultiTexEnvfEXT = (C.PMULTITEXENVFEXT)(getProcAddr("glMultiTexEnvfEXT")); pMultiTexEnvfEXT == nil {
    EXT_direct_state_access = false
  }
  if pMultiTexEnvfvEXT = (C.PMULTITEXENVFVEXT)(getProcAddr("glMultiTexEnvfvEXT")); pMultiTexEnvfvEXT == nil {
    EXT_direct_state_access = false
  }
  if pMultiTexEnviEXT = (C.PMULTITEXENVIEXT)(getProcAddr("glMultiTexEnviEXT")); pMultiTexEnviEXT == nil {
    EXT_direct_state_access = false
  }
  if pMultiTexEnvivEXT = (C.PMULTITEXENVIVEXT)(getProcAddr("glMultiTexEnvivEXT")); pMultiTexEnvivEXT == nil {
    EXT_direct_state_access = false
  }
  if pMultiTexGendEXT = (C.PMULTITEXGENDEXT)(getProcAddr("glMultiTexGendEXT")); pMultiTexGendEXT == nil {
    EXT_direct_state_access = false
  }
  if pMultiTexGendvEXT = (C.PMULTITEXGENDVEXT)(getProcAddr("glMultiTexGendvEXT")); pMultiTexGendvEXT == nil {
    EXT_direct_state_access = false
  }
  if pMultiTexGenfEXT = (C.PMULTITEXGENFEXT)(getProcAddr("glMultiTexGenfEXT")); pMultiTexGenfEXT == nil {
    EXT_direct_state_access = false
  }
  if pMultiTexGenfvEXT = (C.PMULTITEXGENFVEXT)(getProcAddr("glMultiTexGenfvEXT")); pMultiTexGenfvEXT == nil {
    EXT_direct_state_access = false
  }
  if pMultiTexGeniEXT = (C.PMULTITEXGENIEXT)(getProcAddr("glMultiTexGeniEXT")); pMultiTexGeniEXT == nil {
    EXT_direct_state_access = false
  }
  if pMultiTexGenivEXT = (C.PMULTITEXGENIVEXT)(getProcAddr("glMultiTexGenivEXT")); pMultiTexGenivEXT == nil {
    EXT_direct_state_access = false
  }
  if pMultiTexImage1DEXT = (C.PMULTITEXIMAGE1DEXT)(getProcAddr("glMultiTexImage1DEXT")); pMultiTexImage1DEXT == nil {
    EXT_direct_state_access = false
  }
  if pMultiTexImage2DEXT = (C.PMULTITEXIMAGE2DEXT)(getProcAddr("glMultiTexImage2DEXT")); pMultiTexImage2DEXT == nil {
    EXT_direct_state_access = false
  }
  if pMultiTexImage3DEXT = (C.PMULTITEXIMAGE3DEXT)(getProcAddr("glMultiTexImage3DEXT")); pMultiTexImage3DEXT == nil {
    EXT_direct_state_access = false
  }
  if pMultiTexParameterIivEXT = (C.PMULTITEXPARAMETERIIVEXT)(getProcAddr("glMultiTexParameterIivEXT")); pMultiTexParameterIivEXT == nil {
    EXT_direct_state_access = false
  }
  if pMultiTexParameterIuivEXT = (C.PMULTITEXPARAMETERIUIVEXT)(getProcAddr("glMultiTexParameterIuivEXT")); pMultiTexParameterIuivEXT == nil {
    EXT_direct_state_access = false
  }
  if pMultiTexParameterfEXT = (C.PMULTITEXPARAMETERFEXT)(getProcAddr("glMultiTexParameterfEXT")); pMultiTexParameterfEXT == nil {
    EXT_direct_state_access = false
  }
  if pMultiTexParameterfvEXT = (C.PMULTITEXPARAMETERFVEXT)(getProcAddr("glMultiTexParameterfvEXT")); pMultiTexParameterfvEXT == nil {
    EXT_direct_state_access = false
  }
  if pMultiTexParameteriEXT = (C.PMULTITEXPARAMETERIEXT)(getProcAddr("glMultiTexParameteriEXT")); pMultiTexParameteriEXT == nil {
    EXT_direct_state_access = false
  }
  if pMultiTexParameterivEXT = (C.PMULTITEXPARAMETERIVEXT)(getProcAddr("glMultiTexParameterivEXT")); pMultiTexParameterivEXT == nil {
    EXT_direct_state_access = false
  }
  if pMultiTexRenderbufferEXT = (C.PMULTITEXRENDERBUFFEREXT)(getProcAddr("glMultiTexRenderbufferEXT")); pMultiTexRenderbufferEXT == nil {
    EXT_direct_state_access = false
  }
  if pMultiTexSubImage1DEXT = (C.PMULTITEXSUBIMAGE1DEXT)(getProcAddr("glMultiTexSubImage1DEXT")); pMultiTexSubImage1DEXT == nil {
    EXT_direct_state_access = false
  }
  if pMultiTexSubImage2DEXT = (C.PMULTITEXSUBIMAGE2DEXT)(getProcAddr("glMultiTexSubImage2DEXT")); pMultiTexSubImage2DEXT == nil {
    EXT_direct_state_access = false
  }
  if pMultiTexSubImage3DEXT = (C.PMULTITEXSUBIMAGE3DEXT)(getProcAddr("glMultiTexSubImage3DEXT")); pMultiTexSubImage3DEXT == nil {
    EXT_direct_state_access = false
  }
  if pNamedBufferDataEXT = (C.PNAMEDBUFFERDATAEXT)(getProcAddr("glNamedBufferDataEXT")); pNamedBufferDataEXT == nil {
    EXT_direct_state_access = false
  }
  if pNamedBufferStorageEXT = (C.PNAMEDBUFFERSTORAGEEXT)(getProcAddr("glNamedBufferStorageEXT")); pNamedBufferStorageEXT == nil {
    EXT_direct_state_access = false
  }
  if pNamedBufferSubDataEXT = (C.PNAMEDBUFFERSUBDATAEXT)(getProcAddr("glNamedBufferSubDataEXT")); pNamedBufferSubDataEXT == nil {
    EXT_direct_state_access = false
  }
  if pNamedCopyBufferSubDataEXT = (C.PNAMEDCOPYBUFFERSUBDATAEXT)(getProcAddr("glNamedCopyBufferSubDataEXT")); pNamedCopyBufferSubDataEXT == nil {
    EXT_direct_state_access = false
  }
  if pNamedFramebufferParameteriEXT = (C.PNAMEDFRAMEBUFFERPARAMETERIEXT)(getProcAddr("glNamedFramebufferParameteriEXT")); pNamedFramebufferParameteriEXT == nil {
    EXT_direct_state_access = false
  }
  if pNamedFramebufferRenderbufferEXT = (C.PNAMEDFRAMEBUFFERRENDERBUFFEREXT)(getProcAddr("glNamedFramebufferRenderbufferEXT")); pNamedFramebufferRenderbufferEXT == nil {
    EXT_direct_state_access = false
  }
  if pNamedFramebufferTexture1DEXT = (C.PNAMEDFRAMEBUFFERTEXTURE1DEXT)(getProcAddr("glNamedFramebufferTexture1DEXT")); pNamedFramebufferTexture1DEXT == nil {
    EXT_direct_state_access = false
  }
  if pNamedFramebufferTexture2DEXT = (C.PNAMEDFRAMEBUFFERTEXTURE2DEXT)(getProcAddr("glNamedFramebufferTexture2DEXT")); pNamedFramebufferTexture2DEXT == nil {
    EXT_direct_state_access = false
  }
  if pNamedFramebufferTexture3DEXT = (C.PNAMEDFRAMEBUFFERTEXTURE3DEXT)(getProcAddr("glNamedFramebufferTexture3DEXT")); pNamedFramebufferTexture3DEXT == nil {
    EXT_direct_state_access = false
  }
  if pNamedFramebufferTextureEXT = (C.PNAMEDFRAMEBUFFERTEXTUREEXT)(getProcAddr("glNamedFramebufferTextureEXT")); pNamedFramebufferTextureEXT == nil {
    EXT_direct_state_access = false
  }
  if pNamedFramebufferTextureFaceEXT = (C.PNAMEDFRAMEBUFFERTEXTUREFACEEXT)(getProcAddr("glNamedFramebufferTextureFaceEXT")); pNamedFramebufferTextureFaceEXT == nil {
    EXT_direct_state_access = false
  }
  if pNamedFramebufferTextureLayerEXT = (C.PNAMEDFRAMEBUFFERTEXTURELAYEREXT)(getProcAddr("glNamedFramebufferTextureLayerEXT")); pNamedFramebufferTextureLayerEXT == nil {
    EXT_direct_state_access = false
  }
  if pNamedProgramLocalParameter4dEXT = (C.PNAMEDPROGRAMLOCALPARAMETER4DEXT)(getProcAddr("glNamedProgramLocalParameter4dEXT")); pNamedProgramLocalParameter4dEXT == nil {
    EXT_direct_state_access = false
  }
  if pNamedProgramLocalParameter4dvEXT = (C.PNAMEDPROGRAMLOCALPARAMETER4DVEXT)(getProcAddr("glNamedProgramLocalParameter4dvEXT")); pNamedProgramLocalParameter4dvEXT == nil {
    EXT_direct_state_access = false
  }
  if pNamedProgramLocalParameter4fEXT = (C.PNAMEDPROGRAMLOCALPARAMETER4FEXT)(getProcAddr("glNamedProgramLocalParameter4fEXT")); pNamedProgramLocalParameter4fEXT == nil {
    EXT_direct_state_access = false
  }
  if pNamedProgramLocalParameter4fvEXT = (C.PNAMEDPROGRAMLOCALPARAMETER4FVEXT)(getProcAddr("glNamedProgramLocalParameter4fvEXT")); pNamedProgramLocalParameter4fvEXT == nil {
    EXT_direct_state_access = false
  }
  if pNamedProgramLocalParameterI4iEXT = (C.PNAMEDPROGRAMLOCALPARAMETERI4IEXT)(getProcAddr("glNamedProgramLocalParameterI4iEXT")); pNamedProgramLocalParameterI4iEXT == nil {
    EXT_direct_state_access = false
  }
  if pNamedProgramLocalParameterI4ivEXT = (C.PNAMEDPROGRAMLOCALPARAMETERI4IVEXT)(getProcAddr("glNamedProgramLocalParameterI4ivEXT")); pNamedProgramLocalParameterI4ivEXT == nil {
    EXT_direct_state_access = false
  }
  if pNamedProgramLocalParameterI4uiEXT = (C.PNAMEDPROGRAMLOCALPARAMETERI4UIEXT)(getProcAddr("glNamedProgramLocalParameterI4uiEXT")); pNamedProgramLocalParameterI4uiEXT == nil {
    EXT_direct_state_access = false
  }
  if pNamedProgramLocalParameterI4uivEXT = (C.PNAMEDPROGRAMLOCALPARAMETERI4UIVEXT)(getProcAddr("glNamedProgramLocalParameterI4uivEXT")); pNamedProgramLocalParameterI4uivEXT == nil {
    EXT_direct_state_access = false
  }
  if pNamedProgramLocalParameters4fvEXT = (C.PNAMEDPROGRAMLOCALPARAMETERS4FVEXT)(getProcAddr("glNamedProgramLocalParameters4fvEXT")); pNamedProgramLocalParameters4fvEXT == nil {
    EXT_direct_state_access = false
  }
  if pNamedProgramLocalParametersI4ivEXT = (C.PNAMEDPROGRAMLOCALPARAMETERSI4IVEXT)(getProcAddr("glNamedProgramLocalParametersI4ivEXT")); pNamedProgramLocalParametersI4ivEXT == nil {
    EXT_direct_state_access = false
  }
  if pNamedProgramLocalParametersI4uivEXT = (C.PNAMEDPROGRAMLOCALPARAMETERSI4UIVEXT)(getProcAddr("glNamedProgramLocalParametersI4uivEXT")); pNamedProgramLocalParametersI4uivEXT == nil {
    EXT_direct_state_access = false
  }
  if pNamedProgramStringEXT = (C.PNAMEDPROGRAMSTRINGEXT)(getProcAddr("glNamedProgramStringEXT")); pNamedProgramStringEXT == nil {
    EXT_direct_state_access = false
  }
  if pNamedRenderbufferStorageEXT = (C.PNAMEDRENDERBUFFERSTORAGEEXT)(getProcAddr("glNamedRenderbufferStorageEXT")); pNamedRenderbufferStorageEXT == nil {
    EXT_direct_state_access = false
  }
  if pNamedRenderbufferStorageMultisampleCoverageEXT = (C.PNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXT)(getProcAddr("glNamedRenderbufferStorageMultisampleCoverageEXT")); pNamedRenderbufferStorageMultisampleCoverageEXT == nil {
    EXT_direct_state_access = false
  }
  if pNamedRenderbufferStorageMultisampleEXT = (C.PNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXT)(getProcAddr("glNamedRenderbufferStorageMultisampleEXT")); pNamedRenderbufferStorageMultisampleEXT == nil {
    EXT_direct_state_access = false
  }
  if pNamedStringARB = (C.PNAMEDSTRINGARB)(getProcAddr("glNamedStringARB")); pNamedStringARB == nil {
    ARB_shading_language_include = false
  }
  if pNewObjectBufferATI = (C.PNEWOBJECTBUFFERATI)(getProcAddr("glNewObjectBufferATI")); pNewObjectBufferATI == nil {
    ATI_vertex_array_object = false
  }
  if pNormal3fVertex3fSUN = (C.PNORMAL3FVERTEX3FSUN)(getProcAddr("glNormal3fVertex3fSUN")); pNormal3fVertex3fSUN == nil {
    SUN_vertex = false
  }
  if pNormal3fVertex3fvSUN = (C.PNORMAL3FVERTEX3FVSUN)(getProcAddr("glNormal3fVertex3fvSUN")); pNormal3fVertex3fvSUN == nil {
    SUN_vertex = false
  }
  if pNormal3hNV = (C.PNORMAL3HNV)(getProcAddr("glNormal3hNV")); pNormal3hNV == nil {
    NV_half_float = false
  }
  if pNormal3hvNV = (C.PNORMAL3HVNV)(getProcAddr("glNormal3hvNV")); pNormal3hvNV == nil {
    NV_half_float = false
  }
  if pNormal3xOES = (C.PNORMAL3XOES)(getProcAddr("glNormal3xOES")); pNormal3xOES == nil {
    OES_fixed_point = false
  }
  if pNormal3xvOES = (C.PNORMAL3XVOES)(getProcAddr("glNormal3xvOES")); pNormal3xvOES == nil {
    OES_fixed_point = false
  }
  if pNormalFormatNV = (C.PNORMALFORMATNV)(getProcAddr("glNormalFormatNV")); pNormalFormatNV == nil {
    NV_vertex_buffer_unified_memory = false
  }
  if pNormalPointerEXT = (C.PNORMALPOINTEREXT)(getProcAddr("glNormalPointerEXT")); pNormalPointerEXT == nil {
    EXT_vertex_array = false
  }
  if pNormalPointerListIBM = (C.PNORMALPOINTERLISTIBM)(getProcAddr("glNormalPointerListIBM")); pNormalPointerListIBM == nil {
    IBM_vertex_array_lists = false
  }
  if pNormalPointervINTEL = (C.PNORMALPOINTERVINTEL)(getProcAddr("glNormalPointervINTEL")); pNormalPointervINTEL == nil {
    INTEL_parallel_arrays = false
  }
  if pNormalStream3bATI = (C.PNORMALSTREAM3BATI)(getProcAddr("glNormalStream3bATI")); pNormalStream3bATI == nil {
    ATI_vertex_streams = false
  }
  if pNormalStream3bvATI = (C.PNORMALSTREAM3BVATI)(getProcAddr("glNormalStream3bvATI")); pNormalStream3bvATI == nil {
    ATI_vertex_streams = false
  }
  if pNormalStream3dATI = (C.PNORMALSTREAM3DATI)(getProcAddr("glNormalStream3dATI")); pNormalStream3dATI == nil {
    ATI_vertex_streams = false
  }
  if pNormalStream3dvATI = (C.PNORMALSTREAM3DVATI)(getProcAddr("glNormalStream3dvATI")); pNormalStream3dvATI == nil {
    ATI_vertex_streams = false
  }
  if pNormalStream3fATI = (C.PNORMALSTREAM3FATI)(getProcAddr("glNormalStream3fATI")); pNormalStream3fATI == nil {
    ATI_vertex_streams = false
  }
  if pNormalStream3fvATI = (C.PNORMALSTREAM3FVATI)(getProcAddr("glNormalStream3fvATI")); pNormalStream3fvATI == nil {
    ATI_vertex_streams = false
  }
  if pNormalStream3iATI = (C.PNORMALSTREAM3IATI)(getProcAddr("glNormalStream3iATI")); pNormalStream3iATI == nil {
    ATI_vertex_streams = false
  }
  if pNormalStream3ivATI = (C.PNORMALSTREAM3IVATI)(getProcAddr("glNormalStream3ivATI")); pNormalStream3ivATI == nil {
    ATI_vertex_streams = false
  }
  if pNormalStream3sATI = (C.PNORMALSTREAM3SATI)(getProcAddr("glNormalStream3sATI")); pNormalStream3sATI == nil {
    ATI_vertex_streams = false
  }
  if pNormalStream3svATI = (C.PNORMALSTREAM3SVATI)(getProcAddr("glNormalStream3svATI")); pNormalStream3svATI == nil {
    ATI_vertex_streams = false
  }
  if pObjectLabel = (C.POBJECTLABEL)(getProcAddr("glObjectLabel")); pObjectLabel == nil {
    KHR_debug = false
  }
  if pObjectLabelKHR = (C.POBJECTLABELKHR)(getProcAddr("glObjectLabelKHR")); pObjectLabelKHR == nil {
    KHR_debug = false
  }
  if pObjectPtrLabel = (C.POBJECTPTRLABEL)(getProcAddr("glObjectPtrLabel")); pObjectPtrLabel == nil {
    KHR_debug = false
  }
  if pObjectPtrLabelKHR = (C.POBJECTPTRLABELKHR)(getProcAddr("glObjectPtrLabelKHR")); pObjectPtrLabelKHR == nil {
    KHR_debug = false
  }
  if pObjectPurgeableAPPLE = (C.POBJECTPURGEABLEAPPLE)(getProcAddr("glObjectPurgeableAPPLE")); pObjectPurgeableAPPLE == nil {
    APPLE_object_purgeable = false
  }
  if pObjectUnpurgeableAPPLE = (C.POBJECTUNPURGEABLEAPPLE)(getProcAddr("glObjectUnpurgeableAPPLE")); pObjectUnpurgeableAPPLE == nil {
    APPLE_object_purgeable = false
  }
  if pOrthofOES = (C.PORTHOFOES)(getProcAddr("glOrthofOES")); pOrthofOES == nil {
    OES_single_precision = false
  }
  if pOrthoxOES = (C.PORTHOXOES)(getProcAddr("glOrthoxOES")); pOrthoxOES == nil {
    OES_fixed_point = false
  }
  if pPNTrianglesfATI = (C.PPNTRIANGLESFATI)(getProcAddr("glPNTrianglesfATI")); pPNTrianglesfATI == nil {
    ATI_pn_triangles = false
  }
  if pPNTrianglesiATI = (C.PPNTRIANGLESIATI)(getProcAddr("glPNTrianglesiATI")); pPNTrianglesiATI == nil {
    ATI_pn_triangles = false
  }
  if pPassTexCoordATI = (C.PPASSTEXCOORDATI)(getProcAddr("glPassTexCoordATI")); pPassTexCoordATI == nil {
    ATI_fragment_shader = false
  }
  if pPassThroughxOES = (C.PPASSTHROUGHXOES)(getProcAddr("glPassThroughxOES")); pPassThroughxOES == nil {
    OES_fixed_point = false
  }
  if pPatchParameterfv = (C.PPATCHPARAMETERFV)(getProcAddr("glPatchParameterfv")); pPatchParameterfv == nil {
    ARB_tessellation_shader = false
    return errors.New("glPatchParameterfv")
  }
  if pPatchParameteri = (C.PPATCHPARAMETERI)(getProcAddr("glPatchParameteri")); pPatchParameteri == nil {
    ARB_tessellation_shader = false
    return errors.New("glPatchParameteri")
  }
  if pPathColorGenNV = (C.PPATHCOLORGENNV)(getProcAddr("glPathColorGenNV")); pPathColorGenNV == nil {
    NV_path_rendering = false
  }
  if pPathCommandsNV = (C.PPATHCOMMANDSNV)(getProcAddr("glPathCommandsNV")); pPathCommandsNV == nil {
    NV_path_rendering = false
  }
  if pPathCoordsNV = (C.PPATHCOORDSNV)(getProcAddr("glPathCoordsNV")); pPathCoordsNV == nil {
    NV_path_rendering = false
  }
  if pPathCoverDepthFuncNV = (C.PPATHCOVERDEPTHFUNCNV)(getProcAddr("glPathCoverDepthFuncNV")); pPathCoverDepthFuncNV == nil {
    NV_path_rendering = false
  }
  if pPathDashArrayNV = (C.PPATHDASHARRAYNV)(getProcAddr("glPathDashArrayNV")); pPathDashArrayNV == nil {
    NV_path_rendering = false
  }
  if pPathFogGenNV = (C.PPATHFOGGENNV)(getProcAddr("glPathFogGenNV")); pPathFogGenNV == nil {
    NV_path_rendering = false
  }
  if pPathGlyphRangeNV = (C.PPATHGLYPHRANGENV)(getProcAddr("glPathGlyphRangeNV")); pPathGlyphRangeNV == nil {
    NV_path_rendering = false
  }
  if pPathGlyphsNV = (C.PPATHGLYPHSNV)(getProcAddr("glPathGlyphsNV")); pPathGlyphsNV == nil {
    NV_path_rendering = false
  }
  if pPathParameterfNV = (C.PPATHPARAMETERFNV)(getProcAddr("glPathParameterfNV")); pPathParameterfNV == nil {
    NV_path_rendering = false
  }
  if pPathParameterfvNV = (C.PPATHPARAMETERFVNV)(getProcAddr("glPathParameterfvNV")); pPathParameterfvNV == nil {
    NV_path_rendering = false
  }
  if pPathParameteriNV = (C.PPATHPARAMETERINV)(getProcAddr("glPathParameteriNV")); pPathParameteriNV == nil {
    NV_path_rendering = false
  }
  if pPathParameterivNV = (C.PPATHPARAMETERIVNV)(getProcAddr("glPathParameterivNV")); pPathParameterivNV == nil {
    NV_path_rendering = false
  }
  if pPathStencilDepthOffsetNV = (C.PPATHSTENCILDEPTHOFFSETNV)(getProcAddr("glPathStencilDepthOffsetNV")); pPathStencilDepthOffsetNV == nil {
    NV_path_rendering = false
  }
  if pPathStencilFuncNV = (C.PPATHSTENCILFUNCNV)(getProcAddr("glPathStencilFuncNV")); pPathStencilFuncNV == nil {
    NV_path_rendering = false
  }
  if pPathStringNV = (C.PPATHSTRINGNV)(getProcAddr("glPathStringNV")); pPathStringNV == nil {
    NV_path_rendering = false
  }
  if pPathSubCommandsNV = (C.PPATHSUBCOMMANDSNV)(getProcAddr("glPathSubCommandsNV")); pPathSubCommandsNV == nil {
    NV_path_rendering = false
  }
  if pPathSubCoordsNV = (C.PPATHSUBCOORDSNV)(getProcAddr("glPathSubCoordsNV")); pPathSubCoordsNV == nil {
    NV_path_rendering = false
  }
  if pPathTexGenNV = (C.PPATHTEXGENNV)(getProcAddr("glPathTexGenNV")); pPathTexGenNV == nil {
    NV_path_rendering = false
  }
  if pPauseTransformFeedback = (C.PPAUSETRANSFORMFEEDBACK)(getProcAddr("glPauseTransformFeedback")); pPauseTransformFeedback == nil {
    ARB_transform_feedback2 = false
    return errors.New("glPauseTransformFeedback")
  }
  if pPauseTransformFeedbackNV = (C.PPAUSETRANSFORMFEEDBACKNV)(getProcAddr("glPauseTransformFeedbackNV")); pPauseTransformFeedbackNV == nil {
    NV_transform_feedback2 = false
  }
  if pPixelDataRangeNV = (C.PPIXELDATARANGENV)(getProcAddr("glPixelDataRangeNV")); pPixelDataRangeNV == nil {
    NV_pixel_data_range = false
  }
  if pPixelMapx = (C.PPIXELMAPX)(getProcAddr("glPixelMapx")); pPixelMapx == nil {
    OES_fixed_point = false
  }
  if pPixelStoref = (C.PPIXELSTOREF)(getProcAddr("glPixelStoref")); pPixelStoref == nil {
    return errors.New("glPixelStoref")
  }
  if pPixelStorei = (C.PPIXELSTOREI)(getProcAddr("glPixelStorei")); pPixelStorei == nil {
    return errors.New("glPixelStorei")
  }
  if pPixelStorex = (C.PPIXELSTOREX)(getProcAddr("glPixelStorex")); pPixelStorex == nil {
    OES_fixed_point = false
  }
  if pPixelTexGenParameterfSGIS = (C.PPIXELTEXGENPARAMETERFSGIS)(getProcAddr("glPixelTexGenParameterfSGIS")); pPixelTexGenParameterfSGIS == nil {
    SGIS_pixel_texture = false
  }
  if pPixelTexGenParameterfvSGIS = (C.PPIXELTEXGENPARAMETERFVSGIS)(getProcAddr("glPixelTexGenParameterfvSGIS")); pPixelTexGenParameterfvSGIS == nil {
    SGIS_pixel_texture = false
  }
  if pPixelTexGenParameteriSGIS = (C.PPIXELTEXGENPARAMETERISGIS)(getProcAddr("glPixelTexGenParameteriSGIS")); pPixelTexGenParameteriSGIS == nil {
    SGIS_pixel_texture = false
  }
  if pPixelTexGenParameterivSGIS = (C.PPIXELTEXGENPARAMETERIVSGIS)(getProcAddr("glPixelTexGenParameterivSGIS")); pPixelTexGenParameterivSGIS == nil {
    SGIS_pixel_texture = false
  }
  if pPixelTexGenSGIX = (C.PPIXELTEXGENSGIX)(getProcAddr("glPixelTexGenSGIX")); pPixelTexGenSGIX == nil {
    SGIX_pixel_texture = false
  }
  if pPixelTransferxOES = (C.PPIXELTRANSFERXOES)(getProcAddr("glPixelTransferxOES")); pPixelTransferxOES == nil {
    OES_fixed_point = false
  }
  if pPixelTransformParameterfEXT = (C.PPIXELTRANSFORMPARAMETERFEXT)(getProcAddr("glPixelTransformParameterfEXT")); pPixelTransformParameterfEXT == nil {
    EXT_pixel_transform = false
  }
  if pPixelTransformParameterfvEXT = (C.PPIXELTRANSFORMPARAMETERFVEXT)(getProcAddr("glPixelTransformParameterfvEXT")); pPixelTransformParameterfvEXT == nil {
    EXT_pixel_transform = false
  }
  if pPixelTransformParameteriEXT = (C.PPIXELTRANSFORMPARAMETERIEXT)(getProcAddr("glPixelTransformParameteriEXT")); pPixelTransformParameteriEXT == nil {
    EXT_pixel_transform = false
  }
  if pPixelTransformParameterivEXT = (C.PPIXELTRANSFORMPARAMETERIVEXT)(getProcAddr("glPixelTransformParameterivEXT")); pPixelTransformParameterivEXT == nil {
    EXT_pixel_transform = false
  }
  if pPixelZoomxOES = (C.PPIXELZOOMXOES)(getProcAddr("glPixelZoomxOES")); pPixelZoomxOES == nil {
    OES_fixed_point = false
  }
  if pPointAlongPathNV = (C.PPOINTALONGPATHNV)(getProcAddr("glPointAlongPathNV")); pPointAlongPathNV == nil {
    NV_path_rendering = false
  }
  if pPointParameterf = (C.PPOINTPARAMETERF)(getProcAddr("glPointParameterf")); pPointParameterf == nil {
    return errors.New("glPointParameterf")
  }
  if pPointParameterfARB = (C.PPOINTPARAMETERFARB)(getProcAddr("glPointParameterfARB")); pPointParameterfARB == nil {
    ARB_point_parameters = false
  }
  if pPointParameterfEXT = (C.PPOINTPARAMETERFEXT)(getProcAddr("glPointParameterfEXT")); pPointParameterfEXT == nil {
    EXT_point_parameters = false
  }
  if pPointParameterfSGIS = (C.PPOINTPARAMETERFSGIS)(getProcAddr("glPointParameterfSGIS")); pPointParameterfSGIS == nil {
    SGIS_point_parameters = false
  }
  if pPointParameterfv = (C.PPOINTPARAMETERFV)(getProcAddr("glPointParameterfv")); pPointParameterfv == nil {
    return errors.New("glPointParameterfv")
  }
  if pPointParameterfvARB = (C.PPOINTPARAMETERFVARB)(getProcAddr("glPointParameterfvARB")); pPointParameterfvARB == nil {
    ARB_point_parameters = false
  }
  if pPointParameterfvEXT = (C.PPOINTPARAMETERFVEXT)(getProcAddr("glPointParameterfvEXT")); pPointParameterfvEXT == nil {
    EXT_point_parameters = false
  }
  if pPointParameterfvSGIS = (C.PPOINTPARAMETERFVSGIS)(getProcAddr("glPointParameterfvSGIS")); pPointParameterfvSGIS == nil {
    SGIS_point_parameters = false
  }
  if pPointParameteri = (C.PPOINTPARAMETERI)(getProcAddr("glPointParameteri")); pPointParameteri == nil {
    return errors.New("glPointParameteri")
  }
  if pPointParameteriNV = (C.PPOINTPARAMETERINV)(getProcAddr("glPointParameteriNV")); pPointParameteriNV == nil {
    NV_point_sprite = false
  }
  if pPointParameteriv = (C.PPOINTPARAMETERIV)(getProcAddr("glPointParameteriv")); pPointParameteriv == nil {
    return errors.New("glPointParameteriv")
  }
  if pPointParameterivNV = (C.PPOINTPARAMETERIVNV)(getProcAddr("glPointParameterivNV")); pPointParameterivNV == nil {
    NV_point_sprite = false
  }
  if pPointParameterxOES = (C.PPOINTPARAMETERXOES)(getProcAddr("glPointParameterxOES")); pPointParameterxOES == nil {
    OES_fixed_point = false
  }
  if pPointParameterxvOES = (C.PPOINTPARAMETERXVOES)(getProcAddr("glPointParameterxvOES")); pPointParameterxvOES == nil {
    OES_fixed_point = false
  }
  if pPointSize = (C.PPOINTSIZE)(getProcAddr("glPointSize")); pPointSize == nil {
    return errors.New("glPointSize")
  }
  if pPointSizexOES = (C.PPOINTSIZEXOES)(getProcAddr("glPointSizexOES")); pPointSizexOES == nil {
    OES_fixed_point = false
  }
  if pPollAsyncSGIX = (C.PPOLLASYNCSGIX)(getProcAddr("glPollAsyncSGIX")); pPollAsyncSGIX == nil {
    SGIX_async = false
  }
  if pPollInstrumentsSGIX = (C.PPOLLINSTRUMENTSSGIX)(getProcAddr("glPollInstrumentsSGIX")); pPollInstrumentsSGIX == nil {
    SGIX_instruments = false
  }
  if pPolygonMode = (C.PPOLYGONMODE)(getProcAddr("glPolygonMode")); pPolygonMode == nil {
    return errors.New("glPolygonMode")
  }
  if pPolygonOffset = (C.PPOLYGONOFFSET)(getProcAddr("glPolygonOffset")); pPolygonOffset == nil {
    return errors.New("glPolygonOffset")
  }
  if pPolygonOffsetEXT = (C.PPOLYGONOFFSETEXT)(getProcAddr("glPolygonOffsetEXT")); pPolygonOffsetEXT == nil {
    EXT_polygon_offset = false
  }
  if pPolygonOffsetxOES = (C.PPOLYGONOFFSETXOES)(getProcAddr("glPolygonOffsetxOES")); pPolygonOffsetxOES == nil {
    OES_fixed_point = false
  }
  if pPopDebugGroup = (C.PPOPDEBUGGROUP)(getProcAddr("glPopDebugGroup")); pPopDebugGroup == nil {
    KHR_debug = false
  }
  if pPopDebugGroupKHR = (C.PPOPDEBUGGROUPKHR)(getProcAddr("glPopDebugGroupKHR")); pPopDebugGroupKHR == nil {
    KHR_debug = false
  }
  if pPopGroupMarkerEXT = (C.PPOPGROUPMARKEREXT)(getProcAddr("glPopGroupMarkerEXT")); pPopGroupMarkerEXT == nil {
    EXT_debug_marker = false
  }
  if pPresentFrameDualFillNV = (C.PPRESENTFRAMEDUALFILLNV)(getProcAddr("glPresentFrameDualFillNV")); pPresentFrameDualFillNV == nil {
    NV_present_video = false
  }
  if pPresentFrameKeyedNV = (C.PPRESENTFRAMEKEYEDNV)(getProcAddr("glPresentFrameKeyedNV")); pPresentFrameKeyedNV == nil {
    NV_present_video = false
  }
  if pPrimitiveRestartIndex = (C.PPRIMITIVERESTARTINDEX)(getProcAddr("glPrimitiveRestartIndex")); pPrimitiveRestartIndex == nil {
    return errors.New("glPrimitiveRestartIndex")
  }
  if pPrimitiveRestartIndexNV = (C.PPRIMITIVERESTARTINDEXNV)(getProcAddr("glPrimitiveRestartIndexNV")); pPrimitiveRestartIndexNV == nil {
    NV_primitive_restart = false
  }
  if pPrimitiveRestartNV = (C.PPRIMITIVERESTARTNV)(getProcAddr("glPrimitiveRestartNV")); pPrimitiveRestartNV == nil {
    NV_primitive_restart = false
  }
  if pPrioritizeTexturesEXT = (C.PPRIORITIZETEXTURESEXT)(getProcAddr("glPrioritizeTexturesEXT")); pPrioritizeTexturesEXT == nil {
    EXT_texture_object = false
  }
  if pPrioritizeTexturesxOES = (C.PPRIORITIZETEXTURESXOES)(getProcAddr("glPrioritizeTexturesxOES")); pPrioritizeTexturesxOES == nil {
    OES_fixed_point = false
  }
  if pProgramBinary = (C.PPROGRAMBINARY)(getProcAddr("glProgramBinary")); pProgramBinary == nil {
    ARB_get_program_binary = false
    return errors.New("glProgramBinary")
  }
  if pProgramBufferParametersIivNV = (C.PPROGRAMBUFFERPARAMETERSIIVNV)(getProcAddr("glProgramBufferParametersIivNV")); pProgramBufferParametersIivNV == nil {
    NV_parameter_buffer_object = false
  }
  if pProgramBufferParametersIuivNV = (C.PPROGRAMBUFFERPARAMETERSIUIVNV)(getProcAddr("glProgramBufferParametersIuivNV")); pProgramBufferParametersIuivNV == nil {
    NV_parameter_buffer_object = false
  }
  if pProgramBufferParametersfvNV = (C.PPROGRAMBUFFERPARAMETERSFVNV)(getProcAddr("glProgramBufferParametersfvNV")); pProgramBufferParametersfvNV == nil {
    NV_parameter_buffer_object = false
  }
  if pProgramEnvParameter4dARB = (C.PPROGRAMENVPARAMETER4DARB)(getProcAddr("glProgramEnvParameter4dARB")); pProgramEnvParameter4dARB == nil {
    ARB_fragment_program = false
    ARB_vertex_program = false
  }
  if pProgramEnvParameter4dvARB = (C.PPROGRAMENVPARAMETER4DVARB)(getProcAddr("glProgramEnvParameter4dvARB")); pProgramEnvParameter4dvARB == nil {
    ARB_fragment_program = false
    ARB_vertex_program = false
  }
  if pProgramEnvParameter4fARB = (C.PPROGRAMENVPARAMETER4FARB)(getProcAddr("glProgramEnvParameter4fARB")); pProgramEnvParameter4fARB == nil {
    ARB_fragment_program = false
    ARB_vertex_program = false
  }
  if pProgramEnvParameter4fvARB = (C.PPROGRAMENVPARAMETER4FVARB)(getProcAddr("glProgramEnvParameter4fvARB")); pProgramEnvParameter4fvARB == nil {
    ARB_fragment_program = false
    ARB_vertex_program = false
  }
  if pProgramEnvParameterI4iNV = (C.PPROGRAMENVPARAMETERI4INV)(getProcAddr("glProgramEnvParameterI4iNV")); pProgramEnvParameterI4iNV == nil {
    NV_gpu_program4 = false
  }
  if pProgramEnvParameterI4ivNV = (C.PPROGRAMENVPARAMETERI4IVNV)(getProcAddr("glProgramEnvParameterI4ivNV")); pProgramEnvParameterI4ivNV == nil {
    NV_gpu_program4 = false
  }
  if pProgramEnvParameterI4uiNV = (C.PPROGRAMENVPARAMETERI4UINV)(getProcAddr("glProgramEnvParameterI4uiNV")); pProgramEnvParameterI4uiNV == nil {
    NV_gpu_program4 = false
  }
  if pProgramEnvParameterI4uivNV = (C.PPROGRAMENVPARAMETERI4UIVNV)(getProcAddr("glProgramEnvParameterI4uivNV")); pProgramEnvParameterI4uivNV == nil {
    NV_gpu_program4 = false
  }
  if pProgramEnvParameters4fvEXT = (C.PPROGRAMENVPARAMETERS4FVEXT)(getProcAddr("glProgramEnvParameters4fvEXT")); pProgramEnvParameters4fvEXT == nil {
    EXT_gpu_program_parameters = false
  }
  if pProgramEnvParametersI4ivNV = (C.PPROGRAMENVPARAMETERSI4IVNV)(getProcAddr("glProgramEnvParametersI4ivNV")); pProgramEnvParametersI4ivNV == nil {
    NV_gpu_program4 = false
  }
  if pProgramEnvParametersI4uivNV = (C.PPROGRAMENVPARAMETERSI4UIVNV)(getProcAddr("glProgramEnvParametersI4uivNV")); pProgramEnvParametersI4uivNV == nil {
    NV_gpu_program4 = false
  }
  if pProgramLocalParameter4dARB = (C.PPROGRAMLOCALPARAMETER4DARB)(getProcAddr("glProgramLocalParameter4dARB")); pProgramLocalParameter4dARB == nil {
    ARB_fragment_program = false
    ARB_vertex_program = false
  }
  if pProgramLocalParameter4dvARB = (C.PPROGRAMLOCALPARAMETER4DVARB)(getProcAddr("glProgramLocalParameter4dvARB")); pProgramLocalParameter4dvARB == nil {
    ARB_fragment_program = false
    ARB_vertex_program = false
  }
  if pProgramLocalParameter4fARB = (C.PPROGRAMLOCALPARAMETER4FARB)(getProcAddr("glProgramLocalParameter4fARB")); pProgramLocalParameter4fARB == nil {
    ARB_fragment_program = false
    ARB_vertex_program = false
  }
  if pProgramLocalParameter4fvARB = (C.PPROGRAMLOCALPARAMETER4FVARB)(getProcAddr("glProgramLocalParameter4fvARB")); pProgramLocalParameter4fvARB == nil {
    ARB_fragment_program = false
    ARB_vertex_program = false
  }
  if pProgramLocalParameterI4iNV = (C.PPROGRAMLOCALPARAMETERI4INV)(getProcAddr("glProgramLocalParameterI4iNV")); pProgramLocalParameterI4iNV == nil {
    NV_gpu_program4 = false
  }
  if pProgramLocalParameterI4ivNV = (C.PPROGRAMLOCALPARAMETERI4IVNV)(getProcAddr("glProgramLocalParameterI4ivNV")); pProgramLocalParameterI4ivNV == nil {
    NV_gpu_program4 = false
  }
  if pProgramLocalParameterI4uiNV = (C.PPROGRAMLOCALPARAMETERI4UINV)(getProcAddr("glProgramLocalParameterI4uiNV")); pProgramLocalParameterI4uiNV == nil {
    NV_gpu_program4 = false
  }
  if pProgramLocalParameterI4uivNV = (C.PPROGRAMLOCALPARAMETERI4UIVNV)(getProcAddr("glProgramLocalParameterI4uivNV")); pProgramLocalParameterI4uivNV == nil {
    NV_gpu_program4 = false
  }
  if pProgramLocalParameters4fvEXT = (C.PPROGRAMLOCALPARAMETERS4FVEXT)(getProcAddr("glProgramLocalParameters4fvEXT")); pProgramLocalParameters4fvEXT == nil {
    EXT_gpu_program_parameters = false
  }
  if pProgramLocalParametersI4ivNV = (C.PPROGRAMLOCALPARAMETERSI4IVNV)(getProcAddr("glProgramLocalParametersI4ivNV")); pProgramLocalParametersI4ivNV == nil {
    NV_gpu_program4 = false
  }
  if pProgramLocalParametersI4uivNV = (C.PPROGRAMLOCALPARAMETERSI4UIVNV)(getProcAddr("glProgramLocalParametersI4uivNV")); pProgramLocalParametersI4uivNV == nil {
    NV_gpu_program4 = false
  }
  if pProgramNamedParameter4dNV = (C.PPROGRAMNAMEDPARAMETER4DNV)(getProcAddr("glProgramNamedParameter4dNV")); pProgramNamedParameter4dNV == nil {
    NV_fragment_program = false
  }
  if pProgramNamedParameter4dvNV = (C.PPROGRAMNAMEDPARAMETER4DVNV)(getProcAddr("glProgramNamedParameter4dvNV")); pProgramNamedParameter4dvNV == nil {
    NV_fragment_program = false
  }
  if pProgramNamedParameter4fNV = (C.PPROGRAMNAMEDPARAMETER4FNV)(getProcAddr("glProgramNamedParameter4fNV")); pProgramNamedParameter4fNV == nil {
    NV_fragment_program = false
  }
  if pProgramNamedParameter4fvNV = (C.PPROGRAMNAMEDPARAMETER4FVNV)(getProcAddr("glProgramNamedParameter4fvNV")); pProgramNamedParameter4fvNV == nil {
    NV_fragment_program = false
  }
  if pProgramParameter4dNV = (C.PPROGRAMPARAMETER4DNV)(getProcAddr("glProgramParameter4dNV")); pProgramParameter4dNV == nil {
    NV_vertex_program = false
  }
  if pProgramParameter4dvNV = (C.PPROGRAMPARAMETER4DVNV)(getProcAddr("glProgramParameter4dvNV")); pProgramParameter4dvNV == nil {
    NV_vertex_program = false
  }
  if pProgramParameter4fNV = (C.PPROGRAMPARAMETER4FNV)(getProcAddr("glProgramParameter4fNV")); pProgramParameter4fNV == nil {
    NV_vertex_program = false
  }
  if pProgramParameter4fvNV = (C.PPROGRAMPARAMETER4FVNV)(getProcAddr("glProgramParameter4fvNV")); pProgramParameter4fvNV == nil {
    NV_vertex_program = false
  }
  if pProgramParameteri = (C.PPROGRAMPARAMETERI)(getProcAddr("glProgramParameteri")); pProgramParameteri == nil {
    ARB_get_program_binary = false
    return errors.New("glProgramParameteri")
  }
  if pProgramParameteriARB = (C.PPROGRAMPARAMETERIARB)(getProcAddr("glProgramParameteriARB")); pProgramParameteriARB == nil {
    ARB_geometry_shader4 = false
  }
  if pProgramParameteriEXT = (C.PPROGRAMPARAMETERIEXT)(getProcAddr("glProgramParameteriEXT")); pProgramParameteriEXT == nil {
    EXT_geometry_shader4 = false
    EXT_separate_shader_objects = false
  }
  if pProgramParameters4dvNV = (C.PPROGRAMPARAMETERS4DVNV)(getProcAddr("glProgramParameters4dvNV")); pProgramParameters4dvNV == nil {
    NV_vertex_program = false
  }
  if pProgramParameters4fvNV = (C.PPROGRAMPARAMETERS4FVNV)(getProcAddr("glProgramParameters4fvNV")); pProgramParameters4fvNV == nil {
    NV_vertex_program = false
  }
  if pProgramStringARB = (C.PPROGRAMSTRINGARB)(getProcAddr("glProgramStringARB")); pProgramStringARB == nil {
    ARB_fragment_program = false
    ARB_vertex_program = false
  }
  if pProgramSubroutineParametersuivNV = (C.PPROGRAMSUBROUTINEPARAMETERSUIVNV)(getProcAddr("glProgramSubroutineParametersuivNV")); pProgramSubroutineParametersuivNV == nil {
    NV_gpu_program5 = false
  }
  if pProgramUniform1d = (C.PPROGRAMUNIFORM1D)(getProcAddr("glProgramUniform1d")); pProgramUniform1d == nil {
    ARB_separate_shader_objects = false
    return errors.New("glProgramUniform1d")
  }
  if pProgramUniform1dEXT = (C.PPROGRAMUNIFORM1DEXT)(getProcAddr("glProgramUniform1dEXT")); pProgramUniform1dEXT == nil {
    EXT_direct_state_access = false
  }
  if pProgramUniform1dv = (C.PPROGRAMUNIFORM1DV)(getProcAddr("glProgramUniform1dv")); pProgramUniform1dv == nil {
    ARB_separate_shader_objects = false
    return errors.New("glProgramUniform1dv")
  }
  if pProgramUniform1dvEXT = (C.PPROGRAMUNIFORM1DVEXT)(getProcAddr("glProgramUniform1dvEXT")); pProgramUniform1dvEXT == nil {
    EXT_direct_state_access = false
  }
  if pProgramUniform1f = (C.PPROGRAMUNIFORM1F)(getProcAddr("glProgramUniform1f")); pProgramUniform1f == nil {
    ARB_separate_shader_objects = false
    return errors.New("glProgramUniform1f")
  }
  if pProgramUniform1fEXT = (C.PPROGRAMUNIFORM1FEXT)(getProcAddr("glProgramUniform1fEXT")); pProgramUniform1fEXT == nil {
    EXT_direct_state_access = false
    EXT_separate_shader_objects = false
  }
  if pProgramUniform1fv = (C.PPROGRAMUNIFORM1FV)(getProcAddr("glProgramUniform1fv")); pProgramUniform1fv == nil {
    ARB_separate_shader_objects = false
    return errors.New("glProgramUniform1fv")
  }
  if pProgramUniform1fvEXT = (C.PPROGRAMUNIFORM1FVEXT)(getProcAddr("glProgramUniform1fvEXT")); pProgramUniform1fvEXT == nil {
    EXT_direct_state_access = false
    EXT_separate_shader_objects = false
  }
  if pProgramUniform1i = (C.PPROGRAMUNIFORM1I)(getProcAddr("glProgramUniform1i")); pProgramUniform1i == nil {
    ARB_separate_shader_objects = false
    return errors.New("glProgramUniform1i")
  }
  if pProgramUniform1i64NV = (C.PPROGRAMUNIFORM1I64NV)(getProcAddr("glProgramUniform1i64NV")); pProgramUniform1i64NV == nil {
    AMD_gpu_shader_int64 = false
    NV_gpu_shader5 = false
  }
  if pProgramUniform1i64vNV = (C.PPROGRAMUNIFORM1I64VNV)(getProcAddr("glProgramUniform1i64vNV")); pProgramUniform1i64vNV == nil {
    AMD_gpu_shader_int64 = false
    NV_gpu_shader5 = false
  }
  if pProgramUniform1iEXT = (C.PPROGRAMUNIFORM1IEXT)(getProcAddr("glProgramUniform1iEXT")); pProgramUniform1iEXT == nil {
    EXT_direct_state_access = false
    EXT_separate_shader_objects = false
  }
  if pProgramUniform1iv = (C.PPROGRAMUNIFORM1IV)(getProcAddr("glProgramUniform1iv")); pProgramUniform1iv == nil {
    ARB_separate_shader_objects = false
    return errors.New("glProgramUniform1iv")
  }
  if pProgramUniform1ivEXT = (C.PPROGRAMUNIFORM1IVEXT)(getProcAddr("glProgramUniform1ivEXT")); pProgramUniform1ivEXT == nil {
    EXT_direct_state_access = false
    EXT_separate_shader_objects = false
  }
  if pProgramUniform1ui = (C.PPROGRAMUNIFORM1UI)(getProcAddr("glProgramUniform1ui")); pProgramUniform1ui == nil {
    ARB_separate_shader_objects = false
    return errors.New("glProgramUniform1ui")
  }
  if pProgramUniform1ui64NV = (C.PPROGRAMUNIFORM1UI64NV)(getProcAddr("glProgramUniform1ui64NV")); pProgramUniform1ui64NV == nil {
    AMD_gpu_shader_int64 = false
    NV_gpu_shader5 = false
  }
  if pProgramUniform1ui64vNV = (C.PPROGRAMUNIFORM1UI64VNV)(getProcAddr("glProgramUniform1ui64vNV")); pProgramUniform1ui64vNV == nil {
    AMD_gpu_shader_int64 = false
    NV_gpu_shader5 = false
  }
  if pProgramUniform1uiEXT = (C.PPROGRAMUNIFORM1UIEXT)(getProcAddr("glProgramUniform1uiEXT")); pProgramUniform1uiEXT == nil {
    EXT_direct_state_access = false
    EXT_separate_shader_objects = false
  }
  if pProgramUniform1uiv = (C.PPROGRAMUNIFORM1UIV)(getProcAddr("glProgramUniform1uiv")); pProgramUniform1uiv == nil {
    ARB_separate_shader_objects = false
    return errors.New("glProgramUniform1uiv")
  }
  if pProgramUniform1uivEXT = (C.PPROGRAMUNIFORM1UIVEXT)(getProcAddr("glProgramUniform1uivEXT")); pProgramUniform1uivEXT == nil {
    EXT_direct_state_access = false
    EXT_separate_shader_objects = false
  }
  if pProgramUniform2d = (C.PPROGRAMUNIFORM2D)(getProcAddr("glProgramUniform2d")); pProgramUniform2d == nil {
    ARB_separate_shader_objects = false
    return errors.New("glProgramUniform2d")
  }
  if pProgramUniform2dEXT = (C.PPROGRAMUNIFORM2DEXT)(getProcAddr("glProgramUniform2dEXT")); pProgramUniform2dEXT == nil {
    EXT_direct_state_access = false
  }
  if pProgramUniform2dv = (C.PPROGRAMUNIFORM2DV)(getProcAddr("glProgramUniform2dv")); pProgramUniform2dv == nil {
    ARB_separate_shader_objects = false
    return errors.New("glProgramUniform2dv")
  }
  if pProgramUniform2dvEXT = (C.PPROGRAMUNIFORM2DVEXT)(getProcAddr("glProgramUniform2dvEXT")); pProgramUniform2dvEXT == nil {
    EXT_direct_state_access = false
  }
  if pProgramUniform2f = (C.PPROGRAMUNIFORM2F)(getProcAddr("glProgramUniform2f")); pProgramUniform2f == nil {
    ARB_separate_shader_objects = false
    return errors.New("glProgramUniform2f")
  }
  if pProgramUniform2fEXT = (C.PPROGRAMUNIFORM2FEXT)(getProcAddr("glProgramUniform2fEXT")); pProgramUniform2fEXT == nil {
    EXT_direct_state_access = false
    EXT_separate_shader_objects = false
  }
  if pProgramUniform2fv = (C.PPROGRAMUNIFORM2FV)(getProcAddr("glProgramUniform2fv")); pProgramUniform2fv == nil {
    ARB_separate_shader_objects = false
    return errors.New("glProgramUniform2fv")
  }
  if pProgramUniform2fvEXT = (C.PPROGRAMUNIFORM2FVEXT)(getProcAddr("glProgramUniform2fvEXT")); pProgramUniform2fvEXT == nil {
    EXT_direct_state_access = false
    EXT_separate_shader_objects = false
  }
  if pProgramUniform2i = (C.PPROGRAMUNIFORM2I)(getProcAddr("glProgramUniform2i")); pProgramUniform2i == nil {
    ARB_separate_shader_objects = false
    return errors.New("glProgramUniform2i")
  }
  if pProgramUniform2i64NV = (C.PPROGRAMUNIFORM2I64NV)(getProcAddr("glProgramUniform2i64NV")); pProgramUniform2i64NV == nil {
    AMD_gpu_shader_int64 = false
    NV_gpu_shader5 = false
  }
  if pProgramUniform2i64vNV = (C.PPROGRAMUNIFORM2I64VNV)(getProcAddr("glProgramUniform2i64vNV")); pProgramUniform2i64vNV == nil {
    AMD_gpu_shader_int64 = false
    NV_gpu_shader5 = false
  }
  if pProgramUniform2iEXT = (C.PPROGRAMUNIFORM2IEXT)(getProcAddr("glProgramUniform2iEXT")); pProgramUniform2iEXT == nil {
    EXT_direct_state_access = false
    EXT_separate_shader_objects = false
  }
  if pProgramUniform2iv = (C.PPROGRAMUNIFORM2IV)(getProcAddr("glProgramUniform2iv")); pProgramUniform2iv == nil {
    ARB_separate_shader_objects = false
    return errors.New("glProgramUniform2iv")
  }
  if pProgramUniform2ivEXT = (C.PPROGRAMUNIFORM2IVEXT)(getProcAddr("glProgramUniform2ivEXT")); pProgramUniform2ivEXT == nil {
    EXT_direct_state_access = false
    EXT_separate_shader_objects = false
  }
  if pProgramUniform2ui = (C.PPROGRAMUNIFORM2UI)(getProcAddr("glProgramUniform2ui")); pProgramUniform2ui == nil {
    ARB_separate_shader_objects = false
    return errors.New("glProgramUniform2ui")
  }
  if pProgramUniform2ui64NV = (C.PPROGRAMUNIFORM2UI64NV)(getProcAddr("glProgramUniform2ui64NV")); pProgramUniform2ui64NV == nil {
    AMD_gpu_shader_int64 = false
    NV_gpu_shader5 = false
  }
  if pProgramUniform2ui64vNV = (C.PPROGRAMUNIFORM2UI64VNV)(getProcAddr("glProgramUniform2ui64vNV")); pProgramUniform2ui64vNV == nil {
    AMD_gpu_shader_int64 = false
    NV_gpu_shader5 = false
  }
  if pProgramUniform2uiEXT = (C.PPROGRAMUNIFORM2UIEXT)(getProcAddr("glProgramUniform2uiEXT")); pProgramUniform2uiEXT == nil {
    EXT_direct_state_access = false
    EXT_separate_shader_objects = false
  }
  if pProgramUniform2uiv = (C.PPROGRAMUNIFORM2UIV)(getProcAddr("glProgramUniform2uiv")); pProgramUniform2uiv == nil {
    ARB_separate_shader_objects = false
    return errors.New("glProgramUniform2uiv")
  }
  if pProgramUniform2uivEXT = (C.PPROGRAMUNIFORM2UIVEXT)(getProcAddr("glProgramUniform2uivEXT")); pProgramUniform2uivEXT == nil {
    EXT_direct_state_access = false
    EXT_separate_shader_objects = false
  }
  if pProgramUniform3d = (C.PPROGRAMUNIFORM3D)(getProcAddr("glProgramUniform3d")); pProgramUniform3d == nil {
    ARB_separate_shader_objects = false
    return errors.New("glProgramUniform3d")
  }
  if pProgramUniform3dEXT = (C.PPROGRAMUNIFORM3DEXT)(getProcAddr("glProgramUniform3dEXT")); pProgramUniform3dEXT == nil {
    EXT_direct_state_access = false
  }
  if pProgramUniform3dv = (C.PPROGRAMUNIFORM3DV)(getProcAddr("glProgramUniform3dv")); pProgramUniform3dv == nil {
    ARB_separate_shader_objects = false
    return errors.New("glProgramUniform3dv")
  }
  if pProgramUniform3dvEXT = (C.PPROGRAMUNIFORM3DVEXT)(getProcAddr("glProgramUniform3dvEXT")); pProgramUniform3dvEXT == nil {
    EXT_direct_state_access = false
  }
  if pProgramUniform3f = (C.PPROGRAMUNIFORM3F)(getProcAddr("glProgramUniform3f")); pProgramUniform3f == nil {
    ARB_separate_shader_objects = false
    return errors.New("glProgramUniform3f")
  }
  if pProgramUniform3fEXT = (C.PPROGRAMUNIFORM3FEXT)(getProcAddr("glProgramUniform3fEXT")); pProgramUniform3fEXT == nil {
    EXT_direct_state_access = false
    EXT_separate_shader_objects = false
  }
  if pProgramUniform3fv = (C.PPROGRAMUNIFORM3FV)(getProcAddr("glProgramUniform3fv")); pProgramUniform3fv == nil {
    ARB_separate_shader_objects = false
    return errors.New("glProgramUniform3fv")
  }
  if pProgramUniform3fvEXT = (C.PPROGRAMUNIFORM3FVEXT)(getProcAddr("glProgramUniform3fvEXT")); pProgramUniform3fvEXT == nil {
    EXT_direct_state_access = false
    EXT_separate_shader_objects = false
  }
  if pProgramUniform3i = (C.PPROGRAMUNIFORM3I)(getProcAddr("glProgramUniform3i")); pProgramUniform3i == nil {
    ARB_separate_shader_objects = false
    return errors.New("glProgramUniform3i")
  }
  if pProgramUniform3i64NV = (C.PPROGRAMUNIFORM3I64NV)(getProcAddr("glProgramUniform3i64NV")); pProgramUniform3i64NV == nil {
    AMD_gpu_shader_int64 = false
    NV_gpu_shader5 = false
  }
  if pProgramUniform3i64vNV = (C.PPROGRAMUNIFORM3I64VNV)(getProcAddr("glProgramUniform3i64vNV")); pProgramUniform3i64vNV == nil {
    AMD_gpu_shader_int64 = false
    NV_gpu_shader5 = false
  }
  if pProgramUniform3iEXT = (C.PPROGRAMUNIFORM3IEXT)(getProcAddr("glProgramUniform3iEXT")); pProgramUniform3iEXT == nil {
    EXT_direct_state_access = false
    EXT_separate_shader_objects = false
  }
  if pProgramUniform3iv = (C.PPROGRAMUNIFORM3IV)(getProcAddr("glProgramUniform3iv")); pProgramUniform3iv == nil {
    ARB_separate_shader_objects = false
    return errors.New("glProgramUniform3iv")
  }
  if pProgramUniform3ivEXT = (C.PPROGRAMUNIFORM3IVEXT)(getProcAddr("glProgramUniform3ivEXT")); pProgramUniform3ivEXT == nil {
    EXT_direct_state_access = false
    EXT_separate_shader_objects = false
  }
  if pProgramUniform3ui = (C.PPROGRAMUNIFORM3UI)(getProcAddr("glProgramUniform3ui")); pProgramUniform3ui == nil {
    ARB_separate_shader_objects = false
    return errors.New("glProgramUniform3ui")
  }
  if pProgramUniform3ui64NV = (C.PPROGRAMUNIFORM3UI64NV)(getProcAddr("glProgramUniform3ui64NV")); pProgramUniform3ui64NV == nil {
    AMD_gpu_shader_int64 = false
    NV_gpu_shader5 = false
  }
  if pProgramUniform3ui64vNV = (C.PPROGRAMUNIFORM3UI64VNV)(getProcAddr("glProgramUniform3ui64vNV")); pProgramUniform3ui64vNV == nil {
    AMD_gpu_shader_int64 = false
    NV_gpu_shader5 = false
  }
  if pProgramUniform3uiEXT = (C.PPROGRAMUNIFORM3UIEXT)(getProcAddr("glProgramUniform3uiEXT")); pProgramUniform3uiEXT == nil {
    EXT_direct_state_access = false
    EXT_separate_shader_objects = false
  }
  if pProgramUniform3uiv = (C.PPROGRAMUNIFORM3UIV)(getProcAddr("glProgramUniform3uiv")); pProgramUniform3uiv == nil {
    ARB_separate_shader_objects = false
    return errors.New("glProgramUniform3uiv")
  }
  if pProgramUniform3uivEXT = (C.PPROGRAMUNIFORM3UIVEXT)(getProcAddr("glProgramUniform3uivEXT")); pProgramUniform3uivEXT == nil {
    EXT_direct_state_access = false
    EXT_separate_shader_objects = false
  }
  if pProgramUniform4d = (C.PPROGRAMUNIFORM4D)(getProcAddr("glProgramUniform4d")); pProgramUniform4d == nil {
    ARB_separate_shader_objects = false
    return errors.New("glProgramUniform4d")
  }
  if pProgramUniform4dEXT = (C.PPROGRAMUNIFORM4DEXT)(getProcAddr("glProgramUniform4dEXT")); pProgramUniform4dEXT == nil {
    EXT_direct_state_access = false
  }
  if pProgramUniform4dv = (C.PPROGRAMUNIFORM4DV)(getProcAddr("glProgramUniform4dv")); pProgramUniform4dv == nil {
    ARB_separate_shader_objects = false
    return errors.New("glProgramUniform4dv")
  }
  if pProgramUniform4dvEXT = (C.PPROGRAMUNIFORM4DVEXT)(getProcAddr("glProgramUniform4dvEXT")); pProgramUniform4dvEXT == nil {
    EXT_direct_state_access = false
  }
  if pProgramUniform4f = (C.PPROGRAMUNIFORM4F)(getProcAddr("glProgramUniform4f")); pProgramUniform4f == nil {
    ARB_separate_shader_objects = false
    return errors.New("glProgramUniform4f")
  }
  if pProgramUniform4fEXT = (C.PPROGRAMUNIFORM4FEXT)(getProcAddr("glProgramUniform4fEXT")); pProgramUniform4fEXT == nil {
    EXT_direct_state_access = false
    EXT_separate_shader_objects = false
  }
  if pProgramUniform4fv = (C.PPROGRAMUNIFORM4FV)(getProcAddr("glProgramUniform4fv")); pProgramUniform4fv == nil {
    ARB_separate_shader_objects = false
    return errors.New("glProgramUniform4fv")
  }
  if pProgramUniform4fvEXT = (C.PPROGRAMUNIFORM4FVEXT)(getProcAddr("glProgramUniform4fvEXT")); pProgramUniform4fvEXT == nil {
    EXT_direct_state_access = false
    EXT_separate_shader_objects = false
  }
  if pProgramUniform4i = (C.PPROGRAMUNIFORM4I)(getProcAddr("glProgramUniform4i")); pProgramUniform4i == nil {
    ARB_separate_shader_objects = false
    return errors.New("glProgramUniform4i")
  }
  if pProgramUniform4i64NV = (C.PPROGRAMUNIFORM4I64NV)(getProcAddr("glProgramUniform4i64NV")); pProgramUniform4i64NV == nil {
    AMD_gpu_shader_int64 = false
    NV_gpu_shader5 = false
  }
  if pProgramUniform4i64vNV = (C.PPROGRAMUNIFORM4I64VNV)(getProcAddr("glProgramUniform4i64vNV")); pProgramUniform4i64vNV == nil {
    AMD_gpu_shader_int64 = false
    NV_gpu_shader5 = false
  }
  if pProgramUniform4iEXT = (C.PPROGRAMUNIFORM4IEXT)(getProcAddr("glProgramUniform4iEXT")); pProgramUniform4iEXT == nil {
    EXT_direct_state_access = false
    EXT_separate_shader_objects = false
  }
  if pProgramUniform4iv = (C.PPROGRAMUNIFORM4IV)(getProcAddr("glProgramUniform4iv")); pProgramUniform4iv == nil {
    ARB_separate_shader_objects = false
    return errors.New("glProgramUniform4iv")
  }
  if pProgramUniform4ivEXT = (C.PPROGRAMUNIFORM4IVEXT)(getProcAddr("glProgramUniform4ivEXT")); pProgramUniform4ivEXT == nil {
    EXT_direct_state_access = false
    EXT_separate_shader_objects = false
  }
  if pProgramUniform4ui = (C.PPROGRAMUNIFORM4UI)(getProcAddr("glProgramUniform4ui")); pProgramUniform4ui == nil {
    ARB_separate_shader_objects = false
    return errors.New("glProgramUniform4ui")
  }
  if pProgramUniform4ui64NV = (C.PPROGRAMUNIFORM4UI64NV)(getProcAddr("glProgramUniform4ui64NV")); pProgramUniform4ui64NV == nil {
    AMD_gpu_shader_int64 = false
    NV_gpu_shader5 = false
  }
  if pProgramUniform4ui64vNV = (C.PPROGRAMUNIFORM4UI64VNV)(getProcAddr("glProgramUniform4ui64vNV")); pProgramUniform4ui64vNV == nil {
    AMD_gpu_shader_int64 = false
    NV_gpu_shader5 = false
  }
  if pProgramUniform4uiEXT = (C.PPROGRAMUNIFORM4UIEXT)(getProcAddr("glProgramUniform4uiEXT")); pProgramUniform4uiEXT == nil {
    EXT_direct_state_access = false
    EXT_separate_shader_objects = false
  }
  if pProgramUniform4uiv = (C.PPROGRAMUNIFORM4UIV)(getProcAddr("glProgramUniform4uiv")); pProgramUniform4uiv == nil {
    ARB_separate_shader_objects = false
    return errors.New("glProgramUniform4uiv")
  }
  if pProgramUniform4uivEXT = (C.PPROGRAMUNIFORM4UIVEXT)(getProcAddr("glProgramUniform4uivEXT")); pProgramUniform4uivEXT == nil {
    EXT_direct_state_access = false
    EXT_separate_shader_objects = false
  }
  if pProgramUniformHandleui64ARB = (C.PPROGRAMUNIFORMHANDLEUI64ARB)(getProcAddr("glProgramUniformHandleui64ARB")); pProgramUniformHandleui64ARB == nil {
    ARB_bindless_texture = false
  }
  if pProgramUniformHandleui64NV = (C.PPROGRAMUNIFORMHANDLEUI64NV)(getProcAddr("glProgramUniformHandleui64NV")); pProgramUniformHandleui64NV == nil {
    NV_bindless_texture = false
  }
  if pProgramUniformHandleui64vARB = (C.PPROGRAMUNIFORMHANDLEUI64VARB)(getProcAddr("glProgramUniformHandleui64vARB")); pProgramUniformHandleui64vARB == nil {
    ARB_bindless_texture = false
  }
  if pProgramUniformHandleui64vNV = (C.PPROGRAMUNIFORMHANDLEUI64VNV)(getProcAddr("glProgramUniformHandleui64vNV")); pProgramUniformHandleui64vNV == nil {
    NV_bindless_texture = false
  }
  if pProgramUniformMatrix2dv = (C.PPROGRAMUNIFORMMATRIX2DV)(getProcAddr("glProgramUniformMatrix2dv")); pProgramUniformMatrix2dv == nil {
    ARB_separate_shader_objects = false
    return errors.New("glProgramUniformMatrix2dv")
  }
  if pProgramUniformMatrix2dvEXT = (C.PPROGRAMUNIFORMMATRIX2DVEXT)(getProcAddr("glProgramUniformMatrix2dvEXT")); pProgramUniformMatrix2dvEXT == nil {
    EXT_direct_state_access = false
  }
  if pProgramUniformMatrix2fv = (C.PPROGRAMUNIFORMMATRIX2FV)(getProcAddr("glProgramUniformMatrix2fv")); pProgramUniformMatrix2fv == nil {
    ARB_separate_shader_objects = false
    return errors.New("glProgramUniformMatrix2fv")
  }
  if pProgramUniformMatrix2fvEXT = (C.PPROGRAMUNIFORMMATRIX2FVEXT)(getProcAddr("glProgramUniformMatrix2fvEXT")); pProgramUniformMatrix2fvEXT == nil {
    EXT_direct_state_access = false
    EXT_separate_shader_objects = false
  }
  if pProgramUniformMatrix2x3dv = (C.PPROGRAMUNIFORMMATRIX2X3DV)(getProcAddr("glProgramUniformMatrix2x3dv")); pProgramUniformMatrix2x3dv == nil {
    ARB_separate_shader_objects = false
    return errors.New("glProgramUniformMatrix2x3dv")
  }
  if pProgramUniformMatrix2x3dvEXT = (C.PPROGRAMUNIFORMMATRIX2X3DVEXT)(getProcAddr("glProgramUniformMatrix2x3dvEXT")); pProgramUniformMatrix2x3dvEXT == nil {
    EXT_direct_state_access = false
  }
  if pProgramUniformMatrix2x3fv = (C.PPROGRAMUNIFORMMATRIX2X3FV)(getProcAddr("glProgramUniformMatrix2x3fv")); pProgramUniformMatrix2x3fv == nil {
    ARB_separate_shader_objects = false
    return errors.New("glProgramUniformMatrix2x3fv")
  }
  if pProgramUniformMatrix2x3fvEXT = (C.PPROGRAMUNIFORMMATRIX2X3FVEXT)(getProcAddr("glProgramUniformMatrix2x3fvEXT")); pProgramUniformMatrix2x3fvEXT == nil {
    EXT_direct_state_access = false
    EXT_separate_shader_objects = false
  }
  if pProgramUniformMatrix2x4dv = (C.PPROGRAMUNIFORMMATRIX2X4DV)(getProcAddr("glProgramUniformMatrix2x4dv")); pProgramUniformMatrix2x4dv == nil {
    ARB_separate_shader_objects = false
    return errors.New("glProgramUniformMatrix2x4dv")
  }
  if pProgramUniformMatrix2x4dvEXT = (C.PPROGRAMUNIFORMMATRIX2X4DVEXT)(getProcAddr("glProgramUniformMatrix2x4dvEXT")); pProgramUniformMatrix2x4dvEXT == nil {
    EXT_direct_state_access = false
  }
  if pProgramUniformMatrix2x4fv = (C.PPROGRAMUNIFORMMATRIX2X4FV)(getProcAddr("glProgramUniformMatrix2x4fv")); pProgramUniformMatrix2x4fv == nil {
    ARB_separate_shader_objects = false
    return errors.New("glProgramUniformMatrix2x4fv")
  }
  if pProgramUniformMatrix2x4fvEXT = (C.PPROGRAMUNIFORMMATRIX2X4FVEXT)(getProcAddr("glProgramUniformMatrix2x4fvEXT")); pProgramUniformMatrix2x4fvEXT == nil {
    EXT_direct_state_access = false
    EXT_separate_shader_objects = false
  }
  if pProgramUniformMatrix3dv = (C.PPROGRAMUNIFORMMATRIX3DV)(getProcAddr("glProgramUniformMatrix3dv")); pProgramUniformMatrix3dv == nil {
    ARB_separate_shader_objects = false
    return errors.New("glProgramUniformMatrix3dv")
  }
  if pProgramUniformMatrix3dvEXT = (C.PPROGRAMUNIFORMMATRIX3DVEXT)(getProcAddr("glProgramUniformMatrix3dvEXT")); pProgramUniformMatrix3dvEXT == nil {
    EXT_direct_state_access = false
  }
  if pProgramUniformMatrix3fv = (C.PPROGRAMUNIFORMMATRIX3FV)(getProcAddr("glProgramUniformMatrix3fv")); pProgramUniformMatrix3fv == nil {
    ARB_separate_shader_objects = false
    return errors.New("glProgramUniformMatrix3fv")
  }
  if pProgramUniformMatrix3fvEXT = (C.PPROGRAMUNIFORMMATRIX3FVEXT)(getProcAddr("glProgramUniformMatrix3fvEXT")); pProgramUniformMatrix3fvEXT == nil {
    EXT_direct_state_access = false
    EXT_separate_shader_objects = false
  }
  if pProgramUniformMatrix3x2dv = (C.PPROGRAMUNIFORMMATRIX3X2DV)(getProcAddr("glProgramUniformMatrix3x2dv")); pProgramUniformMatrix3x2dv == nil {
    ARB_separate_shader_objects = false
    return errors.New("glProgramUniformMatrix3x2dv")
  }
  if pProgramUniformMatrix3x2dvEXT = (C.PPROGRAMUNIFORMMATRIX3X2DVEXT)(getProcAddr("glProgramUniformMatrix3x2dvEXT")); pProgramUniformMatrix3x2dvEXT == nil {
    EXT_direct_state_access = false
  }
  if pProgramUniformMatrix3x2fv = (C.PPROGRAMUNIFORMMATRIX3X2FV)(getProcAddr("glProgramUniformMatrix3x2fv")); pProgramUniformMatrix3x2fv == nil {
    ARB_separate_shader_objects = false
    return errors.New("glProgramUniformMatrix3x2fv")
  }
  if pProgramUniformMatrix3x2fvEXT = (C.PPROGRAMUNIFORMMATRIX3X2FVEXT)(getProcAddr("glProgramUniformMatrix3x2fvEXT")); pProgramUniformMatrix3x2fvEXT == nil {
    EXT_direct_state_access = false
    EXT_separate_shader_objects = false
  }
  if pProgramUniformMatrix3x4dv = (C.PPROGRAMUNIFORMMATRIX3X4DV)(getProcAddr("glProgramUniformMatrix3x4dv")); pProgramUniformMatrix3x4dv == nil {
    ARB_separate_shader_objects = false
    return errors.New("glProgramUniformMatrix3x4dv")
  }
  if pProgramUniformMatrix3x4dvEXT = (C.PPROGRAMUNIFORMMATRIX3X4DVEXT)(getProcAddr("glProgramUniformMatrix3x4dvEXT")); pProgramUniformMatrix3x4dvEXT == nil {
    EXT_direct_state_access = false
  }
  if pProgramUniformMatrix3x4fv = (C.PPROGRAMUNIFORMMATRIX3X4FV)(getProcAddr("glProgramUniformMatrix3x4fv")); pProgramUniformMatrix3x4fv == nil {
    ARB_separate_shader_objects = false
    return errors.New("glProgramUniformMatrix3x4fv")
  }
  if pProgramUniformMatrix3x4fvEXT = (C.PPROGRAMUNIFORMMATRIX3X4FVEXT)(getProcAddr("glProgramUniformMatrix3x4fvEXT")); pProgramUniformMatrix3x4fvEXT == nil {
    EXT_direct_state_access = false
    EXT_separate_shader_objects = false
  }
  if pProgramUniformMatrix4dv = (C.PPROGRAMUNIFORMMATRIX4DV)(getProcAddr("glProgramUniformMatrix4dv")); pProgramUniformMatrix4dv == nil {
    ARB_separate_shader_objects = false
    return errors.New("glProgramUniformMatrix4dv")
  }
  if pProgramUniformMatrix4dvEXT = (C.PPROGRAMUNIFORMMATRIX4DVEXT)(getProcAddr("glProgramUniformMatrix4dvEXT")); pProgramUniformMatrix4dvEXT == nil {
    EXT_direct_state_access = false
  }
  if pProgramUniformMatrix4fv = (C.PPROGRAMUNIFORMMATRIX4FV)(getProcAddr("glProgramUniformMatrix4fv")); pProgramUniformMatrix4fv == nil {
    ARB_separate_shader_objects = false
    return errors.New("glProgramUniformMatrix4fv")
  }
  if pProgramUniformMatrix4fvEXT = (C.PPROGRAMUNIFORMMATRIX4FVEXT)(getProcAddr("glProgramUniformMatrix4fvEXT")); pProgramUniformMatrix4fvEXT == nil {
    EXT_direct_state_access = false
    EXT_separate_shader_objects = false
    EXT_separate_shader_objects = false
  }
  if pProgramUniformMatrix4x2dv = (C.PPROGRAMUNIFORMMATRIX4X2DV)(getProcAddr("glProgramUniformMatrix4x2dv")); pProgramUniformMatrix4x2dv == nil {
    ARB_separate_shader_objects = false
    return errors.New("glProgramUniformMatrix4x2dv")
  }
  if pProgramUniformMatrix4x2dvEXT = (C.PPROGRAMUNIFORMMATRIX4X2DVEXT)(getProcAddr("glProgramUniformMatrix4x2dvEXT")); pProgramUniformMatrix4x2dvEXT == nil {
    EXT_direct_state_access = false
  }
  if pProgramUniformMatrix4x2fv = (C.PPROGRAMUNIFORMMATRIX4X2FV)(getProcAddr("glProgramUniformMatrix4x2fv")); pProgramUniformMatrix4x2fv == nil {
    ARB_separate_shader_objects = false
    return errors.New("glProgramUniformMatrix4x2fv")
  }
  if pProgramUniformMatrix4x2fvEXT = (C.PPROGRAMUNIFORMMATRIX4X2FVEXT)(getProcAddr("glProgramUniformMatrix4x2fvEXT")); pProgramUniformMatrix4x2fvEXT == nil {
    EXT_direct_state_access = false
    EXT_separate_shader_objects = false
  }
  if pProgramUniformMatrix4x3dv = (C.PPROGRAMUNIFORMMATRIX4X3DV)(getProcAddr("glProgramUniformMatrix4x3dv")); pProgramUniformMatrix4x3dv == nil {
    ARB_separate_shader_objects = false
    return errors.New("glProgramUniformMatrix4x3dv")
  }
  if pProgramUniformMatrix4x3dvEXT = (C.PPROGRAMUNIFORMMATRIX4X3DVEXT)(getProcAddr("glProgramUniformMatrix4x3dvEXT")); pProgramUniformMatrix4x3dvEXT == nil {
    EXT_direct_state_access = false
  }
  if pProgramUniformMatrix4x3fv = (C.PPROGRAMUNIFORMMATRIX4X3FV)(getProcAddr("glProgramUniformMatrix4x3fv")); pProgramUniformMatrix4x3fv == nil {
    ARB_separate_shader_objects = false
    return errors.New("glProgramUniformMatrix4x3fv")
  }
  if pProgramUniformMatrix4x3fvEXT = (C.PPROGRAMUNIFORMMATRIX4X3FVEXT)(getProcAddr("glProgramUniformMatrix4x3fvEXT")); pProgramUniformMatrix4x3fvEXT == nil {
    EXT_direct_state_access = false
    EXT_separate_shader_objects = false
  }
  if pProgramUniformui64NV = (C.PPROGRAMUNIFORMUI64NV)(getProcAddr("glProgramUniformui64NV")); pProgramUniformui64NV == nil {
    NV_shader_buffer_load = false
  }
  if pProgramUniformui64vNV = (C.PPROGRAMUNIFORMUI64VNV)(getProcAddr("glProgramUniformui64vNV")); pProgramUniformui64vNV == nil {
    NV_shader_buffer_load = false
  }
  if pProgramVertexLimitNV = (C.PPROGRAMVERTEXLIMITNV)(getProcAddr("glProgramVertexLimitNV")); pProgramVertexLimitNV == nil {
    NV_geometry_program4 = false
  }
  if pProvokingVertex = (C.PPROVOKINGVERTEX)(getProcAddr("glProvokingVertex")); pProvokingVertex == nil {
    ARB_provoking_vertex = false
    return errors.New("glProvokingVertex")
  }
  if pProvokingVertexEXT = (C.PPROVOKINGVERTEXEXT)(getProcAddr("glProvokingVertexEXT")); pProvokingVertexEXT == nil {
    EXT_provoking_vertex = false
  }
  if pPushClientAttribDefaultEXT = (C.PPUSHCLIENTATTRIBDEFAULTEXT)(getProcAddr("glPushClientAttribDefaultEXT")); pPushClientAttribDefaultEXT == nil {
    EXT_direct_state_access = false
  }
  if pPushDebugGroup = (C.PPUSHDEBUGGROUP)(getProcAddr("glPushDebugGroup")); pPushDebugGroup == nil {
    KHR_debug = false
  }
  if pPushDebugGroupKHR = (C.PPUSHDEBUGGROUPKHR)(getProcAddr("glPushDebugGroupKHR")); pPushDebugGroupKHR == nil {
    KHR_debug = false
  }
  if pPushGroupMarkerEXT = (C.PPUSHGROUPMARKEREXT)(getProcAddr("glPushGroupMarkerEXT")); pPushGroupMarkerEXT == nil {
    EXT_debug_marker = false
  }
  if pQueryCounter = (C.PQUERYCOUNTER)(getProcAddr("glQueryCounter")); pQueryCounter == nil {
    ARB_timer_query = false
    return errors.New("glQueryCounter")
  }
  if pQueryMatrixxOES = (C.PQUERYMATRIXXOES)(getProcAddr("glQueryMatrixxOES")); pQueryMatrixxOES == nil {
    OES_query_matrix = false
  }
  if pQueryObjectParameteruiAMD = (C.PQUERYOBJECTPARAMETERUIAMD)(getProcAddr("glQueryObjectParameteruiAMD")); pQueryObjectParameteruiAMD == nil {
    AMD_occlusion_query_event = false
  }
  if pRasterPos2xOES = (C.PRASTERPOS2XOES)(getProcAddr("glRasterPos2xOES")); pRasterPos2xOES == nil {
    OES_fixed_point = false
  }
  if pRasterPos2xvOES = (C.PRASTERPOS2XVOES)(getProcAddr("glRasterPos2xvOES")); pRasterPos2xvOES == nil {
    OES_fixed_point = false
  }
  if pRasterPos3xOES = (C.PRASTERPOS3XOES)(getProcAddr("glRasterPos3xOES")); pRasterPos3xOES == nil {
    OES_fixed_point = false
  }
  if pRasterPos3xvOES = (C.PRASTERPOS3XVOES)(getProcAddr("glRasterPos3xvOES")); pRasterPos3xvOES == nil {
    OES_fixed_point = false
  }
  if pRasterPos4xOES = (C.PRASTERPOS4XOES)(getProcAddr("glRasterPos4xOES")); pRasterPos4xOES == nil {
    OES_fixed_point = false
  }
  if pRasterPos4xvOES = (C.PRASTERPOS4XVOES)(getProcAddr("glRasterPos4xvOES")); pRasterPos4xvOES == nil {
    OES_fixed_point = false
  }
  if pReadBuffer = (C.PREADBUFFER)(getProcAddr("glReadBuffer")); pReadBuffer == nil {
    return errors.New("glReadBuffer")
  }
  if pReadInstrumentsSGIX = (C.PREADINSTRUMENTSSGIX)(getProcAddr("glReadInstrumentsSGIX")); pReadInstrumentsSGIX == nil {
    SGIX_instruments = false
  }
  if pReadPixels = (C.PREADPIXELS)(getProcAddr("glReadPixels")); pReadPixels == nil {
    return errors.New("glReadPixels")
  }
  if pReadnPixelsARB = (C.PREADNPIXELSARB)(getProcAddr("glReadnPixelsARB")); pReadnPixelsARB == nil {
    ARB_robustness = false
  }
  if pRectxOES = (C.PRECTXOES)(getProcAddr("glRectxOES")); pRectxOES == nil {
    OES_fixed_point = false
  }
  if pRectxvOES = (C.PRECTXVOES)(getProcAddr("glRectxvOES")); pRectxvOES == nil {
    OES_fixed_point = false
  }
  if pReferencePlaneSGIX = (C.PREFERENCEPLANESGIX)(getProcAddr("glReferencePlaneSGIX")); pReferencePlaneSGIX == nil {
    SGIX_reference_plane = false
  }
  if pReleaseShaderCompiler = (C.PRELEASESHADERCOMPILER)(getProcAddr("glReleaseShaderCompiler")); pReleaseShaderCompiler == nil {
    ARB_ES2_compatibility = false
    return errors.New("glReleaseShaderCompiler")
  }
  if pRenderbufferStorage = (C.PRENDERBUFFERSTORAGE)(getProcAddr("glRenderbufferStorage")); pRenderbufferStorage == nil {
    ARB_framebuffer_object = false
    return errors.New("glRenderbufferStorage")
  }
  if pRenderbufferStorageEXT = (C.PRENDERBUFFERSTORAGEEXT)(getProcAddr("glRenderbufferStorageEXT")); pRenderbufferStorageEXT == nil {
    EXT_framebuffer_object = false
  }
  if pRenderbufferStorageMultisample = (C.PRENDERBUFFERSTORAGEMULTISAMPLE)(getProcAddr("glRenderbufferStorageMultisample")); pRenderbufferStorageMultisample == nil {
    ARB_framebuffer_object = false
    return errors.New("glRenderbufferStorageMultisample")
  }
  if pRenderbufferStorageMultisampleCoverageNV = (C.PRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENV)(getProcAddr("glRenderbufferStorageMultisampleCoverageNV")); pRenderbufferStorageMultisampleCoverageNV == nil {
    NV_framebuffer_multisample_coverage = false
  }
  if pRenderbufferStorageMultisampleEXT = (C.PRENDERBUFFERSTORAGEMULTISAMPLEEXT)(getProcAddr("glRenderbufferStorageMultisampleEXT")); pRenderbufferStorageMultisampleEXT == nil {
    EXT_framebuffer_multisample = false
  }
  if pReplacementCodePointerSUN = (C.PREPLACEMENTCODEPOINTERSUN)(getProcAddr("glReplacementCodePointerSUN")); pReplacementCodePointerSUN == nil {
    SUN_triangle_list = false
  }
  if pReplacementCodeubSUN = (C.PREPLACEMENTCODEUBSUN)(getProcAddr("glReplacementCodeubSUN")); pReplacementCodeubSUN == nil {
    SUN_triangle_list = false
  }
  if pReplacementCodeubvSUN = (C.PREPLACEMENTCODEUBVSUN)(getProcAddr("glReplacementCodeubvSUN")); pReplacementCodeubvSUN == nil {
    SUN_triangle_list = false
  }
  if pReplacementCodeuiColor3fVertex3fSUN = (C.PREPLACEMENTCODEUICOLOR3FVERTEX3FSUN)(getProcAddr("glReplacementCodeuiColor3fVertex3fSUN")); pReplacementCodeuiColor3fVertex3fSUN == nil {
    SUN_vertex = false
  }
  if pReplacementCodeuiColor3fVertex3fvSUN = (C.PREPLACEMENTCODEUICOLOR3FVERTEX3FVSUN)(getProcAddr("glReplacementCodeuiColor3fVertex3fvSUN")); pReplacementCodeuiColor3fVertex3fvSUN == nil {
    SUN_vertex = false
  }
  if pReplacementCodeuiColor4fNormal3fVertex3fSUN = (C.PREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUN)(getProcAddr("glReplacementCodeuiColor4fNormal3fVertex3fSUN")); pReplacementCodeuiColor4fNormal3fVertex3fSUN == nil {
    SUN_vertex = false
  }
  if pReplacementCodeuiColor4fNormal3fVertex3fvSUN = (C.PREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUN)(getProcAddr("glReplacementCodeuiColor4fNormal3fVertex3fvSUN")); pReplacementCodeuiColor4fNormal3fVertex3fvSUN == nil {
    SUN_vertex = false
  }
  if pReplacementCodeuiColor4ubVertex3fSUN = (C.PREPLACEMENTCODEUICOLOR4UBVERTEX3FSUN)(getProcAddr("glReplacementCodeuiColor4ubVertex3fSUN")); pReplacementCodeuiColor4ubVertex3fSUN == nil {
    SUN_vertex = false
  }
  if pReplacementCodeuiColor4ubVertex3fvSUN = (C.PREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUN)(getProcAddr("glReplacementCodeuiColor4ubVertex3fvSUN")); pReplacementCodeuiColor4ubVertex3fvSUN == nil {
    SUN_vertex = false
  }
  if pReplacementCodeuiNormal3fVertex3fSUN = (C.PREPLACEMENTCODEUINORMAL3FVERTEX3FSUN)(getProcAddr("glReplacementCodeuiNormal3fVertex3fSUN")); pReplacementCodeuiNormal3fVertex3fSUN == nil {
    SUN_vertex = false
  }
  if pReplacementCodeuiNormal3fVertex3fvSUN = (C.PREPLACEMENTCODEUINORMAL3FVERTEX3FVSUN)(getProcAddr("glReplacementCodeuiNormal3fVertex3fvSUN")); pReplacementCodeuiNormal3fVertex3fvSUN == nil {
    SUN_vertex = false
  }
  if pReplacementCodeuiSUN = (C.PREPLACEMENTCODEUISUN)(getProcAddr("glReplacementCodeuiSUN")); pReplacementCodeuiSUN == nil {
    SUN_triangle_list = false
  }
  if pReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = (C.PREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUN)(getProcAddr("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN")); pReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN == nil {
    SUN_vertex = false
  }
  if pReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = (C.PREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUN)(getProcAddr("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN")); pReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN == nil {
    SUN_vertex = false
  }
  if pReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = (C.PREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUN)(getProcAddr("glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN")); pReplacementCodeuiTexCoord2fNormal3fVertex3fSUN == nil {
    SUN_vertex = false
  }
  if pReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = (C.PREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUN)(getProcAddr("glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN")); pReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN == nil {
    SUN_vertex = false
  }
  if pReplacementCodeuiTexCoord2fVertex3fSUN = (C.PREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUN)(getProcAddr("glReplacementCodeuiTexCoord2fVertex3fSUN")); pReplacementCodeuiTexCoord2fVertex3fSUN == nil {
    SUN_vertex = false
  }
  if pReplacementCodeuiTexCoord2fVertex3fvSUN = (C.PREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUN)(getProcAddr("glReplacementCodeuiTexCoord2fVertex3fvSUN")); pReplacementCodeuiTexCoord2fVertex3fvSUN == nil {
    SUN_vertex = false
  }
  if pReplacementCodeuiVertex3fSUN = (C.PREPLACEMENTCODEUIVERTEX3FSUN)(getProcAddr("glReplacementCodeuiVertex3fSUN")); pReplacementCodeuiVertex3fSUN == nil {
    SUN_vertex = false
  }
  if pReplacementCodeuiVertex3fvSUN = (C.PREPLACEMENTCODEUIVERTEX3FVSUN)(getProcAddr("glReplacementCodeuiVertex3fvSUN")); pReplacementCodeuiVertex3fvSUN == nil {
    SUN_vertex = false
  }
  if pReplacementCodeuivSUN = (C.PREPLACEMENTCODEUIVSUN)(getProcAddr("glReplacementCodeuivSUN")); pReplacementCodeuivSUN == nil {
    SUN_triangle_list = false
  }
  if pReplacementCodeusSUN = (C.PREPLACEMENTCODEUSSUN)(getProcAddr("glReplacementCodeusSUN")); pReplacementCodeusSUN == nil {
    SUN_triangle_list = false
  }
  if pReplacementCodeusvSUN = (C.PREPLACEMENTCODEUSVSUN)(getProcAddr("glReplacementCodeusvSUN")); pReplacementCodeusvSUN == nil {
    SUN_triangle_list = false
  }
  if pRequestResidentProgramsNV = (C.PREQUESTRESIDENTPROGRAMSNV)(getProcAddr("glRequestResidentProgramsNV")); pRequestResidentProgramsNV == nil {
    NV_vertex_program = false
  }
  if pResetHistogramEXT = (C.PRESETHISTOGRAMEXT)(getProcAddr("glResetHistogramEXT")); pResetHistogramEXT == nil {
    EXT_histogram = false
  }
  if pResetMinmaxEXT = (C.PRESETMINMAXEXT)(getProcAddr("glResetMinmaxEXT")); pResetMinmaxEXT == nil {
    EXT_histogram = false
  }
  if pResizeBuffersMESA = (C.PRESIZEBUFFERSMESA)(getProcAddr("glResizeBuffersMESA")); pResizeBuffersMESA == nil {
    MESA_resize_buffers = false
  }
  if pResumeTransformFeedback = (C.PRESUMETRANSFORMFEEDBACK)(getProcAddr("glResumeTransformFeedback")); pResumeTransformFeedback == nil {
    ARB_transform_feedback2 = false
    return errors.New("glResumeTransformFeedback")
  }
  if pResumeTransformFeedbackNV = (C.PRESUMETRANSFORMFEEDBACKNV)(getProcAddr("glResumeTransformFeedbackNV")); pResumeTransformFeedbackNV == nil {
    NV_transform_feedback2 = false
  }
  if pRotatexOES = (C.PROTATEXOES)(getProcAddr("glRotatexOES")); pRotatexOES == nil {
    OES_fixed_point = false
  }
  if pSampleCoverage = (C.PSAMPLECOVERAGE)(getProcAddr("glSampleCoverage")); pSampleCoverage == nil {
    return errors.New("glSampleCoverage")
  }
  if pSampleCoverageARB = (C.PSAMPLECOVERAGEARB)(getProcAddr("glSampleCoverageARB")); pSampleCoverageARB == nil {
    ARB_multisample = false
  }
  if pSampleCoverageOES = (C.PSAMPLECOVERAGEOES)(getProcAddr("glSampleCoverageOES")); pSampleCoverageOES == nil {
    OES_fixed_point = false
  }
  if pSampleCoveragexOES = (C.PSAMPLECOVERAGEXOES)(getProcAddr("glSampleCoveragexOES")); pSampleCoveragexOES == nil {
    OES_fixed_point = false
  }
  if pSampleMapATI = (C.PSAMPLEMAPATI)(getProcAddr("glSampleMapATI")); pSampleMapATI == nil {
    ATI_fragment_shader = false
  }
  if pSampleMaskEXT = (C.PSAMPLEMASKEXT)(getProcAddr("glSampleMaskEXT")); pSampleMaskEXT == nil {
    EXT_multisample = false
  }
  if pSampleMaskIndexedNV = (C.PSAMPLEMASKINDEXEDNV)(getProcAddr("glSampleMaskIndexedNV")); pSampleMaskIndexedNV == nil {
    NV_explicit_multisample = false
  }
  if pSampleMaskSGIS = (C.PSAMPLEMASKSGIS)(getProcAddr("glSampleMaskSGIS")); pSampleMaskSGIS == nil {
    SGIS_multisample = false
  }
  if pSampleMaski = (C.PSAMPLEMASKI)(getProcAddr("glSampleMaski")); pSampleMaski == nil {
    ARB_texture_multisample = false
    return errors.New("glSampleMaski")
  }
  if pSamplePatternEXT = (C.PSAMPLEPATTERNEXT)(getProcAddr("glSamplePatternEXT")); pSamplePatternEXT == nil {
    EXT_multisample = false
  }
  if pSamplePatternSGIS = (C.PSAMPLEPATTERNSGIS)(getProcAddr("glSamplePatternSGIS")); pSamplePatternSGIS == nil {
    SGIS_multisample = false
  }
  if pSamplerParameterIiv = (C.PSAMPLERPARAMETERIIV)(getProcAddr("glSamplerParameterIiv")); pSamplerParameterIiv == nil {
    ARB_sampler_objects = false
    return errors.New("glSamplerParameterIiv")
  }
  if pSamplerParameterIuiv = (C.PSAMPLERPARAMETERIUIV)(getProcAddr("glSamplerParameterIuiv")); pSamplerParameterIuiv == nil {
    ARB_sampler_objects = false
    return errors.New("glSamplerParameterIuiv")
  }
  if pSamplerParameterf = (C.PSAMPLERPARAMETERF)(getProcAddr("glSamplerParameterf")); pSamplerParameterf == nil {
    ARB_sampler_objects = false
    return errors.New("glSamplerParameterf")
  }
  if pSamplerParameterfv = (C.PSAMPLERPARAMETERFV)(getProcAddr("glSamplerParameterfv")); pSamplerParameterfv == nil {
    ARB_sampler_objects = false
    return errors.New("glSamplerParameterfv")
  }
  if pSamplerParameteri = (C.PSAMPLERPARAMETERI)(getProcAddr("glSamplerParameteri")); pSamplerParameteri == nil {
    ARB_sampler_objects = false
    return errors.New("glSamplerParameteri")
  }
  if pSamplerParameteriv = (C.PSAMPLERPARAMETERIV)(getProcAddr("glSamplerParameteriv")); pSamplerParameteriv == nil {
    ARB_sampler_objects = false
    return errors.New("glSamplerParameteriv")
  }
  if pScalexOES = (C.PSCALEXOES)(getProcAddr("glScalexOES")); pScalexOES == nil {
    OES_fixed_point = false
  }
  if pScissor = (C.PSCISSOR)(getProcAddr("glScissor")); pScissor == nil {
    return errors.New("glScissor")
  }
  if pScissorArrayv = (C.PSCISSORARRAYV)(getProcAddr("glScissorArrayv")); pScissorArrayv == nil {
    ARB_viewport_array = false
    return errors.New("glScissorArrayv")
  }
  if pScissorIndexed = (C.PSCISSORINDEXED)(getProcAddr("glScissorIndexed")); pScissorIndexed == nil {
    ARB_viewport_array = false
    return errors.New("glScissorIndexed")
  }
  if pScissorIndexedv = (C.PSCISSORINDEXEDV)(getProcAddr("glScissorIndexedv")); pScissorIndexedv == nil {
    ARB_viewport_array = false
    return errors.New("glScissorIndexedv")
  }
  if pSecondaryColor3bEXT = (C.PSECONDARYCOLOR3BEXT)(getProcAddr("glSecondaryColor3bEXT")); pSecondaryColor3bEXT == nil {
    EXT_secondary_color = false
  }
  if pSecondaryColor3bvEXT = (C.PSECONDARYCOLOR3BVEXT)(getProcAddr("glSecondaryColor3bvEXT")); pSecondaryColor3bvEXT == nil {
    EXT_secondary_color = false
  }
  if pSecondaryColor3dEXT = (C.PSECONDARYCOLOR3DEXT)(getProcAddr("glSecondaryColor3dEXT")); pSecondaryColor3dEXT == nil {
    EXT_secondary_color = false
  }
  if pSecondaryColor3dvEXT = (C.PSECONDARYCOLOR3DVEXT)(getProcAddr("glSecondaryColor3dvEXT")); pSecondaryColor3dvEXT == nil {
    EXT_secondary_color = false
  }
  if pSecondaryColor3fEXT = (C.PSECONDARYCOLOR3FEXT)(getProcAddr("glSecondaryColor3fEXT")); pSecondaryColor3fEXT == nil {
    EXT_secondary_color = false
  }
  if pSecondaryColor3fvEXT = (C.PSECONDARYCOLOR3FVEXT)(getProcAddr("glSecondaryColor3fvEXT")); pSecondaryColor3fvEXT == nil {
    EXT_secondary_color = false
  }
  if pSecondaryColor3hNV = (C.PSECONDARYCOLOR3HNV)(getProcAddr("glSecondaryColor3hNV")); pSecondaryColor3hNV == nil {
    NV_half_float = false
  }
  if pSecondaryColor3hvNV = (C.PSECONDARYCOLOR3HVNV)(getProcAddr("glSecondaryColor3hvNV")); pSecondaryColor3hvNV == nil {
    NV_half_float = false
  }
  if pSecondaryColor3iEXT = (C.PSECONDARYCOLOR3IEXT)(getProcAddr("glSecondaryColor3iEXT")); pSecondaryColor3iEXT == nil {
    EXT_secondary_color = false
  }
  if pSecondaryColor3ivEXT = (C.PSECONDARYCOLOR3IVEXT)(getProcAddr("glSecondaryColor3ivEXT")); pSecondaryColor3ivEXT == nil {
    EXT_secondary_color = false
  }
  if pSecondaryColor3sEXT = (C.PSECONDARYCOLOR3SEXT)(getProcAddr("glSecondaryColor3sEXT")); pSecondaryColor3sEXT == nil {
    EXT_secondary_color = false
  }
  if pSecondaryColor3svEXT = (C.PSECONDARYCOLOR3SVEXT)(getProcAddr("glSecondaryColor3svEXT")); pSecondaryColor3svEXT == nil {
    EXT_secondary_color = false
  }
  if pSecondaryColor3ubEXT = (C.PSECONDARYCOLOR3UBEXT)(getProcAddr("glSecondaryColor3ubEXT")); pSecondaryColor3ubEXT == nil {
    EXT_secondary_color = false
  }
  if pSecondaryColor3ubvEXT = (C.PSECONDARYCOLOR3UBVEXT)(getProcAddr("glSecondaryColor3ubvEXT")); pSecondaryColor3ubvEXT == nil {
    EXT_secondary_color = false
  }
  if pSecondaryColor3uiEXT = (C.PSECONDARYCOLOR3UIEXT)(getProcAddr("glSecondaryColor3uiEXT")); pSecondaryColor3uiEXT == nil {
    EXT_secondary_color = false
  }
  if pSecondaryColor3uivEXT = (C.PSECONDARYCOLOR3UIVEXT)(getProcAddr("glSecondaryColor3uivEXT")); pSecondaryColor3uivEXT == nil {
    EXT_secondary_color = false
  }
  if pSecondaryColor3usEXT = (C.PSECONDARYCOLOR3USEXT)(getProcAddr("glSecondaryColor3usEXT")); pSecondaryColor3usEXT == nil {
    EXT_secondary_color = false
  }
  if pSecondaryColor3usvEXT = (C.PSECONDARYCOLOR3USVEXT)(getProcAddr("glSecondaryColor3usvEXT")); pSecondaryColor3usvEXT == nil {
    EXT_secondary_color = false
  }
  if pSecondaryColorFormatNV = (C.PSECONDARYCOLORFORMATNV)(getProcAddr("glSecondaryColorFormatNV")); pSecondaryColorFormatNV == nil {
    NV_vertex_buffer_unified_memory = false
  }
  if pSecondaryColorPointerEXT = (C.PSECONDARYCOLORPOINTEREXT)(getProcAddr("glSecondaryColorPointerEXT")); pSecondaryColorPointerEXT == nil {
    EXT_secondary_color = false
  }
  if pSecondaryColorPointerListIBM = (C.PSECONDARYCOLORPOINTERLISTIBM)(getProcAddr("glSecondaryColorPointerListIBM")); pSecondaryColorPointerListIBM == nil {
    IBM_vertex_array_lists = false
  }
  if pSelectPerfMonitorCountersAMD = (C.PSELECTPERFMONITORCOUNTERSAMD)(getProcAddr("glSelectPerfMonitorCountersAMD")); pSelectPerfMonitorCountersAMD == nil {
    AMD_performance_monitor = false
  }
  if pSeparableFilter2DEXT = (C.PSEPARABLEFILTER2DEXT)(getProcAddr("glSeparableFilter2DEXT")); pSeparableFilter2DEXT == nil {
    EXT_convolution = false
  }
  if pSetFenceAPPLE = (C.PSETFENCEAPPLE)(getProcAddr("glSetFenceAPPLE")); pSetFenceAPPLE == nil {
    APPLE_fence = false
  }
  if pSetFenceNV = (C.PSETFENCENV)(getProcAddr("glSetFenceNV")); pSetFenceNV == nil {
    NV_fence = false
  }
  if pSetFragmentShaderConstantATI = (C.PSETFRAGMENTSHADERCONSTANTATI)(getProcAddr("glSetFragmentShaderConstantATI")); pSetFragmentShaderConstantATI == nil {
    ATI_fragment_shader = false
  }
  if pSetInvariantEXT = (C.PSETINVARIANTEXT)(getProcAddr("glSetInvariantEXT")); pSetInvariantEXT == nil {
    EXT_vertex_shader = false
  }
  if pSetLocalConstantEXT = (C.PSETLOCALCONSTANTEXT)(getProcAddr("glSetLocalConstantEXT")); pSetLocalConstantEXT == nil {
    EXT_vertex_shader = false
  }
  if pSetMultisamplefvAMD = (C.PSETMULTISAMPLEFVAMD)(getProcAddr("glSetMultisamplefvAMD")); pSetMultisamplefvAMD == nil {
    AMD_sample_positions = false
  }
  if pShaderBinary = (C.PSHADERBINARY)(getProcAddr("glShaderBinary")); pShaderBinary == nil {
    ARB_ES2_compatibility = false
    return errors.New("glShaderBinary")
  }
  if pShaderOp1EXT = (C.PSHADEROP1EXT)(getProcAddr("glShaderOp1EXT")); pShaderOp1EXT == nil {
    EXT_vertex_shader = false
  }
  if pShaderOp2EXT = (C.PSHADEROP2EXT)(getProcAddr("glShaderOp2EXT")); pShaderOp2EXT == nil {
    EXT_vertex_shader = false
  }
  if pShaderOp3EXT = (C.PSHADEROP3EXT)(getProcAddr("glShaderOp3EXT")); pShaderOp3EXT == nil {
    EXT_vertex_shader = false
  }
  if pShaderSource = (C.PSHADERSOURCE)(getProcAddr("glShaderSource")); pShaderSource == nil {
    return errors.New("glShaderSource")
  }
  if pShaderSourceARB = (C.PSHADERSOURCEARB)(getProcAddr("glShaderSourceARB")); pShaderSourceARB == nil {
    ARB_shader_objects = false
  }
  if pShaderStorageBlockBinding = (C.PSHADERSTORAGEBLOCKBINDING)(getProcAddr("glShaderStorageBlockBinding")); pShaderStorageBlockBinding == nil {
    ARB_shader_storage_buffer_object = false
  }
  if pSharpenTexFuncSGIS = (C.PSHARPENTEXFUNCSGIS)(getProcAddr("glSharpenTexFuncSGIS")); pSharpenTexFuncSGIS == nil {
    SGIS_sharpen_texture = false
  }
  if pSpriteParameterfSGIX = (C.PSPRITEPARAMETERFSGIX)(getProcAddr("glSpriteParameterfSGIX")); pSpriteParameterfSGIX == nil {
    SGIX_sprite = false
  }
  if pSpriteParameterfvSGIX = (C.PSPRITEPARAMETERFVSGIX)(getProcAddr("glSpriteParameterfvSGIX")); pSpriteParameterfvSGIX == nil {
    SGIX_sprite = false
  }
  if pSpriteParameteriSGIX = (C.PSPRITEPARAMETERISGIX)(getProcAddr("glSpriteParameteriSGIX")); pSpriteParameteriSGIX == nil {
    SGIX_sprite = false
  }
  if pSpriteParameterivSGIX = (C.PSPRITEPARAMETERIVSGIX)(getProcAddr("glSpriteParameterivSGIX")); pSpriteParameterivSGIX == nil {
    SGIX_sprite = false
  }
  if pStartInstrumentsSGIX = (C.PSTARTINSTRUMENTSSGIX)(getProcAddr("glStartInstrumentsSGIX")); pStartInstrumentsSGIX == nil {
    SGIX_instruments = false
  }
  if pStencilClearTagEXT = (C.PSTENCILCLEARTAGEXT)(getProcAddr("glStencilClearTagEXT")); pStencilClearTagEXT == nil {
    EXT_stencil_clear_tag = false
  }
  if pStencilFillPathInstancedNV = (C.PSTENCILFILLPATHINSTANCEDNV)(getProcAddr("glStencilFillPathInstancedNV")); pStencilFillPathInstancedNV == nil {
    NV_path_rendering = false
  }
  if pStencilFillPathNV = (C.PSTENCILFILLPATHNV)(getProcAddr("glStencilFillPathNV")); pStencilFillPathNV == nil {
    NV_path_rendering = false
  }
  if pStencilFunc = (C.PSTENCILFUNC)(getProcAddr("glStencilFunc")); pStencilFunc == nil {
    return errors.New("glStencilFunc")
  }
  if pStencilFuncSeparate = (C.PSTENCILFUNCSEPARATE)(getProcAddr("glStencilFuncSeparate")); pStencilFuncSeparate == nil {
    return errors.New("glStencilFuncSeparate")
  }
  if pStencilFuncSeparateATI = (C.PSTENCILFUNCSEPARATEATI)(getProcAddr("glStencilFuncSeparateATI")); pStencilFuncSeparateATI == nil {
    ATI_separate_stencil = false
  }
  if pStencilMask = (C.PSTENCILMASK)(getProcAddr("glStencilMask")); pStencilMask == nil {
    return errors.New("glStencilMask")
  }
  if pStencilMaskSeparate = (C.PSTENCILMASKSEPARATE)(getProcAddr("glStencilMaskSeparate")); pStencilMaskSeparate == nil {
    return errors.New("glStencilMaskSeparate")
  }
  if pStencilOp = (C.PSTENCILOP)(getProcAddr("glStencilOp")); pStencilOp == nil {
    return errors.New("glStencilOp")
  }
  if pStencilOpSeparate = (C.PSTENCILOPSEPARATE)(getProcAddr("glStencilOpSeparate")); pStencilOpSeparate == nil {
    return errors.New("glStencilOpSeparate")
  }
  if pStencilOpSeparateATI = (C.PSTENCILOPSEPARATEATI)(getProcAddr("glStencilOpSeparateATI")); pStencilOpSeparateATI == nil {
    ATI_separate_stencil = false
  }
  if pStencilOpValueAMD = (C.PSTENCILOPVALUEAMD)(getProcAddr("glStencilOpValueAMD")); pStencilOpValueAMD == nil {
    AMD_stencil_operation_extended = false
  }
  if pStencilStrokePathInstancedNV = (C.PSTENCILSTROKEPATHINSTANCEDNV)(getProcAddr("glStencilStrokePathInstancedNV")); pStencilStrokePathInstancedNV == nil {
    NV_path_rendering = false
  }
  if pStencilStrokePathNV = (C.PSTENCILSTROKEPATHNV)(getProcAddr("glStencilStrokePathNV")); pStencilStrokePathNV == nil {
    NV_path_rendering = false
  }
  if pStopInstrumentsSGIX = (C.PSTOPINSTRUMENTSSGIX)(getProcAddr("glStopInstrumentsSGIX")); pStopInstrumentsSGIX == nil {
    SGIX_instruments = false
  }
  if pStringMarkerGREMEDY = (C.PSTRINGMARKERGREMEDY)(getProcAddr("glStringMarkerGREMEDY")); pStringMarkerGREMEDY == nil {
    GREMEDY_string_marker = false
  }
  if pSwizzleEXT = (C.PSWIZZLEEXT)(getProcAddr("glSwizzleEXT")); pSwizzleEXT == nil {
    EXT_vertex_shader = false
  }
  if pSyncTextureINTEL = (C.PSYNCTEXTUREINTEL)(getProcAddr("glSyncTextureINTEL")); pSyncTextureINTEL == nil {
    INTEL_map_texture = false
  }
  if pTagSampleBufferSGIX = (C.PTAGSAMPLEBUFFERSGIX)(getProcAddr("glTagSampleBufferSGIX")); pTagSampleBufferSGIX == nil {
    SGIX_tag_sample_buffer = false
  }
  if pTangent3bEXT = (C.PTANGENT3BEXT)(getProcAddr("glTangent3bEXT")); pTangent3bEXT == nil {
    EXT_coordinate_frame = false
  }
  if pTangent3bvEXT = (C.PTANGENT3BVEXT)(getProcAddr("glTangent3bvEXT")); pTangent3bvEXT == nil {
    EXT_coordinate_frame = false
  }
  if pTangent3dEXT = (C.PTANGENT3DEXT)(getProcAddr("glTangent3dEXT")); pTangent3dEXT == nil {
    EXT_coordinate_frame = false
  }
  if pTangent3dvEXT = (C.PTANGENT3DVEXT)(getProcAddr("glTangent3dvEXT")); pTangent3dvEXT == nil {
    EXT_coordinate_frame = false
  }
  if pTangent3fEXT = (C.PTANGENT3FEXT)(getProcAddr("glTangent3fEXT")); pTangent3fEXT == nil {
    EXT_coordinate_frame = false
  }
  if pTangent3fvEXT = (C.PTANGENT3FVEXT)(getProcAddr("glTangent3fvEXT")); pTangent3fvEXT == nil {
    EXT_coordinate_frame = false
  }
  if pTangent3iEXT = (C.PTANGENT3IEXT)(getProcAddr("glTangent3iEXT")); pTangent3iEXT == nil {
    EXT_coordinate_frame = false
  }
  if pTangent3ivEXT = (C.PTANGENT3IVEXT)(getProcAddr("glTangent3ivEXT")); pTangent3ivEXT == nil {
    EXT_coordinate_frame = false
  }
  if pTangent3sEXT = (C.PTANGENT3SEXT)(getProcAddr("glTangent3sEXT")); pTangent3sEXT == nil {
    EXT_coordinate_frame = false
  }
  if pTangent3svEXT = (C.PTANGENT3SVEXT)(getProcAddr("glTangent3svEXT")); pTangent3svEXT == nil {
    EXT_coordinate_frame = false
  }
  if pTangentPointerEXT = (C.PTANGENTPOINTEREXT)(getProcAddr("glTangentPointerEXT")); pTangentPointerEXT == nil {
    EXT_coordinate_frame = false
  }
  if pTbufferMask3DFX = (C.PTBUFFERMASK3DFX)(getProcAddr("glTbufferMask3DFX")); pTbufferMask3DFX == nil {
    GL_3DFX_tbuffer = false
  }
  if pTessellationFactorAMD = (C.PTESSELLATIONFACTORAMD)(getProcAddr("glTessellationFactorAMD")); pTessellationFactorAMD == nil {
    AMD_vertex_shader_tessellator = false
  }
  if pTessellationModeAMD = (C.PTESSELLATIONMODEAMD)(getProcAddr("glTessellationModeAMD")); pTessellationModeAMD == nil {
    AMD_vertex_shader_tessellator = false
  }
  if pTestFenceAPPLE = (C.PTESTFENCEAPPLE)(getProcAddr("glTestFenceAPPLE")); pTestFenceAPPLE == nil {
    APPLE_fence = false
  }
  if pTestFenceNV = (C.PTESTFENCENV)(getProcAddr("glTestFenceNV")); pTestFenceNV == nil {
    NV_fence = false
  }
  if pTestObjectAPPLE = (C.PTESTOBJECTAPPLE)(getProcAddr("glTestObjectAPPLE")); pTestObjectAPPLE == nil {
    APPLE_fence = false
  }
  if pTexBuffer = (C.PTEXBUFFER)(getProcAddr("glTexBuffer")); pTexBuffer == nil {
    return errors.New("glTexBuffer")
  }
  if pTexBufferARB = (C.PTEXBUFFERARB)(getProcAddr("glTexBufferARB")); pTexBufferARB == nil {
    ARB_texture_buffer_object = false
  }
  if pTexBufferEXT = (C.PTEXBUFFEREXT)(getProcAddr("glTexBufferEXT")); pTexBufferEXT == nil {
    EXT_texture_buffer_object = false
  }
  if pTexBufferRange = (C.PTEXBUFFERRANGE)(getProcAddr("glTexBufferRange")); pTexBufferRange == nil {
    ARB_texture_buffer_range = false
  }
  if pTexBumpParameterfvATI = (C.PTEXBUMPPARAMETERFVATI)(getProcAddr("glTexBumpParameterfvATI")); pTexBumpParameterfvATI == nil {
    ATI_envmap_bumpmap = false
  }
  if pTexBumpParameterivATI = (C.PTEXBUMPPARAMETERIVATI)(getProcAddr("glTexBumpParameterivATI")); pTexBumpParameterivATI == nil {
    ATI_envmap_bumpmap = false
  }
  if pTexCoord1bOES = (C.PTEXCOORD1BOES)(getProcAddr("glTexCoord1bOES")); pTexCoord1bOES == nil {
    OES_byte_coordinates = false
  }
  if pTexCoord1bvOES = (C.PTEXCOORD1BVOES)(getProcAddr("glTexCoord1bvOES")); pTexCoord1bvOES == nil {
    OES_byte_coordinates = false
  }
  if pTexCoord1hNV = (C.PTEXCOORD1HNV)(getProcAddr("glTexCoord1hNV")); pTexCoord1hNV == nil {
    NV_half_float = false
  }
  if pTexCoord1hvNV = (C.PTEXCOORD1HVNV)(getProcAddr("glTexCoord1hvNV")); pTexCoord1hvNV == nil {
    NV_half_float = false
  }
  if pTexCoord1xOES = (C.PTEXCOORD1XOES)(getProcAddr("glTexCoord1xOES")); pTexCoord1xOES == nil {
    OES_fixed_point = false
  }
  if pTexCoord1xvOES = (C.PTEXCOORD1XVOES)(getProcAddr("glTexCoord1xvOES")); pTexCoord1xvOES == nil {
    OES_fixed_point = false
  }
  if pTexCoord2bOES = (C.PTEXCOORD2BOES)(getProcAddr("glTexCoord2bOES")); pTexCoord2bOES == nil {
    OES_byte_coordinates = false
  }
  if pTexCoord2bvOES = (C.PTEXCOORD2BVOES)(getProcAddr("glTexCoord2bvOES")); pTexCoord2bvOES == nil {
    OES_byte_coordinates = false
  }
  if pTexCoord2fColor3fVertex3fSUN = (C.PTEXCOORD2FCOLOR3FVERTEX3FSUN)(getProcAddr("glTexCoord2fColor3fVertex3fSUN")); pTexCoord2fColor3fVertex3fSUN == nil {
    SUN_vertex = false
  }
  if pTexCoord2fColor3fVertex3fvSUN = (C.PTEXCOORD2FCOLOR3FVERTEX3FVSUN)(getProcAddr("glTexCoord2fColor3fVertex3fvSUN")); pTexCoord2fColor3fVertex3fvSUN == nil {
    SUN_vertex = false
  }
  if pTexCoord2fColor4fNormal3fVertex3fSUN = (C.PTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUN)(getProcAddr("glTexCoord2fColor4fNormal3fVertex3fSUN")); pTexCoord2fColor4fNormal3fVertex3fSUN == nil {
    SUN_vertex = false
  }
  if pTexCoord2fColor4fNormal3fVertex3fvSUN = (C.PTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUN)(getProcAddr("glTexCoord2fColor4fNormal3fVertex3fvSUN")); pTexCoord2fColor4fNormal3fVertex3fvSUN == nil {
    SUN_vertex = false
  }
  if pTexCoord2fColor4ubVertex3fSUN = (C.PTEXCOORD2FCOLOR4UBVERTEX3FSUN)(getProcAddr("glTexCoord2fColor4ubVertex3fSUN")); pTexCoord2fColor4ubVertex3fSUN == nil {
    SUN_vertex = false
  }
  if pTexCoord2fColor4ubVertex3fvSUN = (C.PTEXCOORD2FCOLOR4UBVERTEX3FVSUN)(getProcAddr("glTexCoord2fColor4ubVertex3fvSUN")); pTexCoord2fColor4ubVertex3fvSUN == nil {
    SUN_vertex = false
  }
  if pTexCoord2fNormal3fVertex3fSUN = (C.PTEXCOORD2FNORMAL3FVERTEX3FSUN)(getProcAddr("glTexCoord2fNormal3fVertex3fSUN")); pTexCoord2fNormal3fVertex3fSUN == nil {
    SUN_vertex = false
  }
  if pTexCoord2fNormal3fVertex3fvSUN = (C.PTEXCOORD2FNORMAL3FVERTEX3FVSUN)(getProcAddr("glTexCoord2fNormal3fVertex3fvSUN")); pTexCoord2fNormal3fVertex3fvSUN == nil {
    SUN_vertex = false
  }
  if pTexCoord2fVertex3fSUN = (C.PTEXCOORD2FVERTEX3FSUN)(getProcAddr("glTexCoord2fVertex3fSUN")); pTexCoord2fVertex3fSUN == nil {
    SUN_vertex = false
  }
  if pTexCoord2fVertex3fvSUN = (C.PTEXCOORD2FVERTEX3FVSUN)(getProcAddr("glTexCoord2fVertex3fvSUN")); pTexCoord2fVertex3fvSUN == nil {
    SUN_vertex = false
  }
  if pTexCoord2hNV = (C.PTEXCOORD2HNV)(getProcAddr("glTexCoord2hNV")); pTexCoord2hNV == nil {
    NV_half_float = false
  }
  if pTexCoord2hvNV = (C.PTEXCOORD2HVNV)(getProcAddr("glTexCoord2hvNV")); pTexCoord2hvNV == nil {
    NV_half_float = false
  }
  if pTexCoord2xOES = (C.PTEXCOORD2XOES)(getProcAddr("glTexCoord2xOES")); pTexCoord2xOES == nil {
    OES_fixed_point = false
  }
  if pTexCoord2xvOES = (C.PTEXCOORD2XVOES)(getProcAddr("glTexCoord2xvOES")); pTexCoord2xvOES == nil {
    OES_fixed_point = false
  }
  if pTexCoord3bOES = (C.PTEXCOORD3BOES)(getProcAddr("glTexCoord3bOES")); pTexCoord3bOES == nil {
    OES_byte_coordinates = false
  }
  if pTexCoord3bvOES = (C.PTEXCOORD3BVOES)(getProcAddr("glTexCoord3bvOES")); pTexCoord3bvOES == nil {
    OES_byte_coordinates = false
  }
  if pTexCoord3hNV = (C.PTEXCOORD3HNV)(getProcAddr("glTexCoord3hNV")); pTexCoord3hNV == nil {
    NV_half_float = false
  }
  if pTexCoord3hvNV = (C.PTEXCOORD3HVNV)(getProcAddr("glTexCoord3hvNV")); pTexCoord3hvNV == nil {
    NV_half_float = false
  }
  if pTexCoord3xOES = (C.PTEXCOORD3XOES)(getProcAddr("glTexCoord3xOES")); pTexCoord3xOES == nil {
    OES_fixed_point = false
  }
  if pTexCoord3xvOES = (C.PTEXCOORD3XVOES)(getProcAddr("glTexCoord3xvOES")); pTexCoord3xvOES == nil {
    OES_fixed_point = false
  }
  if pTexCoord4bOES = (C.PTEXCOORD4BOES)(getProcAddr("glTexCoord4bOES")); pTexCoord4bOES == nil {
    OES_byte_coordinates = false
  }
  if pTexCoord4bvOES = (C.PTEXCOORD4BVOES)(getProcAddr("glTexCoord4bvOES")); pTexCoord4bvOES == nil {
    OES_byte_coordinates = false
  }
  if pTexCoord4fColor4fNormal3fVertex4fSUN = (C.PTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUN)(getProcAddr("glTexCoord4fColor4fNormal3fVertex4fSUN")); pTexCoord4fColor4fNormal3fVertex4fSUN == nil {
    SUN_vertex = false
  }
  if pTexCoord4fColor4fNormal3fVertex4fvSUN = (C.PTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUN)(getProcAddr("glTexCoord4fColor4fNormal3fVertex4fvSUN")); pTexCoord4fColor4fNormal3fVertex4fvSUN == nil {
    SUN_vertex = false
  }
  if pTexCoord4fVertex4fSUN = (C.PTEXCOORD4FVERTEX4FSUN)(getProcAddr("glTexCoord4fVertex4fSUN")); pTexCoord4fVertex4fSUN == nil {
    SUN_vertex = false
  }
  if pTexCoord4fVertex4fvSUN = (C.PTEXCOORD4FVERTEX4FVSUN)(getProcAddr("glTexCoord4fVertex4fvSUN")); pTexCoord4fVertex4fvSUN == nil {
    SUN_vertex = false
  }
  if pTexCoord4hNV = (C.PTEXCOORD4HNV)(getProcAddr("glTexCoord4hNV")); pTexCoord4hNV == nil {
    NV_half_float = false
  }
  if pTexCoord4hvNV = (C.PTEXCOORD4HVNV)(getProcAddr("glTexCoord4hvNV")); pTexCoord4hvNV == nil {
    NV_half_float = false
  }
  if pTexCoord4xOES = (C.PTEXCOORD4XOES)(getProcAddr("glTexCoord4xOES")); pTexCoord4xOES == nil {
    OES_fixed_point = false
  }
  if pTexCoord4xvOES = (C.PTEXCOORD4XVOES)(getProcAddr("glTexCoord4xvOES")); pTexCoord4xvOES == nil {
    OES_fixed_point = false
  }
  if pTexCoordFormatNV = (C.PTEXCOORDFORMATNV)(getProcAddr("glTexCoordFormatNV")); pTexCoordFormatNV == nil {
    NV_vertex_buffer_unified_memory = false
  }
  if pTexCoordPointerEXT = (C.PTEXCOORDPOINTEREXT)(getProcAddr("glTexCoordPointerEXT")); pTexCoordPointerEXT == nil {
    EXT_vertex_array = false
  }
  if pTexCoordPointerListIBM = (C.PTEXCOORDPOINTERLISTIBM)(getProcAddr("glTexCoordPointerListIBM")); pTexCoordPointerListIBM == nil {
    IBM_vertex_array_lists = false
  }
  if pTexCoordPointervINTEL = (C.PTEXCOORDPOINTERVINTEL)(getProcAddr("glTexCoordPointervINTEL")); pTexCoordPointervINTEL == nil {
    INTEL_parallel_arrays = false
  }
  if pTexEnvxOES = (C.PTEXENVXOES)(getProcAddr("glTexEnvxOES")); pTexEnvxOES == nil {
    OES_fixed_point = false
  }
  if pTexEnvxvOES = (C.PTEXENVXVOES)(getProcAddr("glTexEnvxvOES")); pTexEnvxvOES == nil {
    OES_fixed_point = false
  }
  if pTexFilterFuncSGIS = (C.PTEXFILTERFUNCSGIS)(getProcAddr("glTexFilterFuncSGIS")); pTexFilterFuncSGIS == nil {
    SGIS_texture_filter4 = false
  }
  if pTexGenxOES = (C.PTEXGENXOES)(getProcAddr("glTexGenxOES")); pTexGenxOES == nil {
    OES_fixed_point = false
  }
  if pTexGenxvOES = (C.PTEXGENXVOES)(getProcAddr("glTexGenxvOES")); pTexGenxvOES == nil {
    OES_fixed_point = false
  }
  if pTexImage1D = (C.PTEXIMAGE1D)(getProcAddr("glTexImage1D")); pTexImage1D == nil {
    return errors.New("glTexImage1D")
  }
  if pTexImage2D = (C.PTEXIMAGE2D)(getProcAddr("glTexImage2D")); pTexImage2D == nil {
    return errors.New("glTexImage2D")
  }
  if pTexImage2DMultisample = (C.PTEXIMAGE2DMULTISAMPLE)(getProcAddr("glTexImage2DMultisample")); pTexImage2DMultisample == nil {
    ARB_texture_multisample = false
    return errors.New("glTexImage2DMultisample")
  }
  if pTexImage2DMultisampleCoverageNV = (C.PTEXIMAGE2DMULTISAMPLECOVERAGENV)(getProcAddr("glTexImage2DMultisampleCoverageNV")); pTexImage2DMultisampleCoverageNV == nil {
    NV_texture_multisample = false
  }
  if pTexImage3D = (C.PTEXIMAGE3D)(getProcAddr("glTexImage3D")); pTexImage3D == nil {
    return errors.New("glTexImage3D")
  }
  if pTexImage3DEXT = (C.PTEXIMAGE3DEXT)(getProcAddr("glTexImage3DEXT")); pTexImage3DEXT == nil {
    EXT_texture3D = false
  }
  if pTexImage3DMultisample = (C.PTEXIMAGE3DMULTISAMPLE)(getProcAddr("glTexImage3DMultisample")); pTexImage3DMultisample == nil {
    ARB_texture_multisample = false
    return errors.New("glTexImage3DMultisample")
  }
  if pTexImage3DMultisampleCoverageNV = (C.PTEXIMAGE3DMULTISAMPLECOVERAGENV)(getProcAddr("glTexImage3DMultisampleCoverageNV")); pTexImage3DMultisampleCoverageNV == nil {
    NV_texture_multisample = false
  }
  if pTexImage4DSGIS = (C.PTEXIMAGE4DSGIS)(getProcAddr("glTexImage4DSGIS")); pTexImage4DSGIS == nil {
    SGIS_texture4D = false
  }
  if pTexPageCommitmentARB = (C.PTEXPAGECOMMITMENTARB)(getProcAddr("glTexPageCommitmentARB")); pTexPageCommitmentARB == nil {
    ARB_sparse_texture = false
  }
  if pTexParameterIiv = (C.PTEXPARAMETERIIV)(getProcAddr("glTexParameterIiv")); pTexParameterIiv == nil {
    return errors.New("glTexParameterIiv")
  }
  if pTexParameterIivEXT = (C.PTEXPARAMETERIIVEXT)(getProcAddr("glTexParameterIivEXT")); pTexParameterIivEXT == nil {
    EXT_texture_integer = false
  }
  if pTexParameterIuiv = (C.PTEXPARAMETERIUIV)(getProcAddr("glTexParameterIuiv")); pTexParameterIuiv == nil {
    return errors.New("glTexParameterIuiv")
  }
  if pTexParameterIuivEXT = (C.PTEXPARAMETERIUIVEXT)(getProcAddr("glTexParameterIuivEXT")); pTexParameterIuivEXT == nil {
    EXT_texture_integer = false
  }
  if pTexParameterf = (C.PTEXPARAMETERF)(getProcAddr("glTexParameterf")); pTexParameterf == nil {
    return errors.New("glTexParameterf")
  }
  if pTexParameterfv = (C.PTEXPARAMETERFV)(getProcAddr("glTexParameterfv")); pTexParameterfv == nil {
    return errors.New("glTexParameterfv")
  }
  if pTexParameteri = (C.PTEXPARAMETERI)(getProcAddr("glTexParameteri")); pTexParameteri == nil {
    return errors.New("glTexParameteri")
  }
  if pTexParameteriv = (C.PTEXPARAMETERIV)(getProcAddr("glTexParameteriv")); pTexParameteriv == nil {
    return errors.New("glTexParameteriv")
  }
  if pTexParameterxOES = (C.PTEXPARAMETERXOES)(getProcAddr("glTexParameterxOES")); pTexParameterxOES == nil {
    OES_fixed_point = false
  }
  if pTexParameterxvOES = (C.PTEXPARAMETERXVOES)(getProcAddr("glTexParameterxvOES")); pTexParameterxvOES == nil {
    OES_fixed_point = false
  }
  if pTexRenderbufferNV = (C.PTEXRENDERBUFFERNV)(getProcAddr("glTexRenderbufferNV")); pTexRenderbufferNV == nil {
    NV_explicit_multisample = false
  }
  if pTexStorage1D = (C.PTEXSTORAGE1D)(getProcAddr("glTexStorage1D")); pTexStorage1D == nil {
    ARB_texture_storage = false
  }
  if pTexStorage2D = (C.PTEXSTORAGE2D)(getProcAddr("glTexStorage2D")); pTexStorage2D == nil {
    ARB_texture_storage = false
  }
  if pTexStorage2DMultisample = (C.PTEXSTORAGE2DMULTISAMPLE)(getProcAddr("glTexStorage2DMultisample")); pTexStorage2DMultisample == nil {
    ARB_texture_storage_multisample = false
  }
  if pTexStorage3D = (C.PTEXSTORAGE3D)(getProcAddr("glTexStorage3D")); pTexStorage3D == nil {
    ARB_texture_storage = false
  }
  if pTexStorage3DMultisample = (C.PTEXSTORAGE3DMULTISAMPLE)(getProcAddr("glTexStorage3DMultisample")); pTexStorage3DMultisample == nil {
    ARB_texture_storage_multisample = false
  }
  if pTexStorageSparseAMD = (C.PTEXSTORAGESPARSEAMD)(getProcAddr("glTexStorageSparseAMD")); pTexStorageSparseAMD == nil {
    AMD_sparse_texture = false
  }
  if pTexSubImage1D = (C.PTEXSUBIMAGE1D)(getProcAddr("glTexSubImage1D")); pTexSubImage1D == nil {
    return errors.New("glTexSubImage1D")
  }
  if pTexSubImage1DEXT = (C.PTEXSUBIMAGE1DEXT)(getProcAddr("glTexSubImage1DEXT")); pTexSubImage1DEXT == nil {
    EXT_subtexture = false
  }
  if pTexSubImage2D = (C.PTEXSUBIMAGE2D)(getProcAddr("glTexSubImage2D")); pTexSubImage2D == nil {
    return errors.New("glTexSubImage2D")
  }
  if pTexSubImage2DEXT = (C.PTEXSUBIMAGE2DEXT)(getProcAddr("glTexSubImage2DEXT")); pTexSubImage2DEXT == nil {
    EXT_subtexture = false
  }
  if pTexSubImage3D = (C.PTEXSUBIMAGE3D)(getProcAddr("glTexSubImage3D")); pTexSubImage3D == nil {
    return errors.New("glTexSubImage3D")
  }
  if pTexSubImage3DEXT = (C.PTEXSUBIMAGE3DEXT)(getProcAddr("glTexSubImage3DEXT")); pTexSubImage3DEXT == nil {
    EXT_texture3D = false
  }
  if pTexSubImage4DSGIS = (C.PTEXSUBIMAGE4DSGIS)(getProcAddr("glTexSubImage4DSGIS")); pTexSubImage4DSGIS == nil {
    SGIS_texture4D = false
  }
  if pTextureBarrierNV = (C.PTEXTUREBARRIERNV)(getProcAddr("glTextureBarrierNV")); pTextureBarrierNV == nil {
    NV_texture_barrier = false
  }
  if pTextureBufferEXT = (C.PTEXTUREBUFFEREXT)(getProcAddr("glTextureBufferEXT")); pTextureBufferEXT == nil {
    EXT_direct_state_access = false
  }
  if pTextureBufferRangeEXT = (C.PTEXTUREBUFFERRANGEEXT)(getProcAddr("glTextureBufferRangeEXT")); pTextureBufferRangeEXT == nil {
    EXT_direct_state_access = false
  }
  if pTextureColorMaskSGIS = (C.PTEXTURECOLORMASKSGIS)(getProcAddr("glTextureColorMaskSGIS")); pTextureColorMaskSGIS == nil {
    SGIS_texture_color_mask = false
  }
  if pTextureImage1DEXT = (C.PTEXTUREIMAGE1DEXT)(getProcAddr("glTextureImage1DEXT")); pTextureImage1DEXT == nil {
    EXT_direct_state_access = false
  }
  if pTextureImage2DEXT = (C.PTEXTUREIMAGE2DEXT)(getProcAddr("glTextureImage2DEXT")); pTextureImage2DEXT == nil {
    EXT_direct_state_access = false
  }
  if pTextureImage2DMultisampleCoverageNV = (C.PTEXTUREIMAGE2DMULTISAMPLECOVERAGENV)(getProcAddr("glTextureImage2DMultisampleCoverageNV")); pTextureImage2DMultisampleCoverageNV == nil {
    NV_texture_multisample = false
  }
  if pTextureImage2DMultisampleNV = (C.PTEXTUREIMAGE2DMULTISAMPLENV)(getProcAddr("glTextureImage2DMultisampleNV")); pTextureImage2DMultisampleNV == nil {
    NV_texture_multisample = false
  }
  if pTextureImage3DEXT = (C.PTEXTUREIMAGE3DEXT)(getProcAddr("glTextureImage3DEXT")); pTextureImage3DEXT == nil {
    EXT_direct_state_access = false
  }
  if pTextureImage3DMultisampleCoverageNV = (C.PTEXTUREIMAGE3DMULTISAMPLECOVERAGENV)(getProcAddr("glTextureImage3DMultisampleCoverageNV")); pTextureImage3DMultisampleCoverageNV == nil {
    NV_texture_multisample = false
  }
  if pTextureImage3DMultisampleNV = (C.PTEXTUREIMAGE3DMULTISAMPLENV)(getProcAddr("glTextureImage3DMultisampleNV")); pTextureImage3DMultisampleNV == nil {
    NV_texture_multisample = false
  }
  if pTextureLightEXT = (C.PTEXTURELIGHTEXT)(getProcAddr("glTextureLightEXT")); pTextureLightEXT == nil {
    EXT_light_texture = false
  }
  if pTextureMaterialEXT = (C.PTEXTUREMATERIALEXT)(getProcAddr("glTextureMaterialEXT")); pTextureMaterialEXT == nil {
    EXT_light_texture = false
  }
  if pTextureNormalEXT = (C.PTEXTURENORMALEXT)(getProcAddr("glTextureNormalEXT")); pTextureNormalEXT == nil {
    EXT_texture_perturb_normal = false
  }
  if pTexturePageCommitmentEXT = (C.PTEXTUREPAGECOMMITMENTEXT)(getProcAddr("glTexturePageCommitmentEXT")); pTexturePageCommitmentEXT == nil {
    EXT_direct_state_access = false
  }
  if pTextureParameterIivEXT = (C.PTEXTUREPARAMETERIIVEXT)(getProcAddr("glTextureParameterIivEXT")); pTextureParameterIivEXT == nil {
    EXT_direct_state_access = false
  }
  if pTextureParameterIuivEXT = (C.PTEXTUREPARAMETERIUIVEXT)(getProcAddr("glTextureParameterIuivEXT")); pTextureParameterIuivEXT == nil {
    EXT_direct_state_access = false
  }
  if pTextureParameterfEXT = (C.PTEXTUREPARAMETERFEXT)(getProcAddr("glTextureParameterfEXT")); pTextureParameterfEXT == nil {
    EXT_direct_state_access = false
  }
  if pTextureParameterfvEXT = (C.PTEXTUREPARAMETERFVEXT)(getProcAddr("glTextureParameterfvEXT")); pTextureParameterfvEXT == nil {
    EXT_direct_state_access = false
  }
  if pTextureParameteriEXT = (C.PTEXTUREPARAMETERIEXT)(getProcAddr("glTextureParameteriEXT")); pTextureParameteriEXT == nil {
    EXT_direct_state_access = false
  }
  if pTextureParameterivEXT = (C.PTEXTUREPARAMETERIVEXT)(getProcAddr("glTextureParameterivEXT")); pTextureParameterivEXT == nil {
    EXT_direct_state_access = false
  }
  if pTextureRangeAPPLE = (C.PTEXTURERANGEAPPLE)(getProcAddr("glTextureRangeAPPLE")); pTextureRangeAPPLE == nil {
    APPLE_texture_range = false
  }
  if pTextureRenderbufferEXT = (C.PTEXTURERENDERBUFFEREXT)(getProcAddr("glTextureRenderbufferEXT")); pTextureRenderbufferEXT == nil {
    EXT_direct_state_access = false
  }
  if pTextureStorage1DEXT = (C.PTEXTURESTORAGE1DEXT)(getProcAddr("glTextureStorage1DEXT")); pTextureStorage1DEXT == nil {
    EXT_direct_state_access = false
  }
  if pTextureStorage2DEXT = (C.PTEXTURESTORAGE2DEXT)(getProcAddr("glTextureStorage2DEXT")); pTextureStorage2DEXT == nil {
    EXT_direct_state_access = false
  }
  if pTextureStorage2DMultisampleEXT = (C.PTEXTURESTORAGE2DMULTISAMPLEEXT)(getProcAddr("glTextureStorage2DMultisampleEXT")); pTextureStorage2DMultisampleEXT == nil {
    EXT_direct_state_access = false
  }
  if pTextureStorage3DEXT = (C.PTEXTURESTORAGE3DEXT)(getProcAddr("glTextureStorage3DEXT")); pTextureStorage3DEXT == nil {
    EXT_direct_state_access = false
  }
  if pTextureStorage3DMultisampleEXT = (C.PTEXTURESTORAGE3DMULTISAMPLEEXT)(getProcAddr("glTextureStorage3DMultisampleEXT")); pTextureStorage3DMultisampleEXT == nil {
    EXT_direct_state_access = false
  }
  if pTextureStorageSparseAMD = (C.PTEXTURESTORAGESPARSEAMD)(getProcAddr("glTextureStorageSparseAMD")); pTextureStorageSparseAMD == nil {
    AMD_sparse_texture = false
  }
  if pTextureSubImage1DEXT = (C.PTEXTURESUBIMAGE1DEXT)(getProcAddr("glTextureSubImage1DEXT")); pTextureSubImage1DEXT == nil {
    EXT_direct_state_access = false
  }
  if pTextureSubImage2DEXT = (C.PTEXTURESUBIMAGE2DEXT)(getProcAddr("glTextureSubImage2DEXT")); pTextureSubImage2DEXT == nil {
    EXT_direct_state_access = false
  }
  if pTextureSubImage3DEXT = (C.PTEXTURESUBIMAGE3DEXT)(getProcAddr("glTextureSubImage3DEXT")); pTextureSubImage3DEXT == nil {
    EXT_direct_state_access = false
  }
  if pTextureView = (C.PTEXTUREVIEW)(getProcAddr("glTextureView")); pTextureView == nil {
    ARB_texture_view = false
  }
  if pTrackMatrixNV = (C.PTRACKMATRIXNV)(getProcAddr("glTrackMatrixNV")); pTrackMatrixNV == nil {
    NV_vertex_program = false
  }
  if pTransformFeedbackAttribsNV = (C.PTRANSFORMFEEDBACKATTRIBSNV)(getProcAddr("glTransformFeedbackAttribsNV")); pTransformFeedbackAttribsNV == nil {
    NV_transform_feedback = false
  }
  if pTransformFeedbackStreamAttribsNV = (C.PTRANSFORMFEEDBACKSTREAMATTRIBSNV)(getProcAddr("glTransformFeedbackStreamAttribsNV")); pTransformFeedbackStreamAttribsNV == nil {
    NV_transform_feedback = false
  }
  if pTransformFeedbackVaryings = (C.PTRANSFORMFEEDBACKVARYINGS)(getProcAddr("glTransformFeedbackVaryings")); pTransformFeedbackVaryings == nil {
    return errors.New("glTransformFeedbackVaryings")
  }
  if pTransformFeedbackVaryingsEXT = (C.PTRANSFORMFEEDBACKVARYINGSEXT)(getProcAddr("glTransformFeedbackVaryingsEXT")); pTransformFeedbackVaryingsEXT == nil {
    EXT_transform_feedback = false
  }
  if pTransformFeedbackVaryingsNV = (C.PTRANSFORMFEEDBACKVARYINGSNV)(getProcAddr("glTransformFeedbackVaryingsNV")); pTransformFeedbackVaryingsNV == nil {
    NV_transform_feedback = false
  }
  if pTransformPathNV = (C.PTRANSFORMPATHNV)(getProcAddr("glTransformPathNV")); pTransformPathNV == nil {
    NV_path_rendering = false
  }
  if pTranslatexOES = (C.PTRANSLATEXOES)(getProcAddr("glTranslatexOES")); pTranslatexOES == nil {
    OES_fixed_point = false
  }
  if pUniform1d = (C.PUNIFORM1D)(getProcAddr("glUniform1d")); pUniform1d == nil {
    ARB_gpu_shader_fp64 = false
    return errors.New("glUniform1d")
  }
  if pUniform1dv = (C.PUNIFORM1DV)(getProcAddr("glUniform1dv")); pUniform1dv == nil {
    ARB_gpu_shader_fp64 = false
    return errors.New("glUniform1dv")
  }
  if pUniform1f = (C.PUNIFORM1F)(getProcAddr("glUniform1f")); pUniform1f == nil {
    return errors.New("glUniform1f")
  }
  if pUniform1fARB = (C.PUNIFORM1FARB)(getProcAddr("glUniform1fARB")); pUniform1fARB == nil {
    ARB_shader_objects = false
  }
  if pUniform1fv = (C.PUNIFORM1FV)(getProcAddr("glUniform1fv")); pUniform1fv == nil {
    return errors.New("glUniform1fv")
  }
  if pUniform1fvARB = (C.PUNIFORM1FVARB)(getProcAddr("glUniform1fvARB")); pUniform1fvARB == nil {
    ARB_shader_objects = false
  }
  if pUniform1i = (C.PUNIFORM1I)(getProcAddr("glUniform1i")); pUniform1i == nil {
    return errors.New("glUniform1i")
  }
  if pUniform1i64NV = (C.PUNIFORM1I64NV)(getProcAddr("glUniform1i64NV")); pUniform1i64NV == nil {
    AMD_gpu_shader_int64 = false
    NV_gpu_shader5 = false
  }
  if pUniform1i64vNV = (C.PUNIFORM1I64VNV)(getProcAddr("glUniform1i64vNV")); pUniform1i64vNV == nil {
    AMD_gpu_shader_int64 = false
    NV_gpu_shader5 = false
  }
  if pUniform1iARB = (C.PUNIFORM1IARB)(getProcAddr("glUniform1iARB")); pUniform1iARB == nil {
    ARB_shader_objects = false
  }
  if pUniform1iv = (C.PUNIFORM1IV)(getProcAddr("glUniform1iv")); pUniform1iv == nil {
    return errors.New("glUniform1iv")
  }
  if pUniform1ivARB = (C.PUNIFORM1IVARB)(getProcAddr("glUniform1ivARB")); pUniform1ivARB == nil {
    ARB_shader_objects = false
  }
  if pUniform1ui = (C.PUNIFORM1UI)(getProcAddr("glUniform1ui")); pUniform1ui == nil {
    return errors.New("glUniform1ui")
  }
  if pUniform1ui64NV = (C.PUNIFORM1UI64NV)(getProcAddr("glUniform1ui64NV")); pUniform1ui64NV == nil {
    AMD_gpu_shader_int64 = false
    NV_gpu_shader5 = false
  }
  if pUniform1ui64vNV = (C.PUNIFORM1UI64VNV)(getProcAddr("glUniform1ui64vNV")); pUniform1ui64vNV == nil {
    AMD_gpu_shader_int64 = false
    NV_gpu_shader5 = false
  }
  if pUniform1uiEXT = (C.PUNIFORM1UIEXT)(getProcAddr("glUniform1uiEXT")); pUniform1uiEXT == nil {
    EXT_gpu_shader4 = false
  }
  if pUniform1uiv = (C.PUNIFORM1UIV)(getProcAddr("glUniform1uiv")); pUniform1uiv == nil {
    return errors.New("glUniform1uiv")
  }
  if pUniform1uivEXT = (C.PUNIFORM1UIVEXT)(getProcAddr("glUniform1uivEXT")); pUniform1uivEXT == nil {
    EXT_gpu_shader4 = false
  }
  if pUniform2d = (C.PUNIFORM2D)(getProcAddr("glUniform2d")); pUniform2d == nil {
    ARB_gpu_shader_fp64 = false
    return errors.New("glUniform2d")
  }
  if pUniform2dv = (C.PUNIFORM2DV)(getProcAddr("glUniform2dv")); pUniform2dv == nil {
    ARB_gpu_shader_fp64 = false
    return errors.New("glUniform2dv")
  }
  if pUniform2f = (C.PUNIFORM2F)(getProcAddr("glUniform2f")); pUniform2f == nil {
    return errors.New("glUniform2f")
  }
  if pUniform2fARB = (C.PUNIFORM2FARB)(getProcAddr("glUniform2fARB")); pUniform2fARB == nil {
    ARB_shader_objects = false
  }
  if pUniform2fv = (C.PUNIFORM2FV)(getProcAddr("glUniform2fv")); pUniform2fv == nil {
    return errors.New("glUniform2fv")
  }
  if pUniform2fvARB = (C.PUNIFORM2FVARB)(getProcAddr("glUniform2fvARB")); pUniform2fvARB == nil {
    ARB_shader_objects = false
  }
  if pUniform2i = (C.PUNIFORM2I)(getProcAddr("glUniform2i")); pUniform2i == nil {
    return errors.New("glUniform2i")
  }
  if pUniform2i64NV = (C.PUNIFORM2I64NV)(getProcAddr("glUniform2i64NV")); pUniform2i64NV == nil {
    AMD_gpu_shader_int64 = false
    NV_gpu_shader5 = false
  }
  if pUniform2i64vNV = (C.PUNIFORM2I64VNV)(getProcAddr("glUniform2i64vNV")); pUniform2i64vNV == nil {
    AMD_gpu_shader_int64 = false
    NV_gpu_shader5 = false
  }
  if pUniform2iARB = (C.PUNIFORM2IARB)(getProcAddr("glUniform2iARB")); pUniform2iARB == nil {
    ARB_shader_objects = false
  }
  if pUniform2iv = (C.PUNIFORM2IV)(getProcAddr("glUniform2iv")); pUniform2iv == nil {
    return errors.New("glUniform2iv")
  }
  if pUniform2ivARB = (C.PUNIFORM2IVARB)(getProcAddr("glUniform2ivARB")); pUniform2ivARB == nil {
    ARB_shader_objects = false
  }
  if pUniform2ui = (C.PUNIFORM2UI)(getProcAddr("glUniform2ui")); pUniform2ui == nil {
    return errors.New("glUniform2ui")
  }
  if pUniform2ui64NV = (C.PUNIFORM2UI64NV)(getProcAddr("glUniform2ui64NV")); pUniform2ui64NV == nil {
    AMD_gpu_shader_int64 = false
    NV_gpu_shader5 = false
  }
  if pUniform2ui64vNV = (C.PUNIFORM2UI64VNV)(getProcAddr("glUniform2ui64vNV")); pUniform2ui64vNV == nil {
    AMD_gpu_shader_int64 = false
    NV_gpu_shader5 = false
  }
  if pUniform2uiEXT = (C.PUNIFORM2UIEXT)(getProcAddr("glUniform2uiEXT")); pUniform2uiEXT == nil {
    EXT_gpu_shader4 = false
  }
  if pUniform2uiv = (C.PUNIFORM2UIV)(getProcAddr("glUniform2uiv")); pUniform2uiv == nil {
    return errors.New("glUniform2uiv")
  }
  if pUniform2uivEXT = (C.PUNIFORM2UIVEXT)(getProcAddr("glUniform2uivEXT")); pUniform2uivEXT == nil {
    EXT_gpu_shader4 = false
  }
  if pUniform3d = (C.PUNIFORM3D)(getProcAddr("glUniform3d")); pUniform3d == nil {
    ARB_gpu_shader_fp64 = false
    return errors.New("glUniform3d")
  }
  if pUniform3dv = (C.PUNIFORM3DV)(getProcAddr("glUniform3dv")); pUniform3dv == nil {
    ARB_gpu_shader_fp64 = false
    return errors.New("glUniform3dv")
  }
  if pUniform3f = (C.PUNIFORM3F)(getProcAddr("glUniform3f")); pUniform3f == nil {
    return errors.New("glUniform3f")
  }
  if pUniform3fARB = (C.PUNIFORM3FARB)(getProcAddr("glUniform3fARB")); pUniform3fARB == nil {
    ARB_shader_objects = false
  }
  if pUniform3fv = (C.PUNIFORM3FV)(getProcAddr("glUniform3fv")); pUniform3fv == nil {
    return errors.New("glUniform3fv")
  }
  if pUniform3fvARB = (C.PUNIFORM3FVARB)(getProcAddr("glUniform3fvARB")); pUniform3fvARB == nil {
    ARB_shader_objects = false
  }
  if pUniform3i = (C.PUNIFORM3I)(getProcAddr("glUniform3i")); pUniform3i == nil {
    return errors.New("glUniform3i")
  }
  if pUniform3i64NV = (C.PUNIFORM3I64NV)(getProcAddr("glUniform3i64NV")); pUniform3i64NV == nil {
    AMD_gpu_shader_int64 = false
    NV_gpu_shader5 = false
  }
  if pUniform3i64vNV = (C.PUNIFORM3I64VNV)(getProcAddr("glUniform3i64vNV")); pUniform3i64vNV == nil {
    AMD_gpu_shader_int64 = false
    NV_gpu_shader5 = false
  }
  if pUniform3iARB = (C.PUNIFORM3IARB)(getProcAddr("glUniform3iARB")); pUniform3iARB == nil {
    ARB_shader_objects = false
  }
  if pUniform3iv = (C.PUNIFORM3IV)(getProcAddr("glUniform3iv")); pUniform3iv == nil {
    return errors.New("glUniform3iv")
  }
  if pUniform3ivARB = (C.PUNIFORM3IVARB)(getProcAddr("glUniform3ivARB")); pUniform3ivARB == nil {
    ARB_shader_objects = false
  }
  if pUniform3ui = (C.PUNIFORM3UI)(getProcAddr("glUniform3ui")); pUniform3ui == nil {
    return errors.New("glUniform3ui")
  }
  if pUniform3ui64NV = (C.PUNIFORM3UI64NV)(getProcAddr("glUniform3ui64NV")); pUniform3ui64NV == nil {
    AMD_gpu_shader_int64 = false
    NV_gpu_shader5 = false
  }
  if pUniform3ui64vNV = (C.PUNIFORM3UI64VNV)(getProcAddr("glUniform3ui64vNV")); pUniform3ui64vNV == nil {
    AMD_gpu_shader_int64 = false
    NV_gpu_shader5 = false
  }
  if pUniform3uiEXT = (C.PUNIFORM3UIEXT)(getProcAddr("glUniform3uiEXT")); pUniform3uiEXT == nil {
    EXT_gpu_shader4 = false
  }
  if pUniform3uiv = (C.PUNIFORM3UIV)(getProcAddr("glUniform3uiv")); pUniform3uiv == nil {
    return errors.New("glUniform3uiv")
  }
  if pUniform3uivEXT = (C.PUNIFORM3UIVEXT)(getProcAddr("glUniform3uivEXT")); pUniform3uivEXT == nil {
    EXT_gpu_shader4 = false
  }
  if pUniform4d = (C.PUNIFORM4D)(getProcAddr("glUniform4d")); pUniform4d == nil {
    ARB_gpu_shader_fp64 = false
    return errors.New("glUniform4d")
  }
  if pUniform4dv = (C.PUNIFORM4DV)(getProcAddr("glUniform4dv")); pUniform4dv == nil {
    ARB_gpu_shader_fp64 = false
    return errors.New("glUniform4dv")
  }
  if pUniform4f = (C.PUNIFORM4F)(getProcAddr("glUniform4f")); pUniform4f == nil {
    return errors.New("glUniform4f")
  }
  if pUniform4fARB = (C.PUNIFORM4FARB)(getProcAddr("glUniform4fARB")); pUniform4fARB == nil {
    ARB_shader_objects = false
  }
  if pUniform4fv = (C.PUNIFORM4FV)(getProcAddr("glUniform4fv")); pUniform4fv == nil {
    return errors.New("glUniform4fv")
  }
  if pUniform4fvARB = (C.PUNIFORM4FVARB)(getProcAddr("glUniform4fvARB")); pUniform4fvARB == nil {
    ARB_shader_objects = false
  }
  if pUniform4i = (C.PUNIFORM4I)(getProcAddr("glUniform4i")); pUniform4i == nil {
    return errors.New("glUniform4i")
  }
  if pUniform4i64NV = (C.PUNIFORM4I64NV)(getProcAddr("glUniform4i64NV")); pUniform4i64NV == nil {
    AMD_gpu_shader_int64 = false
    NV_gpu_shader5 = false
  }
  if pUniform4i64vNV = (C.PUNIFORM4I64VNV)(getProcAddr("glUniform4i64vNV")); pUniform4i64vNV == nil {
    AMD_gpu_shader_int64 = false
    NV_gpu_shader5 = false
  }
  if pUniform4iARB = (C.PUNIFORM4IARB)(getProcAddr("glUniform4iARB")); pUniform4iARB == nil {
    ARB_shader_objects = false
  }
  if pUniform4iv = (C.PUNIFORM4IV)(getProcAddr("glUniform4iv")); pUniform4iv == nil {
    return errors.New("glUniform4iv")
  }
  if pUniform4ivARB = (C.PUNIFORM4IVARB)(getProcAddr("glUniform4ivARB")); pUniform4ivARB == nil {
    ARB_shader_objects = false
  }
  if pUniform4ui = (C.PUNIFORM4UI)(getProcAddr("glUniform4ui")); pUniform4ui == nil {
    return errors.New("glUniform4ui")
  }
  if pUniform4ui64NV = (C.PUNIFORM4UI64NV)(getProcAddr("glUniform4ui64NV")); pUniform4ui64NV == nil {
    AMD_gpu_shader_int64 = false
    NV_gpu_shader5 = false
  }
  if pUniform4ui64vNV = (C.PUNIFORM4UI64VNV)(getProcAddr("glUniform4ui64vNV")); pUniform4ui64vNV == nil {
    AMD_gpu_shader_int64 = false
    NV_gpu_shader5 = false
  }
  if pUniform4uiEXT = (C.PUNIFORM4UIEXT)(getProcAddr("glUniform4uiEXT")); pUniform4uiEXT == nil {
    EXT_gpu_shader4 = false
  }
  if pUniform4uiv = (C.PUNIFORM4UIV)(getProcAddr("glUniform4uiv")); pUniform4uiv == nil {
    return errors.New("glUniform4uiv")
  }
  if pUniform4uivEXT = (C.PUNIFORM4UIVEXT)(getProcAddr("glUniform4uivEXT")); pUniform4uivEXT == nil {
    EXT_gpu_shader4 = false
  }
  if pUniformBlockBinding = (C.PUNIFORMBLOCKBINDING)(getProcAddr("glUniformBlockBinding")); pUniformBlockBinding == nil {
    ARB_uniform_buffer_object = false
    return errors.New("glUniformBlockBinding")
  }
  if pUniformBufferEXT = (C.PUNIFORMBUFFEREXT)(getProcAddr("glUniformBufferEXT")); pUniformBufferEXT == nil {
    EXT_bindable_uniform = false
  }
  if pUniformHandleui64ARB = (C.PUNIFORMHANDLEUI64ARB)(getProcAddr("glUniformHandleui64ARB")); pUniformHandleui64ARB == nil {
    ARB_bindless_texture = false
  }
  if pUniformHandleui64NV = (C.PUNIFORMHANDLEUI64NV)(getProcAddr("glUniformHandleui64NV")); pUniformHandleui64NV == nil {
    NV_bindless_texture = false
  }
  if pUniformHandleui64vARB = (C.PUNIFORMHANDLEUI64VARB)(getProcAddr("glUniformHandleui64vARB")); pUniformHandleui64vARB == nil {
    ARB_bindless_texture = false
  }
  if pUniformHandleui64vNV = (C.PUNIFORMHANDLEUI64VNV)(getProcAddr("glUniformHandleui64vNV")); pUniformHandleui64vNV == nil {
    NV_bindless_texture = false
  }
  if pUniformMatrix2dv = (C.PUNIFORMMATRIX2DV)(getProcAddr("glUniformMatrix2dv")); pUniformMatrix2dv == nil {
    ARB_gpu_shader_fp64 = false
    return errors.New("glUniformMatrix2dv")
  }
  if pUniformMatrix2fv = (C.PUNIFORMMATRIX2FV)(getProcAddr("glUniformMatrix2fv")); pUniformMatrix2fv == nil {
    return errors.New("glUniformMatrix2fv")
  }
  if pUniformMatrix2fvARB = (C.PUNIFORMMATRIX2FVARB)(getProcAddr("glUniformMatrix2fvARB")); pUniformMatrix2fvARB == nil {
    ARB_shader_objects = false
  }
  if pUniformMatrix2x3dv = (C.PUNIFORMMATRIX2X3DV)(getProcAddr("glUniformMatrix2x3dv")); pUniformMatrix2x3dv == nil {
    ARB_gpu_shader_fp64 = false
    return errors.New("glUniformMatrix2x3dv")
  }
  if pUniformMatrix2x3fv = (C.PUNIFORMMATRIX2X3FV)(getProcAddr("glUniformMatrix2x3fv")); pUniformMatrix2x3fv == nil {
    return errors.New("glUniformMatrix2x3fv")
  }
  if pUniformMatrix2x4dv = (C.PUNIFORMMATRIX2X4DV)(getProcAddr("glUniformMatrix2x4dv")); pUniformMatrix2x4dv == nil {
    ARB_gpu_shader_fp64 = false
    return errors.New("glUniformMatrix2x4dv")
  }
  if pUniformMatrix2x4fv = (C.PUNIFORMMATRIX2X4FV)(getProcAddr("glUniformMatrix2x4fv")); pUniformMatrix2x4fv == nil {
    return errors.New("glUniformMatrix2x4fv")
  }
  if pUniformMatrix3dv = (C.PUNIFORMMATRIX3DV)(getProcAddr("glUniformMatrix3dv")); pUniformMatrix3dv == nil {
    ARB_gpu_shader_fp64 = false
    return errors.New("glUniformMatrix3dv")
  }
  if pUniformMatrix3fv = (C.PUNIFORMMATRIX3FV)(getProcAddr("glUniformMatrix3fv")); pUniformMatrix3fv == nil {
    return errors.New("glUniformMatrix3fv")
  }
  if pUniformMatrix3fvARB = (C.PUNIFORMMATRIX3FVARB)(getProcAddr("glUniformMatrix3fvARB")); pUniformMatrix3fvARB == nil {
    ARB_shader_objects = false
  }
  if pUniformMatrix3x2dv = (C.PUNIFORMMATRIX3X2DV)(getProcAddr("glUniformMatrix3x2dv")); pUniformMatrix3x2dv == nil {
    ARB_gpu_shader_fp64 = false
    return errors.New("glUniformMatrix3x2dv")
  }
  if pUniformMatrix3x2fv = (C.PUNIFORMMATRIX3X2FV)(getProcAddr("glUniformMatrix3x2fv")); pUniformMatrix3x2fv == nil {
    return errors.New("glUniformMatrix3x2fv")
  }
  if pUniformMatrix3x4dv = (C.PUNIFORMMATRIX3X4DV)(getProcAddr("glUniformMatrix3x4dv")); pUniformMatrix3x4dv == nil {
    ARB_gpu_shader_fp64 = false
    return errors.New("glUniformMatrix3x4dv")
  }
  if pUniformMatrix3x4fv = (C.PUNIFORMMATRIX3X4FV)(getProcAddr("glUniformMatrix3x4fv")); pUniformMatrix3x4fv == nil {
    return errors.New("glUniformMatrix3x4fv")
  }
  if pUniformMatrix4dv = (C.PUNIFORMMATRIX4DV)(getProcAddr("glUniformMatrix4dv")); pUniformMatrix4dv == nil {
    ARB_gpu_shader_fp64 = false
    return errors.New("glUniformMatrix4dv")
  }
  if pUniformMatrix4fv = (C.PUNIFORMMATRIX4FV)(getProcAddr("glUniformMatrix4fv")); pUniformMatrix4fv == nil {
    return errors.New("glUniformMatrix4fv")
  }
  if pUniformMatrix4fvARB = (C.PUNIFORMMATRIX4FVARB)(getProcAddr("glUniformMatrix4fvARB")); pUniformMatrix4fvARB == nil {
    ARB_shader_objects = false
  }
  if pUniformMatrix4x2dv = (C.PUNIFORMMATRIX4X2DV)(getProcAddr("glUniformMatrix4x2dv")); pUniformMatrix4x2dv == nil {
    ARB_gpu_shader_fp64 = false
    return errors.New("glUniformMatrix4x2dv")
  }
  if pUniformMatrix4x2fv = (C.PUNIFORMMATRIX4X2FV)(getProcAddr("glUniformMatrix4x2fv")); pUniformMatrix4x2fv == nil {
    return errors.New("glUniformMatrix4x2fv")
  }
  if pUniformMatrix4x3dv = (C.PUNIFORMMATRIX4X3DV)(getProcAddr("glUniformMatrix4x3dv")); pUniformMatrix4x3dv == nil {
    ARB_gpu_shader_fp64 = false
    return errors.New("glUniformMatrix4x3dv")
  }
  if pUniformMatrix4x3fv = (C.PUNIFORMMATRIX4X3FV)(getProcAddr("glUniformMatrix4x3fv")); pUniformMatrix4x3fv == nil {
    return errors.New("glUniformMatrix4x3fv")
  }
  if pUniformSubroutinesuiv = (C.PUNIFORMSUBROUTINESUIV)(getProcAddr("glUniformSubroutinesuiv")); pUniformSubroutinesuiv == nil {
    ARB_shader_subroutine = false
    return errors.New("glUniformSubroutinesuiv")
  }
  if pUniformui64NV = (C.PUNIFORMUI64NV)(getProcAddr("glUniformui64NV")); pUniformui64NV == nil {
    NV_shader_buffer_load = false
  }
  if pUniformui64vNV = (C.PUNIFORMUI64VNV)(getProcAddr("glUniformui64vNV")); pUniformui64vNV == nil {
    NV_shader_buffer_load = false
  }
  if pUnlockArraysEXT = (C.PUNLOCKARRAYSEXT)(getProcAddr("glUnlockArraysEXT")); pUnlockArraysEXT == nil {
    EXT_compiled_vertex_array = false
  }
  if pUnmapBuffer = (C.PUNMAPBUFFER)(getProcAddr("glUnmapBuffer")); pUnmapBuffer == nil {
    return errors.New("glUnmapBuffer")
  }
  if pUnmapBufferARB = (C.PUNMAPBUFFERARB)(getProcAddr("glUnmapBufferARB")); pUnmapBufferARB == nil {
    ARB_vertex_buffer_object = false
  }
  if pUnmapNamedBufferEXT = (C.PUNMAPNAMEDBUFFEREXT)(getProcAddr("glUnmapNamedBufferEXT")); pUnmapNamedBufferEXT == nil {
    EXT_direct_state_access = false
  }
  if pUnmapObjectBufferATI = (C.PUNMAPOBJECTBUFFERATI)(getProcAddr("glUnmapObjectBufferATI")); pUnmapObjectBufferATI == nil {
    ATI_map_object_buffer = false
  }
  if pUnmapTexture2DINTEL = (C.PUNMAPTEXTURE2DINTEL)(getProcAddr("glUnmapTexture2DINTEL")); pUnmapTexture2DINTEL == nil {
    INTEL_map_texture = false
  }
  if pUpdateObjectBufferATI = (C.PUPDATEOBJECTBUFFERATI)(getProcAddr("glUpdateObjectBufferATI")); pUpdateObjectBufferATI == nil {
    ATI_vertex_array_object = false
  }
  if pUseProgram = (C.PUSEPROGRAM)(getProcAddr("glUseProgram")); pUseProgram == nil {
    return errors.New("glUseProgram")
  }
  if pUseProgramObjectARB = (C.PUSEPROGRAMOBJECTARB)(getProcAddr("glUseProgramObjectARB")); pUseProgramObjectARB == nil {
    ARB_shader_objects = false
  }
  if pUseProgramStages = (C.PUSEPROGRAMSTAGES)(getProcAddr("glUseProgramStages")); pUseProgramStages == nil {
    ARB_separate_shader_objects = false
    return errors.New("glUseProgramStages")
  }
  if pUseProgramStagesEXT = (C.PUSEPROGRAMSTAGESEXT)(getProcAddr("glUseProgramStagesEXT")); pUseProgramStagesEXT == nil {
    EXT_separate_shader_objects = false
  }
  if pUseShaderProgramEXT = (C.PUSESHADERPROGRAMEXT)(getProcAddr("glUseShaderProgramEXT")); pUseShaderProgramEXT == nil {
    EXT_separate_shader_objects = false
  }
  if pVDPAUFiniNV = (C.PVDPAUFININV)(getProcAddr("glVDPAUFiniNV")); pVDPAUFiniNV == nil {
    NV_vdpau_interop = false
  }
  if pVDPAUGetSurfaceivNV = (C.PVDPAUGETSURFACEIVNV)(getProcAddr("glVDPAUGetSurfaceivNV")); pVDPAUGetSurfaceivNV == nil {
    NV_vdpau_interop = false
  }
  if pVDPAUInitNV = (C.PVDPAUINITNV)(getProcAddr("glVDPAUInitNV")); pVDPAUInitNV == nil {
    NV_vdpau_interop = false
  }
  if pVDPAUIsSurfaceNV = (C.PVDPAUISSURFACENV)(getProcAddr("glVDPAUIsSurfaceNV")); pVDPAUIsSurfaceNV == nil {
    NV_vdpau_interop = false
  }
  if pVDPAUMapSurfacesNV = (C.PVDPAUMAPSURFACESNV)(getProcAddr("glVDPAUMapSurfacesNV")); pVDPAUMapSurfacesNV == nil {
    NV_vdpau_interop = false
  }
  if pVDPAURegisterOutputSurfaceNV = (C.PVDPAUREGISTEROUTPUTSURFACENV)(getProcAddr("glVDPAURegisterOutputSurfaceNV")); pVDPAURegisterOutputSurfaceNV == nil {
    NV_vdpau_interop = false
  }
  if pVDPAURegisterVideoSurfaceNV = (C.PVDPAUREGISTERVIDEOSURFACENV)(getProcAddr("glVDPAURegisterVideoSurfaceNV")); pVDPAURegisterVideoSurfaceNV == nil {
    NV_vdpau_interop = false
  }
  if pVDPAUSurfaceAccessNV = (C.PVDPAUSURFACEACCESSNV)(getProcAddr("glVDPAUSurfaceAccessNV")); pVDPAUSurfaceAccessNV == nil {
    NV_vdpau_interop = false
  }
  if pVDPAUUnmapSurfacesNV = (C.PVDPAUUNMAPSURFACESNV)(getProcAddr("glVDPAUUnmapSurfacesNV")); pVDPAUUnmapSurfacesNV == nil {
    NV_vdpau_interop = false
  }
  if pVDPAUUnregisterSurfaceNV = (C.PVDPAUUNREGISTERSURFACENV)(getProcAddr("glVDPAUUnregisterSurfaceNV")); pVDPAUUnregisterSurfaceNV == nil {
    NV_vdpau_interop = false
  }
  if pValidateProgram = (C.PVALIDATEPROGRAM)(getProcAddr("glValidateProgram")); pValidateProgram == nil {
    return errors.New("glValidateProgram")
  }
  if pValidateProgramARB = (C.PVALIDATEPROGRAMARB)(getProcAddr("glValidateProgramARB")); pValidateProgramARB == nil {
    ARB_shader_objects = false
  }
  if pValidateProgramPipeline = (C.PVALIDATEPROGRAMPIPELINE)(getProcAddr("glValidateProgramPipeline")); pValidateProgramPipeline == nil {
    ARB_separate_shader_objects = false
    return errors.New("glValidateProgramPipeline")
  }
  if pValidateProgramPipelineEXT = (C.PVALIDATEPROGRAMPIPELINEEXT)(getProcAddr("glValidateProgramPipelineEXT")); pValidateProgramPipelineEXT == nil {
    EXT_separate_shader_objects = false
  }
  if pVariantArrayObjectATI = (C.PVARIANTARRAYOBJECTATI)(getProcAddr("glVariantArrayObjectATI")); pVariantArrayObjectATI == nil {
    ATI_vertex_array_object = false
  }
  if pVariantPointerEXT = (C.PVARIANTPOINTEREXT)(getProcAddr("glVariantPointerEXT")); pVariantPointerEXT == nil {
    EXT_vertex_shader = false
  }
  if pVariantbvEXT = (C.PVARIANTBVEXT)(getProcAddr("glVariantbvEXT")); pVariantbvEXT == nil {
    EXT_vertex_shader = false
  }
  if pVariantdvEXT = (C.PVARIANTDVEXT)(getProcAddr("glVariantdvEXT")); pVariantdvEXT == nil {
    EXT_vertex_shader = false
  }
  if pVariantfvEXT = (C.PVARIANTFVEXT)(getProcAddr("glVariantfvEXT")); pVariantfvEXT == nil {
    EXT_vertex_shader = false
  }
  if pVariantivEXT = (C.PVARIANTIVEXT)(getProcAddr("glVariantivEXT")); pVariantivEXT == nil {
    EXT_vertex_shader = false
  }
  if pVariantsvEXT = (C.PVARIANTSVEXT)(getProcAddr("glVariantsvEXT")); pVariantsvEXT == nil {
    EXT_vertex_shader = false
  }
  if pVariantubvEXT = (C.PVARIANTUBVEXT)(getProcAddr("glVariantubvEXT")); pVariantubvEXT == nil {
    EXT_vertex_shader = false
  }
  if pVariantuivEXT = (C.PVARIANTUIVEXT)(getProcAddr("glVariantuivEXT")); pVariantuivEXT == nil {
    EXT_vertex_shader = false
  }
  if pVariantusvEXT = (C.PVARIANTUSVEXT)(getProcAddr("glVariantusvEXT")); pVariantusvEXT == nil {
    EXT_vertex_shader = false
  }
  if pVertex2bOES = (C.PVERTEX2BOES)(getProcAddr("glVertex2bOES")); pVertex2bOES == nil {
    OES_byte_coordinates = false
  }
  if pVertex2bvOES = (C.PVERTEX2BVOES)(getProcAddr("glVertex2bvOES")); pVertex2bvOES == nil {
    OES_byte_coordinates = false
  }
  if pVertex2hNV = (C.PVERTEX2HNV)(getProcAddr("glVertex2hNV")); pVertex2hNV == nil {
    NV_half_float = false
  }
  if pVertex2hvNV = (C.PVERTEX2HVNV)(getProcAddr("glVertex2hvNV")); pVertex2hvNV == nil {
    NV_half_float = false
  }
  if pVertex2xOES = (C.PVERTEX2XOES)(getProcAddr("glVertex2xOES")); pVertex2xOES == nil {
    OES_fixed_point = false
  }
  if pVertex2xvOES = (C.PVERTEX2XVOES)(getProcAddr("glVertex2xvOES")); pVertex2xvOES == nil {
    OES_fixed_point = false
  }
  if pVertex3bOES = (C.PVERTEX3BOES)(getProcAddr("glVertex3bOES")); pVertex3bOES == nil {
    OES_byte_coordinates = false
  }
  if pVertex3bvOES = (C.PVERTEX3BVOES)(getProcAddr("glVertex3bvOES")); pVertex3bvOES == nil {
    OES_byte_coordinates = false
  }
  if pVertex3hNV = (C.PVERTEX3HNV)(getProcAddr("glVertex3hNV")); pVertex3hNV == nil {
    NV_half_float = false
  }
  if pVertex3hvNV = (C.PVERTEX3HVNV)(getProcAddr("glVertex3hvNV")); pVertex3hvNV == nil {
    NV_half_float = false
  }
  if pVertex3xOES = (C.PVERTEX3XOES)(getProcAddr("glVertex3xOES")); pVertex3xOES == nil {
    OES_fixed_point = false
  }
  if pVertex3xvOES = (C.PVERTEX3XVOES)(getProcAddr("glVertex3xvOES")); pVertex3xvOES == nil {
    OES_fixed_point = false
  }
  if pVertex4bOES = (C.PVERTEX4BOES)(getProcAddr("glVertex4bOES")); pVertex4bOES == nil {
    OES_byte_coordinates = false
  }
  if pVertex4bvOES = (C.PVERTEX4BVOES)(getProcAddr("glVertex4bvOES")); pVertex4bvOES == nil {
    OES_byte_coordinates = false
  }
  if pVertex4hNV = (C.PVERTEX4HNV)(getProcAddr("glVertex4hNV")); pVertex4hNV == nil {
    NV_half_float = false
  }
  if pVertex4hvNV = (C.PVERTEX4HVNV)(getProcAddr("glVertex4hvNV")); pVertex4hvNV == nil {
    NV_half_float = false
  }
  if pVertex4xOES = (C.PVERTEX4XOES)(getProcAddr("glVertex4xOES")); pVertex4xOES == nil {
    OES_fixed_point = false
  }
  if pVertex4xvOES = (C.PVERTEX4XVOES)(getProcAddr("glVertex4xvOES")); pVertex4xvOES == nil {
    OES_fixed_point = false
  }
  if pVertexArrayBindVertexBufferEXT = (C.PVERTEXARRAYBINDVERTEXBUFFEREXT)(getProcAddr("glVertexArrayBindVertexBufferEXT")); pVertexArrayBindVertexBufferEXT == nil {
    EXT_direct_state_access = false
  }
  if pVertexArrayColorOffsetEXT = (C.PVERTEXARRAYCOLOROFFSETEXT)(getProcAddr("glVertexArrayColorOffsetEXT")); pVertexArrayColorOffsetEXT == nil {
    EXT_direct_state_access = false
  }
  if pVertexArrayEdgeFlagOffsetEXT = (C.PVERTEXARRAYEDGEFLAGOFFSETEXT)(getProcAddr("glVertexArrayEdgeFlagOffsetEXT")); pVertexArrayEdgeFlagOffsetEXT == nil {
    EXT_direct_state_access = false
  }
  if pVertexArrayFogCoordOffsetEXT = (C.PVERTEXARRAYFOGCOORDOFFSETEXT)(getProcAddr("glVertexArrayFogCoordOffsetEXT")); pVertexArrayFogCoordOffsetEXT == nil {
    EXT_direct_state_access = false
  }
  if pVertexArrayIndexOffsetEXT = (C.PVERTEXARRAYINDEXOFFSETEXT)(getProcAddr("glVertexArrayIndexOffsetEXT")); pVertexArrayIndexOffsetEXT == nil {
    EXT_direct_state_access = false
  }
  if pVertexArrayMultiTexCoordOffsetEXT = (C.PVERTEXARRAYMULTITEXCOORDOFFSETEXT)(getProcAddr("glVertexArrayMultiTexCoordOffsetEXT")); pVertexArrayMultiTexCoordOffsetEXT == nil {
    EXT_direct_state_access = false
  }
  if pVertexArrayNormalOffsetEXT = (C.PVERTEXARRAYNORMALOFFSETEXT)(getProcAddr("glVertexArrayNormalOffsetEXT")); pVertexArrayNormalOffsetEXT == nil {
    EXT_direct_state_access = false
  }
  if pVertexArrayParameteriAPPLE = (C.PVERTEXARRAYPARAMETERIAPPLE)(getProcAddr("glVertexArrayParameteriAPPLE")); pVertexArrayParameteriAPPLE == nil {
    APPLE_vertex_array_range = false
  }
  if pVertexArrayRangeAPPLE = (C.PVERTEXARRAYRANGEAPPLE)(getProcAddr("glVertexArrayRangeAPPLE")); pVertexArrayRangeAPPLE == nil {
    APPLE_vertex_array_range = false
  }
  if pVertexArrayRangeNV = (C.PVERTEXARRAYRANGENV)(getProcAddr("glVertexArrayRangeNV")); pVertexArrayRangeNV == nil {
    NV_vertex_array_range = false
  }
  if pVertexArraySecondaryColorOffsetEXT = (C.PVERTEXARRAYSECONDARYCOLOROFFSETEXT)(getProcAddr("glVertexArraySecondaryColorOffsetEXT")); pVertexArraySecondaryColorOffsetEXT == nil {
    EXT_direct_state_access = false
  }
  if pVertexArrayTexCoordOffsetEXT = (C.PVERTEXARRAYTEXCOORDOFFSETEXT)(getProcAddr("glVertexArrayTexCoordOffsetEXT")); pVertexArrayTexCoordOffsetEXT == nil {
    EXT_direct_state_access = false
  }
  if pVertexArrayVertexAttribBindingEXT = (C.PVERTEXARRAYVERTEXATTRIBBINDINGEXT)(getProcAddr("glVertexArrayVertexAttribBindingEXT")); pVertexArrayVertexAttribBindingEXT == nil {
    EXT_direct_state_access = false
  }
  if pVertexArrayVertexAttribDivisorEXT = (C.PVERTEXARRAYVERTEXATTRIBDIVISOREXT)(getProcAddr("glVertexArrayVertexAttribDivisorEXT")); pVertexArrayVertexAttribDivisorEXT == nil {
    EXT_direct_state_access = false
  }
  if pVertexArrayVertexAttribFormatEXT = (C.PVERTEXARRAYVERTEXATTRIBFORMATEXT)(getProcAddr("glVertexArrayVertexAttribFormatEXT")); pVertexArrayVertexAttribFormatEXT == nil {
    EXT_direct_state_access = false
  }
  if pVertexArrayVertexAttribIFormatEXT = (C.PVERTEXARRAYVERTEXATTRIBIFORMATEXT)(getProcAddr("glVertexArrayVertexAttribIFormatEXT")); pVertexArrayVertexAttribIFormatEXT == nil {
    EXT_direct_state_access = false
  }
  if pVertexArrayVertexAttribIOffsetEXT = (C.PVERTEXARRAYVERTEXATTRIBIOFFSETEXT)(getProcAddr("glVertexArrayVertexAttribIOffsetEXT")); pVertexArrayVertexAttribIOffsetEXT == nil {
    EXT_direct_state_access = false
  }
  if pVertexArrayVertexAttribLFormatEXT = (C.PVERTEXARRAYVERTEXATTRIBLFORMATEXT)(getProcAddr("glVertexArrayVertexAttribLFormatEXT")); pVertexArrayVertexAttribLFormatEXT == nil {
    EXT_direct_state_access = false
  }
  if pVertexArrayVertexAttribLOffsetEXT = (C.PVERTEXARRAYVERTEXATTRIBLOFFSETEXT)(getProcAddr("glVertexArrayVertexAttribLOffsetEXT")); pVertexArrayVertexAttribLOffsetEXT == nil {
    EXT_direct_state_access = false
  }
  if pVertexArrayVertexAttribOffsetEXT = (C.PVERTEXARRAYVERTEXATTRIBOFFSETEXT)(getProcAddr("glVertexArrayVertexAttribOffsetEXT")); pVertexArrayVertexAttribOffsetEXT == nil {
    EXT_direct_state_access = false
  }
  if pVertexArrayVertexBindingDivisorEXT = (C.PVERTEXARRAYVERTEXBINDINGDIVISOREXT)(getProcAddr("glVertexArrayVertexBindingDivisorEXT")); pVertexArrayVertexBindingDivisorEXT == nil {
    EXT_direct_state_access = false
  }
  if pVertexArrayVertexOffsetEXT = (C.PVERTEXARRAYVERTEXOFFSETEXT)(getProcAddr("glVertexArrayVertexOffsetEXT")); pVertexArrayVertexOffsetEXT == nil {
    EXT_direct_state_access = false
  }
  if pVertexAttrib1d = (C.PVERTEXATTRIB1D)(getProcAddr("glVertexAttrib1d")); pVertexAttrib1d == nil {
    return errors.New("glVertexAttrib1d")
  }
  if pVertexAttrib1dARB = (C.PVERTEXATTRIB1DARB)(getProcAddr("glVertexAttrib1dARB")); pVertexAttrib1dARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if pVertexAttrib1dNV = (C.PVERTEXATTRIB1DNV)(getProcAddr("glVertexAttrib1dNV")); pVertexAttrib1dNV == nil {
    NV_vertex_program = false
  }
  if pVertexAttrib1dv = (C.PVERTEXATTRIB1DV)(getProcAddr("glVertexAttrib1dv")); pVertexAttrib1dv == nil {
    return errors.New("glVertexAttrib1dv")
  }
  if pVertexAttrib1dvARB = (C.PVERTEXATTRIB1DVARB)(getProcAddr("glVertexAttrib1dvARB")); pVertexAttrib1dvARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if pVertexAttrib1dvNV = (C.PVERTEXATTRIB1DVNV)(getProcAddr("glVertexAttrib1dvNV")); pVertexAttrib1dvNV == nil {
    NV_vertex_program = false
  }
  if pVertexAttrib1f = (C.PVERTEXATTRIB1F)(getProcAddr("glVertexAttrib1f")); pVertexAttrib1f == nil {
    return errors.New("glVertexAttrib1f")
  }
  if pVertexAttrib1fARB = (C.PVERTEXATTRIB1FARB)(getProcAddr("glVertexAttrib1fARB")); pVertexAttrib1fARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if pVertexAttrib1fNV = (C.PVERTEXATTRIB1FNV)(getProcAddr("glVertexAttrib1fNV")); pVertexAttrib1fNV == nil {
    NV_vertex_program = false
  }
  if pVertexAttrib1fv = (C.PVERTEXATTRIB1FV)(getProcAddr("glVertexAttrib1fv")); pVertexAttrib1fv == nil {
    return errors.New("glVertexAttrib1fv")
  }
  if pVertexAttrib1fvARB = (C.PVERTEXATTRIB1FVARB)(getProcAddr("glVertexAttrib1fvARB")); pVertexAttrib1fvARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if pVertexAttrib1fvNV = (C.PVERTEXATTRIB1FVNV)(getProcAddr("glVertexAttrib1fvNV")); pVertexAttrib1fvNV == nil {
    NV_vertex_program = false
  }
  if pVertexAttrib1hNV = (C.PVERTEXATTRIB1HNV)(getProcAddr("glVertexAttrib1hNV")); pVertexAttrib1hNV == nil {
    NV_half_float = false
  }
  if pVertexAttrib1hvNV = (C.PVERTEXATTRIB1HVNV)(getProcAddr("glVertexAttrib1hvNV")); pVertexAttrib1hvNV == nil {
    NV_half_float = false
  }
  if pVertexAttrib1s = (C.PVERTEXATTRIB1S)(getProcAddr("glVertexAttrib1s")); pVertexAttrib1s == nil {
    return errors.New("glVertexAttrib1s")
  }
  if pVertexAttrib1sARB = (C.PVERTEXATTRIB1SARB)(getProcAddr("glVertexAttrib1sARB")); pVertexAttrib1sARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if pVertexAttrib1sNV = (C.PVERTEXATTRIB1SNV)(getProcAddr("glVertexAttrib1sNV")); pVertexAttrib1sNV == nil {
    NV_vertex_program = false
  }
  if pVertexAttrib1sv = (C.PVERTEXATTRIB1SV)(getProcAddr("glVertexAttrib1sv")); pVertexAttrib1sv == nil {
    return errors.New("glVertexAttrib1sv")
  }
  if pVertexAttrib1svARB = (C.PVERTEXATTRIB1SVARB)(getProcAddr("glVertexAttrib1svARB")); pVertexAttrib1svARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if pVertexAttrib1svNV = (C.PVERTEXATTRIB1SVNV)(getProcAddr("glVertexAttrib1svNV")); pVertexAttrib1svNV == nil {
    NV_vertex_program = false
  }
  if pVertexAttrib2d = (C.PVERTEXATTRIB2D)(getProcAddr("glVertexAttrib2d")); pVertexAttrib2d == nil {
    return errors.New("glVertexAttrib2d")
  }
  if pVertexAttrib2dARB = (C.PVERTEXATTRIB2DARB)(getProcAddr("glVertexAttrib2dARB")); pVertexAttrib2dARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if pVertexAttrib2dNV = (C.PVERTEXATTRIB2DNV)(getProcAddr("glVertexAttrib2dNV")); pVertexAttrib2dNV == nil {
    NV_vertex_program = false
  }
  if pVertexAttrib2dv = (C.PVERTEXATTRIB2DV)(getProcAddr("glVertexAttrib2dv")); pVertexAttrib2dv == nil {
    return errors.New("glVertexAttrib2dv")
  }
  if pVertexAttrib2dvARB = (C.PVERTEXATTRIB2DVARB)(getProcAddr("glVertexAttrib2dvARB")); pVertexAttrib2dvARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if pVertexAttrib2dvNV = (C.PVERTEXATTRIB2DVNV)(getProcAddr("glVertexAttrib2dvNV")); pVertexAttrib2dvNV == nil {
    NV_vertex_program = false
  }
  if pVertexAttrib2f = (C.PVERTEXATTRIB2F)(getProcAddr("glVertexAttrib2f")); pVertexAttrib2f == nil {
    return errors.New("glVertexAttrib2f")
  }
  if pVertexAttrib2fARB = (C.PVERTEXATTRIB2FARB)(getProcAddr("glVertexAttrib2fARB")); pVertexAttrib2fARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if pVertexAttrib2fNV = (C.PVERTEXATTRIB2FNV)(getProcAddr("glVertexAttrib2fNV")); pVertexAttrib2fNV == nil {
    NV_vertex_program = false
  }
  if pVertexAttrib2fv = (C.PVERTEXATTRIB2FV)(getProcAddr("glVertexAttrib2fv")); pVertexAttrib2fv == nil {
    return errors.New("glVertexAttrib2fv")
  }
  if pVertexAttrib2fvARB = (C.PVERTEXATTRIB2FVARB)(getProcAddr("glVertexAttrib2fvARB")); pVertexAttrib2fvARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if pVertexAttrib2fvNV = (C.PVERTEXATTRIB2FVNV)(getProcAddr("glVertexAttrib2fvNV")); pVertexAttrib2fvNV == nil {
    NV_vertex_program = false
  }
  if pVertexAttrib2hNV = (C.PVERTEXATTRIB2HNV)(getProcAddr("glVertexAttrib2hNV")); pVertexAttrib2hNV == nil {
    NV_half_float = false
  }
  if pVertexAttrib2hvNV = (C.PVERTEXATTRIB2HVNV)(getProcAddr("glVertexAttrib2hvNV")); pVertexAttrib2hvNV == nil {
    NV_half_float = false
  }
  if pVertexAttrib2s = (C.PVERTEXATTRIB2S)(getProcAddr("glVertexAttrib2s")); pVertexAttrib2s == nil {
    return errors.New("glVertexAttrib2s")
  }
  if pVertexAttrib2sARB = (C.PVERTEXATTRIB2SARB)(getProcAddr("glVertexAttrib2sARB")); pVertexAttrib2sARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if pVertexAttrib2sNV = (C.PVERTEXATTRIB2SNV)(getProcAddr("glVertexAttrib2sNV")); pVertexAttrib2sNV == nil {
    NV_vertex_program = false
  }
  if pVertexAttrib2sv = (C.PVERTEXATTRIB2SV)(getProcAddr("glVertexAttrib2sv")); pVertexAttrib2sv == nil {
    return errors.New("glVertexAttrib2sv")
  }
  if pVertexAttrib2svARB = (C.PVERTEXATTRIB2SVARB)(getProcAddr("glVertexAttrib2svARB")); pVertexAttrib2svARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if pVertexAttrib2svNV = (C.PVERTEXATTRIB2SVNV)(getProcAddr("glVertexAttrib2svNV")); pVertexAttrib2svNV == nil {
    NV_vertex_program = false
  }
  if pVertexAttrib3d = (C.PVERTEXATTRIB3D)(getProcAddr("glVertexAttrib3d")); pVertexAttrib3d == nil {
    return errors.New("glVertexAttrib3d")
  }
  if pVertexAttrib3dARB = (C.PVERTEXATTRIB3DARB)(getProcAddr("glVertexAttrib3dARB")); pVertexAttrib3dARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if pVertexAttrib3dNV = (C.PVERTEXATTRIB3DNV)(getProcAddr("glVertexAttrib3dNV")); pVertexAttrib3dNV == nil {
    NV_vertex_program = false
  }
  if pVertexAttrib3dv = (C.PVERTEXATTRIB3DV)(getProcAddr("glVertexAttrib3dv")); pVertexAttrib3dv == nil {
    return errors.New("glVertexAttrib3dv")
  }
  if pVertexAttrib3dvARB = (C.PVERTEXATTRIB3DVARB)(getProcAddr("glVertexAttrib3dvARB")); pVertexAttrib3dvARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if pVertexAttrib3dvNV = (C.PVERTEXATTRIB3DVNV)(getProcAddr("glVertexAttrib3dvNV")); pVertexAttrib3dvNV == nil {
    NV_vertex_program = false
  }
  if pVertexAttrib3f = (C.PVERTEXATTRIB3F)(getProcAddr("glVertexAttrib3f")); pVertexAttrib3f == nil {
    return errors.New("glVertexAttrib3f")
  }
  if pVertexAttrib3fARB = (C.PVERTEXATTRIB3FARB)(getProcAddr("glVertexAttrib3fARB")); pVertexAttrib3fARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if pVertexAttrib3fNV = (C.PVERTEXATTRIB3FNV)(getProcAddr("glVertexAttrib3fNV")); pVertexAttrib3fNV == nil {
    NV_vertex_program = false
  }
  if pVertexAttrib3fv = (C.PVERTEXATTRIB3FV)(getProcAddr("glVertexAttrib3fv")); pVertexAttrib3fv == nil {
    return errors.New("glVertexAttrib3fv")
  }
  if pVertexAttrib3fvARB = (C.PVERTEXATTRIB3FVARB)(getProcAddr("glVertexAttrib3fvARB")); pVertexAttrib3fvARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if pVertexAttrib3fvNV = (C.PVERTEXATTRIB3FVNV)(getProcAddr("glVertexAttrib3fvNV")); pVertexAttrib3fvNV == nil {
    NV_vertex_program = false
  }
  if pVertexAttrib3hNV = (C.PVERTEXATTRIB3HNV)(getProcAddr("glVertexAttrib3hNV")); pVertexAttrib3hNV == nil {
    NV_half_float = false
  }
  if pVertexAttrib3hvNV = (C.PVERTEXATTRIB3HVNV)(getProcAddr("glVertexAttrib3hvNV")); pVertexAttrib3hvNV == nil {
    NV_half_float = false
  }
  if pVertexAttrib3s = (C.PVERTEXATTRIB3S)(getProcAddr("glVertexAttrib3s")); pVertexAttrib3s == nil {
    return errors.New("glVertexAttrib3s")
  }
  if pVertexAttrib3sARB = (C.PVERTEXATTRIB3SARB)(getProcAddr("glVertexAttrib3sARB")); pVertexAttrib3sARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if pVertexAttrib3sNV = (C.PVERTEXATTRIB3SNV)(getProcAddr("glVertexAttrib3sNV")); pVertexAttrib3sNV == nil {
    NV_vertex_program = false
  }
  if pVertexAttrib3sv = (C.PVERTEXATTRIB3SV)(getProcAddr("glVertexAttrib3sv")); pVertexAttrib3sv == nil {
    return errors.New("glVertexAttrib3sv")
  }
  if pVertexAttrib3svARB = (C.PVERTEXATTRIB3SVARB)(getProcAddr("glVertexAttrib3svARB")); pVertexAttrib3svARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if pVertexAttrib3svNV = (C.PVERTEXATTRIB3SVNV)(getProcAddr("glVertexAttrib3svNV")); pVertexAttrib3svNV == nil {
    NV_vertex_program = false
  }
  if pVertexAttrib4Nbv = (C.PVERTEXATTRIB4NBV)(getProcAddr("glVertexAttrib4Nbv")); pVertexAttrib4Nbv == nil {
    return errors.New("glVertexAttrib4Nbv")
  }
  if pVertexAttrib4NbvARB = (C.PVERTEXATTRIB4NBVARB)(getProcAddr("glVertexAttrib4NbvARB")); pVertexAttrib4NbvARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if pVertexAttrib4Niv = (C.PVERTEXATTRIB4NIV)(getProcAddr("glVertexAttrib4Niv")); pVertexAttrib4Niv == nil {
    return errors.New("glVertexAttrib4Niv")
  }
  if pVertexAttrib4NivARB = (C.PVERTEXATTRIB4NIVARB)(getProcAddr("glVertexAttrib4NivARB")); pVertexAttrib4NivARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if pVertexAttrib4Nsv = (C.PVERTEXATTRIB4NSV)(getProcAddr("glVertexAttrib4Nsv")); pVertexAttrib4Nsv == nil {
    return errors.New("glVertexAttrib4Nsv")
  }
  if pVertexAttrib4NsvARB = (C.PVERTEXATTRIB4NSVARB)(getProcAddr("glVertexAttrib4NsvARB")); pVertexAttrib4NsvARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if pVertexAttrib4Nub = (C.PVERTEXATTRIB4NUB)(getProcAddr("glVertexAttrib4Nub")); pVertexAttrib4Nub == nil {
    return errors.New("glVertexAttrib4Nub")
  }
  if pVertexAttrib4NubARB = (C.PVERTEXATTRIB4NUBARB)(getProcAddr("glVertexAttrib4NubARB")); pVertexAttrib4NubARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if pVertexAttrib4Nubv = (C.PVERTEXATTRIB4NUBV)(getProcAddr("glVertexAttrib4Nubv")); pVertexAttrib4Nubv == nil {
    return errors.New("glVertexAttrib4Nubv")
  }
  if pVertexAttrib4NubvARB = (C.PVERTEXATTRIB4NUBVARB)(getProcAddr("glVertexAttrib4NubvARB")); pVertexAttrib4NubvARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if pVertexAttrib4Nuiv = (C.PVERTEXATTRIB4NUIV)(getProcAddr("glVertexAttrib4Nuiv")); pVertexAttrib4Nuiv == nil {
    return errors.New("glVertexAttrib4Nuiv")
  }
  if pVertexAttrib4NuivARB = (C.PVERTEXATTRIB4NUIVARB)(getProcAddr("glVertexAttrib4NuivARB")); pVertexAttrib4NuivARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if pVertexAttrib4Nusv = (C.PVERTEXATTRIB4NUSV)(getProcAddr("glVertexAttrib4Nusv")); pVertexAttrib4Nusv == nil {
    return errors.New("glVertexAttrib4Nusv")
  }
  if pVertexAttrib4NusvARB = (C.PVERTEXATTRIB4NUSVARB)(getProcAddr("glVertexAttrib4NusvARB")); pVertexAttrib4NusvARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if pVertexAttrib4bv = (C.PVERTEXATTRIB4BV)(getProcAddr("glVertexAttrib4bv")); pVertexAttrib4bv == nil {
    return errors.New("glVertexAttrib4bv")
  }
  if pVertexAttrib4bvARB = (C.PVERTEXATTRIB4BVARB)(getProcAddr("glVertexAttrib4bvARB")); pVertexAttrib4bvARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if pVertexAttrib4d = (C.PVERTEXATTRIB4D)(getProcAddr("glVertexAttrib4d")); pVertexAttrib4d == nil {
    return errors.New("glVertexAttrib4d")
  }
  if pVertexAttrib4dARB = (C.PVERTEXATTRIB4DARB)(getProcAddr("glVertexAttrib4dARB")); pVertexAttrib4dARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if pVertexAttrib4dNV = (C.PVERTEXATTRIB4DNV)(getProcAddr("glVertexAttrib4dNV")); pVertexAttrib4dNV == nil {
    NV_vertex_program = false
  }
  if pVertexAttrib4dv = (C.PVERTEXATTRIB4DV)(getProcAddr("glVertexAttrib4dv")); pVertexAttrib4dv == nil {
    return errors.New("glVertexAttrib4dv")
  }
  if pVertexAttrib4dvARB = (C.PVERTEXATTRIB4DVARB)(getProcAddr("glVertexAttrib4dvARB")); pVertexAttrib4dvARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if pVertexAttrib4dvNV = (C.PVERTEXATTRIB4DVNV)(getProcAddr("glVertexAttrib4dvNV")); pVertexAttrib4dvNV == nil {
    NV_vertex_program = false
  }
  if pVertexAttrib4f = (C.PVERTEXATTRIB4F)(getProcAddr("glVertexAttrib4f")); pVertexAttrib4f == nil {
    return errors.New("glVertexAttrib4f")
  }
  if pVertexAttrib4fARB = (C.PVERTEXATTRIB4FARB)(getProcAddr("glVertexAttrib4fARB")); pVertexAttrib4fARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if pVertexAttrib4fNV = (C.PVERTEXATTRIB4FNV)(getProcAddr("glVertexAttrib4fNV")); pVertexAttrib4fNV == nil {
    NV_vertex_program = false
  }
  if pVertexAttrib4fv = (C.PVERTEXATTRIB4FV)(getProcAddr("glVertexAttrib4fv")); pVertexAttrib4fv == nil {
    return errors.New("glVertexAttrib4fv")
  }
  if pVertexAttrib4fvARB = (C.PVERTEXATTRIB4FVARB)(getProcAddr("glVertexAttrib4fvARB")); pVertexAttrib4fvARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if pVertexAttrib4fvNV = (C.PVERTEXATTRIB4FVNV)(getProcAddr("glVertexAttrib4fvNV")); pVertexAttrib4fvNV == nil {
    NV_vertex_program = false
  }
  if pVertexAttrib4hNV = (C.PVERTEXATTRIB4HNV)(getProcAddr("glVertexAttrib4hNV")); pVertexAttrib4hNV == nil {
    NV_half_float = false
  }
  if pVertexAttrib4hvNV = (C.PVERTEXATTRIB4HVNV)(getProcAddr("glVertexAttrib4hvNV")); pVertexAttrib4hvNV == nil {
    NV_half_float = false
  }
  if pVertexAttrib4iv = (C.PVERTEXATTRIB4IV)(getProcAddr("glVertexAttrib4iv")); pVertexAttrib4iv == nil {
    return errors.New("glVertexAttrib4iv")
  }
  if pVertexAttrib4ivARB = (C.PVERTEXATTRIB4IVARB)(getProcAddr("glVertexAttrib4ivARB")); pVertexAttrib4ivARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if pVertexAttrib4s = (C.PVERTEXATTRIB4S)(getProcAddr("glVertexAttrib4s")); pVertexAttrib4s == nil {
    return errors.New("glVertexAttrib4s")
  }
  if pVertexAttrib4sARB = (C.PVERTEXATTRIB4SARB)(getProcAddr("glVertexAttrib4sARB")); pVertexAttrib4sARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if pVertexAttrib4sNV = (C.PVERTEXATTRIB4SNV)(getProcAddr("glVertexAttrib4sNV")); pVertexAttrib4sNV == nil {
    NV_vertex_program = false
  }
  if pVertexAttrib4sv = (C.PVERTEXATTRIB4SV)(getProcAddr("glVertexAttrib4sv")); pVertexAttrib4sv == nil {
    return errors.New("glVertexAttrib4sv")
  }
  if pVertexAttrib4svARB = (C.PVERTEXATTRIB4SVARB)(getProcAddr("glVertexAttrib4svARB")); pVertexAttrib4svARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if pVertexAttrib4svNV = (C.PVERTEXATTRIB4SVNV)(getProcAddr("glVertexAttrib4svNV")); pVertexAttrib4svNV == nil {
    NV_vertex_program = false
  }
  if pVertexAttrib4ubNV = (C.PVERTEXATTRIB4UBNV)(getProcAddr("glVertexAttrib4ubNV")); pVertexAttrib4ubNV == nil {
    NV_vertex_program = false
  }
  if pVertexAttrib4ubv = (C.PVERTEXATTRIB4UBV)(getProcAddr("glVertexAttrib4ubv")); pVertexAttrib4ubv == nil {
    return errors.New("glVertexAttrib4ubv")
  }
  if pVertexAttrib4ubvARB = (C.PVERTEXATTRIB4UBVARB)(getProcAddr("glVertexAttrib4ubvARB")); pVertexAttrib4ubvARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if pVertexAttrib4ubvNV = (C.PVERTEXATTRIB4UBVNV)(getProcAddr("glVertexAttrib4ubvNV")); pVertexAttrib4ubvNV == nil {
    NV_vertex_program = false
  }
  if pVertexAttrib4uiv = (C.PVERTEXATTRIB4UIV)(getProcAddr("glVertexAttrib4uiv")); pVertexAttrib4uiv == nil {
    return errors.New("glVertexAttrib4uiv")
  }
  if pVertexAttrib4uivARB = (C.PVERTEXATTRIB4UIVARB)(getProcAddr("glVertexAttrib4uivARB")); pVertexAttrib4uivARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if pVertexAttrib4usv = (C.PVERTEXATTRIB4USV)(getProcAddr("glVertexAttrib4usv")); pVertexAttrib4usv == nil {
    return errors.New("glVertexAttrib4usv")
  }
  if pVertexAttrib4usvARB = (C.PVERTEXATTRIB4USVARB)(getProcAddr("glVertexAttrib4usvARB")); pVertexAttrib4usvARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if pVertexAttribArrayObjectATI = (C.PVERTEXATTRIBARRAYOBJECTATI)(getProcAddr("glVertexAttribArrayObjectATI")); pVertexAttribArrayObjectATI == nil {
    ATI_vertex_attrib_array_object = false
  }
  if pVertexAttribBinding = (C.PVERTEXATTRIBBINDING)(getProcAddr("glVertexAttribBinding")); pVertexAttribBinding == nil {
    ARB_vertex_attrib_binding = false
  }
  if pVertexAttribDivisor = (C.PVERTEXATTRIBDIVISOR)(getProcAddr("glVertexAttribDivisor")); pVertexAttribDivisor == nil {
    return errors.New("glVertexAttribDivisor")
  }
  if pVertexAttribDivisorARB = (C.PVERTEXATTRIBDIVISORARB)(getProcAddr("glVertexAttribDivisorARB")); pVertexAttribDivisorARB == nil {
    ARB_instanced_arrays = false
  }
  if pVertexAttribFormat = (C.PVERTEXATTRIBFORMAT)(getProcAddr("glVertexAttribFormat")); pVertexAttribFormat == nil {
    ARB_vertex_attrib_binding = false
  }
  if pVertexAttribFormatNV = (C.PVERTEXATTRIBFORMATNV)(getProcAddr("glVertexAttribFormatNV")); pVertexAttribFormatNV == nil {
    NV_vertex_buffer_unified_memory = false
  }
  if pVertexAttribI1i = (C.PVERTEXATTRIBI1I)(getProcAddr("glVertexAttribI1i")); pVertexAttribI1i == nil {
    return errors.New("glVertexAttribI1i")
  }
  if pVertexAttribI1iEXT = (C.PVERTEXATTRIBI1IEXT)(getProcAddr("glVertexAttribI1iEXT")); pVertexAttribI1iEXT == nil {
    NV_vertex_program4 = false
  }
  if pVertexAttribI1iv = (C.PVERTEXATTRIBI1IV)(getProcAddr("glVertexAttribI1iv")); pVertexAttribI1iv == nil {
    return errors.New("glVertexAttribI1iv")
  }
  if pVertexAttribI1ivEXT = (C.PVERTEXATTRIBI1IVEXT)(getProcAddr("glVertexAttribI1ivEXT")); pVertexAttribI1ivEXT == nil {
    NV_vertex_program4 = false
  }
  if pVertexAttribI1ui = (C.PVERTEXATTRIBI1UI)(getProcAddr("glVertexAttribI1ui")); pVertexAttribI1ui == nil {
    return errors.New("glVertexAttribI1ui")
  }
  if pVertexAttribI1uiEXT = (C.PVERTEXATTRIBI1UIEXT)(getProcAddr("glVertexAttribI1uiEXT")); pVertexAttribI1uiEXT == nil {
    NV_vertex_program4 = false
  }
  if pVertexAttribI1uiv = (C.PVERTEXATTRIBI1UIV)(getProcAddr("glVertexAttribI1uiv")); pVertexAttribI1uiv == nil {
    return errors.New("glVertexAttribI1uiv")
  }
  if pVertexAttribI1uivEXT = (C.PVERTEXATTRIBI1UIVEXT)(getProcAddr("glVertexAttribI1uivEXT")); pVertexAttribI1uivEXT == nil {
    NV_vertex_program4 = false
  }
  if pVertexAttribI2i = (C.PVERTEXATTRIBI2I)(getProcAddr("glVertexAttribI2i")); pVertexAttribI2i == nil {
    return errors.New("glVertexAttribI2i")
  }
  if pVertexAttribI2iEXT = (C.PVERTEXATTRIBI2IEXT)(getProcAddr("glVertexAttribI2iEXT")); pVertexAttribI2iEXT == nil {
    NV_vertex_program4 = false
  }
  if pVertexAttribI2iv = (C.PVERTEXATTRIBI2IV)(getProcAddr("glVertexAttribI2iv")); pVertexAttribI2iv == nil {
    return errors.New("glVertexAttribI2iv")
  }
  if pVertexAttribI2ivEXT = (C.PVERTEXATTRIBI2IVEXT)(getProcAddr("glVertexAttribI2ivEXT")); pVertexAttribI2ivEXT == nil {
    NV_vertex_program4 = false
  }
  if pVertexAttribI2ui = (C.PVERTEXATTRIBI2UI)(getProcAddr("glVertexAttribI2ui")); pVertexAttribI2ui == nil {
    return errors.New("glVertexAttribI2ui")
  }
  if pVertexAttribI2uiEXT = (C.PVERTEXATTRIBI2UIEXT)(getProcAddr("glVertexAttribI2uiEXT")); pVertexAttribI2uiEXT == nil {
    NV_vertex_program4 = false
  }
  if pVertexAttribI2uiv = (C.PVERTEXATTRIBI2UIV)(getProcAddr("glVertexAttribI2uiv")); pVertexAttribI2uiv == nil {
    return errors.New("glVertexAttribI2uiv")
  }
  if pVertexAttribI2uivEXT = (C.PVERTEXATTRIBI2UIVEXT)(getProcAddr("glVertexAttribI2uivEXT")); pVertexAttribI2uivEXT == nil {
    NV_vertex_program4 = false
  }
  if pVertexAttribI3i = (C.PVERTEXATTRIBI3I)(getProcAddr("glVertexAttribI3i")); pVertexAttribI3i == nil {
    return errors.New("glVertexAttribI3i")
  }
  if pVertexAttribI3iEXT = (C.PVERTEXATTRIBI3IEXT)(getProcAddr("glVertexAttribI3iEXT")); pVertexAttribI3iEXT == nil {
    NV_vertex_program4 = false
  }
  if pVertexAttribI3iv = (C.PVERTEXATTRIBI3IV)(getProcAddr("glVertexAttribI3iv")); pVertexAttribI3iv == nil {
    return errors.New("glVertexAttribI3iv")
  }
  if pVertexAttribI3ivEXT = (C.PVERTEXATTRIBI3IVEXT)(getProcAddr("glVertexAttribI3ivEXT")); pVertexAttribI3ivEXT == nil {
    NV_vertex_program4 = false
  }
  if pVertexAttribI3ui = (C.PVERTEXATTRIBI3UI)(getProcAddr("glVertexAttribI3ui")); pVertexAttribI3ui == nil {
    return errors.New("glVertexAttribI3ui")
  }
  if pVertexAttribI3uiEXT = (C.PVERTEXATTRIBI3UIEXT)(getProcAddr("glVertexAttribI3uiEXT")); pVertexAttribI3uiEXT == nil {
    NV_vertex_program4 = false
  }
  if pVertexAttribI3uiv = (C.PVERTEXATTRIBI3UIV)(getProcAddr("glVertexAttribI3uiv")); pVertexAttribI3uiv == nil {
    return errors.New("glVertexAttribI3uiv")
  }
  if pVertexAttribI3uivEXT = (C.PVERTEXATTRIBI3UIVEXT)(getProcAddr("glVertexAttribI3uivEXT")); pVertexAttribI3uivEXT == nil {
    NV_vertex_program4 = false
  }
  if pVertexAttribI4bv = (C.PVERTEXATTRIBI4BV)(getProcAddr("glVertexAttribI4bv")); pVertexAttribI4bv == nil {
    return errors.New("glVertexAttribI4bv")
  }
  if pVertexAttribI4bvEXT = (C.PVERTEXATTRIBI4BVEXT)(getProcAddr("glVertexAttribI4bvEXT")); pVertexAttribI4bvEXT == nil {
    NV_vertex_program4 = false
  }
  if pVertexAttribI4i = (C.PVERTEXATTRIBI4I)(getProcAddr("glVertexAttribI4i")); pVertexAttribI4i == nil {
    return errors.New("glVertexAttribI4i")
  }
  if pVertexAttribI4iEXT = (C.PVERTEXATTRIBI4IEXT)(getProcAddr("glVertexAttribI4iEXT")); pVertexAttribI4iEXT == nil {
    NV_vertex_program4 = false
  }
  if pVertexAttribI4iv = (C.PVERTEXATTRIBI4IV)(getProcAddr("glVertexAttribI4iv")); pVertexAttribI4iv == nil {
    return errors.New("glVertexAttribI4iv")
  }
  if pVertexAttribI4ivEXT = (C.PVERTEXATTRIBI4IVEXT)(getProcAddr("glVertexAttribI4ivEXT")); pVertexAttribI4ivEXT == nil {
    NV_vertex_program4 = false
  }
  if pVertexAttribI4sv = (C.PVERTEXATTRIBI4SV)(getProcAddr("glVertexAttribI4sv")); pVertexAttribI4sv == nil {
    return errors.New("glVertexAttribI4sv")
  }
  if pVertexAttribI4svEXT = (C.PVERTEXATTRIBI4SVEXT)(getProcAddr("glVertexAttribI4svEXT")); pVertexAttribI4svEXT == nil {
    NV_vertex_program4 = false
  }
  if pVertexAttribI4ubv = (C.PVERTEXATTRIBI4UBV)(getProcAddr("glVertexAttribI4ubv")); pVertexAttribI4ubv == nil {
    return errors.New("glVertexAttribI4ubv")
  }
  if pVertexAttribI4ubvEXT = (C.PVERTEXATTRIBI4UBVEXT)(getProcAddr("glVertexAttribI4ubvEXT")); pVertexAttribI4ubvEXT == nil {
    NV_vertex_program4 = false
  }
  if pVertexAttribI4ui = (C.PVERTEXATTRIBI4UI)(getProcAddr("glVertexAttribI4ui")); pVertexAttribI4ui == nil {
    return errors.New("glVertexAttribI4ui")
  }
  if pVertexAttribI4uiEXT = (C.PVERTEXATTRIBI4UIEXT)(getProcAddr("glVertexAttribI4uiEXT")); pVertexAttribI4uiEXT == nil {
    NV_vertex_program4 = false
  }
  if pVertexAttribI4uiv = (C.PVERTEXATTRIBI4UIV)(getProcAddr("glVertexAttribI4uiv")); pVertexAttribI4uiv == nil {
    return errors.New("glVertexAttribI4uiv")
  }
  if pVertexAttribI4uivEXT = (C.PVERTEXATTRIBI4UIVEXT)(getProcAddr("glVertexAttribI4uivEXT")); pVertexAttribI4uivEXT == nil {
    NV_vertex_program4 = false
  }
  if pVertexAttribI4usv = (C.PVERTEXATTRIBI4USV)(getProcAddr("glVertexAttribI4usv")); pVertexAttribI4usv == nil {
    return errors.New("glVertexAttribI4usv")
  }
  if pVertexAttribI4usvEXT = (C.PVERTEXATTRIBI4USVEXT)(getProcAddr("glVertexAttribI4usvEXT")); pVertexAttribI4usvEXT == nil {
    NV_vertex_program4 = false
  }
  if pVertexAttribIFormat = (C.PVERTEXATTRIBIFORMAT)(getProcAddr("glVertexAttribIFormat")); pVertexAttribIFormat == nil {
    ARB_vertex_attrib_binding = false
  }
  if pVertexAttribIFormatNV = (C.PVERTEXATTRIBIFORMATNV)(getProcAddr("glVertexAttribIFormatNV")); pVertexAttribIFormatNV == nil {
    NV_vertex_buffer_unified_memory = false
  }
  if pVertexAttribIPointer = (C.PVERTEXATTRIBIPOINTER)(getProcAddr("glVertexAttribIPointer")); pVertexAttribIPointer == nil {
    return errors.New("glVertexAttribIPointer")
  }
  if pVertexAttribIPointerEXT = (C.PVERTEXATTRIBIPOINTEREXT)(getProcAddr("glVertexAttribIPointerEXT")); pVertexAttribIPointerEXT == nil {
    NV_vertex_program4 = false
  }
  if pVertexAttribL1d = (C.PVERTEXATTRIBL1D)(getProcAddr("glVertexAttribL1d")); pVertexAttribL1d == nil {
    ARB_vertex_attrib_64bit = false
    return errors.New("glVertexAttribL1d")
  }
  if pVertexAttribL1dEXT = (C.PVERTEXATTRIBL1DEXT)(getProcAddr("glVertexAttribL1dEXT")); pVertexAttribL1dEXT == nil {
    EXT_vertex_attrib_64bit = false
  }
  if pVertexAttribL1dv = (C.PVERTEXATTRIBL1DV)(getProcAddr("glVertexAttribL1dv")); pVertexAttribL1dv == nil {
    ARB_vertex_attrib_64bit = false
    return errors.New("glVertexAttribL1dv")
  }
  if pVertexAttribL1dvEXT = (C.PVERTEXATTRIBL1DVEXT)(getProcAddr("glVertexAttribL1dvEXT")); pVertexAttribL1dvEXT == nil {
    EXT_vertex_attrib_64bit = false
  }
  if pVertexAttribL1i64NV = (C.PVERTEXATTRIBL1I64NV)(getProcAddr("glVertexAttribL1i64NV")); pVertexAttribL1i64NV == nil {
    NV_vertex_attrib_integer_64bit = false
  }
  if pVertexAttribL1i64vNV = (C.PVERTEXATTRIBL1I64VNV)(getProcAddr("glVertexAttribL1i64vNV")); pVertexAttribL1i64vNV == nil {
    NV_vertex_attrib_integer_64bit = false
  }
  if pVertexAttribL1ui64ARB = (C.PVERTEXATTRIBL1UI64ARB)(getProcAddr("glVertexAttribL1ui64ARB")); pVertexAttribL1ui64ARB == nil {
    ARB_bindless_texture = false
  }
  if pVertexAttribL1ui64NV = (C.PVERTEXATTRIBL1UI64NV)(getProcAddr("glVertexAttribL1ui64NV")); pVertexAttribL1ui64NV == nil {
    NV_vertex_attrib_integer_64bit = false
  }
  if pVertexAttribL1ui64vARB = (C.PVERTEXATTRIBL1UI64VARB)(getProcAddr("glVertexAttribL1ui64vARB")); pVertexAttribL1ui64vARB == nil {
    ARB_bindless_texture = false
  }
  if pVertexAttribL1ui64vNV = (C.PVERTEXATTRIBL1UI64VNV)(getProcAddr("glVertexAttribL1ui64vNV")); pVertexAttribL1ui64vNV == nil {
    NV_vertex_attrib_integer_64bit = false
  }
  if pVertexAttribL2d = (C.PVERTEXATTRIBL2D)(getProcAddr("glVertexAttribL2d")); pVertexAttribL2d == nil {
    ARB_vertex_attrib_64bit = false
    return errors.New("glVertexAttribL2d")
  }
  if pVertexAttribL2dEXT = (C.PVERTEXATTRIBL2DEXT)(getProcAddr("glVertexAttribL2dEXT")); pVertexAttribL2dEXT == nil {
    EXT_vertex_attrib_64bit = false
  }
  if pVertexAttribL2dv = (C.PVERTEXATTRIBL2DV)(getProcAddr("glVertexAttribL2dv")); pVertexAttribL2dv == nil {
    ARB_vertex_attrib_64bit = false
    return errors.New("glVertexAttribL2dv")
  }
  if pVertexAttribL2dvEXT = (C.PVERTEXATTRIBL2DVEXT)(getProcAddr("glVertexAttribL2dvEXT")); pVertexAttribL2dvEXT == nil {
    EXT_vertex_attrib_64bit = false
  }
  if pVertexAttribL2i64NV = (C.PVERTEXATTRIBL2I64NV)(getProcAddr("glVertexAttribL2i64NV")); pVertexAttribL2i64NV == nil {
    NV_vertex_attrib_integer_64bit = false
  }
  if pVertexAttribL2i64vNV = (C.PVERTEXATTRIBL2I64VNV)(getProcAddr("glVertexAttribL2i64vNV")); pVertexAttribL2i64vNV == nil {
    NV_vertex_attrib_integer_64bit = false
  }
  if pVertexAttribL2ui64NV = (C.PVERTEXATTRIBL2UI64NV)(getProcAddr("glVertexAttribL2ui64NV")); pVertexAttribL2ui64NV == nil {
    NV_vertex_attrib_integer_64bit = false
  }
  if pVertexAttribL2ui64vNV = (C.PVERTEXATTRIBL2UI64VNV)(getProcAddr("glVertexAttribL2ui64vNV")); pVertexAttribL2ui64vNV == nil {
    NV_vertex_attrib_integer_64bit = false
  }
  if pVertexAttribL3d = (C.PVERTEXATTRIBL3D)(getProcAddr("glVertexAttribL3d")); pVertexAttribL3d == nil {
    ARB_vertex_attrib_64bit = false
    return errors.New("glVertexAttribL3d")
  }
  if pVertexAttribL3dEXT = (C.PVERTEXATTRIBL3DEXT)(getProcAddr("glVertexAttribL3dEXT")); pVertexAttribL3dEXT == nil {
    EXT_vertex_attrib_64bit = false
  }
  if pVertexAttribL3dv = (C.PVERTEXATTRIBL3DV)(getProcAddr("glVertexAttribL3dv")); pVertexAttribL3dv == nil {
    ARB_vertex_attrib_64bit = false
    return errors.New("glVertexAttribL3dv")
  }
  if pVertexAttribL3dvEXT = (C.PVERTEXATTRIBL3DVEXT)(getProcAddr("glVertexAttribL3dvEXT")); pVertexAttribL3dvEXT == nil {
    EXT_vertex_attrib_64bit = false
  }
  if pVertexAttribL3i64NV = (C.PVERTEXATTRIBL3I64NV)(getProcAddr("glVertexAttribL3i64NV")); pVertexAttribL3i64NV == nil {
    NV_vertex_attrib_integer_64bit = false
  }
  if pVertexAttribL3i64vNV = (C.PVERTEXATTRIBL3I64VNV)(getProcAddr("glVertexAttribL3i64vNV")); pVertexAttribL3i64vNV == nil {
    NV_vertex_attrib_integer_64bit = false
  }
  if pVertexAttribL3ui64NV = (C.PVERTEXATTRIBL3UI64NV)(getProcAddr("glVertexAttribL3ui64NV")); pVertexAttribL3ui64NV == nil {
    NV_vertex_attrib_integer_64bit = false
  }
  if pVertexAttribL3ui64vNV = (C.PVERTEXATTRIBL3UI64VNV)(getProcAddr("glVertexAttribL3ui64vNV")); pVertexAttribL3ui64vNV == nil {
    NV_vertex_attrib_integer_64bit = false
  }
  if pVertexAttribL4d = (C.PVERTEXATTRIBL4D)(getProcAddr("glVertexAttribL4d")); pVertexAttribL4d == nil {
    ARB_vertex_attrib_64bit = false
    return errors.New("glVertexAttribL4d")
  }
  if pVertexAttribL4dEXT = (C.PVERTEXATTRIBL4DEXT)(getProcAddr("glVertexAttribL4dEXT")); pVertexAttribL4dEXT == nil {
    EXT_vertex_attrib_64bit = false
  }
  if pVertexAttribL4dv = (C.PVERTEXATTRIBL4DV)(getProcAddr("glVertexAttribL4dv")); pVertexAttribL4dv == nil {
    ARB_vertex_attrib_64bit = false
    return errors.New("glVertexAttribL4dv")
  }
  if pVertexAttribL4dvEXT = (C.PVERTEXATTRIBL4DVEXT)(getProcAddr("glVertexAttribL4dvEXT")); pVertexAttribL4dvEXT == nil {
    EXT_vertex_attrib_64bit = false
  }
  if pVertexAttribL4i64NV = (C.PVERTEXATTRIBL4I64NV)(getProcAddr("glVertexAttribL4i64NV")); pVertexAttribL4i64NV == nil {
    NV_vertex_attrib_integer_64bit = false
  }
  if pVertexAttribL4i64vNV = (C.PVERTEXATTRIBL4I64VNV)(getProcAddr("glVertexAttribL4i64vNV")); pVertexAttribL4i64vNV == nil {
    NV_vertex_attrib_integer_64bit = false
  }
  if pVertexAttribL4ui64NV = (C.PVERTEXATTRIBL4UI64NV)(getProcAddr("glVertexAttribL4ui64NV")); pVertexAttribL4ui64NV == nil {
    NV_vertex_attrib_integer_64bit = false
  }
  if pVertexAttribL4ui64vNV = (C.PVERTEXATTRIBL4UI64VNV)(getProcAddr("glVertexAttribL4ui64vNV")); pVertexAttribL4ui64vNV == nil {
    NV_vertex_attrib_integer_64bit = false
  }
  if pVertexAttribLFormat = (C.PVERTEXATTRIBLFORMAT)(getProcAddr("glVertexAttribLFormat")); pVertexAttribLFormat == nil {
    ARB_vertex_attrib_binding = false
  }
  if pVertexAttribLFormatNV = (C.PVERTEXATTRIBLFORMATNV)(getProcAddr("glVertexAttribLFormatNV")); pVertexAttribLFormatNV == nil {
    NV_vertex_attrib_integer_64bit = false
  }
  if pVertexAttribLPointer = (C.PVERTEXATTRIBLPOINTER)(getProcAddr("glVertexAttribLPointer")); pVertexAttribLPointer == nil {
    ARB_vertex_attrib_64bit = false
    return errors.New("glVertexAttribLPointer")
  }
  if pVertexAttribLPointerEXT = (C.PVERTEXATTRIBLPOINTEREXT)(getProcAddr("glVertexAttribLPointerEXT")); pVertexAttribLPointerEXT == nil {
    EXT_vertex_attrib_64bit = false
  }
  if pVertexAttribP1ui = (C.PVERTEXATTRIBP1UI)(getProcAddr("glVertexAttribP1ui")); pVertexAttribP1ui == nil {
    ARB_vertex_type_2_10_10_10_rev = false
    return errors.New("glVertexAttribP1ui")
  }
  if pVertexAttribP1uiv = (C.PVERTEXATTRIBP1UIV)(getProcAddr("glVertexAttribP1uiv")); pVertexAttribP1uiv == nil {
    ARB_vertex_type_2_10_10_10_rev = false
    return errors.New("glVertexAttribP1uiv")
  }
  if pVertexAttribP2ui = (C.PVERTEXATTRIBP2UI)(getProcAddr("glVertexAttribP2ui")); pVertexAttribP2ui == nil {
    ARB_vertex_type_2_10_10_10_rev = false
    return errors.New("glVertexAttribP2ui")
  }
  if pVertexAttribP2uiv = (C.PVERTEXATTRIBP2UIV)(getProcAddr("glVertexAttribP2uiv")); pVertexAttribP2uiv == nil {
    ARB_vertex_type_2_10_10_10_rev = false
    return errors.New("glVertexAttribP2uiv")
  }
  if pVertexAttribP3ui = (C.PVERTEXATTRIBP3UI)(getProcAddr("glVertexAttribP3ui")); pVertexAttribP3ui == nil {
    ARB_vertex_type_2_10_10_10_rev = false
    return errors.New("glVertexAttribP3ui")
  }
  if pVertexAttribP3uiv = (C.PVERTEXATTRIBP3UIV)(getProcAddr("glVertexAttribP3uiv")); pVertexAttribP3uiv == nil {
    ARB_vertex_type_2_10_10_10_rev = false
    return errors.New("glVertexAttribP3uiv")
  }
  if pVertexAttribP4ui = (C.PVERTEXATTRIBP4UI)(getProcAddr("glVertexAttribP4ui")); pVertexAttribP4ui == nil {
    ARB_vertex_type_2_10_10_10_rev = false
    return errors.New("glVertexAttribP4ui")
  }
  if pVertexAttribP4uiv = (C.PVERTEXATTRIBP4UIV)(getProcAddr("glVertexAttribP4uiv")); pVertexAttribP4uiv == nil {
    ARB_vertex_type_2_10_10_10_rev = false
    return errors.New("glVertexAttribP4uiv")
  }
  if pVertexAttribParameteriAMD = (C.PVERTEXATTRIBPARAMETERIAMD)(getProcAddr("glVertexAttribParameteriAMD")); pVertexAttribParameteriAMD == nil {
    AMD_interleaved_elements = false
  }
  if pVertexAttribPointer = (C.PVERTEXATTRIBPOINTER)(getProcAddr("glVertexAttribPointer")); pVertexAttribPointer == nil {
    return errors.New("glVertexAttribPointer")
  }
  if pVertexAttribPointerARB = (C.PVERTEXATTRIBPOINTERARB)(getProcAddr("glVertexAttribPointerARB")); pVertexAttribPointerARB == nil {
    ARB_vertex_program = false
    ARB_vertex_shader = false
  }
  if pVertexAttribPointerNV = (C.PVERTEXATTRIBPOINTERNV)(getProcAddr("glVertexAttribPointerNV")); pVertexAttribPointerNV == nil {
    NV_vertex_program = false
  }
  if pVertexAttribs1dvNV = (C.PVERTEXATTRIBS1DVNV)(getProcAddr("glVertexAttribs1dvNV")); pVertexAttribs1dvNV == nil {
    NV_vertex_program = false
  }
  if pVertexAttribs1fvNV = (C.PVERTEXATTRIBS1FVNV)(getProcAddr("glVertexAttribs1fvNV")); pVertexAttribs1fvNV == nil {
    NV_vertex_program = false
  }
  if pVertexAttribs1hvNV = (C.PVERTEXATTRIBS1HVNV)(getProcAddr("glVertexAttribs1hvNV")); pVertexAttribs1hvNV == nil {
    NV_half_float = false
  }
  if pVertexAttribs1svNV = (C.PVERTEXATTRIBS1SVNV)(getProcAddr("glVertexAttribs1svNV")); pVertexAttribs1svNV == nil {
    NV_vertex_program = false
  }
  if pVertexAttribs2dvNV = (C.PVERTEXATTRIBS2DVNV)(getProcAddr("glVertexAttribs2dvNV")); pVertexAttribs2dvNV == nil {
    NV_vertex_program = false
  }
  if pVertexAttribs2fvNV = (C.PVERTEXATTRIBS2FVNV)(getProcAddr("glVertexAttribs2fvNV")); pVertexAttribs2fvNV == nil {
    NV_vertex_program = false
  }
  if pVertexAttribs2hvNV = (C.PVERTEXATTRIBS2HVNV)(getProcAddr("glVertexAttribs2hvNV")); pVertexAttribs2hvNV == nil {
    NV_half_float = false
  }
  if pVertexAttribs2svNV = (C.PVERTEXATTRIBS2SVNV)(getProcAddr("glVertexAttribs2svNV")); pVertexAttribs2svNV == nil {
    NV_vertex_program = false
  }
  if pVertexAttribs3dvNV = (C.PVERTEXATTRIBS3DVNV)(getProcAddr("glVertexAttribs3dvNV")); pVertexAttribs3dvNV == nil {
    NV_vertex_program = false
  }
  if pVertexAttribs3fvNV = (C.PVERTEXATTRIBS3FVNV)(getProcAddr("glVertexAttribs3fvNV")); pVertexAttribs3fvNV == nil {
    NV_vertex_program = false
  }
  if pVertexAttribs3hvNV = (C.PVERTEXATTRIBS3HVNV)(getProcAddr("glVertexAttribs3hvNV")); pVertexAttribs3hvNV == nil {
    NV_half_float = false
  }
  if pVertexAttribs3svNV = (C.PVERTEXATTRIBS3SVNV)(getProcAddr("glVertexAttribs3svNV")); pVertexAttribs3svNV == nil {
    NV_vertex_program = false
  }
  if pVertexAttribs4dvNV = (C.PVERTEXATTRIBS4DVNV)(getProcAddr("glVertexAttribs4dvNV")); pVertexAttribs4dvNV == nil {
    NV_vertex_program = false
  }
  if pVertexAttribs4fvNV = (C.PVERTEXATTRIBS4FVNV)(getProcAddr("glVertexAttribs4fvNV")); pVertexAttribs4fvNV == nil {
    NV_vertex_program = false
  }
  if pVertexAttribs4hvNV = (C.PVERTEXATTRIBS4HVNV)(getProcAddr("glVertexAttribs4hvNV")); pVertexAttribs4hvNV == nil {
    NV_half_float = false
  }
  if pVertexAttribs4svNV = (C.PVERTEXATTRIBS4SVNV)(getProcAddr("glVertexAttribs4svNV")); pVertexAttribs4svNV == nil {
    NV_vertex_program = false
  }
  if pVertexAttribs4ubvNV = (C.PVERTEXATTRIBS4UBVNV)(getProcAddr("glVertexAttribs4ubvNV")); pVertexAttribs4ubvNV == nil {
    NV_vertex_program = false
  }
  if pVertexBindingDivisor = (C.PVERTEXBINDINGDIVISOR)(getProcAddr("glVertexBindingDivisor")); pVertexBindingDivisor == nil {
    ARB_vertex_attrib_binding = false
  }
  if pVertexBlendARB = (C.PVERTEXBLENDARB)(getProcAddr("glVertexBlendARB")); pVertexBlendARB == nil {
    ARB_vertex_blend = false
  }
  if pVertexBlendEnvfATI = (C.PVERTEXBLENDENVFATI)(getProcAddr("glVertexBlendEnvfATI")); pVertexBlendEnvfATI == nil {
    ATI_vertex_streams = false
  }
  if pVertexBlendEnviATI = (C.PVERTEXBLENDENVIATI)(getProcAddr("glVertexBlendEnviATI")); pVertexBlendEnviATI == nil {
    ATI_vertex_streams = false
  }
  if pVertexFormatNV = (C.PVERTEXFORMATNV)(getProcAddr("glVertexFormatNV")); pVertexFormatNV == nil {
    NV_vertex_buffer_unified_memory = false
  }
  if pVertexPointerEXT = (C.PVERTEXPOINTEREXT)(getProcAddr("glVertexPointerEXT")); pVertexPointerEXT == nil {
    EXT_vertex_array = false
  }
  if pVertexPointerListIBM = (C.PVERTEXPOINTERLISTIBM)(getProcAddr("glVertexPointerListIBM")); pVertexPointerListIBM == nil {
    IBM_vertex_array_lists = false
  }
  if pVertexPointervINTEL = (C.PVERTEXPOINTERVINTEL)(getProcAddr("glVertexPointervINTEL")); pVertexPointervINTEL == nil {
    INTEL_parallel_arrays = false
  }
  if pVertexStream1dATI = (C.PVERTEXSTREAM1DATI)(getProcAddr("glVertexStream1dATI")); pVertexStream1dATI == nil {
    ATI_vertex_streams = false
  }
  if pVertexStream1dvATI = (C.PVERTEXSTREAM1DVATI)(getProcAddr("glVertexStream1dvATI")); pVertexStream1dvATI == nil {
    ATI_vertex_streams = false
  }
  if pVertexStream1fATI = (C.PVERTEXSTREAM1FATI)(getProcAddr("glVertexStream1fATI")); pVertexStream1fATI == nil {
    ATI_vertex_streams = false
  }
  if pVertexStream1fvATI = (C.PVERTEXSTREAM1FVATI)(getProcAddr("glVertexStream1fvATI")); pVertexStream1fvATI == nil {
    ATI_vertex_streams = false
  }
  if pVertexStream1iATI = (C.PVERTEXSTREAM1IATI)(getProcAddr("glVertexStream1iATI")); pVertexStream1iATI == nil {
    ATI_vertex_streams = false
  }
  if pVertexStream1ivATI = (C.PVERTEXSTREAM1IVATI)(getProcAddr("glVertexStream1ivATI")); pVertexStream1ivATI == nil {
    ATI_vertex_streams = false
  }
  if pVertexStream1sATI = (C.PVERTEXSTREAM1SATI)(getProcAddr("glVertexStream1sATI")); pVertexStream1sATI == nil {
    ATI_vertex_streams = false
  }
  if pVertexStream1svATI = (C.PVERTEXSTREAM1SVATI)(getProcAddr("glVertexStream1svATI")); pVertexStream1svATI == nil {
    ATI_vertex_streams = false
  }
  if pVertexStream2dATI = (C.PVERTEXSTREAM2DATI)(getProcAddr("glVertexStream2dATI")); pVertexStream2dATI == nil {
    ATI_vertex_streams = false
  }
  if pVertexStream2dvATI = (C.PVERTEXSTREAM2DVATI)(getProcAddr("glVertexStream2dvATI")); pVertexStream2dvATI == nil {
    ATI_vertex_streams = false
  }
  if pVertexStream2fATI = (C.PVERTEXSTREAM2FATI)(getProcAddr("glVertexStream2fATI")); pVertexStream2fATI == nil {
    ATI_vertex_streams = false
  }
  if pVertexStream2fvATI = (C.PVERTEXSTREAM2FVATI)(getProcAddr("glVertexStream2fvATI")); pVertexStream2fvATI == nil {
    ATI_vertex_streams = false
  }
  if pVertexStream2iATI = (C.PVERTEXSTREAM2IATI)(getProcAddr("glVertexStream2iATI")); pVertexStream2iATI == nil {
    ATI_vertex_streams = false
  }
  if pVertexStream2ivATI = (C.PVERTEXSTREAM2IVATI)(getProcAddr("glVertexStream2ivATI")); pVertexStream2ivATI == nil {
    ATI_vertex_streams = false
  }
  if pVertexStream2sATI = (C.PVERTEXSTREAM2SATI)(getProcAddr("glVertexStream2sATI")); pVertexStream2sATI == nil {
    ATI_vertex_streams = false
  }
  if pVertexStream2svATI = (C.PVERTEXSTREAM2SVATI)(getProcAddr("glVertexStream2svATI")); pVertexStream2svATI == nil {
    ATI_vertex_streams = false
  }
  if pVertexStream3dATI = (C.PVERTEXSTREAM3DATI)(getProcAddr("glVertexStream3dATI")); pVertexStream3dATI == nil {
    ATI_vertex_streams = false
  }
  if pVertexStream3dvATI = (C.PVERTEXSTREAM3DVATI)(getProcAddr("glVertexStream3dvATI")); pVertexStream3dvATI == nil {
    ATI_vertex_streams = false
  }
  if pVertexStream3fATI = (C.PVERTEXSTREAM3FATI)(getProcAddr("glVertexStream3fATI")); pVertexStream3fATI == nil {
    ATI_vertex_streams = false
  }
  if pVertexStream3fvATI = (C.PVERTEXSTREAM3FVATI)(getProcAddr("glVertexStream3fvATI")); pVertexStream3fvATI == nil {
    ATI_vertex_streams = false
  }
  if pVertexStream3iATI = (C.PVERTEXSTREAM3IATI)(getProcAddr("glVertexStream3iATI")); pVertexStream3iATI == nil {
    ATI_vertex_streams = false
  }
  if pVertexStream3ivATI = (C.PVERTEXSTREAM3IVATI)(getProcAddr("glVertexStream3ivATI")); pVertexStream3ivATI == nil {
    ATI_vertex_streams = false
  }
  if pVertexStream3sATI = (C.PVERTEXSTREAM3SATI)(getProcAddr("glVertexStream3sATI")); pVertexStream3sATI == nil {
    ATI_vertex_streams = false
  }
  if pVertexStream3svATI = (C.PVERTEXSTREAM3SVATI)(getProcAddr("glVertexStream3svATI")); pVertexStream3svATI == nil {
    ATI_vertex_streams = false
  }
  if pVertexStream4dATI = (C.PVERTEXSTREAM4DATI)(getProcAddr("glVertexStream4dATI")); pVertexStream4dATI == nil {
    ATI_vertex_streams = false
  }
  if pVertexStream4dvATI = (C.PVERTEXSTREAM4DVATI)(getProcAddr("glVertexStream4dvATI")); pVertexStream4dvATI == nil {
    ATI_vertex_streams = false
  }
  if pVertexStream4fATI = (C.PVERTEXSTREAM4FATI)(getProcAddr("glVertexStream4fATI")); pVertexStream4fATI == nil {
    ATI_vertex_streams = false
  }
  if pVertexStream4fvATI = (C.PVERTEXSTREAM4FVATI)(getProcAddr("glVertexStream4fvATI")); pVertexStream4fvATI == nil {
    ATI_vertex_streams = false
  }
  if pVertexStream4iATI = (C.PVERTEXSTREAM4IATI)(getProcAddr("glVertexStream4iATI")); pVertexStream4iATI == nil {
    ATI_vertex_streams = false
  }
  if pVertexStream4ivATI = (C.PVERTEXSTREAM4IVATI)(getProcAddr("glVertexStream4ivATI")); pVertexStream4ivATI == nil {
    ATI_vertex_streams = false
  }
  if pVertexStream4sATI = (C.PVERTEXSTREAM4SATI)(getProcAddr("glVertexStream4sATI")); pVertexStream4sATI == nil {
    ATI_vertex_streams = false
  }
  if pVertexStream4svATI = (C.PVERTEXSTREAM4SVATI)(getProcAddr("glVertexStream4svATI")); pVertexStream4svATI == nil {
    ATI_vertex_streams = false
  }
  if pVertexWeightPointerEXT = (C.PVERTEXWEIGHTPOINTEREXT)(getProcAddr("glVertexWeightPointerEXT")); pVertexWeightPointerEXT == nil {
    EXT_vertex_weighting = false
  }
  if pVertexWeightfEXT = (C.PVERTEXWEIGHTFEXT)(getProcAddr("glVertexWeightfEXT")); pVertexWeightfEXT == nil {
    EXT_vertex_weighting = false
  }
  if pVertexWeightfvEXT = (C.PVERTEXWEIGHTFVEXT)(getProcAddr("glVertexWeightfvEXT")); pVertexWeightfvEXT == nil {
    EXT_vertex_weighting = false
  }
  if pVertexWeighthNV = (C.PVERTEXWEIGHTHNV)(getProcAddr("glVertexWeighthNV")); pVertexWeighthNV == nil {
    NV_half_float = false
  }
  if pVertexWeighthvNV = (C.PVERTEXWEIGHTHVNV)(getProcAddr("glVertexWeighthvNV")); pVertexWeighthvNV == nil {
    NV_half_float = false
  }
  if pVideoCaptureNV = (C.PVIDEOCAPTURENV)(getProcAddr("glVideoCaptureNV")); pVideoCaptureNV == nil {
    NV_video_capture = false
  }
  if pVideoCaptureStreamParameterdvNV = (C.PVIDEOCAPTURESTREAMPARAMETERDVNV)(getProcAddr("glVideoCaptureStreamParameterdvNV")); pVideoCaptureStreamParameterdvNV == nil {
    NV_video_capture = false
  }
  if pVideoCaptureStreamParameterfvNV = (C.PVIDEOCAPTURESTREAMPARAMETERFVNV)(getProcAddr("glVideoCaptureStreamParameterfvNV")); pVideoCaptureStreamParameterfvNV == nil {
    NV_video_capture = false
  }
  if pVideoCaptureStreamParameterivNV = (C.PVIDEOCAPTURESTREAMPARAMETERIVNV)(getProcAddr("glVideoCaptureStreamParameterivNV")); pVideoCaptureStreamParameterivNV == nil {
    NV_video_capture = false
  }
  if pViewport = (C.PVIEWPORT)(getProcAddr("glViewport")); pViewport == nil {
    return errors.New("glViewport")
  }
  if pViewportArrayv = (C.PVIEWPORTARRAYV)(getProcAddr("glViewportArrayv")); pViewportArrayv == nil {
    ARB_viewport_array = false
    return errors.New("glViewportArrayv")
  }
  if pViewportIndexedf = (C.PVIEWPORTINDEXEDF)(getProcAddr("glViewportIndexedf")); pViewportIndexedf == nil {
    ARB_viewport_array = false
    return errors.New("glViewportIndexedf")
  }
  if pViewportIndexedfv = (C.PVIEWPORTINDEXEDFV)(getProcAddr("glViewportIndexedfv")); pViewportIndexedfv == nil {
    ARB_viewport_array = false
    return errors.New("glViewportIndexedfv")
  }
  if pWaitSync = (C.PWAITSYNC)(getProcAddr("glWaitSync")); pWaitSync == nil {
    ARB_sync = false
    return errors.New("glWaitSync")
  }
  if pWeightPathsNV = (C.PWEIGHTPATHSNV)(getProcAddr("glWeightPathsNV")); pWeightPathsNV == nil {
    NV_path_rendering = false
  }
  if pWeightPointerARB = (C.PWEIGHTPOINTERARB)(getProcAddr("glWeightPointerARB")); pWeightPointerARB == nil {
    ARB_vertex_blend = false
  }
  if pWeightbvARB = (C.PWEIGHTBVARB)(getProcAddr("glWeightbvARB")); pWeightbvARB == nil {
    ARB_vertex_blend = false
  }
  if pWeightdvARB = (C.PWEIGHTDVARB)(getProcAddr("glWeightdvARB")); pWeightdvARB == nil {
    ARB_vertex_blend = false
  }
  if pWeightfvARB = (C.PWEIGHTFVARB)(getProcAddr("glWeightfvARB")); pWeightfvARB == nil {
    ARB_vertex_blend = false
  }
  if pWeightivARB = (C.PWEIGHTIVARB)(getProcAddr("glWeightivARB")); pWeightivARB == nil {
    ARB_vertex_blend = false
  }
  if pWeightsvARB = (C.PWEIGHTSVARB)(getProcAddr("glWeightsvARB")); pWeightsvARB == nil {
    ARB_vertex_blend = false
  }
  if pWeightubvARB = (C.PWEIGHTUBVARB)(getProcAddr("glWeightubvARB")); pWeightubvARB == nil {
    ARB_vertex_blend = false
  }
  if pWeightuivARB = (C.PWEIGHTUIVARB)(getProcAddr("glWeightuivARB")); pWeightuivARB == nil {
    ARB_vertex_blend = false
  }
  if pWeightusvARB = (C.PWEIGHTUSVARB)(getProcAddr("glWeightusvARB")); pWeightusvARB == nil {
    ARB_vertex_blend = false
  }
  if pWindowPos2dARB = (C.PWINDOWPOS2DARB)(getProcAddr("glWindowPos2dARB")); pWindowPos2dARB == nil {
    ARB_window_pos = false
  }
  if pWindowPos2dMESA = (C.PWINDOWPOS2DMESA)(getProcAddr("glWindowPos2dMESA")); pWindowPos2dMESA == nil {
    MESA_window_pos = false
  }
  if pWindowPos2dvARB = (C.PWINDOWPOS2DVARB)(getProcAddr("glWindowPos2dvARB")); pWindowPos2dvARB == nil {
    ARB_window_pos = false
  }
  if pWindowPos2dvMESA = (C.PWINDOWPOS2DVMESA)(getProcAddr("glWindowPos2dvMESA")); pWindowPos2dvMESA == nil {
    MESA_window_pos = false
  }
  if pWindowPos2fARB = (C.PWINDOWPOS2FARB)(getProcAddr("glWindowPos2fARB")); pWindowPos2fARB == nil {
    ARB_window_pos = false
  }
  if pWindowPos2fMESA = (C.PWINDOWPOS2FMESA)(getProcAddr("glWindowPos2fMESA")); pWindowPos2fMESA == nil {
    MESA_window_pos = false
  }
  if pWindowPos2fvARB = (C.PWINDOWPOS2FVARB)(getProcAddr("glWindowPos2fvARB")); pWindowPos2fvARB == nil {
    ARB_window_pos = false
  }
  if pWindowPos2fvMESA = (C.PWINDOWPOS2FVMESA)(getProcAddr("glWindowPos2fvMESA")); pWindowPos2fvMESA == nil {
    MESA_window_pos = false
  }
  if pWindowPos2iARB = (C.PWINDOWPOS2IARB)(getProcAddr("glWindowPos2iARB")); pWindowPos2iARB == nil {
    ARB_window_pos = false
  }
  if pWindowPos2iMESA = (C.PWINDOWPOS2IMESA)(getProcAddr("glWindowPos2iMESA")); pWindowPos2iMESA == nil {
    MESA_window_pos = false
  }
  if pWindowPos2ivARB = (C.PWINDOWPOS2IVARB)(getProcAddr("glWindowPos2ivARB")); pWindowPos2ivARB == nil {
    ARB_window_pos = false
  }
  if pWindowPos2ivMESA = (C.PWINDOWPOS2IVMESA)(getProcAddr("glWindowPos2ivMESA")); pWindowPos2ivMESA == nil {
    MESA_window_pos = false
  }
  if pWindowPos2sARB = (C.PWINDOWPOS2SARB)(getProcAddr("glWindowPos2sARB")); pWindowPos2sARB == nil {
    ARB_window_pos = false
  }
  if pWindowPos2sMESA = (C.PWINDOWPOS2SMESA)(getProcAddr("glWindowPos2sMESA")); pWindowPos2sMESA == nil {
    MESA_window_pos = false
  }
  if pWindowPos2svARB = (C.PWINDOWPOS2SVARB)(getProcAddr("glWindowPos2svARB")); pWindowPos2svARB == nil {
    ARB_window_pos = false
  }
  if pWindowPos2svMESA = (C.PWINDOWPOS2SVMESA)(getProcAddr("glWindowPos2svMESA")); pWindowPos2svMESA == nil {
    MESA_window_pos = false
  }
  if pWindowPos3dARB = (C.PWINDOWPOS3DARB)(getProcAddr("glWindowPos3dARB")); pWindowPos3dARB == nil {
    ARB_window_pos = false
  }
  if pWindowPos3dMESA = (C.PWINDOWPOS3DMESA)(getProcAddr("glWindowPos3dMESA")); pWindowPos3dMESA == nil {
    MESA_window_pos = false
  }
  if pWindowPos3dvARB = (C.PWINDOWPOS3DVARB)(getProcAddr("glWindowPos3dvARB")); pWindowPos3dvARB == nil {
    ARB_window_pos = false
  }
  if pWindowPos3dvMESA = (C.PWINDOWPOS3DVMESA)(getProcAddr("glWindowPos3dvMESA")); pWindowPos3dvMESA == nil {
    MESA_window_pos = false
  }
  if pWindowPos3fARB = (C.PWINDOWPOS3FARB)(getProcAddr("glWindowPos3fARB")); pWindowPos3fARB == nil {
    ARB_window_pos = false
  }
  if pWindowPos3fMESA = (C.PWINDOWPOS3FMESA)(getProcAddr("glWindowPos3fMESA")); pWindowPos3fMESA == nil {
    MESA_window_pos = false
  }
  if pWindowPos3fvARB = (C.PWINDOWPOS3FVARB)(getProcAddr("glWindowPos3fvARB")); pWindowPos3fvARB == nil {
    ARB_window_pos = false
  }
  if pWindowPos3fvMESA = (C.PWINDOWPOS3FVMESA)(getProcAddr("glWindowPos3fvMESA")); pWindowPos3fvMESA == nil {
    MESA_window_pos = false
  }
  if pWindowPos3iARB = (C.PWINDOWPOS3IARB)(getProcAddr("glWindowPos3iARB")); pWindowPos3iARB == nil {
    ARB_window_pos = false
  }
  if pWindowPos3iMESA = (C.PWINDOWPOS3IMESA)(getProcAddr("glWindowPos3iMESA")); pWindowPos3iMESA == nil {
    MESA_window_pos = false
  }
  if pWindowPos3ivARB = (C.PWINDOWPOS3IVARB)(getProcAddr("glWindowPos3ivARB")); pWindowPos3ivARB == nil {
    ARB_window_pos = false
  }
  if pWindowPos3ivMESA = (C.PWINDOWPOS3IVMESA)(getProcAddr("glWindowPos3ivMESA")); pWindowPos3ivMESA == nil {
    MESA_window_pos = false
  }
  if pWindowPos3sARB = (C.PWINDOWPOS3SARB)(getProcAddr("glWindowPos3sARB")); pWindowPos3sARB == nil {
    ARB_window_pos = false
  }
  if pWindowPos3sMESA = (C.PWINDOWPOS3SMESA)(getProcAddr("glWindowPos3sMESA")); pWindowPos3sMESA == nil {
    MESA_window_pos = false
  }
  if pWindowPos3svARB = (C.PWINDOWPOS3SVARB)(getProcAddr("glWindowPos3svARB")); pWindowPos3svARB == nil {
    ARB_window_pos = false
  }
  if pWindowPos3svMESA = (C.PWINDOWPOS3SVMESA)(getProcAddr("glWindowPos3svMESA")); pWindowPos3svMESA == nil {
    MESA_window_pos = false
  }
  if pWindowPos4dMESA = (C.PWINDOWPOS4DMESA)(getProcAddr("glWindowPos4dMESA")); pWindowPos4dMESA == nil {
    MESA_window_pos = false
  }
  if pWindowPos4dvMESA = (C.PWINDOWPOS4DVMESA)(getProcAddr("glWindowPos4dvMESA")); pWindowPos4dvMESA == nil {
    MESA_window_pos = false
  }
  if pWindowPos4fMESA = (C.PWINDOWPOS4FMESA)(getProcAddr("glWindowPos4fMESA")); pWindowPos4fMESA == nil {
    MESA_window_pos = false
  }
  if pWindowPos4fvMESA = (C.PWINDOWPOS4FVMESA)(getProcAddr("glWindowPos4fvMESA")); pWindowPos4fvMESA == nil {
    MESA_window_pos = false
  }
  if pWindowPos4iMESA = (C.PWINDOWPOS4IMESA)(getProcAddr("glWindowPos4iMESA")); pWindowPos4iMESA == nil {
    MESA_window_pos = false
  }
  if pWindowPos4ivMESA = (C.PWINDOWPOS4IVMESA)(getProcAddr("glWindowPos4ivMESA")); pWindowPos4ivMESA == nil {
    MESA_window_pos = false
  }
  if pWindowPos4sMESA = (C.PWINDOWPOS4SMESA)(getProcAddr("glWindowPos4sMESA")); pWindowPos4sMESA == nil {
    MESA_window_pos = false
  }
  if pWindowPos4svMESA = (C.PWINDOWPOS4SVMESA)(getProcAddr("glWindowPos4svMESA")); pWindowPos4svMESA == nil {
    MESA_window_pos = false
  }
  if pWriteMaskEXT = (C.PWRITEMASKEXT)(getProcAddr("glWriteMaskEXT")); pWriteMaskEXT == nil {
    EXT_vertex_shader = false
  }
	return nil
}
